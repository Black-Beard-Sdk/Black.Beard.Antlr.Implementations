//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Asts
{
    using System;
    using Antlr4.Runtime;
    using System.Collections;
    using Antlr4.Runtime.Tree;
    using Bb.Parsers;
    
    
    /// <summary>
    /// tsql_file
    /// 	 : batch*  EOF
    /// 	 | execute_body_batch  go_statement*  EOF
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTsqlFile : AstRule
    {
        
        public AstTsqlFile(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTsqlFile(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTsqlFile(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTsqlFile(this);
        }
    }
    
    /// <summary>
    /// batch
    /// 	 : go_statement
    /// 	 | execute_body_batch?  go_statement sql_clauses  go_statement*
    /// 	 | batch_level_statement  go_statement*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBatch : AstRule
    {
        
        public AstBatch(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstBatch(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstBatch(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBatch(this);
        }
    }
    
    /// <summary>
    /// sql_clauses
    /// 	 : sql_clause+
    /// </summary>
    /// <remarks>
    /// Strategy : ClassList
    /// </remarks>
    public partial class AstSqlClauses : AstRuleList<AstSqlClause>
    {
        
        public AstSqlClauses(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstSqlClauses(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlClauses(this);
        }
    }
    
    /// <summary>
    /// sql_clause
    /// 	 : dml_clause  SEMI?
    /// 	 | cfl_statement  SEMI?
    /// 	 | another_statement  SEMI?
    /// 	 | ddl_clause  SEMI?
    /// 	 | dbcc_special  SEMI?
    /// 	 | dbcc_clause  SEMI?
    /// 	 | backup_statement  SEMI?
    /// 	 | SEMI
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSqlClause : AstRule
    {
        
        public AstSqlClause(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSqlClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSqlClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlClause(this);
        }
    }
    
    /// <summary>
    /// block_statement
    /// 	 : BEGIN  SEMI?  sql_clause*  END  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstBlockStatement : AstRule
    {
        
        private AstSqlClause _sqlClause;
        
        public AstBlockStatement(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlClause>())
                {
                    this._sqlClause = ((AstSqlClause)(enumerator.Current));
                }
            }
        }
        
        public AstBlockStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlClause>())
                {
                    this._sqlClause = ((AstSqlClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSqlClause SqlClause
        {
            get
            {
                return this._sqlClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBlockStatement(this);
        }
    }
    
    /// <summary>
    /// break_statement
    /// 	 : BREAK  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBreakStatement : AstRule
    {
        
        public AstBreakStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstBreakStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstBreakStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBreakStatement(this);
        }
    }
    
    /// <summary>
    /// continue_statement
    /// 	 : CONTINUE  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstContinueStatement : AstRule
    {
        
        public AstContinueStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstContinueStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstContinueStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContinueStatement(this);
        }
    }
    
    /// <summary>
    /// goto_statement
    /// 	 : GOTO  id_  SEMI?
    /// 	 | id_  COLON  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGotoStatement : AstRule
    {
        
        public AstGotoStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstGotoStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstGotoStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGotoStatement(this);
        }
    }
    
    /// <summary>
    /// return_statement
    /// 	 : RETURN  expression?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstReturnStatement : AstRule
    {
        
        private AstExpression _expression;
        
        public AstReturnStatement(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstReturnStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReturnStatement(this);
        }
    }
    
    /// <summary>
    /// if_statement
    /// 	 : IF  search_condition    ELSE  ?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstIfStatement : AstRule
    {
        
        private AstSearchCondition _searchCondition;
        
        public AstIfStatement(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstIfStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIfStatement(this);
        }
    }
    
    /// <summary>
    /// throw_statement
    /// 	 : THROW  throw_error_number  COMMA  throw_message  COMMA  throw_state?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstThrowStatement : AstRule
    {
        
        public AstThrowStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstThrowStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstThrowStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowStatement(this);
        }
    }
    
    /// <summary>
    /// throw_error_number
    /// 	 : DECIMAL
    /// 	 | LOCAL_ID
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstThrowErrorNumber : AstRule
    {
        
        public AstThrowErrorNumber(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstThrowErrorNumber(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstThrowErrorNumber(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowErrorNumber(this);
        }
    }
    
    /// <summary>
    /// throw_message
    /// 	 : STRING
    /// 	 | LOCAL_ID
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstThrowMessage : AstRule
    {
        
        public AstThrowMessage(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstThrowMessage(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstThrowMessage(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowMessage(this);
        }
    }
    
    /// <summary>
    /// throw_state
    /// 	 : DECIMAL
    /// 	 | LOCAL_ID
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstThrowState : AstRule
    {
        
        public AstThrowState(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstThrowState(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstThrowState(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowState(this);
        }
    }
    
    /// <summary>
    /// try_catch_statement
    /// 	 : BEGIN  TRY  SEMI?    END  TRY  SEMI?  BEGIN  CATCH  SEMI?    END  CATCH  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTryCatchStatement : AstRule
    {
        
        public AstTryCatchStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTryCatchStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTryCatchStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTryCatchStatement(this);
        }
    }
    
    /// <summary>
    /// waitfor_statement
    /// 	 : WAITFOR  receive_statement?  COMMA?  DELAY TIME TIMEOUT  time?  expression?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstWaitforStatement : AstRule
    {
        
        private AstReceiveStatement _receiveStatement;
        
        private AstExpression _expression;
        
        public AstWaitforStatement(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReceiveStatement>())
                {
                    this._receiveStatement = ((AstReceiveStatement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstWaitforStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReceiveStatement>())
                {
                    this._receiveStatement = ((AstReceiveStatement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstReceiveStatement ReceiveStatement
        {
            get
            {
                return this._receiveStatement;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWaitforStatement(this);
        }
    }
    
    /// <summary>
    /// while_statement
    /// 	 : WHILE  search_condition  sql_clause BREAK  SEMI? CONTINUE  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstWhileStatement : AstRule
    {
        
        private AstSearchCondition _searchCondition;
        
        public AstWhileStatement(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstWhileStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWhileStatement(this);
        }
    }
    
    /// <summary>
    /// print_statement
    /// 	 : PRINT  expression DOUBLE_QUOTE_ID  COMMA  LOCAL_ID*  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPrintStatement : AstRule
    {
        
        public AstPrintStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstPrintStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstPrintStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrintStatement(this);
        }
    }
    
    /// <summary>
    /// raiseerror_statement
    /// 	 : RAISERROR  LR_BRACKET    COMMA    COMMA    COMMA  constant_LOCAL_ID NULL_*  RR_BRACKET  WITH  LOG SETERROR NOWAIT?  SEMI?
    /// 	 | RAISERROR  DECIMAL    COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRaiseerrorStatement : AstRule
    {
        
        public AstRaiseerrorStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstRaiseerrorStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstRaiseerrorStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRaiseerrorStatement(this);
        }
    }
    
    /// <summary>
    /// empty_statement
    /// 	 : SEMI
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstEmptyStatement : AstTerminal<string>
    {
        
        public AstEmptyStatement(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstEmptyStatement(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstEmptyStatement(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEmptyStatement(this);
        }
    }
    
    /// <summary>
    /// alter_application_role
    /// 	 : ALTER  APPLICATION  ROLE  application_role  WITH  COMMA?  NAME  EQUAL  new_application_role_name?  COMMA?  PASSWORD  EQUAL  ?  COMMA?  DEFAULT_SCHEMA  EQUAL  app_role_schema?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterApplicationRole : AstRule
    {
        
        private AstApplicationRole _applicationRole;
        
        public AstAlterApplicationRole(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstApplicationRole>())
                {
                    this._applicationRole = ((AstApplicationRole)(enumerator.Current));
                }
            }
        }
        
        public AstAlterApplicationRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstApplicationRole>())
                {
                    this._applicationRole = ((AstApplicationRole)(enumerator.Current));
                }
            }
        }
        
        public virtual AstApplicationRole ApplicationRole
        {
            get
            {
                return this._applicationRole;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterApplicationRole(this);
        }
    }
    
    /// <summary>
    /// create_application_role
    /// 	 : CREATE  APPLICATION  ROLE  application_role  WITH  COMMA?  PASSWORD  EQUAL  ?  COMMA?  DEFAULT_SCHEMA  EQUAL  app_role_schema?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateApplicationRole : AstRule
    {
        
        private AstApplicationRole _applicationRole;
        
        public AstCreateApplicationRole(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstApplicationRole>())
                {
                    this._applicationRole = ((AstApplicationRole)(enumerator.Current));
                }
            }
        }
        
        public AstCreateApplicationRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstApplicationRole>())
                {
                    this._applicationRole = ((AstApplicationRole)(enumerator.Current));
                }
            }
        }
        
        public virtual AstApplicationRole ApplicationRole
        {
            get
            {
                return this._applicationRole;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateApplicationRole(this);
        }
    }
    
    /// <summary>
    /// drop_aggregate
    /// 	 : DROP  AGGREGATE  IF  EXISTS?  schema_name  DOT?  aggregate_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropAggregate : AstRule
    {
        
        private AstAggregateName _aggregateName;
        
        public AstDropAggregate(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAggregateName>())
                {
                    this._aggregateName = ((AstAggregateName)(enumerator.Current));
                }
            }
        }
        
        public AstDropAggregate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAggregateName>())
                {
                    this._aggregateName = ((AstAggregateName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAggregateName AggregateName
        {
            get
            {
                return this._aggregateName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAggregate(this);
        }
    }
    
    /// <summary>
    /// drop_application_role
    /// 	 : DROP  APPLICATION  ROLE  role_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropApplicationRole : AstRule
    {
        
        private AstRoleName _roleName;
        
        public AstDropApplicationRole(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this._roleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public AstDropApplicationRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this._roleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleName RoleName
        {
            get
            {
                return this._roleName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropApplicationRole(this);
        }
    }
    
    /// <summary>
    /// alter_assembly
    /// 	 : alter_assembly_start  assembly_name  alter_assembly_clause
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAssembly : AstRule
    {
        
        private AstAlterAssemblyStart _alterAssemblyStart;
        
        private AstAssemblyName _assemblyName;
        
        private AstAlterAssemblyClause _alterAssemblyClause;
        
        public AstAlterAssembly(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyStart>())
                {
                    this._alterAssemblyStart = ((AstAlterAssemblyStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyName>())
                {
                    this._assemblyName = ((AstAssemblyName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyClause>())
                {
                    this._alterAssemblyClause = ((AstAlterAssemblyClause)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssembly(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyStart>())
                {
                    this._alterAssemblyStart = ((AstAlterAssemblyStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyName>())
                {
                    this._assemblyName = ((AstAssemblyName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyClause>())
                {
                    this._alterAssemblyClause = ((AstAlterAssemblyClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyStart AlterAssemblyStart
        {
            get
            {
                return this._alterAssemblyStart;
            }
        }
        
        public virtual AstAssemblyName AssemblyName
        {
            get
            {
                return this._assemblyName;
            }
        }
        
        public virtual AstAlterAssemblyClause AlterAssemblyClause
        {
            get
            {
                return this._alterAssemblyClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssembly(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_start
    /// 	 : ALTER  ASSEMBLY
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterAssemblyStart : AstRule
    {
        
        public AstAlterAssemblyStart(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterAssemblyStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterAssemblyStart(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyStart(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_clause
    /// 	 : alter_assembly_from_clause?  alter_assembly_with_clause?  alter_assembly_drop_clause?  alter_assembly_add_clause?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAssemblyClause : AstRule
    {
        
        private AstAlterAssemblyFromClause _alterAssemblyFromClause;
        
        private AstAlterAssemblyWithClause _alterAssemblyWithClause;
        
        private AstAlterAssemblyDropClause _alterAssemblyDropClause;
        
        private AstAlterAssemblyAddClause _alterAssemblyAddClause;
        
        public AstAlterAssemblyClause(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClause>())
                {
                    this._alterAssemblyFromClause = ((AstAlterAssemblyFromClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyWithClause>())
                {
                    this._alterAssemblyWithClause = ((AstAlterAssemblyWithClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropClause>())
                {
                    this._alterAssemblyDropClause = ((AstAlterAssemblyDropClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyAddClause>())
                {
                    this._alterAssemblyAddClause = ((AstAlterAssemblyAddClause)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClause>())
                {
                    this._alterAssemblyFromClause = ((AstAlterAssemblyFromClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyWithClause>())
                {
                    this._alterAssemblyWithClause = ((AstAlterAssemblyWithClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropClause>())
                {
                    this._alterAssemblyDropClause = ((AstAlterAssemblyDropClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyAddClause>())
                {
                    this._alterAssemblyAddClause = ((AstAlterAssemblyAddClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyFromClause AlterAssemblyFromClause
        {
            get
            {
                return this._alterAssemblyFromClause;
            }
        }
        
        public virtual AstAlterAssemblyWithClause AlterAssemblyWithClause
        {
            get
            {
                return this._alterAssemblyWithClause;
            }
        }
        
        public virtual AstAlterAssemblyDropClause AlterAssemblyDropClause
        {
            get
            {
                return this._alterAssemblyDropClause;
            }
        }
        
        public virtual AstAlterAssemblyAddClause AlterAssemblyAddClause
        {
            get
            {
                return this._alterAssemblyAddClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyClause(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_from_clause
    /// 	 : alter_assembly_from_clause_start  client_assembly_specifier alter_assembly_file_bits
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAssemblyFromClause : AstRule
    {
        
        private AstAlterAssemblyFromClauseStart _alterAssemblyFromClauseStart;
        
        public AstAlterAssemblyFromClause(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClauseStart>())
                {
                    this._alterAssemblyFromClauseStart = ((AstAlterAssemblyFromClauseStart)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyFromClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClauseStart>())
                {
                    this._alterAssemblyFromClauseStart = ((AstAlterAssemblyFromClauseStart)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyFromClauseStart AlterAssemblyFromClauseStart
        {
            get
            {
                return this._alterAssemblyFromClauseStart;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyFromClause(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_from_clause_start
    /// 	 : FROM
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAlterAssemblyFromClauseStart : AstTerminal<string>
    {
        
        public AstAlterAssemblyFromClauseStart(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstAlterAssemblyFromClauseStart(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAlterAssemblyFromClauseStart(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyFromClauseStart(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_drop_clause
    /// 	 : alter_assembly_drop  alter_assembly_drop_multiple_files
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAssemblyDropClause : AstRule
    {
        
        private AstAlterAssemblyDrop _alterAssemblyDrop;
        
        private AstAlterAssemblyDropMultipleFiles _alterAssemblyDropMultipleFiles;
        
        public AstAlterAssemblyDropClause(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyDrop>())
                {
                    this._alterAssemblyDrop = ((AstAlterAssemblyDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropMultipleFiles>())
                {
                    this._alterAssemblyDropMultipleFiles = ((AstAlterAssemblyDropMultipleFiles)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyDropClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyDrop>())
                {
                    this._alterAssemblyDrop = ((AstAlterAssemblyDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropMultipleFiles>())
                {
                    this._alterAssemblyDropMultipleFiles = ((AstAlterAssemblyDropMultipleFiles)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyDrop AlterAssemblyDrop
        {
            get
            {
                return this._alterAssemblyDrop;
            }
        }
        
        public virtual AstAlterAssemblyDropMultipleFiles AlterAssemblyDropMultipleFiles
        {
            get
            {
                return this._alterAssemblyDropMultipleFiles;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyDropClause(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_drop_multiple_files
    /// 	 : ALL
    /// 	 | multiple_local_files
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterAssemblyDropMultipleFiles : AstRule
    {
        
        public AstAlterAssemblyDropMultipleFiles(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterAssemblyDropMultipleFiles(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterAssemblyDropMultipleFiles(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyDropMultipleFiles(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_drop
    /// 	 : DROP
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAlterAssemblyDrop : AstTerminal<string>
    {
        
        public AstAlterAssemblyDrop(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstAlterAssemblyDrop(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAlterAssemblyDrop(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyDrop(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_add_clause
    /// 	 : alter_asssembly_add_clause_start  alter_assembly_client_file_clause
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAssemblyAddClause : AstRule
    {
        
        private AstAlterAsssemblyAddClauseStart _alterAsssemblyAddClauseStart;
        
        private AstAlterAssemblyClientFileClause _alterAssemblyClientFileClause;
        
        public AstAlterAssemblyAddClause(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAsssemblyAddClauseStart>())
                {
                    this._alterAsssemblyAddClauseStart = ((AstAlterAsssemblyAddClauseStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyClientFileClause>())
                {
                    this._alterAssemblyClientFileClause = ((AstAlterAssemblyClientFileClause)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyAddClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAsssemblyAddClauseStart>())
                {
                    this._alterAsssemblyAddClauseStart = ((AstAlterAsssemblyAddClauseStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyClientFileClause>())
                {
                    this._alterAssemblyClientFileClause = ((AstAlterAssemblyClientFileClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAsssemblyAddClauseStart AlterAsssemblyAddClauseStart
        {
            get
            {
                return this._alterAsssemblyAddClauseStart;
            }
        }
        
        public virtual AstAlterAssemblyClientFileClause AlterAssemblyClientFileClause
        {
            get
            {
                return this._alterAssemblyClientFileClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyAddClause(this);
        }
    }
    
    /// <summary>
    /// alter_asssembly_add_clause_start
    /// 	 : ADD  FILE  FROM
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterAsssemblyAddClauseStart : AstRule
    {
        
        public AstAlterAsssemblyAddClauseStart(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterAsssemblyAddClauseStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterAsssemblyAddClauseStart(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAsssemblyAddClauseStart(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_client_file_clause
    /// 	 : alter_assembly_file_name  alter_assembly_as  id_?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAssemblyClientFileClause : AstRule
    {
        
        private AstAlterAssemblyFileName _alterAssemblyFileName;
        
        public AstAlterAssemblyClientFileClause(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFileName>())
                {
                    this._alterAssemblyFileName = ((AstAlterAssemblyFileName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyClientFileClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFileName>())
                {
                    this._alterAssemblyFileName = ((AstAlterAssemblyFileName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyFileName AlterAssemblyFileName
        {
            get
            {
                return this._alterAssemblyFileName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyClientFileClause(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_file_name
    /// 	 : STRING
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAlterAssemblyFileName : AstTerminal<string>
    {
        
        public AstAlterAssemblyFileName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstAlterAssemblyFileName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAlterAssemblyFileName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyFileName(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_file_bits
    /// 	 : alter_assembly_as  id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAssemblyFileBits : AstRule
    {
        
        private AstAlterAssemblyAs _alterAssemblyAs;
        
        private AstId _id;
        
        public AstAlterAssemblyFileBits(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyAs>())
                {
                    this._alterAssemblyAs = ((AstAlterAssemblyAs)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyFileBits(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyAs>())
                {
                    this._alterAssemblyAs = ((AstAlterAssemblyAs)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyAs AlterAssemblyAs
        {
            get
            {
                return this._alterAssemblyAs;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyFileBits(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_as
    /// 	 : AS
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAlterAssemblyAs : AstTerminal<string>
    {
        
        public AstAlterAssemblyAs(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstAlterAssemblyAs(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAlterAssemblyAs(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyAs(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_with_clause
    /// 	 : alter_assembly_with  assembly_option
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAssemblyWithClause : AstRule
    {
        
        private AstAlterAssemblyWith _alterAssemblyWith;
        
        private AstAssemblyOption _assemblyOption;
        
        public AstAlterAssemblyWithClause(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyWith>())
                {
                    this._alterAssemblyWith = ((AstAlterAssemblyWith)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyOption>())
                {
                    this._assemblyOption = ((AstAssemblyOption)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyWithClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyWith>())
                {
                    this._alterAssemblyWith = ((AstAlterAssemblyWith)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyOption>())
                {
                    this._assemblyOption = ((AstAssemblyOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyWith AlterAssemblyWith
        {
            get
            {
                return this._alterAssemblyWith;
            }
        }
        
        public virtual AstAssemblyOption AssemblyOption
        {
            get
            {
                return this._assemblyOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyWithClause(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_with
    /// 	 : WITH
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAlterAssemblyWith : AstTerminal<string>
    {
        
        public AstAlterAssemblyWith(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstAlterAssemblyWith(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAlterAssemblyWith(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyWith(this);
        }
    }
    
    /// <summary>
    /// client_assembly_specifier
    /// 	 : network_file_share
    /// 	 | local_file
    /// 	 | STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstClientAssemblySpecifier : AstRule
    {
        
        public AstClientAssemblySpecifier(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstClientAssemblySpecifier(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstClientAssemblySpecifier(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClientAssemblySpecifier(this);
        }
    }
    
    /// <summary>
    /// assembly_option
    /// 	 : PERMISSION_SET  EQUAL  SAFE EXTERNAL_ACCESS UNSAFE
    /// 	 | VISIBILITY  EQUAL  on_off
    /// 	 | UNCHECKED  DATA
    /// 	 | assembly_option  COMMA
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAssemblyOption : AstRule
    {
        
        public AstAssemblyOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAssemblyOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAssemblyOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAssemblyOption(this);
        }
    }
    
    /// <summary>
    /// network_file_share
    /// 	 : network_file_start  network_computer  file_path
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstNetworkFileShare : AstRule
    {
        
        private AstNetworkFileStart _networkFileStart;
        
        private AstNetworkComputer _networkComputer;
        
        private AstFilePath _filePath;
        
        public AstNetworkFileShare(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNetworkFileStart>())
                {
                    this._networkFileStart = ((AstNetworkFileStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstNetworkComputer>())
                {
                    this._networkComputer = ((AstNetworkComputer)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this._filePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public AstNetworkFileShare(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNetworkFileStart>())
                {
                    this._networkFileStart = ((AstNetworkFileStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstNetworkComputer>())
                {
                    this._networkComputer = ((AstNetworkComputer)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this._filePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public virtual AstNetworkFileStart NetworkFileStart
        {
            get
            {
                return this._networkFileStart;
            }
        }
        
        public virtual AstNetworkComputer NetworkComputer
        {
            get
            {
                return this._networkComputer;
            }
        }
        
        public virtual AstFilePath FilePath
        {
            get
            {
                return this._filePath;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNetworkFileShare(this);
        }
    }
    
    /// <summary>
    /// network_file_start
    /// 	 : DOUBLE_BACK_SLASH
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstNetworkFileStart : AstTerminal<string>
    {
        
        public AstNetworkFileStart(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstNetworkFileStart(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstNetworkFileStart(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNetworkFileStart(this);
        }
    }
    
    /// <summary>
    /// file_path
    /// 	 : file_directory_path_separator  file_path
    /// 	 | id_
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFilePath : AstRule
    {
        
        public AstFilePath(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstFilePath(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstFilePath(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilePath(this);
        }
    }
    
    /// <summary>
    /// file_directory_path_separator
    /// 	 : BACKSLASH
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstFileDirectoryPathSeparator : AstTerminal<string>
    {
        
        public AstFileDirectoryPathSeparator(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstFileDirectoryPathSeparator(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstFileDirectoryPathSeparator(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileDirectoryPathSeparator(this);
        }
    }
    
    /// <summary>
    /// local_file
    /// 	 : local_drive  file_path
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstLocalFile : AstRule
    {
        
        private AstLocalDrive _localDrive;
        
        private AstFilePath _filePath;
        
        public AstLocalFile(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalDrive>())
                {
                    this._localDrive = ((AstLocalDrive)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this._filePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public AstLocalFile(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalDrive>())
                {
                    this._localDrive = ((AstLocalDrive)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this._filePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalDrive LocalDrive
        {
            get
            {
                return this._localDrive;
            }
        }
        
        public virtual AstFilePath FilePath
        {
            get
            {
                return this._filePath;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLocalFile(this);
        }
    }
    
    /// <summary>
    /// local_drive
    /// 	 : DISK_DRIVE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstLocalDrive : AstTerminal<string>
    {
        
        public AstLocalDrive(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstLocalDrive(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstLocalDrive(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLocalDrive(this);
        }
    }
    
    /// <summary>
    /// multiple_local_files
    /// 	 : multiple_local_file_start  local_file  SINGLE_QUOTE  COMMA
    /// 	 | local_file
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstMultipleLocalFiles : AstRule
    {
        
        public AstMultipleLocalFiles(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstMultipleLocalFiles(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstMultipleLocalFiles(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMultipleLocalFiles(this);
        }
    }
    
    /// <summary>
    /// multiple_local_file_start
    /// 	 : SINGLE_QUOTE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstMultipleLocalFileStart : AstTerminal<string>
    {
        
        public AstMultipleLocalFileStart(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstMultipleLocalFileStart(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstMultipleLocalFileStart(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMultipleLocalFileStart(this);
        }
    }
    
    /// <summary>
    /// create_assembly
    /// 	 : CREATE  ASSEMBLY  assembly_name  AUTHORIZATION  owner_name?  FROM  binary_content_nexts  WITH  PERMISSION_SET  EQUAL  SAFE EXTERNAL_ACCESS UNSAFE?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateAssembly : AstRule
    {
        
        private AstAssemblyName _assemblyName;
        
        private AstBinaryContentNexts _binaryContentNexts;
        
        public AstCreateAssembly(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyName>())
                {
                    this._assemblyName = ((AstAssemblyName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinaryContentNexts>())
                {
                    this._binaryContentNexts = ((AstBinaryContentNexts)(enumerator.Current));
                }
            }
        }
        
        public AstCreateAssembly(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyName>())
                {
                    this._assemblyName = ((AstAssemblyName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinaryContentNexts>())
                {
                    this._binaryContentNexts = ((AstBinaryContentNexts)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblyName AssemblyName
        {
            get
            {
                return this._assemblyName;
            }
        }
        
        public virtual AstBinaryContentNexts BinaryContentNexts
        {
            get
            {
                return this._binaryContentNexts;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateAssembly(this);
        }
    }
    
    /// <summary>
    /// binary_content_nexts
    /// 	 : binary_content_next+
    /// </summary>
    /// <remarks>
    /// Strategy : ClassList
    /// </remarks>
    public partial class AstBinaryContentNexts : AstRuleList<AstBinaryContentNext>
    {
        
        public AstBinaryContentNexts(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstBinaryContentNexts(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBinaryContentNexts(this);
        }
    }
    
    /// <summary>
    /// binary_content_next
    /// 	 : COMMA?  binary_content
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstBinaryContentNext : AstRule
    {
        
        private AstBinaryContent _binaryContent;
        
        public AstBinaryContentNext(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBinaryContent>())
                {
                    this._binaryContent = ((AstBinaryContent)(enumerator.Current));
                }
            }
        }
        
        public AstBinaryContentNext(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBinaryContent>())
                {
                    this._binaryContent = ((AstBinaryContent)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBinaryContent BinaryContent
        {
            get
            {
                return this._binaryContent;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBinaryContentNext(this);
        }
    }
    
    /// <summary>
    /// binary_content
    /// 	 : STRING
    /// 	 | BINARY
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBinaryContent : AstRule
    {
        
        public AstBinaryContent(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstBinaryContent(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstBinaryContent(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBinaryContent(this);
        }
    }
    
    /// <summary>
    /// drop_assembly
    /// 	 : DROP  ASSEMBLY  IF  EXISTS?  COMMA?  assembly_name+  WITH  NO  DEPENDENTS?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropAssembly : AstRule
    {
        
        public AstDropAssembly(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropAssembly(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropAssembly(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAssembly(this);
        }
    }
    
    /// <summary>
    /// alter_asymmetric_key
    /// 	 : alter_asymmetric_key_start  asym_key_name  asymmetric_key_option REMOVE  PRIVATE  KEY
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAsymmetricKey : AstRule
    {
        
        private AstAlterAsymmetricKeyStart _alterAsymmetricKeyStart;
        
        private AstAsymKeyName _asymKeyName;
        
        public AstAlterAsymmetricKey(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAsymmetricKeyStart>())
                {
                    this._alterAsymmetricKeyStart = ((AstAlterAsymmetricKeyStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymKeyName>())
                {
                    this._asymKeyName = ((AstAsymKeyName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAsymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAsymmetricKeyStart>())
                {
                    this._alterAsymmetricKeyStart = ((AstAlterAsymmetricKeyStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymKeyName>())
                {
                    this._asymKeyName = ((AstAsymKeyName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAsymmetricKeyStart AlterAsymmetricKeyStart
        {
            get
            {
                return this._alterAsymmetricKeyStart;
            }
        }
        
        public virtual AstAsymKeyName AsymKeyName
        {
            get
            {
                return this._asymKeyName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAsymmetricKey(this);
        }
    }
    
    /// <summary>
    /// alter_asymmetric_key_start
    /// 	 : ALTER  ASYMMETRIC  KEY
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterAsymmetricKeyStart : AstRule
    {
        
        public AstAlterAsymmetricKeyStart(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterAsymmetricKeyStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterAsymmetricKeyStart(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAsymmetricKeyStart(this);
        }
    }
    
    /// <summary>
    /// asymmetric_key_option
    /// 	 : asymmetric_key_option_start  asymmetric_key_password_change_option  COMMA  asymmetric_key_password_change_option?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAsymmetricKeyOption : AstRule
    {
        
        private AstAsymmetricKeyOptionStart _asymmetricKeyOptionStart;
        
        private AstAsymmetricKeyPasswordChangeOption _asymmetricKeyPasswordChangeOption;
        
        public AstAsymmetricKeyOption(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymmetricKeyOptionStart>())
                {
                    this._asymmetricKeyOptionStart = ((AstAsymmetricKeyOptionStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymmetricKeyPasswordChangeOption>())
                {
                    this._asymmetricKeyPasswordChangeOption = ((AstAsymmetricKeyPasswordChangeOption)(enumerator.Current));
                }
            }
        }
        
        public AstAsymmetricKeyOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymmetricKeyOptionStart>())
                {
                    this._asymmetricKeyOptionStart = ((AstAsymmetricKeyOptionStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymmetricKeyPasswordChangeOption>())
                {
                    this._asymmetricKeyPasswordChangeOption = ((AstAsymmetricKeyPasswordChangeOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAsymmetricKeyOptionStart AsymmetricKeyOptionStart
        {
            get
            {
                return this._asymmetricKeyOptionStart;
            }
        }
        
        public virtual AstAsymmetricKeyPasswordChangeOption AsymmetricKeyPasswordChangeOption
        {
            get
            {
                return this._asymmetricKeyPasswordChangeOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsymmetricKeyOption(this);
        }
    }
    
    /// <summary>
    /// asymmetric_key_option_start
    /// 	 : WITH  PRIVATE  KEY  LR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAsymmetricKeyOptionStart : AstRule
    {
        
        public AstAsymmetricKeyOptionStart(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAsymmetricKeyOptionStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAsymmetricKeyOptionStart(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsymmetricKeyOptionStart(this);
        }
    }
    
    /// <summary>
    /// asymmetric_key_password_change_option
    /// 	 : DECRYPTION  BY  PASSWORD  EQUAL  STRING
    /// 	 | ENCRYPTION  BY  PASSWORD  EQUAL  STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAsymmetricKeyPasswordChangeOption : AstRule
    {
        
        public AstAsymmetricKeyPasswordChangeOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAsymmetricKeyPasswordChangeOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAsymmetricKeyPasswordChangeOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsymmetricKeyPasswordChangeOption(this);
        }
    }
    
    /// <summary>
    /// create_asymmetric_key
    /// 	 : CREATE  ASYMMETRIC  KEY  asym_key_name  AUTHORIZATION  database_name?  FROM  FILE  EQUAL  STRING EXECUTABLE_FILE  EQUAL  STRING ASSEMBLY  assembly_name PROVIDER  provider_name?  WITH  ALGORITHM  EQUAL  RSA_4096 RSA_3072 RSA_2048 RSA_1024 RSA_512 PROVIDER_KEY_NAME  EQUAL   CREATION_DISPOSITION  EQUAL  CREATE_NEW OPEN_EXISTING?  ENCRYPTION  BY  PASSWORD  EQUAL  ?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateAsymmetricKey : AstRule
    {
        
        private AstAsymKeyName _asymKeyName;
        
        public AstCreateAsymmetricKey(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymKeyName>())
                {
                    this._asymKeyName = ((AstAsymKeyName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateAsymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymKeyName>())
                {
                    this._asymKeyName = ((AstAsymKeyName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAsymKeyName AsymKeyName
        {
            get
            {
                return this._asymKeyName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateAsymmetricKey(this);
        }
    }
    
    /// <summary>
    /// drop_asymmetric_key
    /// 	 : DROP  ASYMMETRIC  KEY    REMOVE  PROVIDER  KEY?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropAsymmetricKey : AstRule
    {
        
        public AstDropAsymmetricKey(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropAsymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropAsymmetricKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAsymmetricKey(this);
        }
    }
    
    /// <summary>
    /// alter_authorization
    /// 	 : alter_authorization_start  class_type  colon_colon?    entity_to  authorization_grantee
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAuthorization : AstRule
    {
        
        private AstAlterAuthorizationStart _alterAuthorizationStart;
        
        private AstEntityTo _entityTo;
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        public AstAlterAuthorization(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAuthorizationStart>())
                {
                    this._alterAuthorizationStart = ((AstAlterAuthorizationStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityTo>())
                {
                    this._entityTo = ((AstEntityTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAuthorization(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAuthorizationStart>())
                {
                    this._alterAuthorizationStart = ((AstAlterAuthorizationStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityTo>())
                {
                    this._entityTo = ((AstEntityTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAuthorizationStart AlterAuthorizationStart
        {
            get
            {
                return this._alterAuthorizationStart;
            }
        }
        
        public virtual AstEntityTo EntityTo
        {
            get
            {
                return this._entityTo;
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorization(this);
        }
    }
    
    /// <summary>
    /// authorization_grantee
    /// 	 : 
    /// 	 | SCHEMA  OWNER
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAuthorizationGrantee : AstRule
    {
        
        public AstAuthorizationGrantee(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAuthorizationGrantee(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAuthorizationGrantee(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuthorizationGrantee(this);
        }
    }
    
    /// <summary>
    /// entity_to
    /// 	 : TO
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstEntityTo : AstTerminal<string>
    {
        
        public AstEntityTo(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstEntityTo(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstEntityTo(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEntityTo(this);
        }
    }
    
    /// <summary>
    /// colon_colon
    /// 	 : DOUBLE_COLON
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstColonColon : AstTerminal<string>
    {
        
        public AstColonColon(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstColonColon(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstColonColon(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColonColon(this);
        }
    }
    
    /// <summary>
    /// alter_authorization_start
    /// 	 : ALTER  AUTHORIZATION  ON
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterAuthorizationStart : AstRule
    {
        
        public AstAlterAuthorizationStart(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterAuthorizationStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterAuthorizationStart(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationStart(this);
        }
    }
    
    /// <summary>
    /// alter_authorization_for_sql_database
    /// 	 : alter_authorization_start  class_type_for_sql_database  colon_colon?    entity_to  authorization_grantee
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAuthorizationForSqlDatabase : AstRule
    {
        
        private AstAlterAuthorizationStart _alterAuthorizationStart;
        
        private AstEntityTo _entityTo;
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        public AstAlterAuthorizationForSqlDatabase(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAuthorizationStart>())
                {
                    this._alterAuthorizationStart = ((AstAlterAuthorizationStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityTo>())
                {
                    this._entityTo = ((AstEntityTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAuthorizationForSqlDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAuthorizationStart>())
                {
                    this._alterAuthorizationStart = ((AstAlterAuthorizationStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityTo>())
                {
                    this._entityTo = ((AstEntityTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAuthorizationStart AlterAuthorizationStart
        {
            get
            {
                return this._alterAuthorizationStart;
            }
        }
        
        public virtual AstEntityTo EntityTo
        {
            get
            {
                return this._entityTo;
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationForSqlDatabase(this);
        }
    }
    
    /// <summary>
    /// alter_authorization_for_azure_dw
    /// 	 : alter_authorization_start  class_type_for_azure_dw  colon_colon?    entity_to  authorization_grantee
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAuthorizationForAzureDw : AstRule
    {
        
        private AstAlterAuthorizationStart _alterAuthorizationStart;
        
        private AstEntityTo _entityTo;
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        public AstAlterAuthorizationForAzureDw(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAuthorizationStart>())
                {
                    this._alterAuthorizationStart = ((AstAlterAuthorizationStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityTo>())
                {
                    this._entityTo = ((AstEntityTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAuthorizationForAzureDw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAuthorizationStart>())
                {
                    this._alterAuthorizationStart = ((AstAlterAuthorizationStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityTo>())
                {
                    this._entityTo = ((AstEntityTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAuthorizationStart AlterAuthorizationStart
        {
            get
            {
                return this._alterAuthorizationStart;
            }
        }
        
        public virtual AstEntityTo EntityTo
        {
            get
            {
                return this._entityTo;
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationForAzureDw(this);
        }
    }
    
    /// <summary>
    /// alter_authorization_for_parallel_dw
    /// 	 : alter_authorization_start  class_type_for_parallel_dw  colon_colon?    entity_to  authorization_grantee
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAuthorizationForParallelDw : AstRule
    {
        
        private AstAlterAuthorizationStart _alterAuthorizationStart;
        
        private AstEntityTo _entityTo;
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        public AstAlterAuthorizationForParallelDw(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAuthorizationStart>())
                {
                    this._alterAuthorizationStart = ((AstAlterAuthorizationStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityTo>())
                {
                    this._entityTo = ((AstEntityTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAuthorizationForParallelDw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAuthorizationStart>())
                {
                    this._alterAuthorizationStart = ((AstAlterAuthorizationStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityTo>())
                {
                    this._entityTo = ((AstEntityTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAuthorizationStart AlterAuthorizationStart
        {
            get
            {
                return this._alterAuthorizationStart;
            }
        }
        
        public virtual AstEntityTo EntityTo
        {
            get
            {
                return this._entityTo;
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationForParallelDw(this);
        }
    }
    
    /// <summary>
    /// class_type
    /// 	 : OBJECT
    /// 	 | ASSEMBLY
    /// 	 | ASYMMETRIC  KEY
    /// 	 | AVAILABILITY  GROUP
    /// 	 | CERTIFICATE
    /// 	 | CONTRACT
    /// 	 | TYPE
    /// 	 | DATABASE
    /// 	 | ENDPOINT
    /// 	 | FULLTEXT  CATALOG
    /// 	 | FULLTEXT  STOPLIST
    /// 	 | MESSAGE  TYPE
    /// 	 | REMOTE  SERVICE  BINDING
    /// 	 | ROLE
    /// 	 | ROUTE
    /// 	 | SCHEMA
    /// 	 | SEARCH  PROPERTY  LIST
    /// 	 | SERVER  ROLE
    /// 	 | SERVICE
    /// 	 | SYMMETRIC  KEY
    /// 	 | XML  SCHEMA  COLLECTION
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstClassType : AstRule
    {
        
        public AstClassType(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstClassType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstClassType(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassType(this);
        }
    }
    
    /// <summary>
    /// class_type_for_sql_database
    /// 	 : OBJECT
    /// 	 | ASSEMBLY
    /// 	 | ASYMMETRIC  KEY
    /// 	 | CERTIFICATE
    /// 	 | TYPE
    /// 	 | DATABASE
    /// 	 | FULLTEXT  CATALOG
    /// 	 | FULLTEXT  STOPLIST
    /// 	 | ROLE
    /// 	 | SCHEMA
    /// 	 | SEARCH  PROPERTY  LIST
    /// 	 | SYMMETRIC  KEY
    /// 	 | XML  SCHEMA  COLLECTION
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstClassTypeForSqlDatabase : AstRule
    {
        
        public AstClassTypeForSqlDatabase(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstClassTypeForSqlDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstClassTypeForSqlDatabase(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassTypeForSqlDatabase(this);
        }
    }
    
    /// <summary>
    /// class_type_for_azure_dw
    /// 	 : SCHEMA
    /// 	 | OBJECT
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstClassTypeForAzureDw : AstTerminal<AstClassTypeForAzureDwEnum>
    {
        
        public AstClassTypeForAzureDw(ITerminalNode t, string value) : 
                base(t, AstClassTypeForAzureDw.GetValue(value))
        {
        }
        
        public AstClassTypeForAzureDw(ITerminalNode t, AstClassTypeForAzureDwEnum value) : 
                base(t, value)
        {
        }
        
        public AstClassTypeForAzureDw(ParserRuleContext ctx, string value) : 
                base(ctx, AstClassTypeForAzureDw.GetValue(value))
        {
        }
        
        public AstClassTypeForAzureDw(Position p, string value) : 
                base(p, AstClassTypeForAzureDw.GetValue(value))
        {
        }
        
        public AstClassTypeForAzureDw(Position p, AstClassTypeForAzureDwEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassTypeForAzureDw(this);
        }
        
        protected static AstClassTypeForAzureDwEnum GetValue(string value)
        {
            if ((value == "SCHEMA"))
            {
                return AstClassTypeForAzureDwEnum.Schema;
            }
            if ((value == "OBJECT"))
            {
                return AstClassTypeForAzureDwEnum.Object;
            }
            return AstClassTypeForAzureDwEnum._undefined;
        }
    }
    
    /// <summary>
    /// class_type_for_parallel_dw
    /// 	 : DATABASE
    /// 	 | SCHEMA
    /// 	 | OBJECT
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstClassTypeForParallelDw : AstTerminal<AstClassTypeForParallelDwEnum>
    {
        
        public AstClassTypeForParallelDw(ITerminalNode t, string value) : 
                base(t, AstClassTypeForParallelDw.GetValue(value))
        {
        }
        
        public AstClassTypeForParallelDw(ITerminalNode t, AstClassTypeForParallelDwEnum value) : 
                base(t, value)
        {
        }
        
        public AstClassTypeForParallelDw(ParserRuleContext ctx, string value) : 
                base(ctx, AstClassTypeForParallelDw.GetValue(value))
        {
        }
        
        public AstClassTypeForParallelDw(Position p, string value) : 
                base(p, AstClassTypeForParallelDw.GetValue(value))
        {
        }
        
        public AstClassTypeForParallelDw(Position p, AstClassTypeForParallelDwEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassTypeForParallelDw(this);
        }
        
        protected static AstClassTypeForParallelDwEnum GetValue(string value)
        {
            if ((value == "DATABASE"))
            {
                return AstClassTypeForParallelDwEnum.Database;
            }
            if ((value == "SCHEMA"))
            {
                return AstClassTypeForParallelDwEnum.Schema;
            }
            if ((value == "OBJECT"))
            {
                return AstClassTypeForParallelDwEnum.Object;
            }
            return AstClassTypeForParallelDwEnum._undefined;
        }
    }
    
    /// <summary>
    /// class_type_for_grant
    /// 	 : APPLICATION  ROLE
    /// 	 | ASSEMBLY
    /// 	 | ASYMMETRIC  KEY
    /// 	 | AUDIT
    /// 	 | AVAILABILITY  GROUP
    /// 	 | BROKER  PRIORITY
    /// 	 | CERTIFICATE
    /// 	 | COLUMN  ENCRYPTION MASTER  KEY
    /// 	 | CONTRACT
    /// 	 | CREDENTIAL
    /// 	 | CRYPTOGRAPHIC  PROVIDER
    /// 	 | DATABASE  AUDIT  SPECIFICATION ENCRYPTION  KEY EVENT  SESSION SCOPED  CONFIGURATION CREDENTIAL RESOURCE  GOVERNOR?
    /// 	 | ENDPOINT
    /// 	 | EVENT  SESSION
    /// 	 | NOTIFICATION  DATABASE OBJECT SERVER
    /// 	 | EXTERNAL  DATA  SOURCE FILE  FORMAT LIBRARY RESOURCE  POOL TABLE CATALOG STOPLIST
    /// 	 | LOGIN
    /// 	 | MASTER  KEY
    /// 	 | MESSAGE  TYPE
    /// 	 | OBJECT
    /// 	 | PARTITION  FUNCTION SCHEME
    /// 	 | REMOTE  SERVICE  BINDING
    /// 	 | RESOURCE  GOVERNOR
    /// 	 | ROLE
    /// 	 | ROUTE
    /// 	 | SCHEMA
    /// 	 | SEARCH  PROPERTY  LIST
    /// 	 | SERVER  AUDIT  SPECIFICATION? ROLE?
    /// 	 | SERVICE
    /// 	 | SQL  LOGIN
    /// 	 | SYMMETRIC  KEY
    /// 	 | TRIGGER  DATABASE SERVER
    /// 	 | TYPE
    /// 	 | USER
    /// 	 | XML  SCHEMA  COLLECTION
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstClassTypeForGrant : AstRule
    {
        
        public AstClassTypeForGrant(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstClassTypeForGrant(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstClassTypeForGrant(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassTypeForGrant(this);
        }
    }
    
    /// <summary>
    /// drop_availability_group
    /// 	 : DROP  AVAILABILITY  GROUP  group_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropAvailabilityGroup : AstRule
    {
        
        private AstGroupName _groupName;
        
        public AstDropAvailabilityGroup(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupName>())
                {
                    this._groupName = ((AstGroupName)(enumerator.Current));
                }
            }
        }
        
        public AstDropAvailabilityGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupName>())
                {
                    this._groupName = ((AstGroupName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGroupName GroupName
        {
            get
            {
                return this._groupName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAvailabilityGroup(this);
        }
    }
    
    /// <summary>
    /// alter_availability_group
    /// 	 : alter_availability_group_start  alter_availability_group_options
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAvailabilityGroup : AstRule
    {
        
        private AstAlterAvailabilityGroupStart _alterAvailabilityGroupStart;
        
        private AstAlterAvailabilityGroupOptions _alterAvailabilityGroupOptions;
        
        public AstAlterAvailabilityGroup(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAvailabilityGroupStart>())
                {
                    this._alterAvailabilityGroupStart = ((AstAlterAvailabilityGroupStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilityGroupOptions>())
                {
                    this._alterAvailabilityGroupOptions = ((AstAlterAvailabilityGroupOptions)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAvailabilityGroupStart>())
                {
                    this._alterAvailabilityGroupStart = ((AstAlterAvailabilityGroupStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilityGroupOptions>())
                {
                    this._alterAvailabilityGroupOptions = ((AstAlterAvailabilityGroupOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAvailabilityGroupStart AlterAvailabilityGroupStart
        {
            get
            {
                return this._alterAvailabilityGroupStart;
            }
        }
        
        public virtual AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions
        {
            get
            {
                return this._alterAvailabilityGroupOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroup(this);
        }
    }
    
    /// <summary>
    /// alter_availability_group_start
    /// 	 : ALTER  AVAILABILITY  GROUP  group_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAvailabilityGroupStart : AstRule
    {
        
        private AstGroupName _groupName;
        
        public AstAlterAvailabilityGroupStart(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupName>())
                {
                    this._groupName = ((AstGroupName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityGroupStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupName>())
                {
                    this._groupName = ((AstGroupName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGroupName GroupName
        {
            get
            {
                return this._groupName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupStart(this);
        }
    }
    
    /// <summary>
    /// alter_availability_group_options
    /// 	 : SET  LR_BRACKET  AUTOMATED_BACKUP_PREFERENCE  EQUAL  PRIMARY SECONDARY_ONLY SECONDARY NONE FAILURE_CONDITION_LEVEL  EQUAL  DECIMAL HEALTH_CHECK_TIMEOUT  EQUAL   DB_FAILOVER  EQUAL  on_off REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT  EQUAL  DECIMAL  RR_BRACKET
    /// 	 | ADD  DATABASE  database_name
    /// 	 | REMOVE  DATABASE  database_name
    /// 	 | ADD  REPLICA  ON  server_instance  WITH  LR_BRACKET  ENDPOINT_URL  EQUAL  STRING?  COMMA?  AVAILABILITY_MODE  EQUAL  SYNCHRONOUS_COMMIT ASYNCHRONOUS_COMMIT?  COMMA?  FAILOVER_MODE  EQUAL  AUTOMATIC MANUAL?  COMMA?  SEEDING_MODE  EQUAL  AUTOMATIC MANUAL?  COMMA?  BACKUP_PRIORITY  EQUAL  DECIMAL?  COMMA?  PRIMARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  READ_WRITE ALL  RR_BRACKET?  COMMA?  SECONDARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  READ_ONLY  RR_BRACKET?  RR_BRACKET
    /// 	 | SECONDARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  NO READ_ONLY ALL READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  STRING  RR_BRACKET
    /// 	 | PRIMARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  NO READ_ONLY ALL READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  COMMA?  STRING* NONE  RR_BRACKET SESSION_TIMEOUT  EQUAL  
    /// 	 | MODIFY  REPLICA  ON  server_instance  WITH  LR_BRACKET  ENDPOINT_URL  EQUAL  STRING AVAILABILITY_MODE  EQUAL  SYNCHRONOUS_COMMIT ASYNCHRONOUS_COMMIT FAILOVER_MODE  EQUAL  AUTOMATIC MANUAL SEEDING_MODE  EQUAL  AUTOMATIC MANUAL BACKUP_PRIORITY  EQUAL  DECIMAL SECONDARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  NO READ_ONLY ALL READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  STRING  RR_BRACKET PRIMARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  NO READ_ONLY ALL READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  COMMA?  STRING* NONE  RR_BRACKET SESSION_TIMEOUT  EQUAL    RR_BRACKET
    /// 	 | REMOVE  REPLICA  ON  STRING
    /// 	 | JOIN
    /// 	 | JOIN  AVAILABILITY  GROUP  ON  COMMA?    WITH  LR_BRACKET  LISTENER_URL  EQUAL  STRING  COMMA  AVAILABILITY_MODE  EQUAL  SYNCHRONOUS_COMMIT ASYNCHRONOUS_COMMIT  COMMA  FAILOVER_MODE  EQUAL  MANUAL  COMMA  SEEDING_MODE  EQUAL  AUTOMATIC MANUAL  RR_BRACKET+
    /// 	 | MODIFY  AVAILABILITY  GROUP  ON  COMMA?    WITH  LR_BRACKET  LISTENER_URL  EQUAL  STRING  COMMA?  AVAILABILITY_MODE  EQUAL  SYNCHRONOUS_COMMIT ASYNCHRONOUS_COMMIT?  COMMA?  FAILOVER_MODE  EQUAL  MANUAL?  COMMA?  SEEDING_MODE  EQUAL  AUTOMATIC MANUAL?  RR_BRACKET+
    /// 	 | GRANT  CREATE  ANY  DATABASE
    /// 	 | DENY  CREATE  ANY  DATABASE
    /// 	 | FAILOVER
    /// 	 | FORCE_FAILOVER_ALLOW_DATA_LOSS
    /// 	 | ADD  LISTENER    LR_BRACKET  WITH  DHCP  ON  LR_BRACKET  ip_v4_failover  ip_v4_failover  RR_BRACKET WITH  IP  LR_BRACKET  COMMA?  LR_BRACKET  ip_v4_failover  COMMA  ip_v4_failover ip_v6_failover  RR_BRACKET+  RR_BRACKET  COMMA  PORT  EQUAL  DECIMAL?  RR_BRACKET
    /// 	 | MODIFY  LISTENER  ADD  IP  LR_BRACKET  ip_v4_failover  ip_v4_failover ip_v6_failover  RR_BRACKET PORT  EQUAL  DECIMAL
    /// 	 | RESTART  LISTENER  STRING
    /// 	 | REMOVE  LISTENER  STRING
    /// 	 | OFFLINE
    /// 	 | WITH  LR_BRACKET  DTC_SUPPORT  EQUAL  PER_DB  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterAvailabilityGroupOptions : AstRule
    {
        
        public AstAlterAvailabilityGroupOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterAvailabilityGroupOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterAvailabilityGroupOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupOptions(this);
        }
    }
    
    /// <summary>
    /// server_instance
    /// 	 : STRING
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstServerInstance : AstTerminal<string>
    {
        
        public AstServerInstance(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstServerInstance(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstServerInstance(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerInstance(this);
        }
    }
    
    /// <summary>
    /// ip_v4_failover
    /// 	 : STRING
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstIpV4Failover : AstTerminal<string>
    {
        
        public AstIpV4Failover(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstIpV4Failover(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstIpV4Failover(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIpV4Failover(this);
        }
    }
    
    /// <summary>
    /// ip_v6_failover
    /// 	 : STRING
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstIpV6Failover : AstTerminal<string>
    {
        
        public AstIpV6Failover(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstIpV6Failover(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstIpV6Failover(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIpV6Failover(this);
        }
    }
    
    /// <summary>
    /// create_or_alter_broker_priority
    /// 	 : CREATE ALTER  BROKER  PRIORITY    FOR  CONVERSATION  SET  LR_BRACKET  CONTRACT_NAME  EQUAL  id_ ANY  COMMA??  LOCAL_SERVICE_NAME  EQUAL  DOUBLE_FORWARD_SLASH?  id_ ANY  COMMA??  REMOTE_SERVICE_NAME  EQUAL   ANY  COMMA??  PRIORITY_LEVEL  EQUAL   DEFAULT?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateOrAlterBrokerPriority : AstRule
    {
        
        public AstCreateOrAlterBrokerPriority(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateOrAlterBrokerPriority(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateOrAlterBrokerPriority(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterBrokerPriority(this);
        }
    }
    
    /// <summary>
    /// drop_broker_priority
    /// 	 : DROP  BROKER  PRIORITY  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropBrokerPriority : AstRule
    {
        
        public AstDropBrokerPriority(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropBrokerPriority(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropBrokerPriority(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropBrokerPriority(this);
        }
    }
    
    /// <summary>
    /// alter_certificate
    /// 	 : ALTER  CERTIFICATE  certificate_name  REMOVE  PRIVATE_KEY WITH  PRIVATE  KEY  LR_BRACKET  FILE  EQUAL  STRING  COMMA? DECRYPTION  BY  PASSWORD  EQUAL  STRING  COMMA? ENCRYPTION  BY  PASSWORD  EQUAL  STRING  COMMA?+  RR_BRACKET WITH  ACTIVE  FOR  BEGIN_DIALOG  EQUAL  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterCertificate : AstRule
    {
        
        private AstCertificateName _certificateName;
        
        public AstAlterCertificate(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateName>())
                {
                    this._certificateName = ((AstCertificateName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterCertificate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateName>())
                {
                    this._certificateName = ((AstCertificateName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateName CertificateName
        {
            get
            {
                return this._certificateName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterCertificate(this);
        }
    }
    
    /// <summary>
    /// alter_column_encryption_key
    /// 	 : ALTER  COLUMN  ENCRYPTION  KEY  column_encryption_key  ADD DROP  VALUE  LR_BRACKET  COLUMN_MASTER_KEY  EQUAL    COMMA  ALGORITHM  EQUAL    COMMA  ENCRYPTED_VALUE  EQUAL  BINARY?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterColumnEncryptionKey : AstRule
    {
        
        private AstColumnEncryptionKey _columnEncryptionKey;
        
        public AstAlterColumnEncryptionKey(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKey>())
                {
                    this._columnEncryptionKey = ((AstColumnEncryptionKey)(enumerator.Current));
                }
            }
        }
        
        public AstAlterColumnEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKey>())
                {
                    this._columnEncryptionKey = ((AstColumnEncryptionKey)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnEncryptionKey ColumnEncryptionKey
        {
            get
            {
                return this._columnEncryptionKey;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterColumnEncryptionKey(this);
        }
    }
    
    /// <summary>
    /// create_column_encryption_key
    /// 	 : CREATE  COLUMN  ENCRYPTION  KEY  column_encryption_key  WITH  VALUES  LR_BRACKET  COMMA?  COLUMN_MASTER_KEY  EQUAL    COMMA  ALGORITHM  EQUAL    COMMA  ENCRYPTED_VALUE  EQUAL    RR_BRACKET  COMMA?+
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateColumnEncryptionKey : AstRule
    {
        
        private AstColumnEncryptionKey _columnEncryptionKey;
        
        public AstCreateColumnEncryptionKey(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKey>())
                {
                    this._columnEncryptionKey = ((AstColumnEncryptionKey)(enumerator.Current));
                }
            }
        }
        
        public AstCreateColumnEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKey>())
                {
                    this._columnEncryptionKey = ((AstColumnEncryptionKey)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnEncryptionKey ColumnEncryptionKey
        {
            get
            {
                return this._columnEncryptionKey;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnEncryptionKey(this);
        }
    }
    
    /// <summary>
    /// drop_certificate
    /// 	 : DROP  CERTIFICATE  certificate_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropCertificate : AstRule
    {
        
        private AstCertificateName _certificateName;
        
        public AstDropCertificate(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateName>())
                {
                    this._certificateName = ((AstCertificateName)(enumerator.Current));
                }
            }
        }
        
        public AstDropCertificate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateName>())
                {
                    this._certificateName = ((AstCertificateName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateName CertificateName
        {
            get
            {
                return this._certificateName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropCertificate(this);
        }
    }
    
    /// <summary>
    /// drop_column_encryption_key
    /// 	 : DROP  COLUMN  ENCRYPTION  KEY  encryption_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropColumnEncryptionKey : AstRule
    {
        
        private AstEncryptionName _encryptionName;
        
        public AstDropColumnEncryptionKey(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptionName>())
                {
                    this._encryptionName = ((AstEncryptionName)(enumerator.Current));
                }
            }
        }
        
        public AstDropColumnEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptionName>())
                {
                    this._encryptionName = ((AstEncryptionName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEncryptionName EncryptionName
        {
            get
            {
                return this._encryptionName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropColumnEncryptionKey(this);
        }
    }
    
    /// <summary>
    /// drop_column_master_key
    /// 	 : DROP  COLUMN  MASTER  KEY  master_key
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropColumnMasterKey : AstRule
    {
        
        private AstMasterKey _masterKey;
        
        public AstDropColumnMasterKey(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMasterKey>())
                {
                    this._masterKey = ((AstMasterKey)(enumerator.Current));
                }
            }
        }
        
        public AstDropColumnMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMasterKey>())
                {
                    this._masterKey = ((AstMasterKey)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMasterKey MasterKey
        {
            get
            {
                return this._masterKey;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropColumnMasterKey(this);
        }
    }
    
    /// <summary>
    /// drop_contract
    /// 	 : DROP  CONTRACT  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropContract : AstRule
    {
        
        public AstDropContract(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropContract(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropContract(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropContract(this);
        }
    }
    
    /// <summary>
    /// drop_credential
    /// 	 : DROP  CREDENTIAL  credential_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropCredential : AstRule
    {
        
        private AstCredentialName _credentialName;
        
        public AstDropCredential(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialName>())
                {
                    this._credentialName = ((AstCredentialName)(enumerator.Current));
                }
            }
        }
        
        public AstDropCredential(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialName>())
                {
                    this._credentialName = ((AstCredentialName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialName CredentialName
        {
            get
            {
                return this._credentialName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropCredential(this);
        }
    }
    
    /// <summary>
    /// drop_cryptograhic_provider
    /// 	 : DROP  CRYPTOGRAPHIC  PROVIDER  provider_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropCryptograhicProvider : AstRule
    {
        
        private AstProviderName _providerName;
        
        public AstDropCryptograhicProvider(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderName>())
                {
                    this._providerName = ((AstProviderName)(enumerator.Current));
                }
            }
        }
        
        public AstDropCryptograhicProvider(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderName>())
                {
                    this._providerName = ((AstProviderName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProviderName ProviderName
        {
            get
            {
                return this._providerName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropCryptograhicProvider(this);
        }
    }
    
    /// <summary>
    /// drop_database
    /// 	 : DROP  DATABASE  IF  EXISTS?  COMMA?  database_name+
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropDatabase : AstRule
    {
        
        public AstDropDatabase(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropDatabase(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabase(this);
        }
    }
    
    /// <summary>
    /// drop_database_audit_specification
    /// 	 : DROP  DATABASE  AUDIT  SPECIFICATION  audit_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropDatabaseAuditSpecification : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstDropDatabaseAuditSpecification(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public AstDropDatabaseAuditSpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabaseAuditSpecification(this);
        }
    }
    
    /// <summary>
    /// drop_database_encryption_key
    /// 	 : DROP  DATABASE  ENCRYPTION  KEY
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropDatabaseEncryptionKey : AstRule
    {
        
        public AstDropDatabaseEncryptionKey(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropDatabaseEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropDatabaseEncryptionKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabaseEncryptionKey(this);
        }
    }
    
    /// <summary>
    /// drop_database_scoped_credential
    /// 	 : DROP  DATABASE  SCOPED  CREDENTIAL  credential_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropDatabaseScopedCredential : AstRule
    {
        
        private AstCredentialName _credentialName;
        
        public AstDropDatabaseScopedCredential(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialName>())
                {
                    this._credentialName = ((AstCredentialName)(enumerator.Current));
                }
            }
        }
        
        public AstDropDatabaseScopedCredential(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialName>())
                {
                    this._credentialName = ((AstCredentialName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialName CredentialName
        {
            get
            {
                return this._credentialName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabaseScopedCredential(this);
        }
    }
    
    /// <summary>
    /// drop_default
    /// 	 : DROP  DEFAULT  IF  EXISTS?  COMMA?  schema_name  DOT?  schema_name
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropDefault : AstRule
    {
        
        public AstDropDefault(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropDefault(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropDefault(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDefault(this);
        }
    }
    
    /// <summary>
    /// drop_endpoint
    /// 	 : DROP  ENDPOINT  endpoint_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropEndpoint : AstRule
    {
        
        private AstEndpointName _endpointName;
        
        public AstDropEndpoint(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointName>())
                {
                    this._endpointName = ((AstEndpointName)(enumerator.Current));
                }
            }
        }
        
        public AstDropEndpoint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointName>())
                {
                    this._endpointName = ((AstEndpointName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEndpointName EndpointName
        {
            get
            {
                return this._endpointName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropEndpoint(this);
        }
    }
    
    /// <summary>
    /// drop_external_data_source
    /// 	 : DROP  EXTERNAL  DATA  SOURCE  external_data_source_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropExternalDataSource : AstRule
    {
        
        private AstExternalDataSourceName _externalDataSourceName;
        
        public AstDropExternalDataSource(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalDataSourceName>())
                {
                    this._externalDataSourceName = ((AstExternalDataSourceName)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalDataSource(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalDataSourceName>())
                {
                    this._externalDataSourceName = ((AstExternalDataSourceName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExternalDataSourceName ExternalDataSourceName
        {
            get
            {
                return this._externalDataSourceName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalDataSource(this);
        }
    }
    
    /// <summary>
    /// drop_external_file_format
    /// 	 : DROP  EXTERNAL  FILE  FORMAT  external_file_format_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropExternalFileFormat : AstRule
    {
        
        private AstExternalFileFormatName _externalFileFormatName;
        
        public AstDropExternalFileFormat(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalFileFormatName>())
                {
                    this._externalFileFormatName = ((AstExternalFileFormatName)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalFileFormat(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalFileFormatName>())
                {
                    this._externalFileFormatName = ((AstExternalFileFormatName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExternalFileFormatName ExternalFileFormatName
        {
            get
            {
                return this._externalFileFormatName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalFileFormat(this);
        }
    }
    
    /// <summary>
    /// drop_external_library
    /// 	 : DROP  EXTERNAL  LIBRARY  library_name  AUTHORIZATION  owner_name?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropExternalLibrary : AstRule
    {
        
        private AstLibraryName _libraryName;
        
        public AstDropExternalLibrary(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryName>())
                {
                    this._libraryName = ((AstLibraryName)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalLibrary(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryName>())
                {
                    this._libraryName = ((AstLibraryName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLibraryName LibraryName
        {
            get
            {
                return this._libraryName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalLibrary(this);
        }
    }
    
    /// <summary>
    /// drop_external_resource_pool
    /// 	 : DROP  EXTERNAL  RESOURCE  POOL  pool_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropExternalResourcePool : AstRule
    {
        
        private AstPoolName _poolName;
        
        public AstDropExternalResourcePool(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolName>())
                {
                    this._poolName = ((AstPoolName)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolName>())
                {
                    this._poolName = ((AstPoolName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolName PoolName
        {
            get
            {
                return this._poolName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalResourcePool(this);
        }
    }
    
    /// <summary>
    /// drop_external_table
    /// 	 : DROP  EXTERNAL  TABLE  database_name  DOT?  schema_name  DOT?  tableName
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropExternalTable : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstDropExternalTable(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalTable(this);
        }
    }
    
    /// <summary>
    /// drop_event_notifications
    /// 	 : DROP  EVENT  NOTIFICATION  COMMA?  notification_name+  ON  SERVER DATABASE QUEUE  queue_name
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropEventNotifications : AstRule
    {
        
        public AstDropEventNotifications(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropEventNotifications(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropEventNotifications(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropEventNotifications(this);
        }
    }
    
    /// <summary>
    /// drop_event_session
    /// 	 : DROP  EVENT  SESSION  event_session_name  ON  SERVER
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropEventSession : AstRule
    {
        
        private AstEventSessionName _eventSessionName;
        
        public AstDropEventSession(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionName>())
                {
                    this._eventSessionName = ((AstEventSessionName)(enumerator.Current));
                }
            }
        }
        
        public AstDropEventSession(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionName>())
                {
                    this._eventSessionName = ((AstEventSessionName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventSessionName EventSessionName
        {
            get
            {
                return this._eventSessionName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropEventSession(this);
        }
    }
    
    /// <summary>
    /// drop_fulltext_catalog
    /// 	 : DROP  FULLTEXT  CATALOG  catalog_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropFulltextCatalog : AstRule
    {
        
        private AstCatalogName _catalogName;
        
        public AstDropFulltextCatalog(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogName>())
                {
                    this._catalogName = ((AstCatalogName)(enumerator.Current));
                }
            }
        }
        
        public AstDropFulltextCatalog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogName>())
                {
                    this._catalogName = ((AstCatalogName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCatalogName CatalogName
        {
            get
            {
                return this._catalogName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFulltextCatalog(this);
        }
    }
    
    /// <summary>
    /// drop_fulltext_index
    /// 	 : DROP  FULLTEXT  INDEX  ON  schema_name  DOT?  tableName
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropFulltextIndex : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstDropFulltextIndex(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public AstDropFulltextIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFulltextIndex(this);
        }
    }
    
    /// <summary>
    /// drop_fulltext_stoplist
    /// 	 : DROP  FULLTEXT  STOPLIST  stoplist_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropFulltextStoplist : AstRule
    {
        
        private AstStoplistName _stoplistName;
        
        public AstDropFulltextStoplist(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistName>())
                {
                    this._stoplistName = ((AstStoplistName)(enumerator.Current));
                }
            }
        }
        
        public AstDropFulltextStoplist(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistName>())
                {
                    this._stoplistName = ((AstStoplistName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStoplistName StoplistName
        {
            get
            {
                return this._stoplistName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFulltextStoplist(this);
        }
    }
    
    /// <summary>
    /// drop_login
    /// 	 : DROP  LOGIN  login_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropLogin : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstDropLogin(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public AstDropLogin(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropLogin(this);
        }
    }
    
    /// <summary>
    /// drop_master_key
    /// 	 : DROP  MASTER  KEY
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropMasterKey : AstRule
    {
        
        public AstDropMasterKey(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropMasterKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropMasterKey(this);
        }
    }
    
    /// <summary>
    /// drop_message_type
    /// 	 : DROP  MESSAGE  TYPE  message_type_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropMessageType : AstRule
    {
        
        private AstMessageTypeName _messageTypeName;
        
        public AstDropMessageType(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeName>())
                {
                    this._messageTypeName = ((AstMessageTypeName)(enumerator.Current));
                }
            }
        }
        
        public AstDropMessageType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeName>())
                {
                    this._messageTypeName = ((AstMessageTypeName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMessageTypeName MessageTypeName
        {
            get
            {
                return this._messageTypeName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropMessageType(this);
        }
    }
    
    /// <summary>
    /// message_type_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstMessageTypeName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMessageTypeName(this);
        }
    }
    
    /// <summary>
    /// drop_partition_function
    /// 	 : DROP  PARTITION  FUNCTION  partition_function_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropPartitionFunction : AstRule
    {
        
        private AstPartitionFunctionName _partitionFunctionName;
        
        public AstDropPartitionFunction(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionName>())
                {
                    this._partitionFunctionName = ((AstPartitionFunctionName)(enumerator.Current));
                }
            }
        }
        
        public AstDropPartitionFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionName>())
                {
                    this._partitionFunctionName = ((AstPartitionFunctionName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionFunctionName PartitionFunctionName
        {
            get
            {
                return this._partitionFunctionName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropPartitionFunction(this);
        }
    }
    
    /// <summary>
    /// partition_function_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstPartitionFunctionName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionFunctionName(this);
        }
    }
    
    /// <summary>
    /// drop_partition_scheme
    /// 	 : DROP  PARTITION  SCHEME  partition_scheme_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropPartitionScheme : AstRule
    {
        
        private AstPartitionSchemeName _partitionSchemeName;
        
        public AstDropPartitionScheme(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeName>())
                {
                    this._partitionSchemeName = ((AstPartitionSchemeName)(enumerator.Current));
                }
            }
        }
        
        public AstDropPartitionScheme(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeName>())
                {
                    this._partitionSchemeName = ((AstPartitionSchemeName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionSchemeName PartitionSchemeName
        {
            get
            {
                return this._partitionSchemeName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropPartitionScheme(this);
        }
    }
    
    /// <summary>
    /// partition_scheme_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstPartitionSchemeName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionSchemeName(this);
        }
    }
    
    /// <summary>
    /// drop_queue
    /// 	 : DROP  QUEUE  database_name  DOT?  schema_name  DOT?  queue_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropQueue : AstRule
    {
        
        private AstQueueName _queueName;
        
        public AstDropQueue(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueueName>())
                {
                    this._queueName = ((AstQueueName)(enumerator.Current));
                }
            }
        }
        
        public AstDropQueue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueueName>())
                {
                    this._queueName = ((AstQueueName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstQueueName QueueName
        {
            get
            {
                return this._queueName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropQueue(this);
        }
    }
    
    /// <summary>
    /// drop_remote_service_binding
    /// 	 : DROP  REMOTE  SERVICE  BINDING  binding_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropRemoteServiceBinding : AstRule
    {
        
        private AstBindingName _bindingName;
        
        public AstDropRemoteServiceBinding(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingName>())
                {
                    this._bindingName = ((AstBindingName)(enumerator.Current));
                }
            }
        }
        
        public AstDropRemoteServiceBinding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingName>())
                {
                    this._bindingName = ((AstBindingName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBindingName BindingName
        {
            get
            {
                return this._bindingName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRemoteServiceBinding(this);
        }
    }
    
    /// <summary>
    /// drop_resource_pool
    /// 	 : DROP  RESOURCE  POOL  pool_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropResourcePool : AstRule
    {
        
        private AstPoolName _poolName;
        
        public AstDropResourcePool(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolName>())
                {
                    this._poolName = ((AstPoolName)(enumerator.Current));
                }
            }
        }
        
        public AstDropResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolName>())
                {
                    this._poolName = ((AstPoolName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolName PoolName
        {
            get
            {
                return this._poolName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropResourcePool(this);
        }
    }
    
    /// <summary>
    /// drop_db_role
    /// 	 : DROP  ROLE  IF  EXISTS?  role_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropDbRole : AstRule
    {
        
        private AstRoleName _roleName;
        
        public AstDropDbRole(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this._roleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public AstDropDbRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this._roleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleName RoleName
        {
            get
            {
                return this._roleName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDbRole(this);
        }
    }
    
    /// <summary>
    /// drop_route
    /// 	 : DROP  ROUTE  route_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropRoute : AstRule
    {
        
        private AstRouteName _routeName;
        
        public AstDropRoute(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteName>())
                {
                    this._routeName = ((AstRouteName)(enumerator.Current));
                }
            }
        }
        
        public AstDropRoute(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteName>())
                {
                    this._routeName = ((AstRouteName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRouteName RouteName
        {
            get
            {
                return this._routeName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRoute(this);
        }
    }
    
    /// <summary>
    /// drop_rule
    /// 	 : DROP  RULE  IF  EXISTS?  COMMA?  schema_name  DOT?  rule_name?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropRule : AstRule
    {
        
        public AstDropRule(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropRule(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropRule(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRule(this);
        }
    }
    
    /// <summary>
    /// drop_schema
    /// 	 : DROP  SCHEMA  IF  EXISTS?  schema_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropSchema : AstRule
    {
        
        private AstSchemaName _schemaName;
        
        public AstDropSchema(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaName>())
                {
                    this._schemaName = ((AstSchemaName)(enumerator.Current));
                }
            }
        }
        
        public AstDropSchema(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaName>())
                {
                    this._schemaName = ((AstSchemaName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaName SchemaName
        {
            get
            {
                return this._schemaName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSchema(this);
        }
    }
    
    /// <summary>
    /// drop_search_property_list
    /// 	 : DROP  SEARCH  PROPERTY  LIST  property_list_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropSearchPropertyList : AstRule
    {
        
        private AstPropertyListName _propertyListName;
        
        public AstDropSearchPropertyList(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPropertyListName>())
                {
                    this._propertyListName = ((AstPropertyListName)(enumerator.Current));
                }
            }
        }
        
        public AstDropSearchPropertyList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPropertyListName>())
                {
                    this._propertyListName = ((AstPropertyListName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPropertyListName PropertyListName
        {
            get
            {
                return this._propertyListName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSearchPropertyList(this);
        }
    }
    
    /// <summary>
    /// drop_security_policy
    /// 	 : DROP  SECURITY  POLICY  IF  EXISTS?  schema_name  DOT?  security_policy_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropSecurityPolicy : AstRule
    {
        
        private AstSecurityPolicyName _securityPolicyName;
        
        public AstDropSecurityPolicy(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSecurityPolicyName>())
                {
                    this._securityPolicyName = ((AstSecurityPolicyName)(enumerator.Current));
                }
            }
        }
        
        public AstDropSecurityPolicy(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSecurityPolicyName>())
                {
                    this._securityPolicyName = ((AstSecurityPolicyName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSecurityPolicyName SecurityPolicyName
        {
            get
            {
                return this._securityPolicyName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSecurityPolicy(this);
        }
    }
    
    /// <summary>
    /// drop_sequence
    /// 	 : DROP  SEQUENCE  IF  EXISTS?  COMMA?  database_name  DOT?  schema_name  DOT?  sequence_name?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropSequence : AstRule
    {
        
        public AstDropSequence(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropSequence(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropSequence(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSequence(this);
        }
    }
    
    /// <summary>
    /// drop_server_audit
    /// 	 : DROP  SERVER  AUDIT  audit_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropServerAudit : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstDropServerAudit(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public AstDropServerAudit(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropServerAudit(this);
        }
    }
    
    /// <summary>
    /// drop_server_audit_specification
    /// 	 : DROP  SERVER  AUDIT  SPECIFICATION  audit_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropServerAuditSpecification : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstDropServerAuditSpecification(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public AstDropServerAuditSpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropServerAuditSpecification(this);
        }
    }
    
    /// <summary>
    /// drop_server_role
    /// 	 : DROP  SERVER  ROLE  role_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropServerRole : AstRule
    {
        
        private AstRoleName _roleName;
        
        public AstDropServerRole(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this._roleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public AstDropServerRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this._roleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleName RoleName
        {
            get
            {
                return this._roleName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropServerRole(this);
        }
    }
    
    /// <summary>
    /// drop_service
    /// 	 : DROP  SERVICE  dropped_service_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropService : AstRule
    {
        
        private AstDroppedServiceName _droppedServiceName;
        
        public AstDropService(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDroppedServiceName>())
                {
                    this._droppedServiceName = ((AstDroppedServiceName)(enumerator.Current));
                }
            }
        }
        
        public AstDropService(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDroppedServiceName>())
                {
                    this._droppedServiceName = ((AstDroppedServiceName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDroppedServiceName DroppedServiceName
        {
            get
            {
                return this._droppedServiceName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropService(this);
        }
    }
    
    /// <summary>
    /// drop_signature
    /// 	 : DROP  COUNTER?  SIGNATURE  FROM  schema_name  DOT?  module_name  BY  COMMA?  CERTIFICATE  certificate_name COMMA?  ASYMMETRIC  KEY  asym_key_name+
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropSignature : AstRule
    {
        
        private AstModuleName _moduleName;
        
        public AstDropSignature(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModuleName>())
                {
                    this._moduleName = ((AstModuleName)(enumerator.Current));
                }
            }
        }
        
        public AstDropSignature(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModuleName>())
                {
                    this._moduleName = ((AstModuleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstModuleName ModuleName
        {
            get
            {
                return this._moduleName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSignature(this);
        }
    }
    
    /// <summary>
    /// drop_statistics_name_azure_dw_and_pdw
    /// 	 : DROP  STATISTICS  schema_name  DOT?  object_name  DOT  statistics_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropStatisticsNameAzureDwAndPdw : AstRule
    {
        
        private AstObjectName _objectName;
        
        private AstStatisticsName _statisticsName;
        
        public AstDropStatisticsNameAzureDwAndPdw(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstObjectName>())
                {
                    this._objectName = ((AstObjectName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStatisticsName>())
                {
                    this._statisticsName = ((AstStatisticsName)(enumerator.Current));
                }
            }
        }
        
        public AstDropStatisticsNameAzureDwAndPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstObjectName>())
                {
                    this._objectName = ((AstObjectName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStatisticsName>())
                {
                    this._statisticsName = ((AstStatisticsName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstObjectName ObjectName
        {
            get
            {
                return this._objectName;
            }
        }
        
        public virtual AstStatisticsName StatisticsName
        {
            get
            {
                return this._statisticsName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropStatisticsNameAzureDwAndPdw(this);
        }
    }
    
    /// <summary>
    /// drop_symmetric_key
    /// 	 : DROP  SYMMETRIC  KEY  symmetric_key_name  REMOVE  PROVIDER  KEY?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropSymmetricKey : AstRule
    {
        
        private AstSymmetricKeyName _symmetricKeyName;
        
        public AstDropSymmetricKey(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyName>())
                {
                    this._symmetricKeyName = ((AstSymmetricKeyName)(enumerator.Current));
                }
            }
        }
        
        public AstDropSymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyName>())
                {
                    this._symmetricKeyName = ((AstSymmetricKeyName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSymmetricKeyName SymmetricKeyName
        {
            get
            {
                return this._symmetricKeyName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSymmetricKey(this);
        }
    }
    
    /// <summary>
    /// drop_synonym
    /// 	 : DROP  SYNONYM  IF  EXISTS?  schema_name  DOT?  synonym_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropSynonym : AstRule
    {
        
        private AstSynonymName _synonymName;
        
        public AstDropSynonym(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSynonymName>())
                {
                    this._synonymName = ((AstSynonymName)(enumerator.Current));
                }
            }
        }
        
        public AstDropSynonym(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSynonymName>())
                {
                    this._synonymName = ((AstSynonymName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSynonymName SynonymName
        {
            get
            {
                return this._synonymName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSynonym(this);
        }
    }
    
    /// <summary>
    /// drop_user
    /// 	 : DROP  USER  IF  EXISTS?  user_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropUser : AstRule
    {
        
        private AstUserName _userName;
        
        public AstDropUser(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserName>())
                {
                    this._userName = ((AstUserName)(enumerator.Current));
                }
            }
        }
        
        public AstDropUser(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserName>())
                {
                    this._userName = ((AstUserName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUserName UserName
        {
            get
            {
                return this._userName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropUser(this);
        }
    }
    
    /// <summary>
    /// drop_workload_group
    /// 	 : DROP  WORKLOAD  GROUP  group_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropWorkloadGroup : AstRule
    {
        
        private AstGroupName _groupName;
        
        public AstDropWorkloadGroup(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupName>())
                {
                    this._groupName = ((AstGroupName)(enumerator.Current));
                }
            }
        }
        
        public AstDropWorkloadGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupName>())
                {
                    this._groupName = ((AstGroupName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGroupName GroupName
        {
            get
            {
                return this._groupName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropWorkloadGroup(this);
        }
    }
    
    /// <summary>
    /// drop_xml_schema_collection
    /// 	 : DROP  XML  SCHEMA  COLLECTION  relational_schema  DOT?  sql_identifier
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropXmlSchemaCollection : AstRule
    {
        
        private AstSqlIdentifier _sqlIdentifier;
        
        public AstDropXmlSchemaCollection(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlIdentifier>())
                {
                    this._sqlIdentifier = ((AstSqlIdentifier)(enumerator.Current));
                }
            }
        }
        
        public AstDropXmlSchemaCollection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlIdentifier>())
                {
                    this._sqlIdentifier = ((AstSqlIdentifier)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSqlIdentifier SqlIdentifier
        {
            get
            {
                return this._sqlIdentifier;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropXmlSchemaCollection(this);
        }
    }
    
    /// <summary>
    /// disable_trigger
    /// 	 : DISABLE  TRIGGER  COMMA?  schema_name  DOT?  trigger_name+ ALL  ON  schema_id  DOT?  object_name DATABASE ALL  SERVER
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDisableTrigger : AstRule
    {
        
        public AstDisableTrigger(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDisableTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDisableTrigger(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDisableTrigger(this);
        }
    }
    
    /// <summary>
    /// enable_trigger
    /// 	 : ENABLE  TRIGGER  COMMA?  schema_name  DOT?  trigger_name+ ALL  ON  schema_id  DOT?  object_name DATABASE ALL  SERVER
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEnableTrigger : AstRule
    {
        
        public AstEnableTrigger(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstEnableTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstEnableTrigger(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEnableTrigger(this);
        }
    }
    
    /// <summary>
    /// lock_table
    /// 	 : LOCK  TABLE  table_name  IN  SHARE EXCLUSIVE  MODE  WAIT   NOWAIT?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstLockTable : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstLockTable(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public AstLockTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLockTable(this);
        }
    }
    
    /// <summary>
    /// truncate_table
    /// 	 : TRUNCATE  TABLE  table_name  WITH  LR_BRACKET  PARTITIONS  LR_BRACKET  COMMA?  DECIMAL DECIMAL  TO  DECIMAL+  RR_BRACKET  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstTruncateTable : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstTruncateTable(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public AstTruncateTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTruncateTable(this);
        }
    }
    
    /// <summary>
    /// create_column_master_key
    /// 	 : CREATE  COLUMN  MASTER  KEY    WITH  LR_BRACKET  KEY_STORE_PROVIDER_NAME  EQUAL    COMMA  KEY_PATH  EQUAL    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateColumnMasterKey : AstRule
    {
        
        public AstCreateColumnMasterKey(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateColumnMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateColumnMasterKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnMasterKey(this);
        }
    }
    
    /// <summary>
    /// alter_credential
    /// 	 : ALTER  CREDENTIAL  credential_name  WITH  IDENTITY  EQUAL    COMMA  SECRET  EQUAL  ?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterCredential : AstRule
    {
        
        private AstCredentialName _credentialName;
        
        public AstAlterCredential(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialName>())
                {
                    this._credentialName = ((AstCredentialName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterCredential(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialName>())
                {
                    this._credentialName = ((AstCredentialName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialName CredentialName
        {
            get
            {
                return this._credentialName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterCredential(this);
        }
    }
    
    /// <summary>
    /// create_credential
    /// 	 : CREATE  CREDENTIAL  credential_name  WITH  IDENTITY  EQUAL    COMMA  SECRET  EQUAL  ?  FOR  CRYPTOGRAPHIC  PROVIDER  cryptographic_provider_name?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateCredential : AstRule
    {
        
        private AstCredentialName _credentialName;
        
        public AstCreateCredential(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialName>())
                {
                    this._credentialName = ((AstCredentialName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateCredential(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialName>())
                {
                    this._credentialName = ((AstCredentialName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialName CredentialName
        {
            get
            {
                return this._credentialName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateCredential(this);
        }
    }
    
    /// <summary>
    /// alter_cryptographic_provider
    /// 	 : ALTER  CRYPTOGRAPHIC  PROVIDER  provider_name  FROM  FILE  EQUAL  ?  ENABLE DISABLE?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterCryptographicProvider : AstRule
    {
        
        private AstProviderName _providerName;
        
        public AstAlterCryptographicProvider(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderName>())
                {
                    this._providerName = ((AstProviderName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterCryptographicProvider(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderName>())
                {
                    this._providerName = ((AstProviderName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProviderName ProviderName
        {
            get
            {
                return this._providerName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterCryptographicProvider(this);
        }
    }
    
    /// <summary>
    /// create_cryptographic_provider
    /// 	 : CREATE  CRYPTOGRAPHIC  PROVIDER  provider_name  FROM  FILE  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateCryptographicProvider : AstRule
    {
        
        private AstProviderName _providerName;
        
        public AstCreateCryptographicProvider(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderName>())
                {
                    this._providerName = ((AstProviderName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateCryptographicProvider(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderName>())
                {
                    this._providerName = ((AstProviderName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProviderName ProviderName
        {
            get
            {
                return this._providerName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateCryptographicProvider(this);
        }
    }
    
    /// <summary>
    /// create_event_notification
    /// 	 : CREATE  EVENT  NOTIFICATION  event_notification_name  ON  SERVER DATABASE QUEUE  queue_name  WITH  FAN_IN?  FOR  COMMA?  event_type_or_group+  TO  SERVICE    COMMA  
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateEventNotification : AstRule
    {
        
        private AstEventNotificationName _eventNotificationName;
        
        public AstCreateEventNotification(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventNotificationName>())
                {
                    this._eventNotificationName = ((AstEventNotificationName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateEventNotification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventNotificationName>())
                {
                    this._eventNotificationName = ((AstEventNotificationName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventNotificationName EventNotificationName
        {
            get
            {
                return this._eventNotificationName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateEventNotification(this);
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session
    /// 	 : CREATE ALTER  EVENT  SESSION  event_session_name  ON  SERVER  COMMA?  ADD  EVENT  event_module_guid  DOT?  event_package_name  DOT  event_name  LR_BRACKET  SET  COMMA?  event_customizable_attributue  EQUAL  DECIMAL STRING*?  ACTION  LR_BRACKET  COMMA?  event_module_guid  DOT?  event_package_name  DOT  action_name+  RR_BRACKET+  WHERE  event_session_predicate_expression?  RR_BRACKET**  COMMA?  DROP  EVENT  event_module_guid  DOT?  event_package_name  DOT  event_name*  ADD  TARGET  event_module_guid  DOT?  event_package_name  DOT  target_name  LR_BRACKET  SET  COMMA?  target_parameter_name  EQUAL  LR_BRACKET?  DECIMAL  RR_BRACKET? STRING+  RR_BRACKET**  DROP  TARGET  event_module_guid  DOT?  event_package_name  DOT  target_name*  WITH  LR_BRACKET  COMMA?  MAX_MEMORY  EQUAL    KB MB?  COMMA?  EVENT_RETENTION_MODE  EQUAL  ALLOW_SINGLE_EVENT_LOSS ALLOW_MULTIPLE_EVENT_LOSS NO_EVENT_LOSS?  COMMA?  MAX_DISPATCH_LATENCY  EQUAL    SECONDS INFINITE?  COMMA?  MAX_EVENT_SIZE  EQUAL    KB MB?  COMMA?  MEMORY_PARTITION_MODE  EQUAL  NONE PER_NODE PER_CPU?  COMMA?  TRACK_CAUSALITY  EQUAL  on_off?  COMMA?  STARTUP_STATE  EQUAL  on_off?  RR_BRACKET?  STATE  EQUAL  START STOP?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateOrAlterEventSession : AstRule
    {
        
        private AstEventSessionName _eventSessionName;
        
        public AstCreateOrAlterEventSession(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionName>())
                {
                    this._eventSessionName = ((AstEventSessionName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterEventSession(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionName>())
                {
                    this._eventSessionName = ((AstEventSessionName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventSessionName EventSessionName
        {
            get
            {
                return this._eventSessionName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSession(this);
        }
    }
    
    /// <summary>
    /// start_stop
    /// 	 : START
    /// 	 | STOP
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstStartStop : AstTerminal<AstStartStopEnum>
    {
        
        public AstStartStop(ITerminalNode t, string value) : 
                base(t, AstStartStop.GetValue(value))
        {
        }
        
        public AstStartStop(ITerminalNode t, AstStartStopEnum value) : 
                base(t, value)
        {
        }
        
        public AstStartStop(ParserRuleContext ctx, string value) : 
                base(ctx, AstStartStop.GetValue(value))
        {
        }
        
        public AstStartStop(Position p, string value) : 
                base(p, AstStartStop.GetValue(value))
        {
        }
        
        public AstStartStop(Position p, AstStartStopEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStartStop(this);
        }
        
        protected static AstStartStopEnum GetValue(string value)
        {
            if ((value == "START"))
            {
                return AstStartStopEnum.Start;
            }
            if ((value == "STOP"))
            {
                return AstStartStopEnum.Stop;
            }
            return AstStartStopEnum._undefined;
        }
    }
    
    /// <summary>
    /// event_session_predicate_expression
    /// 	 : COMMA?  AND OR?  NOT?  event_session_predicate_factor LR_BRACKET  event_session_predicate_expression  RR_BRACKET+
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEventSessionPredicateExpression : AstRule
    {
        
        public AstEventSessionPredicateExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstEventSessionPredicateExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstEventSessionPredicateExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionPredicateExpression(this);
        }
    }
    
    /// <summary>
    /// event_session_predicate_factor
    /// 	 : event_session_predicate_leaf
    /// 	 | LR_BRACKET  event_session_predicate_expression  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEventSessionPredicateFactor : AstRule
    {
        
        public AstEventSessionPredicateFactor(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstEventSessionPredicateFactor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstEventSessionPredicateFactor(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionPredicateFactor(this);
        }
    }
    
    /// <summary>
    /// event_session_predicate_leaf
    /// 	 : event_field_name event_field_name event_module_guid  DOT?  event_package_name  DOT  predicate_source_name  EQUAL LESS  GREATER EXCLAMATION  EQUAL GREATER GREATER  EQUAL LESS LESS  EQUAL  DECIMAL STRING
    /// 	 | event_module_guid  DOT?  event_package_name  DOT  predicate_compare_name  LR_BRACKET  event_field_name event_module_guid  DOT?  event_package_name  DOT  predicate_source_name  COMMA  DECIMAL STRING  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEventSessionPredicateLeaf : AstRule
    {
        
        public AstEventSessionPredicateLeaf(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstEventSessionPredicateLeaf(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstEventSessionPredicateLeaf(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionPredicateLeaf(this);
        }
    }
    
    /// <summary>
    /// alter_external_data_source
    /// 	 : ALTER  EXTERNAL  DATA  SOURCE  data_source_name  SET  LOCATION  EQUAL    COMMA? RESOURCE_MANAGER_LOCATION  EQUAL    COMMA? CREDENTIAL  EQUAL  credential_name+
    /// 	 | ALTER  EXTERNAL  DATA  SOURCE  data_source_name  WITH  LR_BRACKET  TYPE  EQUAL  BLOB_STORAGE  COMMA  LOCATION  EQUAL    COMMA  CREDENTIAL  EQUAL  credential_name?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterExternalDataSource : AstRule
    {
        
        public AstAlterExternalDataSource(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterExternalDataSource(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterExternalDataSource(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterExternalDataSource(this);
        }
    }
    
    /// <summary>
    /// alter_external_library
    /// 	 : ALTER  EXTERNAL  LIBRARY  library_name  AUTHORIZATION  owner_name?  SET ADD  LR_BRACKET  CONTENT  EQUAL   BINARY NONE  COMMA  PLATFORM  EQUAL  WINDOWS LINUX?  RR_BRACKET  WITH  COMMA?  LANGUAGE  EQUAL  R PYTHON DATA_SOURCE  EQUAL  external_data_source_name+  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterExternalLibrary : AstRule
    {
        
        private AstLibraryName _libraryName;
        
        public AstAlterExternalLibrary(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryName>())
                {
                    this._libraryName = ((AstLibraryName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterExternalLibrary(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryName>())
                {
                    this._libraryName = ((AstLibraryName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLibraryName LibraryName
        {
            get
            {
                return this._libraryName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterExternalLibrary(this);
        }
    }
    
    /// <summary>
    /// create_external_library
    /// 	 : CREATE  EXTERNAL  LIBRARY  library_name  AUTHORIZATION  owner_name?  FROM  COMMA?  LR_BRACKET?  CONTENT  EQUAL?   BINARY NONE  COMMA  PLATFORM  EQUAL  WINDOWS LINUX?  RR_BRACKET?  WITH  COMMA?  LANGUAGE  EQUAL  R PYTHON DATA_SOURCE  EQUAL  external_data_source_name+  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateExternalLibrary : AstRule
    {
        
        private AstLibraryName _libraryName;
        
        public AstCreateExternalLibrary(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryName>())
                {
                    this._libraryName = ((AstLibraryName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateExternalLibrary(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryName>())
                {
                    this._libraryName = ((AstLibraryName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLibraryName LibraryName
        {
            get
            {
                return this._libraryName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateExternalLibrary(this);
        }
    }
    
    /// <summary>
    /// alter_external_resource_pool
    /// 	 : ALTER  EXTERNAL  RESOURCE  POOL  pool_name DEFAULT_DOUBLE_QUOTE  WITH  LR_BRACKET  MAX_CPU_PERCENT  EQUAL    COMMA?  AFFINITY  CPU  EQUAL  AUTO COMMA?  DECIMAL  TO  DECIMAL COMMA  DECIMAL+ NUMANODE  EQUAL  COMMA?  DECIMAL  TO  DECIMAL COMMA?  DECIMAL+  COMMA?  MAX_MEMORY_PERCENT  EQUAL  ?  COMMA?  MAX_PROCESSES  EQUAL  ?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterExternalResourcePool : AstRule
    {
        
        public AstAlterExternalResourcePool(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterExternalResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterExternalResourcePool(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterExternalResourcePool(this);
        }
    }
    
    /// <summary>
    /// create_external_resource_pool
    /// 	 : CREATE  EXTERNAL  RESOURCE  POOL  pool_name  WITH  LR_BRACKET  MAX_CPU_PERCENT  EQUAL    COMMA?  AFFINITY  CPU  EQUAL  AUTO COMMA?  DECIMAL  TO  DECIMAL COMMA  DECIMAL+ NUMANODE  EQUAL  COMMA?  DECIMAL  TO  DECIMAL COMMA?  DECIMAL+  COMMA?  MAX_MEMORY_PERCENT  EQUAL  ?  COMMA?  MAX_PROCESSES  EQUAL  ?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateExternalResourcePool : AstRule
    {
        
        private AstPoolName _poolName;
        
        public AstCreateExternalResourcePool(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolName>())
                {
                    this._poolName = ((AstPoolName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateExternalResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolName>())
                {
                    this._poolName = ((AstPoolName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolName PoolName
        {
            get
            {
                return this._poolName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateExternalResourcePool(this);
        }
    }
    
    /// <summary>
    /// alter_fulltext_catalog
    /// 	 : ALTER  FULLTEXT  CATALOG  catalog_name  REBUILD  WITH  ACCENT_SENSITIVITY  EQUAL  on_off? REORGANIZE AS  DEFAULT
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterFulltextCatalog : AstRule
    {
        
        private AstCatalogName _catalogName;
        
        public AstAlterFulltextCatalog(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogName>())
                {
                    this._catalogName = ((AstCatalogName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterFulltextCatalog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogName>())
                {
                    this._catalogName = ((AstCatalogName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCatalogName CatalogName
        {
            get
            {
                return this._catalogName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterFulltextCatalog(this);
        }
    }
    
    /// <summary>
    /// create_fulltext_catalog
    /// 	 : CREATE  FULLTEXT  CATALOG  catalog_name  ON  FILEGROUP  file_group_id?  IN  PATH  ?  WITH  ACCENT_SENSITIVITY  EQUAL  on_off?  AS  DEFAULT?  AUTHORIZATION  owner_name?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateFulltextCatalog : AstRule
    {
        
        private AstCatalogName _catalogName;
        
        public AstCreateFulltextCatalog(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogName>())
                {
                    this._catalogName = ((AstCatalogName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateFulltextCatalog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogName>())
                {
                    this._catalogName = ((AstCatalogName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCatalogName CatalogName
        {
            get
            {
                return this._catalogName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateFulltextCatalog(this);
        }
    }
    
    /// <summary>
    /// alter_fulltext_stoplist
    /// 	 : ALTER  FULLTEXT  STOPLIST  stoplist_name  ADD    LANGUAGE  STRING DECIMAL BINARY DROP    LANGUAGE  STRING DECIMAL BINARY ALL  STRING DECIMAL BINARY ALL
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterFulltextStoplist : AstRule
    {
        
        private AstStoplistName _stoplistName;
        
        public AstAlterFulltextStoplist(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistName>())
                {
                    this._stoplistName = ((AstStoplistName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterFulltextStoplist(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistName>())
                {
                    this._stoplistName = ((AstStoplistName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStoplistName StoplistName
        {
            get
            {
                return this._stoplistName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterFulltextStoplist(this);
        }
    }
    
    /// <summary>
    /// create_fulltext_stoplist
    /// 	 : CREATE  FULLTEXT  STOPLIST  stoplist_name  FROM  database_name  DOT?  stoplist_name SYSTEM  STOPLIST?  AUTHORIZATION  owner_name?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateFulltextStoplist : AstRule
    {
        
        private AstStoplistName _stoplistName;
        
        public AstCreateFulltextStoplist(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistName>())
                {
                    this._stoplistName = ((AstStoplistName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateFulltextStoplist(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistName>())
                {
                    this._stoplistName = ((AstStoplistName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStoplistName StoplistName
        {
            get
            {
                return this._stoplistName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateFulltextStoplist(this);
        }
    }
    
    /// <summary>
    /// alter_login_sql_server
    /// 	 : ALTER  LOGIN  login_name  ENABLE DISABLE? WITH  PASSWORD  EQUAL     HASHED  MUST_CHANGE UNLOCK*?  OLD_PASSWORD  EQUAL    MUST_CHANGE UNLOCK*?  DEFAULT_DATABASE  EQUAL  database_name?  DEFAULT_LANGUAGE  EQUAL  language?  NAME  EQUAL  login_name?  CHECK_POLICY  EQUAL  on_off?  CHECK_EXPIRATION  EQUAL  on_off?  CREDENTIAL  EQUAL  credential_name?  NO  CREDENTIAL? ADD DROP  CREDENTIAL  credential_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterLoginSqlServer : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstAlterLoginSqlServer(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterLoginSqlServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginSqlServer(this);
        }
    }
    
    /// <summary>
    /// create_login_sql_server
    /// 	 : CREATE  LOGIN  login_name  WITH  PASSWORD  EQUAL     HASHED  MUST_CHANGE UNLOCK*?  COMMA?  SID  EQUAL  ?  COMMA?  DEFAULT_DATABASE  EQUAL  database_name?  COMMA?  DEFAULT_LANGUAGE  EQUAL  language?  COMMA?  CHECK_EXPIRATION  EQUAL  on_off?  COMMA?  CHECK_POLICY  EQUAL  on_off?  COMMA?  CREDENTIAL  EQUAL  credential_name? FROM  WINDOWS  WITH  COMMA?  DEFAULT_DATABASE  EQUAL  database_name?  COMMA?  DEFAULT_LANGUAGE  EQUAL  ? CERTIFICATE  certificate_name ASYMMETRIC  KEY  asym_key_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateLoginSqlServer : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstCreateLoginSqlServer(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateLoginSqlServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginSqlServer(this);
        }
    }
    
    /// <summary>
    /// alter_login_azure_sql
    /// 	 : ALTER  LOGIN  login_name  ENABLE DISABLE? WITH  PASSWORD  EQUAL    OLD_PASSWORD  EQUAL  ? NAME  EQUAL  login_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterLoginAzureSql : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstAlterLoginAzureSql(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterLoginAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginAzureSql(this);
        }
    }
    
    /// <summary>
    /// create_login_azure_sql
    /// 	 : CREATE  LOGIN  login_name  WITH  PASSWORD  EQUAL  STRING  SID  EQUAL  ?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateLoginAzureSql : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstCreateLoginAzureSql(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateLoginAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginAzureSql(this);
        }
    }
    
    /// <summary>
    /// alter_login_azure_sql_dw_and_pdw
    /// 	 : ALTER  LOGIN  login_name  enable_disable? WITH  PASSWORD  EQUAL    OLD_PASSWORD  EQUAL    MUST_CHANGE UNLOCK*? NAME  EQUAL  login_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterLoginAzureSqlDwAndPdw : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstAlterLoginAzureSqlDwAndPdw(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterLoginAzureSqlDwAndPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginAzureSqlDwAndPdw(this);
        }
    }
    
    /// <summary>
    /// enable_disable
    /// 	 : ENABLE
    /// 	 | DISABLE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstEnableDisable : AstTerminal<AstEnableDisableEnum>
    {
        
        public AstEnableDisable(ITerminalNode t, string value) : 
                base(t, AstEnableDisable.GetValue(value))
        {
        }
        
        public AstEnableDisable(ITerminalNode t, AstEnableDisableEnum value) : 
                base(t, value)
        {
        }
        
        public AstEnableDisable(ParserRuleContext ctx, string value) : 
                base(ctx, AstEnableDisable.GetValue(value))
        {
        }
        
        public AstEnableDisable(Position p, string value) : 
                base(p, AstEnableDisable.GetValue(value))
        {
        }
        
        public AstEnableDisable(Position p, AstEnableDisableEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEnableDisable(this);
        }
        
        protected static AstEnableDisableEnum GetValue(string value)
        {
            if ((value == "ENABLE"))
            {
                return AstEnableDisableEnum.Enable;
            }
            if ((value == "DISABLE"))
            {
                return AstEnableDisableEnum.Disable;
            }
            return AstEnableDisableEnum._undefined;
        }
    }
    
    /// <summary>
    /// create_login_pdw
    /// 	 : CREATE  LOGIN  login_name  WITH  PASSWORD  EQUAL    MUST_CHANGE?  CHECK_POLICY  EQUAL  on_off?? FROM  WINDOWS
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateLoginPdw : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstCreateLoginPdw(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateLoginPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginPdw(this);
        }
    }
    
    /// <summary>
    /// alter_master_key_sql_server
    /// 	 : ALTER  MASTER  KEY  FORCE?  REGENERATE  WITH  ENCRYPTION  BY  PASSWORD  EQUAL   ADD DROP  ENCRYPTION  BY  SERVICE  MASTER  KEY PASSWORD  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterMasterKeySqlServer : AstRule
    {
        
        public AstAlterMasterKeySqlServer(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterMasterKeySqlServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterMasterKeySqlServer(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterMasterKeySqlServer(this);
        }
    }
    
    /// <summary>
    /// create_master_key_sql_server
    /// 	 : CREATE  MASTER  KEY  ENCRYPTION  BY  PASSWORD  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateMasterKeySqlServer : AstRule
    {
        
        public AstCreateMasterKeySqlServer(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateMasterKeySqlServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateMasterKeySqlServer(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateMasterKeySqlServer(this);
        }
    }
    
    /// <summary>
    /// alter_master_key_azure_sql
    /// 	 : ALTER  MASTER  KEY  FORCE?  REGENERATE  WITH  ENCRYPTION  BY  PASSWORD  EQUAL   ADD  ENCRYPTION  BY  SERVICE  MASTER  KEY PASSWORD  EQUAL   DROP  ENCRYPTION  BY  PASSWORD  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterMasterKeyAzureSql : AstRule
    {
        
        public AstAlterMasterKeyAzureSql(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterMasterKeyAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterMasterKeyAzureSql(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterMasterKeyAzureSql(this);
        }
    }
    
    /// <summary>
    /// create_master_key_azure_sql
    /// 	 : CREATE  MASTER  KEY  ENCRYPTION  BY  PASSWORD  EQUAL  ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateMasterKeyAzureSql : AstRule
    {
        
        public AstCreateMasterKeyAzureSql(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateMasterKeyAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateMasterKeyAzureSql(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateMasterKeyAzureSql(this);
        }
    }
    
    /// <summary>
    /// alter_message_type
    /// 	 : ALTER  MESSAGE  TYPE  message_type_name  VALIDATION  EQUAL  NONE EMPTY WELL_FORMED_XML VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterMessageType : AstRule
    {
        
        private AstMessageTypeName _messageTypeName;
        
        public AstAlterMessageType(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeName>())
                {
                    this._messageTypeName = ((AstMessageTypeName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterMessageType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeName>())
                {
                    this._messageTypeName = ((AstMessageTypeName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMessageTypeName MessageTypeName
        {
            get
            {
                return this._messageTypeName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterMessageType(this);
        }
    }
    
    /// <summary>
    /// alter_partition_function
    /// 	 : ALTER  PARTITION  FUNCTION  partition_function_name  LR_BRACKET  RR_BRACKET  split_or_merge  RANGE  LR_BRACKET  DECIMAL  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterPartitionFunction : AstRule
    {
        
        private AstPartitionFunctionName _partitionFunctionName;
        
        private AstSplitOrMerge _splitOrMerge;
        
        public AstAlterPartitionFunction(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionName>())
                {
                    this._partitionFunctionName = ((AstPartitionFunctionName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSplitOrMerge>())
                {
                    this._splitOrMerge = ((AstSplitOrMerge)(enumerator.Current));
                }
            }
        }
        
        public AstAlterPartitionFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionName>())
                {
                    this._partitionFunctionName = ((AstPartitionFunctionName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSplitOrMerge>())
                {
                    this._splitOrMerge = ((AstSplitOrMerge)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionFunctionName PartitionFunctionName
        {
            get
            {
                return this._partitionFunctionName;
            }
        }
        
        public virtual AstSplitOrMerge SplitOrMerge
        {
            get
            {
                return this._splitOrMerge;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterPartitionFunction(this);
        }
    }
    
    /// <summary>
    /// split_or_merge
    /// 	 : SPLIT
    /// 	 | MERGE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstSplitOrMerge : AstTerminal<AstSplitOrMergeEnum>
    {
        
        public AstSplitOrMerge(ITerminalNode t, string value) : 
                base(t, AstSplitOrMerge.GetValue(value))
        {
        }
        
        public AstSplitOrMerge(ITerminalNode t, AstSplitOrMergeEnum value) : 
                base(t, value)
        {
        }
        
        public AstSplitOrMerge(ParserRuleContext ctx, string value) : 
                base(ctx, AstSplitOrMerge.GetValue(value))
        {
        }
        
        public AstSplitOrMerge(Position p, string value) : 
                base(p, AstSplitOrMerge.GetValue(value))
        {
        }
        
        public AstSplitOrMerge(Position p, AstSplitOrMergeEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSplitOrMerge(this);
        }
        
        protected static AstSplitOrMergeEnum GetValue(string value)
        {
            if ((value == "SPLIT"))
            {
                return AstSplitOrMergeEnum.Split;
            }
            if ((value == "MERGE"))
            {
                return AstSplitOrMergeEnum.Merge;
            }
            return AstSplitOrMergeEnum._undefined;
        }
    }
    
    /// <summary>
    /// alter_partition_scheme
    /// 	 : ALTER  PARTITION  SCHEME  partition_scheme_name  NEXT  USED  file_group_name?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterPartitionScheme : AstRule
    {
        
        private AstPartitionSchemeName _partitionSchemeName;
        
        public AstAlterPartitionScheme(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeName>())
                {
                    this._partitionSchemeName = ((AstPartitionSchemeName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterPartitionScheme(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeName>())
                {
                    this._partitionSchemeName = ((AstPartitionSchemeName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionSchemeName PartitionSchemeName
        {
            get
            {
                return this._partitionSchemeName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterPartitionScheme(this);
        }
    }
    
    /// <summary>
    /// alter_remote_service_binding
    /// 	 : ALTER  REMOTE  SERVICE  BINDING  binding_name  WITH  USER  EQUAL  user_name?  COMMA  ANONYMOUS  EQUAL  on_off?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterRemoteServiceBinding : AstRule
    {
        
        private AstBindingName _bindingName;
        
        public AstAlterRemoteServiceBinding(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingName>())
                {
                    this._bindingName = ((AstBindingName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterRemoteServiceBinding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingName>())
                {
                    this._bindingName = ((AstBindingName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBindingName BindingName
        {
            get
            {
                return this._bindingName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterRemoteServiceBinding(this);
        }
    }
    
    /// <summary>
    /// create_remote_service_binding
    /// 	 : CREATE  REMOTE  SERVICE  BINDING  binding_name  AUTHORIZATION  owner_name?  TO  SERVICE    WITH  USER  EQUAL  user_name?  COMMA  ANONYMOUS  EQUAL  on_off?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateRemoteServiceBinding : AstRule
    {
        
        private AstBindingName _bindingName;
        
        public AstCreateRemoteServiceBinding(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingName>())
                {
                    this._bindingName = ((AstBindingName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateRemoteServiceBinding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingName>())
                {
                    this._bindingName = ((AstBindingName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBindingName BindingName
        {
            get
            {
                return this._bindingName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateRemoteServiceBinding(this);
        }
    }
    
    /// <summary>
    /// create_resource_pool
    /// 	 : CREATE  RESOURCE  POOL  pool_name  WITH  LR_BRACKET  COMMA?  MIN_CPU_PERCENT  EQUAL  DECIMAL?  COMMA?  MAX_CPU_PERCENT  EQUAL  DECIMAL?  COMMA?  CAP_CPU_PERCENT  EQUAL  DECIMAL?  COMMA?  AFFINITY  SCHEDULER  EQUAL  AUTO LR_BRACKET  COMMA?  DECIMAL DECIMAL  TO  DECIMAL+  RR_BRACKET NUMANODE  EQUAL  LR_BRACKET  COMMA?  DECIMAL DECIMAL  TO  DECIMAL+  RR_BRACKET?  COMMA?  MIN_MEMORY_PERCENT  EQUAL  DECIMAL?  COMMA?  MAX_MEMORY_PERCENT  EQUAL  DECIMAL?  COMMA?  MIN_IOPS_PER_VOLUME  EQUAL  DECIMAL?  COMMA?  MAX_IOPS_PER_VOLUME  EQUAL  DECIMAL?  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateResourcePool : AstRule
    {
        
        private AstPoolName _poolName;
        
        public AstCreateResourcePool(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolName>())
                {
                    this._poolName = ((AstPoolName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolName>())
                {
                    this._poolName = ((AstPoolName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolName PoolName
        {
            get
            {
                return this._poolName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateResourcePool(this);
        }
    }
    
    /// <summary>
    /// alter_resource_governor
    /// 	 : ALTER  RESOURCE  GOVERNOR  DISABLE RECONFIGURE WITH  LR_BRACKET  CLASSIFIER_FUNCTION  EQUAL  schema_name  DOT  function_name NULL_  RR_BRACKET RESET  STATISTICS WITH  LR_BRACKET  MAX_OUTSTANDING_IO_PER_VOLUME  EQUAL    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterResourceGovernor : AstRule
    {
        
        public AstAlterResourceGovernor(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterResourceGovernor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterResourceGovernor(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterResourceGovernor(this);
        }
    }
    
    /// <summary>
    /// alter_db_role
    /// 	 : ALTER  ROLE  role_name  add_drop  MEMBER  database_name WITH  NAME  EQUAL  role_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterDbRole : AstRule
    {
        
        private AstRoleName _roleName;
        
        public AstAlterDbRole(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this._roleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterDbRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this._roleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleName RoleName
        {
            get
            {
                return this._roleName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterDbRole(this);
        }
    }
    
    /// <summary>
    /// add_drop
    /// 	 : ADD
    /// 	 | DROP
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstAddDrop : AstTerminal<AstAddDropEnum>
    {
        
        public AstAddDrop(ITerminalNode t, string value) : 
                base(t, AstAddDrop.GetValue(value))
        {
        }
        
        public AstAddDrop(ITerminalNode t, AstAddDropEnum value) : 
                base(t, value)
        {
        }
        
        public AstAddDrop(ParserRuleContext ctx, string value) : 
                base(ctx, AstAddDrop.GetValue(value))
        {
        }
        
        public AstAddDrop(Position p, string value) : 
                base(p, AstAddDrop.GetValue(value))
        {
        }
        
        public AstAddDrop(Position p, AstAddDropEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAddDrop(this);
        }
        
        protected static AstAddDropEnum GetValue(string value)
        {
            if ((value == "ADD"))
            {
                return AstAddDropEnum.Add;
            }
            if ((value == "DROP"))
            {
                return AstAddDropEnum.Drop;
            }
            return AstAddDropEnum._undefined;
        }
    }
    
    /// <summary>
    /// create_db_role
    /// 	 : CREATE  ROLE  role_name  AUTHORIZATION  owner_name?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateDbRole : AstRule
    {
        
        private AstRoleName _roleName;
        
        public AstCreateDbRole(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this._roleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateDbRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this._roleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleName RoleName
        {
            get
            {
                return this._roleName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateDbRole(this);
        }
    }
    
    /// <summary>
    /// create_route
    /// 	 : CREATE  ROUTE  route_name  AUTHORIZATION  owner_name?  WITH  COMMA?  SERVICE_NAME  EQUAL  ?  COMMA?  BROKER_INSTANCE  EQUAL  ?  COMMA?  LIFETIME  EQUAL  DECIMAL?  COMMA?  ADDRESS  EQUAL  STRING  COMMA  MIRROR_ADDRESS  EQUAL  STRING?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateRoute : AstRule
    {
        
        private AstRouteName _routeName;
        
        public AstCreateRoute(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteName>())
                {
                    this._routeName = ((AstRouteName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateRoute(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteName>())
                {
                    this._routeName = ((AstRouteName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRouteName RouteName
        {
            get
            {
                return this._routeName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateRoute(this);
        }
    }
    
    /// <summary>
    /// create_rule
    /// 	 : CREATE  RULE  schema_name  DOT?  rule_name  AS  search_condition
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateRule : AstRule
    {
        
        private AstRuleName _ruleName;
        
        private AstSearchCondition _searchCondition;
        
        public AstCreateRule(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRuleName>())
                {
                    this._ruleName = ((AstRuleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstCreateRule(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRuleName>())
                {
                    this._ruleName = ((AstRuleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRuleName RuleName
        {
            get
            {
                return this._ruleName;
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateRule(this);
        }
    }
    
    /// <summary>
    /// alter_schema_sql
    /// 	 : ALTER  SCHEMA  schema_name  TRANSFER  OBJECT TYPE XML  SCHEMA  COLLECTION  DOUBLE_COLON?  id_  DOT  id_?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterSchemaSql : AstRule
    {
        
        private AstSchemaName _schemaName;
        
        private AstId _id;
        
        public AstAlterSchemaSql(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaName>())
                {
                    this._schemaName = ((AstSchemaName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterSchemaSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaName>())
                {
                    this._schemaName = ((AstSchemaName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaName SchemaName
        {
            get
            {
                return this._schemaName;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSchemaSql(this);
        }
    }
    
    /// <summary>
    /// create_schema
    /// 	 : CREATE  SCHEMA  schema_name AUTHORIZATION  owner_name schema_name  AUTHORIZATION  owner_name  create_table create_view grant_deny  enum_dml  ON  SCHEMA  DOUBLE_COLON?  object_name  TO  owner_name REVOKE  enum_dml  ON  SCHEMA  DOUBLE_COLON?  object_name  FROM  owner_name*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateSchema : AstRule
    {
        
        public AstCreateSchema(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateSchema(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateSchema(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSchema(this);
        }
    }
    
    /// <summary>
    /// enum_dml
    /// 	 : SELECT
    /// 	 | INSERT
    /// 	 | DELETE
    /// 	 | UPDATE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstEnumDml : AstTerminal<AstEnumDmlEnum>
    {
        
        public AstEnumDml(ITerminalNode t, string value) : 
                base(t, AstEnumDml.GetValue(value))
        {
        }
        
        public AstEnumDml(ITerminalNode t, AstEnumDmlEnum value) : 
                base(t, value)
        {
        }
        
        public AstEnumDml(ParserRuleContext ctx, string value) : 
                base(ctx, AstEnumDml.GetValue(value))
        {
        }
        
        public AstEnumDml(Position p, string value) : 
                base(p, AstEnumDml.GetValue(value))
        {
        }
        
        public AstEnumDml(Position p, AstEnumDmlEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEnumDml(this);
        }
        
        protected static AstEnumDmlEnum GetValue(string value)
        {
            if ((value == "SELECT"))
            {
                return AstEnumDmlEnum.Select;
            }
            if ((value == "INSERT"))
            {
                return AstEnumDmlEnum.Insert;
            }
            if ((value == "DELETE"))
            {
                return AstEnumDmlEnum.Delete;
            }
            if ((value == "UPDATE"))
            {
                return AstEnumDmlEnum.Update;
            }
            return AstEnumDmlEnum._undefined;
        }
    }
    
    /// <summary>
    /// grant_deny
    /// 	 : GRANT
    /// 	 | DENY
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstGrantDeny : AstTerminal<AstGrantDenyEnum>
    {
        
        public AstGrantDeny(ITerminalNode t, string value) : 
                base(t, AstGrantDeny.GetValue(value))
        {
        }
        
        public AstGrantDeny(ITerminalNode t, AstGrantDenyEnum value) : 
                base(t, value)
        {
        }
        
        public AstGrantDeny(ParserRuleContext ctx, string value) : 
                base(ctx, AstGrantDeny.GetValue(value))
        {
        }
        
        public AstGrantDeny(Position p, string value) : 
                base(p, AstGrantDeny.GetValue(value))
        {
        }
        
        public AstGrantDeny(Position p, AstGrantDenyEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGrantDeny(this);
        }
        
        protected static AstGrantDenyEnum GetValue(string value)
        {
            if ((value == "GRANT"))
            {
                return AstGrantDenyEnum.Grant;
            }
            if ((value == "DENY"))
            {
                return AstGrantDenyEnum.Deny;
            }
            return AstGrantDenyEnum._undefined;
        }
    }
    
    /// <summary>
    /// create_schema_azure_sql_dw_and_pdw
    /// 	 : CREATE  SCHEMA  schema_name  AUTHORIZATION  owner_name?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateSchemaAzureSqlDwAndPdw : AstRule
    {
        
        private AstSchemaName _schemaName;
        
        public AstCreateSchemaAzureSqlDwAndPdw(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaName>())
                {
                    this._schemaName = ((AstSchemaName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSchemaAzureSqlDwAndPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaName>())
                {
                    this._schemaName = ((AstSchemaName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaName SchemaName
        {
            get
            {
                return this._schemaName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSchemaAzureSqlDwAndPdw(this);
        }
    }
    
    /// <summary>
    /// alter_schema_azure_sql_dw_and_pdw
    /// 	 : ALTER  SCHEMA  schema_name  TRANSFER  OBJECT  DOUBLE_COLON?  id_  DOT  ID?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterSchemaAzureSqlDwAndPdw : AstRule
    {
        
        private AstSchemaName _schemaName;
        
        private AstId _id;
        
        public AstAlterSchemaAzureSqlDwAndPdw(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaName>())
                {
                    this._schemaName = ((AstSchemaName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterSchemaAzureSqlDwAndPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaName>())
                {
                    this._schemaName = ((AstSchemaName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaName SchemaName
        {
            get
            {
                return this._schemaName;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSchemaAzureSqlDwAndPdw(this);
        }
    }
    
    /// <summary>
    /// create_search_property_list
    /// 	 : CREATE  SEARCH  PROPERTY  LIST  source_list_name  FROM  database_name  DOT?  source_list_name?  AUTHORIZATION  owner_name?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateSearchPropertyList : AstRule
    {
        
        private AstSourceListName _sourceListName;
        
        public AstCreateSearchPropertyList(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSourceListName>())
                {
                    this._sourceListName = ((AstSourceListName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSearchPropertyList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSourceListName>())
                {
                    this._sourceListName = ((AstSourceListName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSourceListName SourceListName
        {
            get
            {
                return this._sourceListName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSearchPropertyList(this);
        }
    }
    
    /// <summary>
    /// create_security_policy
    /// 	 : CREATE  SECURITY  POLICY  schema_name  DOT?  security_policy_name  COMMA?  ADD  FILTER BLOCK?  PREDICATE  tvf_schema_name  DOT  security_predicate_function_name  LR_BRACKET  COMMA?  column_name_or_arguments+  RR_BRACKET  ON  schema_name  DOT  tableName  COMMA?  AFTER  INSERT UPDATE COMMA?  BEFORE  UPDATE DELETE*+  WITH  LR_BRACKET  STATE  EQUAL  on_off  SCHEMABINDING  on_off?  RR_BRACKET?  NOT  FOR  REPLICATION?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateSecurityPolicy : AstRule
    {
        
        private AstSecurityPolicyName _securityPolicyName;
        
        public AstCreateSecurityPolicy(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSecurityPolicyName>())
                {
                    this._securityPolicyName = ((AstSecurityPolicyName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSecurityPolicy(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSecurityPolicyName>())
                {
                    this._securityPolicyName = ((AstSecurityPolicyName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSecurityPolicyName SecurityPolicyName
        {
            get
            {
                return this._securityPolicyName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSecurityPolicy(this);
        }
    }
    
    /// <summary>
    /// alter_sequence
    /// 	 : ALTER  SEQUENCE  schema_name  DOT?  sequence_name  RESTART  WITH  DECIMAL??  INCREMENT  BY  ?  MINVALUE  DECIMAL NO  MINVALUE?  MAXVALUE  DECIMAL NO  MAXVALUE?  CYCLE NO  CYCLE?  CACHE  DECIMAL NO  CACHE?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterSequence : AstRule
    {
        
        private AstSequenceName _sequenceName;
        
        public AstAlterSequence(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSequenceName>())
                {
                    this._sequenceName = ((AstSequenceName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterSequence(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSequenceName>())
                {
                    this._sequenceName = ((AstSequenceName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSequenceName SequenceName
        {
            get
            {
                return this._sequenceName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSequence(this);
        }
    }
    
    /// <summary>
    /// create_sequence
    /// 	 : CREATE  SEQUENCE  schema_name  DOT?  sequence_name  AS  data_type?  START  WITH  DECIMAL?  INCREMENT  BY  MINUS?  DECIMAL?  MINVALUE  MINUS?  DECIMAL? NO  MINVALUE?  MAXVALUE  MINUS?  DECIMAL? NO  MAXVALUE?  CYCLE NO  CYCLE?  CACHE  DECIMAL? NO  CACHE?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateSequence : AstRule
    {
        
        private AstSequenceName _sequenceName;
        
        public AstCreateSequence(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSequenceName>())
                {
                    this._sequenceName = ((AstSequenceName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSequence(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSequenceName>())
                {
                    this._sequenceName = ((AstSequenceName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSequenceName SequenceName
        {
            get
            {
                return this._sequenceName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSequence(this);
        }
    }
    
    /// <summary>
    /// alter_server_audit
    /// 	 : ALTER  SERVER  AUDIT  audit_name  TO  FILE  LR_BRACKET  COMMA?  FILEPATH  EQUAL   COMMA?  MAXSIZE  EQUAL  DECIMAL  MB GB TB UNLIMITED COMMA?  MAX_ROLLOVER_FILES  EQUAL   COMMA?  MAX_FILES  EQUAL   COMMA?  RESERVE_DISK_SPACE  EQUAL  on_off*  RR_BRACKET APPLICATION_LOG SECURITY_LOG?  WITH  LR_BRACKET  COMMA?  QUEUE_DELAY  EQUAL   COMMA?  ON_FAILURE  EQUAL  CONTINUE SHUTDOWN FAIL_OPERATION COMMA?  STATE  EQUAL  on_off*  RR_BRACKET?  WHERE  COMMA?  NOT?  event_field_name  EQUAL LESS  GREATER EXCLAMATION  EQUAL GREATER GREATER  EQUAL LESS LESS  EQUAL  DECIMAL STRING COMMA?  AND OR  NOT?  EQUAL LESS  GREATER EXCLAMATION  EQUAL GREATER GREATER  EQUAL LESS LESS  EQUAL  DECIMAL STRING? REMOVE  WHERE MODIFY  NAME  EQUAL  audit_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterServerAudit : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstAlterServerAudit(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerAudit(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerAudit(this);
        }
    }
    
    /// <summary>
    /// create_server_audit
    /// 	 : CREATE  SERVER  AUDIT  audit_name  TO  FILE  LR_BRACKET  COMMA?  FILEPATH  EQUAL   COMMA?  MAXSIZE  EQUAL  DECIMAL  MB GB TB UNLIMITED COMMA?  MAX_ROLLOVER_FILES  EQUAL   COMMA?  MAX_FILES  EQUAL   COMMA?  RESERVE_DISK_SPACE  EQUAL  on_off*  RR_BRACKET APPLICATION_LOG SECURITY_LOG?  WITH  LR_BRACKET  COMMA?  QUEUE_DELAY  EQUAL   COMMA?  ON_FAILURE  EQUAL  CONTINUE SHUTDOWN FAIL_OPERATION COMMA?  STATE  EQUAL  on_off COMMA?  AUDIT_GUID  EQUAL  audit_guid*  RR_BRACKET?  WHERE  COMMA?  NOT?  event_field_name  EQUAL LESS  GREATER EXCLAMATION  EQUAL GREATER GREATER  EQUAL LESS LESS  EQUAL  DECIMAL STRING COMMA?  AND OR  NOT?  EQUAL LESS  GREATER EXCLAMATION  EQUAL GREATER GREATER  EQUAL LESS LESS  EQUAL  DECIMAL STRING? REMOVE  WHERE MODIFY  NAME  EQUAL  audit_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateServerAudit : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstCreateServerAudit(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateServerAudit(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerAudit(this);
        }
    }
    
    /// <summary>
    /// alter_server_audit_specification
    /// 	 : ALTER  SERVER  AUDIT  SPECIFICATION  audit_name  FOR  SERVER  AUDIT  audit_name?  ADD DROP  LR_BRACKET  audit_action_group_name  RR_BRACKET*  WITH  LR_BRACKET  STATE  EQUAL  on_off  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterServerAuditSpecification : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstAlterServerAuditSpecification(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerAuditSpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerAuditSpecification(this);
        }
    }
    
    /// <summary>
    /// create_server_audit_specification
    /// 	 : CREATE  SERVER  AUDIT  SPECIFICATION  audit_name  FOR  SERVER  AUDIT  audit_name?  ADD  LR_BRACKET  audit_action_group_name  RR_BRACKET*  WITH  LR_BRACKET  STATE  EQUAL  on_off  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateServerAuditSpecification : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstCreateServerAuditSpecification(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateServerAuditSpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerAuditSpecification(this);
        }
    }
    
    /// <summary>
    /// alter_server_configuration
    /// 	 : ALTER  SERVER  CONFIGURATION  SET  PROCESS  AFFINITY  CPU  EQUAL  AUTO COMMA?  DECIMAL COMMA?  DECIMAL  TO  DECIMAL+ NUMANODE  EQUAL  COMMA?  DECIMAL COMMA?  DECIMAL  TO  DECIMAL+ DIAGNOSTICS  LOG  ON OFF PATH  EQUAL  STRING DEFAULT MAX_SIZE  EQUAL  DECIMAL  MB DEFAULT MAX_FILES  EQUAL  DECIMAL DEFAULT FAILOVER  CLUSTER  PROPERTY  VERBOSELOGGING  EQUAL  STRING DEFAULT SQLDUMPERFLAGS  EQUAL  STRING DEFAULT SQLDUMPERPATH  EQUAL  STRING DEFAULT SQLDUMPERTIMEOUT  STRING DEFAULT FAILURECONDITIONLEVEL  EQUAL  STRING DEFAULT HEALTHCHECKTIMEOUT  EQUAL  DECIMAL DEFAULT HADR  CLUSTER  CONTEXT  EQUAL  STRING LOCAL BUFFER  POOL  EXTENSION  ON  LR_BRACKET  FILENAME  EQUAL  STRING  COMMA  SIZE  EQUAL  DECIMAL  KB MB GB  RR_BRACKET OFF SET  SOFTNUMA  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterServerConfiguration : AstRule
    {
        
        public AstAlterServerConfiguration(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterServerConfiguration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterServerConfiguration(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerConfiguration(this);
        }
    }
    
    /// <summary>
    /// alter_server_role
    /// 	 : ALTER  SERVER  ROLE  server_role_name  ADD DROP  MEMBER  server_name WITH  NAME  EQUAL  server_role_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterServerRole : AstRule
    {
        
        private AstServerRoleName _serverRoleName;
        
        public AstAlterServerRole(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleName>())
                {
                    this._serverRoleName = ((AstServerRoleName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleName>())
                {
                    this._serverRoleName = ((AstServerRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleName ServerRoleName
        {
            get
            {
                return this._serverRoleName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerRole(this);
        }
    }
    
    /// <summary>
    /// create_server_role
    /// 	 : CREATE  SERVER  ROLE  server_role_name  AUTHORIZATION  server_name?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateServerRole : AstRule
    {
        
        private AstServerRoleName _serverRoleName;
        
        public AstCreateServerRole(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleName>())
                {
                    this._serverRoleName = ((AstServerRoleName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateServerRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleName>())
                {
                    this._serverRoleName = ((AstServerRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleName ServerRoleName
        {
            get
            {
                return this._serverRoleName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerRole(this);
        }
    }
    
    /// <summary>
    /// alter_server_role_pdw
    /// 	 : ALTER  SERVER  ROLE  server_role_name  ADD DROP  MEMBER  login_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterServerRolePdw : AstRule
    {
        
        private AstServerRoleName _serverRoleName;
        
        private AstLoginName _loginName;
        
        public AstAlterServerRolePdw(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleName>())
                {
                    this._serverRoleName = ((AstServerRoleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerRolePdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleName>())
                {
                    this._serverRoleName = ((AstServerRoleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleName ServerRoleName
        {
            get
            {
                return this._serverRoleName;
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerRolePdw(this);
        }
    }
    
    /// <summary>
    /// alter_service
    /// 	 : ALTER  SERVICE  modified_service_name  ON  QUEUE  schema_name  DOT  queue_name?  COMMA?  ADD DROP  modified_contract_name*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterService : AstRule
    {
        
        private AstModifiedServiceName _modifiedServiceName;
        
        public AstAlterService(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModifiedServiceName>())
                {
                    this._modifiedServiceName = ((AstModifiedServiceName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterService(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModifiedServiceName>())
                {
                    this._modifiedServiceName = ((AstModifiedServiceName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstModifiedServiceName ModifiedServiceName
        {
            get
            {
                return this._modifiedServiceName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterService(this);
        }
    }
    
    /// <summary>
    /// create_service
    /// 	 : CREATE  SERVICE  create_service_name  AUTHORIZATION  owner_name?  ON  QUEUE  schema_name  DOT?  queue_name  LR_BRACKET  COMMA?  id_ DEFAULT+  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateService : AstRule
    {
        
        private AstCreateServiceName _createServiceName;
        
        private AstQueueName _queueName;
        
        public AstCreateService(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateServiceName>())
                {
                    this._createServiceName = ((AstCreateServiceName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueueName>())
                {
                    this._queueName = ((AstQueueName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateService(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateServiceName>())
                {
                    this._createServiceName = ((AstCreateServiceName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueueName>())
                {
                    this._queueName = ((AstQueueName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCreateServiceName CreateServiceName
        {
            get
            {
                return this._createServiceName;
            }
        }
        
        public virtual AstQueueName QueueName
        {
            get
            {
                return this._queueName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateService(this);
        }
    }
    
    /// <summary>
    /// alter_service_master_key
    /// 	 : ALTER  SERVICE  MASTER  KEY  FORCE?  REGENERATE WITH  OLD_ACCOUNT  EQUAL    COMMA  OLD_PASSWORD  EQUAL   NEW_ACCOUNT  EQUAL    COMMA  NEW_PASSWORD  EQUAL  ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterServiceMasterKey : AstRule
    {
        
        public AstAlterServiceMasterKey(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterServiceMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterServiceMasterKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServiceMasterKey(this);
        }
    }
    
    /// <summary>
    /// alter_symmetric_key
    /// 	 : ALTER  SYMMETRIC  KEY  symmetric_key_name  add_drop  ENCRYPTION  BY  CERTIFICATE  certificate_name PASSWORD  EQUAL   SYMMETRIC  KEY  symmetric_key_name ASYMMETRIC  KEY  asym_key_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterSymmetricKey : AstRule
    {
        
        private AstSymmetricKeyName _symmetricKeyName;
        
        public AstAlterSymmetricKey(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyName>())
                {
                    this._symmetricKeyName = ((AstSymmetricKeyName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterSymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyName>())
                {
                    this._symmetricKeyName = ((AstSymmetricKeyName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSymmetricKeyName SymmetricKeyName
        {
            get
            {
                return this._symmetricKeyName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSymmetricKey(this);
        }
    }
    
    /// <summary>
    /// create_synonym
    /// 	 : CREATE  SYNONYM  schema_name  DOT?  synonym_name  FOR  server_name  DOT?  database_name  DOT?  schema_name  DOT?  object_name database_name  DOT?    DOT?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateSynonym : AstRule
    {
        
        private AstSynonymName _synonymName;
        
        public AstCreateSynonym(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSynonymName>())
                {
                    this._synonymName = ((AstSynonymName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSynonym(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSynonymName>())
                {
                    this._synonymName = ((AstSynonymName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSynonymName SynonymName
        {
            get
            {
                return this._synonymName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSynonym(this);
        }
    }
    
    /// <summary>
    /// alter_user
    /// 	 : ALTER  USER  user_name  WITH  COMMA?  NAME  EQUAL  user_name COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name NULL_ COMMA?  LOGIN  EQUAL  login_name COMMA?  PASSWORD  EQUAL  STRING  OLD_PASSWORD  EQUAL  STRING+ COMMA?  DEFAULT_LANGUAGE  EQUAL  NONE  language COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off+
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterUser : AstRule
    {
        
        private AstUserName _userName;
        
        public AstAlterUser(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserName>())
                {
                    this._userName = ((AstUserName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterUser(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserName>())
                {
                    this._userName = ((AstUserName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUserName UserName
        {
            get
            {
                return this._userName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterUser(this);
        }
    }
    
    /// <summary>
    /// create_user
    /// 	 : CREATE  USER  user_name  FOR FROM  LOGIN  login_name?  WITH  COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off*?
    /// 	 | CREATE  USER  windows_principal  WITH  COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  DEFAULT_LANGUAGE  EQUAL  NONE DECIMAL language COMMA?  SID  EQUAL  BINARY COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off*? user_name  WITH  PASSWORD  EQUAL    COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  DEFAULT_LANGUAGE  EQUAL  NONE DECIMAL language COMMA?  SID  EQUAL  BINARY COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off* azure_active_directory_principal  FROM  EXTERNAL  PROVIDER
    /// 	 | CREATE  USER  user_name  WITHOUT  LOGIN  COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off* FOR FROM  CERTIFICATE  certificate_name FOR FROM  ASYMMETRIC  KEY  asym_key_name
    /// 	 | CREATE  USER  user_name
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateUser : AstRule
    {
        
        public AstCreateUser(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateUser(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateUser(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateUser(this);
        }
    }
    
    /// <summary>
    /// create_user_azure_sql_dw
    /// 	 : CREATE  USER  user_name  FOR FROM  LOGIN  login_name WITHOUT  LOGIN?  WITH  DEFAULT_SCHEMA  EQUAL  schema_name?
    /// 	 | CREATE  USER  azure_active_directory_principal  FROM  EXTERNAL  PROVIDER  WITH  DEFAULT_SCHEMA  EQUAL  schema_name?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateUserAzureSqlDw : AstRule
    {
        
        public AstCreateUserAzureSqlDw(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateUserAzureSqlDw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateUserAzureSqlDw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateUserAzureSqlDw(this);
        }
    }
    
    /// <summary>
    /// alter_user_azure_sql
    /// 	 : ALTER  USER  user_name  WITH  COMMA?  NAME  EQUAL  user_name COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  LOGIN  EQUAL  login_name COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off+
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterUserAzureSql : AstRule
    {
        
        private AstUserName _userName;
        
        public AstAlterUserAzureSql(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserName>())
                {
                    this._userName = ((AstUserName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterUserAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserName>())
                {
                    this._userName = ((AstUserName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUserName UserName
        {
            get
            {
                return this._userName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterUserAzureSql(this);
        }
    }
    
    /// <summary>
    /// alter_workload_group
    /// 	 : ALTER  WORKLOAD  GROUP  workload_group_group_name DEFAULT_DOUBLE_QUOTE  WITH  LR_BRACKET  IMPORTANCE  EQUAL  LOW MEDIUM HIGH COMMA?  REQUEST_MAX_MEMORY_GRANT_PERCENT  EQUAL   COMMA?  REQUEST_MAX_CPU_TIME_SEC  EQUAL   REQUEST_MEMORY_GRANT_TIMEOUT_SEC  EQUAL   MAX_DOP  EQUAL   GROUP_MAX_REQUESTS  EQUAL  +  RR_BRACKET?  USING  workload_group_pool_name DEFAULT_DOUBLE_QUOTE?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterWorkloadGroup : AstRule
    {
        
        public AstAlterWorkloadGroup(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterWorkloadGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterWorkloadGroup(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterWorkloadGroup(this);
        }
    }
    
    /// <summary>
    /// create_workload_group
    /// 	 : CREATE  WORKLOAD  GROUP  workload_group_group_name  WITH  LR_BRACKET  IMPORTANCE  EQUAL  LOW MEDIUM HIGH COMMA?  REQUEST_MAX_MEMORY_GRANT_PERCENT  EQUAL   COMMA?  REQUEST_MAX_CPU_TIME_SEC  EQUAL   REQUEST_MEMORY_GRANT_TIMEOUT_SEC  EQUAL   MAX_DOP  EQUAL   GROUP_MAX_REQUESTS  EQUAL  +  RR_BRACKET?  USING  workload_group_pool_name DEFAULT_DOUBLE_QUOTE?  COMMA?  EXTERNAL  external_pool_name DEFAULT_DOUBLE_QUOTE??
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateWorkloadGroup : AstRule
    {
        
        private AstWorkloadGroupGroupName _workloadGroupGroupName;
        
        public AstCreateWorkloadGroup(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWorkloadGroupGroupName>())
                {
                    this._workloadGroupGroupName = ((AstWorkloadGroupGroupName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateWorkloadGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWorkloadGroupGroupName>())
                {
                    this._workloadGroupGroupName = ((AstWorkloadGroupGroupName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWorkloadGroupGroupName WorkloadGroupGroupName
        {
            get
            {
                return this._workloadGroupGroupName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateWorkloadGroup(this);
        }
    }
    
    /// <summary>
    /// create_xml_schema_collection
    /// 	 : CREATE  XML  SCHEMA  COLLECTION  relational_schema  DOT?  sql_identifier  AS  STRING id_ LOCAL_ID
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateXmlSchemaCollection : AstRule
    {
        
        private AstSqlIdentifier _sqlIdentifier;
        
        public AstCreateXmlSchemaCollection(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlIdentifier>())
                {
                    this._sqlIdentifier = ((AstSqlIdentifier)(enumerator.Current));
                }
            }
        }
        
        public AstCreateXmlSchemaCollection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlIdentifier>())
                {
                    this._sqlIdentifier = ((AstSqlIdentifier)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSqlIdentifier SqlIdentifier
        {
            get
            {
                return this._sqlIdentifier;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateXmlSchemaCollection(this);
        }
    }
    
    /// <summary>
    /// create_partition_function
    /// 	 : CREATE  PARTITION  FUNCTION  partition_function_name  LR_BRACKET    RR_BRACKET  AS  RANGE  LEFT RIGHT?  FOR  VALUES  LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreatePartitionFunction : AstRule
    {
        
        private AstPartitionFunctionName _partitionFunctionName;
        
        public AstCreatePartitionFunction(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionName>())
                {
                    this._partitionFunctionName = ((AstPartitionFunctionName)(enumerator.Current));
                }
            }
        }
        
        public AstCreatePartitionFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionName>())
                {
                    this._partitionFunctionName = ((AstPartitionFunctionName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionFunctionName PartitionFunctionName
        {
            get
            {
                return this._partitionFunctionName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreatePartitionFunction(this);
        }
    }
    
    /// <summary>
    /// create_partition_scheme
    /// 	 : CREATE  PARTITION  SCHEME  partition_scheme_name  AS  PARTITION  partition_function_name  ALL?  TO  LR_BRACKET    COMMA  *  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreatePartitionScheme : AstRule
    {
        
        private AstPartitionSchemeName _partitionSchemeName;
        
        private AstPartitionFunctionName _partitionFunctionName;
        
        public AstCreatePartitionScheme(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeName>())
                {
                    this._partitionSchemeName = ((AstPartitionSchemeName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPartitionFunctionName>())
                {
                    this._partitionFunctionName = ((AstPartitionFunctionName)(enumerator.Current));
                }
            }
        }
        
        public AstCreatePartitionScheme(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeName>())
                {
                    this._partitionSchemeName = ((AstPartitionSchemeName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPartitionFunctionName>())
                {
                    this._partitionFunctionName = ((AstPartitionFunctionName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionSchemeName PartitionSchemeName
        {
            get
            {
                return this._partitionSchemeName;
            }
        }
        
        public virtual AstPartitionFunctionName PartitionFunctionName
        {
            get
            {
                return this._partitionFunctionName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreatePartitionScheme(this);
        }
    }
    
    /// <summary>
    /// create_queue
    /// 	 : CREATE  QUEUE  full_table_name queue_name  queue_settings?  ON  file_group_name DEFAULT?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateQueue : AstRule
    {
        
        private AstQueueSettings _queueSettings;
        
        public AstCreateQueue(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueueSettings>())
                {
                    this._queueSettings = ((AstQueueSettings)(enumerator.Current));
                }
            }
        }
        
        public AstCreateQueue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueueSettings>())
                {
                    this._queueSettings = ((AstQueueSettings)(enumerator.Current));
                }
            }
        }
        
        public virtual AstQueueSettings QueueSettings
        {
            get
            {
                return this._queueSettings;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateQueue(this);
        }
    }
    
    /// <summary>
    /// queue_settings
    /// 	 : WITH  STATUS  EQUAL  on_off  COMMA??  RETENTION  EQUAL  on_off  COMMA??  ACTIVATION  LR_BRACKET  STATUS  EQUAL  on_off  COMMA??  PROCEDURE_NAME  EQUAL  func_proc_name_database_schema  COMMA??  MAX_QUEUE_READERS  EQUAL    COMMA??  EXECUTE  AS  SELF  OWNER  COMMA?? DROP  RR_BRACKET  COMMA??  POISON_MESSAGE_HANDLING  LR_BRACKET  STATUS  EQUAL  on_off  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueueSettings : AstRule
    {
        
        public AstQueueSettings(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstQueueSettings(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstQueueSettings(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueSettings(this);
        }
    }
    
    /// <summary>
    /// alter_queue
    /// 	 : ALTER  QUEUE  full_table_name queue_name  queue_settings queue_action
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterQueue : AstRule
    {
        
        public AstAlterQueue(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterQueue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterQueue(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterQueue(this);
        }
    }
    
    /// <summary>
    /// queue_action
    /// 	 : REBUILD  WITH  LR_BRACKET  queue_rebuild_options  RR_BRACKET?
    /// 	 | REORGANIZE  WITH  LOB_COMPACTION  EQUAL  on_off?
    /// 	 | MOVE  TO  id_ DEFAULT
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueueAction : AstRule
    {
        
        public AstQueueAction(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstQueueAction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstQueueAction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueAction(this);
        }
    }
    
    /// <summary>
    /// queue_rebuild_options
    /// 	 : MAXDOP  EQUAL  DECIMAL
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueueRebuildOptions : AstRule
    {
        
        public AstQueueRebuildOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstQueueRebuildOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstQueueRebuildOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueRebuildOptions(this);
        }
    }
    
    /// <summary>
    /// create_contract
    /// 	 : CREATE  CONTRACT  contract_name  AUTHORIZATION  owner_name?  LR_BRACKET  message_type_name DEFAULT  SENT  BY  INITIATOR TARGET ANY  COMMA?+  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateContract : AstRule
    {
        
        private AstContractName _contractName;
        
        public AstCreateContract(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContractName>())
                {
                    this._contractName = ((AstContractName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateContract(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContractName>())
                {
                    this._contractName = ((AstContractName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstContractName ContractName
        {
            get
            {
                return this._contractName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateContract(this);
        }
    }
    
    /// <summary>
    /// message_statement
    /// 	 : CREATE  MESSAGE  TYPE  message_type_name  AUTHORIZATION  owner_name?  VALIDATION  EQUAL  NONE EMPTY WELL_FORMED_XML VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstMessageStatement : AstRule
    {
        
        private AstMessageTypeName _messageTypeName;
        
        public AstMessageStatement(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeName>())
                {
                    this._messageTypeName = ((AstMessageTypeName)(enumerator.Current));
                }
            }
        }
        
        public AstMessageStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeName>())
                {
                    this._messageTypeName = ((AstMessageTypeName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMessageTypeName MessageTypeName
        {
            get
            {
                return this._messageTypeName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMessageStatement(this);
        }
    }
    
    /// <summary>
    /// merge_statement
    /// 	 : with_expression?  MERGE  TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT??  INTO?  ddl_object  with_table_hints?  as_table_alias?  USING  table_sources  ON  search_condition  when_matches+  output_clause?  option_clause?  SEMI
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstMergeStatement : AstRule
    {
        
        private AstWithExpression _withExpression;
        
        private AstDdlObject _ddlObject;
        
        private AstWithTableHints _withTableHints;
        
        private AstAsTableAlias _asTableAlias;
        
        private AstTableSources _tableSources;
        
        private AstSearchCondition _searchCondition;
        
        private AstWhenMatches _whenMatches;
        
        private AstOutputClause _outputClause;
        
        private AstOptionClause _optionClause;
        
        public AstMergeStatement(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDdlObject>())
                {
                    this._ddlObject = ((AstDdlObject)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._tableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhenMatches>())
                {
                    this._whenMatches = ((AstWhenMatches)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public AstMergeStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDdlObject>())
                {
                    this._ddlObject = ((AstDdlObject)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._tableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhenMatches>())
                {
                    this._whenMatches = ((AstWhenMatches)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstDdlObject DdlObject
        {
            get
            {
                return this._ddlObject;
            }
        }
        
        public virtual AstWithTableHints WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public virtual AstTableSources TableSources
        {
            get
            {
                return this._tableSources;
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public virtual AstWhenMatches WhenMatches
        {
            get
            {
                return this._whenMatches;
            }
        }
        
        public virtual AstOutputClause OutputClause
        {
            get
            {
                return this._outputClause;
            }
        }
        
        public virtual AstOptionClause OptionClause
        {
            get
            {
                return this._optionClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMergeStatement(this);
        }
    }
    
    /// <summary>
    /// when_matches
    /// 	 : WHEN  MATCHED  AND  search_condition?  THEN  merge_matched+
    /// 	 | WHEN  NOT  MATCHED  BY  TARGET?  AND  search_condition?  THEN  merge_not_matched
    /// 	 | WHEN  NOT  MATCHED  BY  SOURCE  AND  search_condition?  THEN  merge_matched+
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWhenMatches : AstRule
    {
        
        public AstWhenMatches(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstWhenMatches(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstWhenMatches(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWhenMatches(this);
        }
    }
    
    /// <summary>
    /// merge_matched
    /// 	 : UPDATE  SET  update_elem_merges
    /// 	 | DELETE
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstMergeMatched : AstRule
    {
        
        public AstMergeMatched(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstMergeMatched(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstMergeMatched(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMergeMatched(this);
        }
    }
    
    /// <summary>
    /// update_elem_merges
    /// 	 : update_elem_merge  COMMA  update_elem_merge*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstUpdateElemMerges : AstRule
    {
        
        private AstUpdateElemMerge _updateElemMerge;
        
        public AstUpdateElemMerges(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUpdateElemMerge>())
                {
                    this._updateElemMerge = ((AstUpdateElemMerge)(enumerator.Current));
                }
            }
        }
        
        public AstUpdateElemMerges(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUpdateElemMerge>())
                {
                    this._updateElemMerge = ((AstUpdateElemMerge)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUpdateElemMerge UpdateElemMerge
        {
            get
            {
                return this._updateElemMerge;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateElemMerges(this);
        }
    }
    
    /// <summary>
    /// merge_not_matched
    /// 	 : INSERT  LR_BRACKET  column_name_list  RR_BRACKET?  table_value_constructor DEFAULT  VALUES
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstMergeNotMatched : AstRule
    {
        
        public AstMergeNotMatched(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstMergeNotMatched(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstMergeNotMatched(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMergeNotMatched(this);
        }
    }
    
    /// <summary>
    /// delete_statement
    /// 	 : with_expression?  DELETE  TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT? TOP  DECIMAL?  FROM?  delete_statement_from  with_table_hints?  output_clause?  FROM  table_sources?  WHERE  search_condition CURRENT  OF  GLOBAL?  cursor_name ?  for_clause?  option_clause?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDeleteStatement : AstRule
    {
        
        private AstWithExpression _withExpression;
        
        private AstDeleteStatementFrom _deleteStatementFrom;
        
        private AstWithTableHints _withTableHints;
        
        private AstOutputClause _outputClause;
        
        private AstForClause _forClause;
        
        private AstOptionClause _optionClause;
        
        public AstDeleteStatement(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDeleteStatementFrom>())
                {
                    this._deleteStatementFrom = ((AstDeleteStatementFrom)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public AstDeleteStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDeleteStatementFrom>())
                {
                    this._deleteStatementFrom = ((AstDeleteStatementFrom)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstDeleteStatementFrom DeleteStatementFrom
        {
            get
            {
                return this._deleteStatementFrom;
            }
        }
        
        public virtual AstWithTableHints WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
        }
        
        public virtual AstOutputClause OutputClause
        {
            get
            {
                return this._outputClause;
            }
        }
        
        public virtual AstForClause ForClause
        {
            get
            {
                return this._forClause;
            }
        }
        
        public virtual AstOptionClause OptionClause
        {
            get
            {
                return this._optionClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeleteStatement(this);
        }
    }
    
    /// <summary>
    /// delete_statement_from
    /// 	 : ddl_object
    /// 	 | rowset_function_limited
    /// 	 | 
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDeleteStatementFrom : AstRule
    {
        
        public AstDeleteStatementFrom(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDeleteStatementFrom(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDeleteStatementFrom(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeleteStatementFrom(this);
        }
    }
    
    /// <summary>
    /// insert_statement
    /// 	 : with_expression?  INSERT  TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT??  INTO?  ddl_object rowset_function_limited  with_table_hints?  LR_BRACKET  insert_column_name_list  RR_BRACKET?  output_clause?  insert_statement_value  for_clause?  option_clause?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstInsertStatement : AstRule
    {
        
        private AstWithExpression _withExpression;
        
        private AstWithTableHints _withTableHints;
        
        private AstOutputClause _outputClause;
        
        private AstInsertStatementValue _insertStatementValue;
        
        private AstForClause _forClause;
        
        private AstOptionClause _optionClause;
        
        public AstInsertStatement(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstInsertStatementValue>())
                {
                    this._insertStatementValue = ((AstInsertStatementValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public AstInsertStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstInsertStatementValue>())
                {
                    this._insertStatementValue = ((AstInsertStatementValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstWithTableHints WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
        }
        
        public virtual AstOutputClause OutputClause
        {
            get
            {
                return this._outputClause;
            }
        }
        
        public virtual AstInsertStatementValue InsertStatementValue
        {
            get
            {
                return this._insertStatementValue;
            }
        }
        
        public virtual AstForClause ForClause
        {
            get
            {
                return this._forClause;
            }
        }
        
        public virtual AstOptionClause OptionClause
        {
            get
            {
                return this._optionClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitInsertStatement(this);
        }
    }
    
    /// <summary>
    /// insert_statement_value
    /// 	 : table_value_constructor
    /// 	 | derived_table
    /// 	 | execute_statement
    /// 	 | DEFAULT  VALUES
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstInsertStatementValue : AstRule
    {
        
        public AstInsertStatementValue(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstInsertStatementValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstInsertStatementValue(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitInsertStatementValue(this);
        }
    }
    
    /// <summary>
    /// receive_statement
    /// 	 : LR_BRACKET?  RECEIVE  ALL DISTINCT top_clause STAR  LOCAL_ID  EQUAL  expression  COMMA?*  FROM  full_table_name  INTO  table_variable  WHERE  ?  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstReceiveStatement : AstRule
    {
        
        private AstFullTableName _fullTableName;
        
        public AstReceiveStatement(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
            }
        }
        
        public AstReceiveStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReceiveStatement(this);
        }
    }
    
    /// <summary>
    /// select_statement_standalone
    /// 	 : with_expression?  select_statement
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstSelectStatementStandalone : AstRule
    {
        
        private AstWithExpression _withExpression;
        
        private AstSelectStatement _selectStatement;
        
        public AstSelectStatementStandalone(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatement>())
                {
                    this._selectStatement = ((AstSelectStatement)(enumerator.Current));
                }
            }
        }
        
        public AstSelectStatementStandalone(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatement>())
                {
                    this._selectStatement = ((AstSelectStatement)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstSelectStatement SelectStatement
        {
            get
            {
                return this._selectStatement;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectStatementStandalone(this);
        }
    }
    
    /// <summary>
    /// select_statement
    /// 	 : query_expression  select_order_by_clause?  for_clause?  option_clause?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstSelectStatement : AstRule
    {
        
        private AstQueryExpression _queryExpression;
        
        private AstSelectOrderByClause _selectOrderByClause;
        
        private AstForClause _forClause;
        
        private AstOptionClause _optionClause;
        
        public AstSelectStatement(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueryExpression>())
                {
                    this._queryExpression = ((AstQueryExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectOrderByClause>())
                {
                    this._selectOrderByClause = ((AstSelectOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public AstSelectStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueryExpression>())
                {
                    this._queryExpression = ((AstQueryExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectOrderByClause>())
                {
                    this._selectOrderByClause = ((AstSelectOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstQueryExpression QueryExpression
        {
            get
            {
                return this._queryExpression;
            }
        }
        
        public virtual AstSelectOrderByClause SelectOrderByClause
        {
            get
            {
                return this._selectOrderByClause;
            }
        }
        
        public virtual AstForClause ForClause
        {
            get
            {
                return this._forClause;
            }
        }
        
        public virtual AstOptionClause OptionClause
        {
            get
            {
                return this._optionClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectStatement(this);
        }
    }
    
    /// <summary>
    /// time
    /// 	 : LOCAL_ID constant
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTime : AstRule
    {
        
        public AstTime(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTime(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTime(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTime(this);
        }
    }
    
    /// <summary>
    /// update_statement
    /// 	 : with_expression?  UPDATE  TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT??  ddl_object rowset_function_limited  with_table_hints?  SET  update_elems  output_clause?  FROM  table_sources?  WHERE  search_condition CURRENT  OF  GLOBAL?  cursor_name ?  for_clause?  option_clause?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstUpdateStatement : AstRule
    {
        
        private AstWithExpression _withExpression;
        
        private AstWithTableHints _withTableHints;
        
        private AstUpdateElems _updateElems;
        
        private AstOutputClause _outputClause;
        
        private AstForClause _forClause;
        
        private AstOptionClause _optionClause;
        
        public AstUpdateStatement(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateElems>())
                {
                    this._updateElems = ((AstUpdateElems)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public AstUpdateStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateElems>())
                {
                    this._updateElems = ((AstUpdateElems)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstWithTableHints WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
        }
        
        public virtual AstUpdateElems UpdateElems
        {
            get
            {
                return this._updateElems;
            }
        }
        
        public virtual AstOutputClause OutputClause
        {
            get
            {
                return this._outputClause;
            }
        }
        
        public virtual AstForClause ForClause
        {
            get
            {
                return this._forClause;
            }
        }
        
        public virtual AstOptionClause OptionClause
        {
            get
            {
                return this._optionClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateStatement(this);
        }
    }
    
    /// <summary>
    /// update_elems
    /// 	 : update_elem  COMMA  update_elem*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstUpdateElems : AstRule
    {
        
        private AstUpdateElem _updateElem;
        
        public AstUpdateElems(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUpdateElem>())
                {
                    this._updateElem = ((AstUpdateElem)(enumerator.Current));
                }
            }
        }
        
        public AstUpdateElems(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUpdateElem>())
                {
                    this._updateElem = ((AstUpdateElem)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUpdateElem UpdateElem
        {
            get
            {
                return this._updateElem;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateElems(this);
        }
    }
    
    /// <summary>
    /// output_clause
    /// 	 : OUTPUT  output_dml_list_elems  INTO  LOCAL_ID table_name  LR_BRACKET  column_name_list  RR_BRACKET??
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstOutputClause : AstRule
    {
        
        private AstOutputDmlListElems _outputDmlListElems;
        
        public AstOutputClause(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOutputDmlListElems>())
                {
                    this._outputDmlListElems = ((AstOutputDmlListElems)(enumerator.Current));
                }
            }
        }
        
        public AstOutputClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOutputDmlListElems>())
                {
                    this._outputDmlListElems = ((AstOutputDmlListElems)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOutputDmlListElems OutputDmlListElems
        {
            get
            {
                return this._outputDmlListElems;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOutputClause(this);
        }
    }
    
    /// <summary>
    /// output_dml_list_elems
    /// 	 : output_dml_list_elem  COMMA  output_dml_list_elem*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstOutputDmlListElems : AstRule
    {
        
        private AstOutputDmlListElem _outputDmlListElem;
        
        public AstOutputDmlListElems(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOutputDmlListElem>())
                {
                    this._outputDmlListElem = ((AstOutputDmlListElem)(enumerator.Current));
                }
            }
        }
        
        public AstOutputDmlListElems(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOutputDmlListElem>())
                {
                    this._outputDmlListElem = ((AstOutputDmlListElem)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOutputDmlListElem OutputDmlListElem
        {
            get
            {
                return this._outputDmlListElem;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOutputDmlListElems(this);
        }
    }
    
    /// <summary>
    /// output_dml_list_elem
    /// 	 : expression asterisk  as_column_alias?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstOutputDmlListElem : AstRule
    {
        
        private AstAsColumnAlias _asColumnAlias;
        
        public AstOutputDmlListElem(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsColumnAlias>())
                {
                    this._asColumnAlias = ((AstAsColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public AstOutputDmlListElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsColumnAlias>())
                {
                    this._asColumnAlias = ((AstAsColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAsColumnAlias AsColumnAlias
        {
            get
            {
                return this._asColumnAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOutputDmlListElem(this);
        }
    }
    
    /// <summary>
    /// create_database
    /// 	 : CREATE  DATABASE  database_name  CONTAINMENT  EQUAL  NONE PARTIAL?  ON  PRIMARY?  database_file_spec  COMMA  database_file_spec*?  LOG  ON  database_file_spec  COMMA  database_file_spec*?  COLLATE  collation_name?  WITH  create_database_option  COMMA  create_database_option*?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateDatabase : AstRule
    {
        
        public AstCreateDatabase(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateDatabase(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateDatabase(this);
        }
    }
    
    /// <summary>
    /// create_index
    /// 	 : CREATE  UNIQUE?  clustered?  INDEX  id_  ON  table_name  LR_BRACKET  column_name_list_with_order  RR_BRACKET  INCLUDE  LR_BRACKET  column_name_list  RR_BRACKET?  WHERE  ?  create_index_options?  ON  id_?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateIndex : AstRule
    {
        
        private AstClustered _clustered;
        
        private AstId _id;
        
        private AstTableName _tableName;
        
        private AstColumnNameListWithOrder _columnNameListWithOrder;
        
        public AstCreateIndex(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClustered>())
                {
                    this._clustered = ((AstClustered)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this._columnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
            }
        }
        
        public AstCreateIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClustered>())
                {
                    this._clustered = ((AstClustered)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this._columnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
            }
        }
        
        public virtual AstClustered Clustered
        {
            get
            {
                return this._clustered;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public virtual AstColumnNameListWithOrder ColumnNameListWithOrder
        {
            get
            {
                return this._columnNameListWithOrder;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateIndex(this);
        }
    }
    
    /// <summary>
    /// create_index_options
    /// 	 : WITH  LR_BRACKET  relational_index_options  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateIndexOptions : AstRule
    {
        
        private AstRelationalIndexOptions _relationalIndexOptions;
        
        public AstCreateIndexOptions(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRelationalIndexOptions>())
                {
                    this._relationalIndexOptions = ((AstRelationalIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRelationalIndexOptions>())
                {
                    this._relationalIndexOptions = ((AstRelationalIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRelationalIndexOptions RelationalIndexOptions
        {
            get
            {
                return this._relationalIndexOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateIndexOptions(this);
        }
    }
    
    /// <summary>
    /// relational_index_options
    /// 	 : relational_index_option  COMMA  relational_index_option*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstRelationalIndexOptions : AstRule
    {
        
        private AstRelationalIndexOption _relationalIndexOption;
        
        public AstRelationalIndexOptions(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRelationalIndexOption>())
                {
                    this._relationalIndexOption = ((AstRelationalIndexOption)(enumerator.Current));
                }
            }
        }
        
        public AstRelationalIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRelationalIndexOption>())
                {
                    this._relationalIndexOption = ((AstRelationalIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRelationalIndexOption RelationalIndexOption
        {
            get
            {
                return this._relationalIndexOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRelationalIndexOptions(this);
        }
    }
    
    /// <summary>
    /// relational_index_option
    /// 	 : rebuild_index_option
    /// 	 | DROP_EXISTING  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRelationalIndexOption : AstRule
    {
        
        public AstRelationalIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstRelationalIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstRelationalIndexOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRelationalIndexOption(this);
        }
    }
    
    /// <summary>
    /// alter_index
    /// 	 : ALTER  INDEX  id_ ALL  ON  table_name  DISABLE PAUSE ABORT RESUME  resumable_index_options? reorganize_partition set_index_options rebuild_partition
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterIndex : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstAlterIndex(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterIndex(this);
        }
    }
    
    /// <summary>
    /// resumable_index_options
    /// 	 : WITH  LR_BRACKET  resumable_index_option  COMMA  resumable_index_option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstResumableIndexOptions : AstRule
    {
        
        public AstResumableIndexOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstResumableIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstResumableIndexOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitResumableIndexOptions(this);
        }
    }
    
    /// <summary>
    /// resumable_index_option
    /// 	 : MAXDOP  EQUAL  
    /// 	 | MAX_DURATION  EQUAL    MINUTES?
    /// 	 | low_priority_lock_wait
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstResumableIndexOption : AstRule
    {
        
        public AstResumableIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstResumableIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstResumableIndexOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitResumableIndexOption(this);
        }
    }
    
    /// <summary>
    /// reorganize_partition
    /// 	 : REORGANIZE  PARTITION  EQUAL  DECIMAL?  reorganize_options?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstReorganizePartition : AstRule
    {
        
        private AstReorganizeOptions _reorganizeOptions;
        
        public AstReorganizePartition(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReorganizeOptions>())
                {
                    this._reorganizeOptions = ((AstReorganizeOptions)(enumerator.Current));
                }
            }
        }
        
        public AstReorganizePartition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReorganizeOptions>())
                {
                    this._reorganizeOptions = ((AstReorganizeOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstReorganizeOptions ReorganizeOptions
        {
            get
            {
                return this._reorganizeOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReorganizePartition(this);
        }
    }
    
    /// <summary>
    /// reorganize_options
    /// 	 : WITH  LR_BRACKET  reorganize_option  COMMA  reorganize_option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstReorganizeOptions : AstRule
    {
        
        public AstReorganizeOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstReorganizeOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstReorganizeOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReorganizeOptions(this);
        }
    }
    
    /// <summary>
    /// reorganize_option
    /// 	 : LOB_COMPACTION  EQUAL  on_off
    /// 	 | COMPRESS_ALL_ROW_GROUPS  EQUAL  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstReorganizeOption : AstRule
    {
        
        public AstReorganizeOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstReorganizeOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstReorganizeOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReorganizeOption(this);
        }
    }
    
    /// <summary>
    /// set_index_options
    /// 	 : SET  LR_BRACKET  set_index_option  COMMA  set_index_option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstSetIndexOptions : AstRule
    {
        
        private AstSetIndexOption _setIndexOption;
        
        public AstSetIndexOptions(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSetIndexOption>())
                {
                    this._setIndexOption = ((AstSetIndexOption)(enumerator.Current));
                }
            }
        }
        
        public AstSetIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSetIndexOption>())
                {
                    this._setIndexOption = ((AstSetIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSetIndexOption SetIndexOption
        {
            get
            {
                return this._setIndexOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetIndexOptions(this);
        }
    }
    
    /// <summary>
    /// set_index_option
    /// 	 : ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | COMPRESSION_DELAY  EQUAL    MINUTES?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSetIndexOption : AstRule
    {
        
        public AstSetIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSetIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSetIndexOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetIndexOption(this);
        }
    }
    
    /// <summary>
    /// rebuild_partition
    /// 	 : REBUILD  PARTITION  EQUAL  ALL?  rebuild_index_options?
    /// 	 | REBUILD  PARTITION  EQUAL  DECIMAL  single_partition_rebuild_index_options?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRebuildPartition : AstRule
    {
        
        public AstRebuildPartition(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstRebuildPartition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstRebuildPartition(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRebuildPartition(this);
        }
    }
    
    /// <summary>
    /// rebuild_index_options
    /// 	 : WITH  LR_BRACKET  rebuild_index_option  COMMA  rebuild_index_option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstRebuildIndexOptions : AstRule
    {
        
        private AstRebuildIndexOption _rebuildIndexOption;
        
        public AstRebuildIndexOptions(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRebuildIndexOption>())
                {
                    this._rebuildIndexOption = ((AstRebuildIndexOption)(enumerator.Current));
                }
            }
        }
        
        public AstRebuildIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRebuildIndexOption>())
                {
                    this._rebuildIndexOption = ((AstRebuildIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRebuildIndexOption RebuildIndexOption
        {
            get
            {
                return this._rebuildIndexOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRebuildIndexOptions(this);
        }
    }
    
    /// <summary>
    /// rebuild_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  DECIMAL
    /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | STATISTICS_INCREMENTAL  EQUAL  on_off
    /// 	 | ONLINE  EQUAL  ON  LR_BRACKET  low_priority_lock_wait  RR_BRACKET? OFF
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | MAX_DURATION  EQUAL    MINUTES?
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  
    /// 	 | DATA_COMPRESSION  EQUAL  NONE ROW PAGE COLUMNSTORE COLUMNSTORE_ARCHIVE  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRebuildIndexOption : AstRule
    {
        
        public AstRebuildIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstRebuildIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstRebuildIndexOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRebuildIndexOption(this);
        }
    }
    
    /// <summary>
    /// single_partition_rebuild_index_options
    /// 	 : WITH  LR_BRACKET  single_partition_rebuild_index_option  COMMA  single_partition_rebuild_index_option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstSinglePartitionRebuildIndexOptions : AstRule
    {
        
        private AstSinglePartitionRebuildIndexOption _singlePartitionRebuildIndexOption;
        
        public AstSinglePartitionRebuildIndexOptions(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSinglePartitionRebuildIndexOption>())
                {
                    this._singlePartitionRebuildIndexOption = ((AstSinglePartitionRebuildIndexOption)(enumerator.Current));
                }
            }
        }
        
        public AstSinglePartitionRebuildIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSinglePartitionRebuildIndexOption>())
                {
                    this._singlePartitionRebuildIndexOption = ((AstSinglePartitionRebuildIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption
        {
            get
            {
                return this._singlePartitionRebuildIndexOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSinglePartitionRebuildIndexOptions(this);
        }
    }
    
    /// <summary>
    /// single_partition_rebuild_index_option
    /// 	 : SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | DATA_COMPRESSION  EQUAL  NONE ROW PAGE COLUMNSTORE COLUMNSTORE_ARCHIVE  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// 	 | ONLINE  EQUAL  ON  LR_BRACKET  low_priority_lock_wait  RR_BRACKET? OFF
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSinglePartitionRebuildIndexOption : AstRule
    {
        
        public AstSinglePartitionRebuildIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSinglePartitionRebuildIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSinglePartitionRebuildIndexOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSinglePartitionRebuildIndexOption(this);
        }
    }
    
    /// <summary>
    /// on_partitions
    /// 	 : ON  PARTITIONS  LR_BRACKET    TO  ?  COMMA    TO  ?*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOnPartitions : AstRule
    {
        
        public AstOnPartitions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstOnPartitions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstOnPartitions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnPartitions(this);
        }
    }
    
    /// <summary>
    /// create_columnstore_index
    /// 	 : CREATE  CLUSTERED  COLUMNSTORE  INDEX  id_  ON  table_name  create_columnstore_index_options?  ON  id_?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateColumnstoreIndex : AstRule
    {
        
        private AstId _id;
        
        private AstTableName _tableName;
        
        private AstCreateColumnstoreIndexOptions _createColumnstoreIndexOptions;
        
        public AstCreateColumnstoreIndex(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions>())
                {
                    this._createColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateColumnstoreIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions>())
                {
                    this._createColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public virtual AstCreateColumnstoreIndexOptions CreateColumnstoreIndexOptions
        {
            get
            {
                return this._createColumnstoreIndexOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnstoreIndex(this);
        }
    }
    
    /// <summary>
    /// create_columnstore_index_options
    /// 	 : WITH  LR_BRACKET  columnstore_index_option  COMMA  columnstore_index_option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateColumnstoreIndexOptions : AstRule
    {
        
        private AstColumnstoreIndexOption _columnstoreIndexOption;
        
        public AstCreateColumnstoreIndexOptions(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnstoreIndexOption>())
                {
                    this._columnstoreIndexOption = ((AstColumnstoreIndexOption)(enumerator.Current));
                }
            }
        }
        
        public AstCreateColumnstoreIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnstoreIndexOption>())
                {
                    this._columnstoreIndexOption = ((AstColumnstoreIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnstoreIndexOption ColumnstoreIndexOption
        {
            get
            {
                return this._columnstoreIndexOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnstoreIndexOptions(this);
        }
    }
    
    /// <summary>
    /// columnstore_index_option
    /// 	 : DROP_EXISTING  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  
    /// 	 | ONLINE  EQUAL  on_off
    /// 	 | COMPRESSION_DELAY  EQUAL    MINUTES?
    /// 	 | DATA_COMPRESSION  EQUAL  COLUMNSTORE COLUMNSTORE_ARCHIVE  on_partitions?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnstoreIndexOption : AstRule
    {
        
        public AstColumnstoreIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstColumnstoreIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstColumnstoreIndexOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnstoreIndexOption(this);
        }
    }
    
    /// <summary>
    /// create_nonclustered_columnstore_index
    /// 	 : CREATE  NONCLUSTERED?  COLUMNSTORE  INDEX  id_  ON  table_name  LR_BRACKET  column_name_list_with_order  RR_BRACKET  WHERE  search_condition?  create_columnstore_index_options?  ON  id_?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateNonclusteredColumnstoreIndex : AstRule
    {
        
        private AstId _id;
        
        private AstTableName _tableName;
        
        private AstColumnNameListWithOrder _columnNameListWithOrder;
        
        private AstCreateColumnstoreIndexOptions _createColumnstoreIndexOptions;
        
        public AstCreateNonclusteredColumnstoreIndex(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this._columnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions>())
                {
                    this._createColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateNonclusteredColumnstoreIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this._columnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions>())
                {
                    this._createColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public virtual AstColumnNameListWithOrder ColumnNameListWithOrder
        {
            get
            {
                return this._columnNameListWithOrder;
            }
        }
        
        public virtual AstCreateColumnstoreIndexOptions CreateColumnstoreIndexOptions
        {
            get
            {
                return this._createColumnstoreIndexOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateNonclusteredColumnstoreIndex(this);
        }
    }
    
    /// <summary>
    /// create_xml_index
    /// 	 : CREATE  PRIMARY?  XML  INDEX  id_  ON  table_name  LR_BRACKET  id_  RR_BRACKET  USING  XML  INDEX  id_  FOR  VALUE PATH PROPERTY???  xml_index_options?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateXmlIndex : AstRule
    {
        
        private AstId _id;
        
        private AstTableName _tableName;
        
        private AstXmlIndexOptions _xmlIndexOptions;
        
        public AstCreateXmlIndex(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstXmlIndexOptions>())
                {
                    this._xmlIndexOptions = ((AstXmlIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateXmlIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstXmlIndexOptions>())
                {
                    this._xmlIndexOptions = ((AstXmlIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public virtual AstXmlIndexOptions XmlIndexOptions
        {
            get
            {
                return this._xmlIndexOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateXmlIndex(this);
        }
    }
    
    /// <summary>
    /// xml_index_options
    /// 	 : WITH  LR_BRACKET  xml_index_option  COMMA  xml_index_option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstXmlIndexOptions : AstRule
    {
        
        private AstXmlIndexOption _xmlIndexOption;
        
        public AstXmlIndexOptions(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstXmlIndexOption>())
                {
                    this._xmlIndexOption = ((AstXmlIndexOption)(enumerator.Current));
                }
            }
        }
        
        public AstXmlIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstXmlIndexOption>())
                {
                    this._xmlIndexOption = ((AstXmlIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstXmlIndexOption XmlIndexOption
        {
            get
            {
                return this._xmlIndexOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlIndexOptions(this);
        }
    }
    
    /// <summary>
    /// xml_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  DECIMAL
    /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | DROP_EXISTING  EQUAL  on_off
    /// 	 | ONLINE  EQUAL  ON  LR_BRACKET  low_priority_lock_wait  RR_BRACKET? OFF
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  
    /// 	 | XML_COMPRESSION  EQUAL  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstXmlIndexOption : AstRule
    {
        
        public AstXmlIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstXmlIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstXmlIndexOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlIndexOption(this);
        }
    }
    
    /// <summary>
    /// create_or_alter_procedure
    /// 	 : CREATE  OR  ALTER REPLACE? ALTER      SEMI  DECIMAL?  LR_BRACKET?  procedure_params  RR_BRACKET??  procedure_options?  FOR  REPLICATION?  AS  as_external_name sql_clause
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateOrAlterProcedure : AstRule
    {
        
        private AstProcedureOptions _procedureOptions;
        
        public AstCreateOrAlterProcedure(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcedureOptions>())
                {
                    this._procedureOptions = ((AstProcedureOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterProcedure(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcedureOptions>())
                {
                    this._procedureOptions = ((AstProcedureOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProcedureOptions ProcedureOptions
        {
            get
            {
                return this._procedureOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterProcedure(this);
        }
    }
    
    /// <summary>
    /// procedure_options
    /// 	 : WITH  procedure_option  COMMA  procedure_option*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstProcedureOptions : AstRule
    {
        
        private AstProcedureOption _procedureOption;
        
        public AstProcedureOptions(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcedureOption>())
                {
                    this._procedureOption = ((AstProcedureOption)(enumerator.Current));
                }
            }
        }
        
        public AstProcedureOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcedureOption>())
                {
                    this._procedureOption = ((AstProcedureOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProcedureOption ProcedureOption
        {
            get
            {
                return this._procedureOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcedureOptions(this);
        }
    }
    
    /// <summary>
    /// as_external_name
    /// 	 : EXTERNAL  NAME  assembly_name  DOT  class_name  DOT  method_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAsExternalName : AstRule
    {
        
        private AstAssemblyName _assemblyName;
        
        private AstClassName _className;
        
        private AstMethodName _methodName;
        
        public AstAsExternalName(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyName>())
                {
                    this._assemblyName = ((AstAssemblyName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClassName>())
                {
                    this._className = ((AstClassName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMethodName>())
                {
                    this._methodName = ((AstMethodName)(enumerator.Current));
                }
            }
        }
        
        public AstAsExternalName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyName>())
                {
                    this._assemblyName = ((AstAssemblyName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClassName>())
                {
                    this._className = ((AstClassName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMethodName>())
                {
                    this._methodName = ((AstMethodName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblyName AssemblyName
        {
            get
            {
                return this._assemblyName;
            }
        }
        
        public virtual AstClassName ClassName
        {
            get
            {
                return this._className;
            }
        }
        
        public virtual AstMethodName MethodName
        {
            get
            {
                return this._methodName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsExternalName(this);
        }
    }
    
    /// <summary>
    /// create_or_alter_dml_trigger
    /// 	 : CREATE  OR  ALTER? ALTER  TRIGGER  simple_name  ON  table_name  dml_trigger_options?  FOR AFTER INSTEAD  OF  dml_trigger_operations  WITH  APPEND?  NOT  FOR  REPLICATION?  AS  sql_clauses
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateOrAlterDmlTrigger : AstRule
    {
        
        private AstSimpleName _simpleName;
        
        private AstTableName _tableName;
        
        private AstDmlTriggerOptions _dmlTriggerOptions;
        
        private AstDmlTriggerOperations _dmlTriggerOperations;
        
        private AstSqlClauses _sqlClauses;
        
        public AstCreateOrAlterDmlTrigger(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleName>())
                {
                    this._simpleName = ((AstSimpleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions>())
                {
                    this._dmlTriggerOptions = ((AstDmlTriggerOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this._dmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterDmlTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleName>())
                {
                    this._simpleName = ((AstSimpleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions>())
                {
                    this._dmlTriggerOptions = ((AstDmlTriggerOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this._dmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleName SimpleName
        {
            get
            {
                return this._simpleName;
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public virtual AstDmlTriggerOptions DmlTriggerOptions
        {
            get
            {
                return this._dmlTriggerOptions;
            }
        }
        
        public virtual AstDmlTriggerOperations DmlTriggerOperations
        {
            get
            {
                return this._dmlTriggerOperations;
            }
        }
        
        public virtual AstSqlClauses SqlClauses
        {
            get
            {
                return this._sqlClauses;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterDmlTrigger(this);
        }
    }
    
    /// <summary>
    /// dml_trigger_options
    /// 	 : WITH  dml_trigger_option  COMMA  dml_trigger_option*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDmlTriggerOptions : AstRule
    {
        
        private AstDmlTriggerOption _dmlTriggerOption;
        
        public AstDmlTriggerOptions(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDmlTriggerOption>())
                {
                    this._dmlTriggerOption = ((AstDmlTriggerOption)(enumerator.Current));
                }
            }
        }
        
        public AstDmlTriggerOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDmlTriggerOption>())
                {
                    this._dmlTriggerOption = ((AstDmlTriggerOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDmlTriggerOption DmlTriggerOption
        {
            get
            {
                return this._dmlTriggerOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDmlTriggerOptions(this);
        }
    }
    
    /// <summary>
    /// dml_trigger_operations
    /// 	 : dml_trigger_operation  COMMA  dml_trigger_operation*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDmlTriggerOperations : AstRule
    {
        
        private AstDmlTriggerOperation _dmlTriggerOperation;
        
        public AstDmlTriggerOperations(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDmlTriggerOperation>())
                {
                    this._dmlTriggerOperation = ((AstDmlTriggerOperation)(enumerator.Current));
                }
            }
        }
        
        public AstDmlTriggerOperations(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDmlTriggerOperation>())
                {
                    this._dmlTriggerOperation = ((AstDmlTriggerOperation)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDmlTriggerOperation DmlTriggerOperation
        {
            get
            {
                return this._dmlTriggerOperation;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDmlTriggerOperations(this);
        }
    }
    
    /// <summary>
    /// dml_trigger_option
    /// 	 : ENCRYPTION
    /// 	 | execute_clause
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDmlTriggerOption : AstRule
    {
        
        public AstDmlTriggerOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDmlTriggerOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDmlTriggerOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDmlTriggerOption(this);
        }
    }
    
    /// <summary>
    /// dml_trigger_operation
    /// 	 : INSERT UPDATE DELETE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstDmlTriggerOperation : AstTerminal<AstDmlTriggerOperationEnum>
    {
        
        public AstDmlTriggerOperation(ITerminalNode t, string value) : 
                base(t, AstDmlTriggerOperation.GetValue(value))
        {
        }
        
        public AstDmlTriggerOperation(ITerminalNode t, AstDmlTriggerOperationEnum value) : 
                base(t, value)
        {
        }
        
        public AstDmlTriggerOperation(ParserRuleContext ctx, string value) : 
                base(ctx, AstDmlTriggerOperation.GetValue(value))
        {
        }
        
        public AstDmlTriggerOperation(Position p, string value) : 
                base(p, AstDmlTriggerOperation.GetValue(value))
        {
        }
        
        public AstDmlTriggerOperation(Position p, AstDmlTriggerOperationEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDmlTriggerOperation(this);
        }
        
        protected static AstDmlTriggerOperationEnum GetValue(string value)
        {
            if ((value == "INSERT"))
            {
                return AstDmlTriggerOperationEnum.Insert;
            }
            if ((value == "UPDATE"))
            {
                return AstDmlTriggerOperationEnum.Update;
            }
            if ((value == "DELETE"))
            {
                return AstDmlTriggerOperationEnum.Delete;
            }
            return AstDmlTriggerOperationEnum._undefined;
        }
    }
    
    /// <summary>
    /// create_or_alter_ddl_trigger
    /// 	 : CREATE  OR  ALTER? ALTER  TRIGGER  simple_name  ON  ALL  SERVER DATABASE  dml_trigger_options?  FOR AFTER  dml_trigger_operations  AS  sql_clauses
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateOrAlterDdlTrigger : AstRule
    {
        
        private AstSimpleName _simpleName;
        
        private AstDmlTriggerOptions _dmlTriggerOptions;
        
        private AstDmlTriggerOperations _dmlTriggerOperations;
        
        private AstSqlClauses _sqlClauses;
        
        public AstCreateOrAlterDdlTrigger(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleName>())
                {
                    this._simpleName = ((AstSimpleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions>())
                {
                    this._dmlTriggerOptions = ((AstDmlTriggerOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this._dmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterDdlTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleName>())
                {
                    this._simpleName = ((AstSimpleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions>())
                {
                    this._dmlTriggerOptions = ((AstDmlTriggerOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this._dmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleName SimpleName
        {
            get
            {
                return this._simpleName;
            }
        }
        
        public virtual AstDmlTriggerOptions DmlTriggerOptions
        {
            get
            {
                return this._dmlTriggerOptions;
            }
        }
        
        public virtual AstDmlTriggerOperations DmlTriggerOperations
        {
            get
            {
                return this._dmlTriggerOperations;
            }
        }
        
        public virtual AstSqlClauses SqlClauses
        {
            get
            {
                return this._sqlClauses;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterDdlTrigger(this);
        }
    }
    
    /// <summary>
    /// create_or_alter_function
    /// 	 : CREATE  OR  ALTER? ALTER  FUNCTION    LR_BRACKET  procedure_params  RR_BRACKET LR_BRACKET  RR_BRACKET  func_body_returns_select func_body_returns_table func_body_returns_scalar  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateOrAlterFunction : AstRule
    {
        
        public AstCreateOrAlterFunction(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateOrAlterFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateOrAlterFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterFunction(this);
        }
    }
    
    /// <summary>
    /// procedure_params
    /// 	 : procedure_param  COMMA  procedure_param*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstProcedureParams : AstRule
    {
        
        private AstProcedureParam _procedureParam;
        
        public AstProcedureParams(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcedureParam>())
                {
                    this._procedureParam = ((AstProcedureParam)(enumerator.Current));
                }
            }
        }
        
        public AstProcedureParams(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcedureParam>())
                {
                    this._procedureParam = ((AstProcedureParam)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProcedureParam ProcedureParam
        {
            get
            {
                return this._procedureParam;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcedureParams(this);
        }
    }
    
    /// <summary>
    /// func_body_returns_select
    /// 	 : RETURNS  TABLE  function_options?  AS?  as_external_name RETURN  LR_BRACKET  select_statement_standalone  RR_BRACKET select_statement_standalone
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFuncBodyReturnsSelect : AstRule
    {
        
        private AstFunctionOptions _functionOptions;
        
        public AstFuncBodyReturnsSelect(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public AstFuncBodyReturnsSelect(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFunctionOptions FunctionOptions
        {
            get
            {
                return this._functionOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncBodyReturnsSelect(this);
        }
    }
    
    /// <summary>
    /// function_options
    /// 	 : WITH  function_option  COMMA  function_option*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFunctionOptions : AstRule
    {
        
        private AstFunctionOption _functionOption;
        
        public AstFunctionOptions(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionOption>())
                {
                    this._functionOption = ((AstFunctionOption)(enumerator.Current));
                }
            }
        }
        
        public AstFunctionOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionOption>())
                {
                    this._functionOption = ((AstFunctionOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFunctionOption FunctionOption
        {
            get
            {
                return this._functionOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFunctionOptions(this);
        }
    }
    
    /// <summary>
    /// func_body_returns_table
    /// 	 : RETURNS  LOCAL_ID  table_type_definition  function_options?  AS?  as_external_name BEGIN  sql_clauses?  RETURN  SEMI?  END  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFuncBodyReturnsTable : AstRule
    {
        
        private AstTableTypeDefinition _tableTypeDefinition;
        
        private AstFunctionOptions _functionOptions;
        
        public AstFuncBodyReturnsTable(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableTypeDefinition>())
                {
                    this._tableTypeDefinition = ((AstTableTypeDefinition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public AstFuncBodyReturnsTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableTypeDefinition>())
                {
                    this._tableTypeDefinition = ((AstTableTypeDefinition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableTypeDefinition TableTypeDefinition
        {
            get
            {
                return this._tableTypeDefinition;
            }
        }
        
        public virtual AstFunctionOptions FunctionOptions
        {
            get
            {
                return this._functionOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncBodyReturnsTable(this);
        }
    }
    
    /// <summary>
    /// func_body_returns_scalar
    /// 	 : RETURNS  data_type  function_options?  AS?  as_external_name BEGIN  sql_clause?  RETURN    SEMI?  END
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFuncBodyReturnsScalar : AstRule
    {
        
        private AstDataType _dataType;
        
        private AstFunctionOptions _functionOptions;
        
        public AstFuncBodyReturnsScalar(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public AstFuncBodyReturnsScalar(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public virtual AstFunctionOptions FunctionOptions
        {
            get
            {
                return this._functionOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncBodyReturnsScalar(this);
        }
    }
    
    /// <summary>
    /// procedure_param
    /// 	 : LOCAL_ID  AS?  type_schema  DOT?  data_type  VARYING?  EQUAL  ?  OUT OUTPUT READONLY?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstProcedureParam : AstRule
    {
        
        private AstDataType _dataType;
        
        public AstProcedureParam(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
            }
        }
        
        public AstProcedureParam(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcedureParam(this);
        }
    }
    
    /// <summary>
    /// procedure_option
    /// 	 : ENCRYPTION
    /// 	 | RECOMPILE
    /// 	 | execute_clause
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstProcedureOption : AstRule
    {
        
        public AstProcedureOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstProcedureOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstProcedureOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcedureOption(this);
        }
    }
    
    /// <summary>
    /// function_option
    /// 	 : ENCRYPTION
    /// 	 | SCHEMABINDING
    /// 	 | RETURNS  NULL_  ON  NULL_  INPUT
    /// 	 | CALLED  ON  NULL_  INPUT
    /// 	 | execute_clause
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFunctionOption : AstRule
    {
        
        public AstFunctionOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstFunctionOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstFunctionOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFunctionOption(this);
        }
    }
    
    /// <summary>
    /// create_statistics
    /// 	 : CREATE  STATISTICS  id_  ON  table_name  LR_BRACKET  column_name_list  RR_BRACKET  WITH  FULLSCAN SAMPLE  DECIMAL  PERCENT ROWS STATS_STREAM  COMMA  NORECOMPUTE?  COMMA  INCREMENTAL  EQUAL  on_off??  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateStatistics : AstRule
    {
        
        private AstId _id;
        
        private AstTableName _tableName;
        
        private AstColumnNameList _columnNameList;
        
        public AstCreateStatistics(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public AstCreateStatistics(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public virtual AstColumnNameList ColumnNameList
        {
            get
            {
                return this._columnNameList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateStatistics(this);
        }
    }
    
    /// <summary>
    /// update_statistics
    /// 	 : UPDATE  STATISTICS  full_table_name  id_ LR_BRACKET  id_  COMMA  id_*  RR_BRACKET?  update_statistics_options?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstUpdateStatistics : AstRule
    {
        
        private AstFullTableName _fullTableName;
        
        private AstUpdateStatisticsOptions _updateStatisticsOptions;
        
        public AstUpdateStatistics(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateStatisticsOptions>())
                {
                    this._updateStatisticsOptions = ((AstUpdateStatisticsOptions)(enumerator.Current));
                }
            }
        }
        
        public AstUpdateStatistics(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateStatisticsOptions>())
                {
                    this._updateStatisticsOptions = ((AstUpdateStatisticsOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
        }
        
        public virtual AstUpdateStatisticsOptions UpdateStatisticsOptions
        {
            get
            {
                return this._updateStatisticsOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateStatistics(this);
        }
    }
    
    /// <summary>
    /// update_statistics_options
    /// 	 : WITH  update_statistics_option  COMMA  update_statistics_option*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstUpdateStatisticsOptions : AstRule
    {
        
        private AstUpdateStatisticsOption _updateStatisticsOption;
        
        public AstUpdateStatisticsOptions(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUpdateStatisticsOption>())
                {
                    this._updateStatisticsOption = ((AstUpdateStatisticsOption)(enumerator.Current));
                }
            }
        }
        
        public AstUpdateStatisticsOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUpdateStatisticsOption>())
                {
                    this._updateStatisticsOption = ((AstUpdateStatisticsOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUpdateStatisticsOption UpdateStatisticsOption
        {
            get
            {
                return this._updateStatisticsOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateStatisticsOptions(this);
        }
    }
    
    /// <summary>
    /// update_statistics_option
    /// 	 : FULLSCAN  COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off?
    /// 	 | SAMPLE    PERCENT ROWS  COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off?
    /// 	 | RESAMPLE  on_partitions?
    /// 	 | STATS_STREAM  EQUAL  
    /// 	 | ROWCOUNT  EQUAL  DECIMAL
    /// 	 | PAGECOUNT  EQUAL  DECIMAL
    /// 	 | ALL
    /// 	 | COLUMNS
    /// 	 | INDEX
    /// 	 | NORECOMPUTE
    /// 	 | INCREMENTAL  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  
    /// 	 | AUTO_DROP  EQUAL  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUpdateStatisticsOption : AstRule
    {
        
        public AstUpdateStatisticsOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstUpdateStatisticsOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstUpdateStatisticsOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateStatisticsOption(this);
        }
    }
    
    /// <summary>
    /// create_table
    /// 	 : CREATE  TABLE  table_name  LR_BRACKET  column_def_table_constraints  COMMA?  table_indices*  COMMA?  RR_BRACKET  LOCK  simple_id?  table_options*  ON  id_ DEFAULT?  TEXTIMAGE_ON  id_ DEFAULT?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateTable : AstRule
    {
        
        private AstTableName _tableName;
        
        private AstColumnDefTableConstraints _columnDefTableConstraints;
        
        private AstTableOptions _tableOptions;
        
        public AstCreateTable(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableOptions>())
                {
                    this._tableOptions = ((AstTableOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableOptions>())
                {
                    this._tableOptions = ((AstTableOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public virtual AstColumnDefTableConstraints ColumnDefTableConstraints
        {
            get
            {
                return this._columnDefTableConstraints;
            }
        }
        
        public virtual AstTableOptions TableOptions
        {
            get
            {
                return this._tableOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateTable(this);
        }
    }
    
    /// <summary>
    /// table_indices
    /// 	 : INDEX  id_  UNIQUE?  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// 	 | INDEX  id_  CLUSTERED  COLUMNSTORE
    /// 	 | INDEX  id_  NONCLUSTERED?  COLUMNSTORE  LR_BRACKET  column_name_list  RR_BRACKET  create_table_index_options?  ON  id_?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableIndices : AstRule
    {
        
        public AstTableIndices(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableIndices(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableIndices(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableIndices(this);
        }
    }
    
    /// <summary>
    /// table_options
    /// 	 : WITH  LR_BRACKET  table_option  COMMA  table_option*  RR_BRACKET table_option  COMMA  table_option*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableOptions : AstRule
    {
        
        public AstTableOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableOptions(this);
        }
    }
    
    /// <summary>
    /// table_option
    /// 	 : simple_id keyword  EQUAL  simple_id keyword on_off DECIMAL
    /// 	 | CLUSTERED  COLUMNSTORE  INDEX
    /// 	 | HEAP
    /// 	 | FILLFACTOR  EQUAL  DECIMAL
    /// 	 | distribution
    /// 	 | DATA_COMPRESSION  EQUAL  NONE ROW PAGE  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableOption : AstRule
    {
        
        public AstTableOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableOption(this);
        }
    }
    
    /// <summary>
    /// distribution
    /// 	 : DISTRIBUTION  EQUAL  HASH  LR_BRACKET  id_  RR_BRACKET
    /// 	 | CLUSTERED  INDEX  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDistribution : AstRule
    {
        
        public AstDistribution(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDistribution(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDistribution(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDistribution(this);
        }
    }
    
    /// <summary>
    /// create_table_index_options
    /// 	 : WITH  LR_BRACKET  create_table_index_option  COMMA  create_table_index_option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateTableIndexOptions : AstRule
    {
        
        private AstCreateTableIndexOption _createTableIndexOption;
        
        public AstCreateTableIndexOptions(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateTableIndexOption>())
                {
                    this._createTableIndexOption = ((AstCreateTableIndexOption)(enumerator.Current));
                }
            }
        }
        
        public AstCreateTableIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateTableIndexOption>())
                {
                    this._createTableIndexOption = ((AstCreateTableIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCreateTableIndexOption CreateTableIndexOption
        {
            get
            {
                return this._createTableIndexOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateTableIndexOptions(this);
        }
    }
    
    /// <summary>
    /// create_table_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  DECIMAL
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | STATISTICS_INCREMENTAL  EQUAL  on_off
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// 	 | DATA_COMPRESSION  EQUAL  NONE ROW PAGE COLUMNSTORE COLUMNSTORE_ARCHIVE  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateTableIndexOption : AstRule
    {
        
        public AstCreateTableIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateTableIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateTableIndexOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateTableIndexOption(this);
        }
    }
    
    /// <summary>
    /// create_view
    /// 	 : CREATE  VIEW  simple_name  LR_BRACKET  column_name_list  RR_BRACKET?  view_attributes?  AS  select_statement_standalone  WITH  CHECK  OPTION?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateView : AstRule
    {
        
        private AstSimpleName _simpleName;
        
        private AstViewAttributes _viewAttributes;
        
        private AstSelectStatementStandalone _selectStatementStandalone;
        
        public AstCreateView(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleName>())
                {
                    this._simpleName = ((AstSimpleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstViewAttributes>())
                {
                    this._viewAttributes = ((AstViewAttributes)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public AstCreateView(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleName>())
                {
                    this._simpleName = ((AstSimpleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstViewAttributes>())
                {
                    this._viewAttributes = ((AstViewAttributes)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleName SimpleName
        {
            get
            {
                return this._simpleName;
            }
        }
        
        public virtual AstViewAttributes ViewAttributes
        {
            get
            {
                return this._viewAttributes;
            }
        }
        
        public virtual AstSelectStatementStandalone SelectStatementStandalone
        {
            get
            {
                return this._selectStatementStandalone;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateView(this);
        }
    }
    
    /// <summary>
    /// view_attributes
    /// 	 : WITH  view_attribute  COMMA  view_attribute*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstViewAttributes : AstRule
    {
        
        public AstViewAttributes(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstViewAttributes(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstViewAttributes(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitViewAttributes(this);
        }
    }
    
    /// <summary>
    /// view_attribute
    /// 	 : ENCRYPTION
    /// 	 | SCHEMABINDING
    /// 	 | VIEW_METADATA
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstViewAttribute : AstTerminal<AstViewAttributeEnum>
    {
        
        public AstViewAttribute(ITerminalNode t, string value) : 
                base(t, AstViewAttribute.GetValue(value))
        {
        }
        
        public AstViewAttribute(ITerminalNode t, AstViewAttributeEnum value) : 
                base(t, value)
        {
        }
        
        public AstViewAttribute(ParserRuleContext ctx, string value) : 
                base(ctx, AstViewAttribute.GetValue(value))
        {
        }
        
        public AstViewAttribute(Position p, string value) : 
                base(p, AstViewAttribute.GetValue(value))
        {
        }
        
        public AstViewAttribute(Position p, AstViewAttributeEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitViewAttribute(this);
        }
        
        protected static AstViewAttributeEnum GetValue(string value)
        {
            if ((value == "ENCRYPTION"))
            {
                return AstViewAttributeEnum.Encryption;
            }
            if ((value == "SCHEMABINDING"))
            {
                return AstViewAttributeEnum.Schemabinding;
            }
            if ((value == "VIEW_METADATA"))
            {
                return AstViewAttributeEnum.ViewMetadata;
            }
            return AstViewAttributeEnum._undefined;
        }
    }
    
    /// <summary>
    /// alter_table
    /// 	 : ALTER  TABLE  table_name  SET  LR_BRACKET  LOCK_ESCALATION  EQUAL  AUTO TABLE DISABLE  RR_BRACKET ADD  column_def_table_constraints ALTER  COLUMN  column_definition column_modifier DROP  COLUMN  ids_ DROP  CONSTRAINT  constraint_name WITH  CHECK NOCHECK  ADD  CONSTRAINT  constraint_name?  FOREIGN  KEY  LR_BRACKET    RR_BRACKET  REFERENCES  table_name  LR_BRACKET    RR_BRACKET?  on_delete on_update* CHECK  LR_BRACKET  search_condition  RR_BRACKET NOCHECK CHECK  CONSTRAINT  constraint_name ENABLE DISABLE  TRIGGER  id_? REBUILD  table_options SWITCH  switch_partition  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterTable : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstAlterTable(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterTable(this);
        }
    }
    
    /// <summary>
    /// ids_
    /// 	 : id_  COMMA  id_*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstIds : AstRule
    {
        
        private AstId _id;
        
        public AstIds(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstIds(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIds(this);
        }
    }
    
    /// <summary>
    /// switch_partition
    /// 	 : PARTITION?  ?  TO    PARTITION  ?  WITH  low_priority_lock_wait?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSwitchPartition : AstRule
    {
        
        public AstSwitchPartition(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSwitchPartition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSwitchPartition(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSwitchPartition(this);
        }
    }
    
    /// <summary>
    /// low_priority_lock_wait
    /// 	 : WAIT_AT_LOW_PRIORITY  LR_BRACKET  MAX_DURATION  EQUAL    MINUTES?  COMMA  ABORT_AFTER_WAIT  EQUAL    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstLowPriorityLockWait : AstRule
    {
        
        public AstLowPriorityLockWait(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstLowPriorityLockWait(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstLowPriorityLockWait(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLowPriorityLockWait(this);
        }
    }
    
    /// <summary>
    /// alter_database
    /// 	 : ALTER  DATABASE  database_name CURRENT  MODIFY  NAME  EQUAL  database_name COLLATE  collation_name SET  database_optionspec  WITH  termination? add_or_modify_files add_or_modify_filegroups  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterDatabase : AstRule
    {
        
        public AstAlterDatabase(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterDatabase(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterDatabase(this);
        }
    }
    
    /// <summary>
    /// add_or_modify_files
    /// 	 : ADD  FILE  filespecs  TO  FILEGROUP  file_group_name?
    /// 	 | ADD  LOG  FILE  filespecs
    /// 	 | REMOVE  FILE  file_group_name
    /// 	 | MODIFY  FILE  filespec
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAddOrModifyFiles : AstRule
    {
        
        public AstAddOrModifyFiles(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAddOrModifyFiles(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAddOrModifyFiles(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAddOrModifyFiles(this);
        }
    }
    
    /// <summary>
    /// filespecs
    /// 	 : filespec  COMMA  filespec*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFilespecs : AstRule
    {
        
        private AstFilespec _filespec;
        
        public AstFilespecs(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFilespec>())
                {
                    this._filespec = ((AstFilespec)(enumerator.Current));
                }
            }
        }
        
        public AstFilespecs(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFilespec>())
                {
                    this._filespec = ((AstFilespec)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFilespec Filespec
        {
            get
            {
                return this._filespec;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilespecs(this);
        }
    }
    
    /// <summary>
    /// filespec
    /// 	 : LR_BRACKET  NAME  EQUAL  file_group_name  COMMA  NEWNAME  EQUAL  new_file_group_name STRING?  COMMA  FILENAME  EQUAL  ?  COMMA  SIZE  EQUAL  ?  COMMA  MAXSIZE  EQUAL   UNLIMITED?  COMMA  FILEGROWTH  EQUAL  ?  COMMA  OFFLINE?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFilespec : AstRule
    {
        
        private AstFileGroupName _fileGroupName;
        
        public AstFilespec(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileGroupName>())
                {
                    this._fileGroupName = ((AstFileGroupName)(enumerator.Current));
                }
            }
        }
        
        public AstFilespec(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileGroupName>())
                {
                    this._fileGroupName = ((AstFileGroupName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFileGroupName FileGroupName
        {
            get
            {
                return this._fileGroupName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilespec(this);
        }
    }
    
    /// <summary>
    /// add_or_modify_filegroups
    /// 	 : ADD  FILEGROUP  file_group_name  CONTAINS  FILESTREAM CONTAINS  MEMORY_OPTIMIZED_DATA?
    /// 	 | REMOVE  FILEGROUP  file_group_name
    /// 	 | MODIFY  FILEGROUP  file_group_name  filegroup_updatability_option DEFAULT NAME  EQUAL  new_file_group_name AUTOGROW_SINGLE_FILE AUTOGROW_ALL_FILES
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAddOrModifyFilegroups : AstRule
    {
        
        public AstAddOrModifyFilegroups(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAddOrModifyFilegroups(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAddOrModifyFilegroups(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAddOrModifyFilegroups(this);
        }
    }
    
    /// <summary>
    /// filegroup_updatability_option
    /// 	 : READONLY
    /// 	 | READWRITE
    /// 	 | READ_ONLY
    /// 	 | READ_WRITE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstFilegroupUpdatabilityOption : AstTerminal<AstFilegroupUpdatabilityOptionEnum>
    {
        
        public AstFilegroupUpdatabilityOption(ITerminalNode t, string value) : 
                base(t, AstFilegroupUpdatabilityOption.GetValue(value))
        {
        }
        
        public AstFilegroupUpdatabilityOption(ITerminalNode t, AstFilegroupUpdatabilityOptionEnum value) : 
                base(t, value)
        {
        }
        
        public AstFilegroupUpdatabilityOption(ParserRuleContext ctx, string value) : 
                base(ctx, AstFilegroupUpdatabilityOption.GetValue(value))
        {
        }
        
        public AstFilegroupUpdatabilityOption(Position p, string value) : 
                base(p, AstFilegroupUpdatabilityOption.GetValue(value))
        {
        }
        
        public AstFilegroupUpdatabilityOption(Position p, AstFilegroupUpdatabilityOptionEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilegroupUpdatabilityOption(this);
        }
        
        protected static AstFilegroupUpdatabilityOptionEnum GetValue(string value)
        {
            if ((value == "READONLY"))
            {
                return AstFilegroupUpdatabilityOptionEnum.Readonly;
            }
            if ((value == "READWRITE"))
            {
                return AstFilegroupUpdatabilityOptionEnum.Readwrite;
            }
            if ((value == "READ_ONLY"))
            {
                return AstFilegroupUpdatabilityOptionEnum.ReadOnly;
            }
            if ((value == "READ_WRITE"))
            {
                return AstFilegroupUpdatabilityOptionEnum.ReadWrite;
            }
            return AstFilegroupUpdatabilityOptionEnum._undefined;
        }
    }
    
    /// <summary>
    /// database_optionspec
    /// 	 : auto_option
    /// 	 | change_tracking_option
    /// 	 | containment_option
    /// 	 | cursor_option
    /// 	 | database_mirroring_option
    /// 	 | date_correlation_optimization_option
    /// 	 | db_encryption_option
    /// 	 | db_state_option
    /// 	 | db_update_option
    /// 	 | db_user_access_option
    /// 	 | delayed_durability_option
    /// 	 | external_access_option
    /// 	 | FILESTREAM  database_filestream_option
    /// 	 | hadr_options
    /// 	 | mixed_page_allocation_option
    /// 	 | parameterization_option
    /// 	 | recovery_option
    /// 	 | service_broker_option
    /// 	 | snapshot_option
    /// 	 | sql_option
    /// 	 | target_recovery_time_option
    /// 	 | termination
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDatabaseOptionspec : AstRule
    {
        
        public AstDatabaseOptionspec(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDatabaseOptionspec(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDatabaseOptionspec(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseOptionspec(this);
        }
    }
    
    /// <summary>
    /// auto_option
    /// 	 : AUTO_CLOSE  on_off
    /// 	 | AUTO_CREATE_STATISTICS  OFF
    /// 	 | ON  INCREMENTAL  EQUAL  ON OFF
    /// 	 | AUTO_SHRINK  on_off
    /// 	 | AUTO_UPDATE_STATISTICS  on_off
    /// 	 | AUTO_UPDATE_STATISTICS_ASYNC  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAutoOption : AstRule
    {
        
        public AstAutoOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAutoOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAutoOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAutoOption(this);
        }
    }
    
    /// <summary>
    /// change_tracking_option
    /// 	 : CHANGE_TRACKING  EQUAL  OFF ON  change_tracking_option_list  change_tracking_option_lists*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstChangeTrackingOption : AstRule
    {
        
        public AstChangeTrackingOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstChangeTrackingOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstChangeTrackingOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTrackingOption(this);
        }
    }
    
    /// <summary>
    /// change_tracking_option_lists
    /// 	 : change_tracking_option_list  COMMA  change_tracking_option_list*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstChangeTrackingOptionLists : AstRule
    {
        
        private AstChangeTrackingOptionList _changeTrackingOptionList;
        
        public AstChangeTrackingOptionLists(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstChangeTrackingOptionList>())
                {
                    this._changeTrackingOptionList = ((AstChangeTrackingOptionList)(enumerator.Current));
                }
            }
        }
        
        public AstChangeTrackingOptionLists(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstChangeTrackingOptionList>())
                {
                    this._changeTrackingOptionList = ((AstChangeTrackingOptionList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstChangeTrackingOptionList ChangeTrackingOptionList
        {
            get
            {
                return this._changeTrackingOptionList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTrackingOptionLists(this);
        }
    }
    
    /// <summary>
    /// change_tracking_option_list
    /// 	 : AUTO_CLEANUP  EQUAL  on_off
    /// 	 | CHANGE_RETENTION  EQUAL  DAYS HOURS MINUTES
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstChangeTrackingOptionList : AstRule
    {
        
        public AstChangeTrackingOptionList(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstChangeTrackingOptionList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstChangeTrackingOptionList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTrackingOptionList(this);
        }
    }
    
    /// <summary>
    /// containment_option
    /// 	 : CONTAINMENT  EQUAL  NONE PARTIAL
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstContainmentOption : AstRule
    {
        
        public AstContainmentOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstContainmentOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstContainmentOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContainmentOption(this);
        }
    }
    
    /// <summary>
    /// cursor_option
    /// 	 : CURSOR_CLOSE_ON_COMMIT  on_off
    /// 	 | CURSOR_DEFAULT  local_global
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCursorOption : AstRule
    {
        
        public AstCursorOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCursorOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCursorOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCursorOption(this);
        }
    }
    
    /// <summary>
    /// local_global
    /// 	 : LOCAL
    /// 	 | GLOBAL
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstLocalGlobal : AstTerminal<AstLocalGlobalEnum>
    {
        
        public AstLocalGlobal(ITerminalNode t, string value) : 
                base(t, AstLocalGlobal.GetValue(value))
        {
        }
        
        public AstLocalGlobal(ITerminalNode t, AstLocalGlobalEnum value) : 
                base(t, value)
        {
        }
        
        public AstLocalGlobal(ParserRuleContext ctx, string value) : 
                base(ctx, AstLocalGlobal.GetValue(value))
        {
        }
        
        public AstLocalGlobal(Position p, string value) : 
                base(p, AstLocalGlobal.GetValue(value))
        {
        }
        
        public AstLocalGlobal(Position p, AstLocalGlobalEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLocalGlobal(this);
        }
        
        protected static AstLocalGlobalEnum GetValue(string value)
        {
            if ((value == "LOCAL"))
            {
                return AstLocalGlobalEnum.Local;
            }
            if ((value == "GLOBAL"))
            {
                return AstLocalGlobalEnum.Global;
            }
            return AstLocalGlobalEnum._undefined;
        }
    }
    
    /// <summary>
    /// alter_endpoint
    /// 	 : ALTER  ENDPOINT  endpoint_name  AUTHORIZATION  login_name?  STATE  EQUAL    ?  AS  TCP  LR_BRACKET  LISTENER_PORT  EQUAL    COMMA  LISTENER_IP  EQUAL  ALL IPV4_ADDR IPV6_ADDR STRING?  RR_BRACKET  TSQL FOR  SERVICE_BROKER  LR_BRACKET  AUTHENTICATION  EQUAL  WINDOWS  NTLM KERBEROS NEGOTIATE?  CERTIFICATE  certificate_name? CERTIFICATE  certificate_name  WINDOWS?  NTLM KERBEROS NEGOTIATE?  COMMA?  ENCRYPTION  EQUAL  DISABLED SUPPORTED REQUIRED  ALGORITHM  AES RC4 AES  RC4 RC4  AES??  COMMA?  MESSAGE_FORWARDING  EQUAL  ENABLED DISABLED?  COMMA?  MESSAGE_FORWARD_SIZE  EQUAL  DECIMAL?  RR_BRACKET FOR  DATABASE_MIRRORING  LR_BRACKET  AUTHENTICATION  EQUAL  WINDOWS  NTLM KERBEROS NEGOTIATE?  CERTIFICATE  certificate_name? CERTIFICATE  certificate_name  WINDOWS?  NTLM KERBEROS NEGOTIATE?  COMMA?  ENCRYPTION  EQUAL  DISABLED SUPPORTED REQUIRED  ALGORITHM  AES RC4 AES  RC4 RC4  AES??  COMMA?  ROLE  EQUAL  WITNESS PARTNER ALL  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterEndpoint : AstRule
    {
        
        private AstEndpointName _endpointName;
        
        public AstAlterEndpoint(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointName>())
                {
                    this._endpointName = ((AstEndpointName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterEndpoint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointName>())
                {
                    this._endpointName = ((AstEndpointName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEndpointName EndpointName
        {
            get
            {
                return this._endpointName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterEndpoint(this);
        }
    }
    
    /// <summary>
    /// mirroring_set_option
    /// 	 : mirroring_partner  partner_option
    /// 	 | mirroring_witness  witness_option
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstMirroringSetOption : AstRule
    {
        
        public AstMirroringSetOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstMirroringSetOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstMirroringSetOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMirroringSetOption(this);
        }
    }
    
    /// <summary>
    /// mirroring_partner
    /// 	 : PARTNER
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstMirroringPartner : AstTerminal<string>
    {
        
        public AstMirroringPartner(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstMirroringPartner(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstMirroringPartner(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMirroringPartner(this);
        }
    }
    
    /// <summary>
    /// mirroring_witness
    /// 	 : WITNESS
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstMirroringWitness : AstTerminal<string>
    {
        
        public AstMirroringWitness(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstMirroringWitness(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstMirroringWitness(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMirroringWitness(this);
        }
    }
    
    /// <summary>
    /// witness_partner_equal
    /// 	 : EQUAL
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstWitnessPartnerEqual : AstTerminal<string>
    {
        
        public AstWitnessPartnerEqual(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstWitnessPartnerEqual(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstWitnessPartnerEqual(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWitnessPartnerEqual(this);
        }
    }
    
    /// <summary>
    /// partner_option
    /// 	 : witness_partner_equal  partner_server
    /// 	 | FAILOVER
    /// 	 | FORCE_SERVICE_ALLOW_DATA_LOSS
    /// 	 | OFF
    /// 	 | RESUME
    /// 	 | SAFETY  FULL OFF
    /// 	 | SUSPEND
    /// 	 | TIMEOUT  DECIMAL
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPartnerOption : AstRule
    {
        
        public AstPartnerOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstPartnerOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstPartnerOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartnerOption(this);
        }
    }
    
    /// <summary>
    /// witness_option
    /// 	 : witness_partner_equal  witness_server
    /// 	 | OFF
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWitnessOption : AstRule
    {
        
        public AstWitnessOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstWitnessOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstWitnessOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWitnessOption(this);
        }
    }
    
    /// <summary>
    /// partner_server
    /// 	 : partner_server_tcp_prefix  host  mirroring_host_port_seperator  port_number
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstPartnerServer : AstRule
    {
        
        private AstPartnerServerTcpPrefix _partnerServerTcpPrefix;
        
        private AstHost _host;
        
        private AstMirroringHostPortSeperator _mirroringHostPortSeperator;
        
        private AstPortNumber _portNumber;
        
        public AstPartnerServer(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartnerServerTcpPrefix>())
                {
                    this._partnerServerTcpPrefix = ((AstPartnerServerTcpPrefix)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstHost>())
                {
                    this._host = ((AstHost)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMirroringHostPortSeperator>())
                {
                    this._mirroringHostPortSeperator = ((AstMirroringHostPortSeperator)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPortNumber>())
                {
                    this._portNumber = ((AstPortNumber)(enumerator.Current));
                }
            }
        }
        
        public AstPartnerServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartnerServerTcpPrefix>())
                {
                    this._partnerServerTcpPrefix = ((AstPartnerServerTcpPrefix)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstHost>())
                {
                    this._host = ((AstHost)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMirroringHostPortSeperator>())
                {
                    this._mirroringHostPortSeperator = ((AstMirroringHostPortSeperator)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPortNumber>())
                {
                    this._portNumber = ((AstPortNumber)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartnerServerTcpPrefix PartnerServerTcpPrefix
        {
            get
            {
                return this._partnerServerTcpPrefix;
            }
        }
        
        public virtual AstHost Host
        {
            get
            {
                return this._host;
            }
        }
        
        public virtual AstMirroringHostPortSeperator MirroringHostPortSeperator
        {
            get
            {
                return this._mirroringHostPortSeperator;
            }
        }
        
        public virtual AstPortNumber PortNumber
        {
            get
            {
                return this._portNumber;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartnerServer(this);
        }
    }
    
    /// <summary>
    /// mirroring_host_port_seperator
    /// 	 : COLON
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstMirroringHostPortSeperator : AstTerminal<string>
    {
        
        public AstMirroringHostPortSeperator(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstMirroringHostPortSeperator(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstMirroringHostPortSeperator(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMirroringHostPortSeperator(this);
        }
    }
    
    /// <summary>
    /// partner_server_tcp_prefix
    /// 	 : TCP  COLON  DOUBLE_FORWARD_SLASH
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPartnerServerTcpPrefix : AstRule
    {
        
        public AstPartnerServerTcpPrefix(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstPartnerServerTcpPrefix(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstPartnerServerTcpPrefix(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartnerServerTcpPrefix(this);
        }
    }
    
    /// <summary>
    /// port_number
    /// 	 : 
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPortNumber : AstRule
    {
        
        public AstPortNumber(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstPortNumber(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstPortNumber(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPortNumber(this);
        }
    }
    
    /// <summary>
    /// host
    /// 	 : id_  DOT  host
    /// 	 | id_  DOT id_
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstHost : AstRule
    {
        
        public AstHost(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstHost(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstHost(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitHost(this);
        }
    }
    
    /// <summary>
    /// date_correlation_optimization_option
    /// 	 : DATE_CORRELATION_OPTIMIZATION  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDateCorrelationOptimizationOption : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstDateCorrelationOptimizationOption(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstDateCorrelationOptimizationOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDateCorrelationOptimizationOption(this);
        }
    }
    
    /// <summary>
    /// db_encryption_option
    /// 	 : ENCRYPTION  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDbEncryptionOption : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstDbEncryptionOption(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstDbEncryptionOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbEncryptionOption(this);
        }
    }
    
    /// <summary>
    /// db_state_option
    /// 	 : ONLINE OFFLINE EMERGENCY
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstDbStateOption : AstTerminal<AstDbStateOptionEnum>
    {
        
        public AstDbStateOption(ITerminalNode t, string value) : 
                base(t, AstDbStateOption.GetValue(value))
        {
        }
        
        public AstDbStateOption(ITerminalNode t, AstDbStateOptionEnum value) : 
                base(t, value)
        {
        }
        
        public AstDbStateOption(ParserRuleContext ctx, string value) : 
                base(ctx, AstDbStateOption.GetValue(value))
        {
        }
        
        public AstDbStateOption(Position p, string value) : 
                base(p, AstDbStateOption.GetValue(value))
        {
        }
        
        public AstDbStateOption(Position p, AstDbStateOptionEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbStateOption(this);
        }
        
        protected static AstDbStateOptionEnum GetValue(string value)
        {
            if ((value == "ONLINE"))
            {
                return AstDbStateOptionEnum.Online;
            }
            if ((value == "OFFLINE"))
            {
                return AstDbStateOptionEnum.Offline;
            }
            if ((value == "EMERGENCY"))
            {
                return AstDbStateOptionEnum.Emergency;
            }
            return AstDbStateOptionEnum._undefined;
        }
    }
    
    /// <summary>
    /// db_update_option
    /// 	 : READ_ONLY
    /// 	 | READ_WRITE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstDbUpdateOption : AstTerminal<AstDbUpdateOptionEnum>
    {
        
        public AstDbUpdateOption(ITerminalNode t, string value) : 
                base(t, AstDbUpdateOption.GetValue(value))
        {
        }
        
        public AstDbUpdateOption(ITerminalNode t, AstDbUpdateOptionEnum value) : 
                base(t, value)
        {
        }
        
        public AstDbUpdateOption(ParserRuleContext ctx, string value) : 
                base(ctx, AstDbUpdateOption.GetValue(value))
        {
        }
        
        public AstDbUpdateOption(Position p, string value) : 
                base(p, AstDbUpdateOption.GetValue(value))
        {
        }
        
        public AstDbUpdateOption(Position p, AstDbUpdateOptionEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbUpdateOption(this);
        }
        
        protected static AstDbUpdateOptionEnum GetValue(string value)
        {
            if ((value == "READ_ONLY"))
            {
                return AstDbUpdateOptionEnum.ReadOnly;
            }
            if ((value == "READ_WRITE"))
            {
                return AstDbUpdateOptionEnum.ReadWrite;
            }
            return AstDbUpdateOptionEnum._undefined;
        }
    }
    
    /// <summary>
    /// db_user_access_option
    /// 	 : SINGLE_USER
    /// 	 | RESTRICTED_USER
    /// 	 | MULTI_USER
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstDbUserAccessOption : AstTerminal<AstDbUserAccessOptionEnum>
    {
        
        public AstDbUserAccessOption(ITerminalNode t, string value) : 
                base(t, AstDbUserAccessOption.GetValue(value))
        {
        }
        
        public AstDbUserAccessOption(ITerminalNode t, AstDbUserAccessOptionEnum value) : 
                base(t, value)
        {
        }
        
        public AstDbUserAccessOption(ParserRuleContext ctx, string value) : 
                base(ctx, AstDbUserAccessOption.GetValue(value))
        {
        }
        
        public AstDbUserAccessOption(Position p, string value) : 
                base(p, AstDbUserAccessOption.GetValue(value))
        {
        }
        
        public AstDbUserAccessOption(Position p, AstDbUserAccessOptionEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbUserAccessOption(this);
        }
        
        protected static AstDbUserAccessOptionEnum GetValue(string value)
        {
            if ((value == "SINGLE_USER"))
            {
                return AstDbUserAccessOptionEnum.SingleUser;
            }
            if ((value == "RESTRICTED_USER"))
            {
                return AstDbUserAccessOptionEnum.RestrictedUser;
            }
            if ((value == "MULTI_USER"))
            {
                return AstDbUserAccessOptionEnum.MultiUser;
            }
            return AstDbUserAccessOptionEnum._undefined;
        }
    }
    
    /// <summary>
    /// delayed_durability_option
    /// 	 : DELAYED_DURABILITY  EQUAL  DISABLED ALLOWED FORCED
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDelayedDurabilityOption : AstRule
    {
        
        public AstDelayedDurabilityOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDelayedDurabilityOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDelayedDurabilityOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDelayedDurabilityOption(this);
        }
    }
    
    /// <summary>
    /// external_access_option
    /// 	 : DB_CHAINING  on_off
    /// 	 | TRUSTWORTHY  on_off
    /// 	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
    /// 	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
    /// 	 | NESTED_TRIGGERS  EQUAL  on_off
    /// 	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
    /// 	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  DECIMAL
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExternalAccessOption : AstRule
    {
        
        public AstExternalAccessOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExternalAccessOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExternalAccessOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalAccessOption(this);
        }
    }
    
    /// <summary>
    /// id_or_string
    /// 	 : id_
    /// 	 | STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstIdOrString : AstRule
    {
        
        public AstIdOrString(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstIdOrString(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstIdOrString(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIdOrString(this);
        }
    }
    
    /// <summary>
    /// hadr_options
    /// 	 : HADR  AVAILABILITY  GROUP  EQUAL  group_name OFF SUSPEND RESUME
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstHadrOptions : AstRule
    {
        
        public AstHadrOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstHadrOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstHadrOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitHadrOptions(this);
        }
    }
    
    /// <summary>
    /// mixed_page_allocation_option
    /// 	 : MIXED_PAGE_ALLOCATION  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstMixedPageAllocationOption : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstMixedPageAllocationOption(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstMixedPageAllocationOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMixedPageAllocationOption(this);
        }
    }
    
    /// <summary>
    /// parameterization_option
    /// 	 : PARAMETERIZATION  SIMPLE FORCED
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstParameterizationOption : AstRule
    {
        
        public AstParameterizationOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstParameterizationOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstParameterizationOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitParameterizationOption(this);
        }
    }
    
    /// <summary>
    /// recovery_option
    /// 	 : RECOVERY  FULL BULK_LOGGED SIMPLE
    /// 	 | TORN_PAGE_DETECTION  on_off
    /// 	 | ACCELERATED_DATABASE_RECOVERY  EQUAL  on_off
    /// 	 | PAGE_VERIFY  CHECKSUM TORN_PAGE_DETECTION NONE
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRecoveryOption : AstRule
    {
        
        public AstRecoveryOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstRecoveryOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstRecoveryOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRecoveryOption(this);
        }
    }
    
    /// <summary>
    /// service_broker_option
    /// 	 : ENABLE_BROKER
    /// 	 | DISABLE_BROKER
    /// 	 | NEW_BROKER
    /// 	 | ERROR_BROKER_CONVERSATIONS
    /// 	 | HONOR_BROKER_PRIORITY  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstServiceBrokerOption : AstRule
    {
        
        public AstServiceBrokerOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstServiceBrokerOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstServiceBrokerOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServiceBrokerOption(this);
        }
    }
    
    /// <summary>
    /// snapshot_option
    /// 	 : ALLOW_SNAPSHOT_ISOLATION  on_off
    /// 	 | READ_COMMITTED_SNAPSHOT  on_off
    /// 	 | 
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSnapshotOption : AstRule
    {
        
        public AstSnapshotOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSnapshotOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSnapshotOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSnapshotOption(this);
        }
    }
    
    /// <summary>
    /// sql_option
    /// 	 : ANSI_NULL_DEFAULT  on_off
    /// 	 | ANSI_NULLS  on_off
    /// 	 | ANSI_PADDING  on_off
    /// 	 | ANSI_WARNINGS  on_off
    /// 	 | ARITHABORT  on_off
    /// 	 | COMPATIBILITY_LEVEL  EQUAL  DECIMAL
    /// 	 | CONCAT_NULL_YIELDS_NULL  on_off
    /// 	 | NUMERIC_ROUNDABORT  on_off
    /// 	 | QUOTED_IDENTIFIER  on_off
    /// 	 | RECURSIVE_TRIGGERS  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSqlOption : AstRule
    {
        
        public AstSqlOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSqlOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSqlOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlOption(this);
        }
    }
    
    /// <summary>
    /// target_recovery_time_option
    /// 	 : TARGET_RECOVERY_TIME  EQUAL  DECIMAL  SECONDS MINUTES
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTargetRecoveryTimeOption : AstRule
    {
        
        public AstTargetRecoveryTimeOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTargetRecoveryTimeOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTargetRecoveryTimeOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetRecoveryTimeOption(this);
        }
    }
    
    /// <summary>
    /// termination
    /// 	 : ROLLBACK  AFTER  
    /// 	 | ROLLBACK  IMMEDIATE
    /// 	 | NO_WAIT
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTermination : AstRule
    {
        
        public AstTermination(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTermination(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTermination(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTermination(this);
        }
    }
    
    /// <summary>
    /// drop_index
    /// 	 : DROP  INDEX  IF  EXISTS?  drop_relational_or_xml_or_spatial_indexs drop_backward_compatible_indexs  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropIndex : AstRule
    {
        
        public AstDropIndex(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropIndex(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropIndex(this);
        }
    }
    
    /// <summary>
    /// drop_relational_or_xml_or_spatial_indexs
    /// 	 : drop_relational_or_xml_or_spatial_index  COMMA  drop_relational_or_xml_or_spatial_index*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropRelationalOrXmlOrSpatialIndexs : AstRule
    {
        
        private AstDropRelationalOrXmlOrSpatialIndex _dropRelationalOrXmlOrSpatialIndex;
        
        public AstDropRelationalOrXmlOrSpatialIndexs(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDropRelationalOrXmlOrSpatialIndex>())
                {
                    this._dropRelationalOrXmlOrSpatialIndex = ((AstDropRelationalOrXmlOrSpatialIndex)(enumerator.Current));
                }
            }
        }
        
        public AstDropRelationalOrXmlOrSpatialIndexs(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDropRelationalOrXmlOrSpatialIndex>())
                {
                    this._dropRelationalOrXmlOrSpatialIndex = ((AstDropRelationalOrXmlOrSpatialIndex)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDropRelationalOrXmlOrSpatialIndex DropRelationalOrXmlOrSpatialIndex
        {
            get
            {
                return this._dropRelationalOrXmlOrSpatialIndex;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRelationalOrXmlOrSpatialIndexs(this);
        }
    }
    
    /// <summary>
    /// drop_backward_compatible_indexs
    /// 	 : drop_backward_compatible_index  COMMA  drop_backward_compatible_index*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropBackwardCompatibleIndexs : AstRule
    {
        
        private AstDropBackwardCompatibleIndex _dropBackwardCompatibleIndex;
        
        public AstDropBackwardCompatibleIndexs(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDropBackwardCompatibleIndex>())
                {
                    this._dropBackwardCompatibleIndex = ((AstDropBackwardCompatibleIndex)(enumerator.Current));
                }
            }
        }
        
        public AstDropBackwardCompatibleIndexs(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDropBackwardCompatibleIndex>())
                {
                    this._dropBackwardCompatibleIndex = ((AstDropBackwardCompatibleIndex)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDropBackwardCompatibleIndex DropBackwardCompatibleIndex
        {
            get
            {
                return this._dropBackwardCompatibleIndex;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropBackwardCompatibleIndexs(this);
        }
    }
    
    /// <summary>
    /// drop_relational_or_xml_or_spatial_index
    /// 	 : index_name  ON  full_table_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropRelationalOrXmlOrSpatialIndex : AstRule
    {
        
        private AstIndexName _indexName;
        
        private AstFullTableName _fullTableName;
        
        public AstDropRelationalOrXmlOrSpatialIndex(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexName>())
                {
                    this._indexName = ((AstIndexName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
            }
        }
        
        public AstDropRelationalOrXmlOrSpatialIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexName>())
                {
                    this._indexName = ((AstIndexName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexName IndexName
        {
            get
            {
                return this._indexName;
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRelationalOrXmlOrSpatialIndex(this);
        }
    }
    
    /// <summary>
    /// drop_backward_compatible_index
    /// 	 : schema_name  DOT?  table_or_view_name  DOT  index_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropBackwardCompatibleIndex : AstRule
    {
        
        private AstTableOrViewName _tableOrViewName;
        
        private AstIndexName _indexName;
        
        public AstDropBackwardCompatibleIndex(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableOrViewName>())
                {
                    this._tableOrViewName = ((AstTableOrViewName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexName>())
                {
                    this._indexName = ((AstIndexName)(enumerator.Current));
                }
            }
        }
        
        public AstDropBackwardCompatibleIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableOrViewName>())
                {
                    this._tableOrViewName = ((AstTableOrViewName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexName>())
                {
                    this._indexName = ((AstIndexName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableOrViewName TableOrViewName
        {
            get
            {
                return this._tableOrViewName;
            }
        }
        
        public virtual AstIndexName IndexName
        {
            get
            {
                return this._indexName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropBackwardCompatibleIndex(this);
        }
    }
    
    /// <summary>
    /// drop_procedure
    /// 	 : DROP    IF  EXISTS?  func_proc_name_schemas  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropProcedure : AstRule
    {
        
        private AstFuncProcNameSchemas _funcProcNameSchemas;
        
        public AstDropProcedure(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this._funcProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public AstDropProcedure(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this._funcProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFuncProcNameSchemas FuncProcNameSchemas
        {
            get
            {
                return this._funcProcNameSchemas;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropProcedure(this);
        }
    }
    
    /// <summary>
    /// func_proc_name_schemas
    /// 	 : func_proc_name_schema  COMMA  func_proc_name_schema*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFuncProcNameSchemas : AstRule
    {
        
        private AstFuncProcNameSchema _funcProcNameSchema;
        
        public AstFuncProcNameSchemas(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameSchema>())
                {
                    this._funcProcNameSchema = ((AstFuncProcNameSchema)(enumerator.Current));
                }
            }
        }
        
        public AstFuncProcNameSchemas(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameSchema>())
                {
                    this._funcProcNameSchema = ((AstFuncProcNameSchema)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFuncProcNameSchema FuncProcNameSchema
        {
            get
            {
                return this._funcProcNameSchema;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncProcNameSchemas(this);
        }
    }
    
    /// <summary>
    /// drop_dml_trigger
    /// 	 : DROP  TRIGGER  IF  EXISTS?  simple_names  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropDmlTrigger : AstRule
    {
        
        private AstSimpleNames _simpleNames;
        
        public AstDropDmlTrigger(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleNames>())
                {
                    this._simpleNames = ((AstSimpleNames)(enumerator.Current));
                }
            }
        }
        
        public AstDropDmlTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleNames>())
                {
                    this._simpleNames = ((AstSimpleNames)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleNames SimpleNames
        {
            get
            {
                return this._simpleNames;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDmlTrigger(this);
        }
    }
    
    /// <summary>
    /// drop_ddl_trigger
    /// 	 : DROP  TRIGGER  IF  EXISTS?  simple_names  ON  DATABASE ALL  SERVER  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropDdlTrigger : AstRule
    {
        
        private AstSimpleNames _simpleNames;
        
        public AstDropDdlTrigger(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleNames>())
                {
                    this._simpleNames = ((AstSimpleNames)(enumerator.Current));
                }
            }
        }
        
        public AstDropDdlTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleNames>())
                {
                    this._simpleNames = ((AstSimpleNames)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleNames SimpleNames
        {
            get
            {
                return this._simpleNames;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDdlTrigger(this);
        }
    }
    
    /// <summary>
    /// simple_names
    /// 	 : simple_name  COMMA  simple_name*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstSimpleNames : AstRule
    {
        
        private AstSimpleName _simpleName;
        
        public AstSimpleNames(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleName>())
                {
                    this._simpleName = ((AstSimpleName)(enumerator.Current));
                }
            }
        }
        
        public AstSimpleNames(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleName>())
                {
                    this._simpleName = ((AstSimpleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleName SimpleName
        {
            get
            {
                return this._simpleName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSimpleNames(this);
        }
    }
    
    /// <summary>
    /// table_names
    /// 	 : table_name  COMMA  table_name*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstTableNames : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstTableNames(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public AstTableNames(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableNames(this);
        }
    }
    
    /// <summary>
    /// drop_function
    /// 	 : DROP  FUNCTION  IF  EXISTS?  func_proc_name_schemas  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropFunction : AstRule
    {
        
        private AstFuncProcNameSchemas _funcProcNameSchemas;
        
        public AstDropFunction(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this._funcProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public AstDropFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this._funcProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFuncProcNameSchemas FuncProcNameSchemas
        {
            get
            {
                return this._funcProcNameSchemas;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFunction(this);
        }
    }
    
    /// <summary>
    /// drop_statistics
    /// 	 : DROP  STATISTICS  COMMA?  table_name  DOT?  +  SEMI
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropStatistics : AstRule
    {
        
        public AstDropStatistics(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropStatistics(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropStatistics(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropStatistics(this);
        }
    }
    
    /// <summary>
    /// drop_table
    /// 	 : DROP  TABLE  IF  EXISTS?  table_names  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropTable : AstRule
    {
        
        private AstTableNames _tableNames;
        
        public AstDropTable(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableNames>())
                {
                    this._tableNames = ((AstTableNames)(enumerator.Current));
                }
            }
        }
        
        public AstDropTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableNames>())
                {
                    this._tableNames = ((AstTableNames)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableNames TableNames
        {
            get
            {
                return this._tableNames;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropTable(this);
        }
    }
    
    /// <summary>
    /// drop_view
    /// 	 : DROP  VIEW  IF  EXISTS?  simple_names  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropView : AstRule
    {
        
        private AstSimpleNames _simpleNames;
        
        public AstDropView(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleNames>())
                {
                    this._simpleNames = ((AstSimpleNames)(enumerator.Current));
                }
            }
        }
        
        public AstDropView(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleNames>())
                {
                    this._simpleNames = ((AstSimpleNames)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleNames SimpleNames
        {
            get
            {
                return this._simpleNames;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropView(this);
        }
    }
    
    /// <summary>
    /// create_type
    /// 	 : CREATE  TYPE    FROM  data_type  default_value?  AS  TABLE  LR_BRACKET  column_def_table_constraints  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateType : AstRule
    {
        
        public AstCreateType(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateType(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateType(this);
        }
    }
    
    /// <summary>
    /// drop_type
    /// 	 : DROP  TYPE  IF  EXISTS?  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropType : AstRule
    {
        
        public AstDropType(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropType(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropType(this);
        }
    }
    
    /// <summary>
    /// openquery
    /// 	 : OPENQUERY  LR_BRACKET  linked_server  COMMA    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstOpenquery : AstRule
    {
        
        private AstLinkedServer _linkedServer;
        
        public AstOpenquery(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLinkedServer>())
                {
                    this._linkedServer = ((AstLinkedServer)(enumerator.Current));
                }
            }
        }
        
        public AstOpenquery(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLinkedServer>())
                {
                    this._linkedServer = ((AstLinkedServer)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLinkedServer LinkedServer
        {
            get
            {
                return this._linkedServer;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenquery(this);
        }
    }
    
    /// <summary>
    /// opendatasource
    /// 	 : OPENDATASOURCE  LR_BRACKET    COMMA    RR_BRACKET  DOT  database_name?  DOT  schema_name?  DOT  tableName
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOpendatasource : AstRule
    {
        
        public AstOpendatasource(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstOpendatasource(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstOpendatasource(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpendatasource(this);
        }
    }
    
    /// <summary>
    /// declare_statement
    /// 	 : DECLARE  LOCAL_ID  AS?  table_type_definition table_name  SEMI?
    /// 	 | DECLARE    SEMI?
    /// 	 | DECLARE  LOCAL_ID  AS?  xml_type_definition  SEMI?
    /// 	 | WITH  XMLNAMESPACES  LR_BRACKET    RR_BRACKET  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDeclareStatement : AstRule
    {
        
        public AstDeclareStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDeclareStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDeclareStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareStatement(this);
        }
    }
    
    /// <summary>
    /// declare_locals
    /// 	 : declare_local  COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDeclareLocals : AstRule
    {
        
        private AstDeclareLocal _declareLocal;
        
        public AstDeclareLocals(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDeclareLocal>())
                {
                    this._declareLocal = ((AstDeclareLocal)(enumerator.Current));
                }
            }
        }
        
        public AstDeclareLocals(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDeclareLocal>())
                {
                    this._declareLocal = ((AstDeclareLocal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDeclareLocal DeclareLocal
        {
            get
            {
                return this._declareLocal;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareLocals(this);
        }
    }
    
    /// <summary>
    /// xml_declarations
    /// 	 : xml_declaration  COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstXmlDeclarations : AstRule
    {
        
        private AstXmlDeclaration _xmlDeclaration;
        
        public AstXmlDeclarations(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstXmlDeclaration>())
                {
                    this._xmlDeclaration = ((AstXmlDeclaration)(enumerator.Current));
                }
            }
        }
        
        public AstXmlDeclarations(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstXmlDeclaration>())
                {
                    this._xmlDeclaration = ((AstXmlDeclaration)(enumerator.Current));
                }
            }
        }
        
        public virtual AstXmlDeclaration XmlDeclaration
        {
            get
            {
                return this._xmlDeclaration;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlDeclarations(this);
        }
    }
    
    /// <summary>
    /// xml_declaration
    /// 	 :   AS  id_
    /// 	 | DEFAULT  STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstXmlDeclaration : AstRule
    {
        
        public AstXmlDeclaration(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstXmlDeclaration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstXmlDeclaration(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlDeclaration(this);
        }
    }
    
    /// <summary>
    /// cursor_statement
    /// 	 : CLOSE  GLOBAL?  cursor_name  SEMI?
    /// 	 | DEALLOCATE  GLOBAL?  CURSOR?  cursor_name  SEMI?
    /// 	 | declare_cursor
    /// 	 | fetch_cursor
    /// 	 | OPEN  GLOBAL?  cursor_name  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCursorStatement : AstRule
    {
        
        public AstCursorStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCursorStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCursorStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCursorStatement(this);
        }
    }
    
    /// <summary>
    /// backup_database
    /// 	 : BACKUP  DATABASE  database_name  READ_WRITE_FILEGROUPS  COMMA?  FILE FILEGROUP  EQUAL  *?  COMMA?  FILE FILEGROUP  EQUAL  *  TO  COMMA?  logical_device_name+ TO  COMMA?  DISK TAPE URL  EQUAL  STRING id_+  MIRROR  TO  COMMA?  logical_device_name++ MIRROR  TO  COMMA?  DISK TAPE URL  EQUAL  STRING id_++?  WITH  COMMA?  DIFFERENTIAL COMMA?  COPY_ONLY COMMA?  COMPRESSION NO_COMPRESSION COMMA?  DESCRIPTION  EQUAL  STRING id_ COMMA?  NAME  EQUAL  backup_name COMMA?  CREDENTIAL COMMA?  FILE_SNAPSHOT COMMA?  EXPIREDATE  EQUAL  STRING id_ RETAINDAYS  EQUAL  DECIMAL id_ COMMA?  NOINIT INIT COMMA?  NOSKIP SKIP_KEYWORD COMMA?  NOFORMAT FORMAT COMMA?  MEDIADESCRIPTION  EQUAL  STRING id_ COMMA?  MEDIANAME  EQUAL   COMMA?  BLOCKSIZE  EQUAL  DECIMAL id_ COMMA?  BUFFERCOUNT  EQUAL  DECIMAL id_ COMMA?  MAXTRANSFER  EQUAL  DECIMAL id_ COMMA?  NO_CHECKSUM CHECKSUM COMMA?  STOP_ON_ERROR CONTINUE_AFTER_ERROR COMMA?  RESTART COMMA?  STATS  EQUAL  ? COMMA?  REWIND NOREWIND COMMA?  LOAD NOUNLOAD COMMA?  ENCRYPTION  LR_BRACKET  ALGORITHM  EQUAL  AES_128 AES_192 AES_256 TRIPLE_DES_3KEY  COMMA  SERVER  CERTIFICATE  EQUAL  encryptor_name SERVER  ASYMMETRIC  KEY  EQUAL  encryptor_name*?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBackupDatabase : AstRule
    {
        
        public AstBackupDatabase(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstBackupDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstBackupDatabase(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupDatabase(this);
        }
    }
    
    /// <summary>
    /// backup_log
    /// 	 : BACKUP  LOG  database_name  TO  COMMA?  logical_device_name+ TO  COMMA?  DISK TAPE URL  EQUAL  STRING id_+  MIRROR  TO  COMMA?  logical_device_name++ MIRROR  TO  COMMA?  DISK TAPE URL  EQUAL  STRING id_++?  WITH  COMMA?  DIFFERENTIAL COMMA?  COPY_ONLY COMMA?  COMPRESSION NO_COMPRESSION COMMA?  DESCRIPTION  EQUAL  STRING id_ COMMA?  NAME  EQUAL  backup_name COMMA?  CREDENTIAL COMMA?  FILE_SNAPSHOT COMMA?  EXPIREDATE  EQUAL  STRING id_ RETAINDAYS  EQUAL  DECIMAL id_ COMMA?  NOINIT INIT COMMA?  NOSKIP SKIP_KEYWORD COMMA?  NOFORMAT FORMAT COMMA?  MEDIADESCRIPTION  EQUAL  STRING id_ COMMA?  MEDIANAME  EQUAL   COMMA?  BLOCKSIZE  EQUAL  DECIMAL id_ COMMA?  BUFFERCOUNT  EQUAL  DECIMAL id_ COMMA?  MAXTRANSFER  EQUAL  DECIMAL id_ COMMA?  NO_CHECKSUM CHECKSUM COMMA?  STOP_ON_ERROR CONTINUE_AFTER_ERROR COMMA?  RESTART COMMA?  STATS  EQUAL  ? COMMA?  REWIND NOREWIND COMMA?  LOAD NOUNLOAD COMMA?  NORECOVERY STANDBY  EQUAL   COMMA?  NO_TRUNCATE COMMA?  ENCRYPTION  LR_BRACKET  ALGORITHM  EQUAL  AES_128 AES_192 AES_256 TRIPLE_DES_3KEY  COMMA  SERVER  CERTIFICATE  EQUAL  encryptor_name SERVER  ASYMMETRIC  KEY  EQUAL  encryptor_name*?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBackupLog : AstRule
    {
        
        public AstBackupLog(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstBackupLog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstBackupLog(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupLog(this);
        }
    }
    
    /// <summary>
    /// backup_certificate
    /// 	 : BACKUP  CERTIFICATE  certificate_name  TO  FILE  EQUAL    WITH  PRIVATE  KEY  LR_BRACKET  COMMA?  FILE  EQUAL   COMMA?  ENCRYPTION  BY  PASSWORD  EQUAL   COMMA?  DECRYPTION  BY  PASSWORD  EQUAL  +  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstBackupCertificate : AstRule
    {
        
        private AstCertificateName _certificateName;
        
        public AstBackupCertificate(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateName>())
                {
                    this._certificateName = ((AstCertificateName)(enumerator.Current));
                }
            }
        }
        
        public AstBackupCertificate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateName>())
                {
                    this._certificateName = ((AstCertificateName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateName CertificateName
        {
            get
            {
                return this._certificateName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupCertificate(this);
        }
    }
    
    /// <summary>
    /// backup_master_key
    /// 	 : BACKUP  MASTER  KEY  TO  FILE  EQUAL    ENCRYPTION  BY  PASSWORD  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBackupMasterKey : AstRule
    {
        
        public AstBackupMasterKey(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstBackupMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstBackupMasterKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupMasterKey(this);
        }
    }
    
    /// <summary>
    /// backup_service_master_key
    /// 	 : BACKUP  SERVICE  MASTER  KEY  TO  FILE  EQUAL    ENCRYPTION  BY  PASSWORD  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBackupServiceMasterKey : AstRule
    {
        
        public AstBackupServiceMasterKey(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstBackupServiceMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstBackupServiceMasterKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupServiceMasterKey(this);
        }
    }
    
    /// <summary>
    /// kill_statement
    /// 	 : KILL  kill_process kill_query_notification kill_stats_job
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstKillStatement : AstRule
    {
        
        public AstKillStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstKillStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstKillStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillStatement(this);
        }
    }
    
    /// <summary>
    /// kill_process
    /// 	 :  UOW  WITH  STATUSONLY?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstKillProcess : AstRule
    {
        
        public AstKillProcess(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstKillProcess(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstKillProcess(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillProcess(this);
        }
    }
    
    /// <summary>
    /// kill_query_notification
    /// 	 : QUERY  NOTIFICATION  SUBSCRIPTION  ALL 
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstKillQueryNotification : AstRule
    {
        
        public AstKillQueryNotification(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstKillQueryNotification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstKillQueryNotification(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillQueryNotification(this);
        }
    }
    
    /// <summary>
    /// kill_stats_job
    /// 	 : STATS  JOB  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstKillStatsJob : AstRule
    {
        
        public AstKillStatsJob(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstKillStatsJob(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstKillStatsJob(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillStatsJob(this);
        }
    }
    
    /// <summary>
    /// execute_statement
    /// 	 : EXECUTE  execute_body  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstExecuteStatement : AstRule
    {
        
        private AstExecuteBody _executeBody;
        
        public AstExecuteStatement(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteBody>())
                {
                    this._executeBody = ((AstExecuteBody)(enumerator.Current));
                }
            }
        }
        
        public AstExecuteStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteBody>())
                {
                    this._executeBody = ((AstExecuteBody)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExecuteBody ExecuteBody
        {
            get
            {
                return this._executeBody;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatement(this);
        }
    }
    
    /// <summary>
    /// execute_body_batch
    /// 	 : func_proc_name_server_database_schema  execute_statement_args?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstExecuteBodyBatch : AstRule
    {
        
        private AstFuncProcNameServerDatabaseSchema _funcProcNameServerDatabaseSchema;
        
        public AstExecuteBodyBatch(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameServerDatabaseSchema>())
                {
                    this._funcProcNameServerDatabaseSchema = ((AstFuncProcNameServerDatabaseSchema)(enumerator.Current));
                }
            }
        }
        
        public AstExecuteBodyBatch(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameServerDatabaseSchema>())
                {
                    this._funcProcNameServerDatabaseSchema = ((AstFuncProcNameServerDatabaseSchema)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFuncProcNameServerDatabaseSchema FuncProcNameServerDatabaseSchema
        {
            get
            {
                return this._funcProcNameServerDatabaseSchema;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteBodyBatch(this);
        }
    }
    
    /// <summary>
    /// execute_body
    /// 	 :   EQUAL?  func_proc_name_server_database_schema execute_var_string  execute_statement_arg?
    /// 	 | LR_BRACKET  execute_var_strings  RR_BRACKET  AS?  LOGIN USER  EQUAL  STRING?  AT_KEYWORD  linked_server?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteBody : AstRule
    {
        
        public AstExecuteBody(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExecuteBody(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExecuteBody(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteBody(this);
        }
    }
    
    /// <summary>
    /// execute_var_strings
    /// 	 : execute_var_string  COMMA  execute_var_string*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstExecuteVarStrings : AstRule
    {
        
        private AstExecuteVarString _executeVarString;
        
        public AstExecuteVarStrings(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteVarString>())
                {
                    this._executeVarString = ((AstExecuteVarString)(enumerator.Current));
                }
            }
        }
        
        public AstExecuteVarStrings(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteVarString>())
                {
                    this._executeVarString = ((AstExecuteVarString)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExecuteVarString ExecuteVarString
        {
            get
            {
                return this._executeVarString;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteVarStrings(this);
        }
    }
    
    /// <summary>
    /// execute_statement_arg
    /// 	 : execute_statement_arg_unnamed  COMMA  execute_statement_arg*
    /// 	 | execute_statement_arg_nameds
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteStatementArg : AstRule
    {
        
        public AstExecuteStatementArg(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExecuteStatementArg(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExecuteStatementArg(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArg(this);
        }
    }
    
    /// <summary>
    /// execute_statement_arg_nameds
    /// 	 : execute_statement_arg_named  COMMA  execute_statement_arg_named*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstExecuteStatementArgNameds : AstRule
    {
        
        private AstExecuteStatementArgNamed _executeStatementArgNamed;
        
        public AstExecuteStatementArgNameds(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteStatementArgNamed>())
                {
                    this._executeStatementArgNamed = ((AstExecuteStatementArgNamed)(enumerator.Current));
                }
            }
        }
        
        public AstExecuteStatementArgNameds(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteStatementArgNamed>())
                {
                    this._executeStatementArgNamed = ((AstExecuteStatementArgNamed)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExecuteStatementArgNamed ExecuteStatementArgNamed
        {
            get
            {
                return this._executeStatementArgNamed;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgNameds(this);
        }
    }
    
    /// <summary>
    /// execute_statement_args
    /// 	 : execute_statement_arg  COMMA  execute_statement_arg*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstExecuteStatementArgs : AstRule
    {
        
        private AstExecuteStatementArg _executeStatementArg;
        
        public AstExecuteStatementArgs(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteStatementArg>())
                {
                    this._executeStatementArg = ((AstExecuteStatementArg)(enumerator.Current));
                }
            }
        }
        
        public AstExecuteStatementArgs(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteStatementArg>())
                {
                    this._executeStatementArg = ((AstExecuteStatementArg)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExecuteStatementArg ExecuteStatementArg
        {
            get
            {
                return this._executeStatementArg;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgs(this);
        }
    }
    
    /// <summary>
    /// execute_statement_arg_named
    /// 	 :   EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteStatementArgNamed : AstRule
    {
        
        public AstExecuteStatementArgNamed(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExecuteStatementArgNamed(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExecuteStatementArgNamed(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgNamed(this);
        }
    }
    
    /// <summary>
    /// execute_statement_arg_unnamed
    /// 	 : 
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteStatementArgUnnamed : AstRule
    {
        
        public AstExecuteStatementArgUnnamed(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExecuteStatementArgUnnamed(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExecuteStatementArgUnnamed(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgUnnamed(this);
        }
    }
    
    /// <summary>
    /// execute_parameter
    /// 	 : constant LOCAL_ID  OUTPUT OUT? id_ DEFAULT NULL_
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteParameter : AstRule
    {
        
        public AstExecuteParameter(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExecuteParameter(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExecuteParameter(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteParameter(this);
        }
    }
    
    /// <summary>
    /// execute_var_string
    /// 	 : LOCAL_ID  OUTPUT OUT?  PLUS  LOCAL_ID  PLUS  execute_var_string??
    /// 	 | STRING  PLUS  LOCAL_ID  PLUS  execute_var_string??
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteVarString : AstRule
    {
        
        public AstExecuteVarString(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExecuteVarString(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExecuteVarString(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteVarString(this);
        }
    }
    
    /// <summary>
    /// security_statement
    /// 	 : execute_clause  SEMI?
    /// 	 | GRANT  ALL  PRIVILEGES? grant_permission  LR_BRACKET  column_name_list  RR_BRACKET?  ON  class_type_for_grant  DOUBLE_COLON?  ?  TO  to_principal_rincipal_ids  WITH  GRANT  OPTION?  AS  ?  SEMI?
    /// 	 | REVERT  LR_BRACKET  WITH  COOKIE  EQUAL  LOCAL_ID  RR_BRACKET?  SEMI?
    /// 	 | open_key
    /// 	 | close_key
    /// 	 | create_key
    /// 	 | create_certificate
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSecurityStatement : AstRule
    {
        
        public AstSecurityStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSecurityStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSecurityStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSecurityStatement(this);
        }
    }
    
    /// <summary>
    /// to_principal_rincipal_ids
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstToPrincipalRincipalIds : AstRule
    {
        
        public AstToPrincipalRincipalIds(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstToPrincipalRincipalIds(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstToPrincipalRincipalIds(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitToPrincipalRincipalIds(this);
        }
    }
    
    /// <summary>
    /// principal_id
    /// 	 : 
    /// 	 | id_
    /// 	 | PUBLIC
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPrincipalId : AstRule
    {
        
        public AstPrincipalId(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstPrincipalId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstPrincipalId(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrincipalId(this);
        }
    }
    
    /// <summary>
    /// create_certificate
    /// 	 : CREATE  CERTIFICATE  certificate_name  AUTHORIZATION  user_name?  FROM  existing_keys generate_new_keys  ACTIVE  FOR  BEGIN  DIALOG  EQUAL  on_off?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateCertificate : AstRule
    {
        
        private AstCertificateName _certificateName;
        
        public AstCreateCertificate(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateName>())
                {
                    this._certificateName = ((AstCertificateName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateCertificate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateName>())
                {
                    this._certificateName = ((AstCertificateName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateName CertificateName
        {
            get
            {
                return this._certificateName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateCertificate(this);
        }
    }
    
    /// <summary>
    /// existing_keys
    /// 	 : ASSEMBLY  assembly_name
    /// 	 | EXECUTABLE?  FILE  EQUAL    WITH  PRIVATE  KEY  LR_BRACKET  private_key_options  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExistingKeys : AstRule
    {
        
        public AstExistingKeys(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExistingKeys(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExistingKeys(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExistingKeys(this);
        }
    }
    
    /// <summary>
    /// private_key_options
    /// 	 : FILE BINARY  EQUAL    COMMA  DECRYPTION ENCRYPTION  BY  PASSWORD  EQUAL  ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPrivateKeyOptions : AstRule
    {
        
        public AstPrivateKeyOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstPrivateKeyOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstPrivateKeyOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrivateKeyOptions(this);
        }
    }
    
    /// <summary>
    /// generate_new_keys
    /// 	 : ENCRYPTION  BY  PASSWORD  EQUAL  ?  WITH  SUBJECT  EQUAL    COMMA  date_options*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGenerateNewKeys : AstRule
    {
        
        public AstGenerateNewKeys(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstGenerateNewKeys(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstGenerateNewKeys(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGenerateNewKeys(this);
        }
    }
    
    /// <summary>
    /// date_options
    /// 	 : START_DATE EXPIRY_DATE  EQUAL  STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDateOptions : AstRule
    {
        
        public AstDateOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDateOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDateOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDateOptions(this);
        }
    }
    
    /// <summary>
    /// open_key
    /// 	 : OPEN  SYMMETRIC  KEY  symmetric_key_name  DECRYPTION  BY  decryption_mechanism
    /// 	 | OPEN  MASTER  KEY  DECRYPTION  BY  PASSWORD  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOpenKey : AstRule
    {
        
        public AstOpenKey(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstOpenKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstOpenKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenKey(this);
        }
    }
    
    /// <summary>
    /// close_key
    /// 	 : CLOSE  SYMMETRIC  KEY  symmetric_key_name
    /// 	 | CLOSE  ALL  SYMMETRIC  KEYS
    /// 	 | CLOSE  MASTER  KEY
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCloseKey : AstRule
    {
        
        public AstCloseKey(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCloseKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCloseKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCloseKey(this);
        }
    }
    
    /// <summary>
    /// create_key
    /// 	 : CREATE  MASTER  KEY  ENCRYPTION  BY  PASSWORD  EQUAL  
    /// 	 | CREATE  SYMMETRIC  KEY  symmetric_key_name  AUTHORIZATION  user_name?  FROM  PROVIDER  provider_name?  WITH  key_options ENCRYPTION  BY  encryption_mechanism  COMMA?+
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateKey : AstRule
    {
        
        public AstCreateKey(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateKey(this);
        }
    }
    
    /// <summary>
    /// key_options
    /// 	 : KEY_SOURCE  EQUAL  
    /// 	 | ALGORITHM  EQUAL  algorithm
    /// 	 | IDENTITY_VALUE  EQUAL  
    /// 	 | PROVIDER_KEY_NAME  EQUAL  
    /// 	 | CREATION_DISPOSITION  EQUAL  CREATE_NEW OPEN_EXISTING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstKeyOptions : AstRule
    {
        
        public AstKeyOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstKeyOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstKeyOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKeyOptions(this);
        }
    }
    
    /// <summary>
    /// algorithm
    /// 	 : DES
    /// 	 | TRIPLE_DES
    /// 	 | TRIPLE_DES_3KEY
    /// 	 | RC2
    /// 	 | RC4
    /// 	 | RC4_128
    /// 	 | DESX
    /// 	 | AES_128
    /// 	 | AES_192
    /// 	 | AES_256
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstAlgorithm : AstTerminal<AstAlgorithmEnum>
    {
        
        public AstAlgorithm(ITerminalNode t, string value) : 
                base(t, AstAlgorithm.GetValue(value))
        {
        }
        
        public AstAlgorithm(ITerminalNode t, AstAlgorithmEnum value) : 
                base(t, value)
        {
        }
        
        public AstAlgorithm(ParserRuleContext ctx, string value) : 
                base(ctx, AstAlgorithm.GetValue(value))
        {
        }
        
        public AstAlgorithm(Position p, string value) : 
                base(p, AstAlgorithm.GetValue(value))
        {
        }
        
        public AstAlgorithm(Position p, AstAlgorithmEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlgorithm(this);
        }
        
        protected static AstAlgorithmEnum GetValue(string value)
        {
            if ((value == "DES"))
            {
                return AstAlgorithmEnum.Des;
            }
            if ((value == "TRIPLE_DES"))
            {
                return AstAlgorithmEnum.TripleDes;
            }
            if ((value == "TRIPLE_DES_3KEY"))
            {
                return AstAlgorithmEnum.TripleDes3key;
            }
            if ((value == "RC2"))
            {
                return AstAlgorithmEnum.Rc2;
            }
            if ((value == "RC4"))
            {
                return AstAlgorithmEnum.Rc4;
            }
            if ((value == "RC4_128"))
            {
                return AstAlgorithmEnum.Rc4128;
            }
            if ((value == "DESX"))
            {
                return AstAlgorithmEnum.Desx;
            }
            if ((value == "AES_128"))
            {
                return AstAlgorithmEnum.Aes128;
            }
            if ((value == "AES_192"))
            {
                return AstAlgorithmEnum.Aes192;
            }
            if ((value == "AES_256"))
            {
                return AstAlgorithmEnum.Aes256;
            }
            return AstAlgorithmEnum._undefined;
        }
    }
    
    /// <summary>
    /// encryption_mechanism
    /// 	 : CERTIFICATE  certificate_name
    /// 	 | ASYMMETRIC  KEY  asym_key_name
    /// 	 | SYMMETRIC  KEY  symmetric_key_name
    /// 	 | PASSWORD  EQUAL  STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEncryptionMechanism : AstRule
    {
        
        public AstEncryptionMechanism(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstEncryptionMechanism(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstEncryptionMechanism(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEncryptionMechanism(this);
        }
    }
    
    /// <summary>
    /// decryption_mechanism
    /// 	 : CERTIFICATE  certificate_name  WITH  PASSWORD  EQUAL  STRING?
    /// 	 | ASYMMETRIC  KEY  asym_key_name  WITH  PASSWORD  EQUAL  STRING?
    /// 	 | SYMMETRIC  KEY  symmetric_key_name
    /// 	 | PASSWORD  EQUAL  STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDecryptionMechanism : AstRule
    {
        
        public AstDecryptionMechanism(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDecryptionMechanism(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDecryptionMechanism(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecryptionMechanism(this);
        }
    }
    
    /// <summary>
    /// grant_permission
    /// 	 : ADMINISTER  BULK  OPERATIONS DATABASE  BULK  OPERATIONS
    /// 	 | ALTER  ANY  APPLICATION  ROLE ASSEMBLY ASYMMETRIC  KEY AVAILABILITY  GROUP CERTIFICATE COLUMN  ENCRYPTION  KEY MASTER  KEY CONNECTION CONTRACT CREDENTIAL DATABASE  AUDIT DDL  TRIGGER EVENT  NOTIFICATION SESSION SCOPED  CONFIGURATION? DATASPACE ENDPOINT EVENT  NOTIFICATION SESSION EXTERNAL  DATA  SOURCE FILE  FORMAT LIBRARY FULLTEXT  CATALOG LINKED  SERVER LOGIN MASK MESSAGE  TYPE REMOTE  SERVICE  BINDING ROLE ROUTE SCHEMA SECURITY  POLICY SERVER  AUDIT ROLE SERVICE SYMMETRIC  KEY USER RESOURCES SERVER  STATE SETTINGS TRACE?
    /// 	 | AUTHENTICATE  SERVER?
    /// 	 | BACKUP  DATABASE LOG
    /// 	 | CHECKPOINT
    /// 	 | CONNECT  ANY  DATABASE REPLICATION SQL?
    /// 	 | CONTROL  SERVER?
    /// 	 | CREATE  AGGREGATE ANY  DATABASE ASSEMBLY ASYMMETRIC  KEY AVAILABILITY  GROUP CERTIFICATE CONTRACT DATABASE  DDL  EVENT  NOTIFICATION? DDL  EVENT  NOTIFICATION DEFAULT ENDPOINT EXTERNAL  LIBRARY FULLTEXT  CATALOG FUNCTION MESSAGE  TYPE PROCEDURE QUEUE REMOTE  SERVICE  BINDING ROLE ROUTE RULE SCHEMA SEQUENCE SERVER  ROLE SERVICE SYMMETRIC  KEY SYNONYM TABLE TRACE  EVENT  NOTIFICATION TYPE VIEW XML  SCHEMA  COLLECTION
    /// 	 | DELETE
    /// 	 | EXECUTE  ANY  EXTERNAL  SCRIPT?
    /// 	 | EXTERNAL  ACCESS  ASSEMBLY
    /// 	 | IMPERSONATE  ANY  LOGIN?
    /// 	 | INSERT
    /// 	 | KILL  DATABASE  CONNECTION
    /// 	 | RECEIVE
    /// 	 | REFERENCES
    /// 	 | SELECT  ALL  USER  SECURABLES?
    /// 	 | SEND
    /// 	 | SHOWPLAN
    /// 	 | SHUTDOWN
    /// 	 | SUBSCRIBE  QUERY  NOTIFICATIONS
    /// 	 | TAKE  OWNERSHIP
    /// 	 | UNMASK
    /// 	 | UNSAFE  ASSEMBLY
    /// 	 | UPDATE
    /// 	 | VIEW  ANY  DATABASE DEFINITION COLUMN  ENCRYPTION MASTER  KEY  DEFINITION CHANGE  TRACKING DATABASE  STATE DEFINITION SERVER  STATE
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGrantPermission : AstRule
    {
        
        public AstGrantPermission(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstGrantPermission(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstGrantPermission(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGrantPermission(this);
        }
    }
    
    /// <summary>
    /// set_statement
    /// 	 : SET  LOCAL_ID  DOT  ?  EQUAL  expression  SEMI?
    /// 	 | SET  LOCAL_ID  assignment_operator  expression  SEMI?
    /// 	 | SET  LOCAL_ID  EQUAL  CURSOR  declare_set_cursor_common  FOR  READ  ONLY UPDATE  OF  column_name_list??  SEMI?
    /// 	 | set_special
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSetStatement : AstRule
    {
        
        public AstSetStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSetStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSetStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetStatement(this);
        }
    }
    
    /// <summary>
    /// transaction_statement
    /// 	 : BEGIN  DISTRIBUTED  TRAN TRANSACTION  id_ LOCAL_ID?  SEMI?
    /// 	 | BEGIN  TRAN TRANSACTION  id_ LOCAL_ID  WITH  MARK  STRING??  SEMI?
    /// 	 | COMMIT  TRAN TRANSACTION  id_ LOCAL_ID  WITH  LR_BRACKET  DELAYED_DURABILITY  EQUAL  OFF ON  RR_BRACKET??  SEMI?
    /// 	 | COMMIT  WORK?  SEMI?
    /// 	 | COMMIT  id_
    /// 	 | ROLLBACK  id_
    /// 	 | ROLLBACK  TRAN TRANSACTION  id_ LOCAL_ID?  SEMI?
    /// 	 | ROLLBACK  WORK?  SEMI?
    /// 	 | SAVE  TRAN TRANSACTION  id_ LOCAL_ID?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTransactionStatement : AstRule
    {
        
        public AstTransactionStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTransactionStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTransactionStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTransactionStatement(this);
        }
    }
    
    /// <summary>
    /// go_statement
    /// 	 : GO  ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGoStatement : AstRule
    {
        
        public AstGoStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstGoStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstGoStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGoStatement(this);
        }
    }
    
    /// <summary>
    /// use_statement
    /// 	 : USE  database_name  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstUseStatement : AstRule
    {
        
        private AstDatabaseName _databaseName;
        
        public AstUseStatement(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseName>())
                {
                    this._databaseName = ((AstDatabaseName)(enumerator.Current));
                }
            }
        }
        
        public AstUseStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseName>())
                {
                    this._databaseName = ((AstDatabaseName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseName DatabaseName
        {
            get
            {
                return this._databaseName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUseStatement(this);
        }
    }
    
    /// <summary>
    /// setuser_statement
    /// 	 : SETUSER  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSetuserStatement : AstRule
    {
        
        public AstSetuserStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSetuserStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSetuserStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetuserStatement(this);
        }
    }
    
    /// <summary>
    /// reconfigure_statement
    /// 	 : RECONFIGURE  WITH  OVERRIDE?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstReconfigureStatement : AstRule
    {
        
        public AstReconfigureStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstReconfigureStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstReconfigureStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReconfigureStatement(this);
        }
    }
    
    /// <summary>
    /// shutdown_statement
    /// 	 : SHUTDOWN  WITH  NOWAIT?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstShutdownStatement : AstRule
    {
        
        public AstShutdownStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstShutdownStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstShutdownStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitShutdownStatement(this);
        }
    }
    
    /// <summary>
    /// checkpoint_statement
    /// 	 : CHECKPOINT  ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCheckpointStatement : AstRule
    {
        
        public AstCheckpointStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCheckpointStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCheckpointStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCheckpointStatement(this);
        }
    }
    
    /// <summary>
    /// dbcc_special
    /// 	 : DBCC  SHRINKLOG  LR_BRACKET  SIZE  EQUAL  constant_expression id_ DEFAULT  RR_BRACKET?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDbccSpecial : AstRule
    {
        
        public AstDbccSpecial(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDbccSpecial(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDbccSpecial(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccSpecial(this);
        }
    }
    
    /// <summary>
    /// dbcc_clause
    /// 	 : DBCC    LR_BRACKET  expression_list  RR_BRACKET?  WITH  dbcc_options?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDbccClause : AstRule
    {
        
        public AstDbccClause(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDbccClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDbccClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccClause(this);
        }
    }
    
    /// <summary>
    /// dbcc_command
    /// 	 : simple_id
    /// 	 | keyword
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDbccCommand : AstRule
    {
        
        public AstDbccCommand(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDbccCommand(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDbccCommand(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccCommand(this);
        }
    }
    
    /// <summary>
    /// dbcc_options
    /// 	 : simple_id  COMMA  simple_id?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDbccOptions : AstRule
    {
        
        private AstSimpleId _simpleId;
        
        public AstDbccOptions(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleId>())
                {
                    this._simpleId = ((AstSimpleId)(enumerator.Current));
                }
            }
        }
        
        public AstDbccOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleId>())
                {
                    this._simpleId = ((AstSimpleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleId SimpleId
        {
            get
            {
                return this._simpleId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccOptions(this);
        }
    }
    
    /// <summary>
    /// execute_clause
    /// 	 : EXECUTE  AS  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteClause : AstRule
    {
        
        public AstExecuteClause(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExecuteClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExecuteClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteClause(this);
        }
    }
    
    /// <summary>
    /// declare_local
    /// 	 : LOCAL_ID  AS?  data_type  EQUAL  expression?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDeclareLocal : AstRule
    {
        
        private AstDataType _dataType;
        
        public AstDeclareLocal(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
            }
        }
        
        public AstDeclareLocal(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareLocal(this);
        }
    }
    
    /// <summary>
    /// table_type_definition
    /// 	 : TABLE  LR_BRACKET  column_def_table_constraints  COMMA?  table_type_indices*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstTableTypeDefinition : AstRule
    {
        
        private AstColumnDefTableConstraints _columnDefTableConstraints;
        
        public AstTableTypeDefinition(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
            }
        }
        
        public AstTableTypeDefinition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnDefTableConstraints ColumnDefTableConstraints
        {
            get
            {
                return this._columnDefTableConstraints;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableTypeDefinition(this);
        }
    }
    
    /// <summary>
    /// table_type_indices
    /// 	 : PRIMARY  KEY INDEX  id_  CLUSTERED NONCLUSTERED? UNIQUE  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// 	 | CHECK  LR_BRACKET  search_condition  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableTypeIndices : AstRule
    {
        
        public AstTableTypeIndices(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableTypeIndices(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableTypeIndices(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableTypeIndices(this);
        }
    }
    
    /// <summary>
    /// xml_type_definition
    /// 	 : XML  LR_BRACKET  CONTENT DOCUMENT?  xml_schema_collection  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstXmlTypeDefinition : AstRule
    {
        
        private AstXmlSchemaCollection _xmlSchemaCollection;
        
        public AstXmlTypeDefinition(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstXmlSchemaCollection>())
                {
                    this._xmlSchemaCollection = ((AstXmlSchemaCollection)(enumerator.Current));
                }
            }
        }
        
        public AstXmlTypeDefinition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstXmlSchemaCollection>())
                {
                    this._xmlSchemaCollection = ((AstXmlSchemaCollection)(enumerator.Current));
                }
            }
        }
        
        public virtual AstXmlSchemaCollection XmlSchemaCollection
        {
            get
            {
                return this._xmlSchemaCollection;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlTypeDefinition(this);
        }
    }
    
    /// <summary>
    /// xml_schema_collection
    /// 	 : ID  DOT  ID
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstXmlSchemaCollection : AstRule
    {
        
        public AstXmlSchemaCollection(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstXmlSchemaCollection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstXmlSchemaCollection(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlSchemaCollection(this);
        }
    }
    
    /// <summary>
    /// column_def_table_constraints
    /// 	 : column_def_table_constraint  COMMA?  column_def_table_constraint*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstColumnDefTableConstraints : AstRule
    {
        
        private AstColumnDefTableConstraint _columnDefTableConstraint;
        
        public AstColumnDefTableConstraints(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDefTableConstraint>())
                {
                    this._columnDefTableConstraint = ((AstColumnDefTableConstraint)(enumerator.Current));
                }
            }
        }
        
        public AstColumnDefTableConstraints(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDefTableConstraint>())
                {
                    this._columnDefTableConstraint = ((AstColumnDefTableConstraint)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnDefTableConstraint ColumnDefTableConstraint
        {
            get
            {
                return this._columnDefTableConstraint;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDefTableConstraints(this);
        }
    }
    
    /// <summary>
    /// column_def_table_constraint
    /// 	 : column_definition
    /// 	 | materialized_column_definition
    /// 	 | table_constraint
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnDefTableConstraint : AstRule
    {
        
        public AstColumnDefTableConstraint(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstColumnDefTableConstraint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstColumnDefTableConstraint(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDefTableConstraint(this);
        }
    }
    
    /// <summary>
    /// column_definition
    /// 	 : id_  data_type AS  expression  PERSISTED?  column_definition_element*  column_index?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstColumnDefinition : AstRule
    {
        
        private AstId _id;
        
        private AstColumnDefinitionElement _columnDefinitionElement;
        
        private AstColumnIndex _columnIndex;
        
        public AstColumnDefinition(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefinitionElement>())
                {
                    this._columnDefinitionElement = ((AstColumnDefinitionElement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnIndex>())
                {
                    this._columnIndex = ((AstColumnIndex)(enumerator.Current));
                }
            }
        }
        
        public AstColumnDefinition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefinitionElement>())
                {
                    this._columnDefinitionElement = ((AstColumnDefinitionElement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnIndex>())
                {
                    this._columnIndex = ((AstColumnIndex)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstColumnDefinitionElement ColumnDefinitionElement
        {
            get
            {
                return this._columnDefinitionElement;
            }
        }
        
        public virtual AstColumnIndex ColumnIndex
        {
            get
            {
                return this._columnIndex;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDefinition(this);
        }
    }
    
    /// <summary>
    /// column_definition_element
    /// 	 : FILESTREAM
    /// 	 | COLLATE  collation_name
    /// 	 | SPARSE
    /// 	 | MASKED  WITH  LR_BRACKET  FUNCTION  EQUAL    RR_BRACKET
    /// 	 | CONSTRAINT  constraint_name?  DEFAULT  
    /// 	 | IDENTITY  LR_BRACKET    COMMA    RR_BRACKET?
    /// 	 | NOT  FOR  REPLICATION
    /// 	 | GENERATED  ALWAYS  AS  ROW TRANSACTION_ID SEQUENCE_NUMBER  START END  HIDDEN_KEYWORD?
    /// 	 | ROWGUIDCOL
    /// 	 | ENCRYPTED  WITH  LR_BRACKET  COLUMN_ENCRYPTION_KEY  EQUAL    COMMA  ENCRYPTION_TYPE  EQUAL  DETERMINISTIC RANDOMIZED  COMMA  ALGORITHM  EQUAL    RR_BRACKET
    /// 	 | column_constraint
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnDefinitionElement : AstRule
    {
        
        public AstColumnDefinitionElement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstColumnDefinitionElement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstColumnDefinitionElement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDefinitionElement(this);
        }
    }
    
    /// <summary>
    /// column_modifier
    /// 	 : id_  add_drop  ROWGUIDCOL PERSISTED NOT  FOR  REPLICATION SPARSE HIDDEN_KEYWORD MASKED  WITH  FUNCTION  EQUAL  STRING LR_BRACKET  FUNCTION  EQUAL  STRING  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstColumnModifier : AstRule
    {
        
        private AstId _id;
        
        private AstAddDrop _addDrop;
        
        public AstColumnModifier(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
            }
        }
        
        public AstColumnModifier(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnModifier(this);
        }
    }
    
    /// <summary>
    /// materialized_column_definition
    /// 	 : id_  COMPUTE AS  expression  MATERIALIZED NOT  MATERIALIZED?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstMaterializedColumnDefinition : AstRule
    {
        
        private AstId _id;
        
        private AstExpression _expression;
        
        public AstMaterializedColumnDefinition(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstMaterializedColumnDefinition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMaterializedColumnDefinition(this);
        }
    }
    
    /// <summary>
    /// column_constraint
    /// 	 : CONSTRAINT  constraint_name?  null_notnull PRIMARY  KEY UNIQUE  clustered?  primary_key_options FOREIGN  KEY?  foreign_key_options check_constraint
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnConstraint : AstRule
    {
        
        public AstColumnConstraint(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstColumnConstraint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstColumnConstraint(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnConstraint(this);
        }
    }
    
    /// <summary>
    /// column_index
    /// 	 : INDEX  index_name?  create_table_index_options?  on_partition_or_filegroup?  FILESTREAM_ON  filestream_filegroup_or_partition_schema_name NULL_DOUBLE_QUOTE?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstColumnIndex : AstRule
    {
        
        private AstIndexName _indexName;
        
        private AstCreateTableIndexOptions _createTableIndexOptions;
        
        private AstOnPartitionOrFilegroup _onPartitionOrFilegroup;
        
        public AstColumnIndex(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexName>())
                {
                    this._indexName = ((AstIndexName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateTableIndexOptions>())
                {
                    this._createTableIndexOptions = ((AstCreateTableIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup>())
                {
                    this._onPartitionOrFilegroup = ((AstOnPartitionOrFilegroup)(enumerator.Current));
                }
            }
        }
        
        public AstColumnIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexName>())
                {
                    this._indexName = ((AstIndexName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateTableIndexOptions>())
                {
                    this._createTableIndexOptions = ((AstCreateTableIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup>())
                {
                    this._onPartitionOrFilegroup = ((AstOnPartitionOrFilegroup)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexName IndexName
        {
            get
            {
                return this._indexName;
            }
        }
        
        public virtual AstCreateTableIndexOptions CreateTableIndexOptions
        {
            get
            {
                return this._createTableIndexOptions;
            }
        }
        
        public virtual AstOnPartitionOrFilegroup OnPartitionOrFilegroup
        {
            get
            {
                return this._onPartitionOrFilegroup;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnIndex(this);
        }
    }
    
    /// <summary>
    /// on_partition_or_filegroup
    /// 	 : ON  partition_scheme_name  LR_BRACKET  partition_column_name  RR_BRACKET file_group_name DEFAULT_DOUBLE_QUOTE
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOnPartitionOrFilegroup : AstRule
    {
        
        public AstOnPartitionOrFilegroup(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstOnPartitionOrFilegroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstOnPartitionOrFilegroup(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnPartitionOrFilegroup(this);
        }
    }
    
    /// <summary>
    /// table_constraint
    /// 	 : CONSTRAINT  constraint_name?  PRIMARY  KEY UNIQUE  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET  primary_key_options FOREIGN  KEY  LR_BRACKET    RR_BRACKET  foreign_key_options CONNECTION  LR_BRACKET  connection_node  COMMA  connection_node*  RR_BRACKET DEFAULT  LR_BRACKET?  STRING PLUS function_call DECIMAL+ NEXT  VALUE  FOR  table_name  RR_BRACKET?  FOR  id_ check_constraint
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableConstraint : AstRule
    {
        
        public AstTableConstraint(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableConstraint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableConstraint(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableConstraint(this);
        }
    }
    
    /// <summary>
    /// connection_node
    /// 	 :   TO  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstConnectionNode : AstRule
    {
        
        public AstConnectionNode(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstConnectionNode(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstConnectionNode(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConnectionNode(this);
        }
    }
    
    /// <summary>
    /// primary_key_options
    /// 	 : WITH  FILLFACTOR  EQUAL  DECIMAL?  alter_table_index_options?  on_partition_or_filegroup?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstPrimaryKeyOptions : AstRule
    {
        
        private AstAlterTableIndexOptions _alterTableIndexOptions;
        
        private AstOnPartitionOrFilegroup _onPartitionOrFilegroup;
        
        public AstPrimaryKeyOptions(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterTableIndexOptions>())
                {
                    this._alterTableIndexOptions = ((AstAlterTableIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup>())
                {
                    this._onPartitionOrFilegroup = ((AstOnPartitionOrFilegroup)(enumerator.Current));
                }
            }
        }
        
        public AstPrimaryKeyOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterTableIndexOptions>())
                {
                    this._alterTableIndexOptions = ((AstAlterTableIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup>())
                {
                    this._onPartitionOrFilegroup = ((AstOnPartitionOrFilegroup)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterTableIndexOptions AlterTableIndexOptions
        {
            get
            {
                return this._alterTableIndexOptions;
            }
        }
        
        public virtual AstOnPartitionOrFilegroup OnPartitionOrFilegroup
        {
            get
            {
                return this._onPartitionOrFilegroup;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrimaryKeyOptions(this);
        }
    }
    
    /// <summary>
    /// foreign_key_options
    /// 	 : REFERENCES  table_name  LR_BRACKET    RR_BRACKET  on_delete?  on_update?  NOT  FOR  REPLICATION?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstForeignKeyOptions : AstRule
    {
        
        private AstTableName _tableName;
        
        private AstOnDelete _onDelete;
        
        private AstOnUpdate _onUpdate;
        
        public AstForeignKeyOptions(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnDelete>())
                {
                    this._onDelete = ((AstOnDelete)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnUpdate>())
                {
                    this._onUpdate = ((AstOnUpdate)(enumerator.Current));
                }
            }
        }
        
        public AstForeignKeyOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnDelete>())
                {
                    this._onDelete = ((AstOnDelete)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnUpdate>())
                {
                    this._onUpdate = ((AstOnUpdate)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public virtual AstOnDelete OnDelete
        {
            get
            {
                return this._onDelete;
            }
        }
        
        public virtual AstOnUpdate OnUpdate
        {
            get
            {
                return this._onUpdate;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitForeignKeyOptions(this);
        }
    }
    
    /// <summary>
    /// check_constraint
    /// 	 : CHECK  NOT  FOR  REPLICATION?  LR_BRACKET  search_condition  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCheckConstraint : AstRule
    {
        
        private AstSearchCondition _searchCondition;
        
        public AstCheckConstraint(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstCheckConstraint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCheckConstraint(this);
        }
    }
    
    /// <summary>
    /// on_delete
    /// 	 : ON  DELETE  NO  ACTION CASCADE SET  NULL_ SET  DEFAULT
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOnDelete : AstRule
    {
        
        public AstOnDelete(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstOnDelete(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstOnDelete(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnDelete(this);
        }
    }
    
    /// <summary>
    /// on_update
    /// 	 : ON  UPDATE  NO  ACTION CASCADE SET  NULL_ SET  DEFAULT
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOnUpdate : AstRule
    {
        
        public AstOnUpdate(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstOnUpdate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstOnUpdate(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnUpdate(this);
        }
    }
    
    /// <summary>
    /// alter_table_index_options
    /// 	 : WITH  LR_BRACKET  alter_table_index_option  COMMA  alter_table_index_option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterTableIndexOptions : AstRule
    {
        
        private AstAlterTableIndexOption _alterTableIndexOption;
        
        public AstAlterTableIndexOptions(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterTableIndexOption>())
                {
                    this._alterTableIndexOption = ((AstAlterTableIndexOption)(enumerator.Current));
                }
            }
        }
        
        public AstAlterTableIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterTableIndexOption>())
                {
                    this._alterTableIndexOption = ((AstAlterTableIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterTableIndexOption AlterTableIndexOption
        {
            get
            {
                return this._alterTableIndexOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterTableIndexOptions(this);
        }
    }
    
    /// <summary>
    /// alter_table_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  DECIMAL
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  
    /// 	 | DATA_COMPRESSION  EQUAL  NONE ROW PAGE COLUMNSTORE COLUMNSTORE_ARCHIVE  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// 	 | distribution
    /// 	 | ONLINE  EQUAL  ON  LR_BRACKET  low_priority_lock_wait  RR_BRACKET? OFF
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | MAX_DURATION  EQUAL    MINUTES?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterTableIndexOption : AstRule
    {
        
        public AstAlterTableIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterTableIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterTableIndexOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterTableIndexOption(this);
        }
    }
    
    /// <summary>
    /// declare_cursor
    /// 	 : DECLARE  cursor_name  CURSOR  declare_set_cursor_common  FOR  UPDATE  OF  column_name_list??? sensitive?  SCROLL?  CURSOR  FOR  select_statement_standalone  FOR  READ  ONLY UPDATE OF  column_name_list?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDeclareCursor : AstRule
    {
        
        private AstCursorName _cursorName;
        
        public AstDeclareCursor(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
            }
        }
        
        public AstDeclareCursor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCursorName CursorName
        {
            get
            {
                return this._cursorName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareCursor(this);
        }
    }
    
    /// <summary>
    /// sensitive
    /// 	 : SEMI_SENSITIVE
    /// 	 | INSENSITIVE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstSensitive : AstTerminal<AstSensitiveEnum>
    {
        
        public AstSensitive(ITerminalNode t, string value) : 
                base(t, AstSensitive.GetValue(value))
        {
        }
        
        public AstSensitive(ITerminalNode t, AstSensitiveEnum value) : 
                base(t, value)
        {
        }
        
        public AstSensitive(ParserRuleContext ctx, string value) : 
                base(ctx, AstSensitive.GetValue(value))
        {
        }
        
        public AstSensitive(Position p, string value) : 
                base(p, AstSensitive.GetValue(value))
        {
        }
        
        public AstSensitive(Position p, AstSensitiveEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSensitive(this);
        }
        
        protected static AstSensitiveEnum GetValue(string value)
        {
            if ((value == "SEMI_SENSITIVE"))
            {
                return AstSensitiveEnum.SemiSensitive;
            }
            if ((value == "INSENSITIVE"))
            {
                return AstSensitiveEnum.Insensitive;
            }
            return AstSensitiveEnum._undefined;
        }
    }
    
    /// <summary>
    /// declare_set_cursor_common
    /// 	 : declare_set_cursor_common_partial*  FOR  select_statement_standalone
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDeclareSetCursorCommon : AstRule
    {
        
        private AstDeclareSetCursorCommonPartial _declareSetCursorCommonPartial;
        
        private AstSelectStatementStandalone _selectStatementStandalone;
        
        public AstDeclareSetCursorCommon(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDeclareSetCursorCommonPartial>())
                {
                    this._declareSetCursorCommonPartial = ((AstDeclareSetCursorCommonPartial)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public AstDeclareSetCursorCommon(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDeclareSetCursorCommonPartial>())
                {
                    this._declareSetCursorCommonPartial = ((AstDeclareSetCursorCommonPartial)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDeclareSetCursorCommonPartial DeclareSetCursorCommonPartial
        {
            get
            {
                return this._declareSetCursorCommonPartial;
            }
        }
        
        public virtual AstSelectStatementStandalone SelectStatementStandalone
        {
            get
            {
                return this._selectStatementStandalone;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareSetCursorCommon(this);
        }
    }
    
    /// <summary>
    /// declare_set_cursor_common_partial
    /// 	 : local_global
    /// 	 | FORWARD_ONLY SCROLL
    /// 	 | STATIC KEYSET DYNAMIC FAST_FORWARD
    /// 	 | READ_ONLY SCROLL_LOCKS OPTIMISTIC
    /// 	 | TYPE_WARNING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDeclareSetCursorCommonPartial : AstRule
    {
        
        public AstDeclareSetCursorCommonPartial(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDeclareSetCursorCommonPartial(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDeclareSetCursorCommonPartial(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareSetCursorCommonPartial(this);
        }
    }
    
    /// <summary>
    /// fetch_cursor
    /// 	 : FETCH  fetch_cursor_strategy absolute_relative  expression?  FROM?  GLOBAL?  cursor_name  INTO  local_ids?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFetchCursor : AstRule
    {
        
        private AstCursorName _cursorName;
        
        public AstFetchCursor(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
            }
        }
        
        public AstFetchCursor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCursorName CursorName
        {
            get
            {
                return this._cursorName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFetchCursor(this);
        }
    }
    
    /// <summary>
    /// absolute_relative
    /// 	 : ABSOLUTE
    /// 	 | RELATIVE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstAbsoluteRelative : AstTerminal<AstAbsoluteRelativeEnum>
    {
        
        public AstAbsoluteRelative(ITerminalNode t, string value) : 
                base(t, AstAbsoluteRelative.GetValue(value))
        {
        }
        
        public AstAbsoluteRelative(ITerminalNode t, AstAbsoluteRelativeEnum value) : 
                base(t, value)
        {
        }
        
        public AstAbsoluteRelative(ParserRuleContext ctx, string value) : 
                base(ctx, AstAbsoluteRelative.GetValue(value))
        {
        }
        
        public AstAbsoluteRelative(Position p, string value) : 
                base(p, AstAbsoluteRelative.GetValue(value))
        {
        }
        
        public AstAbsoluteRelative(Position p, AstAbsoluteRelativeEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAbsoluteRelative(this);
        }
        
        protected static AstAbsoluteRelativeEnum GetValue(string value)
        {
            if ((value == "ABSOLUTE"))
            {
                return AstAbsoluteRelativeEnum.Absolute;
            }
            if ((value == "RELATIVE"))
            {
                return AstAbsoluteRelativeEnum.Relative;
            }
            return AstAbsoluteRelativeEnum._undefined;
        }
    }
    
    /// <summary>
    /// fetch_cursor_strategy
    /// 	 : NEXT
    /// 	 | PRIOR
    /// 	 | FIRST
    /// 	 | LAST
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstFetchCursorStrategy : AstTerminal<AstFetchCursorStrategyEnum>
    {
        
        public AstFetchCursorStrategy(ITerminalNode t, string value) : 
                base(t, AstFetchCursorStrategy.GetValue(value))
        {
        }
        
        public AstFetchCursorStrategy(ITerminalNode t, AstFetchCursorStrategyEnum value) : 
                base(t, value)
        {
        }
        
        public AstFetchCursorStrategy(ParserRuleContext ctx, string value) : 
                base(ctx, AstFetchCursorStrategy.GetValue(value))
        {
        }
        
        public AstFetchCursorStrategy(Position p, string value) : 
                base(p, AstFetchCursorStrategy.GetValue(value))
        {
        }
        
        public AstFetchCursorStrategy(Position p, AstFetchCursorStrategyEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFetchCursorStrategy(this);
        }
        
        protected static AstFetchCursorStrategyEnum GetValue(string value)
        {
            if ((value == "NEXT"))
            {
                return AstFetchCursorStrategyEnum.Next;
            }
            if ((value == "PRIOR"))
            {
                return AstFetchCursorStrategyEnum.Prior;
            }
            if ((value == "FIRST"))
            {
                return AstFetchCursorStrategyEnum.First;
            }
            if ((value == "LAST"))
            {
                return AstFetchCursorStrategyEnum.Last;
            }
            return AstFetchCursorStrategyEnum._undefined;
        }
    }
    
    /// <summary>
    /// local_ids
    /// 	 : LOCAL_ID  COMMA  LOCAL_ID*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstLocalIds : AstRule
    {
        
        public AstLocalIds(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstLocalIds(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstLocalIds(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLocalIds(this);
        }
    }
    
    /// <summary>
    /// set_special
    /// 	 : SET  id_  id_ constant_LOCAL_ID on_off  SEMI?
    /// 	 | SET  STATISTICS  IO TIME XML PROFILE  on_off  SEMI?
    /// 	 | SET  ROWCOUNT  LOCAL_ID DECIMAL  SEMI?
    /// 	 | SET  TEXTSIZE  DECIMAL  SEMI?
    /// 	 | SET  TRANSACTION  ISOLATION  LEVEL  READ  UNCOMMITTED READ  COMMITTED REPEATABLE  READ SNAPSHOT SERIALIZABLE DECIMAL  SEMI?
    /// 	 | SET  IDENTITY_INSERT  table_name  on_off  SEMI?
    /// 	 | SET  special_list  COMMA  special_list*  on_off
    /// 	 | SET  modify_method
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSetSpecial : AstRule
    {
        
        public AstSetSpecial(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSetSpecial(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSetSpecial(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetSpecial(this);
        }
    }
    
    /// <summary>
    /// special_list
    /// 	 : ANSI_NULLS
    /// 	 | QUOTED_IDENTIFIER
    /// 	 | ANSI_PADDING
    /// 	 | ANSI_WARNINGS
    /// 	 | ANSI_DEFAULTS
    /// 	 | ANSI_NULL_DFLT_OFF
    /// 	 | ANSI_NULL_DFLT_ON
    /// 	 | ARITHABORT
    /// 	 | ARITHIGNORE
    /// 	 | CONCAT_NULL_YIELDS_NULL
    /// 	 | CURSOR_CLOSE_ON_COMMIT
    /// 	 | FMTONLY
    /// 	 | FORCEPLAN
    /// 	 | IMPLICIT_TRANSACTIONS
    /// 	 | NOCOUNT
    /// 	 | NOEXEC
    /// 	 | NUMERIC_ROUNDABORT
    /// 	 | PARSEONLY
    /// 	 | REMOTE_PROC_TRANSACTIONS
    /// 	 | SHOWPLAN_ALL
    /// 	 | SHOWPLAN_TEXT
    /// 	 | SHOWPLAN_XML
    /// 	 | XACT_ABORT
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstSpecialList : AstTerminal<AstSpecialListEnum>
    {
        
        public AstSpecialList(ITerminalNode t, string value) : 
                base(t, AstSpecialList.GetValue(value))
        {
        }
        
        public AstSpecialList(ITerminalNode t, AstSpecialListEnum value) : 
                base(t, value)
        {
        }
        
        public AstSpecialList(ParserRuleContext ctx, string value) : 
                base(ctx, AstSpecialList.GetValue(value))
        {
        }
        
        public AstSpecialList(Position p, string value) : 
                base(p, AstSpecialList.GetValue(value))
        {
        }
        
        public AstSpecialList(Position p, AstSpecialListEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSpecialList(this);
        }
        
        protected static AstSpecialListEnum GetValue(string value)
        {
            if ((value == "ANSI_NULLS"))
            {
                return AstSpecialListEnum.AnsiNulls;
            }
            if ((value == "QUOTED_IDENTIFIER"))
            {
                return AstSpecialListEnum.QuotedIdentifier;
            }
            if ((value == "ANSI_PADDING"))
            {
                return AstSpecialListEnum.AnsiPadding;
            }
            if ((value == "ANSI_WARNINGS"))
            {
                return AstSpecialListEnum.AnsiWarnings;
            }
            if ((value == "ANSI_DEFAULTS"))
            {
                return AstSpecialListEnum.AnsiDefaults;
            }
            if ((value == "ANSI_NULL_DFLT_OFF"))
            {
                return AstSpecialListEnum.AnsiNullDfltOff;
            }
            if ((value == "ANSI_NULL_DFLT_ON"))
            {
                return AstSpecialListEnum.AnsiNullDfltOn;
            }
            if ((value == "ARITHABORT"))
            {
                return AstSpecialListEnum.Arithabort;
            }
            if ((value == "ARITHIGNORE"))
            {
                return AstSpecialListEnum.Arithignore;
            }
            if ((value == "CONCAT_NULL_YIELDS_NULL"))
            {
                return AstSpecialListEnum.ConcatNullYieldsNull;
            }
            if ((value == "CURSOR_CLOSE_ON_COMMIT"))
            {
                return AstSpecialListEnum.CursorCloseOnCommit;
            }
            if ((value == "FMTONLY"))
            {
                return AstSpecialListEnum.Fmtonly;
            }
            if ((value == "FORCEPLAN"))
            {
                return AstSpecialListEnum.Forceplan;
            }
            if ((value == "IMPLICIT_TRANSACTIONS"))
            {
                return AstSpecialListEnum.ImplicitTransactions;
            }
            if ((value == "NOCOUNT"))
            {
                return AstSpecialListEnum.Nocount;
            }
            if ((value == "NOEXEC"))
            {
                return AstSpecialListEnum.Noexec;
            }
            if ((value == "NUMERIC_ROUNDABORT"))
            {
                return AstSpecialListEnum.NumericRoundabort;
            }
            if ((value == "PARSEONLY"))
            {
                return AstSpecialListEnum.Parseonly;
            }
            if ((value == "REMOTE_PROC_TRANSACTIONS"))
            {
                return AstSpecialListEnum.RemoteProcTransactions;
            }
            if ((value == "SHOWPLAN_ALL"))
            {
                return AstSpecialListEnum.ShowplanAll;
            }
            if ((value == "SHOWPLAN_TEXT"))
            {
                return AstSpecialListEnum.ShowplanText;
            }
            if ((value == "SHOWPLAN_XML"))
            {
                return AstSpecialListEnum.ShowplanXml;
            }
            if ((value == "XACT_ABORT"))
            {
                return AstSpecialListEnum.XactAbort;
            }
            return AstSpecialListEnum._undefined;
        }
    }
    
    /// <summary>
    /// constant_LOCAL_ID
    /// 	 : constant
    /// 	 | LOCAL_ID
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstConstantLOCALID : AstRule
    {
        
        public AstConstantLOCALID(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstConstantLOCALID(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstConstantLOCALID(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConstantLOCALID(this);
        }
    }
    
    /// <summary>
    /// expression
    /// 	 : primitive_expression
    /// 	 | function_call
    /// 	 | expression  DOT  value_call query_call exist_call modify_call
    /// 	 | expression  DOT  hierarchyid_call
    /// 	 | expression  COLLATE  id_
    /// 	 | case_expression
    /// 	 | full_column_name
    /// 	 | bracket_expression
    /// 	 | unary_operator_expression
    /// 	 | expression    expression
    /// 	 | expression    expression
    /// 	 | expression  time_zone
    /// 	 | over_clause
    /// 	 | DOLLAR_ACTION
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExpression : AstRule
    {
        
        public AstExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpression(this);
        }
    }
    
    /// <summary>
    /// parameter
    /// 	 : PLACEHOLDER
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstParameter : AstTerminal<string>
    {
        
        public AstParameter(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstParameter(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstParameter(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitParameter(this);
        }
    }
    
    /// <summary>
    /// time_zone
    /// 	 : AT_KEYWORD  TIME  ZONE  expression
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstTimeZone : AstRule
    {
        
        private AstExpression _expression;
        
        public AstTimeZone(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstTimeZone(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTimeZone(this);
        }
    }
    
    /// <summary>
    /// primitive_expression
    /// 	 : DEFAULT
    /// 	 | NULL_
    /// 	 | LOCAL_ID
    /// 	 | constant
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPrimitiveExpression : AstRule
    {
        
        public AstPrimitiveExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstPrimitiveExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstPrimitiveExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrimitiveExpression(this);
        }
    }
    
    /// <summary>
    /// case_expression
    /// 	 : CASE    switch_section+  ELSE  ?  END
    /// 	 | CASE  switch_search_condition_section+  ELSE  ?  END
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCaseExpression : AstRule
    {
        
        public AstCaseExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCaseExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCaseExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCaseExpression(this);
        }
    }
    
    /// <summary>
    /// unary_operator_expression
    /// 	 : BIT_NOT  expression
    /// 	 |   expression
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUnaryOperatorExpression : AstRule
    {
        
        public AstUnaryOperatorExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstUnaryOperatorExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstUnaryOperatorExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnaryOperatorExpression(this);
        }
    }
    
    /// <summary>
    /// bracket_expression
    /// 	 : LR_BRACKET  expression  RR_BRACKET
    /// 	 | LR_BRACKET  subquery  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBracketExpression : AstRule
    {
        
        public AstBracketExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstBracketExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstBracketExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBracketExpression(this);
        }
    }
    
    /// <summary>
    /// constant_expression
    /// 	 : NULL_
    /// 	 | constant
    /// 	 | function_call
    /// 	 | LOCAL_ID
    /// 	 | LR_BRACKET  constant_expression  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstConstantExpression : AstRule
    {
        
        public AstConstantExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstConstantExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstConstantExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConstantExpression(this);
        }
    }
    
    /// <summary>
    /// with_expression
    /// 	 : WITH    COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWithExpression : AstRule
    {
        
        public AstWithExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstWithExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstWithExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWithExpression(this);
        }
    }
    
    /// <summary>
    /// common_table_expression
    /// 	 :   LR_BRACKET    RR_BRACKET?  AS  LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCommonTableExpression : AstRule
    {
        
        public AstCommonTableExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCommonTableExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCommonTableExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCommonTableExpression(this);
        }
    }
    
    /// <summary>
    /// update_elem
    /// 	 : LOCAL_ID  EQUAL  full_column_name  EQUAL assignment_operator  expression
    /// 	 | full_column_name LOCAL_ID  EQUAL assignment_operator  expression
    /// 	 | udt_column_name  DOT  method_name  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUpdateElem : AstRule
    {
        
        public AstUpdateElem(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstUpdateElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstUpdateElem(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateElem(this);
        }
    }
    
    /// <summary>
    /// update_elem_merge
    /// 	 : full_column_name LOCAL_ID  EQUAL assignment_operator  expression
    /// 	 | udt_column_name  DOT  method_name  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUpdateElemMerge : AstRule
    {
        
        public AstUpdateElemMerge(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstUpdateElemMerge(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstUpdateElemMerge(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateElemMerge(this);
        }
    }
    
    /// <summary>
    /// search_condition
    /// 	 : NOT*  predicate LR_BRACKET  search_condition  RR_BRACKET
    /// 	 | search_condition  AND  search_condition
    /// 	 | search_condition  OR  search_condition
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSearchCondition : AstRule
    {
        
        public AstSearchCondition(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSearchCondition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSearchCondition(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSearchCondition(this);
        }
    }
    
    /// <summary>
    /// predicate
    /// 	 : EXISTS  LR_BRACKET  subquery  RR_BRACKET
    /// 	 | freetext_predicate
    /// 	 | expression  comparison_operator  expression
    /// 	 | expression  MULT_ASSIGN  expression
    /// 	 | expression  comparison_operator  ALL SOME ANY  LR_BRACKET  subquery  RR_BRACKET
    /// 	 | expression  NOT*  BETWEEN  expression  AND  expression
    /// 	 | expression  NOT*  IN  LR_BRACKET  subquery expression_list  RR_BRACKET
    /// 	 | expression  NOT*  LIKE  expression  ESCAPE  expression?
    /// 	 | expression  IS  null_notnull
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPredicate : AstRule
    {
        
        public AstPredicate(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstPredicate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstPredicate(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicate(this);
        }
    }
    
    /// <summary>
    /// query_expression
    /// 	 : query_specification LR_BRACKET  query_expression  RR_BRACKET  UNION  ALL?  query_expression?
    /// 	 | query_specification  select_order_by_clause?  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueryExpression : AstRule
    {
        
        public AstQueryExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstQueryExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstQueryExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueryExpression(this);
        }
    }
    
    /// <summary>
    /// sql_union
    /// 	 : UNION  ALL? EXCEPT INTERSECT   LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSqlUnion : AstRule
    {
        
        public AstSqlUnion(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSqlUnion(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSqlUnion(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlUnion(this);
        }
    }
    
    /// <summary>
    /// query_specification
    /// 	 : SELECT        INTO  ?  FROM  ?  WHERE  ?  GROUP  BY    groupBys_list GROUPING  SETS  LR_BRACKET  groupSet_list  RR_BRACKET?  HAVING  ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQuerySpecification : AstRule
    {
        
        public AstQuerySpecification(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstQuerySpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstQuerySpecification(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQuerySpecification(this);
        }
    }
    
    /// <summary>
    /// groupSet_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGroupSetList : AstRule
    {
        
        public AstGroupSetList(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstGroupSetList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstGroupSetList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupSetList(this);
        }
    }
    
    /// <summary>
    /// groupBys_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGroupBysList : AstRule
    {
        
        public AstGroupBysList(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstGroupBysList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstGroupBysList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupBysList(this);
        }
    }
    
    /// <summary>
    /// top_clause
    /// 	 : TOP  top_percent top_count  WITH  TIES?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTopClause : AstRule
    {
        
        public AstTopClause(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTopClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTopClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTopClause(this);
        }
    }
    
    /// <summary>
    /// top_percent
    /// 	 :   PERCENT
    /// 	 | LR_BRACKET    RR_BRACKET  PERCENT
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTopPercent : AstRule
    {
        
        public AstTopPercent(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTopPercent(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTopPercent(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTopPercent(this);
        }
    }
    
    /// <summary>
    /// top_count
    /// 	 : 
    /// 	 | LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTopCount : AstRule
    {
        
        public AstTopCount(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTopCount(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTopCount(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTopCount(this);
        }
    }
    
    /// <summary>
    /// order_by_clause
    /// 	 : ORDER  BY    COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOrderByClause : AstRule
    {
        
        public AstOrderByClause(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstOrderByClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstOrderByClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOrderByClause(this);
        }
    }
    
    /// <summary>
    /// select_order_by_clause
    /// 	 : order_by_clause  OFFSET      FETCH        ONLY??
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstSelectOrderByClause : AstRule
    {
        
        private AstOrderByClause _orderByClause;
        
        public AstSelectOrderByClause(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOrderByClause>())
                {
                    this._orderByClause = ((AstOrderByClause)(enumerator.Current));
                }
            }
        }
        
        public AstSelectOrderByClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOrderByClause>())
                {
                    this._orderByClause = ((AstOrderByClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOrderByClause OrderByClause
        {
            get
            {
                return this._orderByClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectOrderByClause(this);
        }
    }
    
    /// <summary>
    /// for_clause
    /// 	 : FOR  BROWSE
    /// 	 | FOR  XML  RAW  LR_BRACKET  STRING  RR_BRACKET? AUTO  xml_common_directives*  COMMA  XMLDATA XMLSCHEMA  LR_BRACKET  STRING  RR_BRACKET??  COMMA  ELEMENTS  XSINIL ABSENT??
    /// 	 | FOR  XML  EXPLICIT  xml_common_directives*  COMMA  XMLDATA?
    /// 	 | FOR  XML  PATH  LR_BRACKET  STRING  RR_BRACKET?  xml_common_directives*  COMMA  ELEMENTS  XSINIL ABSENT??
    /// 	 | FOR  JSON  AUTO PATH  COMMA  ROOT  LR_BRACKET  STRING  RR_BRACKET INCLUDE_NULL_VALUES WITHOUT_ARRAY_WRAPPER*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstForClause : AstRule
    {
        
        public AstForClause(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstForClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstForClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitForClause(this);
        }
    }
    
    /// <summary>
    /// xml_common_directives
    /// 	 : COMMA  BINARY_KEYWORD  BASE64 TYPE ROOT  LR_BRACKET  STRING  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstXmlCommonDirectives : AstRule
    {
        
        public AstXmlCommonDirectives(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstXmlCommonDirectives(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstXmlCommonDirectives(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlCommonDirectives(this);
        }
    }
    
    /// <summary>
    /// order_by_expression
    /// 	 :    ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOrderByExpression : AstRule
    {
        
        public AstOrderByExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstOrderByExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstOrderByExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOrderByExpression(this);
        }
    }
    
    /// <summary>
    /// grouping_sets_item
    /// 	 : grouping_sets_list
    /// 	 | LR_BRACKET  grouping_sets_list?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGroupingSetsItem : AstRule
    {
        
        public AstGroupingSetsItem(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstGroupingSetsItem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstGroupingSetsItem(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupingSetsItem(this);
        }
    }
    
    /// <summary>
    /// grouping_sets_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGroupingSetsList : AstRule
    {
        
        public AstGroupingSetsList(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstGroupingSetsList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstGroupingSetsList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupingSetsList(this);
        }
    }
    
    /// <summary>
    /// option_clause
    /// 	 : OPTION  LR_BRACKET  option  COMMA  option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstOptionClause : AstRule
    {
        
        private AstOption _option;
        
        public AstOptionClause(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOption>())
                {
                    this._option = ((AstOption)(enumerator.Current));
                }
            }
        }
        
        public AstOptionClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOption>())
                {
                    this._option = ((AstOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOption Option
        {
            get
            {
                return this._option;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOptionClause(this);
        }
    }
    
    /// <summary>
    /// option
    /// 	 : FAST  
    /// 	 | HASH ORDER  GROUP
    /// 	 | MERGE HASH CONCAT  UNION
    /// 	 | LOOP MERGE HASH  JOIN
    /// 	 | EXPAND  VIEWS
    /// 	 | FORCE  ORDER
    /// 	 | IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX
    /// 	 | KEEP  PLAN
    /// 	 | KEEPFIXED  PLAN
    /// 	 | MAXDOP  
    /// 	 | MAXRECURSION  
    /// 	 | OPTIMIZE  FOR  LR_BRACKET  optimize_for_args  RR_BRACKET
    /// 	 | OPTIMIZE  FOR  UNKNOWN
    /// 	 | PARAMETERIZATION  SIMPLE FORCED
    /// 	 | RECOMPILE
    /// 	 | ROBUST  PLAN
    /// 	 | USE  PLAN  STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOption : AstRule
    {
        
        public AstOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOption(this);
        }
    }
    
    /// <summary>
    /// optimize_for_args
    /// 	 : optimize_for_arg  COMMA  optimize_for_arg*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstOptimizeForArgs : AstRule
    {
        
        private AstOptimizeForArg _optimizeForArg;
        
        public AstOptimizeForArgs(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOptimizeForArg>())
                {
                    this._optimizeForArg = ((AstOptimizeForArg)(enumerator.Current));
                }
            }
        }
        
        public AstOptimizeForArgs(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOptimizeForArg>())
                {
                    this._optimizeForArg = ((AstOptimizeForArg)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOptimizeForArg OptimizeForArg
        {
            get
            {
                return this._optimizeForArg;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOptimizeForArgs(this);
        }
    }
    
    /// <summary>
    /// optimize_for_arg
    /// 	 : LOCAL_ID  UNKNOWN EQUAL  constant NULL_
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOptimizeForArg : AstRule
    {
        
        public AstOptimizeForArg(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstOptimizeForArg(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstOptimizeForArg(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOptimizeForArg(this);
        }
    }
    
    /// <summary>
    /// select_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSelectList : AstRule
    {
        
        public AstSelectList(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSelectList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSelectList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectList(this);
        }
    }
    
    /// <summary>
    /// udt_method_arguments
    /// 	 : LR_BRACKET    COMMA  *  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUdtMethodArguments : AstRule
    {
        
        public AstUdtMethodArguments(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstUdtMethodArguments(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstUdtMethodArguments(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUdtMethodArguments(this);
        }
    }
    
    /// <summary>
    /// star_asterisk
    /// 	 : STAR
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstStarAsterisk : AstTerminal<string>
    {
        
        public AstStarAsterisk(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstStarAsterisk(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstStarAsterisk(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStarAsterisk(this);
        }
    }
    
    /// <summary>
    /// table_asterisk
    /// 	 : table_name  DOT  STAR
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstTableAsterisk : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstTableAsterisk(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public AstTableAsterisk(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableAsterisk(this);
        }
    }
    
    /// <summary>
    /// updated_asterisk
    /// 	 : INSERTED DELETED  DOT  STAR
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUpdatedAsterisk : AstRule
    {
        
        public AstUpdatedAsterisk(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstUpdatedAsterisk(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstUpdatedAsterisk(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdatedAsterisk(this);
        }
    }
    
    /// <summary>
    /// column_elem
    /// 	 : column_elem_target  as_column_alias?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstColumnElem : AstRule
    {
        
        private AstColumnElemTarget _columnElemTarget;
        
        private AstAsColumnAlias _asColumnAlias;
        
        public AstColumnElem(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnElemTarget>())
                {
                    this._columnElemTarget = ((AstColumnElemTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsColumnAlias>())
                {
                    this._asColumnAlias = ((AstAsColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public AstColumnElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnElemTarget>())
                {
                    this._columnElemTarget = ((AstColumnElemTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsColumnAlias>())
                {
                    this._asColumnAlias = ((AstAsColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnElemTarget ColumnElemTarget
        {
            get
            {
                return this._columnElemTarget;
            }
        }
        
        public virtual AstAsColumnAlias AsColumnAlias
        {
            get
            {
                return this._asColumnAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnElem(this);
        }
    }
    
    /// <summary>
    /// column_elem_target
    /// 	 : full_column_name
    /// 	 | DOLLAR  IDENTITY
    /// 	 | DOLLAR  ROWGUID
    /// 	 | NULL_
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnElemTarget : AstRule
    {
        
        public AstColumnElemTarget(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstColumnElemTarget(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstColumnElemTarget(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnElemTarget(this);
        }
    }
    
    /// <summary>
    /// udt_elem
    /// 	 : udt_column_name  DOT  non_static_attr  udt_method_arguments  as_column_alias?
    /// 	 | udt_column_name  DOUBLE_COLON  static_attr  udt_method_arguments?  as_column_alias?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUdtElem : AstRule
    {
        
        public AstUdtElem(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstUdtElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstUdtElem(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUdtElem(this);
        }
    }
    
    /// <summary>
    /// expression_elem
    /// 	 :     
    /// 	 |   as_column_alias?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExpressionElem : AstRule
    {
        
        public AstExpressionElem(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExpressionElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExpressionElem(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressionElem(this);
        }
    }
    
    /// <summary>
    /// expression_assign_elem
    /// 	 : LOCAL_ID  assignment_operator EQUAL  expression
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstExpressionAssignElem : AstRule
    {
        
        private AstExpression _expression;
        
        public AstExpressionAssignElem(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstExpressionAssignElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressionAssignElem(this);
        }
    }
    
    /// <summary>
    /// table_sources
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableSources : AstRule
    {
        
        public AstTableSources(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableSources(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableSources(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableSources(this);
        }
    }
    
    /// <summary>
    /// table_source
    /// 	 : table_source_item_joined
    /// 	 | LR_BRACKET  table_source  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableSource : AstRule
    {
        
        public AstTableSource(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableSource(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableSource(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableSource(this);
        }
    }
    
    /// <summary>
    /// table_source_item_joined
    /// 	 : table_source_item  
    /// 	 | LR_BRACKET  table_source_item_joined  RR_BRACKET  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableSourceItemJoined : AstRule
    {
        
        public AstTableSourceItemJoined(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableSourceItemJoined(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableSourceItemJoined(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableSourceItemJoined(this);
        }
    }
    
    /// <summary>
    /// table_source_item
    /// 	 : full_table_name  deprecated_table_hint  as_table_alias
    /// 	 | full_table_name  as_table_alias?  with_table_hints deprecated_table_hint sybase_legacy_hints?
    /// 	 | rowset_function  as_table_alias?
    /// 	 | LR_BRACKET  derived_table  RR_BRACKET  as_table_alias  column_alias_list??
    /// 	 | change_table  as_table_alias?
    /// 	 | nodes_method  as_table_alias  column_alias_list??
    /// 	 | function_call  as_table_alias  column_alias_list??
    /// 	 |   as_table_alias?
    /// 	 |   DOT    as_table_alias  column_alias_list??
    /// 	 | open_xml
    /// 	 | open_json
    /// 	 | DOUBLE_COLON    as_table_alias?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableSourceItem : AstRule
    {
        
        public AstTableSourceItem(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableSourceItem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableSourceItem(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableSourceItem(this);
        }
    }
    
    /// <summary>
    /// expression2
    /// 	 : expression  COMMA  expression?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstExpression2 : AstRule
    {
        
        private AstExpression _expression;
        
        public AstExpression2(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstExpression2(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpression2(this);
        }
    }
    
    /// <summary>
    /// open_xml
    /// 	 : OPENXML  LR_BRACKET  expression  COMMA  expression2  RR_BRACKET  WITH  LR_BRACKET  schema_declaration  RR_BRACKET?  as_table_alias?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstOpenXml : AstRule
    {
        
        private AstExpression _expression;
        
        private AstExpression2 _expression2;
        
        private AstAsTableAlias _asTableAlias;
        
        public AstOpenXml(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this._expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstOpenXml(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this._expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstExpression2 Expression2
        {
            get
            {
                return this._expression2;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenXml(this);
        }
    }
    
    /// <summary>
    /// open_json
    /// 	 : OPENJSON  LR_BRACKET  expression2  RR_BRACKET  WITH  LR_BRACKET  json_declaration  RR_BRACKET?  as_table_alias?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstOpenJson : AstRule
    {
        
        private AstExpression2 _expression2;
        
        private AstAsTableAlias _asTableAlias;
        
        public AstOpenJson(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this._expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstOpenJson(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this._expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression2 Expression2
        {
            get
            {
                return this._expression2;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenJson(this);
        }
    }
    
    /// <summary>
    /// json_declaration
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstJsonDeclaration : AstRule
    {
        
        public AstJsonDeclaration(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstJsonDeclaration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstJsonDeclaration(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitJsonDeclaration(this);
        }
    }
    
    /// <summary>
    /// json_column_declaration
    /// 	 : column_declaration  AS  JSON?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstJsonColumnDeclaration : AstRule
    {
        
        private AstColumnDeclaration _columnDeclaration;
        
        public AstJsonColumnDeclaration(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDeclaration>())
                {
                    this._columnDeclaration = ((AstColumnDeclaration)(enumerator.Current));
                }
            }
        }
        
        public AstJsonColumnDeclaration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDeclaration>())
                {
                    this._columnDeclaration = ((AstColumnDeclaration)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnDeclaration ColumnDeclaration
        {
            get
            {
                return this._columnDeclaration;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitJsonColumnDeclaration(this);
        }
    }
    
    /// <summary>
    /// schema_declaration
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSchemaDeclaration : AstRule
    {
        
        public AstSchemaDeclaration(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSchemaDeclaration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSchemaDeclaration(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaDeclaration(this);
        }
    }
    
    /// <summary>
    /// column_declaration
    /// 	 : id_  data_type  STRING?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstColumnDeclaration : AstRule
    {
        
        private AstId _id;
        
        private AstDataType _dataType;
        
        public AstColumnDeclaration(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
            }
        }
        
        public AstColumnDeclaration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDeclaration(this);
        }
    }
    
    /// <summary>
    /// change_table_changes
    /// 	 : CHANGETABLE  LR_BRACKET  CHANGES    COMMA    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstChangeTableChanges : AstRule
    {
        
        public AstChangeTableChanges(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstChangeTableChanges(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstChangeTableChanges(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTableChanges(this);
        }
    }
    
    /// <summary>
    /// change_table_version
    /// 	 : CHANGETABLE  LR_BRACKET  VERSION    COMMA    COMMA    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstChangeTableVersion : AstRule
    {
        
        public AstChangeTableVersion(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstChangeTableVersion(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstChangeTableVersion(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTableVersion(this);
        }
    }
    
    /// <summary>
    /// join_on
    /// 	 :      ?  JOIN    ON  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstJoinOn : AstRule
    {
        
        public AstJoinOn(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstJoinOn(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstJoinOn(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitJoinOn(this);
        }
    }
    
    /// <summary>
    /// cross_join
    /// 	 : CROSS  JOIN  table_source
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCrossJoin : AstRule
    {
        
        private AstTableSource _tableSource;
        
        public AstCrossJoin(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableSource>())
                {
                    this._tableSource = ((AstTableSource)(enumerator.Current));
                }
            }
        }
        
        public AstCrossJoin(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableSource>())
                {
                    this._tableSource = ((AstTableSource)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableSource TableSource
        {
            get
            {
                return this._tableSource;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCrossJoin(this);
        }
    }
    
    /// <summary>
    /// apply_
    /// 	 :   APPLY  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstApply : AstRule
    {
        
        public AstApply(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstApply(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstApply(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitApply(this);
        }
    }
    
    /// <summary>
    /// pivot
    /// 	 : PIVOT  pivot_clause  as_table_alias
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstPivot : AstRule
    {
        
        private AstPivotClause _pivotClause;
        
        private AstAsTableAlias _asTableAlias;
        
        public AstPivot(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPivotClause>())
                {
                    this._pivotClause = ((AstPivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstPivot(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPivotClause>())
                {
                    this._pivotClause = ((AstPivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPivotClause PivotClause
        {
            get
            {
                return this._pivotClause;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPivot(this);
        }
    }
    
    /// <summary>
    /// unpivot
    /// 	 : UNPIVOT  unpivot_clause  as_table_alias
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstUnpivot : AstRule
    {
        
        private AstUnpivotClause _unpivotClause;
        
        private AstAsTableAlias _asTableAlias;
        
        public AstUnpivot(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUnpivotClause>())
                {
                    this._unpivotClause = ((AstUnpivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstUnpivot(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUnpivotClause>())
                {
                    this._unpivotClause = ((AstUnpivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUnpivotClause UnpivotClause
        {
            get
            {
                return this._unpivotClause;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnpivot(this);
        }
    }
    
    /// <summary>
    /// pivot_clause
    /// 	 : LR_BRACKET  aggregate_windowed_function  FOR  full_column_name  IN  column_alias_list  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstPivotClause : AstRule
    {
        
        private AstAggregateWindowedFunction _aggregateWindowedFunction;
        
        private AstFullColumnName _fullColumnName;
        
        private AstColumnAliasList _columnAliasList;
        
        public AstPivotClause(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAggregateWindowedFunction>())
                {
                    this._aggregateWindowedFunction = ((AstAggregateWindowedFunction)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnAliasList>())
                {
                    this._columnAliasList = ((AstColumnAliasList)(enumerator.Current));
                }
            }
        }
        
        public AstPivotClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAggregateWindowedFunction>())
                {
                    this._aggregateWindowedFunction = ((AstAggregateWindowedFunction)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnAliasList>())
                {
                    this._columnAliasList = ((AstColumnAliasList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAggregateWindowedFunction AggregateWindowedFunction
        {
            get
            {
                return this._aggregateWindowedFunction;
            }
        }
        
        public virtual AstFullColumnName FullColumnName
        {
            get
            {
                return this._fullColumnName;
            }
        }
        
        public virtual AstColumnAliasList ColumnAliasList
        {
            get
            {
                return this._columnAliasList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPivotClause(this);
        }
    }
    
    /// <summary>
    /// unpivot_clause
    /// 	 : LR_BRACKET    FOR  full_column_name  IN  LR_BRACKET  full_column_name_list  RR_BRACKET  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstUnpivotClause : AstRule
    {
        
        private AstFullColumnName _fullColumnName;
        
        private AstFullColumnNameList _fullColumnNameList;
        
        public AstUnpivotClause(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnNameList>())
                {
                    this._fullColumnNameList = ((AstFullColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public AstUnpivotClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnNameList>())
                {
                    this._fullColumnNameList = ((AstFullColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullColumnName FullColumnName
        {
            get
            {
                return this._fullColumnName;
            }
        }
        
        public virtual AstFullColumnNameList FullColumnNameList
        {
            get
            {
                return this._fullColumnNameList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnpivotClause(this);
        }
    }
    
    /// <summary>
    /// full_column_name_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFullColumnNameList : AstRule
    {
        
        public AstFullColumnNameList(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstFullColumnNameList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstFullColumnNameList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullColumnNameList(this);
        }
    }
    
    /// <summary>
    /// rowset_function
    /// 	 : OPENROWSET  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | OPENROWSET  LR_BRACKET  BULK    COMMA  bulk_options id_  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRowsetFunction : AstRule
    {
        
        public AstRowsetFunction(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstRowsetFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstRowsetFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRowsetFunction(this);
        }
    }
    
    /// <summary>
    /// bulk_options
    /// 	 : bulk_option  COMMA  bulk_option*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstBulkOptions : AstRule
    {
        
        private AstBulkOption _bulkOption;
        
        public AstBulkOptions(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBulkOption>())
                {
                    this._bulkOption = ((AstBulkOption)(enumerator.Current));
                }
            }
        }
        
        public AstBulkOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBulkOption>())
                {
                    this._bulkOption = ((AstBulkOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBulkOption BulkOption
        {
            get
            {
                return this._bulkOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBulkOptions(this);
        }
    }
    
    /// <summary>
    /// bulk_option
    /// 	 : id_  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstBulkOption : AstRule
    {
        
        private AstId _id;
        
        public AstBulkOption(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstBulkOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBulkOption(this);
        }
    }
    
    /// <summary>
    /// derived_table
    /// 	 : subquery
    /// 	 | LR_BRACKET  subquery  UNION  ALL  subquery*  RR_BRACKET
    /// 	 | table_value_constructor
    /// 	 | LR_BRACKET  table_value_constructor  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDerivedTable : AstRule
    {
        
        public AstDerivedTable(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDerivedTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDerivedTable(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDerivedTable(this);
        }
    }
    
    /// <summary>
    /// function_call
    /// 	 : RANKING_WINDOWED_FUNCranking_windowed_function
    /// 	 | AGGREGATE_WINDOWED_FUNCaggregate_windowed_function
    /// 	 | ANALYTIC_WINDOWED_FUNCanalytic_windowed_function
    /// 	 | BUILT_IN_FUNCbuilt_in_functions
    /// 	 | SCALAR_FUNCTIONscalar_function_name  LR_BRACKET  expression_list?  RR_BRACKET
    /// 	 | FREE_TEXTfreetext_function
    /// 	 | PARTITION_FUNCpartition_function
    /// 	 | HIERARCHYID_METHODhierarchyid_static_method
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFunctionCall : AstRule
    {
        
        public AstFunctionCall(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstFunctionCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstFunctionCall(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFunctionCall(this);
        }
    }
    
    /// <summary>
    /// partition_function
    /// 	 : database_name  DOT?  DOLLAR_PARTITION  DOT  function_name  LR_BRACKET  expression  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstPartitionFunction : AstRule
    {
        
        private AstFunctionName _functionName;
        
        private AstExpression _expression;
        
        public AstPartitionFunction(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionName>())
                {
                    this._functionName = ((AstFunctionName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstPartitionFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionName>())
                {
                    this._functionName = ((AstFunctionName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFunctionName FunctionName
        {
            get
            {
                return this._functionName;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionFunction(this);
        }
    }
    
    /// <summary>
    /// freetext_function
    /// 	 : CONTAINSTABLE FREETEXTTABLE  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  COMMA  expression?  RR_BRACKET
    /// 	 | SEMANTICSIMILARITYTABLE SEMANTICKEYPHRASETABLE  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression  RR_BRACKET
    /// 	 | SEMANTICSIMILARITYDETAILSTABLE  LR_BRACKET  table_name  COMMA  full_column_name  COMMA  expression  COMMA  full_column_name  COMMA  expression  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFreetextFunction : AstRule
    {
        
        public AstFreetextFunction(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstFreetextFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstFreetextFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFreetextFunction(this);
        }
    }
    
    /// <summary>
    /// freetext_predicate
    /// 	 : CONTAINS  LR_BRACKET  full_column_name full_column_names STAR PROPERTY  LR_BRACKET  full_column_name  COMMA  expression  RR_BRACKET  COMMA  expression  RR_BRACKET
    /// 	 | FREETEXT  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFreetextPredicate : AstRule
    {
        
        public AstFreetextPredicate(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstFreetextPredicate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstFreetextPredicate(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFreetextPredicate(this);
        }
    }
    
    /// <summary>
    /// expression_language
    /// 	 : expression  COMMA  LANGUAGE  expression?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstExpressionLanguage : AstRule
    {
        
        private AstExpression _expression;
        
        public AstExpressionLanguage(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstExpressionLanguage(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressionLanguage(this);
        }
    }
    
    /// <summary>
    /// freetext_table_andcolumn_names
    /// 	 : table_name  COMMA  full_column_name full_column_names STAR
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFreetextTableAndcolumnNames : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstFreetextTableAndcolumnNames(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public AstFreetextTableAndcolumnNames(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFreetextTableAndcolumnNames(this);
        }
    }
    
    /// <summary>
    /// full_column_names
    /// 	 : LR_BRACKET  full_column_name  COMMA  full_column_name*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFullColumnNames : AstRule
    {
        
        private AstFullColumnName _fullColumnName;
        
        public AstFullColumnNames(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
            }
        }
        
        public AstFullColumnNames(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullColumnName FullColumnName
        {
            get
            {
                return this._fullColumnName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullColumnNames(this);
        }
    }
    
    /// <summary>
    /// built_in_functions
    /// 	 : APP_NAMEAPP_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | APPLOCK_MODEAPPLOCK_MODE  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | APPLOCK_TESTAPPLOCK_TEST  LR_BRACKET    COMMA    COMMA    COMMA    RR_BRACKET
    /// 	 | ASSEMBLYPROPERTYASSEMBLYPROPERTY  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | COL_LENGTHCOL_LENGTH  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | COL_NAMECOL_NAME  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | COLUMNPROPERTYCOLUMNPROPERTY  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | DATABASEPROPERTYEXDATABASEPROPERTYEX  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | DB_IDDB_ID  LR_BRACKET    RR_BRACKET
    /// 	 | DB_NAMEDB_NAME  LR_BRACKET    RR_BRACKET
    /// 	 | FILE_IDFILE_ID  LR_BRACKET    RR_BRACKET
    /// 	 | FILE_IDEXFILE_IDEX  LR_BRACKET    RR_BRACKET
    /// 	 | FILE_NAMEFILE_NAME  LR_BRACKET    RR_BRACKET
    /// 	 | FILEGROUP_IDFILEGROUP_ID  LR_BRACKET    RR_BRACKET
    /// 	 | FILEGROUP_NAMEFILEGROUP_NAME  LR_BRACKET    RR_BRACKET
    /// 	 | FILEGROUPPROPERTYFILEGROUPPROPERTY  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | FILEPROPERTYFILEPROPERTY  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | FILEPROPERTYEXFILEPROPERTYEX  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | FULLTEXTCATALOGPROPERTYFULLTEXTCATALOGPROPERTY  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | FULLTEXTSERVICEPROPERTYFULLTEXTSERVICEPROPERTY  LR_BRACKET    RR_BRACKET
    /// 	 | INDEX_COLINDEX_COL  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | INDEXKEY_PROPERTYINDEXKEY_PROPERTY  LR_BRACKET    COMMA    COMMA    COMMA    RR_BRACKET
    /// 	 | INDEXPROPERTYINDEXPROPERTY  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | NEXT_VALUE_FORNEXT  VALUE  FOR    OVER  LR_BRACKET  order_by_clause  RR_BRACKET?
    /// 	 | OBJECT_DEFINITIONOBJECT_DEFINITION  LR_BRACKET    RR_BRACKET
    /// 	 | OBJECT_IDOBJECT_ID  LR_BRACKET    COMMA  ?  RR_BRACKET
    /// 	 | OBJECT_NAMEOBJECT_NAME  LR_BRACKET    COMMA  ?  RR_BRACKET
    /// 	 | OBJECT_SCHEMA_NAMEOBJECT_SCHEMA_NAME  LR_BRACKET    COMMA  ?  RR_BRACKET
    /// 	 | OBJECTPROPERTYOBJECTPROPERTY  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | OBJECTPROPERTYEXOBJECTPROPERTYEX  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | ORIGINAL_DB_NAMEORIGINAL_DB_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | PARSENAMEPARSENAME  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | SCHEMA_IDSCHEMA_ID  LR_BRACKET    RR_BRACKET
    /// 	 | SCHEMA_NAMESCHEMA_NAME  LR_BRACKET    RR_BRACKET
    /// 	 | SCOPE_IDENTITYSCOPE_IDENTITY  LR_BRACKET  RR_BRACKET
    /// 	 | SERVERPROPERTYSERVERPROPERTY  LR_BRACKET    RR_BRACKET
    /// 	 | STATS_DATESTATS_DATE  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | TYPE_IDTYPE_ID  LR_BRACKET    RR_BRACKET
    /// 	 | TYPE_NAMETYPE_NAME  LR_BRACKET    RR_BRACKET
    /// 	 | TYPEPROPERTYTYPEPROPERTY  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | ASCIIASCII  LR_BRACKET    RR_BRACKET
    /// 	 | CHARCHAR  LR_BRACKET    RR_BRACKET
    /// 	 | CHARINDEXCHARINDEX  LR_BRACKET    COMMA    COMMA  ?  RR_BRACKET
    /// 	 | CONCATCONCAT  LR_BRACKET    COMMA    COMMA  *  RR_BRACKET
    /// 	 | CONCAT_WSCONCAT_WS  LR_BRACKET    COMMA    COMMA    COMMA  *  RR_BRACKET
    /// 	 | DIFFERENCEDIFFERENCE  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | FORMATFORMAT  LR_BRACKET    COMMA    COMMA  ?  RR_BRACKET
    /// 	 | LEFTLEFT  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | LENLEN  LR_BRACKET    RR_BRACKET
    /// 	 | LOWERLOWER  LR_BRACKET    RR_BRACKET
    /// 	 | LTRIMLTRIM  LR_BRACKET    RR_BRACKET
    /// 	 | NCHARNCHAR  LR_BRACKET    RR_BRACKET
    /// 	 | PATINDEXPATINDEX  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | QUOTENAMEQUOTENAME  LR_BRACKET    COMMA  ?  RR_BRACKET
    /// 	 | REPLACEREPLACE  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | REPLICATEREPLICATE  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | REVERSEREVERSE  LR_BRACKET    RR_BRACKET
    /// 	 | RIGHTRIGHT  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | RTRIMRTRIM  LR_BRACKET    RR_BRACKET
    /// 	 | SOUNDEXSOUNDEX  LR_BRACKET    RR_BRACKET
    /// 	 | SPACESPACE_KEYWORD  LR_BRACKET    RR_BRACKET
    /// 	 | STRSTR  LR_BRACKET    COMMA    COMMA  ??  RR_BRACKET
    /// 	 | STRINGAGGSTRING_AGG  LR_BRACKET    COMMA    RR_BRACKET  WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET?
    /// 	 | STRING_ESCAPESTRING_ESCAPE  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | STUFFSTUFF  LR_BRACKET    COMMA    COMMA    COMMA    RR_BRACKET
    /// 	 | SUBSTRINGSUBSTRING  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | TRANSLATETRANSLATE  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | TRIMTRIM  LR_BRACKET    FROM?    RR_BRACKET
    /// 	 | UNICODEUNICODE  LR_BRACKET    RR_BRACKET
    /// 	 | UPPERUPPER  LR_BRACKET    RR_BRACKET
    /// 	 | BINARY_CHECKSUMBINARY_CHECKSUM  LR_BRACKET   expressions  RR_BRACKET
    /// 	 | CHECKSUMCHECKSUM  LR_BRACKET   expressions  RR_BRACKET
    /// 	 | COMPRESSCOMPRESS  LR_BRACKET    RR_BRACKET
    /// 	 | CONNECTIONPROPERTYCONNECTIONPROPERTY  LR_BRACKET    RR_BRACKET
    /// 	 | CONTEXT_INFOCONTEXT_INFO  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_REQUEST_IDCURRENT_REQUEST_ID  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_TRANSACTION_IDCURRENT_TRANSACTION_ID  LR_BRACKET  RR_BRACKET
    /// 	 | DECOMPRESSDECOMPRESS  LR_BRACKET    RR_BRACKET
    /// 	 | ERROR_LINEERROR_LINE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_MESSAGEERROR_MESSAGE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_NUMBERERROR_NUMBER  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_PROCEDUREERROR_PROCEDURE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_SEVERITYERROR_SEVERITY  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_STATEERROR_STATE  LR_BRACKET  RR_BRACKET
    /// 	 | FORMATMESSAGEFORMATMESSAGE  LR_BRACKET      COMMA  expressions  RR_BRACKET
    /// 	 | GET_FILESTREAM_TRANSACTION_CONTEXTGET_FILESTREAM_TRANSACTION_CONTEXT  LR_BRACKET  RR_BRACKET
    /// 	 | GETANSINULLGETANSINULL  LR_BRACKET  ?  RR_BRACKET
    /// 	 | HOST_IDHOST_ID  LR_BRACKET  RR_BRACKET
    /// 	 | HOST_NAMEHOST_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | ISNULLISNULL  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | ISNUMERICISNUMERIC  LR_BRACKET  expression  RR_BRACKET
    /// 	 | MIN_ACTIVE_ROWVERSIONMIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET
    /// 	 | NEWIDNEWID  LR_BRACKET  RR_BRACKET
    /// 	 | NEWSEQUENTIALIDNEWSEQUENTIALID  LR_BRACKET  RR_BRACKET
    /// 	 | ROWCOUNT_BIGROWCOUNT_BIG  LR_BRACKET  RR_BRACKET
    /// 	 | SESSION_CONTEXTSESSION_CONTEXT  LR_BRACKET    RR_BRACKET
    /// 	 | XACT_STATEXACT_STATE  LR_BRACKET  RR_BRACKET
    /// 	 | CASTCAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET
    /// 	 | TRY_CASTTRY_CAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET
    /// 	 | CONVERTCONVERT  LR_BRACKET    COMMA  expression2  RR_BRACKET
    /// 	 | COALESCECOALESCE  LR_BRACKET  expression_list  RR_BRACKET
    /// 	 | CURRENT_DATECURRENT_DATE  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_TIMESTAMPCURRENT_TIMESTAMP
    /// 	 | CURRENT_USERCURRENT_USER
    /// 	 | DATEADDDATEADD  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | DATEDIFFDATEDIFF  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | DATENAMEDATENAME  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | DATEPARTDATEPART  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | GETDATEGETDATE  LR_BRACKET  RR_BRACKET
    /// 	 | GETUTCDATEGETUTCDATE  LR_BRACKET  RR_BRACKET
    /// 	 | IDENTITYIDENTITY  LR_BRACKET  data_type  COMMA  ?  COMMA  ?  RR_BRACKET
    /// 	 | MIN_ACTIVE_ROWVERSIONMIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET
    /// 	 | NULLIFNULLIF  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | SESSION_USERSESSION_USER
    /// 	 | SYSTEM_USERSYSTEM_USER
    /// 	 | USERUSER
    /// 	 | PARSEPARSE  LR_BRACKET    AS  data_type  USING  ?  RR_BRACKET
    /// 	 | XML_DATA_TYPE_FUNCxml_data_type_methods
    /// 	 | IIFIIF  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBuiltInFunctions : AstRule
    {
        
        public AstBuiltInFunctions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstBuiltInFunctions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstBuiltInFunctions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBuiltInFunctions(this);
        }
    }
    
    /// <summary>
    /// expressions
    /// 	 : expression  COMMA  expression*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstExpressions : AstRule
    {
        
        private AstExpression _expression;
        
        public AstExpressions(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstExpressions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressions(this);
        }
    }
    
    /// <summary>
    /// value_method
    /// 	 :     LR_BRACKET  RR_BRACKET  LR_BRACKET  subquery  RR_BRACKET  DOT  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstValueMethod : AstRule
    {
        
        public AstValueMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstValueMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstValueMethod(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitValueMethod(this);
        }
    }
    
    /// <summary>
    /// value_call
    /// 	 : VALUE  LR_BRACKET    COMMA    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstValueCall : AstRule
    {
        
        public AstValueCall(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstValueCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstValueCall(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitValueCall(this);
        }
    }
    
    /// <summary>
    /// query_method
    /// 	 :   LR_BRACKET  subquery  RR_BRACKET  DOT  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueryMethod : AstRule
    {
        
        public AstQueryMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstQueryMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstQueryMethod(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueryMethod(this);
        }
    }
    
    /// <summary>
    /// query_call
    /// 	 : QUERY  LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueryCall : AstRule
    {
        
        public AstQueryCall(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstQueryCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstQueryCall(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueryCall(this);
        }
    }
    
    /// <summary>
    /// exist_method
    /// 	 :   LR_BRACKET  subquery  RR_BRACKET  DOT  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExistMethod : AstRule
    {
        
        public AstExistMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExistMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExistMethod(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExistMethod(this);
        }
    }
    
    /// <summary>
    /// exist_call
    /// 	 : EXIST  LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExistCall : AstRule
    {
        
        public AstExistCall(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExistCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExistCall(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExistCall(this);
        }
    }
    
    /// <summary>
    /// modify_method
    /// 	 :   LR_BRACKET  subquery  RR_BRACKET  DOT  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstModifyMethod : AstRule
    {
        
        public AstModifyMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstModifyMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstModifyMethod(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModifyMethod(this);
        }
    }
    
    /// <summary>
    /// modify_call
    /// 	 : MODIFY  LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstModifyCall : AstRule
    {
        
        public AstModifyCall(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstModifyCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstModifyCall(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModifyCall(this);
        }
    }
    
    /// <summary>
    /// hierarchyid_call
    /// 	 : GETANCESTOR  LR_BRACKET    RR_BRACKET
    /// 	 | GETDESCENDANT  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | GETLEVEL  LR_BRACKET  RR_BRACKET
    /// 	 | ISDESCENDANTOF  LR_BRACKET    RR_BRACKET
    /// 	 | GETREPARENTEDVALUE  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | TOSTRING  LR_BRACKET  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstHierarchyidCall : AstRule
    {
        
        public AstHierarchyidCall(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstHierarchyidCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstHierarchyidCall(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitHierarchyidCall(this);
        }
    }
    
    /// <summary>
    /// hierarchyid_static_method
    /// 	 : HIERARCHYID  DOUBLE_COLON  GETROOT  LR_BRACKET  RR_BRACKET PARSE  LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstHierarchyidStaticMethod : AstRule
    {
        
        public AstHierarchyidStaticMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstHierarchyidStaticMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstHierarchyidStaticMethod(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitHierarchyidStaticMethod(this);
        }
    }
    
    /// <summary>
    /// nodes_method
    /// 	 :   LR_BRACKET  subquery  RR_BRACKET  DOT  NODES  LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstNodesMethod : AstRule
    {
        
        public AstNodesMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstNodesMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstNodesMethod(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNodesMethod(this);
        }
    }
    
    /// <summary>
    /// switch_section
    /// 	 : WHEN  expression  THEN  expression
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstSwitchSection : AstRule
    {
        
        private AstExpression _expression;
        
        public AstSwitchSection(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstSwitchSection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSwitchSection(this);
        }
    }
    
    /// <summary>
    /// switch_search_condition_section
    /// 	 : WHEN  search_condition  THEN  expression
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstSwitchSearchConditionSection : AstRule
    {
        
        private AstSearchCondition _searchCondition;
        
        private AstExpression _expression;
        
        public AstSwitchSearchConditionSection(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstSwitchSearchConditionSection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSwitchSearchConditionSection(this);
        }
    }
    
    /// <summary>
    /// as_column_alias
    /// 	 : AS?  column_alias
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAsColumnAlias : AstRule
    {
        
        private AstColumnAlias _columnAlias;
        
        public AstAsColumnAlias(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnAlias>())
                {
                    this._columnAlias = ((AstColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public AstAsColumnAlias(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnAlias>())
                {
                    this._columnAlias = ((AstColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnAlias ColumnAlias
        {
            get
            {
                return this._columnAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsColumnAlias(this);
        }
    }
    
    /// <summary>
    /// as_table_alias
    /// 	 : AS?  table_alias
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAsTableAlias : AstRule
    {
        
        private AstTableAlias _tableAlias;
        
        public AstAsTableAlias(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableAlias>())
                {
                    this._tableAlias = ((AstTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstAsTableAlias(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableAlias>())
                {
                    this._tableAlias = ((AstTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableAlias TableAlias
        {
            get
            {
                return this._tableAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsTableAlias(this);
        }
    }
    
    /// <summary>
    /// table_alias
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstTableAlias : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableAlias(this);
        }
    }
    
    /// <summary>
    /// with_table_hints
    /// 	 : WITH  LR_BRACKET    COMMA?  *  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWithTableHints : AstRule
    {
        
        public AstWithTableHints(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstWithTableHints(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstWithTableHints(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWithTableHints(this);
        }
    }
    
    /// <summary>
    /// deprecated_table_hint
    /// 	 : LR_BRACKET  table_hint  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDeprecatedTableHint : AstRule
    {
        
        private AstTableHint _tableHint;
        
        public AstDeprecatedTableHint(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableHint>())
                {
                    this._tableHint = ((AstTableHint)(enumerator.Current));
                }
            }
        }
        
        public AstDeprecatedTableHint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableHint>())
                {
                    this._tableHint = ((AstTableHint)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableHint TableHint
        {
            get
            {
                return this._tableHint;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeprecatedTableHint(this);
        }
    }
    
    /// <summary>
    /// sybase_legacy_hints
    /// 	 : sybase_legacy_hint+
    /// </summary>
    /// <remarks>
    /// Strategy : ClassList
    /// </remarks>
    public partial class AstSybaseLegacyHints : AstRuleList<AstSybaseLegacyHint>
    {
        
        public AstSybaseLegacyHints(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstSybaseLegacyHints(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSybaseLegacyHints(this);
        }
    }
    
    /// <summary>
    /// sybase_legacy_hint
    /// 	 : HOLDLOCK
    /// 	 | NOHOLDLOCK
    /// 	 | READPAST
    /// 	 | SHARED
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstSybaseLegacyHint : AstTerminal<AstSybaseLegacyHintEnum>
    {
        
        public AstSybaseLegacyHint(ITerminalNode t, string value) : 
                base(t, AstSybaseLegacyHint.GetValue(value))
        {
        }
        
        public AstSybaseLegacyHint(ITerminalNode t, AstSybaseLegacyHintEnum value) : 
                base(t, value)
        {
        }
        
        public AstSybaseLegacyHint(ParserRuleContext ctx, string value) : 
                base(ctx, AstSybaseLegacyHint.GetValue(value))
        {
        }
        
        public AstSybaseLegacyHint(Position p, string value) : 
                base(p, AstSybaseLegacyHint.GetValue(value))
        {
        }
        
        public AstSybaseLegacyHint(Position p, AstSybaseLegacyHintEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSybaseLegacyHint(this);
        }
        
        protected static AstSybaseLegacyHintEnum GetValue(string value)
        {
            if ((value == "HOLDLOCK"))
            {
                return AstSybaseLegacyHintEnum.Holdlock;
            }
            if ((value == "NOHOLDLOCK"))
            {
                return AstSybaseLegacyHintEnum.Noholdlock;
            }
            if ((value == "READPAST"))
            {
                return AstSybaseLegacyHintEnum.Readpast;
            }
            if ((value == "SHARED"))
            {
                return AstSybaseLegacyHintEnum.Shared;
            }
            return AstSybaseLegacyHintEnum._undefined;
        }
    }
    
    /// <summary>
    /// index_values
    /// 	 : index_value  COMMA  index_value*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstIndexValues : AstRule
    {
        
        private AstIndexValue _indexValue;
        
        public AstIndexValues(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexValue>())
                {
                    this._indexValue = ((AstIndexValue)(enumerator.Current));
                }
            }
        }
        
        public AstIndexValues(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexValue>())
                {
                    this._indexValue = ((AstIndexValue)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexValue IndexValue
        {
            get
            {
                return this._indexValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIndexValues(this);
        }
    }
    
    /// <summary>
    /// table_hint
    /// 	 : NOEXPAND
    /// 	 | INDEX  LR_BRACKET  index_values  RR_BRACKET EQUAL  LR_BRACKET  index_value  RR_BRACKET EQUAL  index_value
    /// 	 | FORCESEEK  LR_BRACKET  index_value  LR_BRACKET  column_name_list  RR_BRACKET  RR_BRACKET?
    /// 	 | FORCESCAN
    /// 	 | HOLDLOCK
    /// 	 | NOLOCK
    /// 	 | NOWAIT
    /// 	 | PAGLOCK
    /// 	 | READCOMMITTED
    /// 	 | READCOMMITTEDLOCK
    /// 	 | READPAST
    /// 	 | READUNCOMMITTED
    /// 	 | REPEATABLEREAD
    /// 	 | ROWLOCK
    /// 	 | SERIALIZABLE
    /// 	 | SNAPSHOT
    /// 	 | SPATIAL_WINDOW_MAX_CELLS  EQUAL  DECIMAL
    /// 	 | TABLOCK
    /// 	 | TABLOCKX
    /// 	 | UPDLOCK
    /// 	 | XLOCK
    /// 	 | KEEPIDENTITY
    /// 	 | KEEPDEFAULTS
    /// 	 | IGNORE_CONSTRAINTS
    /// 	 | IGNORE_TRIGGERS
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableHint : AstRule
    {
        
        public AstTableHint(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableHint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableHint(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableHint(this);
        }
    }
    
    /// <summary>
    /// index_value
    /// 	 : id_
    /// 	 | DECIMAL
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstIndexValue : AstRule
    {
        
        public AstIndexValue(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstIndexValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstIndexValue(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIndexValue(this);
        }
    }
    
    /// <summary>
    /// column_alias_list
    /// 	 : LR_BRACKET    COMMA  *  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnAliasList : AstRule
    {
        
        public AstColumnAliasList(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstColumnAliasList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstColumnAliasList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnAliasList(this);
        }
    }
    
    /// <summary>
    /// column_alias
    /// 	 : id_
    /// 	 | STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnAlias : AstRule
    {
        
        public AstColumnAlias(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstColumnAlias(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstColumnAlias(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnAlias(this);
        }
    }
    
    /// <summary>
    /// table_value_constructor
    /// 	 : VALUES  LR_BRACKET    RR_BRACKET  COMMA  LR_BRACKET    RR_BRACKET*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableValueConstructor : AstRule
    {
        
        public AstTableValueConstructor(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableValueConstructor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableValueConstructor(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableValueConstructor(this);
        }
    }
    
    /// <summary>
    /// expression_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExpressionList : AstRule
    {
        
        public AstExpressionList(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExpressionList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExpressionList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressionList(this);
        }
    }
    
    /// <summary>
    /// ranking_windowed_function
    /// 	 : RANK DENSE_RANK ROW_NUMBER  LR_BRACKET  RR_BRACKET  over_clause
    /// 	 | NTILE  LR_BRACKET  expression  RR_BRACKET  over_clause
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRankingWindowedFunction : AstRule
    {
        
        public AstRankingWindowedFunction(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstRankingWindowedFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstRankingWindowedFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRankingWindowedFunction(this);
        }
    }
    
    /// <summary>
    /// aggregate_windowed_function
    /// 	 :   LR_BRACKET  all_distinct_expression  RR_BRACKET  over_clause?
    /// 	 |   LR_BRACKET  STAR all_distinct_expression  RR_BRACKET  over_clause?
    /// 	 | CHECKSUM_AGG  LR_BRACKET  all_distinct_expression  RR_BRACKET
    /// 	 | GROUPING  LR_BRACKET  expression  RR_BRACKET
    /// 	 | GROUPING_ID  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAggregateWindowedFunction : AstRule
    {
        
        public AstAggregateWindowedFunction(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAggregateWindowedFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAggregateWindowedFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAggregateWindowedFunction(this);
        }
    }
    
    /// <summary>
    /// analytic_windowed_function
    /// 	 : FIRST_VALUE LAST_VALUE  LR_BRACKET  expression  RR_BRACKET  over_clause
    /// 	 | LAG LEAD  LR_BRACKET  expression  COMMA  expression2?  RR_BRACKET  over_clause
    /// 	 | CUME_DIST PERCENT_RANK  LR_BRACKET  RR_BRACKET  OVER  LR_BRACKET  PARTITION  BY  expression_list?  order_by_clause  RR_BRACKET
    /// 	 | PERCENTILE_CONT PERCENTILE_DISC  LR_BRACKET  expression  RR_BRACKET  WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET  OVER  LR_BRACKET  PARTITION  BY  expression_list?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAnalyticWindowedFunction : AstRule
    {
        
        public AstAnalyticWindowedFunction(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAnalyticWindowedFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAnalyticWindowedFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAnalyticWindowedFunction(this);
        }
    }
    
    /// <summary>
    /// all_distinct_expression
    /// 	 : ALL DISTINCT?  expression
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAllDistinctExpression : AstRule
    {
        
        private AstExpression _expression;
        
        public AstAllDistinctExpression(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstAllDistinctExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAllDistinctExpression(this);
        }
    }
    
    /// <summary>
    /// over_clause
    /// 	 : OVER  LR_BRACKET  PARTITION  BY  expression_list?  order_by_clause?  row_or_range_clause?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstOverClause : AstRule
    {
        
        private AstOrderByClause _orderByClause;
        
        private AstRowOrRangeClause _rowOrRangeClause;
        
        public AstOverClause(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOrderByClause>())
                {
                    this._orderByClause = ((AstOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowOrRangeClause>())
                {
                    this._rowOrRangeClause = ((AstRowOrRangeClause)(enumerator.Current));
                }
            }
        }
        
        public AstOverClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOrderByClause>())
                {
                    this._orderByClause = ((AstOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowOrRangeClause>())
                {
                    this._rowOrRangeClause = ((AstRowOrRangeClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOrderByClause OrderByClause
        {
            get
            {
                return this._orderByClause;
            }
        }
        
        public virtual AstRowOrRangeClause RowOrRangeClause
        {
            get
            {
                return this._rowOrRangeClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOverClause(this);
        }
    }
    
    /// <summary>
    /// row_or_range_clause
    /// 	 : ROWS RANGE  window_frame_extent
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstRowOrRangeClause : AstRule
    {
        
        private AstWindowFrameExtent _windowFrameExtent;
        
        public AstRowOrRangeClause(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWindowFrameExtent>())
                {
                    this._windowFrameExtent = ((AstWindowFrameExtent)(enumerator.Current));
                }
            }
        }
        
        public AstRowOrRangeClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWindowFrameExtent>())
                {
                    this._windowFrameExtent = ((AstWindowFrameExtent)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWindowFrameExtent WindowFrameExtent
        {
            get
            {
                return this._windowFrameExtent;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRowOrRangeClause(this);
        }
    }
    
    /// <summary>
    /// window_frame_extent
    /// 	 : window_frame_preceding
    /// 	 | BETWEEN  window_frame_bound  AND  window_frame_bound
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWindowFrameExtent : AstRule
    {
        
        public AstWindowFrameExtent(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstWindowFrameExtent(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstWindowFrameExtent(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWindowFrameExtent(this);
        }
    }
    
    /// <summary>
    /// window_frame_preceding
    /// 	 : UNBOUNDED  PRECEDING
    /// 	 | DECIMAL  PRECEDING
    /// 	 | CURRENT  ROW
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWindowFramePreceding : AstRule
    {
        
        public AstWindowFramePreceding(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstWindowFramePreceding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstWindowFramePreceding(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWindowFramePreceding(this);
        }
    }
    
    /// <summary>
    /// window_frame_following
    /// 	 : UNBOUNDED  FOLLOWING
    /// 	 | DECIMAL  FOLLOWING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWindowFrameFollowing : AstRule
    {
        
        public AstWindowFrameFollowing(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstWindowFrameFollowing(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstWindowFrameFollowing(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWindowFrameFollowing(this);
        }
    }
    
    /// <summary>
    /// create_database_option
    /// 	 : FILESTREAM  database_filestream_options
    /// 	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
    /// 	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
    /// 	 | NESTED_TRIGGERS  EQUAL  on_off
    /// 	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
    /// 	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  DECIMAL
    /// 	 | DB_CHAINING  on_off
    /// 	 | TRUSTWORTHY  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateDatabaseOption : AstRule
    {
        
        public AstCreateDatabaseOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateDatabaseOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateDatabaseOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateDatabaseOption(this);
        }
    }
    
    /// <summary>
    /// database_filestream_options
    /// 	 : database_filestream_option  COMMA  database_filestream_option*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDatabaseFilestreamOptions : AstRule
    {
        
        private AstDatabaseFilestreamOption _databaseFilestreamOption;
        
        public AstDatabaseFilestreamOptions(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseFilestreamOption>())
                {
                    this._databaseFilestreamOption = ((AstDatabaseFilestreamOption)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseFilestreamOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseFilestreamOption>())
                {
                    this._databaseFilestreamOption = ((AstDatabaseFilestreamOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseFilestreamOption DatabaseFilestreamOption
        {
            get
            {
                return this._databaseFilestreamOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseFilestreamOptions(this);
        }
    }
    
    /// <summary>
    /// database_filestream_option
    /// 	 : LR_BRACKET  NON_TRANSACTED_ACCESS  EQUAL  OFF READ_ONLY FULL DIRECTORY_NAME  EQUAL  STRING  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDatabaseFilestreamOption : AstRule
    {
        
        public AstDatabaseFilestreamOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDatabaseFilestreamOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDatabaseFilestreamOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseFilestreamOption(this);
        }
    }
    
    /// <summary>
    /// file_group
    /// 	 : FILEGROUP  id_  CONTAINS  FILESTREAM?  DEFAULT?  CONTAINS  MEMORY_OPTIMIZED_DATA?  file_spec  COMMA  file_spec*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFileGroup : AstRule
    {
        
        private AstId _id;
        
        private AstFileSpec _fileSpec;
        
        public AstFileGroup(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpec>())
                {
                    this._fileSpec = ((AstFileSpec)(enumerator.Current));
                }
            }
        }
        
        public AstFileGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpec>())
                {
                    this._fileSpec = ((AstFileSpec)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstFileSpec FileSpec
        {
            get
            {
                return this._fileSpec;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileGroup(this);
        }
    }
    
    /// <summary>
    /// file_spec
    /// 	 : LR_BRACKET  NAME  EQUAL  id_or_string  COMMA?  FILENAME  EQUAL    COMMA?  SIZE  EQUAL  file_size  COMMA??  MAXSIZE  EQUAL  file_size UNLIMITED  COMMA??  FILEGROWTH  EQUAL  file_size  COMMA??  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFileSpec : AstRule
    {
        
        private AstIdOrString _idOrString;
        
        public AstFileSpec(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIdOrString>())
                {
                    this._idOrString = ((AstIdOrString)(enumerator.Current));
                }
            }
        }
        
        public AstFileSpec(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIdOrString>())
                {
                    this._idOrString = ((AstIdOrString)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIdOrString IdOrString
        {
            get
            {
                return this._idOrString;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileSpec(this);
        }
    }
    
    /// <summary>
    /// entity_name
    /// 	 : server_name  DOT  database_name  DOT  schema_name  DOT database_name  DOT  schema_name?  DOT schema_name  DOT?  tableName
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstEntityName : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstEntityName(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public AstEntityName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEntityName(this);
        }
    }
    
    /// <summary>
    /// entity_name_for_azure_dw
    /// 	 : schema_name
    /// 	 | schema_name  DOT  object_name
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEntityNameForAzureDw : AstRule
    {
        
        public AstEntityNameForAzureDw(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstEntityNameForAzureDw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstEntityNameForAzureDw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEntityNameForAzureDw(this);
        }
    }
    
    /// <summary>
    /// entity_name_for_parallel_dw
    /// 	 : 
    /// 	 | schema_name  DOT  object_name
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEntityNameForParallelDw : AstRule
    {
        
        public AstEntityNameForParallelDw(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstEntityNameForParallelDw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstEntityNameForParallelDw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEntityNameForParallelDw(this);
        }
    }
    
    /// <summary>
    /// full_table_name
    /// 	 : linked_server  DOT  DOT  schema_name  DOT server_name  DOT  database_name  DOT  schema_name  DOT database_name  DOT  schema_name?  DOT schema_name  DOT?  tableName
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFullTableName : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstFullTableName(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public AstFullTableName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullTableName(this);
        }
    }
    
    /// <summary>
    /// table_name
    /// 	 : database_name  DOT  schema_name?  DOT schema_name  DOT?  tableName
    /// 	 | database_name  DOT  schema_name?  DOT schema_name  DOT?  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableName : AstRule
    {
        
        public AstTableName(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableName(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableName(this);
        }
    }
    
    /// <summary>
    /// simple_name
    /// 	 : schema_name  DOT?  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSimpleName : AstRule
    {
        
        public AstSimpleName(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSimpleName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSimpleName(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSimpleName(this);
        }
    }
    
    /// <summary>
    /// func_proc_name_schema
    /// 	 : schema_name  DOT?  function_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFuncProcNameSchema : AstRule
    {
        
        private AstFunctionName _functionName;
        
        public AstFuncProcNameSchema(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionName>())
                {
                    this._functionName = ((AstFunctionName)(enumerator.Current));
                }
            }
        }
        
        public AstFuncProcNameSchema(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionName>())
                {
                    this._functionName = ((AstFunctionName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFunctionName FunctionName
        {
            get
            {
                return this._functionName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncProcNameSchema(this);
        }
    }
    
    /// <summary>
    /// func_proc_name_database_schema
    /// 	 : database_name?  DOT  schema_name?  DOT  function_name
    /// 	 | func_proc_name_schema
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFuncProcNameDatabaseSchema : AstRule
    {
        
        public AstFuncProcNameDatabaseSchema(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstFuncProcNameDatabaseSchema(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstFuncProcNameDatabaseSchema(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncProcNameDatabaseSchema(this);
        }
    }
    
    /// <summary>
    /// func_proc_name_server_database_schema
    /// 	 : server_name?  DOT  database_name?  DOT  schema_name?  DOT  function_name
    /// 	 | func_proc_name_database_schema
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFuncProcNameServerDatabaseSchema : AstRule
    {
        
        public AstFuncProcNameServerDatabaseSchema(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstFuncProcNameServerDatabaseSchema(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstFuncProcNameServerDatabaseSchema(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncProcNameServerDatabaseSchema(this);
        }
    }
    
    /// <summary>
    /// ddl_object
    /// 	 : full_table_name
    /// 	 | LOCAL_ID
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDdlObject : AstRule
    {
        
        public AstDdlObject(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDdlObject(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDdlObject(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDdlObject(this);
        }
    }
    
    /// <summary>
    /// full_column_name
    /// 	 : DELETED INSERTED  DOT  column_name
    /// 	 | server_name?  DOT  schema_name?  DOT  tableName?  DOT  column_name
    /// 	 | schema_name?  DOT  tableName?  DOT  column_name
    /// 	 | tableName?  DOT  column_name
    /// 	 | column_name
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFullColumnName : AstRule
    {
        
        public AstFullColumnName(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstFullColumnName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstFullColumnName(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullColumnName(this);
        }
    }
    
    /// <summary>
    /// column_name_list_with_order
    /// 	 : id_  ASC DESC?  COMMA  id_  ASC DESC?*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstColumnNameListWithOrder : AstRule
    {
        
        private AstId _id;
        
        public AstColumnNameListWithOrder(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstColumnNameListWithOrder(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnNameListWithOrder(this);
        }
    }
    
    /// <summary>
    /// insert_column_name_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstInsertColumnNameList : AstRule
    {
        
        public AstInsertColumnNameList(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstInsertColumnNameList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstInsertColumnNameList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitInsertColumnNameList(this);
        }
    }
    
    /// <summary>
    /// insert_column_id
    /// 	 :   DOT*  id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstInsertColumnId : AstRule
    {
        
        private AstId _id;
        
        public AstInsertColumnId(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstInsertColumnId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitInsertColumnId(this);
        }
    }
    
    /// <summary>
    /// column_name_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnNameList : AstRule
    {
        
        public AstColumnNameList(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstColumnNameList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstColumnNameList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnNameList(this);
        }
    }
    
    /// <summary>
    /// cursor_name
    /// 	 : id_
    /// 	 | LOCAL_ID
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCursorName : AstRule
    {
        
        public AstCursorName(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCursorName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCursorName(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCursorName(this);
        }
    }
    
    /// <summary>
    /// on_off
    /// 	 : ON
    /// 	 | OFF
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstOnOff : AstTerminal<AstOnOffEnum>
    {
        
        public AstOnOff(ITerminalNode t, string value) : 
                base(t, AstOnOff.GetValue(value))
        {
        }
        
        public AstOnOff(ITerminalNode t, AstOnOffEnum value) : 
                base(t, value)
        {
        }
        
        public AstOnOff(ParserRuleContext ctx, string value) : 
                base(ctx, AstOnOff.GetValue(value))
        {
        }
        
        public AstOnOff(Position p, string value) : 
                base(p, AstOnOff.GetValue(value))
        {
        }
        
        public AstOnOff(Position p, AstOnOffEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnOff(this);
        }
        
        protected static AstOnOffEnum GetValue(string value)
        {
            if ((value == "ON"))
            {
                return AstOnOffEnum.On;
            }
            if ((value == "OFF"))
            {
                return AstOnOffEnum.Off;
            }
            return AstOnOffEnum._undefined;
        }
    }
    
    /// <summary>
    /// clustered
    /// 	 : CLUSTERED
    /// 	 | NONCLUSTERED
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstClustered : AstTerminal<AstClusteredEnum>
    {
        
        public AstClustered(ITerminalNode t, string value) : 
                base(t, AstClustered.GetValue(value))
        {
        }
        
        public AstClustered(ITerminalNode t, AstClusteredEnum value) : 
                base(t, value)
        {
        }
        
        public AstClustered(ParserRuleContext ctx, string value) : 
                base(ctx, AstClustered.GetValue(value))
        {
        }
        
        public AstClustered(Position p, string value) : 
                base(p, AstClustered.GetValue(value))
        {
        }
        
        public AstClustered(Position p, AstClusteredEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClustered(this);
        }
        
        protected static AstClusteredEnum GetValue(string value)
        {
            if ((value == "CLUSTERED"))
            {
                return AstClusteredEnum.Clustered;
            }
            if ((value == "NONCLUSTERED"))
            {
                return AstClusteredEnum.Nonclustered;
            }
            return AstClusteredEnum._undefined;
        }
    }
    
    /// <summary>
    /// null_notnull
    /// 	 : NOT?  NULL_
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstNullNotnull : AstRule
    {
        
        public AstNullNotnull(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstNullNotnull(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstNullNotnull(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNullNotnull(this);
        }
    }
    
    /// <summary>
    /// null_or_default
    /// 	 : null_notnull DEFAULT  constant_expression  COLLATE  id_?  WITH  VALUES?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstNullOrDefault : AstRule
    {
        
        public AstNullOrDefault(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstNullOrDefault(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstNullOrDefault(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNullOrDefault(this);
        }
    }
    
    /// <summary>
    /// scalar_function_name
    /// 	 : func_proc_name_server_database_schema
    /// 	 | RIGHT
    /// 	 | LEFT
    /// 	 | BINARY_CHECKSUM
    /// 	 | CHECKSUM
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstScalarFunctionName : AstRule
    {
        
        public AstScalarFunctionName(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstScalarFunctionName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstScalarFunctionName(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitScalarFunctionName(this);
        }
    }
    
    /// <summary>
    /// begin_conversation_timer
    /// 	 : BEGIN  CONVERSATION  TIMER  LR_BRACKET  LOCAL_ID  RR_BRACKET  TIMEOUT  EQUAL  time  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstBeginConversationTimer : AstRule
    {
        
        private AstTime _time;
        
        public AstBeginConversationTimer(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTime>())
                {
                    this._time = ((AstTime)(enumerator.Current));
                }
            }
        }
        
        public AstBeginConversationTimer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTime>())
                {
                    this._time = ((AstTime)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTime Time
        {
            get
            {
                return this._time;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBeginConversationTimer(this);
        }
    }
    
    /// <summary>
    /// begin_conversation_dialog
    /// 	 : BEGIN  DIALOG  CONVERSATION?    FROM  SERVICE    TO  SERVICE    COMMA  ?  ON  CONTRACT  contract_name  WITH  RELATED_CONVERSATION RELATED_CONVERSATION_GROUP  EQUAL  LOCAL_ID  COMMA??  LIFETIME  EQUAL  DECIMAL LOCAL_ID  COMMA??  ENCRYPTION  EQUAL  on_off??  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstBeginConversationDialog : AstRule
    {
        
        private AstContractName _contractName;
        
        public AstBeginConversationDialog(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContractName>())
                {
                    this._contractName = ((AstContractName)(enumerator.Current));
                }
            }
        }
        
        public AstBeginConversationDialog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContractName>())
                {
                    this._contractName = ((AstContractName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstContractName ContractName
        {
            get
            {
                return this._contractName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBeginConversationDialog(this);
        }
    }
    
    /// <summary>
    /// contract_name
    /// 	 : id_ expression
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstContractName : AstRule
    {
        
        public AstContractName(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstContractName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstContractName(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContractName(this);
        }
    }
    
    /// <summary>
    /// service_name
    /// 	 : id_ expression
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstServiceName : AstRule
    {
        
        public AstServiceName(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstServiceName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstServiceName(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServiceName(this);
        }
    }
    
    /// <summary>
    /// end_conversation
    /// 	 : END  CONVERSATION    SEMI?  WITH  ERROR  EQUAL    DESCRIPTION  EQUAL  ?  CLEANUP??
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEndConversation : AstRule
    {
        
        public AstEndConversation(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstEndConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstEndConversation(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEndConversation(this);
        }
    }
    
    /// <summary>
    /// waitfor_conversation
    /// 	 : WAITFOR?  LR_BRACKET  get_conversation  RR_BRACKET  COMMA?  TIMEOUT  ?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstWaitforConversation : AstRule
    {
        
        private AstGetConversation _getConversation;
        
        public AstWaitforConversation(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGetConversation>())
                {
                    this._getConversation = ((AstGetConversation)(enumerator.Current));
                }
            }
        }
        
        public AstWaitforConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGetConversation>())
                {
                    this._getConversation = ((AstGetConversation)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGetConversation GetConversation
        {
            get
            {
                return this._getConversation;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWaitforConversation(this);
        }
    }
    
    /// <summary>
    /// get_conversation
    /// 	 : GET  CONVERSATION  GROUP    FROM    SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGetConversation : AstRule
    {
        
        public AstGetConversation(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstGetConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstGetConversation(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGetConversation(this);
        }
    }
    
    /// <summary>
    /// queue_id
    /// 	 : database_name  DOT  schema_name  DOT  queue_name
    /// 	 | id_
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueueId : AstRule
    {
        
        public AstQueueId(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstQueueId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstQueueId(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueId(this);
        }
    }
    
    /// <summary>
    /// send_conversation
    /// 	 : SEND  ON  CONVERSATION    MESSAGE  TYPE    LR_BRACKET    RR_BRACKET?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSendConversation : AstRule
    {
        
        public AstSendConversation(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSendConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSendConversation(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSendConversation(this);
        }
    }
    
    /// <summary>
    /// data_type
    /// 	 :   LR_BRACKET  MAX  RR_BRACKET
    /// 	 | ext_type  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | ext_type  LR_BRACKET    RR_BRACKET
    /// 	 | ext_type  IDENTITY  LR_BRACKET    COMMA    RR_BRACKET?
    /// 	 |   PRECISION?
    /// 	 | unscaled_type
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDataType : AstRule
    {
        
        public AstDataType(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDataType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDataType(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDataType(this);
        }
    }
    
    /// <summary>
    /// default_value
    /// 	 : NULL_
    /// 	 | DEFAULT
    /// 	 | constant
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDefaultValue : AstRule
    {
        
        public AstDefaultValue(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDefaultValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDefaultValue(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDefaultValue(this);
        }
    }
    
    /// <summary>
    /// constant
    /// 	 : STRING
    /// 	 | BINARY
    /// 	 | sign?  DECIMAL
    /// 	 | sign?  REAL FLOAT
    /// 	 | sign?    DECIMAL FLOAT
    /// 	 | parameter
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstConstant : AstRule
    {
        
        public AstConstant(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstConstant(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstConstant(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConstant(this);
        }
    }
    
    /// <summary>
    /// sign
    /// 	 : PLUS
    /// 	 | MINUS
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstSign : AstTerminal<AstSignEnum>
    {
        
        public AstSign(ITerminalNode t, string value) : 
                base(t, AstSign.GetValue(value))
        {
        }
        
        public AstSign(ITerminalNode t, AstSignEnum value) : 
                base(t, value)
        {
        }
        
        public AstSign(ParserRuleContext ctx, string value) : 
                base(ctx, AstSign.GetValue(value))
        {
        }
        
        public AstSign(Position p, string value) : 
                base(p, AstSign.GetValue(value))
        {
        }
        
        public AstSign(Position p, AstSignEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSign(this);
        }
        
        protected static AstSignEnum GetValue(string value)
        {
            if ((value == "PLUS"))
            {
                return AstSignEnum.Plus;
            }
            if ((value == "MINUS"))
            {
                return AstSignEnum.Minus;
            }
            return AstSignEnum._undefined;
        }
    }
    
    /// <summary>
    /// keyword
    /// 	 : ABORT
    /// 	 | ABSOLUTE
    /// 	 | ACCENT_SENSITIVITY
    /// 	 | ACCESS
    /// 	 | ACTION
    /// 	 | ACTIVATION
    /// 	 | ACTIVE
    /// 	 | ADD
    /// 	 | ADDRESS
    /// 	 | AES_128
    /// 	 | AES_192
    /// 	 | AES_256
    /// 	 | AFFINITY
    /// 	 | AFTER
    /// 	 | AGGREGATE
    /// 	 | ALGORITHM
    /// 	 | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS
    /// 	 | ALLOW_PAGE_LOCKS
    /// 	 | ALLOW_ROW_LOCKS
    /// 	 | ALLOW_SNAPSHOT_ISOLATION
    /// 	 | ALLOWED
    /// 	 | ALWAYS
    /// 	 | ANSI_DEFAULTS
    /// 	 | ANSI_NULL_DEFAULT
    /// 	 | ANSI_NULL_DFLT_OFF
    /// 	 | ANSI_NULL_DFLT_ON
    /// 	 | ANSI_NULLS
    /// 	 | ANSI_PADDING
    /// 	 | ANSI_WARNINGS
    /// 	 | APP_NAME
    /// 	 | APPLICATION_LOG
    /// 	 | APPLOCK_MODE
    /// 	 | APPLOCK_TEST
    /// 	 | APPLY
    /// 	 | ARITHABORT
    /// 	 | ARITHIGNORE
    /// 	 | ASCII
    /// 	 | ASSEMBLY
    /// 	 | ASSEMBLYPROPERTY
    /// 	 | AT_KEYWORD
    /// 	 | AUDIT
    /// 	 | AUDIT_GUID
    /// 	 | AUTO
    /// 	 | AUTO_CLEANUP
    /// 	 | AUTO_CLOSE
    /// 	 | AUTO_CREATE_STATISTICS
    /// 	 | AUTO_DROP
    /// 	 | AUTO_SHRINK
    /// 	 | AUTO_UPDATE_STATISTICS
    /// 	 | AUTO_UPDATE_STATISTICS_ASYNC
    /// 	 | AUTOGROW_ALL_FILES
    /// 	 | AUTOGROW_SINGLE_FILE
    /// 	 | AVAILABILITY
    /// 	 | AVG
    /// 	 | BACKUP_PRIORITY
    /// 	 | BASE64
    /// 	 | BEGIN_DIALOG
    /// 	 | BIGINT
    /// 	 | BINARY_KEYWORD
    /// 	 | BINARY_CHECKSUM
    /// 	 | BINDING
    /// 	 | BLOB_STORAGE
    /// 	 | BROKER
    /// 	 | BROKER_INSTANCE
    /// 	 | BULK_LOGGED
    /// 	 | CALLER
    /// 	 | CAP_CPU_PERCENT
    /// 	 | CAST
    /// 	 | TRY_CAST
    /// 	 | CATALOG
    /// 	 | CATCH
    /// 	 | CHANGE
    /// 	 | CHANGE_RETENTION
    /// 	 | CHANGE_TRACKING
    /// 	 | CHAR
    /// 	 | CHARINDEX
    /// 	 | CHECKSUM
    /// 	 | CHECKSUM_AGG
    /// 	 | CLEANUP
    /// 	 | COL_LENGTH
    /// 	 | COL_NAME
    /// 	 | COLLECTION
    /// 	 | COLUMN_ENCRYPTION_KEY
    /// 	 | COLUMN_MASTER_KEY
    /// 	 | COLUMNPROPERTY
    /// 	 | COLUMNS
    /// 	 | COLUMNSTORE
    /// 	 | COLUMNSTORE_ARCHIVE
    /// 	 | COMMITTED
    /// 	 | COMPATIBILITY_LEVEL
    /// 	 | COMPRESS_ALL_ROW_GROUPS
    /// 	 | COMPRESSION_DELAY
    /// 	 | CONCAT
    /// 	 | CONCAT_WS
    /// 	 | CONCAT_NULL_YIELDS_NULL
    /// 	 | CONTENT
    /// 	 | CONTROL
    /// 	 | COOKIE
    /// 	 | COUNT
    /// 	 | COUNT_BIG
    /// 	 | COUNTER
    /// 	 | CPU
    /// 	 | CREATE_NEW
    /// 	 | CREATION_DISPOSITION
    /// 	 | CREDENTIAL
    /// 	 | CRYPTOGRAPHIC
    /// 	 | CUME_DIST
    /// 	 | CURSOR_CLOSE_ON_COMMIT
    /// 	 | CURSOR_DEFAULT
    /// 	 | DATA
    /// 	 | DATABASE_PRINCIPAL_ID
    /// 	 | DATABASEPROPERTYEX
    /// 	 | DATE_CORRELATION_OPTIMIZATION
    /// 	 | DATEADD
    /// 	 | DATEDIFF
    /// 	 | DATENAME
    /// 	 | DATEPART
    /// 	 | DAYS
    /// 	 | DB_CHAINING
    /// 	 | DB_FAILOVER
    /// 	 | DB_ID
    /// 	 | DB_NAME
    /// 	 | DECRYPTION
    /// 	 | DEFAULT_DOUBLE_QUOTE
    /// 	 | DEFAULT_FULLTEXT_LANGUAGE
    /// 	 | DEFAULT_LANGUAGE
    /// 	 | DEFINITION
    /// 	 | DELAY
    /// 	 | DELAYED_DURABILITY
    /// 	 | DELETED
    /// 	 | DENSE_RANK
    /// 	 | DEPENDENTS
    /// 	 | DES
    /// 	 | DESCRIPTION
    /// 	 | DESX
    /// 	 | DETERMINISTIC
    /// 	 | DHCP
    /// 	 | DIALOG
    /// 	 | DIFFERENCE
    /// 	 | DIRECTORY_NAME
    /// 	 | DISABLE
    /// 	 | DISABLE_BROKER
    /// 	 | DISABLED
    /// 	 | DOCUMENT
    /// 	 | DROP_EXISTING
    /// 	 | DYNAMIC
    /// 	 | ELEMENTS
    /// 	 | EMERGENCY
    /// 	 | EMPTY
    /// 	 | ENABLE
    /// 	 | ENABLE_BROKER
    /// 	 | ENCRYPTED
    /// 	 | ENCRYPTED_VALUE
    /// 	 | ENCRYPTION
    /// 	 | ENCRYPTION_TYPE
    /// 	 | ENDPOINT_URL
    /// 	 | ERROR_BROKER_CONVERSATIONS
    /// 	 | EXCLUSIVE
    /// 	 | EXECUTABLE
    /// 	 | EXIST
    /// 	 | EXPAND
    /// 	 | EXPIRY_DATE
    /// 	 | EXPLICIT
    /// 	 | FAIL_OPERATION
    /// 	 | FAILOVER_MODE
    /// 	 | FAILURE
    /// 	 | FAILURE_CONDITION_LEVEL
    /// 	 | FAST
    /// 	 | FAST_FORWARD
    /// 	 | FILE_ID
    /// 	 | FILE_IDEX
    /// 	 | FILE_NAME
    /// 	 | FILEGROUP
    /// 	 | FILEGROUP_ID
    /// 	 | FILEGROUP_NAME
    /// 	 | FILEGROUPPROPERTY
    /// 	 | FILEGROWTH
    /// 	 | FILENAME
    /// 	 | FILEPATH
    /// 	 | FILEPROPERTY
    /// 	 | FILEPROPERTYEX
    /// 	 | FILESTREAM
    /// 	 | FILTER
    /// 	 | FIRST
    /// 	 | FIRST_VALUE
    /// 	 | FMTONLY
    /// 	 | FOLLOWING
    /// 	 | FORCE
    /// 	 | FORCE_FAILOVER_ALLOW_DATA_LOSS
    /// 	 | FORCED
    /// 	 | FORCEPLAN
    /// 	 | FORCESCAN
    /// 	 | FORMAT
    /// 	 | FORWARD_ONLY
    /// 	 | FULLSCAN
    /// 	 | FULLTEXT
    /// 	 | FULLTEXTCATALOGPROPERTY
    /// 	 | FULLTEXTSERVICEPROPERTY
    /// 	 | GB
    /// 	 | GENERATED
    /// 	 | GETDATE
    /// 	 | GETUTCDATE
    /// 	 | GLOBAL
    /// 	 | GO
    /// 	 | GROUP_MAX_REQUESTS
    /// 	 | GROUPING
    /// 	 | GROUPING_ID
    /// 	 | HADR
    /// 	 | HASH
    /// 	 | HEALTH_CHECK_TIMEOUT
    /// 	 | HIDDEN_KEYWORD
    /// 	 | HIGH
    /// 	 | HONOR_BROKER_PRIORITY
    /// 	 | HOURS
    /// 	 | IDENTITY_VALUE
    /// 	 | IGNORE_CONSTRAINTS
    /// 	 | IGNORE_DUP_KEY
    /// 	 | IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX
    /// 	 | IGNORE_TRIGGERS
    /// 	 | IMMEDIATE
    /// 	 | IMPERSONATE
    /// 	 | IMPLICIT_TRANSACTIONS
    /// 	 | IMPORTANCE
    /// 	 | INCLUDE_NULL_VALUES
    /// 	 | INCREMENTAL
    /// 	 | INDEX_COL
    /// 	 | INDEXKEY_PROPERTY
    /// 	 | INDEXPROPERTY
    /// 	 | INITIATOR
    /// 	 | INPUT
    /// 	 | INSENSITIVE
    /// 	 | INSERTED
    /// 	 | INT
    /// 	 | IP
    /// 	 | ISOLATION
    /// 	 | JOB
    /// 	 | JSON
    /// 	 | KB
    /// 	 | KEEP
    /// 	 | KEEPDEFAULTS
    /// 	 | KEEPFIXED
    /// 	 | KEEPIDENTITY
    /// 	 | KEY_SOURCE
    /// 	 | KEYS
    /// 	 | KEYSET
    /// 	 | LAG
    /// 	 | LAST
    /// 	 | LAST_VALUE
    /// 	 | LEAD
    /// 	 | LEN
    /// 	 | LEVEL
    /// 	 | LIST
    /// 	 | LISTENER
    /// 	 | LISTENER_URL
    /// 	 | LOB_COMPACTION
    /// 	 | LOCAL
    /// 	 | LOCATION
    /// 	 | LOCK
    /// 	 | LOCK_ESCALATION
    /// 	 | LOGIN
    /// 	 | LOOP
    /// 	 | LOW
    /// 	 | LOWER
    /// 	 | LTRIM
    /// 	 | MANUAL
    /// 	 | MARK
    /// 	 | MASKED
    /// 	 | MATERIALIZED
    /// 	 | MAX
    /// 	 | MAX_CPU_PERCENT
    /// 	 | MAX_DOP
    /// 	 | MAX_FILES
    /// 	 | MAX_IOPS_PER_VOLUME
    /// 	 | MAX_MEMORY_PERCENT
    /// 	 | MAX_PROCESSES
    /// 	 | MAX_QUEUE_READERS
    /// 	 | MAX_ROLLOVER_FILES
    /// 	 | MAXDOP
    /// 	 | MAXRECURSION
    /// 	 | MAXSIZE
    /// 	 | MB
    /// 	 | MEDIUM
    /// 	 | MEMORY_OPTIMIZED_DATA
    /// 	 | MESSAGE
    /// 	 | MIN
    /// 	 | MIN_ACTIVE_ROWVERSION
    /// 	 | MIN_CPU_PERCENT
    /// 	 | MIN_IOPS_PER_VOLUME
    /// 	 | MIN_MEMORY_PERCENT
    /// 	 | MINUTES
    /// 	 | MIRROR_ADDRESS
    /// 	 | MIXED_PAGE_ALLOCATION
    /// 	 | MODE
    /// 	 | MODIFY
    /// 	 | MOVE
    /// 	 | MULTI_USER
    /// 	 | NAME
    /// 	 | NCHAR
    /// 	 | NESTED_TRIGGERS
    /// 	 | NEW_ACCOUNT
    /// 	 | NEW_BROKER
    /// 	 | NEW_PASSWORD
    /// 	 | NEWNAME
    /// 	 | NEXT
    /// 	 | NO
    /// 	 | NO_TRUNCATE
    /// 	 | NO_WAIT
    /// 	 | NOCOUNT
    /// 	 | NODES
    /// 	 | NOEXEC
    /// 	 | NOEXPAND
    /// 	 | NOLOCK
    /// 	 | NON_TRANSACTED_ACCESS
    /// 	 | NORECOMPUTE
    /// 	 | NORECOVERY
    /// 	 | NOTIFICATIONS
    /// 	 | NOWAIT
    /// 	 | NTILE
    /// 	 | NULL_DOUBLE_QUOTE
    /// 	 | NUMANODE
    /// 	 | NUMBER
    /// 	 | NUMERIC_ROUNDABORT
    /// 	 | OBJECT
    /// 	 | OBJECT_DEFINITION
    /// 	 | OBJECT_ID
    /// 	 | OBJECT_NAME
    /// 	 | OBJECT_SCHEMA_NAME
    /// 	 | OBJECTPROPERTY
    /// 	 | OBJECTPROPERTYEX
    /// 	 | OFFLINE
    /// 	 | OFFSET
    /// 	 | OLD_ACCOUNT
    /// 	 | ONLINE
    /// 	 | ONLY
    /// 	 | OPEN_EXISTING
    /// 	 | OPENJSON
    /// 	 | OPTIMISTIC
    /// 	 | OPTIMIZE
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY
    /// 	 | ORIGINAL_DB_NAME
    /// 	 | OUT
    /// 	 | OUTPUT
    /// 	 | OVERRIDE
    /// 	 | OWNER
    /// 	 | OWNERSHIP
    /// 	 | PAD_INDEX
    /// 	 | PAGE_VERIFY
    /// 	 | PAGECOUNT
    /// 	 | PAGLOCK
    /// 	 | PARAMETERIZATION
    /// 	 | PARSENAME
    /// 	 | PARSEONLY
    /// 	 | PARTITION
    /// 	 | PARTITIONS
    /// 	 | PARTNER
    /// 	 | PATH
    /// 	 | PATINDEX
    /// 	 | PAUSE
    /// 	 | PERCENT_RANK
    /// 	 | PERCENTILE_CONT
    /// 	 | PERCENTILE_DISC
    /// 	 | PERSIST_SAMPLE_PERCENT
    /// 	 | POISON_MESSAGE_HANDLING
    /// 	 | POOL
    /// 	 | PORT
    /// 	 | PRECEDING
    /// 	 | PRIMARY_ROLE
    /// 	 | PRIOR
    /// 	 | PRIORITY
    /// 	 | PRIORITY_LEVEL
    /// 	 | PRIVATE
    /// 	 | PRIVATE_KEY
    /// 	 | PRIVILEGES
    /// 	 | PROCEDURE_NAME
    /// 	 | PROPERTY
    /// 	 | PROVIDER
    /// 	 | PROVIDER_KEY_NAME
    /// 	 | QUERY
    /// 	 | QUEUE
    /// 	 | QUEUE_DELAY
    /// 	 | QUOTED_IDENTIFIER
    /// 	 | QUOTENAME
    /// 	 | RANDOMIZED
    /// 	 | RANGE
    /// 	 | RANK
    /// 	 | RC2
    /// 	 | RC4
    /// 	 | RC4_128
    /// 	 | READ_COMMITTED_SNAPSHOT
    /// 	 | READ_ONLY
    /// 	 | READ_ONLY_ROUTING_LIST
    /// 	 | READ_WRITE
    /// 	 | READCOMMITTED
    /// 	 | READCOMMITTEDLOCK
    /// 	 | READONLY
    /// 	 | READPAST
    /// 	 | READUNCOMMITTED
    /// 	 | READWRITE
    /// 	 | REBUILD
    /// 	 | RECEIVE
    /// 	 | RECOMPILE
    /// 	 | RECOVERY
    /// 	 | RECURSIVE_TRIGGERS
    /// 	 | RELATIVE
    /// 	 | REMOTE
    /// 	 | REMOTE_PROC_TRANSACTIONS
    /// 	 | REMOTE_SERVICE_NAME
    /// 	 | REMOVE
    /// 	 | REORGANIZE
    /// 	 | REPEATABLE
    /// 	 | REPEATABLEREAD
    /// 	 | REPLACE
    /// 	 | REPLICA
    /// 	 | REPLICATE
    /// 	 | REQUEST_MAX_CPU_TIME_SEC
    /// 	 | REQUEST_MAX_MEMORY_GRANT_PERCENT
    /// 	 | REQUEST_MEMORY_GRANT_TIMEOUT_SEC
    /// 	 | REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT
    /// 	 | RESAMPLE
    /// 	 | RESERVE_DISK_SPACE
    /// 	 | RESOURCE
    /// 	 | RESOURCE_MANAGER_LOCATION
    /// 	 | RESTRICTED_USER
    /// 	 | RESUMABLE
    /// 	 | RETENTION
    /// 	 | REVERSE
    /// 	 | ROBUST
    /// 	 | ROOT
    /// 	 | ROUTE
    /// 	 | ROW
    /// 	 | ROW_NUMBER
    /// 	 | ROWGUID
    /// 	 | ROWLOCK
    /// 	 | ROWS
    /// 	 | RTRIM
    /// 	 | SAMPLE
    /// 	 | SCHEMA_ID
    /// 	 | SCHEMA_NAME
    /// 	 | SCHEMABINDING
    /// 	 | SCOPE_IDENTITY
    /// 	 | SCOPED
    /// 	 | SCROLL
    /// 	 | SCROLL_LOCKS
    /// 	 | SEARCH
    /// 	 | SECONDARY
    /// 	 | SECONDARY_ONLY
    /// 	 | SECONDARY_ROLE
    /// 	 | SECONDS
    /// 	 | SECRET
    /// 	 | SECURABLES
    /// 	 | SECURITY
    /// 	 | SECURITY_LOG
    /// 	 | SEEDING_MODE
    /// 	 | SELF
    /// 	 | SEMI_SENSITIVE
    /// 	 | SEND
    /// 	 | SENT
    /// 	 | SEQUENCE
    /// 	 | SEQUENCE_NUMBER
    /// 	 | SERIALIZABLE
    /// 	 | SERVERPROPERTY
    /// 	 | SESSION_TIMEOUT
    /// 	 | SETERROR
    /// 	 | SHARE
    /// 	 | SHARED
    /// 	 | SHOWPLAN
    /// 	 | SHOWPLAN_ALL
    /// 	 | SHOWPLAN_TEXT
    /// 	 | SHOWPLAN_XML
    /// 	 | SIGNATURE
    /// 	 | SIMPLE
    /// 	 | SINGLE_USER
    /// 	 | SIZE
    /// 	 | SMALLINT
    /// 	 | SNAPSHOT
    /// 	 | SORT_IN_TEMPDB
    /// 	 | SOUNDEX
    /// 	 | SPACE_KEYWORD
    /// 	 | SPARSE
    /// 	 | SPATIAL_WINDOW_MAX_CELLS
    /// 	 | STANDBY
    /// 	 | START_DATE
    /// 	 | STATIC
    /// 	 | STATISTICS_INCREMENTAL
    /// 	 | STATISTICS_NORECOMPUTE
    /// 	 | STATS_DATE
    /// 	 | STATS_STREAM
    /// 	 | STATUS
    /// 	 | STATUSONLY
    /// 	 | STDEV
    /// 	 | STDEVP
    /// 	 | STOPLIST
    /// 	 | STR
    /// 	 | STRING_AGG
    /// 	 | STRING_ESCAPE
    /// 	 | STUFF
    /// 	 | SUBJECT
    /// 	 | SUBSCRIBE
    /// 	 | SUBSCRIPTION
    /// 	 | SUBSTRING
    /// 	 | SUM
    /// 	 | SUSPEND
    /// 	 | SYMMETRIC
    /// 	 | SYNCHRONOUS_COMMIT
    /// 	 | SYNONYM
    /// 	 | SYSTEM
    /// 	 | TABLOCK
    /// 	 | TABLOCKX
    /// 	 | TAKE
    /// 	 | TARGET_RECOVERY_TIME
    /// 	 | TB
    /// 	 | TEXTIMAGE_ON
    /// 	 | THROW
    /// 	 | TIES
    /// 	 | TIME
    /// 	 | TIMEOUT
    /// 	 | TIMER
    /// 	 | TINYINT
    /// 	 | TORN_PAGE_DETECTION
    /// 	 | TRACKING
    /// 	 | TRANSACTION_ID
    /// 	 | TRANSFORM_NOISE_WORDS
    /// 	 | TRANSLATE
    /// 	 | TRIM
    /// 	 | TRIPLE_DES
    /// 	 | TRIPLE_DES_3KEY
    /// 	 | TRUSTWORTHY
    /// 	 | TRY
    /// 	 | TSQL
    /// 	 | TWO_DIGIT_YEAR_CUTOFF
    /// 	 | TYPE
    /// 	 | TYPE_ID
    /// 	 | TYPE_NAME
    /// 	 | TYPE_WARNING
    /// 	 | TYPEPROPERTY
    /// 	 | UNBOUNDED
    /// 	 | UNCOMMITTED
    /// 	 | UNICODE
    /// 	 | UNKNOWN
    /// 	 | UNLIMITED
    /// 	 | UNMASK
    /// 	 | UOW
    /// 	 | UPDLOCK
    /// 	 | UPPER
    /// 	 | USING
    /// 	 | VALID_XML
    /// 	 | VALIDATION
    /// 	 | VALUE
    /// 	 | VAR
    /// 	 | VARBINARY_KEYWORD
    /// 	 | VARP
    /// 	 | VERSION
    /// 	 | VIEW_METADATA
    /// 	 | VIEWS
    /// 	 | WAIT
    /// 	 | WELL_FORMED_XML
    /// 	 | WITHOUT_ARRAY_WRAPPER
    /// 	 | WORK
    /// 	 | WORKLOAD
    /// 	 | XLOCK
    /// 	 | XML
    /// 	 | XML_COMPRESSION
    /// 	 | XMLDATA
    /// 	 | XMLNAMESPACES
    /// 	 | XMLSCHEMA
    /// 	 | XSINIL
    /// 	 | ZONE
    /// 	 | ABORT_AFTER_WAIT
    /// 	 | ABSENT
    /// 	 | ADMINISTER
    /// 	 | AES
    /// 	 | ALLOW_CONNECTIONS
    /// 	 | ALLOW_MULTIPLE_EVENT_LOSS
    /// 	 | ALLOW_SINGLE_EVENT_LOSS
    /// 	 | ANONYMOUS
    /// 	 | APPEND
    /// 	 | APPLICATION
    /// 	 | ASYMMETRIC
    /// 	 | ASYNCHRONOUS_COMMIT
    /// 	 | AUTHENTICATE
    /// 	 | AUTHENTICATION
    /// 	 | AUTOMATED_BACKUP_PREFERENCE
    /// 	 | AUTOMATIC
    /// 	 | AVAILABILITY_MODE
    /// 	 | BEFORE
    /// 	 | BLOCK
    /// 	 | BLOCKERS
    /// 	 | BLOCKSIZE
    /// 	 | BLOCKING_HIERARCHY
    /// 	 | BUFFER
    /// 	 | BUFFERCOUNT
    /// 	 | CACHE
    /// 	 | CALLED
    /// 	 | CERTIFICATE
    /// 	 | CHANGETABLE
    /// 	 | CHANGES
    /// 	 | CHECK_POLICY
    /// 	 | CHECK_EXPIRATION
    /// 	 | CLASSIFIER_FUNCTION
    /// 	 | CLUSTER
    /// 	 | COMPRESS
    /// 	 | COMPRESSION
    /// 	 | CONNECT
    /// 	 | CONNECTION
    /// 	 | CONFIGURATION
    /// 	 | CONNECTIONPROPERTY
    /// 	 | CONTAINMENT
    /// 	 | CONTEXT
    /// 	 | CONTEXT_INFO
    /// 	 | CONTINUE_AFTER_ERROR
    /// 	 | CONTRACT
    /// 	 | CONTRACT_NAME
    /// 	 | CONVERSATION
    /// 	 | COPY_ONLY
    /// 	 | CURRENT_REQUEST_ID
    /// 	 | CURRENT_TRANSACTION_ID
    /// 	 | CYCLE
    /// 	 | DATA_COMPRESSION
    /// 	 | DATA_SOURCE
    /// 	 | DATABASE_MIRRORING
    /// 	 | DATASPACE
    /// 	 | DDL
    /// 	 | DECOMPRESS
    /// 	 | DEFAULT_DATABASE
    /// 	 | DEFAULT_SCHEMA
    /// 	 | DIAGNOSTICS
    /// 	 | DIFFERENTIAL
    /// 	 | DISTRIBUTION
    /// 	 | DTC_SUPPORT
    /// 	 | ENABLED
    /// 	 | ENDPOINT
    /// 	 | ERROR
    /// 	 | ERROR_LINE
    /// 	 | ERROR_MESSAGE
    /// 	 | ERROR_NUMBER
    /// 	 | ERROR_PROCEDURE
    /// 	 | ERROR_SEVERITY
    /// 	 | ERROR_STATE
    /// 	 | EVENT
    /// 	 | EVENTDATA
    /// 	 | EVENT_RETENTION_MODE
    /// 	 | EXECUTABLE_FILE
    /// 	 | EXPIREDATE
    /// 	 | EXTENSION
    /// 	 | EXTERNAL_ACCESS
    /// 	 | FAILOVER
    /// 	 | FAILURECONDITIONLEVEL
    /// 	 | FAN_IN
    /// 	 | FILE_SNAPSHOT
    /// 	 | FORCESEEK
    /// 	 | FORCE_SERVICE_ALLOW_DATA_LOSS
    /// 	 | FORMATMESSAGE
    /// 	 | GET
    /// 	 | GET_FILESTREAM_TRANSACTION_CONTEXT
    /// 	 | GETANCESTOR
    /// 	 | GETANSINULL
    /// 	 | GETDESCENDANT
    /// 	 | GETLEVEL
    /// 	 | GETREPARENTEDVALUE
    /// 	 | GETROOT
    /// 	 | GOVERNOR
    /// 	 | HASHED
    /// 	 | HEALTHCHECKTIMEOUT
    /// 	 | HEAP
    /// 	 | HIERARCHYID
    /// 	 | HOST_ID
    /// 	 | HOST_NAME
    /// 	 | IIF
    /// 	 | IO
    /// 	 | INCLUDE
    /// 	 | INCREMENT
    /// 	 | INFINITE
    /// 	 | INIT
    /// 	 | INSTEAD
    /// 	 | ISDESCENDANTOF
    /// 	 | ISNULL
    /// 	 | ISNUMERIC
    /// 	 | KERBEROS
    /// 	 | KEY_PATH
    /// 	 | KEY_STORE_PROVIDER_NAME
    /// 	 | LANGUAGE
    /// 	 | LIBRARY
    /// 	 | LIFETIME
    /// 	 | LINKED
    /// 	 | LINUX
    /// 	 | LISTENER_IP
    /// 	 | LISTENER_PORT
    /// 	 | LOCAL_SERVICE_NAME
    /// 	 | LOG
    /// 	 | MASK
    /// 	 | MATCHED
    /// 	 | MASTER
    /// 	 | MAX_MEMORY
    /// 	 | MAXTRANSFER
    /// 	 | MAXVALUE
    /// 	 | MAX_DISPATCH_LATENCY
    /// 	 | MAX_DURATION
    /// 	 | MAX_EVENT_SIZE
    /// 	 | MAX_SIZE
    /// 	 | MAX_OUTSTANDING_IO_PER_VOLUME
    /// 	 | MEDIADESCRIPTION
    /// 	 | MEDIANAME
    /// 	 | MEMBER
    /// 	 | MEMORY_PARTITION_MODE
    /// 	 | MESSAGE_FORWARDING
    /// 	 | MESSAGE_FORWARD_SIZE
    /// 	 | MINVALUE
    /// 	 | MIRROR
    /// 	 | MUST_CHANGE
    /// 	 | NEWID
    /// 	 | NEWSEQUENTIALID
    /// 	 | NOFORMAT
    /// 	 | NOINIT
    /// 	 | NONE
    /// 	 | NOREWIND
    /// 	 | NOSKIP
    /// 	 | NOUNLOAD
    /// 	 | NO_CHECKSUM
    /// 	 | NO_COMPRESSION
    /// 	 | NO_EVENT_LOSS
    /// 	 | NOTIFICATION
    /// 	 | NTLM
    /// 	 | OLD_PASSWORD
    /// 	 | ON_FAILURE
    /// 	 | OPERATIONS
    /// 	 | PAGE
    /// 	 | PARAM_NODE
    /// 	 | PARTIAL
    /// 	 | PASSWORD
    /// 	 | PERMISSION_SET
    /// 	 | PER_CPU
    /// 	 | PER_DB
    /// 	 | PER_NODE
    /// 	 | PERSISTED
    /// 	 | PLATFORM
    /// 	 | POLICY
    /// 	 | PREDICATE
    /// 	 | PROCESS
    /// 	 | PROFILE
    /// 	 | PYTHON
    /// 	 | R
    /// 	 | READ_WRITE_FILEGROUPS
    /// 	 | REGENERATE
    /// 	 | RELATED_CONVERSATION
    /// 	 | RELATED_CONVERSATION_GROUP
    /// 	 | REQUIRED
    /// 	 | RESET
    /// 	 | RESOURCES
    /// 	 | RESTART
    /// 	 | RESUME
    /// 	 | RETAINDAYS
    /// 	 | RETURNS
    /// 	 | REWIND
    /// 	 | ROLE
    /// 	 | ROUND_ROBIN
    /// 	 | ROWCOUNT_BIG
    /// 	 | RSA_512
    /// 	 | RSA_1024
    /// 	 | RSA_2048
    /// 	 | RSA_3072
    /// 	 | RSA_4096
    /// 	 | SAFETY
    /// 	 | SAFE
    /// 	 | SCHEDULER
    /// 	 | SCHEME
    /// 	 | SCRIPT
    /// 	 | SERVER
    /// 	 | SERVICE
    /// 	 | SERVICE_BROKER
    /// 	 | SERVICE_NAME
    /// 	 | SESSION
    /// 	 | SESSION_CONTEXT
    /// 	 | SETTINGS
    /// 	 | SHRINKLOG
    /// 	 | SID
    /// 	 | SKIP_KEYWORD
    /// 	 | SOFTNUMA
    /// 	 | SOURCE
    /// 	 | SPECIFICATION
    /// 	 | SPLIT
    /// 	 | SQL
    /// 	 | SQLDUMPERFLAGS
    /// 	 | SQLDUMPERPATH
    /// 	 | SQLDUMPERTIMEOUT
    /// 	 | STATE
    /// 	 | STATS
    /// 	 | START
    /// 	 | STARTED
    /// 	 | STARTUP_STATE
    /// 	 | STOP
    /// 	 | STOPPED
    /// 	 | STOP_ON_ERROR
    /// 	 | SUPPORTED
    /// 	 | SWITCH
    /// 	 | TAPE
    /// 	 | TARGET
    /// 	 | TCP
    /// 	 | TOSTRING
    /// 	 | TRACE
    /// 	 | TRACK_CAUSALITY
    /// 	 | TRANSFER
    /// 	 | UNCHECKED
    /// 	 | UNLOCK
    /// 	 | UNSAFE
    /// 	 | URL
    /// 	 | USED
    /// 	 | VERBOSELOGGING
    /// 	 | VISIBILITY
    /// 	 | WAIT_AT_LOW_PRIORITY
    /// 	 | WINDOWS
    /// 	 | WITHOUT
    /// 	 | WITNESS
    /// 	 | XACT_ABORT
    /// 	 | XACT_STATE
    /// 	 | VARCHAR
    /// 	 | NVARCHAR
    /// 	 | PRECISION
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstKeyword : AstTerminal<AstKeywordEnum>
    {
        
        public AstKeyword(ITerminalNode t, string value) : 
                base(t, AstKeyword.GetValue(value))
        {
        }
        
        public AstKeyword(ITerminalNode t, AstKeywordEnum value) : 
                base(t, value)
        {
        }
        
        public AstKeyword(ParserRuleContext ctx, string value) : 
                base(ctx, AstKeyword.GetValue(value))
        {
        }
        
        public AstKeyword(Position p, string value) : 
                base(p, AstKeyword.GetValue(value))
        {
        }
        
        public AstKeyword(Position p, AstKeywordEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKeyword(this);
        }
        
        protected static AstKeywordEnum GetValue(string value)
        {
            if ((value == "ABORT"))
            {
                return AstKeywordEnum.Abort;
            }
            if ((value == "ABSOLUTE"))
            {
                return AstKeywordEnum.Absolute;
            }
            if ((value == "ACCENT_SENSITIVITY"))
            {
                return AstKeywordEnum.AccentSensitivity;
            }
            if ((value == "ACCESS"))
            {
                return AstKeywordEnum.Access;
            }
            if ((value == "ACTION"))
            {
                return AstKeywordEnum.Action;
            }
            if ((value == "ACTIVATION"))
            {
                return AstKeywordEnum.Activation;
            }
            if ((value == "ACTIVE"))
            {
                return AstKeywordEnum.Active;
            }
            if ((value == "ADD"))
            {
                return AstKeywordEnum.Add;
            }
            if ((value == "ADDRESS"))
            {
                return AstKeywordEnum.Address;
            }
            if ((value == "AES_128"))
            {
                return AstKeywordEnum.Aes128;
            }
            if ((value == "AES_192"))
            {
                return AstKeywordEnum.Aes192;
            }
            if ((value == "AES_256"))
            {
                return AstKeywordEnum.Aes256;
            }
            if ((value == "AFFINITY"))
            {
                return AstKeywordEnum.Affinity;
            }
            if ((value == "AFTER"))
            {
                return AstKeywordEnum.After;
            }
            if ((value == "AGGREGATE"))
            {
                return AstKeywordEnum.Aggregate;
            }
            if ((value == "ALGORITHM"))
            {
                return AstKeywordEnum.Algorithm;
            }
            if ((value == "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS"))
            {
                return AstKeywordEnum.AllowEncryptedValueModifications;
            }
            if ((value == "ALLOW_PAGE_LOCKS"))
            {
                return AstKeywordEnum.AllowPageLocks;
            }
            if ((value == "ALLOW_ROW_LOCKS"))
            {
                return AstKeywordEnum.AllowRowLocks;
            }
            if ((value == "ALLOW_SNAPSHOT_ISOLATION"))
            {
                return AstKeywordEnum.AllowSnapshotIsolation;
            }
            if ((value == "ALLOWED"))
            {
                return AstKeywordEnum.Allowed;
            }
            if ((value == "ALWAYS"))
            {
                return AstKeywordEnum.Always;
            }
            if ((value == "ANSI_DEFAULTS"))
            {
                return AstKeywordEnum.AnsiDefaults;
            }
            if ((value == "ANSI_NULL_DEFAULT"))
            {
                return AstKeywordEnum.AnsiNullDefault;
            }
            if ((value == "ANSI_NULL_DFLT_OFF"))
            {
                return AstKeywordEnum.AnsiNullDfltOff;
            }
            if ((value == "ANSI_NULL_DFLT_ON"))
            {
                return AstKeywordEnum.AnsiNullDfltOn;
            }
            if ((value == "ANSI_NULLS"))
            {
                return AstKeywordEnum.AnsiNulls;
            }
            if ((value == "ANSI_PADDING"))
            {
                return AstKeywordEnum.AnsiPadding;
            }
            if ((value == "ANSI_WARNINGS"))
            {
                return AstKeywordEnum.AnsiWarnings;
            }
            if ((value == "APP_NAME"))
            {
                return AstKeywordEnum.AppName;
            }
            if ((value == "APPLICATION_LOG"))
            {
                return AstKeywordEnum.ApplicationLog;
            }
            if ((value == "APPLOCK_MODE"))
            {
                return AstKeywordEnum.ApplockMode;
            }
            if ((value == "APPLOCK_TEST"))
            {
                return AstKeywordEnum.ApplockTest;
            }
            if ((value == "APPLY"))
            {
                return AstKeywordEnum.Apply;
            }
            if ((value == "ARITHABORT"))
            {
                return AstKeywordEnum.Arithabort;
            }
            if ((value == "ARITHIGNORE"))
            {
                return AstKeywordEnum.Arithignore;
            }
            if ((value == "ASCII"))
            {
                return AstKeywordEnum.Ascii;
            }
            if ((value == "ASSEMBLY"))
            {
                return AstKeywordEnum.Assembly;
            }
            if ((value == "ASSEMBLYPROPERTY"))
            {
                return AstKeywordEnum.Assemblyproperty;
            }
            if ((value == "AT_KEYWORD"))
            {
                return AstKeywordEnum.AtKeyword;
            }
            if ((value == "AUDIT"))
            {
                return AstKeywordEnum.Audit;
            }
            if ((value == "AUDIT_GUID"))
            {
                return AstKeywordEnum.AuditGuid;
            }
            if ((value == "AUTO"))
            {
                return AstKeywordEnum.Auto;
            }
            if ((value == "AUTO_CLEANUP"))
            {
                return AstKeywordEnum.AutoCleanup;
            }
            if ((value == "AUTO_CLOSE"))
            {
                return AstKeywordEnum.AutoClose;
            }
            if ((value == "AUTO_CREATE_STATISTICS"))
            {
                return AstKeywordEnum.AutoCreateStatistics;
            }
            if ((value == "AUTO_DROP"))
            {
                return AstKeywordEnum.AutoDrop;
            }
            if ((value == "AUTO_SHRINK"))
            {
                return AstKeywordEnum.AutoShrink;
            }
            if ((value == "AUTO_UPDATE_STATISTICS"))
            {
                return AstKeywordEnum.AutoUpdateStatistics;
            }
            if ((value == "AUTO_UPDATE_STATISTICS_ASYNC"))
            {
                return AstKeywordEnum.AutoUpdateStatisticsAsync;
            }
            if ((value == "AUTOGROW_ALL_FILES"))
            {
                return AstKeywordEnum.AutogrowAllFiles;
            }
            if ((value == "AUTOGROW_SINGLE_FILE"))
            {
                return AstKeywordEnum.AutogrowSingleFile;
            }
            if ((value == "AVAILABILITY"))
            {
                return AstKeywordEnum.Availability;
            }
            if ((value == "AVG"))
            {
                return AstKeywordEnum.Avg;
            }
            if ((value == "BACKUP_PRIORITY"))
            {
                return AstKeywordEnum.BackupPriority;
            }
            if ((value == "BASE64"))
            {
                return AstKeywordEnum.Base64;
            }
            if ((value == "BEGIN_DIALOG"))
            {
                return AstKeywordEnum.BeginDialog;
            }
            if ((value == "BIGINT"))
            {
                return AstKeywordEnum.Bigint;
            }
            if ((value == "BINARY_KEYWORD"))
            {
                return AstKeywordEnum.BinaryKeyword;
            }
            if ((value == "BINARY_CHECKSUM"))
            {
                return AstKeywordEnum.BinaryChecksum;
            }
            if ((value == "BINDING"))
            {
                return AstKeywordEnum.Binding;
            }
            if ((value == "BLOB_STORAGE"))
            {
                return AstKeywordEnum.BlobStorage;
            }
            if ((value == "BROKER"))
            {
                return AstKeywordEnum.Broker;
            }
            if ((value == "BROKER_INSTANCE"))
            {
                return AstKeywordEnum.BrokerInstance;
            }
            if ((value == "BULK_LOGGED"))
            {
                return AstKeywordEnum.BulkLogged;
            }
            if ((value == "CALLER"))
            {
                return AstKeywordEnum.Caller;
            }
            if ((value == "CAP_CPU_PERCENT"))
            {
                return AstKeywordEnum.CapCpuPercent;
            }
            if ((value == "CAST"))
            {
                return AstKeywordEnum.Cast;
            }
            if ((value == "TRY_CAST"))
            {
                return AstKeywordEnum.TryCast;
            }
            if ((value == "CATALOG"))
            {
                return AstKeywordEnum.Catalog;
            }
            if ((value == "CATCH"))
            {
                return AstKeywordEnum.Catch;
            }
            if ((value == "CHANGE"))
            {
                return AstKeywordEnum.Change;
            }
            if ((value == "CHANGE_RETENTION"))
            {
                return AstKeywordEnum.ChangeRetention;
            }
            if ((value == "CHANGE_TRACKING"))
            {
                return AstKeywordEnum.ChangeTracking;
            }
            if ((value == "CHAR"))
            {
                return AstKeywordEnum.Char;
            }
            if ((value == "CHARINDEX"))
            {
                return AstKeywordEnum.Charindex;
            }
            if ((value == "CHECKSUM"))
            {
                return AstKeywordEnum.Checksum;
            }
            if ((value == "CHECKSUM_AGG"))
            {
                return AstKeywordEnum.ChecksumAgg;
            }
            if ((value == "CLEANUP"))
            {
                return AstKeywordEnum.Cleanup;
            }
            if ((value == "COL_LENGTH"))
            {
                return AstKeywordEnum.ColLength;
            }
            if ((value == "COL_NAME"))
            {
                return AstKeywordEnum.ColName;
            }
            if ((value == "COLLECTION"))
            {
                return AstKeywordEnum.Collection;
            }
            if ((value == "COLUMN_ENCRYPTION_KEY"))
            {
                return AstKeywordEnum.ColumnEncryptionKey;
            }
            if ((value == "COLUMN_MASTER_KEY"))
            {
                return AstKeywordEnum.ColumnMasterKey;
            }
            if ((value == "COLUMNPROPERTY"))
            {
                return AstKeywordEnum.Columnproperty;
            }
            if ((value == "COLUMNS"))
            {
                return AstKeywordEnum.Columns;
            }
            if ((value == "COLUMNSTORE"))
            {
                return AstKeywordEnum.Columnstore;
            }
            if ((value == "COLUMNSTORE_ARCHIVE"))
            {
                return AstKeywordEnum.ColumnstoreArchive;
            }
            if ((value == "COMMITTED"))
            {
                return AstKeywordEnum.Committed;
            }
            if ((value == "COMPATIBILITY_LEVEL"))
            {
                return AstKeywordEnum.CompatibilityLevel;
            }
            if ((value == "COMPRESS_ALL_ROW_GROUPS"))
            {
                return AstKeywordEnum.CompressAllRowGroups;
            }
            if ((value == "COMPRESSION_DELAY"))
            {
                return AstKeywordEnum.CompressionDelay;
            }
            if ((value == "CONCAT"))
            {
                return AstKeywordEnum.Concat;
            }
            if ((value == "CONCAT_WS"))
            {
                return AstKeywordEnum.ConcatWs;
            }
            if ((value == "CONCAT_NULL_YIELDS_NULL"))
            {
                return AstKeywordEnum.ConcatNullYieldsNull;
            }
            if ((value == "CONTENT"))
            {
                return AstKeywordEnum.Content;
            }
            if ((value == "CONTROL"))
            {
                return AstKeywordEnum.Control;
            }
            if ((value == "COOKIE"))
            {
                return AstKeywordEnum.Cookie;
            }
            if ((value == "COUNT"))
            {
                return AstKeywordEnum.Count;
            }
            if ((value == "COUNT_BIG"))
            {
                return AstKeywordEnum.CountBig;
            }
            if ((value == "COUNTER"))
            {
                return AstKeywordEnum.Counter;
            }
            if ((value == "CPU"))
            {
                return AstKeywordEnum.Cpu;
            }
            if ((value == "CREATE_NEW"))
            {
                return AstKeywordEnum.CreateNew;
            }
            if ((value == "CREATION_DISPOSITION"))
            {
                return AstKeywordEnum.CreationDisposition;
            }
            if ((value == "CREDENTIAL"))
            {
                return AstKeywordEnum.Credential;
            }
            if ((value == "CRYPTOGRAPHIC"))
            {
                return AstKeywordEnum.Cryptographic;
            }
            if ((value == "CUME_DIST"))
            {
                return AstKeywordEnum.CumeDist;
            }
            if ((value == "CURSOR_CLOSE_ON_COMMIT"))
            {
                return AstKeywordEnum.CursorCloseOnCommit;
            }
            if ((value == "CURSOR_DEFAULT"))
            {
                return AstKeywordEnum.CursorDefault;
            }
            if ((value == "DATA"))
            {
                return AstKeywordEnum.Data;
            }
            if ((value == "DATABASE_PRINCIPAL_ID"))
            {
                return AstKeywordEnum.DatabasePrincipalId;
            }
            if ((value == "DATABASEPROPERTYEX"))
            {
                return AstKeywordEnum.Databasepropertyex;
            }
            if ((value == "DATE_CORRELATION_OPTIMIZATION"))
            {
                return AstKeywordEnum.DateCorrelationOptimization;
            }
            if ((value == "DATEADD"))
            {
                return AstKeywordEnum.Dateadd;
            }
            if ((value == "DATEDIFF"))
            {
                return AstKeywordEnum.Datediff;
            }
            if ((value == "DATENAME"))
            {
                return AstKeywordEnum.Datename;
            }
            if ((value == "DATEPART"))
            {
                return AstKeywordEnum.Datepart;
            }
            if ((value == "DAYS"))
            {
                return AstKeywordEnum.Days;
            }
            if ((value == "DB_CHAINING"))
            {
                return AstKeywordEnum.DbChaining;
            }
            if ((value == "DB_FAILOVER"))
            {
                return AstKeywordEnum.DbFailover;
            }
            if ((value == "DB_ID"))
            {
                return AstKeywordEnum.DbId;
            }
            if ((value == "DB_NAME"))
            {
                return AstKeywordEnum.DbName;
            }
            if ((value == "DECRYPTION"))
            {
                return AstKeywordEnum.Decryption;
            }
            if ((value == "DEFAULT_DOUBLE_QUOTE"))
            {
                return AstKeywordEnum.DefaultDoubleQuote;
            }
            if ((value == "DEFAULT_FULLTEXT_LANGUAGE"))
            {
                return AstKeywordEnum.DefaultFulltextLanguage;
            }
            if ((value == "DEFAULT_LANGUAGE"))
            {
                return AstKeywordEnum.DefaultLanguage;
            }
            if ((value == "DEFINITION"))
            {
                return AstKeywordEnum.Definition;
            }
            if ((value == "DELAY"))
            {
                return AstKeywordEnum.Delay;
            }
            if ((value == "DELAYED_DURABILITY"))
            {
                return AstKeywordEnum.DelayedDurability;
            }
            if ((value == "DELETED"))
            {
                return AstKeywordEnum.Deleted;
            }
            if ((value == "DENSE_RANK"))
            {
                return AstKeywordEnum.DenseRank;
            }
            if ((value == "DEPENDENTS"))
            {
                return AstKeywordEnum.Dependents;
            }
            if ((value == "DES"))
            {
                return AstKeywordEnum.Des;
            }
            if ((value == "DESCRIPTION"))
            {
                return AstKeywordEnum.Description;
            }
            if ((value == "DESX"))
            {
                return AstKeywordEnum.Desx;
            }
            if ((value == "DETERMINISTIC"))
            {
                return AstKeywordEnum.Deterministic;
            }
            if ((value == "DHCP"))
            {
                return AstKeywordEnum.Dhcp;
            }
            if ((value == "DIALOG"))
            {
                return AstKeywordEnum.Dialog;
            }
            if ((value == "DIFFERENCE"))
            {
                return AstKeywordEnum.Difference;
            }
            if ((value == "DIRECTORY_NAME"))
            {
                return AstKeywordEnum.DirectoryName;
            }
            if ((value == "DISABLE"))
            {
                return AstKeywordEnum.Disable;
            }
            if ((value == "DISABLE_BROKER"))
            {
                return AstKeywordEnum.DisableBroker;
            }
            if ((value == "DISABLED"))
            {
                return AstKeywordEnum.Disabled;
            }
            if ((value == "DOCUMENT"))
            {
                return AstKeywordEnum.Document;
            }
            if ((value == "DROP_EXISTING"))
            {
                return AstKeywordEnum.DropExisting;
            }
            if ((value == "DYNAMIC"))
            {
                return AstKeywordEnum.Dynamic;
            }
            if ((value == "ELEMENTS"))
            {
                return AstKeywordEnum.Elements;
            }
            if ((value == "EMERGENCY"))
            {
                return AstKeywordEnum.Emergency;
            }
            if ((value == "EMPTY"))
            {
                return AstKeywordEnum.Empty;
            }
            if ((value == "ENABLE"))
            {
                return AstKeywordEnum.Enable;
            }
            if ((value == "ENABLE_BROKER"))
            {
                return AstKeywordEnum.EnableBroker;
            }
            if ((value == "ENCRYPTED"))
            {
                return AstKeywordEnum.Encrypted;
            }
            if ((value == "ENCRYPTED_VALUE"))
            {
                return AstKeywordEnum.EncryptedValue;
            }
            if ((value == "ENCRYPTION"))
            {
                return AstKeywordEnum.Encryption;
            }
            if ((value == "ENCRYPTION_TYPE"))
            {
                return AstKeywordEnum.EncryptionType;
            }
            if ((value == "ENDPOINT_URL"))
            {
                return AstKeywordEnum.EndpointUrl;
            }
            if ((value == "ERROR_BROKER_CONVERSATIONS"))
            {
                return AstKeywordEnum.ErrorBrokerConversations;
            }
            if ((value == "EXCLUSIVE"))
            {
                return AstKeywordEnum.Exclusive;
            }
            if ((value == "EXECUTABLE"))
            {
                return AstKeywordEnum.Executable;
            }
            if ((value == "EXIST"))
            {
                return AstKeywordEnum.Exist;
            }
            if ((value == "EXPAND"))
            {
                return AstKeywordEnum.Expand;
            }
            if ((value == "EXPIRY_DATE"))
            {
                return AstKeywordEnum.ExpiryDate;
            }
            if ((value == "EXPLICIT"))
            {
                return AstKeywordEnum.Explicit;
            }
            if ((value == "FAIL_OPERATION"))
            {
                return AstKeywordEnum.FailOperation;
            }
            if ((value == "FAILOVER_MODE"))
            {
                return AstKeywordEnum.FailoverMode;
            }
            if ((value == "FAILURE"))
            {
                return AstKeywordEnum.Failure;
            }
            if ((value == "FAILURE_CONDITION_LEVEL"))
            {
                return AstKeywordEnum.FailureConditionLevel;
            }
            if ((value == "FAST"))
            {
                return AstKeywordEnum.Fast;
            }
            if ((value == "FAST_FORWARD"))
            {
                return AstKeywordEnum.FastForward;
            }
            if ((value == "FILE_ID"))
            {
                return AstKeywordEnum.FileId;
            }
            if ((value == "FILE_IDEX"))
            {
                return AstKeywordEnum.FileIdex;
            }
            if ((value == "FILE_NAME"))
            {
                return AstKeywordEnum.FileName;
            }
            if ((value == "FILEGROUP"))
            {
                return AstKeywordEnum.Filegroup;
            }
            if ((value == "FILEGROUP_ID"))
            {
                return AstKeywordEnum.FilegroupId;
            }
            if ((value == "FILEGROUP_NAME"))
            {
                return AstKeywordEnum.FilegroupName;
            }
            if ((value == "FILEGROUPPROPERTY"))
            {
                return AstKeywordEnum.Filegroupproperty;
            }
            if ((value == "FILEGROWTH"))
            {
                return AstKeywordEnum.Filegrowth;
            }
            if ((value == "FILENAME"))
            {
                return AstKeywordEnum.Filename;
            }
            if ((value == "FILEPATH"))
            {
                return AstKeywordEnum.Filepath;
            }
            if ((value == "FILEPROPERTY"))
            {
                return AstKeywordEnum.Fileproperty;
            }
            if ((value == "FILEPROPERTYEX"))
            {
                return AstKeywordEnum.Filepropertyex;
            }
            if ((value == "FILESTREAM"))
            {
                return AstKeywordEnum.Filestream;
            }
            if ((value == "FILTER"))
            {
                return AstKeywordEnum.Filter;
            }
            if ((value == "FIRST"))
            {
                return AstKeywordEnum.First;
            }
            if ((value == "FIRST_VALUE"))
            {
                return AstKeywordEnum.FirstValue;
            }
            if ((value == "FMTONLY"))
            {
                return AstKeywordEnum.Fmtonly;
            }
            if ((value == "FOLLOWING"))
            {
                return AstKeywordEnum.Following;
            }
            if ((value == "FORCE"))
            {
                return AstKeywordEnum.Force;
            }
            if ((value == "FORCE_FAILOVER_ALLOW_DATA_LOSS"))
            {
                return AstKeywordEnum.ForceFailoverAllowDataLoss;
            }
            if ((value == "FORCED"))
            {
                return AstKeywordEnum.Forced;
            }
            if ((value == "FORCEPLAN"))
            {
                return AstKeywordEnum.Forceplan;
            }
            if ((value == "FORCESCAN"))
            {
                return AstKeywordEnum.Forcescan;
            }
            if ((value == "FORMAT"))
            {
                return AstKeywordEnum.Format;
            }
            if ((value == "FORWARD_ONLY"))
            {
                return AstKeywordEnum.ForwardOnly;
            }
            if ((value == "FULLSCAN"))
            {
                return AstKeywordEnum.Fullscan;
            }
            if ((value == "FULLTEXT"))
            {
                return AstKeywordEnum.Fulltext;
            }
            if ((value == "FULLTEXTCATALOGPROPERTY"))
            {
                return AstKeywordEnum.Fulltextcatalogproperty;
            }
            if ((value == "FULLTEXTSERVICEPROPERTY"))
            {
                return AstKeywordEnum.Fulltextserviceproperty;
            }
            if ((value == "GB"))
            {
                return AstKeywordEnum.Gb;
            }
            if ((value == "GENERATED"))
            {
                return AstKeywordEnum.Generated;
            }
            if ((value == "GETDATE"))
            {
                return AstKeywordEnum.Getdate;
            }
            if ((value == "GETUTCDATE"))
            {
                return AstKeywordEnum.Getutcdate;
            }
            if ((value == "GLOBAL"))
            {
                return AstKeywordEnum.Global;
            }
            if ((value == "GO"))
            {
                return AstKeywordEnum.Go;
            }
            if ((value == "GROUP_MAX_REQUESTS"))
            {
                return AstKeywordEnum.GroupMaxRequests;
            }
            if ((value == "GROUPING"))
            {
                return AstKeywordEnum.Grouping;
            }
            if ((value == "GROUPING_ID"))
            {
                return AstKeywordEnum.GroupingId;
            }
            if ((value == "HADR"))
            {
                return AstKeywordEnum.Hadr;
            }
            if ((value == "HASH"))
            {
                return AstKeywordEnum.Hash;
            }
            if ((value == "HEALTH_CHECK_TIMEOUT"))
            {
                return AstKeywordEnum.HealthCheckTimeout;
            }
            if ((value == "HIDDEN_KEYWORD"))
            {
                return AstKeywordEnum.HiddenKeyword;
            }
            if ((value == "HIGH"))
            {
                return AstKeywordEnum.High;
            }
            if ((value == "HONOR_BROKER_PRIORITY"))
            {
                return AstKeywordEnum.HonorBrokerPriority;
            }
            if ((value == "HOURS"))
            {
                return AstKeywordEnum.Hours;
            }
            if ((value == "IDENTITY_VALUE"))
            {
                return AstKeywordEnum.IdentityValue;
            }
            if ((value == "IGNORE_CONSTRAINTS"))
            {
                return AstKeywordEnum.IgnoreConstraints;
            }
            if ((value == "IGNORE_DUP_KEY"))
            {
                return AstKeywordEnum.IgnoreDupKey;
            }
            if ((value == "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX"))
            {
                return AstKeywordEnum.IgnoreNonclusteredColumnstoreIndex;
            }
            if ((value == "IGNORE_TRIGGERS"))
            {
                return AstKeywordEnum.IgnoreTriggers;
            }
            if ((value == "IMMEDIATE"))
            {
                return AstKeywordEnum.Immediate;
            }
            if ((value == "IMPERSONATE"))
            {
                return AstKeywordEnum.Impersonate;
            }
            if ((value == "IMPLICIT_TRANSACTIONS"))
            {
                return AstKeywordEnum.ImplicitTransactions;
            }
            if ((value == "IMPORTANCE"))
            {
                return AstKeywordEnum.Importance;
            }
            if ((value == "INCLUDE_NULL_VALUES"))
            {
                return AstKeywordEnum.IncludeNullValues;
            }
            if ((value == "INCREMENTAL"))
            {
                return AstKeywordEnum.Incremental;
            }
            if ((value == "INDEX_COL"))
            {
                return AstKeywordEnum.IndexCol;
            }
            if ((value == "INDEXKEY_PROPERTY"))
            {
                return AstKeywordEnum.IndexkeyProperty;
            }
            if ((value == "INDEXPROPERTY"))
            {
                return AstKeywordEnum.Indexproperty;
            }
            if ((value == "INITIATOR"))
            {
                return AstKeywordEnum.Initiator;
            }
            if ((value == "INPUT"))
            {
                return AstKeywordEnum.Input;
            }
            if ((value == "INSENSITIVE"))
            {
                return AstKeywordEnum.Insensitive;
            }
            if ((value == "INSERTED"))
            {
                return AstKeywordEnum.Inserted;
            }
            if ((value == "INT"))
            {
                return AstKeywordEnum.Int;
            }
            if ((value == "IP"))
            {
                return AstKeywordEnum.Ip;
            }
            if ((value == "ISOLATION"))
            {
                return AstKeywordEnum.Isolation;
            }
            if ((value == "JOB"))
            {
                return AstKeywordEnum.Job;
            }
            if ((value == "JSON"))
            {
                return AstKeywordEnum.Json;
            }
            if ((value == "KB"))
            {
                return AstKeywordEnum.Kb;
            }
            if ((value == "KEEP"))
            {
                return AstKeywordEnum.Keep;
            }
            if ((value == "KEEPDEFAULTS"))
            {
                return AstKeywordEnum.Keepdefaults;
            }
            if ((value == "KEEPFIXED"))
            {
                return AstKeywordEnum.Keepfixed;
            }
            if ((value == "KEEPIDENTITY"))
            {
                return AstKeywordEnum.Keepidentity;
            }
            if ((value == "KEY_SOURCE"))
            {
                return AstKeywordEnum.KeySource;
            }
            if ((value == "KEYS"))
            {
                return AstKeywordEnum.Keys;
            }
            if ((value == "KEYSET"))
            {
                return AstKeywordEnum.Keyset;
            }
            if ((value == "LAG"))
            {
                return AstKeywordEnum.Lag;
            }
            if ((value == "LAST"))
            {
                return AstKeywordEnum.Last;
            }
            if ((value == "LAST_VALUE"))
            {
                return AstKeywordEnum.LastValue;
            }
            if ((value == "LEAD"))
            {
                return AstKeywordEnum.Lead;
            }
            if ((value == "LEN"))
            {
                return AstKeywordEnum.Len;
            }
            if ((value == "LEVEL"))
            {
                return AstKeywordEnum.Level;
            }
            if ((value == "LIST"))
            {
                return AstKeywordEnum.List;
            }
            if ((value == "LISTENER"))
            {
                return AstKeywordEnum.Listener;
            }
            if ((value == "LISTENER_URL"))
            {
                return AstKeywordEnum.ListenerUrl;
            }
            if ((value == "LOB_COMPACTION"))
            {
                return AstKeywordEnum.LobCompaction;
            }
            if ((value == "LOCAL"))
            {
                return AstKeywordEnum.Local;
            }
            if ((value == "LOCATION"))
            {
                return AstKeywordEnum.Location;
            }
            if ((value == "LOCK"))
            {
                return AstKeywordEnum.Lock;
            }
            if ((value == "LOCK_ESCALATION"))
            {
                return AstKeywordEnum.LockEscalation;
            }
            if ((value == "LOGIN"))
            {
                return AstKeywordEnum.Login;
            }
            if ((value == "LOOP"))
            {
                return AstKeywordEnum.Loop;
            }
            if ((value == "LOW"))
            {
                return AstKeywordEnum.Low;
            }
            if ((value == "LOWER"))
            {
                return AstKeywordEnum.Lower;
            }
            if ((value == "LTRIM"))
            {
                return AstKeywordEnum.Ltrim;
            }
            if ((value == "MANUAL"))
            {
                return AstKeywordEnum.Manual;
            }
            if ((value == "MARK"))
            {
                return AstKeywordEnum.Mark;
            }
            if ((value == "MASKED"))
            {
                return AstKeywordEnum.Masked;
            }
            if ((value == "MATERIALIZED"))
            {
                return AstKeywordEnum.Materialized;
            }
            if ((value == "MAX"))
            {
                return AstKeywordEnum.Max;
            }
            if ((value == "MAX_CPU_PERCENT"))
            {
                return AstKeywordEnum.MaxCpuPercent;
            }
            if ((value == "MAX_DOP"))
            {
                return AstKeywordEnum.MaxDop;
            }
            if ((value == "MAX_FILES"))
            {
                return AstKeywordEnum.MaxFiles;
            }
            if ((value == "MAX_IOPS_PER_VOLUME"))
            {
                return AstKeywordEnum.MaxIopsPerVolume;
            }
            if ((value == "MAX_MEMORY_PERCENT"))
            {
                return AstKeywordEnum.MaxMemoryPercent;
            }
            if ((value == "MAX_PROCESSES"))
            {
                return AstKeywordEnum.MaxProcesses;
            }
            if ((value == "MAX_QUEUE_READERS"))
            {
                return AstKeywordEnum.MaxQueueReaders;
            }
            if ((value == "MAX_ROLLOVER_FILES"))
            {
                return AstKeywordEnum.MaxRolloverFiles;
            }
            if ((value == "MAXDOP"))
            {
                return AstKeywordEnum.Maxdop;
            }
            if ((value == "MAXRECURSION"))
            {
                return AstKeywordEnum.Maxrecursion;
            }
            if ((value == "MAXSIZE"))
            {
                return AstKeywordEnum.Maxsize;
            }
            if ((value == "MB"))
            {
                return AstKeywordEnum.Mb;
            }
            if ((value == "MEDIUM"))
            {
                return AstKeywordEnum.Medium;
            }
            if ((value == "MEMORY_OPTIMIZED_DATA"))
            {
                return AstKeywordEnum.MemoryOptimizedData;
            }
            if ((value == "MESSAGE"))
            {
                return AstKeywordEnum.Message;
            }
            if ((value == "MIN"))
            {
                return AstKeywordEnum.Min;
            }
            if ((value == "MIN_ACTIVE_ROWVERSION"))
            {
                return AstKeywordEnum.MinActiveRowversion;
            }
            if ((value == "MIN_CPU_PERCENT"))
            {
                return AstKeywordEnum.MinCpuPercent;
            }
            if ((value == "MIN_IOPS_PER_VOLUME"))
            {
                return AstKeywordEnum.MinIopsPerVolume;
            }
            if ((value == "MIN_MEMORY_PERCENT"))
            {
                return AstKeywordEnum.MinMemoryPercent;
            }
            if ((value == "MINUTES"))
            {
                return AstKeywordEnum.Minutes;
            }
            if ((value == "MIRROR_ADDRESS"))
            {
                return AstKeywordEnum.MirrorAddress;
            }
            if ((value == "MIXED_PAGE_ALLOCATION"))
            {
                return AstKeywordEnum.MixedPageAllocation;
            }
            if ((value == "MODE"))
            {
                return AstKeywordEnum.Mode;
            }
            if ((value == "MODIFY"))
            {
                return AstKeywordEnum.Modify;
            }
            if ((value == "MOVE"))
            {
                return AstKeywordEnum.Move;
            }
            if ((value == "MULTI_USER"))
            {
                return AstKeywordEnum.MultiUser;
            }
            if ((value == "NAME"))
            {
                return AstKeywordEnum.Name;
            }
            if ((value == "NCHAR"))
            {
                return AstKeywordEnum.Nchar;
            }
            if ((value == "NESTED_TRIGGERS"))
            {
                return AstKeywordEnum.NestedTriggers;
            }
            if ((value == "NEW_ACCOUNT"))
            {
                return AstKeywordEnum.NewAccount;
            }
            if ((value == "NEW_BROKER"))
            {
                return AstKeywordEnum.NewBroker;
            }
            if ((value == "NEW_PASSWORD"))
            {
                return AstKeywordEnum.NewPassword;
            }
            if ((value == "NEWNAME"))
            {
                return AstKeywordEnum.Newname;
            }
            if ((value == "NEXT"))
            {
                return AstKeywordEnum.Next;
            }
            if ((value == "NO"))
            {
                return AstKeywordEnum.No;
            }
            if ((value == "NO_TRUNCATE"))
            {
                return AstKeywordEnum.NoTruncate;
            }
            if ((value == "NO_WAIT"))
            {
                return AstKeywordEnum.NoWait;
            }
            if ((value == "NOCOUNT"))
            {
                return AstKeywordEnum.Nocount;
            }
            if ((value == "NODES"))
            {
                return AstKeywordEnum.Nodes;
            }
            if ((value == "NOEXEC"))
            {
                return AstKeywordEnum.Noexec;
            }
            if ((value == "NOEXPAND"))
            {
                return AstKeywordEnum.Noexpand;
            }
            if ((value == "NOLOCK"))
            {
                return AstKeywordEnum.Nolock;
            }
            if ((value == "NON_TRANSACTED_ACCESS"))
            {
                return AstKeywordEnum.NonTransactedAccess;
            }
            if ((value == "NORECOMPUTE"))
            {
                return AstKeywordEnum.Norecompute;
            }
            if ((value == "NORECOVERY"))
            {
                return AstKeywordEnum.Norecovery;
            }
            if ((value == "NOTIFICATIONS"))
            {
                return AstKeywordEnum.Notifications;
            }
            if ((value == "NOWAIT"))
            {
                return AstKeywordEnum.Nowait;
            }
            if ((value == "NTILE"))
            {
                return AstKeywordEnum.Ntile;
            }
            if ((value == "NULL_DOUBLE_QUOTE"))
            {
                return AstKeywordEnum.NullDoubleQuote;
            }
            if ((value == "NUMANODE"))
            {
                return AstKeywordEnum.Numanode;
            }
            if ((value == "NUMBER"))
            {
                return AstKeywordEnum.Number;
            }
            if ((value == "NUMERIC_ROUNDABORT"))
            {
                return AstKeywordEnum.NumericRoundabort;
            }
            if ((value == "OBJECT"))
            {
                return AstKeywordEnum.Object;
            }
            if ((value == "OBJECT_DEFINITION"))
            {
                return AstKeywordEnum.ObjectDefinition;
            }
            if ((value == "OBJECT_ID"))
            {
                return AstKeywordEnum.ObjectId;
            }
            if ((value == "OBJECT_NAME"))
            {
                return AstKeywordEnum.ObjectName;
            }
            if ((value == "OBJECT_SCHEMA_NAME"))
            {
                return AstKeywordEnum.ObjectSchemaName;
            }
            if ((value == "OBJECTPROPERTY"))
            {
                return AstKeywordEnum.Objectproperty;
            }
            if ((value == "OBJECTPROPERTYEX"))
            {
                return AstKeywordEnum.Objectpropertyex;
            }
            if ((value == "OFFLINE"))
            {
                return AstKeywordEnum.Offline;
            }
            if ((value == "OFFSET"))
            {
                return AstKeywordEnum.Offset;
            }
            if ((value == "OLD_ACCOUNT"))
            {
                return AstKeywordEnum.OldAccount;
            }
            if ((value == "ONLINE"))
            {
                return AstKeywordEnum.Online;
            }
            if ((value == "ONLY"))
            {
                return AstKeywordEnum.Only;
            }
            if ((value == "OPEN_EXISTING"))
            {
                return AstKeywordEnum.OpenExisting;
            }
            if ((value == "OPENJSON"))
            {
                return AstKeywordEnum.Openjson;
            }
            if ((value == "OPTIMISTIC"))
            {
                return AstKeywordEnum.Optimistic;
            }
            if ((value == "OPTIMIZE"))
            {
                return AstKeywordEnum.Optimize;
            }
            if ((value == "OPTIMIZE_FOR_SEQUENTIAL_KEY"))
            {
                return AstKeywordEnum.OptimizeForSequentialKey;
            }
            if ((value == "ORIGINAL_DB_NAME"))
            {
                return AstKeywordEnum.OriginalDbName;
            }
            if ((value == "OUT"))
            {
                return AstKeywordEnum.Out;
            }
            if ((value == "OUTPUT"))
            {
                return AstKeywordEnum.Output;
            }
            if ((value == "OVERRIDE"))
            {
                return AstKeywordEnum.Override;
            }
            if ((value == "OWNER"))
            {
                return AstKeywordEnum.Owner;
            }
            if ((value == "OWNERSHIP"))
            {
                return AstKeywordEnum.Ownership;
            }
            if ((value == "PAD_INDEX"))
            {
                return AstKeywordEnum.PadIndex;
            }
            if ((value == "PAGE_VERIFY"))
            {
                return AstKeywordEnum.PageVerify;
            }
            if ((value == "PAGECOUNT"))
            {
                return AstKeywordEnum.Pagecount;
            }
            if ((value == "PAGLOCK"))
            {
                return AstKeywordEnum.Paglock;
            }
            if ((value == "PARAMETERIZATION"))
            {
                return AstKeywordEnum.Parameterization;
            }
            if ((value == "PARSENAME"))
            {
                return AstKeywordEnum.Parsename;
            }
            if ((value == "PARSEONLY"))
            {
                return AstKeywordEnum.Parseonly;
            }
            if ((value == "PARTITION"))
            {
                return AstKeywordEnum.Partition;
            }
            if ((value == "PARTITIONS"))
            {
                return AstKeywordEnum.Partitions;
            }
            if ((value == "PARTNER"))
            {
                return AstKeywordEnum.Partner;
            }
            if ((value == "PATH"))
            {
                return AstKeywordEnum.Path;
            }
            if ((value == "PATINDEX"))
            {
                return AstKeywordEnum.Patindex;
            }
            if ((value == "PAUSE"))
            {
                return AstKeywordEnum.Pause;
            }
            if ((value == "PERCENT_RANK"))
            {
                return AstKeywordEnum.PercentRank;
            }
            if ((value == "PERCENTILE_CONT"))
            {
                return AstKeywordEnum.PercentileCont;
            }
            if ((value == "PERCENTILE_DISC"))
            {
                return AstKeywordEnum.PercentileDisc;
            }
            if ((value == "PERSIST_SAMPLE_PERCENT"))
            {
                return AstKeywordEnum.PersistSamplePercent;
            }
            if ((value == "POISON_MESSAGE_HANDLING"))
            {
                return AstKeywordEnum.PoisonMessageHandling;
            }
            if ((value == "POOL"))
            {
                return AstKeywordEnum.Pool;
            }
            if ((value == "PORT"))
            {
                return AstKeywordEnum.Port;
            }
            if ((value == "PRECEDING"))
            {
                return AstKeywordEnum.Preceding;
            }
            if ((value == "PRIMARY_ROLE"))
            {
                return AstKeywordEnum.PrimaryRole;
            }
            if ((value == "PRIOR"))
            {
                return AstKeywordEnum.Prior;
            }
            if ((value == "PRIORITY"))
            {
                return AstKeywordEnum.Priority;
            }
            if ((value == "PRIORITY_LEVEL"))
            {
                return AstKeywordEnum.PriorityLevel;
            }
            if ((value == "PRIVATE"))
            {
                return AstKeywordEnum.Private;
            }
            if ((value == "PRIVATE_KEY"))
            {
                return AstKeywordEnum.PrivateKey;
            }
            if ((value == "PRIVILEGES"))
            {
                return AstKeywordEnum.Privileges;
            }
            if ((value == "PROCEDURE_NAME"))
            {
                return AstKeywordEnum.ProcedureName;
            }
            if ((value == "PROPERTY"))
            {
                return AstKeywordEnum.Property;
            }
            if ((value == "PROVIDER"))
            {
                return AstKeywordEnum.Provider;
            }
            if ((value == "PROVIDER_KEY_NAME"))
            {
                return AstKeywordEnum.ProviderKeyName;
            }
            if ((value == "QUERY"))
            {
                return AstKeywordEnum.Query;
            }
            if ((value == "QUEUE"))
            {
                return AstKeywordEnum.Queue;
            }
            if ((value == "QUEUE_DELAY"))
            {
                return AstKeywordEnum.QueueDelay;
            }
            if ((value == "QUOTED_IDENTIFIER"))
            {
                return AstKeywordEnum.QuotedIdentifier;
            }
            if ((value == "QUOTENAME"))
            {
                return AstKeywordEnum.Quotename;
            }
            if ((value == "RANDOMIZED"))
            {
                return AstKeywordEnum.Randomized;
            }
            if ((value == "RANGE"))
            {
                return AstKeywordEnum.Range;
            }
            if ((value == "RANK"))
            {
                return AstKeywordEnum.Rank;
            }
            if ((value == "RC2"))
            {
                return AstKeywordEnum.Rc2;
            }
            if ((value == "RC4"))
            {
                return AstKeywordEnum.Rc4;
            }
            if ((value == "RC4_128"))
            {
                return AstKeywordEnum.Rc4128;
            }
            if ((value == "READ_COMMITTED_SNAPSHOT"))
            {
                return AstKeywordEnum.ReadCommittedSnapshot;
            }
            if ((value == "READ_ONLY"))
            {
                return AstKeywordEnum.ReadOnly;
            }
            if ((value == "READ_ONLY_ROUTING_LIST"))
            {
                return AstKeywordEnum.ReadOnlyRoutingList;
            }
            if ((value == "READ_WRITE"))
            {
                return AstKeywordEnum.ReadWrite;
            }
            if ((value == "READCOMMITTED"))
            {
                return AstKeywordEnum.Readcommitted;
            }
            if ((value == "READCOMMITTEDLOCK"))
            {
                return AstKeywordEnum.Readcommittedlock;
            }
            if ((value == "READONLY"))
            {
                return AstKeywordEnum.Readonly;
            }
            if ((value == "READPAST"))
            {
                return AstKeywordEnum.Readpast;
            }
            if ((value == "READUNCOMMITTED"))
            {
                return AstKeywordEnum.Readuncommitted;
            }
            if ((value == "READWRITE"))
            {
                return AstKeywordEnum.Readwrite;
            }
            if ((value == "REBUILD"))
            {
                return AstKeywordEnum.Rebuild;
            }
            if ((value == "RECEIVE"))
            {
                return AstKeywordEnum.Receive;
            }
            if ((value == "RECOMPILE"))
            {
                return AstKeywordEnum.Recompile;
            }
            if ((value == "RECOVERY"))
            {
                return AstKeywordEnum.Recovery;
            }
            if ((value == "RECURSIVE_TRIGGERS"))
            {
                return AstKeywordEnum.RecursiveTriggers;
            }
            if ((value == "RELATIVE"))
            {
                return AstKeywordEnum.Relative;
            }
            if ((value == "REMOTE"))
            {
                return AstKeywordEnum.Remote;
            }
            if ((value == "REMOTE_PROC_TRANSACTIONS"))
            {
                return AstKeywordEnum.RemoteProcTransactions;
            }
            if ((value == "REMOTE_SERVICE_NAME"))
            {
                return AstKeywordEnum.RemoteServiceName;
            }
            if ((value == "REMOVE"))
            {
                return AstKeywordEnum.Remove;
            }
            if ((value == "REORGANIZE"))
            {
                return AstKeywordEnum.Reorganize;
            }
            if ((value == "REPEATABLE"))
            {
                return AstKeywordEnum.Repeatable;
            }
            if ((value == "REPEATABLEREAD"))
            {
                return AstKeywordEnum.Repeatableread;
            }
            if ((value == "REPLACE"))
            {
                return AstKeywordEnum.Replace;
            }
            if ((value == "REPLICA"))
            {
                return AstKeywordEnum.Replica;
            }
            if ((value == "REPLICATE"))
            {
                return AstKeywordEnum.Replicate;
            }
            if ((value == "REQUEST_MAX_CPU_TIME_SEC"))
            {
                return AstKeywordEnum.RequestMaxCpuTimeSec;
            }
            if ((value == "REQUEST_MAX_MEMORY_GRANT_PERCENT"))
            {
                return AstKeywordEnum.RequestMaxMemoryGrantPercent;
            }
            if ((value == "REQUEST_MEMORY_GRANT_TIMEOUT_SEC"))
            {
                return AstKeywordEnum.RequestMemoryGrantTimeoutSec;
            }
            if ((value == "REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT"))
            {
                return AstKeywordEnum.RequiredSynchronizedSecondariesToCommit;
            }
            if ((value == "RESAMPLE"))
            {
                return AstKeywordEnum.Resample;
            }
            if ((value == "RESERVE_DISK_SPACE"))
            {
                return AstKeywordEnum.ReserveDiskSpace;
            }
            if ((value == "RESOURCE"))
            {
                return AstKeywordEnum.Resource;
            }
            if ((value == "RESOURCE_MANAGER_LOCATION"))
            {
                return AstKeywordEnum.ResourceManagerLocation;
            }
            if ((value == "RESTRICTED_USER"))
            {
                return AstKeywordEnum.RestrictedUser;
            }
            if ((value == "RESUMABLE"))
            {
                return AstKeywordEnum.Resumable;
            }
            if ((value == "RETENTION"))
            {
                return AstKeywordEnum.Retention;
            }
            if ((value == "REVERSE"))
            {
                return AstKeywordEnum.Reverse;
            }
            if ((value == "ROBUST"))
            {
                return AstKeywordEnum.Robust;
            }
            if ((value == "ROOT"))
            {
                return AstKeywordEnum.Root;
            }
            if ((value == "ROUTE"))
            {
                return AstKeywordEnum.Route;
            }
            if ((value == "ROW"))
            {
                return AstKeywordEnum.Row;
            }
            if ((value == "ROW_NUMBER"))
            {
                return AstKeywordEnum.RowNumber;
            }
            if ((value == "ROWGUID"))
            {
                return AstKeywordEnum.Rowguid;
            }
            if ((value == "ROWLOCK"))
            {
                return AstKeywordEnum.Rowlock;
            }
            if ((value == "ROWS"))
            {
                return AstKeywordEnum.Rows;
            }
            if ((value == "RTRIM"))
            {
                return AstKeywordEnum.Rtrim;
            }
            if ((value == "SAMPLE"))
            {
                return AstKeywordEnum.Sample;
            }
            if ((value == "SCHEMA_ID"))
            {
                return AstKeywordEnum.SchemaId;
            }
            if ((value == "SCHEMA_NAME"))
            {
                return AstKeywordEnum.SchemaName;
            }
            if ((value == "SCHEMABINDING"))
            {
                return AstKeywordEnum.Schemabinding;
            }
            if ((value == "SCOPE_IDENTITY"))
            {
                return AstKeywordEnum.ScopeIdentity;
            }
            if ((value == "SCOPED"))
            {
                return AstKeywordEnum.Scoped;
            }
            if ((value == "SCROLL"))
            {
                return AstKeywordEnum.Scroll;
            }
            if ((value == "SCROLL_LOCKS"))
            {
                return AstKeywordEnum.ScrollLocks;
            }
            if ((value == "SEARCH"))
            {
                return AstKeywordEnum.Search;
            }
            if ((value == "SECONDARY"))
            {
                return AstKeywordEnum.Secondary;
            }
            if ((value == "SECONDARY_ONLY"))
            {
                return AstKeywordEnum.SecondaryOnly;
            }
            if ((value == "SECONDARY_ROLE"))
            {
                return AstKeywordEnum.SecondaryRole;
            }
            if ((value == "SECONDS"))
            {
                return AstKeywordEnum.Seconds;
            }
            if ((value == "SECRET"))
            {
                return AstKeywordEnum.Secret;
            }
            if ((value == "SECURABLES"))
            {
                return AstKeywordEnum.Securables;
            }
            if ((value == "SECURITY"))
            {
                return AstKeywordEnum.Security;
            }
            if ((value == "SECURITY_LOG"))
            {
                return AstKeywordEnum.SecurityLog;
            }
            if ((value == "SEEDING_MODE"))
            {
                return AstKeywordEnum.SeedingMode;
            }
            if ((value == "SELF"))
            {
                return AstKeywordEnum.Self;
            }
            if ((value == "SEMI_SENSITIVE"))
            {
                return AstKeywordEnum.SemiSensitive;
            }
            if ((value == "SEND"))
            {
                return AstKeywordEnum.Send;
            }
            if ((value == "SENT"))
            {
                return AstKeywordEnum.Sent;
            }
            if ((value == "SEQUENCE"))
            {
                return AstKeywordEnum.Sequence;
            }
            if ((value == "SEQUENCE_NUMBER"))
            {
                return AstKeywordEnum.SequenceNumber;
            }
            if ((value == "SERIALIZABLE"))
            {
                return AstKeywordEnum.Serializable;
            }
            if ((value == "SERVERPROPERTY"))
            {
                return AstKeywordEnum.Serverproperty;
            }
            if ((value == "SESSION_TIMEOUT"))
            {
                return AstKeywordEnum.SessionTimeout;
            }
            if ((value == "SETERROR"))
            {
                return AstKeywordEnum.Seterror;
            }
            if ((value == "SHARE"))
            {
                return AstKeywordEnum.Share;
            }
            if ((value == "SHARED"))
            {
                return AstKeywordEnum.Shared;
            }
            if ((value == "SHOWPLAN"))
            {
                return AstKeywordEnum.Showplan;
            }
            if ((value == "SHOWPLAN_ALL"))
            {
                return AstKeywordEnum.ShowplanAll;
            }
            if ((value == "SHOWPLAN_TEXT"))
            {
                return AstKeywordEnum.ShowplanText;
            }
            if ((value == "SHOWPLAN_XML"))
            {
                return AstKeywordEnum.ShowplanXml;
            }
            if ((value == "SIGNATURE"))
            {
                return AstKeywordEnum.Signature;
            }
            if ((value == "SIMPLE"))
            {
                return AstKeywordEnum.Simple;
            }
            if ((value == "SINGLE_USER"))
            {
                return AstKeywordEnum.SingleUser;
            }
            if ((value == "SIZE"))
            {
                return AstKeywordEnum.Size;
            }
            if ((value == "SMALLINT"))
            {
                return AstKeywordEnum.Smallint;
            }
            if ((value == "SNAPSHOT"))
            {
                return AstKeywordEnum.Snapshot;
            }
            if ((value == "SORT_IN_TEMPDB"))
            {
                return AstKeywordEnum.SortInTempdb;
            }
            if ((value == "SOUNDEX"))
            {
                return AstKeywordEnum.Soundex;
            }
            if ((value == "SPACE_KEYWORD"))
            {
                return AstKeywordEnum.SpaceKeyword;
            }
            if ((value == "SPARSE"))
            {
                return AstKeywordEnum.Sparse;
            }
            if ((value == "SPATIAL_WINDOW_MAX_CELLS"))
            {
                return AstKeywordEnum.SpatialWindowMaxCells;
            }
            if ((value == "STANDBY"))
            {
                return AstKeywordEnum.Standby;
            }
            if ((value == "START_DATE"))
            {
                return AstKeywordEnum.StartDate;
            }
            if ((value == "STATIC"))
            {
                return AstKeywordEnum.Static;
            }
            if ((value == "STATISTICS_INCREMENTAL"))
            {
                return AstKeywordEnum.StatisticsIncremental;
            }
            if ((value == "STATISTICS_NORECOMPUTE"))
            {
                return AstKeywordEnum.StatisticsNorecompute;
            }
            if ((value == "STATS_DATE"))
            {
                return AstKeywordEnum.StatsDate;
            }
            if ((value == "STATS_STREAM"))
            {
                return AstKeywordEnum.StatsStream;
            }
            if ((value == "STATUS"))
            {
                return AstKeywordEnum.Status;
            }
            if ((value == "STATUSONLY"))
            {
                return AstKeywordEnum.Statusonly;
            }
            if ((value == "STDEV"))
            {
                return AstKeywordEnum.Stdev;
            }
            if ((value == "STDEVP"))
            {
                return AstKeywordEnum.Stdevp;
            }
            if ((value == "STOPLIST"))
            {
                return AstKeywordEnum.Stoplist;
            }
            if ((value == "STR"))
            {
                return AstKeywordEnum.Str;
            }
            if ((value == "STRING_AGG"))
            {
                return AstKeywordEnum.StringAgg;
            }
            if ((value == "STRING_ESCAPE"))
            {
                return AstKeywordEnum.StringEscape;
            }
            if ((value == "STUFF"))
            {
                return AstKeywordEnum.Stuff;
            }
            if ((value == "SUBJECT"))
            {
                return AstKeywordEnum.Subject;
            }
            if ((value == "SUBSCRIBE"))
            {
                return AstKeywordEnum.Subscribe;
            }
            if ((value == "SUBSCRIPTION"))
            {
                return AstKeywordEnum.Subscription;
            }
            if ((value == "SUBSTRING"))
            {
                return AstKeywordEnum.Substring;
            }
            if ((value == "SUM"))
            {
                return AstKeywordEnum.Sum;
            }
            if ((value == "SUSPEND"))
            {
                return AstKeywordEnum.Suspend;
            }
            if ((value == "SYMMETRIC"))
            {
                return AstKeywordEnum.Symmetric;
            }
            if ((value == "SYNCHRONOUS_COMMIT"))
            {
                return AstKeywordEnum.SynchronousCommit;
            }
            if ((value == "SYNONYM"))
            {
                return AstKeywordEnum.Synonym;
            }
            if ((value == "SYSTEM"))
            {
                return AstKeywordEnum.System;
            }
            if ((value == "TABLOCK"))
            {
                return AstKeywordEnum.Tablock;
            }
            if ((value == "TABLOCKX"))
            {
                return AstKeywordEnum.Tablockx;
            }
            if ((value == "TAKE"))
            {
                return AstKeywordEnum.Take;
            }
            if ((value == "TARGET_RECOVERY_TIME"))
            {
                return AstKeywordEnum.TargetRecoveryTime;
            }
            if ((value == "TB"))
            {
                return AstKeywordEnum.Tb;
            }
            if ((value == "TEXTIMAGE_ON"))
            {
                return AstKeywordEnum.TextimageOn;
            }
            if ((value == "THROW"))
            {
                return AstKeywordEnum.Throw;
            }
            if ((value == "TIES"))
            {
                return AstKeywordEnum.Ties;
            }
            if ((value == "TIME"))
            {
                return AstKeywordEnum.Time;
            }
            if ((value == "TIMEOUT"))
            {
                return AstKeywordEnum.Timeout;
            }
            if ((value == "TIMER"))
            {
                return AstKeywordEnum.Timer;
            }
            if ((value == "TINYINT"))
            {
                return AstKeywordEnum.Tinyint;
            }
            if ((value == "TORN_PAGE_DETECTION"))
            {
                return AstKeywordEnum.TornPageDetection;
            }
            if ((value == "TRACKING"))
            {
                return AstKeywordEnum.Tracking;
            }
            if ((value == "TRANSACTION_ID"))
            {
                return AstKeywordEnum.TransactionId;
            }
            if ((value == "TRANSFORM_NOISE_WORDS"))
            {
                return AstKeywordEnum.TransformNoiseWords;
            }
            if ((value == "TRANSLATE"))
            {
                return AstKeywordEnum.Translate;
            }
            if ((value == "TRIM"))
            {
                return AstKeywordEnum.Trim;
            }
            if ((value == "TRIPLE_DES"))
            {
                return AstKeywordEnum.TripleDes;
            }
            if ((value == "TRIPLE_DES_3KEY"))
            {
                return AstKeywordEnum.TripleDes3key;
            }
            if ((value == "TRUSTWORTHY"))
            {
                return AstKeywordEnum.Trustworthy;
            }
            if ((value == "TRY"))
            {
                return AstKeywordEnum.Try;
            }
            if ((value == "TSQL"))
            {
                return AstKeywordEnum.Tsql;
            }
            if ((value == "TWO_DIGIT_YEAR_CUTOFF"))
            {
                return AstKeywordEnum.TwoDigitYearCutoff;
            }
            if ((value == "TYPE"))
            {
                return AstKeywordEnum.Type;
            }
            if ((value == "TYPE_ID"))
            {
                return AstKeywordEnum.TypeId;
            }
            if ((value == "TYPE_NAME"))
            {
                return AstKeywordEnum.TypeName;
            }
            if ((value == "TYPE_WARNING"))
            {
                return AstKeywordEnum.TypeWarning;
            }
            if ((value == "TYPEPROPERTY"))
            {
                return AstKeywordEnum.Typeproperty;
            }
            if ((value == "UNBOUNDED"))
            {
                return AstKeywordEnum.Unbounded;
            }
            if ((value == "UNCOMMITTED"))
            {
                return AstKeywordEnum.Uncommitted;
            }
            if ((value == "UNICODE"))
            {
                return AstKeywordEnum.Unicode;
            }
            if ((value == "UNKNOWN"))
            {
                return AstKeywordEnum.Unknown;
            }
            if ((value == "UNLIMITED"))
            {
                return AstKeywordEnum.Unlimited;
            }
            if ((value == "UNMASK"))
            {
                return AstKeywordEnum.Unmask;
            }
            if ((value == "UOW"))
            {
                return AstKeywordEnum.Uow;
            }
            if ((value == "UPDLOCK"))
            {
                return AstKeywordEnum.Updlock;
            }
            if ((value == "UPPER"))
            {
                return AstKeywordEnum.Upper;
            }
            if ((value == "USING"))
            {
                return AstKeywordEnum.Using;
            }
            if ((value == "VALID_XML"))
            {
                return AstKeywordEnum.ValidXml;
            }
            if ((value == "VALIDATION"))
            {
                return AstKeywordEnum.Validation;
            }
            if ((value == "VALUE"))
            {
                return AstKeywordEnum.Value;
            }
            if ((value == "VAR"))
            {
                return AstKeywordEnum.Var;
            }
            if ((value == "VARBINARY_KEYWORD"))
            {
                return AstKeywordEnum.VarbinaryKeyword;
            }
            if ((value == "VARP"))
            {
                return AstKeywordEnum.Varp;
            }
            if ((value == "VERSION"))
            {
                return AstKeywordEnum.Version;
            }
            if ((value == "VIEW_METADATA"))
            {
                return AstKeywordEnum.ViewMetadata;
            }
            if ((value == "VIEWS"))
            {
                return AstKeywordEnum.Views;
            }
            if ((value == "WAIT"))
            {
                return AstKeywordEnum.Wait;
            }
            if ((value == "WELL_FORMED_XML"))
            {
                return AstKeywordEnum.WellFormedXml;
            }
            if ((value == "WITHOUT_ARRAY_WRAPPER"))
            {
                return AstKeywordEnum.WithoutArrayWrapper;
            }
            if ((value == "WORK"))
            {
                return AstKeywordEnum.Work;
            }
            if ((value == "WORKLOAD"))
            {
                return AstKeywordEnum.Workload;
            }
            if ((value == "XLOCK"))
            {
                return AstKeywordEnum.Xlock;
            }
            if ((value == "XML"))
            {
                return AstKeywordEnum.Xml;
            }
            if ((value == "XML_COMPRESSION"))
            {
                return AstKeywordEnum.XmlCompression;
            }
            if ((value == "XMLDATA"))
            {
                return AstKeywordEnum.Xmldata;
            }
            if ((value == "XMLNAMESPACES"))
            {
                return AstKeywordEnum.Xmlnamespaces;
            }
            if ((value == "XMLSCHEMA"))
            {
                return AstKeywordEnum.Xmlschema;
            }
            if ((value == "XSINIL"))
            {
                return AstKeywordEnum.Xsinil;
            }
            if ((value == "ZONE"))
            {
                return AstKeywordEnum.Zone;
            }
            if ((value == "ABORT_AFTER_WAIT"))
            {
                return AstKeywordEnum.AbortAfterWait;
            }
            if ((value == "ABSENT"))
            {
                return AstKeywordEnum.Absent;
            }
            if ((value == "ADMINISTER"))
            {
                return AstKeywordEnum.Administer;
            }
            if ((value == "AES"))
            {
                return AstKeywordEnum.Aes;
            }
            if ((value == "ALLOW_CONNECTIONS"))
            {
                return AstKeywordEnum.AllowConnections;
            }
            if ((value == "ALLOW_MULTIPLE_EVENT_LOSS"))
            {
                return AstKeywordEnum.AllowMultipleEventLoss;
            }
            if ((value == "ALLOW_SINGLE_EVENT_LOSS"))
            {
                return AstKeywordEnum.AllowSingleEventLoss;
            }
            if ((value == "ANONYMOUS"))
            {
                return AstKeywordEnum.Anonymous;
            }
            if ((value == "APPEND"))
            {
                return AstKeywordEnum.Append;
            }
            if ((value == "APPLICATION"))
            {
                return AstKeywordEnum.Application;
            }
            if ((value == "ASYMMETRIC"))
            {
                return AstKeywordEnum.Asymmetric;
            }
            if ((value == "ASYNCHRONOUS_COMMIT"))
            {
                return AstKeywordEnum.AsynchronousCommit;
            }
            if ((value == "AUTHENTICATE"))
            {
                return AstKeywordEnum.Authenticate;
            }
            if ((value == "AUTHENTICATION"))
            {
                return AstKeywordEnum.Authentication;
            }
            if ((value == "AUTOMATED_BACKUP_PREFERENCE"))
            {
                return AstKeywordEnum.AutomatedBackupPreference;
            }
            if ((value == "AUTOMATIC"))
            {
                return AstKeywordEnum.Automatic;
            }
            if ((value == "AVAILABILITY_MODE"))
            {
                return AstKeywordEnum.AvailabilityMode;
            }
            if ((value == "BEFORE"))
            {
                return AstKeywordEnum.Before;
            }
            if ((value == "BLOCK"))
            {
                return AstKeywordEnum.Block;
            }
            if ((value == "BLOCKERS"))
            {
                return AstKeywordEnum.Blockers;
            }
            if ((value == "BLOCKSIZE"))
            {
                return AstKeywordEnum.Blocksize;
            }
            if ((value == "BLOCKING_HIERARCHY"))
            {
                return AstKeywordEnum.BlockingHierarchy;
            }
            if ((value == "BUFFER"))
            {
                return AstKeywordEnum.Buffer;
            }
            if ((value == "BUFFERCOUNT"))
            {
                return AstKeywordEnum.Buffercount;
            }
            if ((value == "CACHE"))
            {
                return AstKeywordEnum.Cache;
            }
            if ((value == "CALLED"))
            {
                return AstKeywordEnum.Called;
            }
            if ((value == "CERTIFICATE"))
            {
                return AstKeywordEnum.Certificate;
            }
            if ((value == "CHANGETABLE"))
            {
                return AstKeywordEnum.Changetable;
            }
            if ((value == "CHANGES"))
            {
                return AstKeywordEnum.Changes;
            }
            if ((value == "CHECK_POLICY"))
            {
                return AstKeywordEnum.CheckPolicy;
            }
            if ((value == "CHECK_EXPIRATION"))
            {
                return AstKeywordEnum.CheckExpiration;
            }
            if ((value == "CLASSIFIER_FUNCTION"))
            {
                return AstKeywordEnum.ClassifierFunction;
            }
            if ((value == "CLUSTER"))
            {
                return AstKeywordEnum.Cluster;
            }
            if ((value == "COMPRESS"))
            {
                return AstKeywordEnum.Compress;
            }
            if ((value == "COMPRESSION"))
            {
                return AstKeywordEnum.Compression;
            }
            if ((value == "CONNECT"))
            {
                return AstKeywordEnum.Connect;
            }
            if ((value == "CONNECTION"))
            {
                return AstKeywordEnum.Connection;
            }
            if ((value == "CONFIGURATION"))
            {
                return AstKeywordEnum.Configuration;
            }
            if ((value == "CONNECTIONPROPERTY"))
            {
                return AstKeywordEnum.Connectionproperty;
            }
            if ((value == "CONTAINMENT"))
            {
                return AstKeywordEnum.Containment;
            }
            if ((value == "CONTEXT"))
            {
                return AstKeywordEnum.Context;
            }
            if ((value == "CONTEXT_INFO"))
            {
                return AstKeywordEnum.ContextInfo;
            }
            if ((value == "CONTINUE_AFTER_ERROR"))
            {
                return AstKeywordEnum.ContinueAfterError;
            }
            if ((value == "CONTRACT"))
            {
                return AstKeywordEnum.Contract;
            }
            if ((value == "CONTRACT_NAME"))
            {
                return AstKeywordEnum.ContractName;
            }
            if ((value == "CONVERSATION"))
            {
                return AstKeywordEnum.Conversation;
            }
            if ((value == "COPY_ONLY"))
            {
                return AstKeywordEnum.CopyOnly;
            }
            if ((value == "CURRENT_REQUEST_ID"))
            {
                return AstKeywordEnum.CurrentRequestId;
            }
            if ((value == "CURRENT_TRANSACTION_ID"))
            {
                return AstKeywordEnum.CurrentTransactionId;
            }
            if ((value == "CYCLE"))
            {
                return AstKeywordEnum.Cycle;
            }
            if ((value == "DATA_COMPRESSION"))
            {
                return AstKeywordEnum.DataCompression;
            }
            if ((value == "DATA_SOURCE"))
            {
                return AstKeywordEnum.DataSource;
            }
            if ((value == "DATABASE_MIRRORING"))
            {
                return AstKeywordEnum.DatabaseMirroring;
            }
            if ((value == "DATASPACE"))
            {
                return AstKeywordEnum.Dataspace;
            }
            if ((value == "DDL"))
            {
                return AstKeywordEnum.Ddl;
            }
            if ((value == "DECOMPRESS"))
            {
                return AstKeywordEnum.Decompress;
            }
            if ((value == "DEFAULT_DATABASE"))
            {
                return AstKeywordEnum.DefaultDatabase;
            }
            if ((value == "DEFAULT_SCHEMA"))
            {
                return AstKeywordEnum.DefaultSchema;
            }
            if ((value == "DIAGNOSTICS"))
            {
                return AstKeywordEnum.Diagnostics;
            }
            if ((value == "DIFFERENTIAL"))
            {
                return AstKeywordEnum.Differential;
            }
            if ((value == "DISTRIBUTION"))
            {
                return AstKeywordEnum.Distribution;
            }
            if ((value == "DTC_SUPPORT"))
            {
                return AstKeywordEnum.DtcSupport;
            }
            if ((value == "ENABLED"))
            {
                return AstKeywordEnum.Enabled;
            }
            if ((value == "ENDPOINT"))
            {
                return AstKeywordEnum.Endpoint;
            }
            if ((value == "ERROR"))
            {
                return AstKeywordEnum.Error;
            }
            if ((value == "ERROR_LINE"))
            {
                return AstKeywordEnum.ErrorLine;
            }
            if ((value == "ERROR_MESSAGE"))
            {
                return AstKeywordEnum.ErrorMessage;
            }
            if ((value == "ERROR_NUMBER"))
            {
                return AstKeywordEnum.ErrorNumber;
            }
            if ((value == "ERROR_PROCEDURE"))
            {
                return AstKeywordEnum.ErrorProcedure;
            }
            if ((value == "ERROR_SEVERITY"))
            {
                return AstKeywordEnum.ErrorSeverity;
            }
            if ((value == "ERROR_STATE"))
            {
                return AstKeywordEnum.ErrorState;
            }
            if ((value == "EVENT"))
            {
                return AstKeywordEnum.Event;
            }
            if ((value == "EVENTDATA"))
            {
                return AstKeywordEnum.Eventdata;
            }
            if ((value == "EVENT_RETENTION_MODE"))
            {
                return AstKeywordEnum.EventRetentionMode;
            }
            if ((value == "EXECUTABLE_FILE"))
            {
                return AstKeywordEnum.ExecutableFile;
            }
            if ((value == "EXPIREDATE"))
            {
                return AstKeywordEnum.Expiredate;
            }
            if ((value == "EXTENSION"))
            {
                return AstKeywordEnum.Extension;
            }
            if ((value == "EXTERNAL_ACCESS"))
            {
                return AstKeywordEnum.ExternalAccess;
            }
            if ((value == "FAILOVER"))
            {
                return AstKeywordEnum.Failover;
            }
            if ((value == "FAILURECONDITIONLEVEL"))
            {
                return AstKeywordEnum.Failureconditionlevel;
            }
            if ((value == "FAN_IN"))
            {
                return AstKeywordEnum.FanIn;
            }
            if ((value == "FILE_SNAPSHOT"))
            {
                return AstKeywordEnum.FileSnapshot;
            }
            if ((value == "FORCESEEK"))
            {
                return AstKeywordEnum.Forceseek;
            }
            if ((value == "FORCE_SERVICE_ALLOW_DATA_LOSS"))
            {
                return AstKeywordEnum.ForceServiceAllowDataLoss;
            }
            if ((value == "FORMATMESSAGE"))
            {
                return AstKeywordEnum.Formatmessage;
            }
            if ((value == "GET"))
            {
                return AstKeywordEnum.Get;
            }
            if ((value == "GET_FILESTREAM_TRANSACTION_CONTEXT"))
            {
                return AstKeywordEnum.GetFilestreamTransactionContext;
            }
            if ((value == "GETANCESTOR"))
            {
                return AstKeywordEnum.Getancestor;
            }
            if ((value == "GETANSINULL"))
            {
                return AstKeywordEnum.Getansinull;
            }
            if ((value == "GETDESCENDANT"))
            {
                return AstKeywordEnum.Getdescendant;
            }
            if ((value == "GETLEVEL"))
            {
                return AstKeywordEnum.Getlevel;
            }
            if ((value == "GETREPARENTEDVALUE"))
            {
                return AstKeywordEnum.Getreparentedvalue;
            }
            if ((value == "GETROOT"))
            {
                return AstKeywordEnum.Getroot;
            }
            if ((value == "GOVERNOR"))
            {
                return AstKeywordEnum.Governor;
            }
            if ((value == "HASHED"))
            {
                return AstKeywordEnum.Hashed;
            }
            if ((value == "HEALTHCHECKTIMEOUT"))
            {
                return AstKeywordEnum.Healthchecktimeout;
            }
            if ((value == "HEAP"))
            {
                return AstKeywordEnum.Heap;
            }
            if ((value == "HIERARCHYID"))
            {
                return AstKeywordEnum.Hierarchyid;
            }
            if ((value == "HOST_ID"))
            {
                return AstKeywordEnum.HostId;
            }
            if ((value == "HOST_NAME"))
            {
                return AstKeywordEnum.HostName;
            }
            if ((value == "IIF"))
            {
                return AstKeywordEnum.Iif;
            }
            if ((value == "IO"))
            {
                return AstKeywordEnum.Io;
            }
            if ((value == "INCLUDE"))
            {
                return AstKeywordEnum.Include;
            }
            if ((value == "INCREMENT"))
            {
                return AstKeywordEnum.Increment;
            }
            if ((value == "INFINITE"))
            {
                return AstKeywordEnum.Infinite;
            }
            if ((value == "INIT"))
            {
                return AstKeywordEnum.Init;
            }
            if ((value == "INSTEAD"))
            {
                return AstKeywordEnum.Instead;
            }
            if ((value == "ISDESCENDANTOF"))
            {
                return AstKeywordEnum.Isdescendantof;
            }
            if ((value == "ISNULL"))
            {
                return AstKeywordEnum.Isnull;
            }
            if ((value == "ISNUMERIC"))
            {
                return AstKeywordEnum.Isnumeric;
            }
            if ((value == "KERBEROS"))
            {
                return AstKeywordEnum.Kerberos;
            }
            if ((value == "KEY_PATH"))
            {
                return AstKeywordEnum.KeyPath;
            }
            if ((value == "KEY_STORE_PROVIDER_NAME"))
            {
                return AstKeywordEnum.KeyStoreProviderName;
            }
            if ((value == "LANGUAGE"))
            {
                return AstKeywordEnum.Language;
            }
            if ((value == "LIBRARY"))
            {
                return AstKeywordEnum.Library;
            }
            if ((value == "LIFETIME"))
            {
                return AstKeywordEnum.Lifetime;
            }
            if ((value == "LINKED"))
            {
                return AstKeywordEnum.Linked;
            }
            if ((value == "LINUX"))
            {
                return AstKeywordEnum.Linux;
            }
            if ((value == "LISTENER_IP"))
            {
                return AstKeywordEnum.ListenerIp;
            }
            if ((value == "LISTENER_PORT"))
            {
                return AstKeywordEnum.ListenerPort;
            }
            if ((value == "LOCAL_SERVICE_NAME"))
            {
                return AstKeywordEnum.LocalServiceName;
            }
            if ((value == "LOG"))
            {
                return AstKeywordEnum.Log;
            }
            if ((value == "MASK"))
            {
                return AstKeywordEnum.Mask;
            }
            if ((value == "MATCHED"))
            {
                return AstKeywordEnum.Matched;
            }
            if ((value == "MASTER"))
            {
                return AstKeywordEnum.Master;
            }
            if ((value == "MAX_MEMORY"))
            {
                return AstKeywordEnum.MaxMemory;
            }
            if ((value == "MAXTRANSFER"))
            {
                return AstKeywordEnum.Maxtransfer;
            }
            if ((value == "MAXVALUE"))
            {
                return AstKeywordEnum.Maxvalue;
            }
            if ((value == "MAX_DISPATCH_LATENCY"))
            {
                return AstKeywordEnum.MaxDispatchLatency;
            }
            if ((value == "MAX_DURATION"))
            {
                return AstKeywordEnum.MaxDuration;
            }
            if ((value == "MAX_EVENT_SIZE"))
            {
                return AstKeywordEnum.MaxEventSize;
            }
            if ((value == "MAX_SIZE"))
            {
                return AstKeywordEnum.MaxSize;
            }
            if ((value == "MAX_OUTSTANDING_IO_PER_VOLUME"))
            {
                return AstKeywordEnum.MaxOutstandingIoPerVolume;
            }
            if ((value == "MEDIADESCRIPTION"))
            {
                return AstKeywordEnum.Mediadescription;
            }
            if ((value == "MEDIANAME"))
            {
                return AstKeywordEnum.Medianame;
            }
            if ((value == "MEMBER"))
            {
                return AstKeywordEnum.Member;
            }
            if ((value == "MEMORY_PARTITION_MODE"))
            {
                return AstKeywordEnum.MemoryPartitionMode;
            }
            if ((value == "MESSAGE_FORWARDING"))
            {
                return AstKeywordEnum.MessageForwarding;
            }
            if ((value == "MESSAGE_FORWARD_SIZE"))
            {
                return AstKeywordEnum.MessageForwardSize;
            }
            if ((value == "MINVALUE"))
            {
                return AstKeywordEnum.Minvalue;
            }
            if ((value == "MIRROR"))
            {
                return AstKeywordEnum.Mirror;
            }
            if ((value == "MUST_CHANGE"))
            {
                return AstKeywordEnum.MustChange;
            }
            if ((value == "NEWID"))
            {
                return AstKeywordEnum.Newid;
            }
            if ((value == "NEWSEQUENTIALID"))
            {
                return AstKeywordEnum.Newsequentialid;
            }
            if ((value == "NOFORMAT"))
            {
                return AstKeywordEnum.Noformat;
            }
            if ((value == "NOINIT"))
            {
                return AstKeywordEnum.Noinit;
            }
            if ((value == "NONE"))
            {
                return AstKeywordEnum.None;
            }
            if ((value == "NOREWIND"))
            {
                return AstKeywordEnum.Norewind;
            }
            if ((value == "NOSKIP"))
            {
                return AstKeywordEnum.Noskip;
            }
            if ((value == "NOUNLOAD"))
            {
                return AstKeywordEnum.Nounload;
            }
            if ((value == "NO_CHECKSUM"))
            {
                return AstKeywordEnum.NoChecksum;
            }
            if ((value == "NO_COMPRESSION"))
            {
                return AstKeywordEnum.NoCompression;
            }
            if ((value == "NO_EVENT_LOSS"))
            {
                return AstKeywordEnum.NoEventLoss;
            }
            if ((value == "NOTIFICATION"))
            {
                return AstKeywordEnum.Notification;
            }
            if ((value == "NTLM"))
            {
                return AstKeywordEnum.Ntlm;
            }
            if ((value == "OLD_PASSWORD"))
            {
                return AstKeywordEnum.OldPassword;
            }
            if ((value == "ON_FAILURE"))
            {
                return AstKeywordEnum.OnFailure;
            }
            if ((value == "OPERATIONS"))
            {
                return AstKeywordEnum.Operations;
            }
            if ((value == "PAGE"))
            {
                return AstKeywordEnum.Page;
            }
            if ((value == "PARAM_NODE"))
            {
                return AstKeywordEnum.ParamNode;
            }
            if ((value == "PARTIAL"))
            {
                return AstKeywordEnum.Partial;
            }
            if ((value == "PASSWORD"))
            {
                return AstKeywordEnum.Password;
            }
            if ((value == "PERMISSION_SET"))
            {
                return AstKeywordEnum.PermissionSet;
            }
            if ((value == "PER_CPU"))
            {
                return AstKeywordEnum.PerCpu;
            }
            if ((value == "PER_DB"))
            {
                return AstKeywordEnum.PerDb;
            }
            if ((value == "PER_NODE"))
            {
                return AstKeywordEnum.PerNode;
            }
            if ((value == "PERSISTED"))
            {
                return AstKeywordEnum.Persisted;
            }
            if ((value == "PLATFORM"))
            {
                return AstKeywordEnum.Platform;
            }
            if ((value == "POLICY"))
            {
                return AstKeywordEnum.Policy;
            }
            if ((value == "PREDICATE"))
            {
                return AstKeywordEnum.Predicate;
            }
            if ((value == "PROCESS"))
            {
                return AstKeywordEnum.Process;
            }
            if ((value == "PROFILE"))
            {
                return AstKeywordEnum.Profile;
            }
            if ((value == "PYTHON"))
            {
                return AstKeywordEnum.Python;
            }
            if ((value == "R"))
            {
                return AstKeywordEnum.R;
            }
            if ((value == "READ_WRITE_FILEGROUPS"))
            {
                return AstKeywordEnum.ReadWriteFilegroups;
            }
            if ((value == "REGENERATE"))
            {
                return AstKeywordEnum.Regenerate;
            }
            if ((value == "RELATED_CONVERSATION"))
            {
                return AstKeywordEnum.RelatedConversation;
            }
            if ((value == "RELATED_CONVERSATION_GROUP"))
            {
                return AstKeywordEnum.RelatedConversationGroup;
            }
            if ((value == "REQUIRED"))
            {
                return AstKeywordEnum.Required;
            }
            if ((value == "RESET"))
            {
                return AstKeywordEnum.Reset;
            }
            if ((value == "RESOURCES"))
            {
                return AstKeywordEnum.Resources;
            }
            if ((value == "RESTART"))
            {
                return AstKeywordEnum.Restart;
            }
            if ((value == "RESUME"))
            {
                return AstKeywordEnum.Resume;
            }
            if ((value == "RETAINDAYS"))
            {
                return AstKeywordEnum.Retaindays;
            }
            if ((value == "RETURNS"))
            {
                return AstKeywordEnum.Returns;
            }
            if ((value == "REWIND"))
            {
                return AstKeywordEnum.Rewind;
            }
            if ((value == "ROLE"))
            {
                return AstKeywordEnum.Role;
            }
            if ((value == "ROUND_ROBIN"))
            {
                return AstKeywordEnum.RoundRobin;
            }
            if ((value == "ROWCOUNT_BIG"))
            {
                return AstKeywordEnum.RowcountBig;
            }
            if ((value == "RSA_512"))
            {
                return AstKeywordEnum.Rsa512;
            }
            if ((value == "RSA_1024"))
            {
                return AstKeywordEnum.Rsa1024;
            }
            if ((value == "RSA_2048"))
            {
                return AstKeywordEnum.Rsa2048;
            }
            if ((value == "RSA_3072"))
            {
                return AstKeywordEnum.Rsa3072;
            }
            if ((value == "RSA_4096"))
            {
                return AstKeywordEnum.Rsa4096;
            }
            if ((value == "SAFETY"))
            {
                return AstKeywordEnum.Safety;
            }
            if ((value == "SAFE"))
            {
                return AstKeywordEnum.Safe;
            }
            if ((value == "SCHEDULER"))
            {
                return AstKeywordEnum.Scheduler;
            }
            if ((value == "SCHEME"))
            {
                return AstKeywordEnum.Scheme;
            }
            if ((value == "SCRIPT"))
            {
                return AstKeywordEnum.Script;
            }
            if ((value == "SERVER"))
            {
                return AstKeywordEnum.Server;
            }
            if ((value == "SERVICE"))
            {
                return AstKeywordEnum.Service;
            }
            if ((value == "SERVICE_BROKER"))
            {
                return AstKeywordEnum.ServiceBroker;
            }
            if ((value == "SERVICE_NAME"))
            {
                return AstKeywordEnum.ServiceName;
            }
            if ((value == "SESSION"))
            {
                return AstKeywordEnum.Session;
            }
            if ((value == "SESSION_CONTEXT"))
            {
                return AstKeywordEnum.SessionContext;
            }
            if ((value == "SETTINGS"))
            {
                return AstKeywordEnum.Settings;
            }
            if ((value == "SHRINKLOG"))
            {
                return AstKeywordEnum.Shrinklog;
            }
            if ((value == "SID"))
            {
                return AstKeywordEnum.Sid;
            }
            if ((value == "SKIP_KEYWORD"))
            {
                return AstKeywordEnum.SkipKeyword;
            }
            if ((value == "SOFTNUMA"))
            {
                return AstKeywordEnum.Softnuma;
            }
            if ((value == "SOURCE"))
            {
                return AstKeywordEnum.Source;
            }
            if ((value == "SPECIFICATION"))
            {
                return AstKeywordEnum.Specification;
            }
            if ((value == "SPLIT"))
            {
                return AstKeywordEnum.Split;
            }
            if ((value == "SQL"))
            {
                return AstKeywordEnum.Sql;
            }
            if ((value == "SQLDUMPERFLAGS"))
            {
                return AstKeywordEnum.Sqldumperflags;
            }
            if ((value == "SQLDUMPERPATH"))
            {
                return AstKeywordEnum.Sqldumperpath;
            }
            if ((value == "SQLDUMPERTIMEOUT"))
            {
                return AstKeywordEnum.Sqldumpertimeout;
            }
            if ((value == "STATE"))
            {
                return AstKeywordEnum.State;
            }
            if ((value == "STATS"))
            {
                return AstKeywordEnum.Stats;
            }
            if ((value == "START"))
            {
                return AstKeywordEnum.Start;
            }
            if ((value == "STARTED"))
            {
                return AstKeywordEnum.Started;
            }
            if ((value == "STARTUP_STATE"))
            {
                return AstKeywordEnum.StartupState;
            }
            if ((value == "STOP"))
            {
                return AstKeywordEnum.Stop;
            }
            if ((value == "STOPPED"))
            {
                return AstKeywordEnum.Stopped;
            }
            if ((value == "STOP_ON_ERROR"))
            {
                return AstKeywordEnum.StopOnError;
            }
            if ((value == "SUPPORTED"))
            {
                return AstKeywordEnum.Supported;
            }
            if ((value == "SWITCH"))
            {
                return AstKeywordEnum.Switch;
            }
            if ((value == "TAPE"))
            {
                return AstKeywordEnum.Tape;
            }
            if ((value == "TARGET"))
            {
                return AstKeywordEnum.Target;
            }
            if ((value == "TCP"))
            {
                return AstKeywordEnum.Tcp;
            }
            if ((value == "TOSTRING"))
            {
                return AstKeywordEnum.Tostring;
            }
            if ((value == "TRACE"))
            {
                return AstKeywordEnum.Trace;
            }
            if ((value == "TRACK_CAUSALITY"))
            {
                return AstKeywordEnum.TrackCausality;
            }
            if ((value == "TRANSFER"))
            {
                return AstKeywordEnum.Transfer;
            }
            if ((value == "UNCHECKED"))
            {
                return AstKeywordEnum.Unchecked;
            }
            if ((value == "UNLOCK"))
            {
                return AstKeywordEnum.Unlock;
            }
            if ((value == "UNSAFE"))
            {
                return AstKeywordEnum.Unsafe;
            }
            if ((value == "URL"))
            {
                return AstKeywordEnum.Url;
            }
            if ((value == "USED"))
            {
                return AstKeywordEnum.Used;
            }
            if ((value == "VERBOSELOGGING"))
            {
                return AstKeywordEnum.Verboselogging;
            }
            if ((value == "VISIBILITY"))
            {
                return AstKeywordEnum.Visibility;
            }
            if ((value == "WAIT_AT_LOW_PRIORITY"))
            {
                return AstKeywordEnum.WaitAtLowPriority;
            }
            if ((value == "WINDOWS"))
            {
                return AstKeywordEnum.Windows;
            }
            if ((value == "WITHOUT"))
            {
                return AstKeywordEnum.Without;
            }
            if ((value == "WITNESS"))
            {
                return AstKeywordEnum.Witness;
            }
            if ((value == "XACT_ABORT"))
            {
                return AstKeywordEnum.XactAbort;
            }
            if ((value == "XACT_STATE"))
            {
                return AstKeywordEnum.XactState;
            }
            if ((value == "VARCHAR"))
            {
                return AstKeywordEnum.Varchar;
            }
            if ((value == "NVARCHAR"))
            {
                return AstKeywordEnum.Nvarchar;
            }
            if ((value == "PRECISION"))
            {
                return AstKeywordEnum.Precision;
            }
            return AstKeywordEnum._undefined;
        }
    }
    
    /// <summary>
    /// id_
    /// 	 : ID
    /// 	 | DOUBLE_QUOTE_ID
    /// 	 | DOUBLE_QUOTE_BLANK
    /// 	 | SQUARE_BRACKET_ID
    /// 	 | keyword
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstId : AstRule
    {
        
        public AstId(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstId(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitId(this);
        }
    }
    
    /// <summary>
    /// simple_id
    /// 	 : ID
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstSimpleId : AstTerminal<string>
    {
        
        public AstSimpleId(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstSimpleId(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstSimpleId(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSimpleId(this);
        }
    }
    
    /// <summary>
    /// comparison_operator
    /// 	 : EQUAL
    /// 	 | GREATER
    /// 	 | LESS
    /// 	 | LESS  EQUAL
    /// 	 | GREATER  EQUAL
    /// 	 | LESS  GREATER
    /// 	 | EXCLAMATION  EQUAL
    /// 	 | EXCLAMATION  GREATER
    /// 	 | EXCLAMATION  LESS
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstComparisonOperator : AstRule
    {
        
        public AstComparisonOperator(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstComparisonOperator(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstComparisonOperator(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitComparisonOperator(this);
        }
    }
    
    /// <summary>
    /// assignment_operator
    /// 	 : PLUS_ASSIGN
    /// 	 | MINUS_ASSIGN
    /// 	 | MULT_ASSIGN
    /// 	 | DIV_ASSIGN
    /// 	 | MOD_ASSIGN
    /// 	 | AND_ASSIGN
    /// 	 | XOR_ASSIGN
    /// 	 | OR_ASSIGN
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstAssignmentOperator : AstTerminal<AstAssignmentOperatorEnum>
    {
        
        public AstAssignmentOperator(ITerminalNode t, string value) : 
                base(t, AstAssignmentOperator.GetValue(value))
        {
        }
        
        public AstAssignmentOperator(ITerminalNode t, AstAssignmentOperatorEnum value) : 
                base(t, value)
        {
        }
        
        public AstAssignmentOperator(ParserRuleContext ctx, string value) : 
                base(ctx, AstAssignmentOperator.GetValue(value))
        {
        }
        
        public AstAssignmentOperator(Position p, string value) : 
                base(p, AstAssignmentOperator.GetValue(value))
        {
        }
        
        public AstAssignmentOperator(Position p, AstAssignmentOperatorEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAssignmentOperator(this);
        }
        
        protected static AstAssignmentOperatorEnum GetValue(string value)
        {
            if ((value == "PLUS_ASSIGN"))
            {
                return AstAssignmentOperatorEnum.PlusAssign;
            }
            if ((value == "MINUS_ASSIGN"))
            {
                return AstAssignmentOperatorEnum.MinusAssign;
            }
            if ((value == "MULT_ASSIGN"))
            {
                return AstAssignmentOperatorEnum.MultAssign;
            }
            if ((value == "DIV_ASSIGN"))
            {
                return AstAssignmentOperatorEnum.DivAssign;
            }
            if ((value == "MOD_ASSIGN"))
            {
                return AstAssignmentOperatorEnum.ModAssign;
            }
            if ((value == "AND_ASSIGN"))
            {
                return AstAssignmentOperatorEnum.AndAssign;
            }
            if ((value == "XOR_ASSIGN"))
            {
                return AstAssignmentOperatorEnum.XorAssign;
            }
            if ((value == "OR_ASSIGN"))
            {
                return AstAssignmentOperatorEnum.OrAssign;
            }
            return AstAssignmentOperatorEnum._undefined;
        }
    }
    
    /// <summary>
    /// file_size
    /// 	 : DECIMAL  file_size_unity?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFileSize : AstRule
    {
        
        private AstFileSizeUnity _fileSizeUnity;
        
        public AstFileSize(Position p, List<AstRoot> list) : 
                base(p, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileSizeUnity>())
                {
                    this._fileSizeUnity = ((AstFileSizeUnity)(enumerator.Current));
                }
            }
        }
        
        public AstFileSize(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileSizeUnity>())
                {
                    this._fileSizeUnity = ((AstFileSizeUnity)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFileSizeUnity FileSizeUnity
        {
            get
            {
                return this._fileSizeUnity;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileSize(this);
        }
    }
    
    /// <summary>
    /// file_size_unity
    /// 	 : KB
    /// 	 | MB
    /// 	 | GB
    /// 	 | TB
    /// 	 | MODULE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstFileSizeUnity : AstTerminal<AstFileSizeUnityEnum>
    {
        
        public AstFileSizeUnity(ITerminalNode t, string value) : 
                base(t, AstFileSizeUnity.GetValue(value))
        {
        }
        
        public AstFileSizeUnity(ITerminalNode t, AstFileSizeUnityEnum value) : 
                base(t, value)
        {
        }
        
        public AstFileSizeUnity(ParserRuleContext ctx, string value) : 
                base(ctx, AstFileSizeUnity.GetValue(value))
        {
        }
        
        public AstFileSizeUnity(Position p, string value) : 
                base(p, AstFileSizeUnity.GetValue(value))
        {
        }
        
        public AstFileSizeUnity(Position p, AstFileSizeUnityEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileSizeUnity(this);
        }
        
        protected static AstFileSizeUnityEnum GetValue(string value)
        {
            if ((value == "KB"))
            {
                return AstFileSizeUnityEnum.Kb;
            }
            if ((value == "MB"))
            {
                return AstFileSizeUnityEnum.Mb;
            }
            if ((value == "GB"))
            {
                return AstFileSizeUnityEnum.Gb;
            }
            if ((value == "TB"))
            {
                return AstFileSizeUnityEnum.Tb;
            }
            if ((value == "MODULE"))
            {
                return AstFileSizeUnityEnum.Module;
            }
            return AstFileSizeUnityEnum._undefined;
        }
    }
    
    /// <summary>
    /// filestream_filegroup_or_partition_schema_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstFilestreamFilegroupOrPartitionSchemaName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilestreamFilegroupOrPartitionSchemaName(this);
        }
    }
    
    /// <summary>
    /// action_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstActionName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitActionName(this);
        }
    }
    
    /// <summary>
    /// aggregate_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstAggregateName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAggregateName(this);
        }
    }
    
    /// <summary>
    /// app_role_schema
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstAppRoleSchema : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAppRoleSchema(this);
        }
    }
    
    /// <summary>
    /// application_role
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstApplicationRole : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitApplicationRole(this);
        }
    }
    
    /// <summary>
    /// assembly_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstAssemblyName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAssemblyName(this);
        }
    }
    
    /// <summary>
    /// asym_key_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstAsymKeyName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsymKeyName(this);
        }
    }
    
    /// <summary>
    /// audit_action_group_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstAuditActionGroupName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditActionGroupName(this);
        }
    }
    
    /// <summary>
    /// audit_guid
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstAuditGuid : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditGuid(this);
        }
    }
    
    /// <summary>
    /// audit_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstAuditName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditName(this);
        }
    }
    
    /// <summary>
    /// audit_specification_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstAuditSpecificationName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditSpecificationName(this);
        }
    }
    
    /// <summary>
    /// azure_active_directory_principal
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstAzureActiveDirectoryPrincipal : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAzureActiveDirectoryPrincipal(this);
        }
    }
    
    /// <summary>
    /// backup_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstBackupName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupName(this);
        }
    }
    
    /// <summary>
    /// binding_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstBindingName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBindingName(this);
        }
    }
    
    /// <summary>
    /// catalog_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstCatalogName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCatalogName(this);
        }
    }
    
    /// <summary>
    /// cert_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstCertName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCertName(this);
        }
    }
    
    /// <summary>
    /// certificate_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstCertificateName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCertificateName(this);
        }
    }
    
    /// <summary>
    /// class_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstClassName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassName(this);
        }
    }
    
    /// <summary>
    /// collation_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstCollationName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCollationName(this);
        }
    }
    
    /// <summary>
    /// column_encryption_key
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstColumnEncryptionKey : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnEncryptionKey(this);
        }
    }
    
    /// <summary>
    /// column_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstColumnName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnName(this);
        }
    }
    
    /// <summary>
    /// column_name_or_arguments
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstColumnNameOrArguments : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnNameOrArguments(this);
        }
    }
    
    /// <summary>
    /// constraint_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstConstraintName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConstraintName(this);
        }
    }
    
    /// <summary>
    /// create_service_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstCreateServiceName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServiceName(this);
        }
    }
    
    /// <summary>
    /// credential_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstCredentialName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCredentialName(this);
        }
    }
    
    /// <summary>
    /// cryptographic_provider_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstCryptographicProviderName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCryptographicProviderName(this);
        }
    }
    
    /// <summary>
    /// data_source_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstDataSourceName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDataSourceName(this);
        }
    }
    
    /// <summary>
    /// database_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstDatabaseName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseName(this);
        }
    }
    
    /// <summary>
    /// dropped_service_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstDroppedServiceName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDroppedServiceName(this);
        }
    }
    
    /// <summary>
    /// encryptor_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstEncryptorName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEncryptorName(this);
        }
    }
    
    /// <summary>
    /// encryption_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstEncryptionName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEncryptionName(this);
        }
    }
    
    /// <summary>
    /// endpoint_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstEndpointName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEndpointName(this);
        }
    }
    
    /// <summary>
    /// event_customizable_attributue
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstEventCustomizableAttributue : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventCustomizableAttributue(this);
        }
    }
    
    /// <summary>
    /// event_field_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstEventFieldName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventFieldName(this);
        }
    }
    
    /// <summary>
    /// event_module_guid
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstEventModuleGuid : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventModuleGuid(this);
        }
    }
    
    /// <summary>
    /// event_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstEventName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventName(this);
        }
    }
    
    /// <summary>
    /// event_notification_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstEventNotificationName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventNotificationName(this);
        }
    }
    
    /// <summary>
    /// event_package_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstEventPackageName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventPackageName(this);
        }
    }
    
    /// <summary>
    /// event_session_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstEventSessionName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionName(this);
        }
    }
    
    /// <summary>
    /// event_type_or_group
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstEventTypeOrGroup : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventTypeOrGroup(this);
        }
    }
    
    /// <summary>
    /// ext_type
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstExtType : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExtType(this);
        }
    }
    
    /// <summary>
    /// external_data_source_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstExternalDataSourceName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalDataSourceName(this);
        }
    }
    
    /// <summary>
    /// external_file_format_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstExternalFileFormatName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalFileFormatName(this);
        }
    }
    
    /// <summary>
    /// external_pool_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstExternalPoolName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalPoolName(this);
        }
    }
    
    /// <summary>
    /// file_group_id
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstFileGroupId : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileGroupId(this);
        }
    }
    
    /// <summary>
    /// file_group_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstFileGroupName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileGroupName(this);
        }
    }
    
    /// <summary>
    /// function_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstFunctionName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFunctionName(this);
        }
    }
    
    /// <summary>
    /// group_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstGroupName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupName(this);
        }
    }
    
    /// <summary>
    /// index_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstIndexName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIndexName(this);
        }
    }
    
    /// <summary>
    /// language
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstLanguage : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLanguage(this);
        }
    }
    
    /// <summary>
    /// library_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstLibraryName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLibraryName(this);
        }
    }
    
    /// <summary>
    /// linked_server
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstLinkedServer : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLinkedServer(this);
        }
    }
    
    /// <summary>
    /// logical_device_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstLogicalDeviceName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLogicalDeviceName(this);
        }
    }
    
    /// <summary>
    /// login_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstLoginName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLoginName(this);
        }
    }
    
    /// <summary>
    /// master_key
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstMasterKey : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMasterKey(this);
        }
    }
    
    /// <summary>
    /// method_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstMethodName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMethodName(this);
        }
    }
    
    /// <summary>
    /// modified_contract_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstModifiedContractName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModifiedContractName(this);
        }
    }
    
    /// <summary>
    /// modified_service_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstModifiedServiceName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModifiedServiceName(this);
        }
    }
    
    /// <summary>
    /// module_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstModuleName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModuleName(this);
        }
    }
    
    /// <summary>
    /// network_computer
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstNetworkComputer : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNetworkComputer(this);
        }
    }
    
    /// <summary>
    /// new_application_role_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstNewApplicationRoleName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNewApplicationRoleName(this);
        }
    }
    
    /// <summary>
    /// new_file_group_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstNewFileGroupName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNewFileGroupName(this);
        }
    }
    
    /// <summary>
    /// non_static_attr
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstNonStaticAttr : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNonStaticAttr(this);
        }
    }
    
    /// <summary>
    /// notification_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstNotificationName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNotificationName(this);
        }
    }
    
    /// <summary>
    /// object_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstObjectName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitObjectName(this);
        }
    }
    
    /// <summary>
    /// owner_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstOwnerName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOwnerName(this);
        }
    }
    
    /// <summary>
    /// partition_column_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstPartitionColumnName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionColumnName(this);
        }
    }
    
    /// <summary>
    /// pool_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstPoolName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPoolName(this);
        }
    }
    
    /// <summary>
    /// predicate_compare_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstPredicateCompareName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateCompareName(this);
        }
    }
    
    /// <summary>
    /// predicate_source_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstPredicateSourceName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateSourceName(this);
        }
    }
    
    /// <summary>
    /// property_list_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstPropertyListName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPropertyListName(this);
        }
    }
    
    /// <summary>
    /// provider_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstProviderName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProviderName(this);
        }
    }
    
    /// <summary>
    /// queue_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstQueueName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueName(this);
        }
    }
    
    /// <summary>
    /// relational_schema
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstRelationalSchema : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRelationalSchema(this);
        }
    }
    
    /// <summary>
    /// role_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstRoleName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRoleName(this);
        }
    }
    
    /// <summary>
    /// route_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstRouteName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRouteName(this);
        }
    }
    
    /// <summary>
    /// rule_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstRuleName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRuleName(this);
        }
    }
    
    /// <summary>
    /// schema_collection_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstSchemaCollectionName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaCollectionName(this);
        }
    }
    
    /// <summary>
    /// schema_id
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstSchemaId : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaId(this);
        }
    }
    
    /// <summary>
    /// schema_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstSchemaName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaName(this);
        }
    }
    
    /// <summary>
    /// security_policy_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstSecurityPolicyName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSecurityPolicyName(this);
        }
    }
    
    /// <summary>
    /// security_predicate_function_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstSecurityPredicateFunctionName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSecurityPredicateFunctionName(this);
        }
    }
    
    /// <summary>
    /// sequence_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstSequenceName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSequenceName(this);
        }
    }
    
    /// <summary>
    /// server_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstServerName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerName(this);
        }
    }
    
    /// <summary>
    /// server_role_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstServerRoleName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerRoleName(this);
        }
    }
    
    /// <summary>
    /// source_list_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstSourceListName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSourceListName(this);
        }
    }
    
    /// <summary>
    /// sql_identifier
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstSqlIdentifier : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlIdentifier(this);
        }
    }
    
    /// <summary>
    /// static_attr
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstStaticAttr : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStaticAttr(this);
        }
    }
    
    /// <summary>
    /// statistics_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstStatisticsName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStatisticsName(this);
        }
    }
    
    /// <summary>
    /// stoplist_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstStoplistName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStoplistName(this);
        }
    }
    
    /// <summary>
    /// symmetric_key_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstSymmetricKeyName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSymmetricKeyName(this);
        }
    }
    
    /// <summary>
    /// synonym_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstSynonymName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSynonymName(this);
        }
    }
    
    /// <summary>
    /// table_or_view_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstTableOrViewName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableOrViewName(this);
        }
    }
    
    /// <summary>
    /// table_variable
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstTableVariable : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableVariable(this);
        }
    }
    
    /// <summary>
    /// target_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstTargetName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetName(this);
        }
    }
    
    /// <summary>
    /// target_parameter_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstTargetParameterName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetParameterName(this);
        }
    }
    
    /// <summary>
    /// trigger_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstTriggerName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTriggerName(this);
        }
    }
    
    /// <summary>
    /// tvf_schema_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstTvfSchemaName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTvfSchemaName(this);
        }
    }
    
    /// <summary>
    /// type_schema
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstTypeSchema : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTypeSchema(this);
        }
    }
    
    /// <summary>
    /// udt_column_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstUdtColumnName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUdtColumnName(this);
        }
    }
    
    /// <summary>
    /// unscaled_type
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstUnscaledType : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnscaledType(this);
        }
    }
    
    /// <summary>
    /// user_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstUserName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUserName(this);
        }
    }
    
    /// <summary>
    /// windows_principal
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstWindowsPrincipal : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWindowsPrincipal(this);
        }
    }
    
    /// <summary>
    /// workload_group_group_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstWorkloadGroupGroupName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWorkloadGroupGroupName(this);
        }
    }
    
    /// <summary>
    /// workload_group_pool_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassId
    /// </remarks>
    public partial class AstWorkloadGroupPoolName : AstRule
    {
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWorkloadGroupPoolName(this);
        }
    }
}
