//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Asts
{
    using System;
    using Antlr4.Runtime;
    
    
    public partial class AstTsqlFile : AstRule
    {
        
        public AstTsqlFile(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTsqlFile(this);
        }
    }
    
    public partial class AstBatch : AstRule
    {
        
        public AstBatch(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBatch(this);
        }
    }
    
    public partial class AstSqlClauses : AstRule
    {
        
        private AstSqlClause _sqlClause;
        
        public AstSqlClauses(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlClause>())
                {
                    this.SqlClause = ((AstSqlClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSqlClause SqlClause
        {
            get
            {
                return this._sqlClause;
            }
            set
            {
                this._sqlClause = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlClauses(this);
        }
    }
    
    public partial class AstSqlClause : AstRule
    {
        
        public AstSqlClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlClause(this);
        }
    }
    
    public partial class AstBlockStatement : AstRule
    {
        
        private AstSqlClause _sqlClause;
        
        public AstBlockStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlClause>())
                {
                    this.SqlClause = ((AstSqlClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSqlClause SqlClause
        {
            get
            {
                return this._sqlClause;
            }
            set
            {
                this._sqlClause = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBlockStatement(this);
        }
    }
    
    public partial class AstBreakStatement : AstRule
    {
        
        public AstBreakStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBreakStatement(this);
        }
    }
    
    public partial class AstContinueStatement : AstRule
    {
        
        public AstContinueStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContinueStatement(this);
        }
    }
    
    public partial class AstGotoStatement : AstRule
    {
        
        public AstGotoStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGotoStatement(this);
        }
    }
    
    public partial class AstReturnStatement : AstRule
    {
        
        private AstExpression _expression;
        
        public AstReturnStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this.Expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
            set
            {
                this._expression = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReturnStatement(this);
        }
    }
    
    public partial class AstIfStatement : AstRule
    {
        
        private AstSearchCondition _searchCondition;
        
        public AstIfStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this.SearchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
            set
            {
                this._searchCondition = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIfStatement(this);
        }
    }
    
    public partial class AstThrowStatement : AstRule
    {
        
        public AstThrowStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowStatement(this);
        }
    }
    
    public partial class AstThrowErrorNumber : AstRule
    {
        
        public AstThrowErrorNumber(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowErrorNumber(this);
        }
    }
    
    public partial class AstThrowMessage : AstRule
    {
        
        public AstThrowMessage(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowMessage(this);
        }
    }
    
    public partial class AstThrowState : AstRule
    {
        
        public AstThrowState(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowState(this);
        }
    }
    
    public partial class AstTryCatchStatement : AstRule
    {
        
        public AstTryCatchStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTryCatchStatement(this);
        }
    }
    
    public partial class AstWaitforStatement : AstRule
    {
        
        private AstReceiveStatement _receiveStatement;
        
        private AstExpression _expression;
        
        public AstWaitforStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReceiveStatement>())
                {
                    this.ReceiveStatement = ((AstReceiveStatement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this.Expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstReceiveStatement ReceiveStatement
        {
            get
            {
                return this._receiveStatement;
            }
            set
            {
                this._receiveStatement = value;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
            set
            {
                this._expression = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWaitforStatement(this);
        }
    }
    
    public partial class AstWhileStatement : AstRule
    {
        
        private AstSearchCondition _searchCondition;
        
        public AstWhileStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this.SearchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
            set
            {
                this._searchCondition = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWhileStatement(this);
        }
    }
    
    public partial class AstPrintStatement : AstRule
    {
        
        public AstPrintStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrintStatement(this);
        }
    }
    
    public partial class AstRaiseerrorStatement : AstRule
    {
        
        public AstRaiseerrorStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRaiseerrorStatement(this);
        }
    }
    
    public partial class AstEmptyStatement : AstRule
    {
        
        public AstEmptyStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEmptyStatement(this);
        }
    }
    
    public partial class AstAlterApplicationRole : AstRule
    {
        
        private AstApplicationRole _applicationRole;
        
        public AstAlterApplicationRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstApplicationRole>())
                {
                    this.ApplicationRole = ((AstApplicationRole)(enumerator.Current));
                }
            }
        }
        
        public virtual AstApplicationRole ApplicationRole
        {
            get
            {
                return this._applicationRole;
            }
            set
            {
                this._applicationRole = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterApplicationRole(this);
        }
    }
    
    public partial class AstCreateApplicationRole : AstRule
    {
        
        private AstApplicationRole _applicationRole;
        
        public AstCreateApplicationRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstApplicationRole>())
                {
                    this.ApplicationRole = ((AstApplicationRole)(enumerator.Current));
                }
            }
        }
        
        public virtual AstApplicationRole ApplicationRole
        {
            get
            {
                return this._applicationRole;
            }
            set
            {
                this._applicationRole = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateApplicationRole(this);
        }
    }
    
    public partial class AstDropAggregate : AstRule
    {
        
        private AstAggregateName _aggregateName;
        
        public AstDropAggregate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAggregateName>())
                {
                    this.AggregateName = ((AstAggregateName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAggregateName AggregateName
        {
            get
            {
                return this._aggregateName;
            }
            set
            {
                this._aggregateName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAggregate(this);
        }
    }
    
    public partial class AstDropApplicationRole : AstRule
    {
        
        private AstRoleName _roleName;
        
        public AstDropApplicationRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this.RoleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleName RoleName
        {
            get
            {
                return this._roleName;
            }
            set
            {
                this._roleName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropApplicationRole(this);
        }
    }
    
    public partial class AstAlterAssembly : AstRule
    {
        
        private AstAlterAssemblyStart _alterAssemblyStart;
        
        private AstAssemblyName _assemblyName;
        
        private AstAlterAssemblyClause _alterAssemblyClause;
        
        public AstAlterAssembly(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyStart>())
                {
                    this.AlterAssemblyStart = ((AstAlterAssemblyStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyName>())
                {
                    this.AssemblyName = ((AstAssemblyName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyClause>())
                {
                    this.AlterAssemblyClause = ((AstAlterAssemblyClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyStart AlterAssemblyStart
        {
            get
            {
                return this._alterAssemblyStart;
            }
            set
            {
                this._alterAssemblyStart = value;
            }
        }
        
        public virtual AstAssemblyName AssemblyName
        {
            get
            {
                return this._assemblyName;
            }
            set
            {
                this._assemblyName = value;
            }
        }
        
        public virtual AstAlterAssemblyClause AlterAssemblyClause
        {
            get
            {
                return this._alterAssemblyClause;
            }
            set
            {
                this._alterAssemblyClause = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssembly(this);
        }
    }
    
    public partial class AstAlterAssemblyStart : AstRule
    {
        
        public AstAlterAssemblyStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyStart(this);
        }
    }
    
    public partial class AstAlterAssemblyClause : AstRule
    {
        
        private AstAlterAssemblyFromClause _alterAssemblyFromClause;
        
        private AstAlterAssemblyWithClause _alterAssemblyWithClause;
        
        private AstAlterAssemblyDropClause _alterAssemblyDropClause;
        
        private AstAlterAssemblyAddClause _alterAssemblyAddClause;
        
        public AstAlterAssemblyClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClause>())
                {
                    this.AlterAssemblyFromClause = ((AstAlterAssemblyFromClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyWithClause>())
                {
                    this.AlterAssemblyWithClause = ((AstAlterAssemblyWithClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropClause>())
                {
                    this.AlterAssemblyDropClause = ((AstAlterAssemblyDropClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyAddClause>())
                {
                    this.AlterAssemblyAddClause = ((AstAlterAssemblyAddClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyFromClause AlterAssemblyFromClause
        {
            get
            {
                return this._alterAssemblyFromClause;
            }
            set
            {
                this._alterAssemblyFromClause = value;
            }
        }
        
        public virtual AstAlterAssemblyWithClause AlterAssemblyWithClause
        {
            get
            {
                return this._alterAssemblyWithClause;
            }
            set
            {
                this._alterAssemblyWithClause = value;
            }
        }
        
        public virtual AstAlterAssemblyDropClause AlterAssemblyDropClause
        {
            get
            {
                return this._alterAssemblyDropClause;
            }
            set
            {
                this._alterAssemblyDropClause = value;
            }
        }
        
        public virtual AstAlterAssemblyAddClause AlterAssemblyAddClause
        {
            get
            {
                return this._alterAssemblyAddClause;
            }
            set
            {
                this._alterAssemblyAddClause = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyClause(this);
        }
    }
    
    public partial class AstAlterAssemblyFromClause : AstRule
    {
        
        private AstAlterAssemblyFromClauseStart _alterAssemblyFromClauseStart;
        
        public AstAlterAssemblyFromClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClauseStart>())
                {
                    this.AlterAssemblyFromClauseStart = ((AstAlterAssemblyFromClauseStart)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyFromClauseStart AlterAssemblyFromClauseStart
        {
            get
            {
                return this._alterAssemblyFromClauseStart;
            }
            set
            {
                this._alterAssemblyFromClauseStart = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyFromClause(this);
        }
    }
    
    public partial class AstAlterAssemblyFromClauseStart : AstRule
    {
        
        public AstAlterAssemblyFromClauseStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyFromClauseStart(this);
        }
    }
    
    public partial class AstAlterAssemblyDropClause : AstRule
    {
        
        private AstAlterAssemblyDrop _alterAssemblyDrop;
        
        private AstAlterAssemblyDropMultipleFiles _alterAssemblyDropMultipleFiles;
        
        public AstAlterAssemblyDropClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyDrop>())
                {
                    this.AlterAssemblyDrop = ((AstAlterAssemblyDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropMultipleFiles>())
                {
                    this.AlterAssemblyDropMultipleFiles = ((AstAlterAssemblyDropMultipleFiles)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyDrop AlterAssemblyDrop
        {
            get
            {
                return this._alterAssemblyDrop;
            }
            set
            {
                this._alterAssemblyDrop = value;
            }
        }
        
        public virtual AstAlterAssemblyDropMultipleFiles AlterAssemblyDropMultipleFiles
        {
            get
            {
                return this._alterAssemblyDropMultipleFiles;
            }
            set
            {
                this._alterAssemblyDropMultipleFiles = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyDropClause(this);
        }
    }
    
    public partial class AstAlterAssemblyDropMultipleFiles : AstRule
    {
        
        public AstAlterAssemblyDropMultipleFiles(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyDropMultipleFiles(this);
        }
    }
    
    public partial class AstAlterAssemblyDrop : AstRule
    {
        
        public AstAlterAssemblyDrop(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyDrop(this);
        }
    }
    
    public partial class AstAlterAssemblyAddClause : AstRule
    {
        
        private AstAlterAsssemblyAddClauseStart _alterAsssemblyAddClauseStart;
        
        private AstAlterAssemblyClientFileClause _alterAssemblyClientFileClause;
        
        public AstAlterAssemblyAddClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAsssemblyAddClauseStart>())
                {
                    this.AlterAsssemblyAddClauseStart = ((AstAlterAsssemblyAddClauseStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyClientFileClause>())
                {
                    this.AlterAssemblyClientFileClause = ((AstAlterAssemblyClientFileClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAsssemblyAddClauseStart AlterAsssemblyAddClauseStart
        {
            get
            {
                return this._alterAsssemblyAddClauseStart;
            }
            set
            {
                this._alterAsssemblyAddClauseStart = value;
            }
        }
        
        public virtual AstAlterAssemblyClientFileClause AlterAssemblyClientFileClause
        {
            get
            {
                return this._alterAssemblyClientFileClause;
            }
            set
            {
                this._alterAssemblyClientFileClause = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyAddClause(this);
        }
    }
    
    public partial class AstAlterAsssemblyAddClauseStart : AstRule
    {
        
        public AstAlterAsssemblyAddClauseStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAsssemblyAddClauseStart(this);
        }
    }
    
    public partial class AstAlterAssemblyClientFileClause : AstRule
    {
        
        private AstAlterAssemblyFileName _alterAssemblyFileName;
        
        public AstAlterAssemblyClientFileClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFileName>())
                {
                    this.AlterAssemblyFileName = ((AstAlterAssemblyFileName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyFileName AlterAssemblyFileName
        {
            get
            {
                return this._alterAssemblyFileName;
            }
            set
            {
                this._alterAssemblyFileName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyClientFileClause(this);
        }
    }
    
    public partial class AstAlterAssemblyFileName : AstRule
    {
        
        public AstAlterAssemblyFileName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyFileName(this);
        }
    }
    
    public partial class AstAlterAssemblyFileBits : AstRule
    {
        
        private AstAlterAssemblyAs _alterAssemblyAs;
        
        private AstId _id;
        
        public AstAlterAssemblyFileBits(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyAs>())
                {
                    this.AlterAssemblyAs = ((AstAlterAssemblyAs)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyAs AlterAssemblyAs
        {
            get
            {
                return this._alterAssemblyAs;
            }
            set
            {
                this._alterAssemblyAs = value;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyFileBits(this);
        }
    }
    
    public partial class AstAlterAssemblyAs : AstRule
    {
        
        public AstAlterAssemblyAs(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyAs(this);
        }
    }
    
    public partial class AstAlterAssemblyWithClause : AstRule
    {
        
        private AstAlterAssemblyWith _alterAssemblyWith;
        
        private AstAssemblyOption _assemblyOption;
        
        public AstAlterAssemblyWithClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyWith>())
                {
                    this.AlterAssemblyWith = ((AstAlterAssemblyWith)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyOption>())
                {
                    this.AssemblyOption = ((AstAssemblyOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyWith AlterAssemblyWith
        {
            get
            {
                return this._alterAssemblyWith;
            }
            set
            {
                this._alterAssemblyWith = value;
            }
        }
        
        public virtual AstAssemblyOption AssemblyOption
        {
            get
            {
                return this._assemblyOption;
            }
            set
            {
                this._assemblyOption = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyWithClause(this);
        }
    }
    
    public partial class AstAlterAssemblyWith : AstRule
    {
        
        public AstAlterAssemblyWith(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyWith(this);
        }
    }
    
    public partial class AstClientAssemblySpecifier : AstRule
    {
        
        public AstClientAssemblySpecifier(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClientAssemblySpecifier(this);
        }
    }
    
    public partial class AstAssemblyOption : AstRule
    {
        
        public AstAssemblyOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAssemblyOption(this);
        }
    }
    
    public partial class AstNetworkFileShare : AstRule
    {
        
        private AstNetworkFileStart _networkFileStart;
        
        private AstNetworkComputer _networkComputer;
        
        private AstFilePath _filePath;
        
        public AstNetworkFileShare(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNetworkFileStart>())
                {
                    this.NetworkFileStart = ((AstNetworkFileStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstNetworkComputer>())
                {
                    this.NetworkComputer = ((AstNetworkComputer)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this.FilePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public virtual AstNetworkFileStart NetworkFileStart
        {
            get
            {
                return this._networkFileStart;
            }
            set
            {
                this._networkFileStart = value;
            }
        }
        
        public virtual AstNetworkComputer NetworkComputer
        {
            get
            {
                return this._networkComputer;
            }
            set
            {
                this._networkComputer = value;
            }
        }
        
        public virtual AstFilePath FilePath
        {
            get
            {
                return this._filePath;
            }
            set
            {
                this._filePath = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNetworkFileShare(this);
        }
    }
    
    public partial class AstNetworkFileStart : AstRule
    {
        
        public AstNetworkFileStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNetworkFileStart(this);
        }
    }
    
    public partial class AstFilePath : AstRule
    {
        
        public AstFilePath(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilePath(this);
        }
    }
    
    public partial class AstFileDirectoryPathSeparator : AstRule
    {
        
        public AstFileDirectoryPathSeparator(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileDirectoryPathSeparator(this);
        }
    }
    
    public partial class AstLocalFile : AstRule
    {
        
        private AstLocalDrive _localDrive;
        
        private AstFilePath _filePath;
        
        public AstLocalFile(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalDrive>())
                {
                    this.LocalDrive = ((AstLocalDrive)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this.FilePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalDrive LocalDrive
        {
            get
            {
                return this._localDrive;
            }
            set
            {
                this._localDrive = value;
            }
        }
        
        public virtual AstFilePath FilePath
        {
            get
            {
                return this._filePath;
            }
            set
            {
                this._filePath = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLocalFile(this);
        }
    }
    
    public partial class AstLocalDrive : AstRule
    {
        
        public AstLocalDrive(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLocalDrive(this);
        }
    }
    
    public partial class AstMultipleLocalFiles : AstRule
    {
        
        public AstMultipleLocalFiles(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMultipleLocalFiles(this);
        }
    }
    
    public partial class AstMultipleLocalFileStart : AstRule
    {
        
        public AstMultipleLocalFileStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMultipleLocalFileStart(this);
        }
    }
    
    public partial class AstCreateAssembly : AstRule
    {
        
        private AstAssemblyName _assemblyName;
        
        private AstBinaryContentNexts _binaryContentNexts;
        
        public AstCreateAssembly(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyName>())
                {
                    this.AssemblyName = ((AstAssemblyName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinaryContentNexts>())
                {
                    this.BinaryContentNexts = ((AstBinaryContentNexts)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblyName AssemblyName
        {
            get
            {
                return this._assemblyName;
            }
            set
            {
                this._assemblyName = value;
            }
        }
        
        public virtual AstBinaryContentNexts BinaryContentNexts
        {
            get
            {
                return this._binaryContentNexts;
            }
            set
            {
                this._binaryContentNexts = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateAssembly(this);
        }
    }
    
    public partial class AstBinaryContentNexts : AstRuleList<AstBinaryContentNext>
    {
        
        public AstBinaryContentNexts(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstBinaryContentNexts(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBinaryContentNexts(this);
        }
    }
    
    public partial class AstBinaryContentNext : AstRule
    {
        
        private AstBinaryContent _binaryContent;
        
        public AstBinaryContentNext(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBinaryContent>())
                {
                    this.BinaryContent = ((AstBinaryContent)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBinaryContent BinaryContent
        {
            get
            {
                return this._binaryContent;
            }
            set
            {
                this._binaryContent = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBinaryContentNext(this);
        }
    }
    
    public partial class AstBinaryContent : AstRule
    {
        
        public AstBinaryContent(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBinaryContent(this);
        }
    }
    
    public partial class AstDropAssembly : AstRule
    {
        
        public AstDropAssembly(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAssembly(this);
        }
    }
    
    public partial class AstAlterAsymmetricKey : AstRule
    {
        
        private AstAlterAsymmetricKeyStart _alterAsymmetricKeyStart;
        
        private AstAsymKeyName _asymKeyName;
        
        public AstAlterAsymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAsymmetricKeyStart>())
                {
                    this.AlterAsymmetricKeyStart = ((AstAlterAsymmetricKeyStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymKeyName>())
                {
                    this.AsymKeyName = ((AstAsymKeyName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAsymmetricKeyStart AlterAsymmetricKeyStart
        {
            get
            {
                return this._alterAsymmetricKeyStart;
            }
            set
            {
                this._alterAsymmetricKeyStart = value;
            }
        }
        
        public virtual AstAsymKeyName AsymKeyName
        {
            get
            {
                return this._asymKeyName;
            }
            set
            {
                this._asymKeyName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAsymmetricKey(this);
        }
    }
    
    public partial class AstAlterAsymmetricKeyStart : AstRule
    {
        
        public AstAlterAsymmetricKeyStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAsymmetricKeyStart(this);
        }
    }
    
    public partial class AstAsymmetricKeyOption : AstRule
    {
        
        private AstAsymmetricKeyOptionStart _asymmetricKeyOptionStart;
        
        private AstAsymmetricKeyPasswordChangeOption _asymmetricKeyPasswordChangeOption;
        
        public AstAsymmetricKeyOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymmetricKeyOptionStart>())
                {
                    this.AsymmetricKeyOptionStart = ((AstAsymmetricKeyOptionStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymmetricKeyPasswordChangeOption>())
                {
                    this.AsymmetricKeyPasswordChangeOption = ((AstAsymmetricKeyPasswordChangeOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAsymmetricKeyOptionStart AsymmetricKeyOptionStart
        {
            get
            {
                return this._asymmetricKeyOptionStart;
            }
            set
            {
                this._asymmetricKeyOptionStart = value;
            }
        }
        
        public virtual AstAsymmetricKeyPasswordChangeOption AsymmetricKeyPasswordChangeOption
        {
            get
            {
                return this._asymmetricKeyPasswordChangeOption;
            }
            set
            {
                this._asymmetricKeyPasswordChangeOption = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsymmetricKeyOption(this);
        }
    }
    
    public partial class AstAsymmetricKeyOptionStart : AstRule
    {
        
        public AstAsymmetricKeyOptionStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsymmetricKeyOptionStart(this);
        }
    }
    
    public partial class AstAsymmetricKeyPasswordChangeOption : AstRule
    {
        
        public AstAsymmetricKeyPasswordChangeOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsymmetricKeyPasswordChangeOption(this);
        }
    }
    
    public partial class AstCreateAsymmetricKey : AstRule
    {
        
        private AstAsymKeyName _asymKeyName;
        
        public AstCreateAsymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymKeyName>())
                {
                    this.AsymKeyName = ((AstAsymKeyName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAsymKeyName AsymKeyName
        {
            get
            {
                return this._asymKeyName;
            }
            set
            {
                this._asymKeyName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateAsymmetricKey(this);
        }
    }
    
    public partial class AstDropAsymmetricKey : AstRule
    {
        
        public AstDropAsymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAsymmetricKey(this);
        }
    }
    
    public partial class AstAlterAuthorization : AstRule
    {
        
        private AstAlterAuthorizationStart _alterAuthorizationStart;
        
        private AstEntityTo _entityTo;
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        public AstAlterAuthorization(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAuthorizationStart>())
                {
                    this.AlterAuthorizationStart = ((AstAlterAuthorizationStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityTo>())
                {
                    this.EntityTo = ((AstEntityTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this.AuthorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAuthorizationStart AlterAuthorizationStart
        {
            get
            {
                return this._alterAuthorizationStart;
            }
            set
            {
                this._alterAuthorizationStart = value;
            }
        }
        
        public virtual AstEntityTo EntityTo
        {
            get
            {
                return this._entityTo;
            }
            set
            {
                this._entityTo = value;
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
            set
            {
                this._authorizationGrantee = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorization(this);
        }
    }
    
    public partial class AstAuthorizationGrantee : AstRule
    {
        
        public AstAuthorizationGrantee(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuthorizationGrantee(this);
        }
    }
    
    public partial class AstEntityTo : AstRule
    {
        
        public AstEntityTo(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEntityTo(this);
        }
    }
    
    public partial class AstColonColon : AstRule
    {
        
        public AstColonColon(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColonColon(this);
        }
    }
    
    public partial class AstAlterAuthorizationStart : AstRule
    {
        
        public AstAlterAuthorizationStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationStart(this);
        }
    }
    
    public partial class AstAlterAuthorizationForSqlDatabase : AstRule
    {
        
        private AstAlterAuthorizationStart _alterAuthorizationStart;
        
        private AstEntityTo _entityTo;
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        public AstAlterAuthorizationForSqlDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAuthorizationStart>())
                {
                    this.AlterAuthorizationStart = ((AstAlterAuthorizationStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityTo>())
                {
                    this.EntityTo = ((AstEntityTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this.AuthorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAuthorizationStart AlterAuthorizationStart
        {
            get
            {
                return this._alterAuthorizationStart;
            }
            set
            {
                this._alterAuthorizationStart = value;
            }
        }
        
        public virtual AstEntityTo EntityTo
        {
            get
            {
                return this._entityTo;
            }
            set
            {
                this._entityTo = value;
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
            set
            {
                this._authorizationGrantee = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationForSqlDatabase(this);
        }
    }
    
    public partial class AstAlterAuthorizationForAzureDw : AstRule
    {
        
        private AstAlterAuthorizationStart _alterAuthorizationStart;
        
        private AstEntityTo _entityTo;
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        public AstAlterAuthorizationForAzureDw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAuthorizationStart>())
                {
                    this.AlterAuthorizationStart = ((AstAlterAuthorizationStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityTo>())
                {
                    this.EntityTo = ((AstEntityTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this.AuthorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAuthorizationStart AlterAuthorizationStart
        {
            get
            {
                return this._alterAuthorizationStart;
            }
            set
            {
                this._alterAuthorizationStart = value;
            }
        }
        
        public virtual AstEntityTo EntityTo
        {
            get
            {
                return this._entityTo;
            }
            set
            {
                this._entityTo = value;
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
            set
            {
                this._authorizationGrantee = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationForAzureDw(this);
        }
    }
    
    public partial class AstAlterAuthorizationForParallelDw : AstRule
    {
        
        private AstAlterAuthorizationStart _alterAuthorizationStart;
        
        private AstEntityTo _entityTo;
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        public AstAlterAuthorizationForParallelDw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAuthorizationStart>())
                {
                    this.AlterAuthorizationStart = ((AstAlterAuthorizationStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityTo>())
                {
                    this.EntityTo = ((AstEntityTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this.AuthorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAuthorizationStart AlterAuthorizationStart
        {
            get
            {
                return this._alterAuthorizationStart;
            }
            set
            {
                this._alterAuthorizationStart = value;
            }
        }
        
        public virtual AstEntityTo EntityTo
        {
            get
            {
                return this._entityTo;
            }
            set
            {
                this._entityTo = value;
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
            set
            {
                this._authorizationGrantee = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationForParallelDw(this);
        }
    }
    
    public partial class AstClassType : AstRule
    {
        
        public AstClassType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassType(this);
        }
    }
    
    public partial class AstClassTypeForSqlDatabase : AstRule
    {
        
        public AstClassTypeForSqlDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassTypeForSqlDatabase(this);
        }
    }
    
    public partial class AstClassTypeForAzureDw : AstTerminalEnum<AstClassTypeForAzureDwEnum>
    {
        
        public AstClassTypeForAzureDw(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassTypeForAzureDw(this);
        }
        
        protected override AstClassTypeForAzureDwEnum GetValue(string value)
        {
            if ((value == "SCHEMA"))
            {
                return AstClassTypeForAzureDwEnum.Schema;
            }
            if ((value == "OBJECT"))
            {
                return AstClassTypeForAzureDwEnum.Object;
            }
            return AstClassTypeForAzureDwEnum._undefined;
        }
    }
    
    public partial class AstClassTypeForParallelDw : AstTerminalEnum<AstClassTypeForParallelDwEnum>
    {
        
        public AstClassTypeForParallelDw(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassTypeForParallelDw(this);
        }
        
        protected override AstClassTypeForParallelDwEnum GetValue(string value)
        {
            if ((value == "DATABASE"))
            {
                return AstClassTypeForParallelDwEnum.Database;
            }
            if ((value == "SCHEMA"))
            {
                return AstClassTypeForParallelDwEnum.Schema;
            }
            if ((value == "OBJECT"))
            {
                return AstClassTypeForParallelDwEnum.Object;
            }
            return AstClassTypeForParallelDwEnum._undefined;
        }
    }
    
    public partial class AstClassTypeForGrant : AstRule
    {
        
        public AstClassTypeForGrant(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassTypeForGrant(this);
        }
    }
    
    public partial class AstDropAvailabilityGroup : AstRule
    {
        
        private AstGroupName _groupName;
        
        public AstDropAvailabilityGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupName>())
                {
                    this.GroupName = ((AstGroupName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGroupName GroupName
        {
            get
            {
                return this._groupName;
            }
            set
            {
                this._groupName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAvailabilityGroup(this);
        }
    }
    
    public partial class AstAlterAvailabilityGroup : AstRule
    {
        
        private AstAlterAvailabilityGroupStart _alterAvailabilityGroupStart;
        
        private AstAlterAvailabilityGroupOptions _alterAvailabilityGroupOptions;
        
        public AstAlterAvailabilityGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAvailabilityGroupStart>())
                {
                    this.AlterAvailabilityGroupStart = ((AstAlterAvailabilityGroupStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilityGroupOptions>())
                {
                    this.AlterAvailabilityGroupOptions = ((AstAlterAvailabilityGroupOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAvailabilityGroupStart AlterAvailabilityGroupStart
        {
            get
            {
                return this._alterAvailabilityGroupStart;
            }
            set
            {
                this._alterAvailabilityGroupStart = value;
            }
        }
        
        public virtual AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions
        {
            get
            {
                return this._alterAvailabilityGroupOptions;
            }
            set
            {
                this._alterAvailabilityGroupOptions = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroup(this);
        }
    }
    
    public partial class AstAlterAvailabilityGroupStart : AstRule
    {
        
        private AstGroupName _groupName;
        
        public AstAlterAvailabilityGroupStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupName>())
                {
                    this.GroupName = ((AstGroupName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGroupName GroupName
        {
            get
            {
                return this._groupName;
            }
            set
            {
                this._groupName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupStart(this);
        }
    }
    
    public partial class AstAlterAvailabilityGroupOptions : AstRule
    {
        
        public AstAlterAvailabilityGroupOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupOptions(this);
        }
    }
    
    public partial class AstServerInstance : AstRule
    {
        
        public AstServerInstance(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerInstance(this);
        }
    }
    
    public partial class AstIpV4Failover : AstRule
    {
        
        public AstIpV4Failover(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIpV4Failover(this);
        }
    }
    
    public partial class AstIpV6Failover : AstRule
    {
        
        public AstIpV6Failover(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIpV6Failover(this);
        }
    }
    
    public partial class AstCreateOrAlterBrokerPriority : AstRule
    {
        
        public AstCreateOrAlterBrokerPriority(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterBrokerPriority(this);
        }
    }
    
    public partial class AstDropBrokerPriority : AstRule
    {
        
        public AstDropBrokerPriority(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropBrokerPriority(this);
        }
    }
    
    public partial class AstAlterCertificate : AstRule
    {
        
        private AstCertificateName _certificateName;
        
        public AstAlterCertificate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateName>())
                {
                    this.CertificateName = ((AstCertificateName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateName CertificateName
        {
            get
            {
                return this._certificateName;
            }
            set
            {
                this._certificateName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterCertificate(this);
        }
    }
    
    public partial class AstAlterColumnEncryptionKey : AstRule
    {
        
        private AstColumnEncryptionKey _columnEncryptionKey;
        
        public AstAlterColumnEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKey>())
                {
                    this.ColumnEncryptionKey = ((AstColumnEncryptionKey)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnEncryptionKey ColumnEncryptionKey
        {
            get
            {
                return this._columnEncryptionKey;
            }
            set
            {
                this._columnEncryptionKey = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterColumnEncryptionKey(this);
        }
    }
    
    public partial class AstCreateColumnEncryptionKey : AstRule
    {
        
        private AstColumnEncryptionKey _columnEncryptionKey;
        
        public AstCreateColumnEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKey>())
                {
                    this.ColumnEncryptionKey = ((AstColumnEncryptionKey)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnEncryptionKey ColumnEncryptionKey
        {
            get
            {
                return this._columnEncryptionKey;
            }
            set
            {
                this._columnEncryptionKey = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnEncryptionKey(this);
        }
    }
    
    public partial class AstDropCertificate : AstRule
    {
        
        private AstCertificateName _certificateName;
        
        public AstDropCertificate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateName>())
                {
                    this.CertificateName = ((AstCertificateName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateName CertificateName
        {
            get
            {
                return this._certificateName;
            }
            set
            {
                this._certificateName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropCertificate(this);
        }
    }
    
    public partial class AstDropColumnEncryptionKey : AstRule
    {
        
        private AstEncryptionName _encryptionName;
        
        public AstDropColumnEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptionName>())
                {
                    this.EncryptionName = ((AstEncryptionName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEncryptionName EncryptionName
        {
            get
            {
                return this._encryptionName;
            }
            set
            {
                this._encryptionName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropColumnEncryptionKey(this);
        }
    }
    
    public partial class AstDropColumnMasterKey : AstRule
    {
        
        private AstMasterKey _masterKey;
        
        public AstDropColumnMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMasterKey>())
                {
                    this.MasterKey = ((AstMasterKey)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMasterKey MasterKey
        {
            get
            {
                return this._masterKey;
            }
            set
            {
                this._masterKey = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropColumnMasterKey(this);
        }
    }
    
    public partial class AstDropContract : AstRule
    {
        
        public AstDropContract(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropContract(this);
        }
    }
    
    public partial class AstDropCredential : AstRule
    {
        
        private AstCredentialName _credentialName;
        
        public AstDropCredential(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialName>())
                {
                    this.CredentialName = ((AstCredentialName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialName CredentialName
        {
            get
            {
                return this._credentialName;
            }
            set
            {
                this._credentialName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropCredential(this);
        }
    }
    
    public partial class AstDropCryptograhicProvider : AstRule
    {
        
        private AstProviderName _providerName;
        
        public AstDropCryptograhicProvider(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderName>())
                {
                    this.ProviderName = ((AstProviderName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProviderName ProviderName
        {
            get
            {
                return this._providerName;
            }
            set
            {
                this._providerName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropCryptograhicProvider(this);
        }
    }
    
    public partial class AstDropDatabase : AstRule
    {
        
        public AstDropDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabase(this);
        }
    }
    
    public partial class AstDropDatabaseAuditSpecification : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstDropDatabaseAuditSpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this.AuditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
            set
            {
                this._auditName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabaseAuditSpecification(this);
        }
    }
    
    public partial class AstDropDatabaseEncryptionKey : AstRule
    {
        
        public AstDropDatabaseEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabaseEncryptionKey(this);
        }
    }
    
    public partial class AstDropDatabaseScopedCredential : AstRule
    {
        
        private AstCredentialName _credentialName;
        
        public AstDropDatabaseScopedCredential(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialName>())
                {
                    this.CredentialName = ((AstCredentialName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialName CredentialName
        {
            get
            {
                return this._credentialName;
            }
            set
            {
                this._credentialName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabaseScopedCredential(this);
        }
    }
    
    public partial class AstDropDefault : AstRule
    {
        
        public AstDropDefault(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDefault(this);
        }
    }
    
    public partial class AstDropEndpoint : AstRule
    {
        
        private AstEndpointName _endpointName;
        
        public AstDropEndpoint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointName>())
                {
                    this.EndpointName = ((AstEndpointName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEndpointName EndpointName
        {
            get
            {
                return this._endpointName;
            }
            set
            {
                this._endpointName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropEndpoint(this);
        }
    }
    
    public partial class AstDropExternalDataSource : AstRule
    {
        
        private AstExternalDataSourceName _externalDataSourceName;
        
        public AstDropExternalDataSource(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalDataSourceName>())
                {
                    this.ExternalDataSourceName = ((AstExternalDataSourceName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExternalDataSourceName ExternalDataSourceName
        {
            get
            {
                return this._externalDataSourceName;
            }
            set
            {
                this._externalDataSourceName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalDataSource(this);
        }
    }
    
    public partial class AstDropExternalFileFormat : AstRule
    {
        
        private AstExternalFileFormatName _externalFileFormatName;
        
        public AstDropExternalFileFormat(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalFileFormatName>())
                {
                    this.ExternalFileFormatName = ((AstExternalFileFormatName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExternalFileFormatName ExternalFileFormatName
        {
            get
            {
                return this._externalFileFormatName;
            }
            set
            {
                this._externalFileFormatName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalFileFormat(this);
        }
    }
    
    public partial class AstDropExternalLibrary : AstRule
    {
        
        private AstLibraryName _libraryName;
        
        public AstDropExternalLibrary(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryName>())
                {
                    this.LibraryName = ((AstLibraryName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLibraryName LibraryName
        {
            get
            {
                return this._libraryName;
            }
            set
            {
                this._libraryName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalLibrary(this);
        }
    }
    
    public partial class AstDropExternalResourcePool : AstRule
    {
        
        private AstPoolName _poolName;
        
        public AstDropExternalResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolName>())
                {
                    this.PoolName = ((AstPoolName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolName PoolName
        {
            get
            {
                return this._poolName;
            }
            set
            {
                this._poolName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalResourcePool(this);
        }
    }
    
    public partial class AstDropExternalTable : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstDropExternalTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this.TableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                this._tableName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalTable(this);
        }
    }
    
    public partial class AstDropEventNotifications : AstRule
    {
        
        public AstDropEventNotifications(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropEventNotifications(this);
        }
    }
    
    public partial class AstDropEventSession : AstRule
    {
        
        private AstEventSessionName _eventSessionName;
        
        public AstDropEventSession(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionName>())
                {
                    this.EventSessionName = ((AstEventSessionName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventSessionName EventSessionName
        {
            get
            {
                return this._eventSessionName;
            }
            set
            {
                this._eventSessionName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropEventSession(this);
        }
    }
    
    public partial class AstDropFulltextCatalog : AstRule
    {
        
        private AstCatalogName _catalogName;
        
        public AstDropFulltextCatalog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogName>())
                {
                    this.CatalogName = ((AstCatalogName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCatalogName CatalogName
        {
            get
            {
                return this._catalogName;
            }
            set
            {
                this._catalogName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFulltextCatalog(this);
        }
    }
    
    public partial class AstDropFulltextIndex : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstDropFulltextIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this.TableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                this._tableName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFulltextIndex(this);
        }
    }
    
    public partial class AstDropFulltextStoplist : AstRule
    {
        
        private AstStoplistName _stoplistName;
        
        public AstDropFulltextStoplist(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistName>())
                {
                    this.StoplistName = ((AstStoplistName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStoplistName StoplistName
        {
            get
            {
                return this._stoplistName;
            }
            set
            {
                this._stoplistName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFulltextStoplist(this);
        }
    }
    
    public partial class AstDropLogin : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstDropLogin(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this.LoginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
            set
            {
                this._loginName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropLogin(this);
        }
    }
    
    public partial class AstDropMasterKey : AstRule
    {
        
        public AstDropMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropMasterKey(this);
        }
    }
    
    public partial class AstDropMessageType : AstRule
    {
        
        private AstMessageTypeName _messageTypeName;
        
        public AstDropMessageType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeName>())
                {
                    this.MessageTypeName = ((AstMessageTypeName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMessageTypeName MessageTypeName
        {
            get
            {
                return this._messageTypeName;
            }
            set
            {
                this._messageTypeName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropMessageType(this);
        }
    }
    
    public partial class AstMessageTypeName : AstRule
    {
        
        private AstId _id;
        
        public AstMessageTypeName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMessageTypeName(this);
        }
    }
    
    public partial class AstDropPartitionFunction : AstRule
    {
        
        private AstPartitionFunctionName _partitionFunctionName;
        
        public AstDropPartitionFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionName>())
                {
                    this.PartitionFunctionName = ((AstPartitionFunctionName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionFunctionName PartitionFunctionName
        {
            get
            {
                return this._partitionFunctionName;
            }
            set
            {
                this._partitionFunctionName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropPartitionFunction(this);
        }
    }
    
    public partial class AstPartitionFunctionName : AstRule
    {
        
        private AstId _id;
        
        public AstPartitionFunctionName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionFunctionName(this);
        }
    }
    
    public partial class AstDropPartitionScheme : AstRule
    {
        
        private AstPartitionSchemeName _partitionSchemeName;
        
        public AstDropPartitionScheme(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeName>())
                {
                    this.PartitionSchemeName = ((AstPartitionSchemeName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionSchemeName PartitionSchemeName
        {
            get
            {
                return this._partitionSchemeName;
            }
            set
            {
                this._partitionSchemeName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropPartitionScheme(this);
        }
    }
    
    public partial class AstPartitionSchemeName : AstRule
    {
        
        private AstId _id;
        
        public AstPartitionSchemeName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionSchemeName(this);
        }
    }
    
    public partial class AstDropQueue : AstRule
    {
        
        private AstQueueName _queueName;
        
        public AstDropQueue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueueName>())
                {
                    this.QueueName = ((AstQueueName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstQueueName QueueName
        {
            get
            {
                return this._queueName;
            }
            set
            {
                this._queueName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropQueue(this);
        }
    }
    
    public partial class AstDropRemoteServiceBinding : AstRule
    {
        
        private AstBindingName _bindingName;
        
        public AstDropRemoteServiceBinding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingName>())
                {
                    this.BindingName = ((AstBindingName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBindingName BindingName
        {
            get
            {
                return this._bindingName;
            }
            set
            {
                this._bindingName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRemoteServiceBinding(this);
        }
    }
    
    public partial class AstDropResourcePool : AstRule
    {
        
        private AstPoolName _poolName;
        
        public AstDropResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolName>())
                {
                    this.PoolName = ((AstPoolName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolName PoolName
        {
            get
            {
                return this._poolName;
            }
            set
            {
                this._poolName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropResourcePool(this);
        }
    }
    
    public partial class AstDropDbRole : AstRule
    {
        
        private AstRoleName _roleName;
        
        public AstDropDbRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this.RoleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleName RoleName
        {
            get
            {
                return this._roleName;
            }
            set
            {
                this._roleName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDbRole(this);
        }
    }
    
    public partial class AstDropRoute : AstRule
    {
        
        private AstRouteName _routeName;
        
        public AstDropRoute(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteName>())
                {
                    this.RouteName = ((AstRouteName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRouteName RouteName
        {
            get
            {
                return this._routeName;
            }
            set
            {
                this._routeName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRoute(this);
        }
    }
    
    public partial class AstDropRule : AstRule
    {
        
        public AstDropRule(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRule(this);
        }
    }
    
    public partial class AstDropSchema : AstRule
    {
        
        private AstSchemaName _schemaName;
        
        public AstDropSchema(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaName>())
                {
                    this.SchemaName = ((AstSchemaName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaName SchemaName
        {
            get
            {
                return this._schemaName;
            }
            set
            {
                this._schemaName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSchema(this);
        }
    }
    
    public partial class AstDropSearchPropertyList : AstRule
    {
        
        private AstPropertyListName _propertyListName;
        
        public AstDropSearchPropertyList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPropertyListName>())
                {
                    this.PropertyListName = ((AstPropertyListName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPropertyListName PropertyListName
        {
            get
            {
                return this._propertyListName;
            }
            set
            {
                this._propertyListName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSearchPropertyList(this);
        }
    }
    
    public partial class AstDropSecurityPolicy : AstRule
    {
        
        private AstSecurityPolicyName _securityPolicyName;
        
        public AstDropSecurityPolicy(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSecurityPolicyName>())
                {
                    this.SecurityPolicyName = ((AstSecurityPolicyName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSecurityPolicyName SecurityPolicyName
        {
            get
            {
                return this._securityPolicyName;
            }
            set
            {
                this._securityPolicyName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSecurityPolicy(this);
        }
    }
    
    public partial class AstDropSequence : AstRule
    {
        
        public AstDropSequence(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSequence(this);
        }
    }
    
    public partial class AstDropServerAudit : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstDropServerAudit(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this.AuditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
            set
            {
                this._auditName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropServerAudit(this);
        }
    }
    
    public partial class AstDropServerAuditSpecification : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstDropServerAuditSpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this.AuditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
            set
            {
                this._auditName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropServerAuditSpecification(this);
        }
    }
    
    public partial class AstDropServerRole : AstRule
    {
        
        private AstRoleName _roleName;
        
        public AstDropServerRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this.RoleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleName RoleName
        {
            get
            {
                return this._roleName;
            }
            set
            {
                this._roleName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropServerRole(this);
        }
    }
    
    public partial class AstDropService : AstRule
    {
        
        private AstDroppedServiceName _droppedServiceName;
        
        public AstDropService(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDroppedServiceName>())
                {
                    this.DroppedServiceName = ((AstDroppedServiceName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDroppedServiceName DroppedServiceName
        {
            get
            {
                return this._droppedServiceName;
            }
            set
            {
                this._droppedServiceName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropService(this);
        }
    }
    
    public partial class AstDropSignature : AstRule
    {
        
        private AstModuleName _moduleName;
        
        public AstDropSignature(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModuleName>())
                {
                    this.ModuleName = ((AstModuleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstModuleName ModuleName
        {
            get
            {
                return this._moduleName;
            }
            set
            {
                this._moduleName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSignature(this);
        }
    }
    
    public partial class AstDropStatisticsNameAzureDwAndPdw : AstRule
    {
        
        private AstObjectName _objectName;
        
        private AstStatisticsName _statisticsName;
        
        public AstDropStatisticsNameAzureDwAndPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstObjectName>())
                {
                    this.ObjectName = ((AstObjectName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStatisticsName>())
                {
                    this.StatisticsName = ((AstStatisticsName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstObjectName ObjectName
        {
            get
            {
                return this._objectName;
            }
            set
            {
                this._objectName = value;
            }
        }
        
        public virtual AstStatisticsName StatisticsName
        {
            get
            {
                return this._statisticsName;
            }
            set
            {
                this._statisticsName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropStatisticsNameAzureDwAndPdw(this);
        }
    }
    
    public partial class AstDropSymmetricKey : AstRule
    {
        
        private AstSymmetricKeyName _symmetricKeyName;
        
        public AstDropSymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyName>())
                {
                    this.SymmetricKeyName = ((AstSymmetricKeyName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSymmetricKeyName SymmetricKeyName
        {
            get
            {
                return this._symmetricKeyName;
            }
            set
            {
                this._symmetricKeyName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSymmetricKey(this);
        }
    }
    
    public partial class AstDropSynonym : AstRule
    {
        
        private AstSynonymName _synonymName;
        
        public AstDropSynonym(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSynonymName>())
                {
                    this.SynonymName = ((AstSynonymName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSynonymName SynonymName
        {
            get
            {
                return this._synonymName;
            }
            set
            {
                this._synonymName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSynonym(this);
        }
    }
    
    public partial class AstDropUser : AstRule
    {
        
        private AstUserName _userName;
        
        public AstDropUser(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserName>())
                {
                    this.UserName = ((AstUserName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUserName UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                this._userName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropUser(this);
        }
    }
    
    public partial class AstDropWorkloadGroup : AstRule
    {
        
        private AstGroupName _groupName;
        
        public AstDropWorkloadGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupName>())
                {
                    this.GroupName = ((AstGroupName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGroupName GroupName
        {
            get
            {
                return this._groupName;
            }
            set
            {
                this._groupName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropWorkloadGroup(this);
        }
    }
    
    public partial class AstDropXmlSchemaCollection : AstRule
    {
        
        private AstSqlIdentifier _sqlIdentifier;
        
        public AstDropXmlSchemaCollection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlIdentifier>())
                {
                    this.SqlIdentifier = ((AstSqlIdentifier)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSqlIdentifier SqlIdentifier
        {
            get
            {
                return this._sqlIdentifier;
            }
            set
            {
                this._sqlIdentifier = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropXmlSchemaCollection(this);
        }
    }
    
    public partial class AstDisableTrigger : AstRule
    {
        
        public AstDisableTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDisableTrigger(this);
        }
    }
    
    public partial class AstEnableTrigger : AstRule
    {
        
        public AstEnableTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEnableTrigger(this);
        }
    }
    
    public partial class AstLockTable : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstLockTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this.TableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                this._tableName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLockTable(this);
        }
    }
    
    public partial class AstTruncateTable : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstTruncateTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this.TableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                this._tableName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTruncateTable(this);
        }
    }
    
    public partial class AstCreateColumnMasterKey : AstRule
    {
        
        public AstCreateColumnMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnMasterKey(this);
        }
    }
    
    public partial class AstAlterCredential : AstRule
    {
        
        private AstCredentialName _credentialName;
        
        public AstAlterCredential(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialName>())
                {
                    this.CredentialName = ((AstCredentialName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialName CredentialName
        {
            get
            {
                return this._credentialName;
            }
            set
            {
                this._credentialName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterCredential(this);
        }
    }
    
    public partial class AstCreateCredential : AstRule
    {
        
        private AstCredentialName _credentialName;
        
        public AstCreateCredential(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialName>())
                {
                    this.CredentialName = ((AstCredentialName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialName CredentialName
        {
            get
            {
                return this._credentialName;
            }
            set
            {
                this._credentialName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateCredential(this);
        }
    }
    
    public partial class AstAlterCryptographicProvider : AstRule
    {
        
        private AstProviderName _providerName;
        
        public AstAlterCryptographicProvider(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderName>())
                {
                    this.ProviderName = ((AstProviderName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProviderName ProviderName
        {
            get
            {
                return this._providerName;
            }
            set
            {
                this._providerName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterCryptographicProvider(this);
        }
    }
    
    public partial class AstCreateCryptographicProvider : AstRule
    {
        
        private AstProviderName _providerName;
        
        public AstCreateCryptographicProvider(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderName>())
                {
                    this.ProviderName = ((AstProviderName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProviderName ProviderName
        {
            get
            {
                return this._providerName;
            }
            set
            {
                this._providerName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateCryptographicProvider(this);
        }
    }
    
    public partial class AstCreateEventNotification : AstRule
    {
        
        private AstEventNotificationName _eventNotificationName;
        
        public AstCreateEventNotification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventNotificationName>())
                {
                    this.EventNotificationName = ((AstEventNotificationName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventNotificationName EventNotificationName
        {
            get
            {
                return this._eventNotificationName;
            }
            set
            {
                this._eventNotificationName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateEventNotification(this);
        }
    }
    
    public partial class AstCreateOrAlterEventSession : AstRule
    {
        
        private AstEventSessionName _eventSessionName;
        
        public AstCreateOrAlterEventSession(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionName>())
                {
                    this.EventSessionName = ((AstEventSessionName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventSessionName EventSessionName
        {
            get
            {
                return this._eventSessionName;
            }
            set
            {
                this._eventSessionName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSession(this);
        }
    }
    
    public partial class AstStartStop : AstTerminalEnum<AstStartStopEnum>
    {
        
        public AstStartStop(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStartStop(this);
        }
        
        protected override AstStartStopEnum GetValue(string value)
        {
            if ((value == "START"))
            {
                return AstStartStopEnum.Start;
            }
            if ((value == "STOP"))
            {
                return AstStartStopEnum.Stop;
            }
            return AstStartStopEnum._undefined;
        }
    }
    
    public partial class AstEventSessionPredicateExpression : AstRule
    {
        
        public AstEventSessionPredicateExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionPredicateExpression(this);
        }
    }
    
    public partial class AstEventSessionPredicateFactor : AstRule
    {
        
        public AstEventSessionPredicateFactor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionPredicateFactor(this);
        }
    }
    
    public partial class AstEventSessionPredicateLeaf : AstRule
    {
        
        public AstEventSessionPredicateLeaf(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionPredicateLeaf(this);
        }
    }
    
    public partial class AstAlterExternalDataSource : AstRule
    {
        
        public AstAlterExternalDataSource(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterExternalDataSource(this);
        }
    }
    
    public partial class AstAlterExternalLibrary : AstRule
    {
        
        private AstLibraryName _libraryName;
        
        public AstAlterExternalLibrary(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryName>())
                {
                    this.LibraryName = ((AstLibraryName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLibraryName LibraryName
        {
            get
            {
                return this._libraryName;
            }
            set
            {
                this._libraryName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterExternalLibrary(this);
        }
    }
    
    public partial class AstCreateExternalLibrary : AstRule
    {
        
        private AstLibraryName _libraryName;
        
        public AstCreateExternalLibrary(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryName>())
                {
                    this.LibraryName = ((AstLibraryName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLibraryName LibraryName
        {
            get
            {
                return this._libraryName;
            }
            set
            {
                this._libraryName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateExternalLibrary(this);
        }
    }
    
    public partial class AstAlterExternalResourcePool : AstRule
    {
        
        public AstAlterExternalResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterExternalResourcePool(this);
        }
    }
    
    public partial class AstCreateExternalResourcePool : AstRule
    {
        
        private AstPoolName _poolName;
        
        public AstCreateExternalResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolName>())
                {
                    this.PoolName = ((AstPoolName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolName PoolName
        {
            get
            {
                return this._poolName;
            }
            set
            {
                this._poolName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateExternalResourcePool(this);
        }
    }
    
    public partial class AstAlterFulltextCatalog : AstRule
    {
        
        private AstCatalogName _catalogName;
        
        public AstAlterFulltextCatalog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogName>())
                {
                    this.CatalogName = ((AstCatalogName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCatalogName CatalogName
        {
            get
            {
                return this._catalogName;
            }
            set
            {
                this._catalogName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterFulltextCatalog(this);
        }
    }
    
    public partial class AstCreateFulltextCatalog : AstRule
    {
        
        private AstCatalogName _catalogName;
        
        public AstCreateFulltextCatalog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogName>())
                {
                    this.CatalogName = ((AstCatalogName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCatalogName CatalogName
        {
            get
            {
                return this._catalogName;
            }
            set
            {
                this._catalogName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateFulltextCatalog(this);
        }
    }
    
    public partial class AstAlterFulltextStoplist : AstRule
    {
        
        private AstStoplistName _stoplistName;
        
        public AstAlterFulltextStoplist(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistName>())
                {
                    this.StoplistName = ((AstStoplistName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStoplistName StoplistName
        {
            get
            {
                return this._stoplistName;
            }
            set
            {
                this._stoplistName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterFulltextStoplist(this);
        }
    }
    
    public partial class AstCreateFulltextStoplist : AstRule
    {
        
        private AstStoplistName _stoplistName;
        
        public AstCreateFulltextStoplist(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistName>())
                {
                    this.StoplistName = ((AstStoplistName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStoplistName StoplistName
        {
            get
            {
                return this._stoplistName;
            }
            set
            {
                this._stoplistName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateFulltextStoplist(this);
        }
    }
    
    public partial class AstAlterLoginSqlServer : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstAlterLoginSqlServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this.LoginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
            set
            {
                this._loginName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginSqlServer(this);
        }
    }
    
    public partial class AstCreateLoginSqlServer : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstCreateLoginSqlServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this.LoginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
            set
            {
                this._loginName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginSqlServer(this);
        }
    }
    
    public partial class AstAlterLoginAzureSql : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstAlterLoginAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this.LoginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
            set
            {
                this._loginName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginAzureSql(this);
        }
    }
    
    public partial class AstCreateLoginAzureSql : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstCreateLoginAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this.LoginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
            set
            {
                this._loginName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginAzureSql(this);
        }
    }
    
    public partial class AstAlterLoginAzureSqlDwAndPdw : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstAlterLoginAzureSqlDwAndPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this.LoginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
            set
            {
                this._loginName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginAzureSqlDwAndPdw(this);
        }
    }
    
    public partial class AstEnableDisable : AstTerminalEnum<AstEnableDisableEnum>
    {
        
        public AstEnableDisable(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEnableDisable(this);
        }
        
        protected override AstEnableDisableEnum GetValue(string value)
        {
            if ((value == "ENABLE"))
            {
                return AstEnableDisableEnum.Enable;
            }
            if ((value == "DISABLE"))
            {
                return AstEnableDisableEnum.Disable;
            }
            return AstEnableDisableEnum._undefined;
        }
    }
    
    public partial class AstCreateLoginPdw : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstCreateLoginPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this.LoginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
            set
            {
                this._loginName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginPdw(this);
        }
    }
    
    public partial class AstAlterMasterKeySqlServer : AstRule
    {
        
        public AstAlterMasterKeySqlServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterMasterKeySqlServer(this);
        }
    }
    
    public partial class AstCreateMasterKeySqlServer : AstRule
    {
        
        public AstCreateMasterKeySqlServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateMasterKeySqlServer(this);
        }
    }
    
    public partial class AstAlterMasterKeyAzureSql : AstRule
    {
        
        public AstAlterMasterKeyAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterMasterKeyAzureSql(this);
        }
    }
    
    public partial class AstCreateMasterKeyAzureSql : AstRule
    {
        
        public AstCreateMasterKeyAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateMasterKeyAzureSql(this);
        }
    }
    
    public partial class AstAlterMessageType : AstRule
    {
        
        private AstMessageTypeName _messageTypeName;
        
        public AstAlterMessageType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeName>())
                {
                    this.MessageTypeName = ((AstMessageTypeName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMessageTypeName MessageTypeName
        {
            get
            {
                return this._messageTypeName;
            }
            set
            {
                this._messageTypeName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterMessageType(this);
        }
    }
    
    public partial class AstAlterPartitionFunction : AstRule
    {
        
        private AstPartitionFunctionName _partitionFunctionName;
        
        private AstSplitOrMerge _splitOrMerge;
        
        public AstAlterPartitionFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionName>())
                {
                    this.PartitionFunctionName = ((AstPartitionFunctionName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSplitOrMerge>())
                {
                    this.SplitOrMerge = ((AstSplitOrMerge)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionFunctionName PartitionFunctionName
        {
            get
            {
                return this._partitionFunctionName;
            }
            set
            {
                this._partitionFunctionName = value;
            }
        }
        
        public virtual AstSplitOrMerge SplitOrMerge
        {
            get
            {
                return this._splitOrMerge;
            }
            set
            {
                this._splitOrMerge = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterPartitionFunction(this);
        }
    }
    
    public partial class AstSplitOrMerge : AstTerminalEnum<AstSplitOrMergeEnum>
    {
        
        public AstSplitOrMerge(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSplitOrMerge(this);
        }
        
        protected override AstSplitOrMergeEnum GetValue(string value)
        {
            if ((value == "SPLIT"))
            {
                return AstSplitOrMergeEnum.Split;
            }
            if ((value == "MERGE"))
            {
                return AstSplitOrMergeEnum.Merge;
            }
            return AstSplitOrMergeEnum._undefined;
        }
    }
    
    public partial class AstAlterPartitionScheme : AstRule
    {
        
        private AstPartitionSchemeName _partitionSchemeName;
        
        public AstAlterPartitionScheme(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeName>())
                {
                    this.PartitionSchemeName = ((AstPartitionSchemeName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionSchemeName PartitionSchemeName
        {
            get
            {
                return this._partitionSchemeName;
            }
            set
            {
                this._partitionSchemeName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterPartitionScheme(this);
        }
    }
    
    public partial class AstAlterRemoteServiceBinding : AstRule
    {
        
        private AstBindingName _bindingName;
        
        public AstAlterRemoteServiceBinding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingName>())
                {
                    this.BindingName = ((AstBindingName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBindingName BindingName
        {
            get
            {
                return this._bindingName;
            }
            set
            {
                this._bindingName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterRemoteServiceBinding(this);
        }
    }
    
    public partial class AstCreateRemoteServiceBinding : AstRule
    {
        
        private AstBindingName _bindingName;
        
        public AstCreateRemoteServiceBinding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingName>())
                {
                    this.BindingName = ((AstBindingName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBindingName BindingName
        {
            get
            {
                return this._bindingName;
            }
            set
            {
                this._bindingName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateRemoteServiceBinding(this);
        }
    }
    
    public partial class AstCreateResourcePool : AstRule
    {
        
        private AstPoolName _poolName;
        
        public AstCreateResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolName>())
                {
                    this.PoolName = ((AstPoolName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolName PoolName
        {
            get
            {
                return this._poolName;
            }
            set
            {
                this._poolName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateResourcePool(this);
        }
    }
    
    public partial class AstAlterResourceGovernor : AstRule
    {
        
        public AstAlterResourceGovernor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterResourceGovernor(this);
        }
    }
    
    public partial class AstAlterDbRole : AstRule
    {
        
        private AstRoleName _roleName;
        
        public AstAlterDbRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this.RoleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleName RoleName
        {
            get
            {
                return this._roleName;
            }
            set
            {
                this._roleName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterDbRole(this);
        }
    }
    
    public partial class AstAddDrop : AstTerminalEnum<AstAddDropEnum>
    {
        
        public AstAddDrop(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAddDrop(this);
        }
        
        protected override AstAddDropEnum GetValue(string value)
        {
            if ((value == "ADD"))
            {
                return AstAddDropEnum.Add;
            }
            if ((value == "DROP"))
            {
                return AstAddDropEnum.Drop;
            }
            return AstAddDropEnum._undefined;
        }
    }
    
    public partial class AstCreateDbRole : AstRule
    {
        
        private AstRoleName _roleName;
        
        public AstCreateDbRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this.RoleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleName RoleName
        {
            get
            {
                return this._roleName;
            }
            set
            {
                this._roleName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateDbRole(this);
        }
    }
    
    public partial class AstCreateRoute : AstRule
    {
        
        private AstRouteName _routeName;
        
        public AstCreateRoute(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteName>())
                {
                    this.RouteName = ((AstRouteName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRouteName RouteName
        {
            get
            {
                return this._routeName;
            }
            set
            {
                this._routeName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateRoute(this);
        }
    }
    
    public partial class AstCreateRule : AstRule
    {
        
        private AstRuleName _ruleName;
        
        private AstSearchCondition _searchCondition;
        
        public AstCreateRule(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRuleName>())
                {
                    this.RuleName = ((AstRuleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this.SearchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRuleName RuleName
        {
            get
            {
                return this._ruleName;
            }
            set
            {
                this._ruleName = value;
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
            set
            {
                this._searchCondition = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateRule(this);
        }
    }
    
    public partial class AstAlterSchemaSql : AstRule
    {
        
        private AstSchemaName _schemaName;
        
        private AstId _id;
        
        public AstAlterSchemaSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaName>())
                {
                    this.SchemaName = ((AstSchemaName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaName SchemaName
        {
            get
            {
                return this._schemaName;
            }
            set
            {
                this._schemaName = value;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSchemaSql(this);
        }
    }
    
    public partial class AstCreateSchema : AstRule
    {
        
        public AstCreateSchema(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSchema(this);
        }
    }
    
    public partial class AstEnumDml : AstTerminalEnum<AstEnumDmlEnum>
    {
        
        public AstEnumDml(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEnumDml(this);
        }
        
        protected override AstEnumDmlEnum GetValue(string value)
        {
            if ((value == "SELECT"))
            {
                return AstEnumDmlEnum.Select;
            }
            if ((value == "INSERT"))
            {
                return AstEnumDmlEnum.Insert;
            }
            if ((value == "DELETE"))
            {
                return AstEnumDmlEnum.Delete;
            }
            if ((value == "UPDATE"))
            {
                return AstEnumDmlEnum.Update;
            }
            return AstEnumDmlEnum._undefined;
        }
    }
    
    public partial class AstGrantDeny : AstTerminalEnum<AstGrantDenyEnum>
    {
        
        public AstGrantDeny(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGrantDeny(this);
        }
        
        protected override AstGrantDenyEnum GetValue(string value)
        {
            if ((value == "GRANT"))
            {
                return AstGrantDenyEnum.Grant;
            }
            if ((value == "DENY"))
            {
                return AstGrantDenyEnum.Deny;
            }
            return AstGrantDenyEnum._undefined;
        }
    }
    
    public partial class AstCreateSchemaAzureSqlDwAndPdw : AstRule
    {
        
        private AstSchemaName _schemaName;
        
        public AstCreateSchemaAzureSqlDwAndPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaName>())
                {
                    this.SchemaName = ((AstSchemaName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaName SchemaName
        {
            get
            {
                return this._schemaName;
            }
            set
            {
                this._schemaName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSchemaAzureSqlDwAndPdw(this);
        }
    }
    
    public partial class AstAlterSchemaAzureSqlDwAndPdw : AstRule
    {
        
        private AstSchemaName _schemaName;
        
        private AstId _id;
        
        public AstAlterSchemaAzureSqlDwAndPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaName>())
                {
                    this.SchemaName = ((AstSchemaName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaName SchemaName
        {
            get
            {
                return this._schemaName;
            }
            set
            {
                this._schemaName = value;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSchemaAzureSqlDwAndPdw(this);
        }
    }
    
    public partial class AstCreateSearchPropertyList : AstRule
    {
        
        private AstSourceListName _sourceListName;
        
        public AstCreateSearchPropertyList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSourceListName>())
                {
                    this.SourceListName = ((AstSourceListName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSourceListName SourceListName
        {
            get
            {
                return this._sourceListName;
            }
            set
            {
                this._sourceListName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSearchPropertyList(this);
        }
    }
    
    public partial class AstCreateSecurityPolicy : AstRule
    {
        
        private AstSecurityPolicyName _securityPolicyName;
        
        public AstCreateSecurityPolicy(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSecurityPolicyName>())
                {
                    this.SecurityPolicyName = ((AstSecurityPolicyName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSecurityPolicyName SecurityPolicyName
        {
            get
            {
                return this._securityPolicyName;
            }
            set
            {
                this._securityPolicyName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSecurityPolicy(this);
        }
    }
    
    public partial class AstAlterSequence : AstRule
    {
        
        private AstSequenceName _sequenceName;
        
        public AstAlterSequence(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSequenceName>())
                {
                    this.SequenceName = ((AstSequenceName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSequenceName SequenceName
        {
            get
            {
                return this._sequenceName;
            }
            set
            {
                this._sequenceName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSequence(this);
        }
    }
    
    public partial class AstCreateSequence : AstRule
    {
        
        private AstSequenceName _sequenceName;
        
        public AstCreateSequence(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSequenceName>())
                {
                    this.SequenceName = ((AstSequenceName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSequenceName SequenceName
        {
            get
            {
                return this._sequenceName;
            }
            set
            {
                this._sequenceName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSequence(this);
        }
    }
    
    public partial class AstAlterServerAudit : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstAlterServerAudit(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this.AuditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
            set
            {
                this._auditName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerAudit(this);
        }
    }
    
    public partial class AstCreateServerAudit : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstCreateServerAudit(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this.AuditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
            set
            {
                this._auditName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerAudit(this);
        }
    }
    
    public partial class AstAlterServerAuditSpecification : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstAlterServerAuditSpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this.AuditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
            set
            {
                this._auditName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerAuditSpecification(this);
        }
    }
    
    public partial class AstCreateServerAuditSpecification : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstCreateServerAuditSpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this.AuditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
            set
            {
                this._auditName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerAuditSpecification(this);
        }
    }
    
    public partial class AstAlterServerConfiguration : AstRule
    {
        
        public AstAlterServerConfiguration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerConfiguration(this);
        }
    }
    
    public partial class AstAlterServerRole : AstRule
    {
        
        private AstServerRoleName _serverRoleName;
        
        public AstAlterServerRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleName>())
                {
                    this.ServerRoleName = ((AstServerRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleName ServerRoleName
        {
            get
            {
                return this._serverRoleName;
            }
            set
            {
                this._serverRoleName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerRole(this);
        }
    }
    
    public partial class AstCreateServerRole : AstRule
    {
        
        private AstServerRoleName _serverRoleName;
        
        public AstCreateServerRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleName>())
                {
                    this.ServerRoleName = ((AstServerRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleName ServerRoleName
        {
            get
            {
                return this._serverRoleName;
            }
            set
            {
                this._serverRoleName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerRole(this);
        }
    }
    
    public partial class AstAlterServerRolePdw : AstRule
    {
        
        private AstServerRoleName _serverRoleName;
        
        private AstLoginName _loginName;
        
        public AstAlterServerRolePdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleName>())
                {
                    this.ServerRoleName = ((AstServerRoleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this.LoginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleName ServerRoleName
        {
            get
            {
                return this._serverRoleName;
            }
            set
            {
                this._serverRoleName = value;
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
            set
            {
                this._loginName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerRolePdw(this);
        }
    }
    
    public partial class AstAlterService : AstRule
    {
        
        private AstModifiedServiceName _modifiedServiceName;
        
        public AstAlterService(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModifiedServiceName>())
                {
                    this.ModifiedServiceName = ((AstModifiedServiceName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstModifiedServiceName ModifiedServiceName
        {
            get
            {
                return this._modifiedServiceName;
            }
            set
            {
                this._modifiedServiceName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterService(this);
        }
    }
    
    public partial class AstCreateService : AstRule
    {
        
        private AstCreateServiceName _createServiceName;
        
        private AstQueueName _queueName;
        
        public AstCreateService(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateServiceName>())
                {
                    this.CreateServiceName = ((AstCreateServiceName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueueName>())
                {
                    this.QueueName = ((AstQueueName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCreateServiceName CreateServiceName
        {
            get
            {
                return this._createServiceName;
            }
            set
            {
                this._createServiceName = value;
            }
        }
        
        public virtual AstQueueName QueueName
        {
            get
            {
                return this._queueName;
            }
            set
            {
                this._queueName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateService(this);
        }
    }
    
    public partial class AstAlterServiceMasterKey : AstRule
    {
        
        public AstAlterServiceMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServiceMasterKey(this);
        }
    }
    
    public partial class AstAlterSymmetricKey : AstRule
    {
        
        private AstSymmetricKeyName _symmetricKeyName;
        
        public AstAlterSymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyName>())
                {
                    this.SymmetricKeyName = ((AstSymmetricKeyName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSymmetricKeyName SymmetricKeyName
        {
            get
            {
                return this._symmetricKeyName;
            }
            set
            {
                this._symmetricKeyName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSymmetricKey(this);
        }
    }
    
    public partial class AstCreateSynonym : AstRule
    {
        
        private AstSynonymName _synonymName;
        
        public AstCreateSynonym(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSynonymName>())
                {
                    this.SynonymName = ((AstSynonymName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSynonymName SynonymName
        {
            get
            {
                return this._synonymName;
            }
            set
            {
                this._synonymName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSynonym(this);
        }
    }
    
    public partial class AstAlterUser : AstRule
    {
        
        private AstUserName _userName;
        
        public AstAlterUser(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserName>())
                {
                    this.UserName = ((AstUserName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUserName UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                this._userName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterUser(this);
        }
    }
    
    public partial class AstCreateUser : AstRule
    {
        
        public AstCreateUser(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateUser(this);
        }
    }
    
    public partial class AstCreateUserAzureSqlDw : AstRule
    {
        
        public AstCreateUserAzureSqlDw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateUserAzureSqlDw(this);
        }
    }
    
    public partial class AstAlterUserAzureSql : AstRule
    {
        
        private AstUserName _userName;
        
        public AstAlterUserAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserName>())
                {
                    this.UserName = ((AstUserName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUserName UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                this._userName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterUserAzureSql(this);
        }
    }
    
    public partial class AstAlterWorkloadGroup : AstRule
    {
        
        public AstAlterWorkloadGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterWorkloadGroup(this);
        }
    }
    
    public partial class AstCreateWorkloadGroup : AstRule
    {
        
        private AstWorkloadGroupGroupName _workloadGroupGroupName;
        
        public AstCreateWorkloadGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWorkloadGroupGroupName>())
                {
                    this.WorkloadGroupGroupName = ((AstWorkloadGroupGroupName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWorkloadGroupGroupName WorkloadGroupGroupName
        {
            get
            {
                return this._workloadGroupGroupName;
            }
            set
            {
                this._workloadGroupGroupName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateWorkloadGroup(this);
        }
    }
    
    public partial class AstCreateXmlSchemaCollection : AstRule
    {
        
        private AstSqlIdentifier _sqlIdentifier;
        
        public AstCreateXmlSchemaCollection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlIdentifier>())
                {
                    this.SqlIdentifier = ((AstSqlIdentifier)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSqlIdentifier SqlIdentifier
        {
            get
            {
                return this._sqlIdentifier;
            }
            set
            {
                this._sqlIdentifier = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateXmlSchemaCollection(this);
        }
    }
    
    public partial class AstCreatePartitionFunction : AstRule
    {
        
        private AstPartitionFunctionName _partitionFunctionName;
        
        public AstCreatePartitionFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionName>())
                {
                    this.PartitionFunctionName = ((AstPartitionFunctionName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionFunctionName PartitionFunctionName
        {
            get
            {
                return this._partitionFunctionName;
            }
            set
            {
                this._partitionFunctionName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreatePartitionFunction(this);
        }
    }
    
    public partial class AstCreatePartitionScheme : AstRule
    {
        
        private AstPartitionSchemeName _partitionSchemeName;
        
        private AstPartitionFunctionName _partitionFunctionName;
        
        public AstCreatePartitionScheme(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeName>())
                {
                    this.PartitionSchemeName = ((AstPartitionSchemeName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPartitionFunctionName>())
                {
                    this.PartitionFunctionName = ((AstPartitionFunctionName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionSchemeName PartitionSchemeName
        {
            get
            {
                return this._partitionSchemeName;
            }
            set
            {
                this._partitionSchemeName = value;
            }
        }
        
        public virtual AstPartitionFunctionName PartitionFunctionName
        {
            get
            {
                return this._partitionFunctionName;
            }
            set
            {
                this._partitionFunctionName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreatePartitionScheme(this);
        }
    }
    
    public partial class AstCreateQueue : AstRule
    {
        
        private AstQueueSettings _queueSettings;
        
        public AstCreateQueue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueueSettings>())
                {
                    this.QueueSettings = ((AstQueueSettings)(enumerator.Current));
                }
            }
        }
        
        public virtual AstQueueSettings QueueSettings
        {
            get
            {
                return this._queueSettings;
            }
            set
            {
                this._queueSettings = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateQueue(this);
        }
    }
    
    public partial class AstQueueSettings : AstRule
    {
        
        public AstQueueSettings(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueSettings(this);
        }
    }
    
    public partial class AstAlterQueue : AstRule
    {
        
        public AstAlterQueue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterQueue(this);
        }
    }
    
    public partial class AstQueueAction : AstRule
    {
        
        public AstQueueAction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueAction(this);
        }
    }
    
    public partial class AstQueueRebuildOptions : AstRule
    {
        
        public AstQueueRebuildOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueRebuildOptions(this);
        }
    }
    
    public partial class AstCreateContract : AstRule
    {
        
        private AstContractName _contractName;
        
        public AstCreateContract(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContractName>())
                {
                    this.ContractName = ((AstContractName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstContractName ContractName
        {
            get
            {
                return this._contractName;
            }
            set
            {
                this._contractName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateContract(this);
        }
    }
    
    public partial class AstMessageStatement : AstRule
    {
        
        private AstMessageTypeName _messageTypeName;
        
        public AstMessageStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeName>())
                {
                    this.MessageTypeName = ((AstMessageTypeName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMessageTypeName MessageTypeName
        {
            get
            {
                return this._messageTypeName;
            }
            set
            {
                this._messageTypeName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMessageStatement(this);
        }
    }
    
    public partial class AstMergeStatement : AstRule
    {
        
        private AstWithExpression _withExpression;
        
        private AstDdlObject _ddlObject;
        
        private AstWithTableHints _withTableHints;
        
        private AstAsTableAlias _asTableAlias;
        
        private AstTableSources _tableSources;
        
        private AstSearchCondition _searchCondition;
        
        private AstWhenMatches _whenMatches;
        
        private AstOutputClause _outputClause;
        
        private AstOptionClause _optionClause;
        
        public AstMergeStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this.WithExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDdlObject>())
                {
                    this.DdlObject = ((AstDdlObject)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this.WithTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this.AsTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this.TableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this.SearchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhenMatches>())
                {
                    this.WhenMatches = ((AstWhenMatches)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this.OutputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this.OptionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
            set
            {
                this._withExpression = value;
            }
        }
        
        public virtual AstDdlObject DdlObject
        {
            get
            {
                return this._ddlObject;
            }
            set
            {
                this._ddlObject = value;
            }
        }
        
        public virtual AstWithTableHints WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
            set
            {
                this._withTableHints = value;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
            set
            {
                this._asTableAlias = value;
            }
        }
        
        public virtual AstTableSources TableSources
        {
            get
            {
                return this._tableSources;
            }
            set
            {
                this._tableSources = value;
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
            set
            {
                this._searchCondition = value;
            }
        }
        
        public virtual AstWhenMatches WhenMatches
        {
            get
            {
                return this._whenMatches;
            }
            set
            {
                this._whenMatches = value;
            }
        }
        
        public virtual AstOutputClause OutputClause
        {
            get
            {
                return this._outputClause;
            }
            set
            {
                this._outputClause = value;
            }
        }
        
        public virtual AstOptionClause OptionClause
        {
            get
            {
                return this._optionClause;
            }
            set
            {
                this._optionClause = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMergeStatement(this);
        }
    }
    
    public partial class AstWhenMatches : AstRule
    {
        
        public AstWhenMatches(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWhenMatches(this);
        }
    }
    
    public partial class AstMergeMatched : AstRule
    {
        
        public AstMergeMatched(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMergeMatched(this);
        }
    }
    
    public partial class AstUpdateElemMerges : AstRule
    {
        
        private AstUpdateElemMerge _updateElemMerge;
        
        public AstUpdateElemMerges(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUpdateElemMerge>())
                {
                    this.UpdateElemMerge = ((AstUpdateElemMerge)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUpdateElemMerge UpdateElemMerge
        {
            get
            {
                return this._updateElemMerge;
            }
            set
            {
                this._updateElemMerge = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateElemMerges(this);
        }
    }
    
    public partial class AstMergeNotMatched : AstRule
    {
        
        public AstMergeNotMatched(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMergeNotMatched(this);
        }
    }
    
    public partial class AstDeleteStatement : AstRule
    {
        
        private AstWithExpression _withExpression;
        
        private AstDeleteStatementFrom _deleteStatementFrom;
        
        private AstWithTableHints _withTableHints;
        
        private AstOutputClause _outputClause;
        
        private AstForClause _forClause;
        
        private AstOptionClause _optionClause;
        
        public AstDeleteStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this.WithExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDeleteStatementFrom>())
                {
                    this.DeleteStatementFrom = ((AstDeleteStatementFrom)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this.WithTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this.OutputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this.ForClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this.OptionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
            set
            {
                this._withExpression = value;
            }
        }
        
        public virtual AstDeleteStatementFrom DeleteStatementFrom
        {
            get
            {
                return this._deleteStatementFrom;
            }
            set
            {
                this._deleteStatementFrom = value;
            }
        }
        
        public virtual AstWithTableHints WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
            set
            {
                this._withTableHints = value;
            }
        }
        
        public virtual AstOutputClause OutputClause
        {
            get
            {
                return this._outputClause;
            }
            set
            {
                this._outputClause = value;
            }
        }
        
        public virtual AstForClause ForClause
        {
            get
            {
                return this._forClause;
            }
            set
            {
                this._forClause = value;
            }
        }
        
        public virtual AstOptionClause OptionClause
        {
            get
            {
                return this._optionClause;
            }
            set
            {
                this._optionClause = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeleteStatement(this);
        }
    }
    
    public partial class AstDeleteStatementFrom : AstRule
    {
        
        public AstDeleteStatementFrom(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeleteStatementFrom(this);
        }
    }
    
    public partial class AstInsertStatement : AstRule
    {
        
        private AstWithExpression _withExpression;
        
        private AstWithTableHints _withTableHints;
        
        private AstOutputClause _outputClause;
        
        private AstInsertStatementValue _insertStatementValue;
        
        private AstForClause _forClause;
        
        private AstOptionClause _optionClause;
        
        public AstInsertStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this.WithExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this.WithTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this.OutputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstInsertStatementValue>())
                {
                    this.InsertStatementValue = ((AstInsertStatementValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this.ForClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this.OptionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
            set
            {
                this._withExpression = value;
            }
        }
        
        public virtual AstWithTableHints WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
            set
            {
                this._withTableHints = value;
            }
        }
        
        public virtual AstOutputClause OutputClause
        {
            get
            {
                return this._outputClause;
            }
            set
            {
                this._outputClause = value;
            }
        }
        
        public virtual AstInsertStatementValue InsertStatementValue
        {
            get
            {
                return this._insertStatementValue;
            }
            set
            {
                this._insertStatementValue = value;
            }
        }
        
        public virtual AstForClause ForClause
        {
            get
            {
                return this._forClause;
            }
            set
            {
                this._forClause = value;
            }
        }
        
        public virtual AstOptionClause OptionClause
        {
            get
            {
                return this._optionClause;
            }
            set
            {
                this._optionClause = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitInsertStatement(this);
        }
    }
    
    public partial class AstInsertStatementValue : AstRule
    {
        
        public AstInsertStatementValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitInsertStatementValue(this);
        }
    }
    
    public partial class AstReceiveStatement : AstRule
    {
        
        private AstFullTableName _fullTableName;
        
        public AstReceiveStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this.FullTableName = ((AstFullTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
            set
            {
                this._fullTableName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReceiveStatement(this);
        }
    }
    
    public partial class AstSelectStatementStandalone : AstRule
    {
        
        private AstWithExpression _withExpression;
        
        private AstSelectStatement _selectStatement;
        
        public AstSelectStatementStandalone(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this.WithExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatement>())
                {
                    this.SelectStatement = ((AstSelectStatement)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
            set
            {
                this._withExpression = value;
            }
        }
        
        public virtual AstSelectStatement SelectStatement
        {
            get
            {
                return this._selectStatement;
            }
            set
            {
                this._selectStatement = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectStatementStandalone(this);
        }
    }
    
    public partial class AstSelectStatement : AstRule
    {
        
        private AstQueryExpression _queryExpression;
        
        private AstSelectOrderByClause _selectOrderByClause;
        
        private AstForClause _forClause;
        
        private AstOptionClause _optionClause;
        
        public AstSelectStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueryExpression>())
                {
                    this.QueryExpression = ((AstQueryExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectOrderByClause>())
                {
                    this.SelectOrderByClause = ((AstSelectOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this.ForClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this.OptionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstQueryExpression QueryExpression
        {
            get
            {
                return this._queryExpression;
            }
            set
            {
                this._queryExpression = value;
            }
        }
        
        public virtual AstSelectOrderByClause SelectOrderByClause
        {
            get
            {
                return this._selectOrderByClause;
            }
            set
            {
                this._selectOrderByClause = value;
            }
        }
        
        public virtual AstForClause ForClause
        {
            get
            {
                return this._forClause;
            }
            set
            {
                this._forClause = value;
            }
        }
        
        public virtual AstOptionClause OptionClause
        {
            get
            {
                return this._optionClause;
            }
            set
            {
                this._optionClause = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectStatement(this);
        }
    }
    
    public partial class AstTime : AstRule
    {
        
        public AstTime(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTime(this);
        }
    }
    
    public partial class AstUpdateStatement : AstRule
    {
        
        private AstWithExpression _withExpression;
        
        private AstWithTableHints _withTableHints;
        
        private AstUpdateElems _updateElems;
        
        private AstOutputClause _outputClause;
        
        private AstForClause _forClause;
        
        private AstOptionClause _optionClause;
        
        public AstUpdateStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this.WithExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this.WithTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateElems>())
                {
                    this.UpdateElems = ((AstUpdateElems)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this.OutputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this.ForClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this.OptionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
            set
            {
                this._withExpression = value;
            }
        }
        
        public virtual AstWithTableHints WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
            set
            {
                this._withTableHints = value;
            }
        }
        
        public virtual AstUpdateElems UpdateElems
        {
            get
            {
                return this._updateElems;
            }
            set
            {
                this._updateElems = value;
            }
        }
        
        public virtual AstOutputClause OutputClause
        {
            get
            {
                return this._outputClause;
            }
            set
            {
                this._outputClause = value;
            }
        }
        
        public virtual AstForClause ForClause
        {
            get
            {
                return this._forClause;
            }
            set
            {
                this._forClause = value;
            }
        }
        
        public virtual AstOptionClause OptionClause
        {
            get
            {
                return this._optionClause;
            }
            set
            {
                this._optionClause = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateStatement(this);
        }
    }
    
    public partial class AstUpdateElems : AstRule
    {
        
        private AstUpdateElem _updateElem;
        
        public AstUpdateElems(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUpdateElem>())
                {
                    this.UpdateElem = ((AstUpdateElem)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUpdateElem UpdateElem
        {
            get
            {
                return this._updateElem;
            }
            set
            {
                this._updateElem = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateElems(this);
        }
    }
    
    public partial class AstOutputClause : AstRule
    {
        
        private AstOutputDmlListElems _outputDmlListElems;
        
        public AstOutputClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOutputDmlListElems>())
                {
                    this.OutputDmlListElems = ((AstOutputDmlListElems)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOutputDmlListElems OutputDmlListElems
        {
            get
            {
                return this._outputDmlListElems;
            }
            set
            {
                this._outputDmlListElems = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOutputClause(this);
        }
    }
    
    public partial class AstOutputDmlListElems : AstRule
    {
        
        private AstOutputDmlListElem _outputDmlListElem;
        
        public AstOutputDmlListElems(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOutputDmlListElem>())
                {
                    this.OutputDmlListElem = ((AstOutputDmlListElem)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOutputDmlListElem OutputDmlListElem
        {
            get
            {
                return this._outputDmlListElem;
            }
            set
            {
                this._outputDmlListElem = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOutputDmlListElems(this);
        }
    }
    
    public partial class AstOutputDmlListElem : AstRule
    {
        
        private AstAsColumnAlias _asColumnAlias;
        
        public AstOutputDmlListElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsColumnAlias>())
                {
                    this.AsColumnAlias = ((AstAsColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAsColumnAlias AsColumnAlias
        {
            get
            {
                return this._asColumnAlias;
            }
            set
            {
                this._asColumnAlias = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOutputDmlListElem(this);
        }
    }
    
    public partial class AstCreateDatabase : AstRule
    {
        
        public AstCreateDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateDatabase(this);
        }
    }
    
    public partial class AstCreateIndex : AstRule
    {
        
        private AstClustered _clustered;
        
        private AstId _id;
        
        private AstTableName _tableName;
        
        private AstColumnNameListWithOrder _columnNameListWithOrder;
        
        public AstCreateIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClustered>())
                {
                    this.Clustered = ((AstClustered)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableName>())
                {
                    this.TableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this.ColumnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
            }
        }
        
        public virtual AstClustered Clustered
        {
            get
            {
                return this._clustered;
            }
            set
            {
                this._clustered = value;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                this._tableName = value;
            }
        }
        
        public virtual AstColumnNameListWithOrder ColumnNameListWithOrder
        {
            get
            {
                return this._columnNameListWithOrder;
            }
            set
            {
                this._columnNameListWithOrder = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateIndex(this);
        }
    }
    
    public partial class AstCreateIndexOptions : AstRule
    {
        
        private AstRelationalIndexOptions _relationalIndexOptions;
        
        public AstCreateIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRelationalIndexOptions>())
                {
                    this.RelationalIndexOptions = ((AstRelationalIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRelationalIndexOptions RelationalIndexOptions
        {
            get
            {
                return this._relationalIndexOptions;
            }
            set
            {
                this._relationalIndexOptions = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateIndexOptions(this);
        }
    }
    
    public partial class AstRelationalIndexOptions : AstRule
    {
        
        private AstRelationalIndexOption _relationalIndexOption;
        
        public AstRelationalIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRelationalIndexOption>())
                {
                    this.RelationalIndexOption = ((AstRelationalIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRelationalIndexOption RelationalIndexOption
        {
            get
            {
                return this._relationalIndexOption;
            }
            set
            {
                this._relationalIndexOption = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRelationalIndexOptions(this);
        }
    }
    
    public partial class AstRelationalIndexOption : AstRule
    {
        
        public AstRelationalIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRelationalIndexOption(this);
        }
    }
    
    public partial class AstAlterIndex : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstAlterIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this.TableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                this._tableName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterIndex(this);
        }
    }
    
    public partial class AstResumableIndexOptions : AstRule
    {
        
        public AstResumableIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitResumableIndexOptions(this);
        }
    }
    
    public partial class AstResumableIndexOption : AstRule
    {
        
        public AstResumableIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitResumableIndexOption(this);
        }
    }
    
    public partial class AstReorganizePartition : AstRule
    {
        
        private AstReorganizeOptions _reorganizeOptions;
        
        public AstReorganizePartition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReorganizeOptions>())
                {
                    this.ReorganizeOptions = ((AstReorganizeOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstReorganizeOptions ReorganizeOptions
        {
            get
            {
                return this._reorganizeOptions;
            }
            set
            {
                this._reorganizeOptions = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReorganizePartition(this);
        }
    }
    
    public partial class AstReorganizeOptions : AstRule
    {
        
        public AstReorganizeOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReorganizeOptions(this);
        }
    }
    
    public partial class AstReorganizeOption : AstRule
    {
        
        public AstReorganizeOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReorganizeOption(this);
        }
    }
    
    public partial class AstSetIndexOptions : AstRule
    {
        
        private AstSetIndexOption _setIndexOption;
        
        public AstSetIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSetIndexOption>())
                {
                    this.SetIndexOption = ((AstSetIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSetIndexOption SetIndexOption
        {
            get
            {
                return this._setIndexOption;
            }
            set
            {
                this._setIndexOption = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetIndexOptions(this);
        }
    }
    
    public partial class AstSetIndexOption : AstRule
    {
        
        public AstSetIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetIndexOption(this);
        }
    }
    
    public partial class AstRebuildPartition : AstRule
    {
        
        public AstRebuildPartition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRebuildPartition(this);
        }
    }
    
    public partial class AstRebuildIndexOptions : AstRule
    {
        
        private AstRebuildIndexOption _rebuildIndexOption;
        
        public AstRebuildIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRebuildIndexOption>())
                {
                    this.RebuildIndexOption = ((AstRebuildIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRebuildIndexOption RebuildIndexOption
        {
            get
            {
                return this._rebuildIndexOption;
            }
            set
            {
                this._rebuildIndexOption = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRebuildIndexOptions(this);
        }
    }
    
    public partial class AstRebuildIndexOption : AstRule
    {
        
        public AstRebuildIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRebuildIndexOption(this);
        }
    }
    
    public partial class AstSinglePartitionRebuildIndexOptions : AstRule
    {
        
        private AstSinglePartitionRebuildIndexOption _singlePartitionRebuildIndexOption;
        
        public AstSinglePartitionRebuildIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSinglePartitionRebuildIndexOption>())
                {
                    this.SinglePartitionRebuildIndexOption = ((AstSinglePartitionRebuildIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption
        {
            get
            {
                return this._singlePartitionRebuildIndexOption;
            }
            set
            {
                this._singlePartitionRebuildIndexOption = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSinglePartitionRebuildIndexOptions(this);
        }
    }
    
    public partial class AstSinglePartitionRebuildIndexOption : AstRule
    {
        
        public AstSinglePartitionRebuildIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSinglePartitionRebuildIndexOption(this);
        }
    }
    
    public partial class AstOnPartitions : AstRule
    {
        
        public AstOnPartitions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnPartitions(this);
        }
    }
    
    public partial class AstCreateColumnstoreIndex : AstRule
    {
        
        private AstId _id;
        
        private AstTableName _tableName;
        
        private AstCreateColumnstoreIndexOptions _createColumnstoreIndexOptions;
        
        public AstCreateColumnstoreIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableName>())
                {
                    this.TableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions>())
                {
                    this.CreateColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                this._tableName = value;
            }
        }
        
        public virtual AstCreateColumnstoreIndexOptions CreateColumnstoreIndexOptions
        {
            get
            {
                return this._createColumnstoreIndexOptions;
            }
            set
            {
                this._createColumnstoreIndexOptions = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnstoreIndex(this);
        }
    }
    
    public partial class AstCreateColumnstoreIndexOptions : AstRule
    {
        
        private AstColumnstoreIndexOption _columnstoreIndexOption;
        
        public AstCreateColumnstoreIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnstoreIndexOption>())
                {
                    this.ColumnstoreIndexOption = ((AstColumnstoreIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnstoreIndexOption ColumnstoreIndexOption
        {
            get
            {
                return this._columnstoreIndexOption;
            }
            set
            {
                this._columnstoreIndexOption = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnstoreIndexOptions(this);
        }
    }
    
    public partial class AstColumnstoreIndexOption : AstRule
    {
        
        public AstColumnstoreIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnstoreIndexOption(this);
        }
    }
    
    public partial class AstCreateNonclusteredColumnstoreIndex : AstRule
    {
        
        private AstId _id;
        
        private AstTableName _tableName;
        
        private AstColumnNameListWithOrder _columnNameListWithOrder;
        
        private AstCreateColumnstoreIndexOptions _createColumnstoreIndexOptions;
        
        public AstCreateNonclusteredColumnstoreIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableName>())
                {
                    this.TableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this.ColumnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions>())
                {
                    this.CreateColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                this._tableName = value;
            }
        }
        
        public virtual AstColumnNameListWithOrder ColumnNameListWithOrder
        {
            get
            {
                return this._columnNameListWithOrder;
            }
            set
            {
                this._columnNameListWithOrder = value;
            }
        }
        
        public virtual AstCreateColumnstoreIndexOptions CreateColumnstoreIndexOptions
        {
            get
            {
                return this._createColumnstoreIndexOptions;
            }
            set
            {
                this._createColumnstoreIndexOptions = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateNonclusteredColumnstoreIndex(this);
        }
    }
    
    public partial class AstCreateXmlIndex : AstRule
    {
        
        private AstId _id;
        
        private AstTableName _tableName;
        
        private AstXmlIndexOptions _xmlIndexOptions;
        
        public AstCreateXmlIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableName>())
                {
                    this.TableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstXmlIndexOptions>())
                {
                    this.XmlIndexOptions = ((AstXmlIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                this._tableName = value;
            }
        }
        
        public virtual AstXmlIndexOptions XmlIndexOptions
        {
            get
            {
                return this._xmlIndexOptions;
            }
            set
            {
                this._xmlIndexOptions = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateXmlIndex(this);
        }
    }
    
    public partial class AstXmlIndexOptions : AstRule
    {
        
        private AstXmlIndexOption _xmlIndexOption;
        
        public AstXmlIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstXmlIndexOption>())
                {
                    this.XmlIndexOption = ((AstXmlIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstXmlIndexOption XmlIndexOption
        {
            get
            {
                return this._xmlIndexOption;
            }
            set
            {
                this._xmlIndexOption = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlIndexOptions(this);
        }
    }
    
    public partial class AstXmlIndexOption : AstRule
    {
        
        public AstXmlIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlIndexOption(this);
        }
    }
    
    public partial class AstCreateOrAlterProcedure : AstRule
    {
        
        private AstProcedureOptions _procedureOptions;
        
        public AstCreateOrAlterProcedure(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcedureOptions>())
                {
                    this.ProcedureOptions = ((AstProcedureOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProcedureOptions ProcedureOptions
        {
            get
            {
                return this._procedureOptions;
            }
            set
            {
                this._procedureOptions = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterProcedure(this);
        }
    }
    
    public partial class AstProcedureOptions : AstRule
    {
        
        private AstProcedureOption _procedureOption;
        
        public AstProcedureOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcedureOption>())
                {
                    this.ProcedureOption = ((AstProcedureOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProcedureOption ProcedureOption
        {
            get
            {
                return this._procedureOption;
            }
            set
            {
                this._procedureOption = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcedureOptions(this);
        }
    }
    
    public partial class AstAsExternalName : AstRule
    {
        
        private AstAssemblyName _assemblyName;
        
        private AstClassName _className;
        
        private AstMethodName _methodName;
        
        public AstAsExternalName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyName>())
                {
                    this.AssemblyName = ((AstAssemblyName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClassName>())
                {
                    this.ClassName = ((AstClassName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMethodName>())
                {
                    this.MethodName = ((AstMethodName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblyName AssemblyName
        {
            get
            {
                return this._assemblyName;
            }
            set
            {
                this._assemblyName = value;
            }
        }
        
        public virtual AstClassName ClassName
        {
            get
            {
                return this._className;
            }
            set
            {
                this._className = value;
            }
        }
        
        public virtual AstMethodName MethodName
        {
            get
            {
                return this._methodName;
            }
            set
            {
                this._methodName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsExternalName(this);
        }
    }
    
    public partial class AstCreateOrAlterDmlTrigger : AstRule
    {
        
        private AstSimpleName _simpleName;
        
        private AstTableName _tableName;
        
        private AstDmlTriggerOptions _dmlTriggerOptions;
        
        private AstDmlTriggerOperations _dmlTriggerOperations;
        
        private AstSqlClauses _sqlClauses;
        
        public AstCreateOrAlterDmlTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleName>())
                {
                    this.SimpleName = ((AstSimpleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableName>())
                {
                    this.TableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions>())
                {
                    this.DmlTriggerOptions = ((AstDmlTriggerOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this.DmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this.SqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleName SimpleName
        {
            get
            {
                return this._simpleName;
            }
            set
            {
                this._simpleName = value;
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                this._tableName = value;
            }
        }
        
        public virtual AstDmlTriggerOptions DmlTriggerOptions
        {
            get
            {
                return this._dmlTriggerOptions;
            }
            set
            {
                this._dmlTriggerOptions = value;
            }
        }
        
        public virtual AstDmlTriggerOperations DmlTriggerOperations
        {
            get
            {
                return this._dmlTriggerOperations;
            }
            set
            {
                this._dmlTriggerOperations = value;
            }
        }
        
        public virtual AstSqlClauses SqlClauses
        {
            get
            {
                return this._sqlClauses;
            }
            set
            {
                this._sqlClauses = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterDmlTrigger(this);
        }
    }
    
    public partial class AstDmlTriggerOptions : AstRule
    {
        
        private AstDmlTriggerOption _dmlTriggerOption;
        
        public AstDmlTriggerOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDmlTriggerOption>())
                {
                    this.DmlTriggerOption = ((AstDmlTriggerOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDmlTriggerOption DmlTriggerOption
        {
            get
            {
                return this._dmlTriggerOption;
            }
            set
            {
                this._dmlTriggerOption = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDmlTriggerOptions(this);
        }
    }
    
    public partial class AstDmlTriggerOperations : AstRule
    {
        
        private AstDmlTriggerOperation _dmlTriggerOperation;
        
        public AstDmlTriggerOperations(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDmlTriggerOperation>())
                {
                    this.DmlTriggerOperation = ((AstDmlTriggerOperation)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDmlTriggerOperation DmlTriggerOperation
        {
            get
            {
                return this._dmlTriggerOperation;
            }
            set
            {
                this._dmlTriggerOperation = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDmlTriggerOperations(this);
        }
    }
    
    public partial class AstDmlTriggerOption : AstRule
    {
        
        public AstDmlTriggerOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDmlTriggerOption(this);
        }
    }
    
    public partial class AstDmlTriggerOperation : AstTerminalEnum<AstDmlTriggerOperationEnum>
    {
        
        public AstDmlTriggerOperation(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDmlTriggerOperation(this);
        }
        
        protected override AstDmlTriggerOperationEnum GetValue(string value)
        {
            if ((value == "INSERT"))
            {
                return AstDmlTriggerOperationEnum.Insert;
            }
            if ((value == "UPDATE"))
            {
                return AstDmlTriggerOperationEnum.Update;
            }
            if ((value == "DELETE"))
            {
                return AstDmlTriggerOperationEnum.Delete;
            }
            return AstDmlTriggerOperationEnum._undefined;
        }
    }
    
    public partial class AstCreateOrAlterDdlTrigger : AstRule
    {
        
        private AstSimpleName _simpleName;
        
        private AstDmlTriggerOptions _dmlTriggerOptions;
        
        private AstDmlTriggerOperations _dmlTriggerOperations;
        
        private AstSqlClauses _sqlClauses;
        
        public AstCreateOrAlterDdlTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleName>())
                {
                    this.SimpleName = ((AstSimpleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions>())
                {
                    this.DmlTriggerOptions = ((AstDmlTriggerOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this.DmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this.SqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleName SimpleName
        {
            get
            {
                return this._simpleName;
            }
            set
            {
                this._simpleName = value;
            }
        }
        
        public virtual AstDmlTriggerOptions DmlTriggerOptions
        {
            get
            {
                return this._dmlTriggerOptions;
            }
            set
            {
                this._dmlTriggerOptions = value;
            }
        }
        
        public virtual AstDmlTriggerOperations DmlTriggerOperations
        {
            get
            {
                return this._dmlTriggerOperations;
            }
            set
            {
                this._dmlTriggerOperations = value;
            }
        }
        
        public virtual AstSqlClauses SqlClauses
        {
            get
            {
                return this._sqlClauses;
            }
            set
            {
                this._sqlClauses = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterDdlTrigger(this);
        }
    }
    
    public partial class AstCreateOrAlterFunction : AstRule
    {
        
        public AstCreateOrAlterFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterFunction(this);
        }
    }
    
    public partial class AstProcedureParams : AstRule
    {
        
        private AstProcedureParam _procedureParam;
        
        public AstProcedureParams(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcedureParam>())
                {
                    this.ProcedureParam = ((AstProcedureParam)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProcedureParam ProcedureParam
        {
            get
            {
                return this._procedureParam;
            }
            set
            {
                this._procedureParam = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcedureParams(this);
        }
    }
    
    public partial class AstFuncBodyReturnsSelect : AstRule
    {
        
        private AstFunctionOptions _functionOptions;
        
        public AstFuncBodyReturnsSelect(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this.FunctionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFunctionOptions FunctionOptions
        {
            get
            {
                return this._functionOptions;
            }
            set
            {
                this._functionOptions = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncBodyReturnsSelect(this);
        }
    }
    
    public partial class AstFunctionOptions : AstRule
    {
        
        private AstFunctionOption _functionOption;
        
        public AstFunctionOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionOption>())
                {
                    this.FunctionOption = ((AstFunctionOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFunctionOption FunctionOption
        {
            get
            {
                return this._functionOption;
            }
            set
            {
                this._functionOption = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFunctionOptions(this);
        }
    }
    
    public partial class AstFuncBodyReturnsTable : AstRule
    {
        
        private AstTableTypeDefinition _tableTypeDefinition;
        
        private AstFunctionOptions _functionOptions;
        
        public AstFuncBodyReturnsTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableTypeDefinition>())
                {
                    this.TableTypeDefinition = ((AstTableTypeDefinition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this.FunctionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableTypeDefinition TableTypeDefinition
        {
            get
            {
                return this._tableTypeDefinition;
            }
            set
            {
                this._tableTypeDefinition = value;
            }
        }
        
        public virtual AstFunctionOptions FunctionOptions
        {
            get
            {
                return this._functionOptions;
            }
            set
            {
                this._functionOptions = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncBodyReturnsTable(this);
        }
    }
    
    public partial class AstFuncBodyReturnsScalar : AstRule
    {
        
        private AstDataType _dataType;
        
        private AstFunctionOptions _functionOptions;
        
        public AstFuncBodyReturnsScalar(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this.DataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this.FunctionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
            set
            {
                this._dataType = value;
            }
        }
        
        public virtual AstFunctionOptions FunctionOptions
        {
            get
            {
                return this._functionOptions;
            }
            set
            {
                this._functionOptions = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncBodyReturnsScalar(this);
        }
    }
    
    public partial class AstProcedureParam : AstRule
    {
        
        private AstDataType _dataType;
        
        public AstProcedureParam(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this.DataType = ((AstDataType)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
            set
            {
                this._dataType = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcedureParam(this);
        }
    }
    
    public partial class AstProcedureOption : AstRule
    {
        
        public AstProcedureOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcedureOption(this);
        }
    }
    
    public partial class AstFunctionOption : AstRule
    {
        
        public AstFunctionOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFunctionOption(this);
        }
    }
    
    public partial class AstCreateStatistics : AstRule
    {
        
        private AstId _id;
        
        private AstTableName _tableName;
        
        private AstColumnNameList _columnNameList;
        
        public AstCreateStatistics(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableName>())
                {
                    this.TableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this.ColumnNameList = ((AstColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                this._tableName = value;
            }
        }
        
        public virtual AstColumnNameList ColumnNameList
        {
            get
            {
                return this._columnNameList;
            }
            set
            {
                this._columnNameList = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateStatistics(this);
        }
    }
    
    public partial class AstUpdateStatistics : AstRule
    {
        
        private AstFullTableName _fullTableName;
        
        private AstUpdateStatisticsOptions _updateStatisticsOptions;
        
        public AstUpdateStatistics(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this.FullTableName = ((AstFullTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateStatisticsOptions>())
                {
                    this.UpdateStatisticsOptions = ((AstUpdateStatisticsOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
            set
            {
                this._fullTableName = value;
            }
        }
        
        public virtual AstUpdateStatisticsOptions UpdateStatisticsOptions
        {
            get
            {
                return this._updateStatisticsOptions;
            }
            set
            {
                this._updateStatisticsOptions = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateStatistics(this);
        }
    }
    
    public partial class AstUpdateStatisticsOptions : AstRule
    {
        
        private AstUpdateStatisticsOption _updateStatisticsOption;
        
        public AstUpdateStatisticsOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUpdateStatisticsOption>())
                {
                    this.UpdateStatisticsOption = ((AstUpdateStatisticsOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUpdateStatisticsOption UpdateStatisticsOption
        {
            get
            {
                return this._updateStatisticsOption;
            }
            set
            {
                this._updateStatisticsOption = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateStatisticsOptions(this);
        }
    }
    
    public partial class AstUpdateStatisticsOption : AstRule
    {
        
        public AstUpdateStatisticsOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateStatisticsOption(this);
        }
    }
    
    public partial class AstCreateTable : AstRule
    {
        
        private AstTableName _tableName;
        
        private AstColumnDefTableConstraints _columnDefTableConstraints;
        
        private AstTableOptions _tableOptions;
        
        public AstCreateTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this.TableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this.ColumnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableOptions>())
                {
                    this.TableOptions = ((AstTableOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                this._tableName = value;
            }
        }
        
        public virtual AstColumnDefTableConstraints ColumnDefTableConstraints
        {
            get
            {
                return this._columnDefTableConstraints;
            }
            set
            {
                this._columnDefTableConstraints = value;
            }
        }
        
        public virtual AstTableOptions TableOptions
        {
            get
            {
                return this._tableOptions;
            }
            set
            {
                this._tableOptions = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateTable(this);
        }
    }
    
    public partial class AstTableIndices : AstRule
    {
        
        public AstTableIndices(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableIndices(this);
        }
    }
    
    public partial class AstTableOptions : AstRule
    {
        
        public AstTableOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableOptions(this);
        }
    }
    
    public partial class AstTableOption : AstRule
    {
        
        public AstTableOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableOption(this);
        }
    }
    
    public partial class AstDistribution : AstRule
    {
        
        public AstDistribution(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDistribution(this);
        }
    }
    
    public partial class AstCreateTableIndexOptions : AstRule
    {
        
        private AstCreateTableIndexOption _createTableIndexOption;
        
        public AstCreateTableIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateTableIndexOption>())
                {
                    this.CreateTableIndexOption = ((AstCreateTableIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCreateTableIndexOption CreateTableIndexOption
        {
            get
            {
                return this._createTableIndexOption;
            }
            set
            {
                this._createTableIndexOption = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateTableIndexOptions(this);
        }
    }
    
    public partial class AstCreateTableIndexOption : AstRule
    {
        
        public AstCreateTableIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateTableIndexOption(this);
        }
    }
    
    public partial class AstCreateView : AstRule
    {
        
        private AstSimpleName _simpleName;
        
        private AstViewAttributes _viewAttributes;
        
        private AstSelectStatementStandalone _selectStatementStandalone;
        
        public AstCreateView(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleName>())
                {
                    this.SimpleName = ((AstSimpleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstViewAttributes>())
                {
                    this.ViewAttributes = ((AstViewAttributes)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this.SelectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleName SimpleName
        {
            get
            {
                return this._simpleName;
            }
            set
            {
                this._simpleName = value;
            }
        }
        
        public virtual AstViewAttributes ViewAttributes
        {
            get
            {
                return this._viewAttributes;
            }
            set
            {
                this._viewAttributes = value;
            }
        }
        
        public virtual AstSelectStatementStandalone SelectStatementStandalone
        {
            get
            {
                return this._selectStatementStandalone;
            }
            set
            {
                this._selectStatementStandalone = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateView(this);
        }
    }
    
    public partial class AstViewAttributes : AstRule
    {
        
        public AstViewAttributes(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitViewAttributes(this);
        }
    }
    
    public partial class AstViewAttribute : AstTerminalEnum<AstViewAttributeEnum>
    {
        
        public AstViewAttribute(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitViewAttribute(this);
        }
        
        protected override AstViewAttributeEnum GetValue(string value)
        {
            if ((value == "ENCRYPTION"))
            {
                return AstViewAttributeEnum.Encryption;
            }
            if ((value == "SCHEMABINDING"))
            {
                return AstViewAttributeEnum.Schemabinding;
            }
            if ((value == "VIEW_METADATA"))
            {
                return AstViewAttributeEnum.ViewMetadata;
            }
            return AstViewAttributeEnum._undefined;
        }
    }
    
    public partial class AstAlterTable : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstAlterTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this.TableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                this._tableName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterTable(this);
        }
    }
    
    public partial class AstIds : AstRule
    {
        
        private AstId _id;
        
        public AstIds(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIds(this);
        }
    }
    
    public partial class AstSwitchPartition : AstRule
    {
        
        public AstSwitchPartition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSwitchPartition(this);
        }
    }
    
    public partial class AstLowPriorityLockWait : AstRule
    {
        
        public AstLowPriorityLockWait(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLowPriorityLockWait(this);
        }
    }
    
    public partial class AstAlterDatabase : AstRule
    {
        
        public AstAlterDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterDatabase(this);
        }
    }
    
    public partial class AstAddOrModifyFiles : AstRule
    {
        
        public AstAddOrModifyFiles(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAddOrModifyFiles(this);
        }
    }
    
    public partial class AstFilespecs : AstRule
    {
        
        private AstFilespec _filespec;
        
        public AstFilespecs(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFilespec>())
                {
                    this.Filespec = ((AstFilespec)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFilespec Filespec
        {
            get
            {
                return this._filespec;
            }
            set
            {
                this._filespec = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilespecs(this);
        }
    }
    
    public partial class AstFilespec : AstRule
    {
        
        private AstFileGroupName _fileGroupName;
        
        public AstFilespec(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileGroupName>())
                {
                    this.FileGroupName = ((AstFileGroupName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFileGroupName FileGroupName
        {
            get
            {
                return this._fileGroupName;
            }
            set
            {
                this._fileGroupName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilespec(this);
        }
    }
    
    public partial class AstAddOrModifyFilegroups : AstRule
    {
        
        public AstAddOrModifyFilegroups(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAddOrModifyFilegroups(this);
        }
    }
    
    public partial class AstFilegroupUpdatabilityOption : AstTerminalEnum<AstFilegroupUpdatabilityOptionEnum>
    {
        
        public AstFilegroupUpdatabilityOption(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilegroupUpdatabilityOption(this);
        }
        
        protected override AstFilegroupUpdatabilityOptionEnum GetValue(string value)
        {
            if ((value == "READONLY"))
            {
                return AstFilegroupUpdatabilityOptionEnum.Readonly;
            }
            if ((value == "READWRITE"))
            {
                return AstFilegroupUpdatabilityOptionEnum.Readwrite;
            }
            if ((value == "READ_ONLY"))
            {
                return AstFilegroupUpdatabilityOptionEnum.ReadOnly;
            }
            if ((value == "READ_WRITE"))
            {
                return AstFilegroupUpdatabilityOptionEnum.ReadWrite;
            }
            return AstFilegroupUpdatabilityOptionEnum._undefined;
        }
    }
    
    public partial class AstDatabaseOptionspec : AstRule
    {
        
        public AstDatabaseOptionspec(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseOptionspec(this);
        }
    }
    
    public partial class AstAutoOption : AstRule
    {
        
        public AstAutoOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAutoOption(this);
        }
    }
    
    public partial class AstChangeTrackingOption : AstRule
    {
        
        public AstChangeTrackingOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTrackingOption(this);
        }
    }
    
    public partial class AstChangeTrackingOptionLists : AstRule
    {
        
        private AstChangeTrackingOptionList _changeTrackingOptionList;
        
        public AstChangeTrackingOptionLists(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstChangeTrackingOptionList>())
                {
                    this.ChangeTrackingOptionList = ((AstChangeTrackingOptionList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstChangeTrackingOptionList ChangeTrackingOptionList
        {
            get
            {
                return this._changeTrackingOptionList;
            }
            set
            {
                this._changeTrackingOptionList = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTrackingOptionLists(this);
        }
    }
    
    public partial class AstChangeTrackingOptionList : AstRule
    {
        
        public AstChangeTrackingOptionList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTrackingOptionList(this);
        }
    }
    
    public partial class AstContainmentOption : AstRule
    {
        
        public AstContainmentOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContainmentOption(this);
        }
    }
    
    public partial class AstCursorOption : AstRule
    {
        
        public AstCursorOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCursorOption(this);
        }
    }
    
    public partial class AstLocalGlobal : AstTerminalEnum<AstLocalGlobalEnum>
    {
        
        public AstLocalGlobal(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLocalGlobal(this);
        }
        
        protected override AstLocalGlobalEnum GetValue(string value)
        {
            if ((value == "LOCAL"))
            {
                return AstLocalGlobalEnum.Local;
            }
            if ((value == "GLOBAL"))
            {
                return AstLocalGlobalEnum.Global;
            }
            return AstLocalGlobalEnum._undefined;
        }
    }
    
    public partial class AstAlterEndpoint : AstRule
    {
        
        private AstEndpointName _endpointName;
        
        public AstAlterEndpoint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointName>())
                {
                    this.EndpointName = ((AstEndpointName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEndpointName EndpointName
        {
            get
            {
                return this._endpointName;
            }
            set
            {
                this._endpointName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterEndpoint(this);
        }
    }
    
    public partial class AstMirroringSetOption : AstRule
    {
        
        public AstMirroringSetOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMirroringSetOption(this);
        }
    }
    
    public partial class AstMirroringPartner : AstRule
    {
        
        public AstMirroringPartner(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMirroringPartner(this);
        }
    }
    
    public partial class AstMirroringWitness : AstRule
    {
        
        public AstMirroringWitness(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMirroringWitness(this);
        }
    }
    
    public partial class AstWitnessPartnerEqual : AstRule
    {
        
        public AstWitnessPartnerEqual(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWitnessPartnerEqual(this);
        }
    }
    
    public partial class AstPartnerOption : AstRule
    {
        
        public AstPartnerOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartnerOption(this);
        }
    }
    
    public partial class AstWitnessOption : AstRule
    {
        
        public AstWitnessOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWitnessOption(this);
        }
    }
    
    public partial class AstPartnerServer : AstRule
    {
        
        private AstPartnerServerTcpPrefix _partnerServerTcpPrefix;
        
        private AstHost _host;
        
        private AstMirroringHostPortSeperator _mirroringHostPortSeperator;
        
        private AstPortNumber _portNumber;
        
        public AstPartnerServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartnerServerTcpPrefix>())
                {
                    this.PartnerServerTcpPrefix = ((AstPartnerServerTcpPrefix)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstHost>())
                {
                    this.Host = ((AstHost)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMirroringHostPortSeperator>())
                {
                    this.MirroringHostPortSeperator = ((AstMirroringHostPortSeperator)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPortNumber>())
                {
                    this.PortNumber = ((AstPortNumber)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartnerServerTcpPrefix PartnerServerTcpPrefix
        {
            get
            {
                return this._partnerServerTcpPrefix;
            }
            set
            {
                this._partnerServerTcpPrefix = value;
            }
        }
        
        public virtual AstHost Host
        {
            get
            {
                return this._host;
            }
            set
            {
                this._host = value;
            }
        }
        
        public virtual AstMirroringHostPortSeperator MirroringHostPortSeperator
        {
            get
            {
                return this._mirroringHostPortSeperator;
            }
            set
            {
                this._mirroringHostPortSeperator = value;
            }
        }
        
        public virtual AstPortNumber PortNumber
        {
            get
            {
                return this._portNumber;
            }
            set
            {
                this._portNumber = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartnerServer(this);
        }
    }
    
    public partial class AstMirroringHostPortSeperator : AstRule
    {
        
        public AstMirroringHostPortSeperator(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMirroringHostPortSeperator(this);
        }
    }
    
    public partial class AstPartnerServerTcpPrefix : AstRule
    {
        
        public AstPartnerServerTcpPrefix(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartnerServerTcpPrefix(this);
        }
    }
    
    public partial class AstPortNumber : AstRule
    {
        
        public AstPortNumber(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPortNumber(this);
        }
    }
    
    public partial class AstHost : AstRule
    {
        
        public AstHost(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitHost(this);
        }
    }
    
    public partial class AstDateCorrelationOptimizationOption : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstDateCorrelationOptimizationOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this.OnOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
            set
            {
                this._onOff = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDateCorrelationOptimizationOption(this);
        }
    }
    
    public partial class AstDbEncryptionOption : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstDbEncryptionOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this.OnOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
            set
            {
                this._onOff = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbEncryptionOption(this);
        }
    }
    
    public partial class AstDbStateOption : AstTerminalEnum<AstDbStateOptionEnum>
    {
        
        public AstDbStateOption(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbStateOption(this);
        }
        
        protected override AstDbStateOptionEnum GetValue(string value)
        {
            if ((value == "ONLINE"))
            {
                return AstDbStateOptionEnum.Online;
            }
            if ((value == "OFFLINE"))
            {
                return AstDbStateOptionEnum.Offline;
            }
            if ((value == "EMERGENCY"))
            {
                return AstDbStateOptionEnum.Emergency;
            }
            return AstDbStateOptionEnum._undefined;
        }
    }
    
    public partial class AstDbUpdateOption : AstTerminalEnum<AstDbUpdateOptionEnum>
    {
        
        public AstDbUpdateOption(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbUpdateOption(this);
        }
        
        protected override AstDbUpdateOptionEnum GetValue(string value)
        {
            if ((value == "READ_ONLY"))
            {
                return AstDbUpdateOptionEnum.ReadOnly;
            }
            if ((value == "READ_WRITE"))
            {
                return AstDbUpdateOptionEnum.ReadWrite;
            }
            return AstDbUpdateOptionEnum._undefined;
        }
    }
    
    public partial class AstDbUserAccessOption : AstTerminalEnum<AstDbUserAccessOptionEnum>
    {
        
        public AstDbUserAccessOption(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbUserAccessOption(this);
        }
        
        protected override AstDbUserAccessOptionEnum GetValue(string value)
        {
            if ((value == "SINGLE_USER"))
            {
                return AstDbUserAccessOptionEnum.SingleUser;
            }
            if ((value == "RESTRICTED_USER"))
            {
                return AstDbUserAccessOptionEnum.RestrictedUser;
            }
            if ((value == "MULTI_USER"))
            {
                return AstDbUserAccessOptionEnum.MultiUser;
            }
            return AstDbUserAccessOptionEnum._undefined;
        }
    }
    
    public partial class AstDelayedDurabilityOption : AstRule
    {
        
        public AstDelayedDurabilityOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDelayedDurabilityOption(this);
        }
    }
    
    public partial class AstExternalAccessOption : AstRule
    {
        
        public AstExternalAccessOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalAccessOption(this);
        }
    }
    
    public partial class AstIdOrString : AstRule
    {
        
        public AstIdOrString(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIdOrString(this);
        }
    }
    
    public partial class AstHadrOptions : AstRule
    {
        
        public AstHadrOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitHadrOptions(this);
        }
    }
    
    public partial class AstMixedPageAllocationOption : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstMixedPageAllocationOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this.OnOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
            set
            {
                this._onOff = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMixedPageAllocationOption(this);
        }
    }
    
    public partial class AstParameterizationOption : AstRule
    {
        
        public AstParameterizationOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitParameterizationOption(this);
        }
    }
    
    public partial class AstRecoveryOption : AstRule
    {
        
        public AstRecoveryOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRecoveryOption(this);
        }
    }
    
    public partial class AstServiceBrokerOption : AstRule
    {
        
        public AstServiceBrokerOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServiceBrokerOption(this);
        }
    }
    
    public partial class AstSnapshotOption : AstRule
    {
        
        public AstSnapshotOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSnapshotOption(this);
        }
    }
    
    public partial class AstSqlOption : AstRule
    {
        
        public AstSqlOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlOption(this);
        }
    }
    
    public partial class AstTargetRecoveryTimeOption : AstRule
    {
        
        public AstTargetRecoveryTimeOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetRecoveryTimeOption(this);
        }
    }
    
    public partial class AstTermination : AstRule
    {
        
        public AstTermination(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTermination(this);
        }
    }
    
    public partial class AstDropIndex : AstRule
    {
        
        public AstDropIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropIndex(this);
        }
    }
    
    public partial class AstDropRelationalOrXmlOrSpatialIndexs : AstRule
    {
        
        private AstDropRelationalOrXmlOrSpatialIndex _dropRelationalOrXmlOrSpatialIndex;
        
        public AstDropRelationalOrXmlOrSpatialIndexs(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDropRelationalOrXmlOrSpatialIndex>())
                {
                    this.DropRelationalOrXmlOrSpatialIndex = ((AstDropRelationalOrXmlOrSpatialIndex)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDropRelationalOrXmlOrSpatialIndex DropRelationalOrXmlOrSpatialIndex
        {
            get
            {
                return this._dropRelationalOrXmlOrSpatialIndex;
            }
            set
            {
                this._dropRelationalOrXmlOrSpatialIndex = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRelationalOrXmlOrSpatialIndexs(this);
        }
    }
    
    public partial class AstDropBackwardCompatibleIndexs : AstRule
    {
        
        private AstDropBackwardCompatibleIndex _dropBackwardCompatibleIndex;
        
        public AstDropBackwardCompatibleIndexs(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDropBackwardCompatibleIndex>())
                {
                    this.DropBackwardCompatibleIndex = ((AstDropBackwardCompatibleIndex)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDropBackwardCompatibleIndex DropBackwardCompatibleIndex
        {
            get
            {
                return this._dropBackwardCompatibleIndex;
            }
            set
            {
                this._dropBackwardCompatibleIndex = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropBackwardCompatibleIndexs(this);
        }
    }
    
    public partial class AstDropRelationalOrXmlOrSpatialIndex : AstRule
    {
        
        private AstIndexName _indexName;
        
        private AstFullTableName _fullTableName;
        
        public AstDropRelationalOrXmlOrSpatialIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexName>())
                {
                    this.IndexName = ((AstIndexName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this.FullTableName = ((AstFullTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexName IndexName
        {
            get
            {
                return this._indexName;
            }
            set
            {
                this._indexName = value;
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
            set
            {
                this._fullTableName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRelationalOrXmlOrSpatialIndex(this);
        }
    }
    
    public partial class AstDropBackwardCompatibleIndex : AstRule
    {
        
        private AstTableOrViewName _tableOrViewName;
        
        private AstIndexName _indexName;
        
        public AstDropBackwardCompatibleIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableOrViewName>())
                {
                    this.TableOrViewName = ((AstTableOrViewName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexName>())
                {
                    this.IndexName = ((AstIndexName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableOrViewName TableOrViewName
        {
            get
            {
                return this._tableOrViewName;
            }
            set
            {
                this._tableOrViewName = value;
            }
        }
        
        public virtual AstIndexName IndexName
        {
            get
            {
                return this._indexName;
            }
            set
            {
                this._indexName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropBackwardCompatibleIndex(this);
        }
    }
    
    public partial class AstDropProcedure : AstRule
    {
        
        private AstFuncProcNameSchemas _funcProcNameSchemas;
        
        public AstDropProcedure(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this.FuncProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFuncProcNameSchemas FuncProcNameSchemas
        {
            get
            {
                return this._funcProcNameSchemas;
            }
            set
            {
                this._funcProcNameSchemas = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropProcedure(this);
        }
    }
    
    public partial class AstFuncProcNameSchemas : AstRule
    {
        
        private AstFuncProcNameSchema _funcProcNameSchema;
        
        public AstFuncProcNameSchemas(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameSchema>())
                {
                    this.FuncProcNameSchema = ((AstFuncProcNameSchema)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFuncProcNameSchema FuncProcNameSchema
        {
            get
            {
                return this._funcProcNameSchema;
            }
            set
            {
                this._funcProcNameSchema = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncProcNameSchemas(this);
        }
    }
    
    public partial class AstDropDmlTrigger : AstRule
    {
        
        private AstSimpleNames _simpleNames;
        
        public AstDropDmlTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleNames>())
                {
                    this.SimpleNames = ((AstSimpleNames)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleNames SimpleNames
        {
            get
            {
                return this._simpleNames;
            }
            set
            {
                this._simpleNames = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDmlTrigger(this);
        }
    }
    
    public partial class AstDropDdlTrigger : AstRule
    {
        
        private AstSimpleNames _simpleNames;
        
        public AstDropDdlTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleNames>())
                {
                    this.SimpleNames = ((AstSimpleNames)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleNames SimpleNames
        {
            get
            {
                return this._simpleNames;
            }
            set
            {
                this._simpleNames = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDdlTrigger(this);
        }
    }
    
    public partial class AstSimpleNames : AstRule
    {
        
        private AstSimpleName _simpleName;
        
        public AstSimpleNames(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleName>())
                {
                    this.SimpleName = ((AstSimpleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleName SimpleName
        {
            get
            {
                return this._simpleName;
            }
            set
            {
                this._simpleName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSimpleNames(this);
        }
    }
    
    public partial class AstTableNames : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstTableNames(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this.TableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                this._tableName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableNames(this);
        }
    }
    
    public partial class AstDropFunction : AstRule
    {
        
        private AstFuncProcNameSchemas _funcProcNameSchemas;
        
        public AstDropFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this.FuncProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFuncProcNameSchemas FuncProcNameSchemas
        {
            get
            {
                return this._funcProcNameSchemas;
            }
            set
            {
                this._funcProcNameSchemas = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFunction(this);
        }
    }
    
    public partial class AstDropStatistics : AstRule
    {
        
        public AstDropStatistics(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropStatistics(this);
        }
    }
    
    public partial class AstDropTable : AstRule
    {
        
        private AstTableNames _tableNames;
        
        public AstDropTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableNames>())
                {
                    this.TableNames = ((AstTableNames)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableNames TableNames
        {
            get
            {
                return this._tableNames;
            }
            set
            {
                this._tableNames = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropTable(this);
        }
    }
    
    public partial class AstDropView : AstRule
    {
        
        private AstSimpleNames _simpleNames;
        
        public AstDropView(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleNames>())
                {
                    this.SimpleNames = ((AstSimpleNames)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleNames SimpleNames
        {
            get
            {
                return this._simpleNames;
            }
            set
            {
                this._simpleNames = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropView(this);
        }
    }
    
    public partial class AstCreateType : AstRule
    {
        
        public AstCreateType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateType(this);
        }
    }
    
    public partial class AstDropType : AstRule
    {
        
        public AstDropType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropType(this);
        }
    }
    
    public partial class AstOpenquery : AstRule
    {
        
        private AstLinkedServer _linkedServer;
        
        public AstOpenquery(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLinkedServer>())
                {
                    this.LinkedServer = ((AstLinkedServer)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLinkedServer LinkedServer
        {
            get
            {
                return this._linkedServer;
            }
            set
            {
                this._linkedServer = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenquery(this);
        }
    }
    
    public partial class AstOpendatasource : AstRule
    {
        
        public AstOpendatasource(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpendatasource(this);
        }
    }
    
    public partial class AstDeclareStatement : AstRule
    {
        
        public AstDeclareStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareStatement(this);
        }
    }
    
    public partial class AstDeclareLocals : AstRule
    {
        
        private AstDeclareLocal _declareLocal;
        
        public AstDeclareLocals(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDeclareLocal>())
                {
                    this.DeclareLocal = ((AstDeclareLocal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDeclareLocal DeclareLocal
        {
            get
            {
                return this._declareLocal;
            }
            set
            {
                this._declareLocal = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareLocals(this);
        }
    }
    
    public partial class AstXmlDeclarations : AstRule
    {
        
        private AstXmlDeclaration _xmlDeclaration;
        
        public AstXmlDeclarations(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstXmlDeclaration>())
                {
                    this.XmlDeclaration = ((AstXmlDeclaration)(enumerator.Current));
                }
            }
        }
        
        public virtual AstXmlDeclaration XmlDeclaration
        {
            get
            {
                return this._xmlDeclaration;
            }
            set
            {
                this._xmlDeclaration = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlDeclarations(this);
        }
    }
    
    public partial class AstXmlDeclaration : AstRule
    {
        
        public AstXmlDeclaration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlDeclaration(this);
        }
    }
    
    public partial class AstCursorStatement : AstRule
    {
        
        public AstCursorStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCursorStatement(this);
        }
    }
    
    public partial class AstBackupDatabase : AstRule
    {
        
        public AstBackupDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupDatabase(this);
        }
    }
    
    public partial class AstBackupLog : AstRule
    {
        
        public AstBackupLog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupLog(this);
        }
    }
    
    public partial class AstBackupCertificate : AstRule
    {
        
        private AstCertificateName _certificateName;
        
        public AstBackupCertificate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateName>())
                {
                    this.CertificateName = ((AstCertificateName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateName CertificateName
        {
            get
            {
                return this._certificateName;
            }
            set
            {
                this._certificateName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupCertificate(this);
        }
    }
    
    public partial class AstBackupMasterKey : AstRule
    {
        
        public AstBackupMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupMasterKey(this);
        }
    }
    
    public partial class AstBackupServiceMasterKey : AstRule
    {
        
        public AstBackupServiceMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupServiceMasterKey(this);
        }
    }
    
    public partial class AstKillStatement : AstRule
    {
        
        public AstKillStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillStatement(this);
        }
    }
    
    public partial class AstKillProcess : AstRule
    {
        
        public AstKillProcess(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillProcess(this);
        }
    }
    
    public partial class AstKillQueryNotification : AstRule
    {
        
        public AstKillQueryNotification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillQueryNotification(this);
        }
    }
    
    public partial class AstKillStatsJob : AstRule
    {
        
        public AstKillStatsJob(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillStatsJob(this);
        }
    }
    
    public partial class AstExecuteStatement : AstRule
    {
        
        private AstExecuteBody _executeBody;
        
        public AstExecuteStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteBody>())
                {
                    this.ExecuteBody = ((AstExecuteBody)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExecuteBody ExecuteBody
        {
            get
            {
                return this._executeBody;
            }
            set
            {
                this._executeBody = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatement(this);
        }
    }
    
    public partial class AstExecuteBodyBatch : AstRule
    {
        
        private AstFuncProcNameServerDatabaseSchema _funcProcNameServerDatabaseSchema;
        
        public AstExecuteBodyBatch(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameServerDatabaseSchema>())
                {
                    this.FuncProcNameServerDatabaseSchema = ((AstFuncProcNameServerDatabaseSchema)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFuncProcNameServerDatabaseSchema FuncProcNameServerDatabaseSchema
        {
            get
            {
                return this._funcProcNameServerDatabaseSchema;
            }
            set
            {
                this._funcProcNameServerDatabaseSchema = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteBodyBatch(this);
        }
    }
    
    public partial class AstExecuteBody : AstRule
    {
        
        public AstExecuteBody(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteBody(this);
        }
    }
    
    public partial class AstExecuteVarStrings : AstRule
    {
        
        private AstExecuteVarString _executeVarString;
        
        public AstExecuteVarStrings(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteVarString>())
                {
                    this.ExecuteVarString = ((AstExecuteVarString)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExecuteVarString ExecuteVarString
        {
            get
            {
                return this._executeVarString;
            }
            set
            {
                this._executeVarString = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteVarStrings(this);
        }
    }
    
    public partial class AstExecuteStatementArg : AstRule
    {
        
        public AstExecuteStatementArg(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArg(this);
        }
    }
    
    public partial class AstExecuteStatementArgNameds : AstRule
    {
        
        private AstExecuteStatementArgNamed _executeStatementArgNamed;
        
        public AstExecuteStatementArgNameds(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteStatementArgNamed>())
                {
                    this.ExecuteStatementArgNamed = ((AstExecuteStatementArgNamed)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExecuteStatementArgNamed ExecuteStatementArgNamed
        {
            get
            {
                return this._executeStatementArgNamed;
            }
            set
            {
                this._executeStatementArgNamed = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgNameds(this);
        }
    }
    
    public partial class AstExecuteStatementArgs : AstRule
    {
        
        private AstExecuteStatementArg _executeStatementArg;
        
        public AstExecuteStatementArgs(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteStatementArg>())
                {
                    this.ExecuteStatementArg = ((AstExecuteStatementArg)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExecuteStatementArg ExecuteStatementArg
        {
            get
            {
                return this._executeStatementArg;
            }
            set
            {
                this._executeStatementArg = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgs(this);
        }
    }
    
    public partial class AstExecuteStatementArgNamed : AstRule
    {
        
        public AstExecuteStatementArgNamed(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgNamed(this);
        }
    }
    
    public partial class AstExecuteStatementArgUnnamed : AstRule
    {
        
        public AstExecuteStatementArgUnnamed(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgUnnamed(this);
        }
    }
    
    public partial class AstExecuteParameter : AstRule
    {
        
        public AstExecuteParameter(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteParameter(this);
        }
    }
    
    public partial class AstExecuteVarString : AstRule
    {
        
        public AstExecuteVarString(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteVarString(this);
        }
    }
    
    public partial class AstSecurityStatement : AstRule
    {
        
        public AstSecurityStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSecurityStatement(this);
        }
    }
    
    public partial class AstToPrincipalRincipalIds : AstRule
    {
        
        public AstToPrincipalRincipalIds(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitToPrincipalRincipalIds(this);
        }
    }
    
    public partial class AstPrincipalId : AstRule
    {
        
        public AstPrincipalId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrincipalId(this);
        }
    }
    
    public partial class AstCreateCertificate : AstRule
    {
        
        private AstCertificateName _certificateName;
        
        public AstCreateCertificate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateName>())
                {
                    this.CertificateName = ((AstCertificateName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateName CertificateName
        {
            get
            {
                return this._certificateName;
            }
            set
            {
                this._certificateName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateCertificate(this);
        }
    }
    
    public partial class AstExistingKeys : AstRule
    {
        
        public AstExistingKeys(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExistingKeys(this);
        }
    }
    
    public partial class AstPrivateKeyOptions : AstRule
    {
        
        public AstPrivateKeyOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrivateKeyOptions(this);
        }
    }
    
    public partial class AstGenerateNewKeys : AstRule
    {
        
        public AstGenerateNewKeys(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGenerateNewKeys(this);
        }
    }
    
    public partial class AstDateOptions : AstRule
    {
        
        public AstDateOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDateOptions(this);
        }
    }
    
    public partial class AstOpenKey : AstRule
    {
        
        public AstOpenKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenKey(this);
        }
    }
    
    public partial class AstCloseKey : AstRule
    {
        
        public AstCloseKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCloseKey(this);
        }
    }
    
    public partial class AstCreateKey : AstRule
    {
        
        public AstCreateKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateKey(this);
        }
    }
    
    public partial class AstKeyOptions : AstRule
    {
        
        public AstKeyOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKeyOptions(this);
        }
    }
    
    public partial class AstAlgorithm : AstTerminalEnum<AstAlgorithmEnum>
    {
        
        public AstAlgorithm(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlgorithm(this);
        }
        
        protected override AstAlgorithmEnum GetValue(string value)
        {
            if ((value == "DES"))
            {
                return AstAlgorithmEnum.Des;
            }
            if ((value == "TRIPLE_DES"))
            {
                return AstAlgorithmEnum.TripleDes;
            }
            if ((value == "TRIPLE_DES_3KEY"))
            {
                return AstAlgorithmEnum.TripleDes3key;
            }
            if ((value == "RC2"))
            {
                return AstAlgorithmEnum.Rc2;
            }
            if ((value == "RC4"))
            {
                return AstAlgorithmEnum.Rc4;
            }
            if ((value == "RC4_128"))
            {
                return AstAlgorithmEnum.Rc4128;
            }
            if ((value == "DESX"))
            {
                return AstAlgorithmEnum.Desx;
            }
            if ((value == "AES_128"))
            {
                return AstAlgorithmEnum.Aes128;
            }
            if ((value == "AES_192"))
            {
                return AstAlgorithmEnum.Aes192;
            }
            if ((value == "AES_256"))
            {
                return AstAlgorithmEnum.Aes256;
            }
            return AstAlgorithmEnum._undefined;
        }
    }
    
    public partial class AstEncryptionMechanism : AstRule
    {
        
        public AstEncryptionMechanism(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEncryptionMechanism(this);
        }
    }
    
    public partial class AstDecryptionMechanism : AstRule
    {
        
        public AstDecryptionMechanism(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecryptionMechanism(this);
        }
    }
    
    public partial class AstGrantPermission : AstRule
    {
        
        public AstGrantPermission(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGrantPermission(this);
        }
    }
    
    public partial class AstSetStatement : AstRule
    {
        
        public AstSetStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetStatement(this);
        }
    }
    
    public partial class AstTransactionStatement : AstRule
    {
        
        public AstTransactionStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTransactionStatement(this);
        }
    }
    
    public partial class AstGoStatement : AstRule
    {
        
        public AstGoStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGoStatement(this);
        }
    }
    
    public partial class AstUseStatement : AstRule
    {
        
        private AstDatabaseName _databaseName;
        
        public AstUseStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseName>())
                {
                    this.DatabaseName = ((AstDatabaseName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseName DatabaseName
        {
            get
            {
                return this._databaseName;
            }
            set
            {
                this._databaseName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUseStatement(this);
        }
    }
    
    public partial class AstSetuserStatement : AstRule
    {
        
        public AstSetuserStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetuserStatement(this);
        }
    }
    
    public partial class AstReconfigureStatement : AstRule
    {
        
        public AstReconfigureStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReconfigureStatement(this);
        }
    }
    
    public partial class AstShutdownStatement : AstRule
    {
        
        public AstShutdownStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitShutdownStatement(this);
        }
    }
    
    public partial class AstCheckpointStatement : AstRule
    {
        
        public AstCheckpointStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCheckpointStatement(this);
        }
    }
    
    public partial class AstDbccSpecial : AstRule
    {
        
        public AstDbccSpecial(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccSpecial(this);
        }
    }
    
    public partial class AstDbccClause : AstRule
    {
        
        public AstDbccClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccClause(this);
        }
    }
    
    public partial class AstDbccCommand : AstRule
    {
        
        public AstDbccCommand(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccCommand(this);
        }
    }
    
    public partial class AstDbccOptions : AstRule
    {
        
        private AstSimpleId _simpleId;
        
        public AstDbccOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleId>())
                {
                    this.SimpleId = ((AstSimpleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleId SimpleId
        {
            get
            {
                return this._simpleId;
            }
            set
            {
                this._simpleId = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccOptions(this);
        }
    }
    
    public partial class AstExecuteClause : AstRule
    {
        
        public AstExecuteClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteClause(this);
        }
    }
    
    public partial class AstDeclareLocal : AstRule
    {
        
        private AstDataType _dataType;
        
        public AstDeclareLocal(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this.DataType = ((AstDataType)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
            set
            {
                this._dataType = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareLocal(this);
        }
    }
    
    public partial class AstTableTypeDefinition : AstRule
    {
        
        private AstColumnDefTableConstraints _columnDefTableConstraints;
        
        public AstTableTypeDefinition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this.ColumnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnDefTableConstraints ColumnDefTableConstraints
        {
            get
            {
                return this._columnDefTableConstraints;
            }
            set
            {
                this._columnDefTableConstraints = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableTypeDefinition(this);
        }
    }
    
    public partial class AstTableTypeIndices : AstRule
    {
        
        public AstTableTypeIndices(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableTypeIndices(this);
        }
    }
    
    public partial class AstXmlTypeDefinition : AstRule
    {
        
        private AstXmlSchemaCollection _xmlSchemaCollection;
        
        public AstXmlTypeDefinition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstXmlSchemaCollection>())
                {
                    this.XmlSchemaCollection = ((AstXmlSchemaCollection)(enumerator.Current));
                }
            }
        }
        
        public virtual AstXmlSchemaCollection XmlSchemaCollection
        {
            get
            {
                return this._xmlSchemaCollection;
            }
            set
            {
                this._xmlSchemaCollection = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlTypeDefinition(this);
        }
    }
    
    public partial class AstXmlSchemaCollection : AstRule
    {
        
        public AstXmlSchemaCollection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlSchemaCollection(this);
        }
    }
    
    public partial class AstColumnDefTableConstraints : AstRule
    {
        
        private AstColumnDefTableConstraint _columnDefTableConstraint;
        
        public AstColumnDefTableConstraints(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDefTableConstraint>())
                {
                    this.ColumnDefTableConstraint = ((AstColumnDefTableConstraint)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnDefTableConstraint ColumnDefTableConstraint
        {
            get
            {
                return this._columnDefTableConstraint;
            }
            set
            {
                this._columnDefTableConstraint = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDefTableConstraints(this);
        }
    }
    
    public partial class AstColumnDefTableConstraint : AstRule
    {
        
        public AstColumnDefTableConstraint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDefTableConstraint(this);
        }
    }
    
    public partial class AstColumnDefinition : AstRule
    {
        
        private AstId _id;
        
        private AstColumnDefinitionElement _columnDefinitionElement;
        
        private AstColumnIndex _columnIndex;
        
        public AstColumnDefinition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefinitionElement>())
                {
                    this.ColumnDefinitionElement = ((AstColumnDefinitionElement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnIndex>())
                {
                    this.ColumnIndex = ((AstColumnIndex)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public virtual AstColumnDefinitionElement ColumnDefinitionElement
        {
            get
            {
                return this._columnDefinitionElement;
            }
            set
            {
                this._columnDefinitionElement = value;
            }
        }
        
        public virtual AstColumnIndex ColumnIndex
        {
            get
            {
                return this._columnIndex;
            }
            set
            {
                this._columnIndex = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDefinition(this);
        }
    }
    
    public partial class AstColumnDefinitionElement : AstRule
    {
        
        public AstColumnDefinitionElement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDefinitionElement(this);
        }
    }
    
    public partial class AstColumnModifier : AstRule
    {
        
        private AstId _id;
        
        private AstAddDrop _addDrop;
        
        public AstColumnModifier(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this.AddDrop = ((AstAddDrop)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
            set
            {
                this._addDrop = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnModifier(this);
        }
    }
    
    public partial class AstMaterializedColumnDefinition : AstRule
    {
        
        private AstId _id;
        
        private AstExpression _expression;
        
        public AstMaterializedColumnDefinition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this.Expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
            set
            {
                this._expression = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMaterializedColumnDefinition(this);
        }
    }
    
    public partial class AstColumnConstraint : AstRule
    {
        
        public AstColumnConstraint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnConstraint(this);
        }
    }
    
    public partial class AstColumnIndex : AstRule
    {
        
        private AstIndexName _indexName;
        
        private AstCreateTableIndexOptions _createTableIndexOptions;
        
        private AstOnPartitionOrFilegroup _onPartitionOrFilegroup;
        
        public AstColumnIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexName>())
                {
                    this.IndexName = ((AstIndexName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateTableIndexOptions>())
                {
                    this.CreateTableIndexOptions = ((AstCreateTableIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup>())
                {
                    this.OnPartitionOrFilegroup = ((AstOnPartitionOrFilegroup)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexName IndexName
        {
            get
            {
                return this._indexName;
            }
            set
            {
                this._indexName = value;
            }
        }
        
        public virtual AstCreateTableIndexOptions CreateTableIndexOptions
        {
            get
            {
                return this._createTableIndexOptions;
            }
            set
            {
                this._createTableIndexOptions = value;
            }
        }
        
        public virtual AstOnPartitionOrFilegroup OnPartitionOrFilegroup
        {
            get
            {
                return this._onPartitionOrFilegroup;
            }
            set
            {
                this._onPartitionOrFilegroup = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnIndex(this);
        }
    }
    
    public partial class AstOnPartitionOrFilegroup : AstRule
    {
        
        public AstOnPartitionOrFilegroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnPartitionOrFilegroup(this);
        }
    }
    
    public partial class AstTableConstraint : AstRule
    {
        
        public AstTableConstraint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableConstraint(this);
        }
    }
    
    public partial class AstConnectionNode : AstRule
    {
        
        public AstConnectionNode(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConnectionNode(this);
        }
    }
    
    public partial class AstPrimaryKeyOptions : AstRule
    {
        
        private AstAlterTableIndexOptions _alterTableIndexOptions;
        
        private AstOnPartitionOrFilegroup _onPartitionOrFilegroup;
        
        public AstPrimaryKeyOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterTableIndexOptions>())
                {
                    this.AlterTableIndexOptions = ((AstAlterTableIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup>())
                {
                    this.OnPartitionOrFilegroup = ((AstOnPartitionOrFilegroup)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterTableIndexOptions AlterTableIndexOptions
        {
            get
            {
                return this._alterTableIndexOptions;
            }
            set
            {
                this._alterTableIndexOptions = value;
            }
        }
        
        public virtual AstOnPartitionOrFilegroup OnPartitionOrFilegroup
        {
            get
            {
                return this._onPartitionOrFilegroup;
            }
            set
            {
                this._onPartitionOrFilegroup = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrimaryKeyOptions(this);
        }
    }
    
    public partial class AstForeignKeyOptions : AstRule
    {
        
        private AstTableName _tableName;
        
        private AstOnDelete _onDelete;
        
        private AstOnUpdate _onUpdate;
        
        public AstForeignKeyOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this.TableName = ((AstTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnDelete>())
                {
                    this.OnDelete = ((AstOnDelete)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnUpdate>())
                {
                    this.OnUpdate = ((AstOnUpdate)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                this._tableName = value;
            }
        }
        
        public virtual AstOnDelete OnDelete
        {
            get
            {
                return this._onDelete;
            }
            set
            {
                this._onDelete = value;
            }
        }
        
        public virtual AstOnUpdate OnUpdate
        {
            get
            {
                return this._onUpdate;
            }
            set
            {
                this._onUpdate = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitForeignKeyOptions(this);
        }
    }
    
    public partial class AstCheckConstraint : AstRule
    {
        
        private AstSearchCondition _searchCondition;
        
        public AstCheckConstraint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this.SearchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
            set
            {
                this._searchCondition = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCheckConstraint(this);
        }
    }
    
    public partial class AstOnDelete : AstRule
    {
        
        public AstOnDelete(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnDelete(this);
        }
    }
    
    public partial class AstOnUpdate : AstRule
    {
        
        public AstOnUpdate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnUpdate(this);
        }
    }
    
    public partial class AstAlterTableIndexOptions : AstRule
    {
        
        private AstAlterTableIndexOption _alterTableIndexOption;
        
        public AstAlterTableIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterTableIndexOption>())
                {
                    this.AlterTableIndexOption = ((AstAlterTableIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterTableIndexOption AlterTableIndexOption
        {
            get
            {
                return this._alterTableIndexOption;
            }
            set
            {
                this._alterTableIndexOption = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterTableIndexOptions(this);
        }
    }
    
    public partial class AstAlterTableIndexOption : AstRule
    {
        
        public AstAlterTableIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterTableIndexOption(this);
        }
    }
    
    public partial class AstDeclareCursor : AstRule
    {
        
        private AstCursorName _cursorName;
        
        public AstDeclareCursor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this.CursorName = ((AstCursorName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCursorName CursorName
        {
            get
            {
                return this._cursorName;
            }
            set
            {
                this._cursorName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareCursor(this);
        }
    }
    
    public partial class AstSensitive : AstTerminalEnum<AstSensitiveEnum>
    {
        
        public AstSensitive(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSensitive(this);
        }
        
        protected override AstSensitiveEnum GetValue(string value)
        {
            if ((value == "SEMI_SENSITIVE"))
            {
                return AstSensitiveEnum.SemiSensitive;
            }
            if ((value == "INSENSITIVE"))
            {
                return AstSensitiveEnum.Insensitive;
            }
            return AstSensitiveEnum._undefined;
        }
    }
    
    public partial class AstDeclareSetCursorCommon : AstRule
    {
        
        private AstDeclareSetCursorCommonPartial _declareSetCursorCommonPartial;
        
        private AstSelectStatementStandalone _selectStatementStandalone;
        
        public AstDeclareSetCursorCommon(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDeclareSetCursorCommonPartial>())
                {
                    this.DeclareSetCursorCommonPartial = ((AstDeclareSetCursorCommonPartial)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this.SelectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDeclareSetCursorCommonPartial DeclareSetCursorCommonPartial
        {
            get
            {
                return this._declareSetCursorCommonPartial;
            }
            set
            {
                this._declareSetCursorCommonPartial = value;
            }
        }
        
        public virtual AstSelectStatementStandalone SelectStatementStandalone
        {
            get
            {
                return this._selectStatementStandalone;
            }
            set
            {
                this._selectStatementStandalone = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareSetCursorCommon(this);
        }
    }
    
    public partial class AstDeclareSetCursorCommonPartial : AstRule
    {
        
        public AstDeclareSetCursorCommonPartial(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareSetCursorCommonPartial(this);
        }
    }
    
    public partial class AstFetchCursor : AstRule
    {
        
        private AstCursorName _cursorName;
        
        public AstFetchCursor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this.CursorName = ((AstCursorName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCursorName CursorName
        {
            get
            {
                return this._cursorName;
            }
            set
            {
                this._cursorName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFetchCursor(this);
        }
    }
    
    public partial class AstAbsoluteRelative : AstTerminalEnum<AstAbsoluteRelativeEnum>
    {
        
        public AstAbsoluteRelative(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAbsoluteRelative(this);
        }
        
        protected override AstAbsoluteRelativeEnum GetValue(string value)
        {
            if ((value == "ABSOLUTE"))
            {
                return AstAbsoluteRelativeEnum.Absolute;
            }
            if ((value == "RELATIVE"))
            {
                return AstAbsoluteRelativeEnum.Relative;
            }
            return AstAbsoluteRelativeEnum._undefined;
        }
    }
    
    public partial class AstFetchCursorStrategy : AstTerminalEnum<AstFetchCursorStrategyEnum>
    {
        
        public AstFetchCursorStrategy(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFetchCursorStrategy(this);
        }
        
        protected override AstFetchCursorStrategyEnum GetValue(string value)
        {
            if ((value == "NEXT"))
            {
                return AstFetchCursorStrategyEnum.Next;
            }
            if ((value == "PRIOR"))
            {
                return AstFetchCursorStrategyEnum.Prior;
            }
            if ((value == "FIRST"))
            {
                return AstFetchCursorStrategyEnum.First;
            }
            if ((value == "LAST"))
            {
                return AstFetchCursorStrategyEnum.Last;
            }
            return AstFetchCursorStrategyEnum._undefined;
        }
    }
    
    public partial class AstLocalIds : AstRule
    {
        
        public AstLocalIds(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLocalIds(this);
        }
    }
    
    public partial class AstSetSpecial : AstRule
    {
        
        public AstSetSpecial(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetSpecial(this);
        }
    }
    
    public partial class AstSpecialList : AstTerminalEnum<AstSpecialListEnum>
    {
        
        public AstSpecialList(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSpecialList(this);
        }
        
        protected override AstSpecialListEnum GetValue(string value)
        {
            if ((value == "ANSI_NULLS"))
            {
                return AstSpecialListEnum.AnsiNulls;
            }
            if ((value == "QUOTED_IDENTIFIER"))
            {
                return AstSpecialListEnum.QuotedIdentifier;
            }
            if ((value == "ANSI_PADDING"))
            {
                return AstSpecialListEnum.AnsiPadding;
            }
            if ((value == "ANSI_WARNINGS"))
            {
                return AstSpecialListEnum.AnsiWarnings;
            }
            if ((value == "ANSI_DEFAULTS"))
            {
                return AstSpecialListEnum.AnsiDefaults;
            }
            if ((value == "ANSI_NULL_DFLT_OFF"))
            {
                return AstSpecialListEnum.AnsiNullDfltOff;
            }
            if ((value == "ANSI_NULL_DFLT_ON"))
            {
                return AstSpecialListEnum.AnsiNullDfltOn;
            }
            if ((value == "ARITHABORT"))
            {
                return AstSpecialListEnum.Arithabort;
            }
            if ((value == "ARITHIGNORE"))
            {
                return AstSpecialListEnum.Arithignore;
            }
            if ((value == "CONCAT_NULL_YIELDS_NULL"))
            {
                return AstSpecialListEnum.ConcatNullYieldsNull;
            }
            if ((value == "CURSOR_CLOSE_ON_COMMIT"))
            {
                return AstSpecialListEnum.CursorCloseOnCommit;
            }
            if ((value == "FMTONLY"))
            {
                return AstSpecialListEnum.Fmtonly;
            }
            if ((value == "FORCEPLAN"))
            {
                return AstSpecialListEnum.Forceplan;
            }
            if ((value == "IMPLICIT_TRANSACTIONS"))
            {
                return AstSpecialListEnum.ImplicitTransactions;
            }
            if ((value == "NOCOUNT"))
            {
                return AstSpecialListEnum.Nocount;
            }
            if ((value == "NOEXEC"))
            {
                return AstSpecialListEnum.Noexec;
            }
            if ((value == "NUMERIC_ROUNDABORT"))
            {
                return AstSpecialListEnum.NumericRoundabort;
            }
            if ((value == "PARSEONLY"))
            {
                return AstSpecialListEnum.Parseonly;
            }
            if ((value == "REMOTE_PROC_TRANSACTIONS"))
            {
                return AstSpecialListEnum.RemoteProcTransactions;
            }
            if ((value == "SHOWPLAN_ALL"))
            {
                return AstSpecialListEnum.ShowplanAll;
            }
            if ((value == "SHOWPLAN_TEXT"))
            {
                return AstSpecialListEnum.ShowplanText;
            }
            if ((value == "SHOWPLAN_XML"))
            {
                return AstSpecialListEnum.ShowplanXml;
            }
            if ((value == "XACT_ABORT"))
            {
                return AstSpecialListEnum.XactAbort;
            }
            return AstSpecialListEnum._undefined;
        }
    }
    
    public partial class AstConstantLOCALID : AstRule
    {
        
        public AstConstantLOCALID(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConstantLOCALID(this);
        }
    }
    
    public partial class AstExpression : AstRule
    {
        
        public AstExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpression(this);
        }
    }
    
    public partial class AstParameter : AstRule
    {
        
        public AstParameter(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitParameter(this);
        }
    }
    
    public partial class AstTimeZone : AstRule
    {
        
        private AstExpression _expression;
        
        public AstTimeZone(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this.Expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
            set
            {
                this._expression = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTimeZone(this);
        }
    }
    
    public partial class AstPrimitiveExpression : AstRule
    {
        
        public AstPrimitiveExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrimitiveExpression(this);
        }
    }
    
    public partial class AstCaseExpression : AstRule
    {
        
        public AstCaseExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCaseExpression(this);
        }
    }
    
    public partial class AstUnaryOperatorExpression : AstRule
    {
        
        public AstUnaryOperatorExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnaryOperatorExpression(this);
        }
    }
    
    public partial class AstBracketExpression : AstRule
    {
        
        public AstBracketExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBracketExpression(this);
        }
    }
    
    public partial class AstConstantExpression : AstRule
    {
        
        public AstConstantExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConstantExpression(this);
        }
    }
    
    public partial class AstWithExpression : AstRule
    {
        
        public AstWithExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWithExpression(this);
        }
    }
    
    public partial class AstCommonTableExpression : AstRule
    {
        
        public AstCommonTableExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCommonTableExpression(this);
        }
    }
    
    public partial class AstUpdateElem : AstRule
    {
        
        public AstUpdateElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateElem(this);
        }
    }
    
    public partial class AstUpdateElemMerge : AstRule
    {
        
        public AstUpdateElemMerge(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateElemMerge(this);
        }
    }
    
    public partial class AstSearchCondition : AstRule
    {
        
        public AstSearchCondition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSearchCondition(this);
        }
    }
    
    public partial class AstPredicate : AstRule
    {
        
        public AstPredicate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicate(this);
        }
    }
    
    public partial class AstQueryExpression : AstRule
    {
        
        public AstQueryExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueryExpression(this);
        }
    }
    
    public partial class AstSqlUnion : AstRule
    {
        
        public AstSqlUnion(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlUnion(this);
        }
    }
    
    public partial class AstQuerySpecification : AstRule
    {
        
        public AstQuerySpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQuerySpecification(this);
        }
    }
    
    public partial class AstGroupSetList : AstRule
    {
        
        public AstGroupSetList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupSetList(this);
        }
    }
    
    public partial class AstGroupBysList : AstRule
    {
        
        public AstGroupBysList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupBysList(this);
        }
    }
    
    public partial class AstTopClause : AstRule
    {
        
        public AstTopClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTopClause(this);
        }
    }
    
    public partial class AstTopPercent : AstRule
    {
        
        public AstTopPercent(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTopPercent(this);
        }
    }
    
    public partial class AstTopCount : AstRule
    {
        
        public AstTopCount(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTopCount(this);
        }
    }
    
    public partial class AstOrderByClause : AstRule
    {
        
        public AstOrderByClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOrderByClause(this);
        }
    }
    
    public partial class AstSelectOrderByClause : AstRule
    {
        
        private AstOrderByClause _orderByClause;
        
        public AstSelectOrderByClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOrderByClause>())
                {
                    this.OrderByClause = ((AstOrderByClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOrderByClause OrderByClause
        {
            get
            {
                return this._orderByClause;
            }
            set
            {
                this._orderByClause = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectOrderByClause(this);
        }
    }
    
    public partial class AstForClause : AstRule
    {
        
        public AstForClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitForClause(this);
        }
    }
    
    public partial class AstXmlCommonDirectives : AstRule
    {
        
        public AstXmlCommonDirectives(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlCommonDirectives(this);
        }
    }
    
    public partial class AstOrderByExpression : AstRule
    {
        
        public AstOrderByExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOrderByExpression(this);
        }
    }
    
    public partial class AstGroupingSetsItem : AstRule
    {
        
        public AstGroupingSetsItem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupingSetsItem(this);
        }
    }
    
    public partial class AstGroupingSetsList : AstRule
    {
        
        public AstGroupingSetsList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupingSetsList(this);
        }
    }
    
    public partial class AstOptionClause : AstRule
    {
        
        private AstOption _option;
        
        public AstOptionClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOption>())
                {
                    this.Option = ((AstOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOption Option
        {
            get
            {
                return this._option;
            }
            set
            {
                this._option = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOptionClause(this);
        }
    }
    
    public partial class AstOption : AstRule
    {
        
        public AstOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOption(this);
        }
    }
    
    public partial class AstOptimizeForArgs : AstRule
    {
        
        private AstOptimizeForArg _optimizeForArg;
        
        public AstOptimizeForArgs(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOptimizeForArg>())
                {
                    this.OptimizeForArg = ((AstOptimizeForArg)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOptimizeForArg OptimizeForArg
        {
            get
            {
                return this._optimizeForArg;
            }
            set
            {
                this._optimizeForArg = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOptimizeForArgs(this);
        }
    }
    
    public partial class AstOptimizeForArg : AstRule
    {
        
        public AstOptimizeForArg(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOptimizeForArg(this);
        }
    }
    
    public partial class AstSelectList : AstRule
    {
        
        public AstSelectList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectList(this);
        }
    }
    
    public partial class AstUdtMethodArguments : AstRule
    {
        
        public AstUdtMethodArguments(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUdtMethodArguments(this);
        }
    }
    
    public partial class AstAsterisk : AstRule
    {
        
        public AstAsterisk(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsterisk(this);
        }
    }
    
    public partial class AstColumnElem : AstRule
    {
        
        private AstColumnElemTarget _columnElemTarget;
        
        private AstAsColumnAlias _asColumnAlias;
        
        public AstColumnElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnElemTarget>())
                {
                    this.ColumnElemTarget = ((AstColumnElemTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsColumnAlias>())
                {
                    this.AsColumnAlias = ((AstAsColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnElemTarget ColumnElemTarget
        {
            get
            {
                return this._columnElemTarget;
            }
            set
            {
                this._columnElemTarget = value;
            }
        }
        
        public virtual AstAsColumnAlias AsColumnAlias
        {
            get
            {
                return this._asColumnAlias;
            }
            set
            {
                this._asColumnAlias = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnElem(this);
        }
    }
    
    public partial class AstColumnElemTarget : AstRule
    {
        
        public AstColumnElemTarget(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnElemTarget(this);
        }
    }
    
    public partial class AstUdtElem : AstRule
    {
        
        public AstUdtElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUdtElem(this);
        }
    }
    
    public partial class AstExpressionElem : AstRule
    {
        
        public AstExpressionElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressionElem(this);
        }
    }
    
    public partial class AstExpressionAssignElem : AstRule
    {
        
        private AstExpression _expression;
        
        public AstExpressionAssignElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this.Expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
            set
            {
                this._expression = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressionAssignElem(this);
        }
    }
    
    public partial class AstTableSources : AstRule
    {
        
        public AstTableSources(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableSources(this);
        }
    }
    
    public partial class AstTableSource : AstRule
    {
        
        public AstTableSource(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableSource(this);
        }
    }
    
    public partial class AstTableSourceItemJoined : AstRule
    {
        
        public AstTableSourceItemJoined(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableSourceItemJoined(this);
        }
    }
    
    public partial class AstTableSourceItem : AstRule
    {
        
        public AstTableSourceItem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableSourceItem(this);
        }
    }
    
    public partial class AstExpression2 : AstRule
    {
        
        private AstExpression _expression;
        
        public AstExpression2(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this.Expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
            set
            {
                this._expression = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpression2(this);
        }
    }
    
    public partial class AstOpenXml : AstRule
    {
        
        private AstExpression _expression;
        
        private AstExpression2 _expression2;
        
        private AstAsTableAlias _asTableAlias;
        
        public AstOpenXml(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this.Expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this.Expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this.AsTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
            set
            {
                this._expression = value;
            }
        }
        
        public virtual AstExpression2 Expression2
        {
            get
            {
                return this._expression2;
            }
            set
            {
                this._expression2 = value;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
            set
            {
                this._asTableAlias = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenXml(this);
        }
    }
    
    public partial class AstOpenJson : AstRule
    {
        
        private AstExpression2 _expression2;
        
        private AstAsTableAlias _asTableAlias;
        
        public AstOpenJson(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this.Expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this.AsTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression2 Expression2
        {
            get
            {
                return this._expression2;
            }
            set
            {
                this._expression2 = value;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
            set
            {
                this._asTableAlias = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenJson(this);
        }
    }
    
    public partial class AstJsonDeclaration : AstRule
    {
        
        public AstJsonDeclaration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitJsonDeclaration(this);
        }
    }
    
    public partial class AstJsonColumnDeclaration : AstRule
    {
        
        private AstColumnDeclaration _columnDeclaration;
        
        public AstJsonColumnDeclaration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDeclaration>())
                {
                    this.ColumnDeclaration = ((AstColumnDeclaration)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnDeclaration ColumnDeclaration
        {
            get
            {
                return this._columnDeclaration;
            }
            set
            {
                this._columnDeclaration = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitJsonColumnDeclaration(this);
        }
    }
    
    public partial class AstSchemaDeclaration : AstRule
    {
        
        public AstSchemaDeclaration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaDeclaration(this);
        }
    }
    
    public partial class AstColumnDeclaration : AstRule
    {
        
        private AstId _id;
        
        private AstDataType _dataType;
        
        public AstColumnDeclaration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this.DataType = ((AstDataType)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
            set
            {
                this._dataType = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDeclaration(this);
        }
    }
    
    public partial class AstChangeTableChanges : AstRule
    {
        
        public AstChangeTableChanges(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTableChanges(this);
        }
    }
    
    public partial class AstChangeTableVersion : AstRule
    {
        
        public AstChangeTableVersion(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTableVersion(this);
        }
    }
    
    public partial class AstJoinOn : AstRule
    {
        
        public AstJoinOn(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitJoinOn(this);
        }
    }
    
    public partial class AstCrossJoin : AstRule
    {
        
        private AstTableSource _tableSource;
        
        public AstCrossJoin(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableSource>())
                {
                    this.TableSource = ((AstTableSource)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableSource TableSource
        {
            get
            {
                return this._tableSource;
            }
            set
            {
                this._tableSource = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCrossJoin(this);
        }
    }
    
    public partial class AstApply : AstRule
    {
        
        public AstApply(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitApply(this);
        }
    }
    
    public partial class AstPivot : AstRule
    {
        
        private AstPivotClause _pivotClause;
        
        private AstAsTableAlias _asTableAlias;
        
        public AstPivot(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPivotClause>())
                {
                    this.PivotClause = ((AstPivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this.AsTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPivotClause PivotClause
        {
            get
            {
                return this._pivotClause;
            }
            set
            {
                this._pivotClause = value;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
            set
            {
                this._asTableAlias = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPivot(this);
        }
    }
    
    public partial class AstUnpivot : AstRule
    {
        
        private AstUnpivotClause _unpivotClause;
        
        private AstAsTableAlias _asTableAlias;
        
        public AstUnpivot(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUnpivotClause>())
                {
                    this.UnpivotClause = ((AstUnpivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this.AsTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUnpivotClause UnpivotClause
        {
            get
            {
                return this._unpivotClause;
            }
            set
            {
                this._unpivotClause = value;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
            set
            {
                this._asTableAlias = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnpivot(this);
        }
    }
    
    public partial class AstPivotClause : AstRule
    {
        
        private AstAggregateWindowedFunction _aggregateWindowedFunction;
        
        private AstFullColumnName _fullColumnName;
        
        private AstColumnAliasList _columnAliasList;
        
        public AstPivotClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAggregateWindowedFunction>())
                {
                    this.AggregateWindowedFunction = ((AstAggregateWindowedFunction)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this.FullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnAliasList>())
                {
                    this.ColumnAliasList = ((AstColumnAliasList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAggregateWindowedFunction AggregateWindowedFunction
        {
            get
            {
                return this._aggregateWindowedFunction;
            }
            set
            {
                this._aggregateWindowedFunction = value;
            }
        }
        
        public virtual AstFullColumnName FullColumnName
        {
            get
            {
                return this._fullColumnName;
            }
            set
            {
                this._fullColumnName = value;
            }
        }
        
        public virtual AstColumnAliasList ColumnAliasList
        {
            get
            {
                return this._columnAliasList;
            }
            set
            {
                this._columnAliasList = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPivotClause(this);
        }
    }
    
    public partial class AstUnpivotClause : AstRule
    {
        
        private AstFullColumnName _fullColumnName;
        
        private AstFullColumnNameList _fullColumnNameList;
        
        public AstUnpivotClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this.FullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnNameList>())
                {
                    this.FullColumnNameList = ((AstFullColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullColumnName FullColumnName
        {
            get
            {
                return this._fullColumnName;
            }
            set
            {
                this._fullColumnName = value;
            }
        }
        
        public virtual AstFullColumnNameList FullColumnNameList
        {
            get
            {
                return this._fullColumnNameList;
            }
            set
            {
                this._fullColumnNameList = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnpivotClause(this);
        }
    }
    
    public partial class AstFullColumnNameList : AstRule
    {
        
        public AstFullColumnNameList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullColumnNameList(this);
        }
    }
    
    public partial class AstRowsetFunction : AstRule
    {
        
        public AstRowsetFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRowsetFunction(this);
        }
    }
    
    public partial class AstBulkOptions : AstRule
    {
        
        private AstBulkOption _bulkOption;
        
        public AstBulkOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBulkOption>())
                {
                    this.BulkOption = ((AstBulkOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBulkOption BulkOption
        {
            get
            {
                return this._bulkOption;
            }
            set
            {
                this._bulkOption = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBulkOptions(this);
        }
    }
    
    public partial class AstBulkOption : AstRule
    {
        
        private AstId _id;
        
        public AstBulkOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBulkOption(this);
        }
    }
    
    public partial class AstDerivedTable : AstRule
    {
        
        public AstDerivedTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDerivedTable(this);
        }
    }
    
    public partial class AstFunctionCall : AstRule
    {
        
        public AstFunctionCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFunctionCall(this);
        }
    }
    
    public partial class AstPartitionFunction : AstRule
    {
        
        private AstFunctionName _functionName;
        
        private AstExpression _expression;
        
        public AstPartitionFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionName>())
                {
                    this.FunctionName = ((AstFunctionName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this.Expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFunctionName FunctionName
        {
            get
            {
                return this._functionName;
            }
            set
            {
                this._functionName = value;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
            set
            {
                this._expression = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionFunction(this);
        }
    }
    
    public partial class AstFreetextFunction : AstRule
    {
        
        public AstFreetextFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFreetextFunction(this);
        }
    }
    
    public partial class AstFreetextPredicate : AstRule
    {
        
        public AstFreetextPredicate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFreetextPredicate(this);
        }
    }
    
    public partial class AstExpressionLanguage : AstRule
    {
        
        private AstExpression _expression;
        
        public AstExpressionLanguage(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this.Expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
            set
            {
                this._expression = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressionLanguage(this);
        }
    }
    
    public partial class AstFreetextTableAndcolumnNames : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstFreetextTableAndcolumnNames(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this.TableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                this._tableName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFreetextTableAndcolumnNames(this);
        }
    }
    
    public partial class AstFullColumnNames : AstRule
    {
        
        private AstFullColumnName _fullColumnName;
        
        public AstFullColumnNames(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this.FullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullColumnName FullColumnName
        {
            get
            {
                return this._fullColumnName;
            }
            set
            {
                this._fullColumnName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullColumnNames(this);
        }
    }
    
    public partial class AstBuiltInFunctions : AstRule
    {
        
        public AstBuiltInFunctions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBuiltInFunctions(this);
        }
    }
    
    public partial class AstExpressions : AstRule
    {
        
        private AstExpression _expression;
        
        public AstExpressions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this.Expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
            set
            {
                this._expression = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressions(this);
        }
    }
    
    public partial class AstValueMethod : AstRule
    {
        
        public AstValueMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitValueMethod(this);
        }
    }
    
    public partial class AstValueCall : AstRule
    {
        
        public AstValueCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitValueCall(this);
        }
    }
    
    public partial class AstQueryMethod : AstRule
    {
        
        public AstQueryMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueryMethod(this);
        }
    }
    
    public partial class AstQueryCall : AstRule
    {
        
        public AstQueryCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueryCall(this);
        }
    }
    
    public partial class AstExistMethod : AstRule
    {
        
        public AstExistMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExistMethod(this);
        }
    }
    
    public partial class AstExistCall : AstRule
    {
        
        public AstExistCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExistCall(this);
        }
    }
    
    public partial class AstModifyMethod : AstRule
    {
        
        public AstModifyMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModifyMethod(this);
        }
    }
    
    public partial class AstModifyCall : AstRule
    {
        
        public AstModifyCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModifyCall(this);
        }
    }
    
    public partial class AstHierarchyidCall : AstRule
    {
        
        public AstHierarchyidCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitHierarchyidCall(this);
        }
    }
    
    public partial class AstHierarchyidStaticMethod : AstRule
    {
        
        public AstHierarchyidStaticMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitHierarchyidStaticMethod(this);
        }
    }
    
    public partial class AstNodesMethod : AstRule
    {
        
        public AstNodesMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNodesMethod(this);
        }
    }
    
    public partial class AstSwitchSection : AstRule
    {
        
        private AstExpression _expression;
        
        public AstSwitchSection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this.Expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this.Expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
            set
            {
                this._expression = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSwitchSection(this);
        }
    }
    
    public partial class AstSwitchSearchConditionSection : AstRule
    {
        
        private AstSearchCondition _searchCondition;
        
        private AstExpression _expression;
        
        public AstSwitchSearchConditionSection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this.SearchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this.Expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
            set
            {
                this._searchCondition = value;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
            set
            {
                this._expression = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSwitchSearchConditionSection(this);
        }
    }
    
    public partial class AstAsColumnAlias : AstRule
    {
        
        private AstColumnAlias _columnAlias;
        
        public AstAsColumnAlias(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnAlias>())
                {
                    this.ColumnAlias = ((AstColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnAlias ColumnAlias
        {
            get
            {
                return this._columnAlias;
            }
            set
            {
                this._columnAlias = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsColumnAlias(this);
        }
    }
    
    public partial class AstAsTableAlias : AstRule
    {
        
        private AstTableAlias _tableAlias;
        
        public AstAsTableAlias(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableAlias>())
                {
                    this.TableAlias = ((AstTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableAlias TableAlias
        {
            get
            {
                return this._tableAlias;
            }
            set
            {
                this._tableAlias = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsTableAlias(this);
        }
    }
    
    public partial class AstTableAlias : AstRule
    {
        
        private AstId _id;
        
        public AstTableAlias(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableAlias(this);
        }
    }
    
    public partial class AstWithTableHints : AstRule
    {
        
        public AstWithTableHints(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWithTableHints(this);
        }
    }
    
    public partial class AstDeprecatedTableHint : AstRule
    {
        
        private AstTableHint _tableHint;
        
        public AstDeprecatedTableHint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableHint>())
                {
                    this.TableHint = ((AstTableHint)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableHint TableHint
        {
            get
            {
                return this._tableHint;
            }
            set
            {
                this._tableHint = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeprecatedTableHint(this);
        }
    }
    
    public partial class AstSybaseLegacyHints : AstRule
    {
        
        private AstSybaseLegacyHint _sybaseLegacyHint;
        
        public AstSybaseLegacyHints(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSybaseLegacyHint>())
                {
                    this.SybaseLegacyHint = ((AstSybaseLegacyHint)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSybaseLegacyHint SybaseLegacyHint
        {
            get
            {
                return this._sybaseLegacyHint;
            }
            set
            {
                this._sybaseLegacyHint = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSybaseLegacyHints(this);
        }
    }
    
    public partial class AstSybaseLegacyHint : AstTerminalEnum<AstSybaseLegacyHintEnum>
    {
        
        public AstSybaseLegacyHint(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSybaseLegacyHint(this);
        }
        
        protected override AstSybaseLegacyHintEnum GetValue(string value)
        {
            if ((value == "HOLDLOCK"))
            {
                return AstSybaseLegacyHintEnum.Holdlock;
            }
            if ((value == "NOHOLDLOCK"))
            {
                return AstSybaseLegacyHintEnum.Noholdlock;
            }
            if ((value == "READPAST"))
            {
                return AstSybaseLegacyHintEnum.Readpast;
            }
            if ((value == "SHARED"))
            {
                return AstSybaseLegacyHintEnum.Shared;
            }
            return AstSybaseLegacyHintEnum._undefined;
        }
    }
    
    public partial class AstIndexValues : AstRule
    {
        
        private AstIndexValue _indexValue;
        
        public AstIndexValues(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexValue>())
                {
                    this.IndexValue = ((AstIndexValue)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexValue IndexValue
        {
            get
            {
                return this._indexValue;
            }
            set
            {
                this._indexValue = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIndexValues(this);
        }
    }
    
    public partial class AstTableHint : AstRule
    {
        
        public AstTableHint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableHint(this);
        }
    }
    
    public partial class AstIndexValue : AstRule
    {
        
        public AstIndexValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIndexValue(this);
        }
    }
    
    public partial class AstColumnAliasList : AstRule
    {
        
        public AstColumnAliasList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnAliasList(this);
        }
    }
    
    public partial class AstColumnAlias : AstRule
    {
        
        public AstColumnAlias(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnAlias(this);
        }
    }
    
    public partial class AstTableValueConstructor : AstRule
    {
        
        public AstTableValueConstructor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableValueConstructor(this);
        }
    }
    
    public partial class AstExpressionList : AstRule
    {
        
        public AstExpressionList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressionList(this);
        }
    }
    
    public partial class AstRankingWindowedFunction : AstRule
    {
        
        public AstRankingWindowedFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRankingWindowedFunction(this);
        }
    }
    
    public partial class AstAggregateWindowedFunction : AstRule
    {
        
        public AstAggregateWindowedFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAggregateWindowedFunction(this);
        }
    }
    
    public partial class AstAnalyticWindowedFunction : AstRule
    {
        
        public AstAnalyticWindowedFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAnalyticWindowedFunction(this);
        }
    }
    
    public partial class AstAllDistinctExpression : AstRule
    {
        
        private AstExpression _expression;
        
        public AstAllDistinctExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this.Expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
            set
            {
                this._expression = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAllDistinctExpression(this);
        }
    }
    
    public partial class AstOverClause : AstRule
    {
        
        private AstOrderByClause _orderByClause;
        
        private AstRowOrRangeClause _rowOrRangeClause;
        
        public AstOverClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOrderByClause>())
                {
                    this.OrderByClause = ((AstOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowOrRangeClause>())
                {
                    this.RowOrRangeClause = ((AstRowOrRangeClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOrderByClause OrderByClause
        {
            get
            {
                return this._orderByClause;
            }
            set
            {
                this._orderByClause = value;
            }
        }
        
        public virtual AstRowOrRangeClause RowOrRangeClause
        {
            get
            {
                return this._rowOrRangeClause;
            }
            set
            {
                this._rowOrRangeClause = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOverClause(this);
        }
    }
    
    public partial class AstRowOrRangeClause : AstRule
    {
        
        private AstWindowFrameExtent _windowFrameExtent;
        
        public AstRowOrRangeClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWindowFrameExtent>())
                {
                    this.WindowFrameExtent = ((AstWindowFrameExtent)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWindowFrameExtent WindowFrameExtent
        {
            get
            {
                return this._windowFrameExtent;
            }
            set
            {
                this._windowFrameExtent = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRowOrRangeClause(this);
        }
    }
    
    public partial class AstWindowFrameExtent : AstRule
    {
        
        public AstWindowFrameExtent(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWindowFrameExtent(this);
        }
    }
    
    public partial class AstWindowFramePreceding : AstRule
    {
        
        public AstWindowFramePreceding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWindowFramePreceding(this);
        }
    }
    
    public partial class AstWindowFrameFollowing : AstRule
    {
        
        public AstWindowFrameFollowing(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWindowFrameFollowing(this);
        }
    }
    
    public partial class AstCreateDatabaseOption : AstRule
    {
        
        public AstCreateDatabaseOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateDatabaseOption(this);
        }
    }
    
    public partial class AstDatabaseFilestreamOptions : AstRule
    {
        
        private AstDatabaseFilestreamOption _databaseFilestreamOption;
        
        public AstDatabaseFilestreamOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseFilestreamOption>())
                {
                    this.DatabaseFilestreamOption = ((AstDatabaseFilestreamOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseFilestreamOption DatabaseFilestreamOption
        {
            get
            {
                return this._databaseFilestreamOption;
            }
            set
            {
                this._databaseFilestreamOption = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseFilestreamOptions(this);
        }
    }
    
    public partial class AstDatabaseFilestreamOption : AstRule
    {
        
        public AstDatabaseFilestreamOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseFilestreamOption(this);
        }
    }
    
    public partial class AstFileGroup : AstRule
    {
        
        private AstId _id;
        
        private AstFileSpec _fileSpec;
        
        public AstFileGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpec>())
                {
                    this.FileSpec = ((AstFileSpec)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public virtual AstFileSpec FileSpec
        {
            get
            {
                return this._fileSpec;
            }
            set
            {
                this._fileSpec = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileGroup(this);
        }
    }
    
    public partial class AstFileSpec : AstRule
    {
        
        private AstIdOrString _idOrString;
        
        public AstFileSpec(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIdOrString>())
                {
                    this.IdOrString = ((AstIdOrString)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIdOrString IdOrString
        {
            get
            {
                return this._idOrString;
            }
            set
            {
                this._idOrString = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileSpec(this);
        }
    }
    
    public partial class AstEntityName : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstEntityName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this.TableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                this._tableName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEntityName(this);
        }
    }
    
    public partial class AstEntityNameForAzureDw : AstRule
    {
        
        public AstEntityNameForAzureDw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEntityNameForAzureDw(this);
        }
    }
    
    public partial class AstEntityNameForParallelDw : AstRule
    {
        
        public AstEntityNameForParallelDw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEntityNameForParallelDw(this);
        }
    }
    
    public partial class AstFullTableName : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstFullTableName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this.TableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                this._tableName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullTableName(this);
        }
    }
    
    public partial class AstTableName : AstRule
    {
        
        public AstTableName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableName(this);
        }
    }
    
    public partial class AstSimpleName : AstRule
    {
        
        public AstSimpleName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSimpleName(this);
        }
    }
    
    public partial class AstFuncProcNameSchema : AstRule
    {
        
        private AstFunctionName _functionName;
        
        public AstFuncProcNameSchema(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionName>())
                {
                    this.FunctionName = ((AstFunctionName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFunctionName FunctionName
        {
            get
            {
                return this._functionName;
            }
            set
            {
                this._functionName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncProcNameSchema(this);
        }
    }
    
    public partial class AstFuncProcNameDatabaseSchema : AstRule
    {
        
        public AstFuncProcNameDatabaseSchema(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncProcNameDatabaseSchema(this);
        }
    }
    
    public partial class AstFuncProcNameServerDatabaseSchema : AstRule
    {
        
        public AstFuncProcNameServerDatabaseSchema(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncProcNameServerDatabaseSchema(this);
        }
    }
    
    public partial class AstDdlObject : AstRule
    {
        
        public AstDdlObject(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDdlObject(this);
        }
    }
    
    public partial class AstFullColumnName : AstRule
    {
        
        public AstFullColumnName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullColumnName(this);
        }
    }
    
    public partial class AstColumnNameListWithOrder : AstRule
    {
        
        private AstId _id;
        
        public AstColumnNameListWithOrder(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnNameListWithOrder(this);
        }
    }
    
    public partial class AstInsertColumnNameList : AstRule
    {
        
        public AstInsertColumnNameList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitInsertColumnNameList(this);
        }
    }
    
    public partial class AstInsertColumnId : AstRule
    {
        
        private AstId _id;
        
        public AstInsertColumnId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitInsertColumnId(this);
        }
    }
    
    public partial class AstColumnNameList : AstRule
    {
        
        public AstColumnNameList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnNameList(this);
        }
    }
    
    public partial class AstCursorName : AstRule
    {
        
        public AstCursorName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCursorName(this);
        }
    }
    
    public partial class AstOnOff : AstTerminalEnum<AstOnOffEnum>
    {
        
        public AstOnOff(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnOff(this);
        }
        
        protected override AstOnOffEnum GetValue(string value)
        {
            if ((value == "ON"))
            {
                return AstOnOffEnum.On;
            }
            if ((value == "OFF"))
            {
                return AstOnOffEnum.Off;
            }
            return AstOnOffEnum._undefined;
        }
    }
    
    public partial class AstClustered : AstTerminalEnum<AstClusteredEnum>
    {
        
        public AstClustered(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClustered(this);
        }
        
        protected override AstClusteredEnum GetValue(string value)
        {
            if ((value == "CLUSTERED"))
            {
                return AstClusteredEnum.Clustered;
            }
            if ((value == "NONCLUSTERED"))
            {
                return AstClusteredEnum.Nonclustered;
            }
            return AstClusteredEnum._undefined;
        }
    }
    
    public partial class AstNullNotnull : AstRule
    {
        
        public AstNullNotnull(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNullNotnull(this);
        }
    }
    
    public partial class AstNullOrDefault : AstRule
    {
        
        public AstNullOrDefault(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNullOrDefault(this);
        }
    }
    
    public partial class AstScalarFunctionName : AstRule
    {
        
        public AstScalarFunctionName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitScalarFunctionName(this);
        }
    }
    
    public partial class AstBeginConversationTimer : AstRule
    {
        
        private AstTime _time;
        
        public AstBeginConversationTimer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTime>())
                {
                    this.Time = ((AstTime)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTime Time
        {
            get
            {
                return this._time;
            }
            set
            {
                this._time = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBeginConversationTimer(this);
        }
    }
    
    public partial class AstBeginConversationDialog : AstRule
    {
        
        private AstContractName _contractName;
        
        public AstBeginConversationDialog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContractName>())
                {
                    this.ContractName = ((AstContractName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstContractName ContractName
        {
            get
            {
                return this._contractName;
            }
            set
            {
                this._contractName = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBeginConversationDialog(this);
        }
    }
    
    public partial class AstContractName : AstRule
    {
        
        public AstContractName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContractName(this);
        }
    }
    
    public partial class AstServiceName : AstRule
    {
        
        public AstServiceName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServiceName(this);
        }
    }
    
    public partial class AstEndConversation : AstRule
    {
        
        public AstEndConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEndConversation(this);
        }
    }
    
    public partial class AstWaitforConversation : AstRule
    {
        
        private AstGetConversation _getConversation;
        
        public AstWaitforConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGetConversation>())
                {
                    this.GetConversation = ((AstGetConversation)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGetConversation GetConversation
        {
            get
            {
                return this._getConversation;
            }
            set
            {
                this._getConversation = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWaitforConversation(this);
        }
    }
    
    public partial class AstGetConversation : AstRule
    {
        
        public AstGetConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGetConversation(this);
        }
    }
    
    public partial class AstQueueId : AstRule
    {
        
        public AstQueueId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueId(this);
        }
    }
    
    public partial class AstSendConversation : AstRule
    {
        
        public AstSendConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSendConversation(this);
        }
    }
    
    public partial class AstDataType : AstRule
    {
        
        public AstDataType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDataType(this);
        }
    }
    
    public partial class AstDefaultValue : AstRule
    {
        
        public AstDefaultValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDefaultValue(this);
        }
    }
    
    public partial class AstConstant : AstRule
    {
        
        public AstConstant(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConstant(this);
        }
    }
    
    public partial class AstSign : AstRule
    {
        
        public AstSign(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSign(this);
        }
    }
    
    public partial class AstKeyword : AstTerminalEnum<AstKeywordEnum>
    {
        
        public AstKeyword(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKeyword(this);
        }
        
        protected override AstKeywordEnum GetValue(string value)
        {
            if ((value == "ABORT"))
            {
                return AstKeywordEnum.Abort;
            }
            if ((value == "ABSOLUTE"))
            {
                return AstKeywordEnum.Absolute;
            }
            if ((value == "ACCENT_SENSITIVITY"))
            {
                return AstKeywordEnum.AccentSensitivity;
            }
            if ((value == "ACCESS"))
            {
                return AstKeywordEnum.Access;
            }
            if ((value == "ACTION"))
            {
                return AstKeywordEnum.Action;
            }
            if ((value == "ACTIVATION"))
            {
                return AstKeywordEnum.Activation;
            }
            if ((value == "ACTIVE"))
            {
                return AstKeywordEnum.Active;
            }
            if ((value == "ADD"))
            {
                return AstKeywordEnum.Add;
            }
            if ((value == "ADDRESS"))
            {
                return AstKeywordEnum.Address;
            }
            if ((value == "AES_128"))
            {
                return AstKeywordEnum.Aes128;
            }
            if ((value == "AES_192"))
            {
                return AstKeywordEnum.Aes192;
            }
            if ((value == "AES_256"))
            {
                return AstKeywordEnum.Aes256;
            }
            if ((value == "AFFINITY"))
            {
                return AstKeywordEnum.Affinity;
            }
            if ((value == "AFTER"))
            {
                return AstKeywordEnum.After;
            }
            if ((value == "AGGREGATE"))
            {
                return AstKeywordEnum.Aggregate;
            }
            if ((value == "ALGORITHM"))
            {
                return AstKeywordEnum.Algorithm;
            }
            if ((value == "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS"))
            {
                return AstKeywordEnum.AllowEncryptedValueModifications;
            }
            if ((value == "ALLOW_PAGE_LOCKS"))
            {
                return AstKeywordEnum.AllowPageLocks;
            }
            if ((value == "ALLOW_ROW_LOCKS"))
            {
                return AstKeywordEnum.AllowRowLocks;
            }
            if ((value == "ALLOW_SNAPSHOT_ISOLATION"))
            {
                return AstKeywordEnum.AllowSnapshotIsolation;
            }
            if ((value == "ALLOWED"))
            {
                return AstKeywordEnum.Allowed;
            }
            if ((value == "ALWAYS"))
            {
                return AstKeywordEnum.Always;
            }
            if ((value == "ANSI_DEFAULTS"))
            {
                return AstKeywordEnum.AnsiDefaults;
            }
            if ((value == "ANSI_NULL_DEFAULT"))
            {
                return AstKeywordEnum.AnsiNullDefault;
            }
            if ((value == "ANSI_NULL_DFLT_OFF"))
            {
                return AstKeywordEnum.AnsiNullDfltOff;
            }
            if ((value == "ANSI_NULL_DFLT_ON"))
            {
                return AstKeywordEnum.AnsiNullDfltOn;
            }
            if ((value == "ANSI_NULLS"))
            {
                return AstKeywordEnum.AnsiNulls;
            }
            if ((value == "ANSI_PADDING"))
            {
                return AstKeywordEnum.AnsiPadding;
            }
            if ((value == "ANSI_WARNINGS"))
            {
                return AstKeywordEnum.AnsiWarnings;
            }
            if ((value == "APP_NAME"))
            {
                return AstKeywordEnum.AppName;
            }
            if ((value == "APPLICATION_LOG"))
            {
                return AstKeywordEnum.ApplicationLog;
            }
            if ((value == "APPLOCK_MODE"))
            {
                return AstKeywordEnum.ApplockMode;
            }
            if ((value == "APPLOCK_TEST"))
            {
                return AstKeywordEnum.ApplockTest;
            }
            if ((value == "APPLY"))
            {
                return AstKeywordEnum.Apply;
            }
            if ((value == "ARITHABORT"))
            {
                return AstKeywordEnum.Arithabort;
            }
            if ((value == "ARITHIGNORE"))
            {
                return AstKeywordEnum.Arithignore;
            }
            if ((value == "ASCII"))
            {
                return AstKeywordEnum.Ascii;
            }
            if ((value == "ASSEMBLY"))
            {
                return AstKeywordEnum.Assembly;
            }
            if ((value == "ASSEMBLYPROPERTY"))
            {
                return AstKeywordEnum.Assemblyproperty;
            }
            if ((value == "AT_KEYWORD"))
            {
                return AstKeywordEnum.AtKeyword;
            }
            if ((value == "AUDIT"))
            {
                return AstKeywordEnum.Audit;
            }
            if ((value == "AUDIT_GUID"))
            {
                return AstKeywordEnum.AuditGuid;
            }
            if ((value == "AUTO"))
            {
                return AstKeywordEnum.Auto;
            }
            if ((value == "AUTO_CLEANUP"))
            {
                return AstKeywordEnum.AutoCleanup;
            }
            if ((value == "AUTO_CLOSE"))
            {
                return AstKeywordEnum.AutoClose;
            }
            if ((value == "AUTO_CREATE_STATISTICS"))
            {
                return AstKeywordEnum.AutoCreateStatistics;
            }
            if ((value == "AUTO_DROP"))
            {
                return AstKeywordEnum.AutoDrop;
            }
            if ((value == "AUTO_SHRINK"))
            {
                return AstKeywordEnum.AutoShrink;
            }
            if ((value == "AUTO_UPDATE_STATISTICS"))
            {
                return AstKeywordEnum.AutoUpdateStatistics;
            }
            if ((value == "AUTO_UPDATE_STATISTICS_ASYNC"))
            {
                return AstKeywordEnum.AutoUpdateStatisticsAsync;
            }
            if ((value == "AUTOGROW_ALL_FILES"))
            {
                return AstKeywordEnum.AutogrowAllFiles;
            }
            if ((value == "AUTOGROW_SINGLE_FILE"))
            {
                return AstKeywordEnum.AutogrowSingleFile;
            }
            if ((value == "AVAILABILITY"))
            {
                return AstKeywordEnum.Availability;
            }
            if ((value == "AVG"))
            {
                return AstKeywordEnum.Avg;
            }
            if ((value == "BACKUP_PRIORITY"))
            {
                return AstKeywordEnum.BackupPriority;
            }
            if ((value == "BASE64"))
            {
                return AstKeywordEnum.Base64;
            }
            if ((value == "BEGIN_DIALOG"))
            {
                return AstKeywordEnum.BeginDialog;
            }
            if ((value == "BIGINT"))
            {
                return AstKeywordEnum.Bigint;
            }
            if ((value == "BINARY_KEYWORD"))
            {
                return AstKeywordEnum.BinaryKeyword;
            }
            if ((value == "BINARY_CHECKSUM"))
            {
                return AstKeywordEnum.BinaryChecksum;
            }
            if ((value == "BINDING"))
            {
                return AstKeywordEnum.Binding;
            }
            if ((value == "BLOB_STORAGE"))
            {
                return AstKeywordEnum.BlobStorage;
            }
            if ((value == "BROKER"))
            {
                return AstKeywordEnum.Broker;
            }
            if ((value == "BROKER_INSTANCE"))
            {
                return AstKeywordEnum.BrokerInstance;
            }
            if ((value == "BULK_LOGGED"))
            {
                return AstKeywordEnum.BulkLogged;
            }
            if ((value == "CALLER"))
            {
                return AstKeywordEnum.Caller;
            }
            if ((value == "CAP_CPU_PERCENT"))
            {
                return AstKeywordEnum.CapCpuPercent;
            }
            if ((value == "CAST"))
            {
                return AstKeywordEnum.Cast;
            }
            if ((value == "TRY_CAST"))
            {
                return AstKeywordEnum.TryCast;
            }
            if ((value == "CATALOG"))
            {
                return AstKeywordEnum.Catalog;
            }
            if ((value == "CATCH"))
            {
                return AstKeywordEnum.Catch;
            }
            if ((value == "CHANGE"))
            {
                return AstKeywordEnum.Change;
            }
            if ((value == "CHANGE_RETENTION"))
            {
                return AstKeywordEnum.ChangeRetention;
            }
            if ((value == "CHANGE_TRACKING"))
            {
                return AstKeywordEnum.ChangeTracking;
            }
            if ((value == "CHAR"))
            {
                return AstKeywordEnum.Char;
            }
            if ((value == "CHARINDEX"))
            {
                return AstKeywordEnum.Charindex;
            }
            if ((value == "CHECKSUM"))
            {
                return AstKeywordEnum.Checksum;
            }
            if ((value == "CHECKSUM_AGG"))
            {
                return AstKeywordEnum.ChecksumAgg;
            }
            if ((value == "CLEANUP"))
            {
                return AstKeywordEnum.Cleanup;
            }
            if ((value == "COL_LENGTH"))
            {
                return AstKeywordEnum.ColLength;
            }
            if ((value == "COL_NAME"))
            {
                return AstKeywordEnum.ColName;
            }
            if ((value == "COLLECTION"))
            {
                return AstKeywordEnum.Collection;
            }
            if ((value == "COLUMN_ENCRYPTION_KEY"))
            {
                return AstKeywordEnum.ColumnEncryptionKey;
            }
            if ((value == "COLUMN_MASTER_KEY"))
            {
                return AstKeywordEnum.ColumnMasterKey;
            }
            if ((value == "COLUMNPROPERTY"))
            {
                return AstKeywordEnum.Columnproperty;
            }
            if ((value == "COLUMNS"))
            {
                return AstKeywordEnum.Columns;
            }
            if ((value == "COLUMNSTORE"))
            {
                return AstKeywordEnum.Columnstore;
            }
            if ((value == "COLUMNSTORE_ARCHIVE"))
            {
                return AstKeywordEnum.ColumnstoreArchive;
            }
            if ((value == "COMMITTED"))
            {
                return AstKeywordEnum.Committed;
            }
            if ((value == "COMPATIBILITY_LEVEL"))
            {
                return AstKeywordEnum.CompatibilityLevel;
            }
            if ((value == "COMPRESS_ALL_ROW_GROUPS"))
            {
                return AstKeywordEnum.CompressAllRowGroups;
            }
            if ((value == "COMPRESSION_DELAY"))
            {
                return AstKeywordEnum.CompressionDelay;
            }
            if ((value == "CONCAT"))
            {
                return AstKeywordEnum.Concat;
            }
            if ((value == "CONCAT_WS"))
            {
                return AstKeywordEnum.ConcatWs;
            }
            if ((value == "CONCAT_NULL_YIELDS_NULL"))
            {
                return AstKeywordEnum.ConcatNullYieldsNull;
            }
            if ((value == "CONTENT"))
            {
                return AstKeywordEnum.Content;
            }
            if ((value == "CONTROL"))
            {
                return AstKeywordEnum.Control;
            }
            if ((value == "COOKIE"))
            {
                return AstKeywordEnum.Cookie;
            }
            if ((value == "COUNT"))
            {
                return AstKeywordEnum.Count;
            }
            if ((value == "COUNT_BIG"))
            {
                return AstKeywordEnum.CountBig;
            }
            if ((value == "COUNTER"))
            {
                return AstKeywordEnum.Counter;
            }
            if ((value == "CPU"))
            {
                return AstKeywordEnum.Cpu;
            }
            if ((value == "CREATE_NEW"))
            {
                return AstKeywordEnum.CreateNew;
            }
            if ((value == "CREATION_DISPOSITION"))
            {
                return AstKeywordEnum.CreationDisposition;
            }
            if ((value == "CREDENTIAL"))
            {
                return AstKeywordEnum.Credential;
            }
            if ((value == "CRYPTOGRAPHIC"))
            {
                return AstKeywordEnum.Cryptographic;
            }
            if ((value == "CUME_DIST"))
            {
                return AstKeywordEnum.CumeDist;
            }
            if ((value == "CURSOR_CLOSE_ON_COMMIT"))
            {
                return AstKeywordEnum.CursorCloseOnCommit;
            }
            if ((value == "CURSOR_DEFAULT"))
            {
                return AstKeywordEnum.CursorDefault;
            }
            if ((value == "DATA"))
            {
                return AstKeywordEnum.Data;
            }
            if ((value == "DATABASE_PRINCIPAL_ID"))
            {
                return AstKeywordEnum.DatabasePrincipalId;
            }
            if ((value == "DATABASEPROPERTYEX"))
            {
                return AstKeywordEnum.Databasepropertyex;
            }
            if ((value == "DATE_CORRELATION_OPTIMIZATION"))
            {
                return AstKeywordEnum.DateCorrelationOptimization;
            }
            if ((value == "DATEADD"))
            {
                return AstKeywordEnum.Dateadd;
            }
            if ((value == "DATEDIFF"))
            {
                return AstKeywordEnum.Datediff;
            }
            if ((value == "DATENAME"))
            {
                return AstKeywordEnum.Datename;
            }
            if ((value == "DATEPART"))
            {
                return AstKeywordEnum.Datepart;
            }
            if ((value == "DAYS"))
            {
                return AstKeywordEnum.Days;
            }
            if ((value == "DB_CHAINING"))
            {
                return AstKeywordEnum.DbChaining;
            }
            if ((value == "DB_FAILOVER"))
            {
                return AstKeywordEnum.DbFailover;
            }
            if ((value == "DB_ID"))
            {
                return AstKeywordEnum.DbId;
            }
            if ((value == "DB_NAME"))
            {
                return AstKeywordEnum.DbName;
            }
            if ((value == "DECRYPTION"))
            {
                return AstKeywordEnum.Decryption;
            }
            if ((value == "DEFAULT_DOUBLE_QUOTE"))
            {
                return AstKeywordEnum.DefaultDoubleQuote;
            }
            if ((value == "DEFAULT_FULLTEXT_LANGUAGE"))
            {
                return AstKeywordEnum.DefaultFulltextLanguage;
            }
            if ((value == "DEFAULT_LANGUAGE"))
            {
                return AstKeywordEnum.DefaultLanguage;
            }
            if ((value == "DEFINITION"))
            {
                return AstKeywordEnum.Definition;
            }
            if ((value == "DELAY"))
            {
                return AstKeywordEnum.Delay;
            }
            if ((value == "DELAYED_DURABILITY"))
            {
                return AstKeywordEnum.DelayedDurability;
            }
            if ((value == "DELETED"))
            {
                return AstKeywordEnum.Deleted;
            }
            if ((value == "DENSE_RANK"))
            {
                return AstKeywordEnum.DenseRank;
            }
            if ((value == "DEPENDENTS"))
            {
                return AstKeywordEnum.Dependents;
            }
            if ((value == "DES"))
            {
                return AstKeywordEnum.Des;
            }
            if ((value == "DESCRIPTION"))
            {
                return AstKeywordEnum.Description;
            }
            if ((value == "DESX"))
            {
                return AstKeywordEnum.Desx;
            }
            if ((value == "DETERMINISTIC"))
            {
                return AstKeywordEnum.Deterministic;
            }
            if ((value == "DHCP"))
            {
                return AstKeywordEnum.Dhcp;
            }
            if ((value == "DIALOG"))
            {
                return AstKeywordEnum.Dialog;
            }
            if ((value == "DIFFERENCE"))
            {
                return AstKeywordEnum.Difference;
            }
            if ((value == "DIRECTORY_NAME"))
            {
                return AstKeywordEnum.DirectoryName;
            }
            if ((value == "DISABLE"))
            {
                return AstKeywordEnum.Disable;
            }
            if ((value == "DISABLE_BROKER"))
            {
                return AstKeywordEnum.DisableBroker;
            }
            if ((value == "DISABLED"))
            {
                return AstKeywordEnum.Disabled;
            }
            if ((value == "DOCUMENT"))
            {
                return AstKeywordEnum.Document;
            }
            if ((value == "DROP_EXISTING"))
            {
                return AstKeywordEnum.DropExisting;
            }
            if ((value == "DYNAMIC"))
            {
                return AstKeywordEnum.Dynamic;
            }
            if ((value == "ELEMENTS"))
            {
                return AstKeywordEnum.Elements;
            }
            if ((value == "EMERGENCY"))
            {
                return AstKeywordEnum.Emergency;
            }
            if ((value == "EMPTY"))
            {
                return AstKeywordEnum.Empty;
            }
            if ((value == "ENABLE"))
            {
                return AstKeywordEnum.Enable;
            }
            if ((value == "ENABLE_BROKER"))
            {
                return AstKeywordEnum.EnableBroker;
            }
            if ((value == "ENCRYPTED"))
            {
                return AstKeywordEnum.Encrypted;
            }
            if ((value == "ENCRYPTED_VALUE"))
            {
                return AstKeywordEnum.EncryptedValue;
            }
            if ((value == "ENCRYPTION"))
            {
                return AstKeywordEnum.Encryption;
            }
            if ((value == "ENCRYPTION_TYPE"))
            {
                return AstKeywordEnum.EncryptionType;
            }
            if ((value == "ENDPOINT_URL"))
            {
                return AstKeywordEnum.EndpointUrl;
            }
            if ((value == "ERROR_BROKER_CONVERSATIONS"))
            {
                return AstKeywordEnum.ErrorBrokerConversations;
            }
            if ((value == "EXCLUSIVE"))
            {
                return AstKeywordEnum.Exclusive;
            }
            if ((value == "EXECUTABLE"))
            {
                return AstKeywordEnum.Executable;
            }
            if ((value == "EXIST"))
            {
                return AstKeywordEnum.Exist;
            }
            if ((value == "EXPAND"))
            {
                return AstKeywordEnum.Expand;
            }
            if ((value == "EXPIRY_DATE"))
            {
                return AstKeywordEnum.ExpiryDate;
            }
            if ((value == "EXPLICIT"))
            {
                return AstKeywordEnum.Explicit;
            }
            if ((value == "FAIL_OPERATION"))
            {
                return AstKeywordEnum.FailOperation;
            }
            if ((value == "FAILOVER_MODE"))
            {
                return AstKeywordEnum.FailoverMode;
            }
            if ((value == "FAILURE"))
            {
                return AstKeywordEnum.Failure;
            }
            if ((value == "FAILURE_CONDITION_LEVEL"))
            {
                return AstKeywordEnum.FailureConditionLevel;
            }
            if ((value == "FAST"))
            {
                return AstKeywordEnum.Fast;
            }
            if ((value == "FAST_FORWARD"))
            {
                return AstKeywordEnum.FastForward;
            }
            if ((value == "FILE_ID"))
            {
                return AstKeywordEnum.FileId;
            }
            if ((value == "FILE_IDEX"))
            {
                return AstKeywordEnum.FileIdex;
            }
            if ((value == "FILE_NAME"))
            {
                return AstKeywordEnum.FileName;
            }
            if ((value == "FILEGROUP"))
            {
                return AstKeywordEnum.Filegroup;
            }
            if ((value == "FILEGROUP_ID"))
            {
                return AstKeywordEnum.FilegroupId;
            }
            if ((value == "FILEGROUP_NAME"))
            {
                return AstKeywordEnum.FilegroupName;
            }
            if ((value == "FILEGROUPPROPERTY"))
            {
                return AstKeywordEnum.Filegroupproperty;
            }
            if ((value == "FILEGROWTH"))
            {
                return AstKeywordEnum.Filegrowth;
            }
            if ((value == "FILENAME"))
            {
                return AstKeywordEnum.Filename;
            }
            if ((value == "FILEPATH"))
            {
                return AstKeywordEnum.Filepath;
            }
            if ((value == "FILEPROPERTY"))
            {
                return AstKeywordEnum.Fileproperty;
            }
            if ((value == "FILEPROPERTYEX"))
            {
                return AstKeywordEnum.Filepropertyex;
            }
            if ((value == "FILESTREAM"))
            {
                return AstKeywordEnum.Filestream;
            }
            if ((value == "FILTER"))
            {
                return AstKeywordEnum.Filter;
            }
            if ((value == "FIRST"))
            {
                return AstKeywordEnum.First;
            }
            if ((value == "FIRST_VALUE"))
            {
                return AstKeywordEnum.FirstValue;
            }
            if ((value == "FMTONLY"))
            {
                return AstKeywordEnum.Fmtonly;
            }
            if ((value == "FOLLOWING"))
            {
                return AstKeywordEnum.Following;
            }
            if ((value == "FORCE"))
            {
                return AstKeywordEnum.Force;
            }
            if ((value == "FORCE_FAILOVER_ALLOW_DATA_LOSS"))
            {
                return AstKeywordEnum.ForceFailoverAllowDataLoss;
            }
            if ((value == "FORCED"))
            {
                return AstKeywordEnum.Forced;
            }
            if ((value == "FORCEPLAN"))
            {
                return AstKeywordEnum.Forceplan;
            }
            if ((value == "FORCESCAN"))
            {
                return AstKeywordEnum.Forcescan;
            }
            if ((value == "FORMAT"))
            {
                return AstKeywordEnum.Format;
            }
            if ((value == "FORWARD_ONLY"))
            {
                return AstKeywordEnum.ForwardOnly;
            }
            if ((value == "FULLSCAN"))
            {
                return AstKeywordEnum.Fullscan;
            }
            if ((value == "FULLTEXT"))
            {
                return AstKeywordEnum.Fulltext;
            }
            if ((value == "FULLTEXTCATALOGPROPERTY"))
            {
                return AstKeywordEnum.Fulltextcatalogproperty;
            }
            if ((value == "FULLTEXTSERVICEPROPERTY"))
            {
                return AstKeywordEnum.Fulltextserviceproperty;
            }
            if ((value == "GB"))
            {
                return AstKeywordEnum.Gb;
            }
            if ((value == "GENERATED"))
            {
                return AstKeywordEnum.Generated;
            }
            if ((value == "GETDATE"))
            {
                return AstKeywordEnum.Getdate;
            }
            if ((value == "GETUTCDATE"))
            {
                return AstKeywordEnum.Getutcdate;
            }
            if ((value == "GLOBAL"))
            {
                return AstKeywordEnum.Global;
            }
            if ((value == "GO"))
            {
                return AstKeywordEnum.Go;
            }
            if ((value == "GROUP_MAX_REQUESTS"))
            {
                return AstKeywordEnum.GroupMaxRequests;
            }
            if ((value == "GROUPING"))
            {
                return AstKeywordEnum.Grouping;
            }
            if ((value == "GROUPING_ID"))
            {
                return AstKeywordEnum.GroupingId;
            }
            if ((value == "HADR"))
            {
                return AstKeywordEnum.Hadr;
            }
            if ((value == "HASH"))
            {
                return AstKeywordEnum.Hash;
            }
            if ((value == "HEALTH_CHECK_TIMEOUT"))
            {
                return AstKeywordEnum.HealthCheckTimeout;
            }
            if ((value == "HIDDEN_KEYWORD"))
            {
                return AstKeywordEnum.HiddenKeyword;
            }
            if ((value == "HIGH"))
            {
                return AstKeywordEnum.High;
            }
            if ((value == "HONOR_BROKER_PRIORITY"))
            {
                return AstKeywordEnum.HonorBrokerPriority;
            }
            if ((value == "HOURS"))
            {
                return AstKeywordEnum.Hours;
            }
            if ((value == "IDENTITY_VALUE"))
            {
                return AstKeywordEnum.IdentityValue;
            }
            if ((value == "IGNORE_CONSTRAINTS"))
            {
                return AstKeywordEnum.IgnoreConstraints;
            }
            if ((value == "IGNORE_DUP_KEY"))
            {
                return AstKeywordEnum.IgnoreDupKey;
            }
            if ((value == "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX"))
            {
                return AstKeywordEnum.IgnoreNonclusteredColumnstoreIndex;
            }
            if ((value == "IGNORE_TRIGGERS"))
            {
                return AstKeywordEnum.IgnoreTriggers;
            }
            if ((value == "IMMEDIATE"))
            {
                return AstKeywordEnum.Immediate;
            }
            if ((value == "IMPERSONATE"))
            {
                return AstKeywordEnum.Impersonate;
            }
            if ((value == "IMPLICIT_TRANSACTIONS"))
            {
                return AstKeywordEnum.ImplicitTransactions;
            }
            if ((value == "IMPORTANCE"))
            {
                return AstKeywordEnum.Importance;
            }
            if ((value == "INCLUDE_NULL_VALUES"))
            {
                return AstKeywordEnum.IncludeNullValues;
            }
            if ((value == "INCREMENTAL"))
            {
                return AstKeywordEnum.Incremental;
            }
            if ((value == "INDEX_COL"))
            {
                return AstKeywordEnum.IndexCol;
            }
            if ((value == "INDEXKEY_PROPERTY"))
            {
                return AstKeywordEnum.IndexkeyProperty;
            }
            if ((value == "INDEXPROPERTY"))
            {
                return AstKeywordEnum.Indexproperty;
            }
            if ((value == "INITIATOR"))
            {
                return AstKeywordEnum.Initiator;
            }
            if ((value == "INPUT"))
            {
                return AstKeywordEnum.Input;
            }
            if ((value == "INSENSITIVE"))
            {
                return AstKeywordEnum.Insensitive;
            }
            if ((value == "INSERTED"))
            {
                return AstKeywordEnum.Inserted;
            }
            if ((value == "INT"))
            {
                return AstKeywordEnum.Int;
            }
            if ((value == "IP"))
            {
                return AstKeywordEnum.Ip;
            }
            if ((value == "ISOLATION"))
            {
                return AstKeywordEnum.Isolation;
            }
            if ((value == "JOB"))
            {
                return AstKeywordEnum.Job;
            }
            if ((value == "JSON"))
            {
                return AstKeywordEnum.Json;
            }
            if ((value == "KB"))
            {
                return AstKeywordEnum.Kb;
            }
            if ((value == "KEEP"))
            {
                return AstKeywordEnum.Keep;
            }
            if ((value == "KEEPDEFAULTS"))
            {
                return AstKeywordEnum.Keepdefaults;
            }
            if ((value == "KEEPFIXED"))
            {
                return AstKeywordEnum.Keepfixed;
            }
            if ((value == "KEEPIDENTITY"))
            {
                return AstKeywordEnum.Keepidentity;
            }
            if ((value == "KEY_SOURCE"))
            {
                return AstKeywordEnum.KeySource;
            }
            if ((value == "KEYS"))
            {
                return AstKeywordEnum.Keys;
            }
            if ((value == "KEYSET"))
            {
                return AstKeywordEnum.Keyset;
            }
            if ((value == "LAG"))
            {
                return AstKeywordEnum.Lag;
            }
            if ((value == "LAST"))
            {
                return AstKeywordEnum.Last;
            }
            if ((value == "LAST_VALUE"))
            {
                return AstKeywordEnum.LastValue;
            }
            if ((value == "LEAD"))
            {
                return AstKeywordEnum.Lead;
            }
            if ((value == "LEN"))
            {
                return AstKeywordEnum.Len;
            }
            if ((value == "LEVEL"))
            {
                return AstKeywordEnum.Level;
            }
            if ((value == "LIST"))
            {
                return AstKeywordEnum.List;
            }
            if ((value == "LISTENER"))
            {
                return AstKeywordEnum.Listener;
            }
            if ((value == "LISTENER_URL"))
            {
                return AstKeywordEnum.ListenerUrl;
            }
            if ((value == "LOB_COMPACTION"))
            {
                return AstKeywordEnum.LobCompaction;
            }
            if ((value == "LOCAL"))
            {
                return AstKeywordEnum.Local;
            }
            if ((value == "LOCATION"))
            {
                return AstKeywordEnum.Location;
            }
            if ((value == "LOCK"))
            {
                return AstKeywordEnum.Lock;
            }
            if ((value == "LOCK_ESCALATION"))
            {
                return AstKeywordEnum.LockEscalation;
            }
            if ((value == "LOGIN"))
            {
                return AstKeywordEnum.Login;
            }
            if ((value == "LOOP"))
            {
                return AstKeywordEnum.Loop;
            }
            if ((value == "LOW"))
            {
                return AstKeywordEnum.Low;
            }
            if ((value == "LOWER"))
            {
                return AstKeywordEnum.Lower;
            }
            if ((value == "LTRIM"))
            {
                return AstKeywordEnum.Ltrim;
            }
            if ((value == "MANUAL"))
            {
                return AstKeywordEnum.Manual;
            }
            if ((value == "MARK"))
            {
                return AstKeywordEnum.Mark;
            }
            if ((value == "MASKED"))
            {
                return AstKeywordEnum.Masked;
            }
            if ((value == "MATERIALIZED"))
            {
                return AstKeywordEnum.Materialized;
            }
            if ((value == "MAX"))
            {
                return AstKeywordEnum.Max;
            }
            if ((value == "MAX_CPU_PERCENT"))
            {
                return AstKeywordEnum.MaxCpuPercent;
            }
            if ((value == "MAX_DOP"))
            {
                return AstKeywordEnum.MaxDop;
            }
            if ((value == "MAX_FILES"))
            {
                return AstKeywordEnum.MaxFiles;
            }
            if ((value == "MAX_IOPS_PER_VOLUME"))
            {
                return AstKeywordEnum.MaxIopsPerVolume;
            }
            if ((value == "MAX_MEMORY_PERCENT"))
            {
                return AstKeywordEnum.MaxMemoryPercent;
            }
            if ((value == "MAX_PROCESSES"))
            {
                return AstKeywordEnum.MaxProcesses;
            }
            if ((value == "MAX_QUEUE_READERS"))
            {
                return AstKeywordEnum.MaxQueueReaders;
            }
            if ((value == "MAX_ROLLOVER_FILES"))
            {
                return AstKeywordEnum.MaxRolloverFiles;
            }
            if ((value == "MAXDOP"))
            {
                return AstKeywordEnum.Maxdop;
            }
            if ((value == "MAXRECURSION"))
            {
                return AstKeywordEnum.Maxrecursion;
            }
            if ((value == "MAXSIZE"))
            {
                return AstKeywordEnum.Maxsize;
            }
            if ((value == "MB"))
            {
                return AstKeywordEnum.Mb;
            }
            if ((value == "MEDIUM"))
            {
                return AstKeywordEnum.Medium;
            }
            if ((value == "MEMORY_OPTIMIZED_DATA"))
            {
                return AstKeywordEnum.MemoryOptimizedData;
            }
            if ((value == "MESSAGE"))
            {
                return AstKeywordEnum.Message;
            }
            if ((value == "MIN"))
            {
                return AstKeywordEnum.Min;
            }
            if ((value == "MIN_ACTIVE_ROWVERSION"))
            {
                return AstKeywordEnum.MinActiveRowversion;
            }
            if ((value == "MIN_CPU_PERCENT"))
            {
                return AstKeywordEnum.MinCpuPercent;
            }
            if ((value == "MIN_IOPS_PER_VOLUME"))
            {
                return AstKeywordEnum.MinIopsPerVolume;
            }
            if ((value == "MIN_MEMORY_PERCENT"))
            {
                return AstKeywordEnum.MinMemoryPercent;
            }
            if ((value == "MINUTES"))
            {
                return AstKeywordEnum.Minutes;
            }
            if ((value == "MIRROR_ADDRESS"))
            {
                return AstKeywordEnum.MirrorAddress;
            }
            if ((value == "MIXED_PAGE_ALLOCATION"))
            {
                return AstKeywordEnum.MixedPageAllocation;
            }
            if ((value == "MODE"))
            {
                return AstKeywordEnum.Mode;
            }
            if ((value == "MODIFY"))
            {
                return AstKeywordEnum.Modify;
            }
            if ((value == "MOVE"))
            {
                return AstKeywordEnum.Move;
            }
            if ((value == "MULTI_USER"))
            {
                return AstKeywordEnum.MultiUser;
            }
            if ((value == "NAME"))
            {
                return AstKeywordEnum.Name;
            }
            if ((value == "NCHAR"))
            {
                return AstKeywordEnum.Nchar;
            }
            if ((value == "NESTED_TRIGGERS"))
            {
                return AstKeywordEnum.NestedTriggers;
            }
            if ((value == "NEW_ACCOUNT"))
            {
                return AstKeywordEnum.NewAccount;
            }
            if ((value == "NEW_BROKER"))
            {
                return AstKeywordEnum.NewBroker;
            }
            if ((value == "NEW_PASSWORD"))
            {
                return AstKeywordEnum.NewPassword;
            }
            if ((value == "NEWNAME"))
            {
                return AstKeywordEnum.Newname;
            }
            if ((value == "NEXT"))
            {
                return AstKeywordEnum.Next;
            }
            if ((value == "NO"))
            {
                return AstKeywordEnum.No;
            }
            if ((value == "NO_TRUNCATE"))
            {
                return AstKeywordEnum.NoTruncate;
            }
            if ((value == "NO_WAIT"))
            {
                return AstKeywordEnum.NoWait;
            }
            if ((value == "NOCOUNT"))
            {
                return AstKeywordEnum.Nocount;
            }
            if ((value == "NODES"))
            {
                return AstKeywordEnum.Nodes;
            }
            if ((value == "NOEXEC"))
            {
                return AstKeywordEnum.Noexec;
            }
            if ((value == "NOEXPAND"))
            {
                return AstKeywordEnum.Noexpand;
            }
            if ((value == "NOLOCK"))
            {
                return AstKeywordEnum.Nolock;
            }
            if ((value == "NON_TRANSACTED_ACCESS"))
            {
                return AstKeywordEnum.NonTransactedAccess;
            }
            if ((value == "NORECOMPUTE"))
            {
                return AstKeywordEnum.Norecompute;
            }
            if ((value == "NORECOVERY"))
            {
                return AstKeywordEnum.Norecovery;
            }
            if ((value == "NOTIFICATIONS"))
            {
                return AstKeywordEnum.Notifications;
            }
            if ((value == "NOWAIT"))
            {
                return AstKeywordEnum.Nowait;
            }
            if ((value == "NTILE"))
            {
                return AstKeywordEnum.Ntile;
            }
            if ((value == "NULL_DOUBLE_QUOTE"))
            {
                return AstKeywordEnum.NullDoubleQuote;
            }
            if ((value == "NUMANODE"))
            {
                return AstKeywordEnum.Numanode;
            }
            if ((value == "NUMBER"))
            {
                return AstKeywordEnum.Number;
            }
            if ((value == "NUMERIC_ROUNDABORT"))
            {
                return AstKeywordEnum.NumericRoundabort;
            }
            if ((value == "OBJECT"))
            {
                return AstKeywordEnum.Object;
            }
            if ((value == "OBJECT_DEFINITION"))
            {
                return AstKeywordEnum.ObjectDefinition;
            }
            if ((value == "OBJECT_ID"))
            {
                return AstKeywordEnum.ObjectId;
            }
            if ((value == "OBJECT_NAME"))
            {
                return AstKeywordEnum.ObjectName;
            }
            if ((value == "OBJECT_SCHEMA_NAME"))
            {
                return AstKeywordEnum.ObjectSchemaName;
            }
            if ((value == "OBJECTPROPERTY"))
            {
                return AstKeywordEnum.Objectproperty;
            }
            if ((value == "OBJECTPROPERTYEX"))
            {
                return AstKeywordEnum.Objectpropertyex;
            }
            if ((value == "OFFLINE"))
            {
                return AstKeywordEnum.Offline;
            }
            if ((value == "OFFSET"))
            {
                return AstKeywordEnum.Offset;
            }
            if ((value == "OLD_ACCOUNT"))
            {
                return AstKeywordEnum.OldAccount;
            }
            if ((value == "ONLINE"))
            {
                return AstKeywordEnum.Online;
            }
            if ((value == "ONLY"))
            {
                return AstKeywordEnum.Only;
            }
            if ((value == "OPEN_EXISTING"))
            {
                return AstKeywordEnum.OpenExisting;
            }
            if ((value == "OPENJSON"))
            {
                return AstKeywordEnum.Openjson;
            }
            if ((value == "OPTIMISTIC"))
            {
                return AstKeywordEnum.Optimistic;
            }
            if ((value == "OPTIMIZE"))
            {
                return AstKeywordEnum.Optimize;
            }
            if ((value == "OPTIMIZE_FOR_SEQUENTIAL_KEY"))
            {
                return AstKeywordEnum.OptimizeForSequentialKey;
            }
            if ((value == "ORIGINAL_DB_NAME"))
            {
                return AstKeywordEnum.OriginalDbName;
            }
            if ((value == "OUT"))
            {
                return AstKeywordEnum.Out;
            }
            if ((value == "OUTPUT"))
            {
                return AstKeywordEnum.Output;
            }
            if ((value == "OVERRIDE"))
            {
                return AstKeywordEnum.Override;
            }
            if ((value == "OWNER"))
            {
                return AstKeywordEnum.Owner;
            }
            if ((value == "OWNERSHIP"))
            {
                return AstKeywordEnum.Ownership;
            }
            if ((value == "PAD_INDEX"))
            {
                return AstKeywordEnum.PadIndex;
            }
            if ((value == "PAGE_VERIFY"))
            {
                return AstKeywordEnum.PageVerify;
            }
            if ((value == "PAGECOUNT"))
            {
                return AstKeywordEnum.Pagecount;
            }
            if ((value == "PAGLOCK"))
            {
                return AstKeywordEnum.Paglock;
            }
            if ((value == "PARAMETERIZATION"))
            {
                return AstKeywordEnum.Parameterization;
            }
            if ((value == "PARSENAME"))
            {
                return AstKeywordEnum.Parsename;
            }
            if ((value == "PARSEONLY"))
            {
                return AstKeywordEnum.Parseonly;
            }
            if ((value == "PARTITION"))
            {
                return AstKeywordEnum.Partition;
            }
            if ((value == "PARTITIONS"))
            {
                return AstKeywordEnum.Partitions;
            }
            if ((value == "PARTNER"))
            {
                return AstKeywordEnum.Partner;
            }
            if ((value == "PATH"))
            {
                return AstKeywordEnum.Path;
            }
            if ((value == "PATINDEX"))
            {
                return AstKeywordEnum.Patindex;
            }
            if ((value == "PAUSE"))
            {
                return AstKeywordEnum.Pause;
            }
            if ((value == "PERCENT_RANK"))
            {
                return AstKeywordEnum.PercentRank;
            }
            if ((value == "PERCENTILE_CONT"))
            {
                return AstKeywordEnum.PercentileCont;
            }
            if ((value == "PERCENTILE_DISC"))
            {
                return AstKeywordEnum.PercentileDisc;
            }
            if ((value == "PERSIST_SAMPLE_PERCENT"))
            {
                return AstKeywordEnum.PersistSamplePercent;
            }
            if ((value == "POISON_MESSAGE_HANDLING"))
            {
                return AstKeywordEnum.PoisonMessageHandling;
            }
            if ((value == "POOL"))
            {
                return AstKeywordEnum.Pool;
            }
            if ((value == "PORT"))
            {
                return AstKeywordEnum.Port;
            }
            if ((value == "PRECEDING"))
            {
                return AstKeywordEnum.Preceding;
            }
            if ((value == "PRIMARY_ROLE"))
            {
                return AstKeywordEnum.PrimaryRole;
            }
            if ((value == "PRIOR"))
            {
                return AstKeywordEnum.Prior;
            }
            if ((value == "PRIORITY"))
            {
                return AstKeywordEnum.Priority;
            }
            if ((value == "PRIORITY_LEVEL"))
            {
                return AstKeywordEnum.PriorityLevel;
            }
            if ((value == "PRIVATE"))
            {
                return AstKeywordEnum.Private;
            }
            if ((value == "PRIVATE_KEY"))
            {
                return AstKeywordEnum.PrivateKey;
            }
            if ((value == "PRIVILEGES"))
            {
                return AstKeywordEnum.Privileges;
            }
            if ((value == "PROCEDURE_NAME"))
            {
                return AstKeywordEnum.ProcedureName;
            }
            if ((value == "PROPERTY"))
            {
                return AstKeywordEnum.Property;
            }
            if ((value == "PROVIDER"))
            {
                return AstKeywordEnum.Provider;
            }
            if ((value == "PROVIDER_KEY_NAME"))
            {
                return AstKeywordEnum.ProviderKeyName;
            }
            if ((value == "QUERY"))
            {
                return AstKeywordEnum.Query;
            }
            if ((value == "QUEUE"))
            {
                return AstKeywordEnum.Queue;
            }
            if ((value == "QUEUE_DELAY"))
            {
                return AstKeywordEnum.QueueDelay;
            }
            if ((value == "QUOTED_IDENTIFIER"))
            {
                return AstKeywordEnum.QuotedIdentifier;
            }
            if ((value == "QUOTENAME"))
            {
                return AstKeywordEnum.Quotename;
            }
            if ((value == "RANDOMIZED"))
            {
                return AstKeywordEnum.Randomized;
            }
            if ((value == "RANGE"))
            {
                return AstKeywordEnum.Range;
            }
            if ((value == "RANK"))
            {
                return AstKeywordEnum.Rank;
            }
            if ((value == "RC2"))
            {
                return AstKeywordEnum.Rc2;
            }
            if ((value == "RC4"))
            {
                return AstKeywordEnum.Rc4;
            }
            if ((value == "RC4_128"))
            {
                return AstKeywordEnum.Rc4128;
            }
            if ((value == "READ_COMMITTED_SNAPSHOT"))
            {
                return AstKeywordEnum.ReadCommittedSnapshot;
            }
            if ((value == "READ_ONLY"))
            {
                return AstKeywordEnum.ReadOnly;
            }
            if ((value == "READ_ONLY_ROUTING_LIST"))
            {
                return AstKeywordEnum.ReadOnlyRoutingList;
            }
            if ((value == "READ_WRITE"))
            {
                return AstKeywordEnum.ReadWrite;
            }
            if ((value == "READCOMMITTED"))
            {
                return AstKeywordEnum.Readcommitted;
            }
            if ((value == "READCOMMITTEDLOCK"))
            {
                return AstKeywordEnum.Readcommittedlock;
            }
            if ((value == "READONLY"))
            {
                return AstKeywordEnum.Readonly;
            }
            if ((value == "READPAST"))
            {
                return AstKeywordEnum.Readpast;
            }
            if ((value == "READUNCOMMITTED"))
            {
                return AstKeywordEnum.Readuncommitted;
            }
            if ((value == "READWRITE"))
            {
                return AstKeywordEnum.Readwrite;
            }
            if ((value == "REBUILD"))
            {
                return AstKeywordEnum.Rebuild;
            }
            if ((value == "RECEIVE"))
            {
                return AstKeywordEnum.Receive;
            }
            if ((value == "RECOMPILE"))
            {
                return AstKeywordEnum.Recompile;
            }
            if ((value == "RECOVERY"))
            {
                return AstKeywordEnum.Recovery;
            }
            if ((value == "RECURSIVE_TRIGGERS"))
            {
                return AstKeywordEnum.RecursiveTriggers;
            }
            if ((value == "RELATIVE"))
            {
                return AstKeywordEnum.Relative;
            }
            if ((value == "REMOTE"))
            {
                return AstKeywordEnum.Remote;
            }
            if ((value == "REMOTE_PROC_TRANSACTIONS"))
            {
                return AstKeywordEnum.RemoteProcTransactions;
            }
            if ((value == "REMOTE_SERVICE_NAME"))
            {
                return AstKeywordEnum.RemoteServiceName;
            }
            if ((value == "REMOVE"))
            {
                return AstKeywordEnum.Remove;
            }
            if ((value == "REORGANIZE"))
            {
                return AstKeywordEnum.Reorganize;
            }
            if ((value == "REPEATABLE"))
            {
                return AstKeywordEnum.Repeatable;
            }
            if ((value == "REPEATABLEREAD"))
            {
                return AstKeywordEnum.Repeatableread;
            }
            if ((value == "REPLACE"))
            {
                return AstKeywordEnum.Replace;
            }
            if ((value == "REPLICA"))
            {
                return AstKeywordEnum.Replica;
            }
            if ((value == "REPLICATE"))
            {
                return AstKeywordEnum.Replicate;
            }
            if ((value == "REQUEST_MAX_CPU_TIME_SEC"))
            {
                return AstKeywordEnum.RequestMaxCpuTimeSec;
            }
            if ((value == "REQUEST_MAX_MEMORY_GRANT_PERCENT"))
            {
                return AstKeywordEnum.RequestMaxMemoryGrantPercent;
            }
            if ((value == "REQUEST_MEMORY_GRANT_TIMEOUT_SEC"))
            {
                return AstKeywordEnum.RequestMemoryGrantTimeoutSec;
            }
            if ((value == "REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT"))
            {
                return AstKeywordEnum.RequiredSynchronizedSecondariesToCommit;
            }
            if ((value == "RESAMPLE"))
            {
                return AstKeywordEnum.Resample;
            }
            if ((value == "RESERVE_DISK_SPACE"))
            {
                return AstKeywordEnum.ReserveDiskSpace;
            }
            if ((value == "RESOURCE"))
            {
                return AstKeywordEnum.Resource;
            }
            if ((value == "RESOURCE_MANAGER_LOCATION"))
            {
                return AstKeywordEnum.ResourceManagerLocation;
            }
            if ((value == "RESTRICTED_USER"))
            {
                return AstKeywordEnum.RestrictedUser;
            }
            if ((value == "RESUMABLE"))
            {
                return AstKeywordEnum.Resumable;
            }
            if ((value == "RETENTION"))
            {
                return AstKeywordEnum.Retention;
            }
            if ((value == "REVERSE"))
            {
                return AstKeywordEnum.Reverse;
            }
            if ((value == "ROBUST"))
            {
                return AstKeywordEnum.Robust;
            }
            if ((value == "ROOT"))
            {
                return AstKeywordEnum.Root;
            }
            if ((value == "ROUTE"))
            {
                return AstKeywordEnum.Route;
            }
            if ((value == "ROW"))
            {
                return AstKeywordEnum.Row;
            }
            if ((value == "ROW_NUMBER"))
            {
                return AstKeywordEnum.RowNumber;
            }
            if ((value == "ROWGUID"))
            {
                return AstKeywordEnum.Rowguid;
            }
            if ((value == "ROWLOCK"))
            {
                return AstKeywordEnum.Rowlock;
            }
            if ((value == "ROWS"))
            {
                return AstKeywordEnum.Rows;
            }
            if ((value == "RTRIM"))
            {
                return AstKeywordEnum.Rtrim;
            }
            if ((value == "SAMPLE"))
            {
                return AstKeywordEnum.Sample;
            }
            if ((value == "SCHEMA_ID"))
            {
                return AstKeywordEnum.SchemaId;
            }
            if ((value == "SCHEMA_NAME"))
            {
                return AstKeywordEnum.SchemaName;
            }
            if ((value == "SCHEMABINDING"))
            {
                return AstKeywordEnum.Schemabinding;
            }
            if ((value == "SCOPE_IDENTITY"))
            {
                return AstKeywordEnum.ScopeIdentity;
            }
            if ((value == "SCOPED"))
            {
                return AstKeywordEnum.Scoped;
            }
            if ((value == "SCROLL"))
            {
                return AstKeywordEnum.Scroll;
            }
            if ((value == "SCROLL_LOCKS"))
            {
                return AstKeywordEnum.ScrollLocks;
            }
            if ((value == "SEARCH"))
            {
                return AstKeywordEnum.Search;
            }
            if ((value == "SECONDARY"))
            {
                return AstKeywordEnum.Secondary;
            }
            if ((value == "SECONDARY_ONLY"))
            {
                return AstKeywordEnum.SecondaryOnly;
            }
            if ((value == "SECONDARY_ROLE"))
            {
                return AstKeywordEnum.SecondaryRole;
            }
            if ((value == "SECONDS"))
            {
                return AstKeywordEnum.Seconds;
            }
            if ((value == "SECRET"))
            {
                return AstKeywordEnum.Secret;
            }
            if ((value == "SECURABLES"))
            {
                return AstKeywordEnum.Securables;
            }
            if ((value == "SECURITY"))
            {
                return AstKeywordEnum.Security;
            }
            if ((value == "SECURITY_LOG"))
            {
                return AstKeywordEnum.SecurityLog;
            }
            if ((value == "SEEDING_MODE"))
            {
                return AstKeywordEnum.SeedingMode;
            }
            if ((value == "SELF"))
            {
                return AstKeywordEnum.Self;
            }
            if ((value == "SEMI_SENSITIVE"))
            {
                return AstKeywordEnum.SemiSensitive;
            }
            if ((value == "SEND"))
            {
                return AstKeywordEnum.Send;
            }
            if ((value == "SENT"))
            {
                return AstKeywordEnum.Sent;
            }
            if ((value == "SEQUENCE"))
            {
                return AstKeywordEnum.Sequence;
            }
            if ((value == "SEQUENCE_NUMBER"))
            {
                return AstKeywordEnum.SequenceNumber;
            }
            if ((value == "SERIALIZABLE"))
            {
                return AstKeywordEnum.Serializable;
            }
            if ((value == "SERVERPROPERTY"))
            {
                return AstKeywordEnum.Serverproperty;
            }
            if ((value == "SESSION_TIMEOUT"))
            {
                return AstKeywordEnum.SessionTimeout;
            }
            if ((value == "SETERROR"))
            {
                return AstKeywordEnum.Seterror;
            }
            if ((value == "SHARE"))
            {
                return AstKeywordEnum.Share;
            }
            if ((value == "SHARED"))
            {
                return AstKeywordEnum.Shared;
            }
            if ((value == "SHOWPLAN"))
            {
                return AstKeywordEnum.Showplan;
            }
            if ((value == "SHOWPLAN_ALL"))
            {
                return AstKeywordEnum.ShowplanAll;
            }
            if ((value == "SHOWPLAN_TEXT"))
            {
                return AstKeywordEnum.ShowplanText;
            }
            if ((value == "SHOWPLAN_XML"))
            {
                return AstKeywordEnum.ShowplanXml;
            }
            if ((value == "SIGNATURE"))
            {
                return AstKeywordEnum.Signature;
            }
            if ((value == "SIMPLE"))
            {
                return AstKeywordEnum.Simple;
            }
            if ((value == "SINGLE_USER"))
            {
                return AstKeywordEnum.SingleUser;
            }
            if ((value == "SIZE"))
            {
                return AstKeywordEnum.Size;
            }
            if ((value == "SMALLINT"))
            {
                return AstKeywordEnum.Smallint;
            }
            if ((value == "SNAPSHOT"))
            {
                return AstKeywordEnum.Snapshot;
            }
            if ((value == "SORT_IN_TEMPDB"))
            {
                return AstKeywordEnum.SortInTempdb;
            }
            if ((value == "SOUNDEX"))
            {
                return AstKeywordEnum.Soundex;
            }
            if ((value == "SPACE_KEYWORD"))
            {
                return AstKeywordEnum.SpaceKeyword;
            }
            if ((value == "SPARSE"))
            {
                return AstKeywordEnum.Sparse;
            }
            if ((value == "SPATIAL_WINDOW_MAX_CELLS"))
            {
                return AstKeywordEnum.SpatialWindowMaxCells;
            }
            if ((value == "STANDBY"))
            {
                return AstKeywordEnum.Standby;
            }
            if ((value == "START_DATE"))
            {
                return AstKeywordEnum.StartDate;
            }
            if ((value == "STATIC"))
            {
                return AstKeywordEnum.Static;
            }
            if ((value == "STATISTICS_INCREMENTAL"))
            {
                return AstKeywordEnum.StatisticsIncremental;
            }
            if ((value == "STATISTICS_NORECOMPUTE"))
            {
                return AstKeywordEnum.StatisticsNorecompute;
            }
            if ((value == "STATS_DATE"))
            {
                return AstKeywordEnum.StatsDate;
            }
            if ((value == "STATS_STREAM"))
            {
                return AstKeywordEnum.StatsStream;
            }
            if ((value == "STATUS"))
            {
                return AstKeywordEnum.Status;
            }
            if ((value == "STATUSONLY"))
            {
                return AstKeywordEnum.Statusonly;
            }
            if ((value == "STDEV"))
            {
                return AstKeywordEnum.Stdev;
            }
            if ((value == "STDEVP"))
            {
                return AstKeywordEnum.Stdevp;
            }
            if ((value == "STOPLIST"))
            {
                return AstKeywordEnum.Stoplist;
            }
            if ((value == "STR"))
            {
                return AstKeywordEnum.Str;
            }
            if ((value == "STRING_AGG"))
            {
                return AstKeywordEnum.StringAgg;
            }
            if ((value == "STRING_ESCAPE"))
            {
                return AstKeywordEnum.StringEscape;
            }
            if ((value == "STUFF"))
            {
                return AstKeywordEnum.Stuff;
            }
            if ((value == "SUBJECT"))
            {
                return AstKeywordEnum.Subject;
            }
            if ((value == "SUBSCRIBE"))
            {
                return AstKeywordEnum.Subscribe;
            }
            if ((value == "SUBSCRIPTION"))
            {
                return AstKeywordEnum.Subscription;
            }
            if ((value == "SUBSTRING"))
            {
                return AstKeywordEnum.Substring;
            }
            if ((value == "SUM"))
            {
                return AstKeywordEnum.Sum;
            }
            if ((value == "SUSPEND"))
            {
                return AstKeywordEnum.Suspend;
            }
            if ((value == "SYMMETRIC"))
            {
                return AstKeywordEnum.Symmetric;
            }
            if ((value == "SYNCHRONOUS_COMMIT"))
            {
                return AstKeywordEnum.SynchronousCommit;
            }
            if ((value == "SYNONYM"))
            {
                return AstKeywordEnum.Synonym;
            }
            if ((value == "SYSTEM"))
            {
                return AstKeywordEnum.System;
            }
            if ((value == "TABLOCK"))
            {
                return AstKeywordEnum.Tablock;
            }
            if ((value == "TABLOCKX"))
            {
                return AstKeywordEnum.Tablockx;
            }
            if ((value == "TAKE"))
            {
                return AstKeywordEnum.Take;
            }
            if ((value == "TARGET_RECOVERY_TIME"))
            {
                return AstKeywordEnum.TargetRecoveryTime;
            }
            if ((value == "TB"))
            {
                return AstKeywordEnum.Tb;
            }
            if ((value == "TEXTIMAGE_ON"))
            {
                return AstKeywordEnum.TextimageOn;
            }
            if ((value == "THROW"))
            {
                return AstKeywordEnum.Throw;
            }
            if ((value == "TIES"))
            {
                return AstKeywordEnum.Ties;
            }
            if ((value == "TIME"))
            {
                return AstKeywordEnum.Time;
            }
            if ((value == "TIMEOUT"))
            {
                return AstKeywordEnum.Timeout;
            }
            if ((value == "TIMER"))
            {
                return AstKeywordEnum.Timer;
            }
            if ((value == "TINYINT"))
            {
                return AstKeywordEnum.Tinyint;
            }
            if ((value == "TORN_PAGE_DETECTION"))
            {
                return AstKeywordEnum.TornPageDetection;
            }
            if ((value == "TRACKING"))
            {
                return AstKeywordEnum.Tracking;
            }
            if ((value == "TRANSACTION_ID"))
            {
                return AstKeywordEnum.TransactionId;
            }
            if ((value == "TRANSFORM_NOISE_WORDS"))
            {
                return AstKeywordEnum.TransformNoiseWords;
            }
            if ((value == "TRANSLATE"))
            {
                return AstKeywordEnum.Translate;
            }
            if ((value == "TRIM"))
            {
                return AstKeywordEnum.Trim;
            }
            if ((value == "TRIPLE_DES"))
            {
                return AstKeywordEnum.TripleDes;
            }
            if ((value == "TRIPLE_DES_3KEY"))
            {
                return AstKeywordEnum.TripleDes3key;
            }
            if ((value == "TRUSTWORTHY"))
            {
                return AstKeywordEnum.Trustworthy;
            }
            if ((value == "TRY"))
            {
                return AstKeywordEnum.Try;
            }
            if ((value == "TSQL"))
            {
                return AstKeywordEnum.Tsql;
            }
            if ((value == "TWO_DIGIT_YEAR_CUTOFF"))
            {
                return AstKeywordEnum.TwoDigitYearCutoff;
            }
            if ((value == "TYPE"))
            {
                return AstKeywordEnum.Type;
            }
            if ((value == "TYPE_ID"))
            {
                return AstKeywordEnum.TypeId;
            }
            if ((value == "TYPE_NAME"))
            {
                return AstKeywordEnum.TypeName;
            }
            if ((value == "TYPE_WARNING"))
            {
                return AstKeywordEnum.TypeWarning;
            }
            if ((value == "TYPEPROPERTY"))
            {
                return AstKeywordEnum.Typeproperty;
            }
            if ((value == "UNBOUNDED"))
            {
                return AstKeywordEnum.Unbounded;
            }
            if ((value == "UNCOMMITTED"))
            {
                return AstKeywordEnum.Uncommitted;
            }
            if ((value == "UNICODE"))
            {
                return AstKeywordEnum.Unicode;
            }
            if ((value == "UNKNOWN"))
            {
                return AstKeywordEnum.Unknown;
            }
            if ((value == "UNLIMITED"))
            {
                return AstKeywordEnum.Unlimited;
            }
            if ((value == "UNMASK"))
            {
                return AstKeywordEnum.Unmask;
            }
            if ((value == "UOW"))
            {
                return AstKeywordEnum.Uow;
            }
            if ((value == "UPDLOCK"))
            {
                return AstKeywordEnum.Updlock;
            }
            if ((value == "UPPER"))
            {
                return AstKeywordEnum.Upper;
            }
            if ((value == "USING"))
            {
                return AstKeywordEnum.Using;
            }
            if ((value == "VALID_XML"))
            {
                return AstKeywordEnum.ValidXml;
            }
            if ((value == "VALIDATION"))
            {
                return AstKeywordEnum.Validation;
            }
            if ((value == "VALUE"))
            {
                return AstKeywordEnum.Value;
            }
            if ((value == "VAR"))
            {
                return AstKeywordEnum.Var;
            }
            if ((value == "VARBINARY_KEYWORD"))
            {
                return AstKeywordEnum.VarbinaryKeyword;
            }
            if ((value == "VARP"))
            {
                return AstKeywordEnum.Varp;
            }
            if ((value == "VERSION"))
            {
                return AstKeywordEnum.Version;
            }
            if ((value == "VIEW_METADATA"))
            {
                return AstKeywordEnum.ViewMetadata;
            }
            if ((value == "VIEWS"))
            {
                return AstKeywordEnum.Views;
            }
            if ((value == "WAIT"))
            {
                return AstKeywordEnum.Wait;
            }
            if ((value == "WELL_FORMED_XML"))
            {
                return AstKeywordEnum.WellFormedXml;
            }
            if ((value == "WITHOUT_ARRAY_WRAPPER"))
            {
                return AstKeywordEnum.WithoutArrayWrapper;
            }
            if ((value == "WORK"))
            {
                return AstKeywordEnum.Work;
            }
            if ((value == "WORKLOAD"))
            {
                return AstKeywordEnum.Workload;
            }
            if ((value == "XLOCK"))
            {
                return AstKeywordEnum.Xlock;
            }
            if ((value == "XML"))
            {
                return AstKeywordEnum.Xml;
            }
            if ((value == "XML_COMPRESSION"))
            {
                return AstKeywordEnum.XmlCompression;
            }
            if ((value == "XMLDATA"))
            {
                return AstKeywordEnum.Xmldata;
            }
            if ((value == "XMLNAMESPACES"))
            {
                return AstKeywordEnum.Xmlnamespaces;
            }
            if ((value == "XMLSCHEMA"))
            {
                return AstKeywordEnum.Xmlschema;
            }
            if ((value == "XSINIL"))
            {
                return AstKeywordEnum.Xsinil;
            }
            if ((value == "ZONE"))
            {
                return AstKeywordEnum.Zone;
            }
            if ((value == "ABORT_AFTER_WAIT"))
            {
                return AstKeywordEnum.AbortAfterWait;
            }
            if ((value == "ABSENT"))
            {
                return AstKeywordEnum.Absent;
            }
            if ((value == "ADMINISTER"))
            {
                return AstKeywordEnum.Administer;
            }
            if ((value == "AES"))
            {
                return AstKeywordEnum.Aes;
            }
            if ((value == "ALLOW_CONNECTIONS"))
            {
                return AstKeywordEnum.AllowConnections;
            }
            if ((value == "ALLOW_MULTIPLE_EVENT_LOSS"))
            {
                return AstKeywordEnum.AllowMultipleEventLoss;
            }
            if ((value == "ALLOW_SINGLE_EVENT_LOSS"))
            {
                return AstKeywordEnum.AllowSingleEventLoss;
            }
            if ((value == "ANONYMOUS"))
            {
                return AstKeywordEnum.Anonymous;
            }
            if ((value == "APPEND"))
            {
                return AstKeywordEnum.Append;
            }
            if ((value == "APPLICATION"))
            {
                return AstKeywordEnum.Application;
            }
            if ((value == "ASYMMETRIC"))
            {
                return AstKeywordEnum.Asymmetric;
            }
            if ((value == "ASYNCHRONOUS_COMMIT"))
            {
                return AstKeywordEnum.AsynchronousCommit;
            }
            if ((value == "AUTHENTICATE"))
            {
                return AstKeywordEnum.Authenticate;
            }
            if ((value == "AUTHENTICATION"))
            {
                return AstKeywordEnum.Authentication;
            }
            if ((value == "AUTOMATED_BACKUP_PREFERENCE"))
            {
                return AstKeywordEnum.AutomatedBackupPreference;
            }
            if ((value == "AUTOMATIC"))
            {
                return AstKeywordEnum.Automatic;
            }
            if ((value == "AVAILABILITY_MODE"))
            {
                return AstKeywordEnum.AvailabilityMode;
            }
            if ((value == "BEFORE"))
            {
                return AstKeywordEnum.Before;
            }
            if ((value == "BLOCK"))
            {
                return AstKeywordEnum.Block;
            }
            if ((value == "BLOCKERS"))
            {
                return AstKeywordEnum.Blockers;
            }
            if ((value == "BLOCKSIZE"))
            {
                return AstKeywordEnum.Blocksize;
            }
            if ((value == "BLOCKING_HIERARCHY"))
            {
                return AstKeywordEnum.BlockingHierarchy;
            }
            if ((value == "BUFFER"))
            {
                return AstKeywordEnum.Buffer;
            }
            if ((value == "BUFFERCOUNT"))
            {
                return AstKeywordEnum.Buffercount;
            }
            if ((value == "CACHE"))
            {
                return AstKeywordEnum.Cache;
            }
            if ((value == "CALLED"))
            {
                return AstKeywordEnum.Called;
            }
            if ((value == "CERTIFICATE"))
            {
                return AstKeywordEnum.Certificate;
            }
            if ((value == "CHANGETABLE"))
            {
                return AstKeywordEnum.Changetable;
            }
            if ((value == "CHANGES"))
            {
                return AstKeywordEnum.Changes;
            }
            if ((value == "CHECK_POLICY"))
            {
                return AstKeywordEnum.CheckPolicy;
            }
            if ((value == "CHECK_EXPIRATION"))
            {
                return AstKeywordEnum.CheckExpiration;
            }
            if ((value == "CLASSIFIER_FUNCTION"))
            {
                return AstKeywordEnum.ClassifierFunction;
            }
            if ((value == "CLUSTER"))
            {
                return AstKeywordEnum.Cluster;
            }
            if ((value == "COMPRESS"))
            {
                return AstKeywordEnum.Compress;
            }
            if ((value == "COMPRESSION"))
            {
                return AstKeywordEnum.Compression;
            }
            if ((value == "CONNECT"))
            {
                return AstKeywordEnum.Connect;
            }
            if ((value == "CONNECTION"))
            {
                return AstKeywordEnum.Connection;
            }
            if ((value == "CONFIGURATION"))
            {
                return AstKeywordEnum.Configuration;
            }
            if ((value == "CONNECTIONPROPERTY"))
            {
                return AstKeywordEnum.Connectionproperty;
            }
            if ((value == "CONTAINMENT"))
            {
                return AstKeywordEnum.Containment;
            }
            if ((value == "CONTEXT"))
            {
                return AstKeywordEnum.Context;
            }
            if ((value == "CONTEXT_INFO"))
            {
                return AstKeywordEnum.ContextInfo;
            }
            if ((value == "CONTINUE_AFTER_ERROR"))
            {
                return AstKeywordEnum.ContinueAfterError;
            }
            if ((value == "CONTRACT"))
            {
                return AstKeywordEnum.Contract;
            }
            if ((value == "CONTRACT_NAME"))
            {
                return AstKeywordEnum.ContractName;
            }
            if ((value == "CONVERSATION"))
            {
                return AstKeywordEnum.Conversation;
            }
            if ((value == "COPY_ONLY"))
            {
                return AstKeywordEnum.CopyOnly;
            }
            if ((value == "CURRENT_REQUEST_ID"))
            {
                return AstKeywordEnum.CurrentRequestId;
            }
            if ((value == "CURRENT_TRANSACTION_ID"))
            {
                return AstKeywordEnum.CurrentTransactionId;
            }
            if ((value == "CYCLE"))
            {
                return AstKeywordEnum.Cycle;
            }
            if ((value == "DATA_COMPRESSION"))
            {
                return AstKeywordEnum.DataCompression;
            }
            if ((value == "DATA_SOURCE"))
            {
                return AstKeywordEnum.DataSource;
            }
            if ((value == "DATABASE_MIRRORING"))
            {
                return AstKeywordEnum.DatabaseMirroring;
            }
            if ((value == "DATASPACE"))
            {
                return AstKeywordEnum.Dataspace;
            }
            if ((value == "DDL"))
            {
                return AstKeywordEnum.Ddl;
            }
            if ((value == "DECOMPRESS"))
            {
                return AstKeywordEnum.Decompress;
            }
            if ((value == "DEFAULT_DATABASE"))
            {
                return AstKeywordEnum.DefaultDatabase;
            }
            if ((value == "DEFAULT_SCHEMA"))
            {
                return AstKeywordEnum.DefaultSchema;
            }
            if ((value == "DIAGNOSTICS"))
            {
                return AstKeywordEnum.Diagnostics;
            }
            if ((value == "DIFFERENTIAL"))
            {
                return AstKeywordEnum.Differential;
            }
            if ((value == "DISTRIBUTION"))
            {
                return AstKeywordEnum.Distribution;
            }
            if ((value == "DTC_SUPPORT"))
            {
                return AstKeywordEnum.DtcSupport;
            }
            if ((value == "ENABLED"))
            {
                return AstKeywordEnum.Enabled;
            }
            if ((value == "ENDPOINT"))
            {
                return AstKeywordEnum.Endpoint;
            }
            if ((value == "ERROR"))
            {
                return AstKeywordEnum.Error;
            }
            if ((value == "ERROR_LINE"))
            {
                return AstKeywordEnum.ErrorLine;
            }
            if ((value == "ERROR_MESSAGE"))
            {
                return AstKeywordEnum.ErrorMessage;
            }
            if ((value == "ERROR_NUMBER"))
            {
                return AstKeywordEnum.ErrorNumber;
            }
            if ((value == "ERROR_PROCEDURE"))
            {
                return AstKeywordEnum.ErrorProcedure;
            }
            if ((value == "ERROR_SEVERITY"))
            {
                return AstKeywordEnum.ErrorSeverity;
            }
            if ((value == "ERROR_STATE"))
            {
                return AstKeywordEnum.ErrorState;
            }
            if ((value == "EVENT"))
            {
                return AstKeywordEnum.Event;
            }
            if ((value == "EVENTDATA"))
            {
                return AstKeywordEnum.Eventdata;
            }
            if ((value == "EVENT_RETENTION_MODE"))
            {
                return AstKeywordEnum.EventRetentionMode;
            }
            if ((value == "EXECUTABLE_FILE"))
            {
                return AstKeywordEnum.ExecutableFile;
            }
            if ((value == "EXPIREDATE"))
            {
                return AstKeywordEnum.Expiredate;
            }
            if ((value == "EXTENSION"))
            {
                return AstKeywordEnum.Extension;
            }
            if ((value == "EXTERNAL_ACCESS"))
            {
                return AstKeywordEnum.ExternalAccess;
            }
            if ((value == "FAILOVER"))
            {
                return AstKeywordEnum.Failover;
            }
            if ((value == "FAILURECONDITIONLEVEL"))
            {
                return AstKeywordEnum.Failureconditionlevel;
            }
            if ((value == "FAN_IN"))
            {
                return AstKeywordEnum.FanIn;
            }
            if ((value == "FILE_SNAPSHOT"))
            {
                return AstKeywordEnum.FileSnapshot;
            }
            if ((value == "FORCESEEK"))
            {
                return AstKeywordEnum.Forceseek;
            }
            if ((value == "FORCE_SERVICE_ALLOW_DATA_LOSS"))
            {
                return AstKeywordEnum.ForceServiceAllowDataLoss;
            }
            if ((value == "FORMATMESSAGE"))
            {
                return AstKeywordEnum.Formatmessage;
            }
            if ((value == "GET"))
            {
                return AstKeywordEnum.Get;
            }
            if ((value == "GET_FILESTREAM_TRANSACTION_CONTEXT"))
            {
                return AstKeywordEnum.GetFilestreamTransactionContext;
            }
            if ((value == "GETANCESTOR"))
            {
                return AstKeywordEnum.Getancestor;
            }
            if ((value == "GETANSINULL"))
            {
                return AstKeywordEnum.Getansinull;
            }
            if ((value == "GETDESCENDANT"))
            {
                return AstKeywordEnum.Getdescendant;
            }
            if ((value == "GETLEVEL"))
            {
                return AstKeywordEnum.Getlevel;
            }
            if ((value == "GETREPARENTEDVALUE"))
            {
                return AstKeywordEnum.Getreparentedvalue;
            }
            if ((value == "GETROOT"))
            {
                return AstKeywordEnum.Getroot;
            }
            if ((value == "GOVERNOR"))
            {
                return AstKeywordEnum.Governor;
            }
            if ((value == "HASHED"))
            {
                return AstKeywordEnum.Hashed;
            }
            if ((value == "HEALTHCHECKTIMEOUT"))
            {
                return AstKeywordEnum.Healthchecktimeout;
            }
            if ((value == "HEAP"))
            {
                return AstKeywordEnum.Heap;
            }
            if ((value == "HIERARCHYID"))
            {
                return AstKeywordEnum.Hierarchyid;
            }
            if ((value == "HOST_ID"))
            {
                return AstKeywordEnum.HostId;
            }
            if ((value == "HOST_NAME"))
            {
                return AstKeywordEnum.HostName;
            }
            if ((value == "IIF"))
            {
                return AstKeywordEnum.Iif;
            }
            if ((value == "IO"))
            {
                return AstKeywordEnum.Io;
            }
            if ((value == "INCLUDE"))
            {
                return AstKeywordEnum.Include;
            }
            if ((value == "INCREMENT"))
            {
                return AstKeywordEnum.Increment;
            }
            if ((value == "INFINITE"))
            {
                return AstKeywordEnum.Infinite;
            }
            if ((value == "INIT"))
            {
                return AstKeywordEnum.Init;
            }
            if ((value == "INSTEAD"))
            {
                return AstKeywordEnum.Instead;
            }
            if ((value == "ISDESCENDANTOF"))
            {
                return AstKeywordEnum.Isdescendantof;
            }
            if ((value == "ISNULL"))
            {
                return AstKeywordEnum.Isnull;
            }
            if ((value == "ISNUMERIC"))
            {
                return AstKeywordEnum.Isnumeric;
            }
            if ((value == "KERBEROS"))
            {
                return AstKeywordEnum.Kerberos;
            }
            if ((value == "KEY_PATH"))
            {
                return AstKeywordEnum.KeyPath;
            }
            if ((value == "KEY_STORE_PROVIDER_NAME"))
            {
                return AstKeywordEnum.KeyStoreProviderName;
            }
            if ((value == "LANGUAGE"))
            {
                return AstKeywordEnum.Language;
            }
            if ((value == "LIBRARY"))
            {
                return AstKeywordEnum.Library;
            }
            if ((value == "LIFETIME"))
            {
                return AstKeywordEnum.Lifetime;
            }
            if ((value == "LINKED"))
            {
                return AstKeywordEnum.Linked;
            }
            if ((value == "LINUX"))
            {
                return AstKeywordEnum.Linux;
            }
            if ((value == "LISTENER_IP"))
            {
                return AstKeywordEnum.ListenerIp;
            }
            if ((value == "LISTENER_PORT"))
            {
                return AstKeywordEnum.ListenerPort;
            }
            if ((value == "LOCAL_SERVICE_NAME"))
            {
                return AstKeywordEnum.LocalServiceName;
            }
            if ((value == "LOG"))
            {
                return AstKeywordEnum.Log;
            }
            if ((value == "MASK"))
            {
                return AstKeywordEnum.Mask;
            }
            if ((value == "MATCHED"))
            {
                return AstKeywordEnum.Matched;
            }
            if ((value == "MASTER"))
            {
                return AstKeywordEnum.Master;
            }
            if ((value == "MAX_MEMORY"))
            {
                return AstKeywordEnum.MaxMemory;
            }
            if ((value == "MAXTRANSFER"))
            {
                return AstKeywordEnum.Maxtransfer;
            }
            if ((value == "MAXVALUE"))
            {
                return AstKeywordEnum.Maxvalue;
            }
            if ((value == "MAX_DISPATCH_LATENCY"))
            {
                return AstKeywordEnum.MaxDispatchLatency;
            }
            if ((value == "MAX_DURATION"))
            {
                return AstKeywordEnum.MaxDuration;
            }
            if ((value == "MAX_EVENT_SIZE"))
            {
                return AstKeywordEnum.MaxEventSize;
            }
            if ((value == "MAX_SIZE"))
            {
                return AstKeywordEnum.MaxSize;
            }
            if ((value == "MAX_OUTSTANDING_IO_PER_VOLUME"))
            {
                return AstKeywordEnum.MaxOutstandingIoPerVolume;
            }
            if ((value == "MEDIADESCRIPTION"))
            {
                return AstKeywordEnum.Mediadescription;
            }
            if ((value == "MEDIANAME"))
            {
                return AstKeywordEnum.Medianame;
            }
            if ((value == "MEMBER"))
            {
                return AstKeywordEnum.Member;
            }
            if ((value == "MEMORY_PARTITION_MODE"))
            {
                return AstKeywordEnum.MemoryPartitionMode;
            }
            if ((value == "MESSAGE_FORWARDING"))
            {
                return AstKeywordEnum.MessageForwarding;
            }
            if ((value == "MESSAGE_FORWARD_SIZE"))
            {
                return AstKeywordEnum.MessageForwardSize;
            }
            if ((value == "MINVALUE"))
            {
                return AstKeywordEnum.Minvalue;
            }
            if ((value == "MIRROR"))
            {
                return AstKeywordEnum.Mirror;
            }
            if ((value == "MUST_CHANGE"))
            {
                return AstKeywordEnum.MustChange;
            }
            if ((value == "NEWID"))
            {
                return AstKeywordEnum.Newid;
            }
            if ((value == "NEWSEQUENTIALID"))
            {
                return AstKeywordEnum.Newsequentialid;
            }
            if ((value == "NOFORMAT"))
            {
                return AstKeywordEnum.Noformat;
            }
            if ((value == "NOINIT"))
            {
                return AstKeywordEnum.Noinit;
            }
            if ((value == "NONE"))
            {
                return AstKeywordEnum.None;
            }
            if ((value == "NOREWIND"))
            {
                return AstKeywordEnum.Norewind;
            }
            if ((value == "NOSKIP"))
            {
                return AstKeywordEnum.Noskip;
            }
            if ((value == "NOUNLOAD"))
            {
                return AstKeywordEnum.Nounload;
            }
            if ((value == "NO_CHECKSUM"))
            {
                return AstKeywordEnum.NoChecksum;
            }
            if ((value == "NO_COMPRESSION"))
            {
                return AstKeywordEnum.NoCompression;
            }
            if ((value == "NO_EVENT_LOSS"))
            {
                return AstKeywordEnum.NoEventLoss;
            }
            if ((value == "NOTIFICATION"))
            {
                return AstKeywordEnum.Notification;
            }
            if ((value == "NTLM"))
            {
                return AstKeywordEnum.Ntlm;
            }
            if ((value == "OLD_PASSWORD"))
            {
                return AstKeywordEnum.OldPassword;
            }
            if ((value == "ON_FAILURE"))
            {
                return AstKeywordEnum.OnFailure;
            }
            if ((value == "OPERATIONS"))
            {
                return AstKeywordEnum.Operations;
            }
            if ((value == "PAGE"))
            {
                return AstKeywordEnum.Page;
            }
            if ((value == "PARAM_NODE"))
            {
                return AstKeywordEnum.ParamNode;
            }
            if ((value == "PARTIAL"))
            {
                return AstKeywordEnum.Partial;
            }
            if ((value == "PASSWORD"))
            {
                return AstKeywordEnum.Password;
            }
            if ((value == "PERMISSION_SET"))
            {
                return AstKeywordEnum.PermissionSet;
            }
            if ((value == "PER_CPU"))
            {
                return AstKeywordEnum.PerCpu;
            }
            if ((value == "PER_DB"))
            {
                return AstKeywordEnum.PerDb;
            }
            if ((value == "PER_NODE"))
            {
                return AstKeywordEnum.PerNode;
            }
            if ((value == "PERSISTED"))
            {
                return AstKeywordEnum.Persisted;
            }
            if ((value == "PLATFORM"))
            {
                return AstKeywordEnum.Platform;
            }
            if ((value == "POLICY"))
            {
                return AstKeywordEnum.Policy;
            }
            if ((value == "PREDICATE"))
            {
                return AstKeywordEnum.Predicate;
            }
            if ((value == "PROCESS"))
            {
                return AstKeywordEnum.Process;
            }
            if ((value == "PROFILE"))
            {
                return AstKeywordEnum.Profile;
            }
            if ((value == "PYTHON"))
            {
                return AstKeywordEnum.Python;
            }
            if ((value == "R"))
            {
                return AstKeywordEnum.R;
            }
            if ((value == "READ_WRITE_FILEGROUPS"))
            {
                return AstKeywordEnum.ReadWriteFilegroups;
            }
            if ((value == "REGENERATE"))
            {
                return AstKeywordEnum.Regenerate;
            }
            if ((value == "RELATED_CONVERSATION"))
            {
                return AstKeywordEnum.RelatedConversation;
            }
            if ((value == "RELATED_CONVERSATION_GROUP"))
            {
                return AstKeywordEnum.RelatedConversationGroup;
            }
            if ((value == "REQUIRED"))
            {
                return AstKeywordEnum.Required;
            }
            if ((value == "RESET"))
            {
                return AstKeywordEnum.Reset;
            }
            if ((value == "RESOURCES"))
            {
                return AstKeywordEnum.Resources;
            }
            if ((value == "RESTART"))
            {
                return AstKeywordEnum.Restart;
            }
            if ((value == "RESUME"))
            {
                return AstKeywordEnum.Resume;
            }
            if ((value == "RETAINDAYS"))
            {
                return AstKeywordEnum.Retaindays;
            }
            if ((value == "RETURNS"))
            {
                return AstKeywordEnum.Returns;
            }
            if ((value == "REWIND"))
            {
                return AstKeywordEnum.Rewind;
            }
            if ((value == "ROLE"))
            {
                return AstKeywordEnum.Role;
            }
            if ((value == "ROUND_ROBIN"))
            {
                return AstKeywordEnum.RoundRobin;
            }
            if ((value == "ROWCOUNT_BIG"))
            {
                return AstKeywordEnum.RowcountBig;
            }
            if ((value == "RSA_512"))
            {
                return AstKeywordEnum.Rsa512;
            }
            if ((value == "RSA_1024"))
            {
                return AstKeywordEnum.Rsa1024;
            }
            if ((value == "RSA_2048"))
            {
                return AstKeywordEnum.Rsa2048;
            }
            if ((value == "RSA_3072"))
            {
                return AstKeywordEnum.Rsa3072;
            }
            if ((value == "RSA_4096"))
            {
                return AstKeywordEnum.Rsa4096;
            }
            if ((value == "SAFETY"))
            {
                return AstKeywordEnum.Safety;
            }
            if ((value == "SAFE"))
            {
                return AstKeywordEnum.Safe;
            }
            if ((value == "SCHEDULER"))
            {
                return AstKeywordEnum.Scheduler;
            }
            if ((value == "SCHEME"))
            {
                return AstKeywordEnum.Scheme;
            }
            if ((value == "SCRIPT"))
            {
                return AstKeywordEnum.Script;
            }
            if ((value == "SERVER"))
            {
                return AstKeywordEnum.Server;
            }
            if ((value == "SERVICE"))
            {
                return AstKeywordEnum.Service;
            }
            if ((value == "SERVICE_BROKER"))
            {
                return AstKeywordEnum.ServiceBroker;
            }
            if ((value == "SERVICE_NAME"))
            {
                return AstKeywordEnum.ServiceName;
            }
            if ((value == "SESSION"))
            {
                return AstKeywordEnum.Session;
            }
            if ((value == "SESSION_CONTEXT"))
            {
                return AstKeywordEnum.SessionContext;
            }
            if ((value == "SETTINGS"))
            {
                return AstKeywordEnum.Settings;
            }
            if ((value == "SHRINKLOG"))
            {
                return AstKeywordEnum.Shrinklog;
            }
            if ((value == "SID"))
            {
                return AstKeywordEnum.Sid;
            }
            if ((value == "SKIP_KEYWORD"))
            {
                return AstKeywordEnum.SkipKeyword;
            }
            if ((value == "SOFTNUMA"))
            {
                return AstKeywordEnum.Softnuma;
            }
            if ((value == "SOURCE"))
            {
                return AstKeywordEnum.Source;
            }
            if ((value == "SPECIFICATION"))
            {
                return AstKeywordEnum.Specification;
            }
            if ((value == "SPLIT"))
            {
                return AstKeywordEnum.Split;
            }
            if ((value == "SQL"))
            {
                return AstKeywordEnum.Sql;
            }
            if ((value == "SQLDUMPERFLAGS"))
            {
                return AstKeywordEnum.Sqldumperflags;
            }
            if ((value == "SQLDUMPERPATH"))
            {
                return AstKeywordEnum.Sqldumperpath;
            }
            if ((value == "SQLDUMPERTIMEOUT"))
            {
                return AstKeywordEnum.Sqldumpertimeout;
            }
            if ((value == "STATE"))
            {
                return AstKeywordEnum.State;
            }
            if ((value == "STATS"))
            {
                return AstKeywordEnum.Stats;
            }
            if ((value == "START"))
            {
                return AstKeywordEnum.Start;
            }
            if ((value == "STARTED"))
            {
                return AstKeywordEnum.Started;
            }
            if ((value == "STARTUP_STATE"))
            {
                return AstKeywordEnum.StartupState;
            }
            if ((value == "STOP"))
            {
                return AstKeywordEnum.Stop;
            }
            if ((value == "STOPPED"))
            {
                return AstKeywordEnum.Stopped;
            }
            if ((value == "STOP_ON_ERROR"))
            {
                return AstKeywordEnum.StopOnError;
            }
            if ((value == "SUPPORTED"))
            {
                return AstKeywordEnum.Supported;
            }
            if ((value == "SWITCH"))
            {
                return AstKeywordEnum.Switch;
            }
            if ((value == "TAPE"))
            {
                return AstKeywordEnum.Tape;
            }
            if ((value == "TARGET"))
            {
                return AstKeywordEnum.Target;
            }
            if ((value == "TCP"))
            {
                return AstKeywordEnum.Tcp;
            }
            if ((value == "TOSTRING"))
            {
                return AstKeywordEnum.Tostring;
            }
            if ((value == "TRACE"))
            {
                return AstKeywordEnum.Trace;
            }
            if ((value == "TRACK_CAUSALITY"))
            {
                return AstKeywordEnum.TrackCausality;
            }
            if ((value == "TRANSFER"))
            {
                return AstKeywordEnum.Transfer;
            }
            if ((value == "UNCHECKED"))
            {
                return AstKeywordEnum.Unchecked;
            }
            if ((value == "UNLOCK"))
            {
                return AstKeywordEnum.Unlock;
            }
            if ((value == "UNSAFE"))
            {
                return AstKeywordEnum.Unsafe;
            }
            if ((value == "URL"))
            {
                return AstKeywordEnum.Url;
            }
            if ((value == "USED"))
            {
                return AstKeywordEnum.Used;
            }
            if ((value == "VERBOSELOGGING"))
            {
                return AstKeywordEnum.Verboselogging;
            }
            if ((value == "VISIBILITY"))
            {
                return AstKeywordEnum.Visibility;
            }
            if ((value == "WAIT_AT_LOW_PRIORITY"))
            {
                return AstKeywordEnum.WaitAtLowPriority;
            }
            if ((value == "WINDOWS"))
            {
                return AstKeywordEnum.Windows;
            }
            if ((value == "WITHOUT"))
            {
                return AstKeywordEnum.Without;
            }
            if ((value == "WITNESS"))
            {
                return AstKeywordEnum.Witness;
            }
            if ((value == "XACT_ABORT"))
            {
                return AstKeywordEnum.XactAbort;
            }
            if ((value == "XACT_STATE"))
            {
                return AstKeywordEnum.XactState;
            }
            if ((value == "VARCHAR"))
            {
                return AstKeywordEnum.Varchar;
            }
            if ((value == "NVARCHAR"))
            {
                return AstKeywordEnum.Nvarchar;
            }
            if ((value == "PRECISION"))
            {
                return AstKeywordEnum.Precision;
            }
            return AstKeywordEnum._undefined;
        }
    }
    
    public partial class AstId : AstRule
    {
        
        public AstId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitId(this);
        }
    }
    
    public partial class AstSimpleId : AstRule
    {
        
        public AstSimpleId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSimpleId(this);
        }
    }
    
    public partial class AstComparisonOperator : AstRule
    {
        
        public AstComparisonOperator(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitComparisonOperator(this);
        }
    }
    
    public partial class AstAssignmentOperator : AstRule
    {
        
        public AstAssignmentOperator(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAssignmentOperator(this);
        }
    }
    
    public partial class AstFileSize : AstRule
    {
        
        private AstFileSizeUnity _fileSizeUnity;
        
        public AstFileSize(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileSizeUnity>())
                {
                    this.FileSizeUnity = ((AstFileSizeUnity)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFileSizeUnity FileSizeUnity
        {
            get
            {
                return this._fileSizeUnity;
            }
            set
            {
                this._fileSizeUnity = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileSize(this);
        }
    }
    
    public partial class AstFileSizeUnity : AstRule
    {
        
        public AstFileSizeUnity(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileSizeUnity(this);
        }
    }
    
    public partial class AstFilestreamFilegroupOrPartitionSchemaName : AstRule
    {
        
        private AstId _id;
        
        public AstFilestreamFilegroupOrPartitionSchemaName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilestreamFilegroupOrPartitionSchemaName(this);
        }
    }
    
    public partial class AstActionName : AstRule
    {
        
        private AstId _id;
        
        public AstActionName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitActionName(this);
        }
    }
    
    public partial class AstAggregateName : AstRule
    {
        
        private AstId _id;
        
        public AstAggregateName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAggregateName(this);
        }
    }
    
    public partial class AstAppRoleSchema : AstRule
    {
        
        private AstId _id;
        
        public AstAppRoleSchema(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAppRoleSchema(this);
        }
    }
    
    public partial class AstApplicationRole : AstRule
    {
        
        private AstId _id;
        
        public AstApplicationRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitApplicationRole(this);
        }
    }
    
    public partial class AstAssemblyName : AstRule
    {
        
        private AstId _id;
        
        public AstAssemblyName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAssemblyName(this);
        }
    }
    
    public partial class AstAsymKeyName : AstRule
    {
        
        private AstId _id;
        
        public AstAsymKeyName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsymKeyName(this);
        }
    }
    
    public partial class AstAuditActionGroupName : AstRule
    {
        
        private AstId _id;
        
        public AstAuditActionGroupName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditActionGroupName(this);
        }
    }
    
    public partial class AstAuditGuid : AstRule
    {
        
        private AstId _id;
        
        public AstAuditGuid(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditGuid(this);
        }
    }
    
    public partial class AstAuditName : AstRule
    {
        
        private AstId _id;
        
        public AstAuditName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditName(this);
        }
    }
    
    public partial class AstAuditSpecificationName : AstRule
    {
        
        private AstId _id;
        
        public AstAuditSpecificationName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditSpecificationName(this);
        }
    }
    
    public partial class AstAzureActiveDirectoryPrincipal : AstRule
    {
        
        private AstId _id;
        
        public AstAzureActiveDirectoryPrincipal(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAzureActiveDirectoryPrincipal(this);
        }
    }
    
    public partial class AstBackupName : AstRule
    {
        
        private AstId _id;
        
        public AstBackupName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupName(this);
        }
    }
    
    public partial class AstBindingName : AstRule
    {
        
        private AstId _id;
        
        public AstBindingName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBindingName(this);
        }
    }
    
    public partial class AstCatalogName : AstRule
    {
        
        private AstId _id;
        
        public AstCatalogName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCatalogName(this);
        }
    }
    
    public partial class AstCertName : AstRule
    {
        
        private AstId _id;
        
        public AstCertName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCertName(this);
        }
    }
    
    public partial class AstCertificateName : AstRule
    {
        
        private AstId _id;
        
        public AstCertificateName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCertificateName(this);
        }
    }
    
    public partial class AstClassName : AstRule
    {
        
        private AstId _id;
        
        public AstClassName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassName(this);
        }
    }
    
    public partial class AstCollationName : AstRule
    {
        
        private AstId _id;
        
        public AstCollationName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCollationName(this);
        }
    }
    
    public partial class AstColumnEncryptionKey : AstRule
    {
        
        private AstId _id;
        
        public AstColumnEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnEncryptionKey(this);
        }
    }
    
    public partial class AstColumnName : AstRule
    {
        
        private AstId _id;
        
        public AstColumnName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnName(this);
        }
    }
    
    public partial class AstColumnNameOrArguments : AstRule
    {
        
        private AstId _id;
        
        public AstColumnNameOrArguments(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnNameOrArguments(this);
        }
    }
    
    public partial class AstConstraintName : AstRule
    {
        
        private AstId _id;
        
        public AstConstraintName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConstraintName(this);
        }
    }
    
    public partial class AstCreateServiceName : AstRule
    {
        
        private AstId _id;
        
        public AstCreateServiceName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServiceName(this);
        }
    }
    
    public partial class AstCredentialName : AstRule
    {
        
        private AstId _id;
        
        public AstCredentialName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCredentialName(this);
        }
    }
    
    public partial class AstCryptographicProviderName : AstRule
    {
        
        private AstId _id;
        
        public AstCryptographicProviderName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCryptographicProviderName(this);
        }
    }
    
    public partial class AstDataSourceName : AstRule
    {
        
        private AstId _id;
        
        public AstDataSourceName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDataSourceName(this);
        }
    }
    
    public partial class AstDatabaseName : AstRule
    {
        
        private AstId _id;
        
        public AstDatabaseName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseName(this);
        }
    }
    
    public partial class AstDroppedServiceName : AstRule
    {
        
        private AstId _id;
        
        public AstDroppedServiceName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDroppedServiceName(this);
        }
    }
    
    public partial class AstEncryptorName : AstRule
    {
        
        private AstId _id;
        
        public AstEncryptorName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEncryptorName(this);
        }
    }
    
    public partial class AstEncryptionName : AstRule
    {
        
        private AstId _id;
        
        public AstEncryptionName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEncryptionName(this);
        }
    }
    
    public partial class AstEndpointName : AstRule
    {
        
        private AstId _id;
        
        public AstEndpointName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEndpointName(this);
        }
    }
    
    public partial class AstEventCustomizableAttributue : AstRule
    {
        
        private AstId _id;
        
        public AstEventCustomizableAttributue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventCustomizableAttributue(this);
        }
    }
    
    public partial class AstEventFieldName : AstRule
    {
        
        private AstId _id;
        
        public AstEventFieldName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventFieldName(this);
        }
    }
    
    public partial class AstEventModuleGuid : AstRule
    {
        
        private AstId _id;
        
        public AstEventModuleGuid(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventModuleGuid(this);
        }
    }
    
    public partial class AstEventName : AstRule
    {
        
        private AstId _id;
        
        public AstEventName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventName(this);
        }
    }
    
    public partial class AstEventNotificationName : AstRule
    {
        
        private AstId _id;
        
        public AstEventNotificationName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventNotificationName(this);
        }
    }
    
    public partial class AstEventPackageName : AstRule
    {
        
        private AstId _id;
        
        public AstEventPackageName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventPackageName(this);
        }
    }
    
    public partial class AstEventSessionName : AstRule
    {
        
        private AstId _id;
        
        public AstEventSessionName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionName(this);
        }
    }
    
    public partial class AstEventTypeOrGroup : AstRule
    {
        
        private AstId _id;
        
        public AstEventTypeOrGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventTypeOrGroup(this);
        }
    }
    
    public partial class AstExtType : AstRule
    {
        
        private AstId _id;
        
        public AstExtType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExtType(this);
        }
    }
    
    public partial class AstExternalDataSourceName : AstRule
    {
        
        private AstId _id;
        
        public AstExternalDataSourceName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalDataSourceName(this);
        }
    }
    
    public partial class AstExternalFileFormatName : AstRule
    {
        
        private AstId _id;
        
        public AstExternalFileFormatName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalFileFormatName(this);
        }
    }
    
    public partial class AstExternalPoolName : AstRule
    {
        
        private AstId _id;
        
        public AstExternalPoolName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalPoolName(this);
        }
    }
    
    public partial class AstFileGroupId : AstRule
    {
        
        private AstId _id;
        
        public AstFileGroupId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileGroupId(this);
        }
    }
    
    public partial class AstFileGroupName : AstRule
    {
        
        private AstId _id;
        
        public AstFileGroupName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileGroupName(this);
        }
    }
    
    public partial class AstFunctionName : AstRule
    {
        
        private AstId _id;
        
        public AstFunctionName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFunctionName(this);
        }
    }
    
    public partial class AstGroupName : AstRule
    {
        
        private AstId _id;
        
        public AstGroupName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupName(this);
        }
    }
    
    public partial class AstIndexName : AstRule
    {
        
        private AstId _id;
        
        public AstIndexName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIndexName(this);
        }
    }
    
    public partial class AstLanguage : AstRule
    {
        
        private AstId _id;
        
        public AstLanguage(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLanguage(this);
        }
    }
    
    public partial class AstLibraryName : AstRule
    {
        
        private AstId _id;
        
        public AstLibraryName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLibraryName(this);
        }
    }
    
    public partial class AstLinkedServer : AstRule
    {
        
        private AstId _id;
        
        public AstLinkedServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLinkedServer(this);
        }
    }
    
    public partial class AstLogicalDeviceName : AstRule
    {
        
        private AstId _id;
        
        public AstLogicalDeviceName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLogicalDeviceName(this);
        }
    }
    
    public partial class AstLoginName : AstRule
    {
        
        private AstId _id;
        
        public AstLoginName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLoginName(this);
        }
    }
    
    public partial class AstMasterKey : AstRule
    {
        
        private AstId _id;
        
        public AstMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMasterKey(this);
        }
    }
    
    public partial class AstMethodName : AstRule
    {
        
        private AstId _id;
        
        public AstMethodName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMethodName(this);
        }
    }
    
    public partial class AstModifiedContractName : AstRule
    {
        
        private AstId _id;
        
        public AstModifiedContractName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModifiedContractName(this);
        }
    }
    
    public partial class AstModifiedServiceName : AstRule
    {
        
        private AstId _id;
        
        public AstModifiedServiceName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModifiedServiceName(this);
        }
    }
    
    public partial class AstModuleName : AstRule
    {
        
        private AstId _id;
        
        public AstModuleName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModuleName(this);
        }
    }
    
    public partial class AstNetworkComputer : AstRule
    {
        
        private AstId _id;
        
        public AstNetworkComputer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNetworkComputer(this);
        }
    }
    
    public partial class AstNewApplicationRoleName : AstRule
    {
        
        private AstId _id;
        
        public AstNewApplicationRoleName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNewApplicationRoleName(this);
        }
    }
    
    public partial class AstNewFileGroupName : AstRule
    {
        
        private AstId _id;
        
        public AstNewFileGroupName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNewFileGroupName(this);
        }
    }
    
    public partial class AstNonStaticAttr : AstRule
    {
        
        private AstId _id;
        
        public AstNonStaticAttr(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNonStaticAttr(this);
        }
    }
    
    public partial class AstNotificationName : AstRule
    {
        
        private AstId _id;
        
        public AstNotificationName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNotificationName(this);
        }
    }
    
    public partial class AstObjectName : AstRule
    {
        
        private AstId _id;
        
        public AstObjectName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitObjectName(this);
        }
    }
    
    public partial class AstOwnerName : AstRule
    {
        
        private AstId _id;
        
        public AstOwnerName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOwnerName(this);
        }
    }
    
    public partial class AstPartitionColumnName : AstRule
    {
        
        private AstId _id;
        
        public AstPartitionColumnName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionColumnName(this);
        }
    }
    
    public partial class AstPoolName : AstRule
    {
        
        private AstId _id;
        
        public AstPoolName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPoolName(this);
        }
    }
    
    public partial class AstPredicateCompareName : AstRule
    {
        
        private AstId _id;
        
        public AstPredicateCompareName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateCompareName(this);
        }
    }
    
    public partial class AstPredicateSourceName : AstRule
    {
        
        private AstId _id;
        
        public AstPredicateSourceName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateSourceName(this);
        }
    }
    
    public partial class AstPropertyListName : AstRule
    {
        
        private AstId _id;
        
        public AstPropertyListName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPropertyListName(this);
        }
    }
    
    public partial class AstProviderName : AstRule
    {
        
        private AstId _id;
        
        public AstProviderName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProviderName(this);
        }
    }
    
    public partial class AstQueueName : AstRule
    {
        
        private AstId _id;
        
        public AstQueueName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueName(this);
        }
    }
    
    public partial class AstRelationalSchema : AstRule
    {
        
        private AstId _id;
        
        public AstRelationalSchema(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRelationalSchema(this);
        }
    }
    
    public partial class AstRoleName : AstRule
    {
        
        private AstId _id;
        
        public AstRoleName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRoleName(this);
        }
    }
    
    public partial class AstRouteName : AstRule
    {
        
        private AstId _id;
        
        public AstRouteName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRouteName(this);
        }
    }
    
    public partial class AstRuleName : AstRule
    {
        
        private AstId _id;
        
        public AstRuleName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRuleName(this);
        }
    }
    
    public partial class AstSchemaCollectionName : AstRule
    {
        
        private AstId _id;
        
        public AstSchemaCollectionName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaCollectionName(this);
        }
    }
    
    public partial class AstSchemaId : AstRule
    {
        
        private AstId _id;
        
        public AstSchemaId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaId(this);
        }
    }
    
    public partial class AstSchemaName : AstRule
    {
        
        private AstId _id;
        
        public AstSchemaName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaName(this);
        }
    }
    
    public partial class AstSecurityPolicyName : AstRule
    {
        
        private AstId _id;
        
        public AstSecurityPolicyName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSecurityPolicyName(this);
        }
    }
    
    public partial class AstSecurityPredicateFunctionName : AstRule
    {
        
        private AstId _id;
        
        public AstSecurityPredicateFunctionName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSecurityPredicateFunctionName(this);
        }
    }
    
    public partial class AstSequenceName : AstRule
    {
        
        private AstId _id;
        
        public AstSequenceName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSequenceName(this);
        }
    }
    
    public partial class AstServerName : AstRule
    {
        
        private AstId _id;
        
        public AstServerName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerName(this);
        }
    }
    
    public partial class AstServerRoleName : AstRule
    {
        
        private AstId _id;
        
        public AstServerRoleName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerRoleName(this);
        }
    }
    
    public partial class AstSourceListName : AstRule
    {
        
        private AstId _id;
        
        public AstSourceListName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSourceListName(this);
        }
    }
    
    public partial class AstSqlIdentifier : AstRule
    {
        
        private AstId _id;
        
        public AstSqlIdentifier(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlIdentifier(this);
        }
    }
    
    public partial class AstStaticAttr : AstRule
    {
        
        private AstId _id;
        
        public AstStaticAttr(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStaticAttr(this);
        }
    }
    
    public partial class AstStatisticsName : AstRule
    {
        
        private AstId _id;
        
        public AstStatisticsName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStatisticsName(this);
        }
    }
    
    public partial class AstStoplistName : AstRule
    {
        
        private AstId _id;
        
        public AstStoplistName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStoplistName(this);
        }
    }
    
    public partial class AstSymmetricKeyName : AstRule
    {
        
        private AstId _id;
        
        public AstSymmetricKeyName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSymmetricKeyName(this);
        }
    }
    
    public partial class AstSynonymName : AstRule
    {
        
        private AstId _id;
        
        public AstSynonymName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSynonymName(this);
        }
    }
    
    public partial class AstTableOrViewName : AstRule
    {
        
        private AstId _id;
        
        public AstTableOrViewName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableOrViewName(this);
        }
    }
    
    public partial class AstTableVariable : AstRule
    {
        
        private AstId _id;
        
        public AstTableVariable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableVariable(this);
        }
    }
    
    public partial class AstTargetName : AstRule
    {
        
        private AstId _id;
        
        public AstTargetName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetName(this);
        }
    }
    
    public partial class AstTargetParameterName : AstRule
    {
        
        private AstId _id;
        
        public AstTargetParameterName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetParameterName(this);
        }
    }
    
    public partial class AstTriggerName : AstRule
    {
        
        private AstId _id;
        
        public AstTriggerName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTriggerName(this);
        }
    }
    
    public partial class AstTvfSchemaName : AstRule
    {
        
        private AstId _id;
        
        public AstTvfSchemaName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTvfSchemaName(this);
        }
    }
    
    public partial class AstTypeSchema : AstRule
    {
        
        private AstId _id;
        
        public AstTypeSchema(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTypeSchema(this);
        }
    }
    
    public partial class AstUdtColumnName : AstRule
    {
        
        private AstId _id;
        
        public AstUdtColumnName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUdtColumnName(this);
        }
    }
    
    public partial class AstUnscaledType : AstRule
    {
        
        private AstId _id;
        
        public AstUnscaledType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnscaledType(this);
        }
    }
    
    public partial class AstUserName : AstRule
    {
        
        private AstId _id;
        
        public AstUserName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUserName(this);
        }
    }
    
    public partial class AstWindowsPrincipal : AstRule
    {
        
        private AstId _id;
        
        public AstWindowsPrincipal(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWindowsPrincipal(this);
        }
    }
    
    public partial class AstWorkloadGroupGroupName : AstRule
    {
        
        private AstId _id;
        
        public AstWorkloadGroupGroupName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWorkloadGroupGroupName(this);
        }
    }
    
    public partial class AstWorkloadGroupPoolName : AstRule
    {
        
        private AstId _id;
        
        public AstWorkloadGroupPoolName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, null)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this.Id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWorkloadGroupPoolName(this);
        }
    }
}
