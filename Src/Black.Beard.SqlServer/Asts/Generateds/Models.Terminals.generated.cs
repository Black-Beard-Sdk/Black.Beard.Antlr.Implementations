#nullable disable
// Generated by Models.Terminals : mardi 11 avril 2023
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Asts.TSql
{
    using System;
    using Bb.Parsers;
    using Antlr4.Runtime;
    using Antlr4.Runtime.Tree;
    
    
    /// <summary>
    /// null
    /// 	 : NULL_
    /// </summary>
    public partial class AstNull : AstTerminalString
    {
        
        public AstNull(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstNull(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstNull(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstNull(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNull(this);
        }
    }
    
    /// <summary>
    /// empty_statement
    /// 	 : SEMI
    /// </summary>
    public partial class AstEmptyStatement : AstTerminalString
    {
        
        public AstEmptyStatement(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstEmptyStatement(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstEmptyStatement(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstEmptyStatement(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEmptyStatement(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_from_clause_start
    /// 	 : FROM
    /// </summary>
    public partial class AstAlterAssemblyFromClauseStart : AstTerminalString
    {
        
        public AstAlterAssemblyFromClauseStart(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstAlterAssemblyFromClauseStart(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAlterAssemblyFromClauseStart(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstAlterAssemblyFromClauseStart(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyFromClauseStart(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_drop
    /// 	 : DROP
    /// </summary>
    public partial class AstAlterAssemblyDrop : AstTerminalString
    {
        
        public AstAlterAssemblyDrop(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstAlterAssemblyDrop(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAlterAssemblyDrop(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstAlterAssemblyDrop(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyDrop(this);
        }
    }
    
    /// <summary>
    /// network_file_start
    /// 	 : DOUBLE_BACK_SLASH
    /// </summary>
    public partial class AstNetworkFileStart : AstTerminalString
    {
        
        public AstNetworkFileStart(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstNetworkFileStart(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstNetworkFileStart(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstNetworkFileStart(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNetworkFileStart(this);
        }
    }
    
    /// <summary>
    /// file_directory_path_separator
    /// 	 : BACKSLASH
    /// </summary>
    public partial class AstFileDirectoryPathSeparator : AstTerminalString
    {
        
        public AstFileDirectoryPathSeparator(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstFileDirectoryPathSeparator(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstFileDirectoryPathSeparator(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstFileDirectoryPathSeparator(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileDirectoryPathSeparator(this);
        }
    }
    
    /// <summary>
    /// local_drive
    /// 	 : DISK_DRIVE
    /// </summary>
    public partial class AstLocalDrive : AstTerminalString
    {
        
        public AstLocalDrive(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstLocalDrive(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstLocalDrive(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstLocalDrive(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLocalDrive(this);
        }
    }
    
    /// <summary>
    /// multiple_local_file_start
    /// 	 : SINGLE_QUOTE
    /// </summary>
    public partial class AstMultipleLocalFileStart : AstTerminalString
    {
        
        public AstMultipleLocalFileStart(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstMultipleLocalFileStart(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstMultipleLocalFileStart(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstMultipleLocalFileStart(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMultipleLocalFileStart(this);
        }
    }
    
    /// <summary>
    /// mirroring_partner
    /// 	 : PARTNER
    /// </summary>
    public partial class AstMirroringPartner : AstTerminalString
    {
        
        public AstMirroringPartner(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstMirroringPartner(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstMirroringPartner(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstMirroringPartner(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMirroringPartner(this);
        }
    }
    
    /// <summary>
    /// mirroring_witness
    /// 	 : WITNESS
    /// </summary>
    public partial class AstMirroringWitness : AstTerminalString
    {
        
        public AstMirroringWitness(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstMirroringWitness(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstMirroringWitness(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstMirroringWitness(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMirroringWitness(this);
        }
    }
    
    /// <summary>
    /// witness_partner_equal
    /// 	 : EQUAL
    /// </summary>
    public partial class AstWitnessPartnerEqual : AstTerminalString
    {
        
        public AstWitnessPartnerEqual(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstWitnessPartnerEqual(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstWitnessPartnerEqual(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstWitnessPartnerEqual(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWitnessPartnerEqual(this);
        }
    }
    
    /// <summary>
    /// empty_value
    /// 	 : DOUBLE_QUOTE_ID
    /// </summary>
    public partial class AstEmptyValue : AstTerminalString
    {
        
        public AstEmptyValue(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstEmptyValue(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstEmptyValue(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstEmptyValue(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEmptyValue(this);
        }
    }
    
    /// <summary>
    /// ipv4
    /// 	 : IPV4_ADDR
    /// </summary>
    public partial class AstIpv4 : AstTerminalString
    {
        
        public AstIpv4(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstIpv4(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstIpv4(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstIpv4(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIpv4(this);
        }
    }
    
    /// <summary>
    /// ipv6
    /// 	 : IPV6_ADDR
    /// </summary>
    public partial class AstIpv6 : AstTerminalString
    {
        
        public AstIpv6(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstIpv6(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstIpv6(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstIpv6(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIpv6(this);
        }
    }
    
    /// <summary>
    /// float
    /// 	 : FLOAT
    /// </summary>
    public partial class AstFloat : AstTerminalString
    {
        
        public AstFloat(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstFloat(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstFloat(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstFloat(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFloat(this);
        }
    }
    
    /// <summary>
    /// decimal
    /// 	 : DECIMAL
    /// </summary>
    public partial class AstDecimal : AstTerminalString
    {
        
        public AstDecimal(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstDecimal(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstDecimal(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstDecimal(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecimal(this);
        }
    }
    
    /// <summary>
    /// binary_
    /// 	 : BINARY
    /// </summary>
    public partial class AstBinary : AstTerminalString
    {
        
        public AstBinary(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstBinary(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstBinary(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstBinary(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBinary(this);
        }
    }
    
    /// <summary>
    /// local_id
    /// 	 : LOCAL_ID
    /// </summary>
    public partial class AstLocalId : AstTerminalString
    {
        
        public AstLocalId(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstLocalId(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstLocalId(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstLocalId(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLocalId(this);
        }
    }
    
    /// <summary>
    /// stringtext
    /// 	 : STRING
    /// </summary>
    public partial class AstStringtext : AstTerminalString
    {
        
        public AstStringtext(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstStringtext(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstStringtext(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstStringtext(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStringtext(this);
        }
    }
    
    /// <summary>
    /// parameter
    /// 	 : PLACEHOLDER
    /// </summary>
    public partial class AstParameter : AstTerminalString
    {
        
        public AstParameter(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstParameter(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstParameter(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstParameter(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitParameter(this);
        }
    }
    
    /// <summary>
    /// star_asterisk
    /// 	 : STAR
    /// </summary>
    public partial class AstStarAsterisk : AstTerminalString
    {
        
        public AstStarAsterisk(ITerminalNode t) : 
                base(t, t.GetText())
        {
        }
        
        public AstStarAsterisk(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstStarAsterisk(ParserRuleContext ctx, string value) : 
                base(ctx, value)
        {
        }
        
        public AstStarAsterisk(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStarAsterisk(this);
        }
    }
}
