//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Asts.TSql
{
    using System;
    using Bb.Parsers;
    using Antlr4.Runtime;
    using Antlr4.Runtime.Tree;
    
    
    /// <summary>
    /// tsql_file
    /// 	 : batch*  EOF
    /// 	 | execute_body_batch  go_statement*  EOF
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTsqlFile
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// batch
    /// 	 : go_statement
    /// 	 | execute_body_batch?  go_statement sql_clauses  go_statement*
    /// 	 | batch_level_statement  go_statement*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBatch
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// sql_clauses
    /// 	 : sql_clause+
    /// </summary>
    /// <remarks>
    /// Strategy : ClassList
    /// </remarks>
    public partial class AstSqlClauses
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// sql_clause
    /// 	 : dml_clause  SEMI?
    /// 	 | cfl_statement  SEMI?
    /// 	 | another_statement  SEMI?
    /// 	 | ddl_clause  SEMI?
    /// 	 | dbcc_special  SEMI?
    /// 	 | dbcc_clause  SEMI?
    /// 	 | backup_statement  SEMI?
    /// 	 | SEMI
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSqlClause
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// block_statement
    /// 	 : BEGIN  SEMI?  sql_clause*  END  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstBlockStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// break_statement
    /// 	 : BREAK  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBreakStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// continue_statement
    /// 	 : CONTINUE  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstContinueStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// goto_statement
    /// 	 : GOTO  id_  SEMI?
    /// 	 | id_  COLON  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGotoStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// return_statement
    /// 	 : RETURN  expression?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstReturnStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// if_statement
    /// 	 : IF  search_condition    ELSE  ?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstIfStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// throw_statement
    /// 	 : THROW  throw_error_number  COMMA  throw_message  COMMA  throw_state?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstThrowStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// throw_error_number
    /// 	 : DECIMAL
    /// 	 | LOCAL_ID
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstThrowErrorNumber
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// throw_message
    /// 	 : STRING
    /// 	 | LOCAL_ID
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstThrowMessage
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// throw_state
    /// 	 : DECIMAL
    /// 	 | LOCAL_ID
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstThrowState
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// try_catch_statement
    /// 	 : BEGIN  TRY  SEMI?    END  TRY  SEMI?  BEGIN  CATCH  SEMI?    END  CATCH  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTryCatchStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// waitfor_statement
    /// 	 : WAITFOR  receive_statement?  COMMA?  DELAY TIME TIMEOUT  time?  expression?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstWaitforStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// while_statement
    /// 	 : WHILE  search_condition  sql_clause BREAK  SEMI? CONTINUE  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstWhileStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// print_statement
    /// 	 : PRINT  expression DOUBLE_QUOTE_ID  COMMA  LOCAL_ID*  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPrintStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// raiseerror_statement
    /// 	 : RAISERROR  LR_BRACKET    COMMA    COMMA    COMMA  constant_LOCAL_ID NULL_*  RR_BRACKET  WITH  LOG SETERROR NOWAIT?  SEMI?
    /// 	 | RAISERROR  DECIMAL    COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRaiseerrorStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// empty_statement
    /// 	 : SEMI
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstEmptyStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_application_role
    /// 	 : ALTER  APPLICATION  ROLE  application_role  WITH  COMMA?  NAME  EQUAL  new_application_role_name?  COMMA?  PASSWORD  EQUAL  ?  COMMA?  DEFAULT_SCHEMA  EQUAL  app_role_schema?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterApplicationRole
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_application_role
    /// 	 : CREATE  APPLICATION  ROLE  application_role  WITH  COMMA?  PASSWORD  EQUAL  ?  COMMA?  DEFAULT_SCHEMA  EQUAL  app_role_schema?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateApplicationRole
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_aggregate
    /// 	 : DROP  AGGREGATE  IF  EXISTS?  schema_name  DOT?  aggregate_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropAggregate
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_application_role
    /// 	 : DROP  APPLICATION  ROLE  role_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropApplicationRole
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_assembly
    /// 	 : alter_assembly_start  assembly_name  alter_assembly_clause
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAssembly
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_assembly_start
    /// 	 : ALTER  ASSEMBLY
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterAssemblyStart
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_assembly_clause
    /// 	 : alter_assembly_from_clause?  alter_assembly_with_clause?  alter_assembly_drop_clause?  alter_assembly_add_clause?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAssemblyClause
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_assembly_from_clause
    /// 	 : alter_assembly_from_clause_start  client_assembly_specifier alter_assembly_file_bits
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAssemblyFromClause
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_assembly_from_clause_start
    /// 	 : FROM
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAlterAssemblyFromClauseStart
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_assembly_drop_clause
    /// 	 : alter_assembly_drop  alter_assembly_drop_multiple_files
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAssemblyDropClause
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_assembly_drop_multiple_files
    /// 	 : ALL
    /// 	 | multiple_local_files
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterAssemblyDropMultipleFiles
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_assembly_drop
    /// 	 : DROP
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAlterAssemblyDrop
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_assembly_add_clause
    /// 	 : alter_asssembly_add_clause_start  alter_assembly_client_file_clause
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAssemblyAddClause
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_asssembly_add_clause_start
    /// 	 : ADD  FILE  FROM
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterAsssemblyAddClauseStart
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_assembly_client_file_clause
    /// 	 : alter_assembly_file_name  alter_assembly_as  id_?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAssemblyClientFileClause
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_assembly_file_name
    /// 	 : STRING
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAlterAssemblyFileName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_assembly_file_bits
    /// 	 : alter_assembly_as  id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAssemblyFileBits
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_assembly_as
    /// 	 : AS
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAlterAssemblyAs
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_assembly_with_clause
    /// 	 : alter_assembly_with  assembly_option
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAssemblyWithClause
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_assembly_with
    /// 	 : WITH
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAlterAssemblyWith
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// client_assembly_specifier
    /// 	 : network_file_share
    /// 	 | local_file
    /// 	 | STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstClientAssemblySpecifier
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// assembly_option
    /// 	 : PERMISSION_SET  EQUAL  SAFE EXTERNAL_ACCESS UNSAFE
    /// 	 | VISIBILITY  EQUAL  on_off
    /// 	 | UNCHECKED  DATA
    /// 	 | assembly_option  COMMA
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAssemblyOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// network_file_share
    /// 	 : network_file_start  network_computer  file_path
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstNetworkFileShare
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// network_file_start
    /// 	 : DOUBLE_BACK_SLASH
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstNetworkFileStart
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// file_path
    /// 	 : file_directory_path_separator  file_path
    /// 	 | id_
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFilePath
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// file_directory_path_separator
    /// 	 : BACKSLASH
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstFileDirectoryPathSeparator
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// local_file
    /// 	 : local_drive  file_path
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstLocalFile
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// local_drive
    /// 	 : DISK_DRIVE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstLocalDrive
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// multiple_local_files
    /// 	 : multiple_local_file_start  local_file  SINGLE_QUOTE  COMMA
    /// 	 | local_file
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstMultipleLocalFiles
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// multiple_local_file_start
    /// 	 : SINGLE_QUOTE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstMultipleLocalFileStart
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_assembly
    /// 	 : CREATE  ASSEMBLY  assembly_name  AUTHORIZATION  owner_name?  FROM  binary_content_nexts  WITH  PERMISSION_SET  EQUAL  SAFE EXTERNAL_ACCESS UNSAFE?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateAssembly
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// binary_content_nexts
    /// 	 : binary_content_next+
    /// </summary>
    /// <remarks>
    /// Strategy : ClassList
    /// </remarks>
    public partial class AstBinaryContentNexts
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// binary_content_next
    /// 	 : COMMA?  binary_content
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstBinaryContentNext
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// binary_content
    /// 	 : STRING
    /// 	 | BINARY
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBinaryContent
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_assembly
    /// 	 : DROP  ASSEMBLY  IF  EXISTS?  COMMA?  assembly_name+  WITH  NO  DEPENDENTS?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropAssembly
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_asymmetric_key
    /// 	 : alter_asymmetric_key_start  asym_key_name  asymmetric_key_option REMOVE  PRIVATE  KEY
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAsymmetricKey
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_asymmetric_key_start
    /// 	 : ALTER  ASYMMETRIC  KEY
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterAsymmetricKeyStart
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// asymmetric_key_option
    /// 	 : asymmetric_key_option_start  asymmetric_key_password_change_option  COMMA  asymmetric_key_password_change_option?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAsymmetricKeyOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// asymmetric_key_option_start
    /// 	 : WITH  PRIVATE  KEY  LR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAsymmetricKeyOptionStart
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// asymmetric_key_password_change_option
    /// 	 : DECRYPTION  BY  PASSWORD  EQUAL  STRING
    /// 	 | ENCRYPTION  BY  PASSWORD  EQUAL  STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAsymmetricKeyPasswordChangeOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_asymmetric_key
    /// 	 : CREATE  ASYMMETRIC  KEY  asym_key_name  AUTHORIZATION  database_name?  FROM  FILE  EQUAL  STRING EXECUTABLE_FILE  EQUAL  STRING ASSEMBLY  assembly_name PROVIDER  provider_name?  WITH  ALGORITHM  EQUAL  RSA_4096 RSA_3072 RSA_2048 RSA_1024 RSA_512 PROVIDER_KEY_NAME  EQUAL   CREATION_DISPOSITION  EQUAL  CREATE_NEW OPEN_EXISTING?  ENCRYPTION  BY  PASSWORD  EQUAL  ?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateAsymmetricKey
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_asymmetric_key
    /// 	 : DROP  ASYMMETRIC  KEY    REMOVE  PROVIDER  KEY?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropAsymmetricKey
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_authorization
    /// 	 : alter_authorization_start  class_type  colon_colon?    entity_to  authorization_grantee
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAuthorization
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// authorization_grantee
    /// 	 : 
    /// 	 | SCHEMA  OWNER
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAuthorizationGrantee
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// entity_to
    /// 	 : TO
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstEntityTo
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// colon_colon
    /// 	 : DOUBLE_COLON
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstColonColon
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_authorization_start
    /// 	 : ALTER  AUTHORIZATION  ON
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterAuthorizationStart
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_authorization_for_sql_database
    /// 	 : alter_authorization_start  class_type_for_sql_database  colon_colon?    entity_to  authorization_grantee
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAuthorizationForSqlDatabase
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_authorization_for_azure_dw
    /// 	 : alter_authorization_start  class_type_for_azure_dw  colon_colon?    entity_to  authorization_grantee
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAuthorizationForAzureDw
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_authorization_for_parallel_dw
    /// 	 : alter_authorization_start  class_type_for_parallel_dw  colon_colon?    entity_to  authorization_grantee
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAuthorizationForParallelDw
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// class_type
    /// 	 : OBJECT
    /// 	 | ASSEMBLY
    /// 	 | ASYMMETRIC  KEY
    /// 	 | AVAILABILITY  GROUP
    /// 	 | CERTIFICATE
    /// 	 | CONTRACT
    /// 	 | TYPE
    /// 	 | DATABASE
    /// 	 | ENDPOINT
    /// 	 | FULLTEXT  CATALOG
    /// 	 | FULLTEXT  STOPLIST
    /// 	 | MESSAGE  TYPE
    /// 	 | REMOTE  SERVICE  BINDING
    /// 	 | ROLE
    /// 	 | ROUTE
    /// 	 | SCHEMA
    /// 	 | SEARCH  PROPERTY  LIST
    /// 	 | SERVER  ROLE
    /// 	 | SERVICE
    /// 	 | SYMMETRIC  KEY
    /// 	 | XML  SCHEMA  COLLECTION
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstClassType
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// class_type_for_sql_database
    /// 	 : OBJECT
    /// 	 | ASSEMBLY
    /// 	 | ASYMMETRIC  KEY
    /// 	 | CERTIFICATE
    /// 	 | TYPE
    /// 	 | DATABASE
    /// 	 | FULLTEXT  CATALOG
    /// 	 | FULLTEXT  STOPLIST
    /// 	 | ROLE
    /// 	 | SCHEMA
    /// 	 | SEARCH  PROPERTY  LIST
    /// 	 | SYMMETRIC  KEY
    /// 	 | XML  SCHEMA  COLLECTION
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstClassTypeForSqlDatabase
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// class_type_for_azure_dw
    /// 	 : SCHEMA
    /// 	 | OBJECT
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstClassTypeForAzureDw
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// class_type_for_parallel_dw
    /// 	 : DATABASE
    /// 	 | SCHEMA
    /// 	 | OBJECT
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstClassTypeForParallelDw
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// class_type_for_grant
    /// 	 : APPLICATION  ROLE
    /// 	 | ASSEMBLY
    /// 	 | ASYMMETRIC  KEY
    /// 	 | AUDIT
    /// 	 | AVAILABILITY  GROUP
    /// 	 | BROKER  PRIORITY
    /// 	 | CERTIFICATE
    /// 	 | COLUMN  ENCRYPTION MASTER  KEY
    /// 	 | CONTRACT
    /// 	 | CREDENTIAL
    /// 	 | CRYPTOGRAPHIC  PROVIDER
    /// 	 | DATABASE  AUDIT  SPECIFICATION ENCRYPTION  KEY EVENT  SESSION SCOPED  CONFIGURATION CREDENTIAL RESOURCE  GOVERNOR?
    /// 	 | ENDPOINT
    /// 	 | EVENT  SESSION
    /// 	 | NOTIFICATION  DATABASE OBJECT SERVER
    /// 	 | EXTERNAL  DATA  SOURCE FILE  FORMAT LIBRARY RESOURCE  POOL TABLE CATALOG STOPLIST
    /// 	 | LOGIN
    /// 	 | MASTER  KEY
    /// 	 | MESSAGE  TYPE
    /// 	 | OBJECT
    /// 	 | PARTITION  FUNCTION SCHEME
    /// 	 | REMOTE  SERVICE  BINDING
    /// 	 | RESOURCE  GOVERNOR
    /// 	 | ROLE
    /// 	 | ROUTE
    /// 	 | SCHEMA
    /// 	 | SEARCH  PROPERTY  LIST
    /// 	 | SERVER  AUDIT  SPECIFICATION? ROLE?
    /// 	 | SERVICE
    /// 	 | SQL  LOGIN
    /// 	 | SYMMETRIC  KEY
    /// 	 | TRIGGER  DATABASE SERVER
    /// 	 | TYPE
    /// 	 | USER
    /// 	 | XML  SCHEMA  COLLECTION
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstClassTypeForGrant
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_availability_group
    /// 	 : DROP  AVAILABILITY  GROUP  group_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropAvailabilityGroup
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_availability_group
    /// 	 : alter_availability_group_start  alter_availability_group_options
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAvailabilityGroup
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_availability_group_start
    /// 	 : ALTER  AVAILABILITY  GROUP  group_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterAvailabilityGroupStart
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_availability_group_options
    /// 	 : SET  LR_BRACKET  AUTOMATED_BACKUP_PREFERENCE  EQUAL  PRIMARY SECONDARY_ONLY SECONDARY NONE FAILURE_CONDITION_LEVEL  EQUAL  DECIMAL HEALTH_CHECK_TIMEOUT  EQUAL   DB_FAILOVER  EQUAL  on_off REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT  EQUAL  DECIMAL  RR_BRACKET
    /// 	 | ADD  DATABASE  database_name
    /// 	 | REMOVE  DATABASE  database_name
    /// 	 | ADD  REPLICA  ON  server_instance  WITH  LR_BRACKET  ENDPOINT_URL  EQUAL  STRING?  COMMA?  AVAILABILITY_MODE  EQUAL  SYNCHRONOUS_COMMIT ASYNCHRONOUS_COMMIT?  COMMA?  FAILOVER_MODE  EQUAL  AUTOMATIC MANUAL?  COMMA?  SEEDING_MODE  EQUAL  AUTOMATIC MANUAL?  COMMA?  BACKUP_PRIORITY  EQUAL  DECIMAL?  COMMA?  PRIMARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  READ_WRITE ALL  RR_BRACKET?  COMMA?  SECONDARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  READ_ONLY  RR_BRACKET?  RR_BRACKET
    /// 	 | SECONDARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  NO READ_ONLY ALL READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  STRING  RR_BRACKET
    /// 	 | PRIMARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  NO READ_ONLY ALL READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  COMMA?  STRING* NONE  RR_BRACKET SESSION_TIMEOUT  EQUAL  
    /// 	 | MODIFY  REPLICA  ON  server_instance  WITH  LR_BRACKET  ENDPOINT_URL  EQUAL  STRING AVAILABILITY_MODE  EQUAL  SYNCHRONOUS_COMMIT ASYNCHRONOUS_COMMIT FAILOVER_MODE  EQUAL  AUTOMATIC MANUAL SEEDING_MODE  EQUAL  AUTOMATIC MANUAL BACKUP_PRIORITY  EQUAL  DECIMAL SECONDARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  NO READ_ONLY ALL READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  STRING  RR_BRACKET PRIMARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  NO READ_ONLY ALL READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  COMMA?  STRING* NONE  RR_BRACKET SESSION_TIMEOUT  EQUAL    RR_BRACKET
    /// 	 | REMOVE  REPLICA  ON  STRING
    /// 	 | JOIN
    /// 	 | JOIN  AVAILABILITY  GROUP  ON  COMMA?    WITH  LR_BRACKET  LISTENER_URL  EQUAL  STRING  COMMA  AVAILABILITY_MODE  EQUAL  SYNCHRONOUS_COMMIT ASYNCHRONOUS_COMMIT  COMMA  FAILOVER_MODE  EQUAL  MANUAL  COMMA  SEEDING_MODE  EQUAL  AUTOMATIC MANUAL  RR_BRACKET+
    /// 	 | MODIFY  AVAILABILITY  GROUP  ON  COMMA?    WITH  LR_BRACKET  LISTENER_URL  EQUAL  STRING  COMMA?  AVAILABILITY_MODE  EQUAL  SYNCHRONOUS_COMMIT ASYNCHRONOUS_COMMIT?  COMMA?  FAILOVER_MODE  EQUAL  MANUAL?  COMMA?  SEEDING_MODE  EQUAL  AUTOMATIC MANUAL?  RR_BRACKET+
    /// 	 | GRANT  CREATE  ANY  DATABASE
    /// 	 | DENY  CREATE  ANY  DATABASE
    /// 	 | FAILOVER
    /// 	 | FORCE_FAILOVER_ALLOW_DATA_LOSS
    /// 	 | ADD  LISTENER    LR_BRACKET  WITH  DHCP  ON  LR_BRACKET  ip_v4_failover  ip_v4_failover  RR_BRACKET WITH  IP  LR_BRACKET  COMMA?  LR_BRACKET  ip_v4_failover  COMMA  ip_v4_failover ip_v6_failover  RR_BRACKET+  RR_BRACKET  COMMA  PORT  EQUAL  DECIMAL?  RR_BRACKET
    /// 	 | MODIFY  LISTENER  ADD  IP  LR_BRACKET  ip_v4_failover  ip_v4_failover ip_v6_failover  RR_BRACKET PORT  EQUAL  DECIMAL
    /// 	 | RESTART  LISTENER  STRING
    /// 	 | REMOVE  LISTENER  STRING
    /// 	 | OFFLINE
    /// 	 | WITH  LR_BRACKET  DTC_SUPPORT  EQUAL  PER_DB  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterAvailabilityGroupOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// server_instance
    /// 	 : STRING
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstServerInstance
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// ip_v4_failover
    /// 	 : STRING
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstIpV4Failover
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// ip_v6_failover
    /// 	 : STRING
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstIpV6Failover
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_or_alter_broker_priority
    /// 	 : CREATE ALTER  BROKER  PRIORITY    FOR  CONVERSATION  SET  LR_BRACKET  CONTRACT_NAME  EQUAL  id_ ANY  COMMA??  LOCAL_SERVICE_NAME  EQUAL  DOUBLE_FORWARD_SLASH?  id_ ANY  COMMA??  REMOTE_SERVICE_NAME  EQUAL   ANY  COMMA??  PRIORITY_LEVEL  EQUAL   DEFAULT?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateOrAlterBrokerPriority
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_broker_priority
    /// 	 : DROP  BROKER  PRIORITY  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropBrokerPriority
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_certificate
    /// 	 : ALTER  CERTIFICATE  certificate_name  REMOVE  PRIVATE_KEY WITH  PRIVATE  KEY  LR_BRACKET  FILE  EQUAL  STRING  COMMA? DECRYPTION  BY  PASSWORD  EQUAL  STRING  COMMA? ENCRYPTION  BY  PASSWORD  EQUAL  STRING  COMMA?+  RR_BRACKET WITH  ACTIVE  FOR  BEGIN_DIALOG  EQUAL  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterCertificate
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_column_encryption_key
    /// 	 : ALTER  COLUMN  ENCRYPTION  KEY  column_encryption_key  ADD DROP  VALUE  LR_BRACKET  COLUMN_MASTER_KEY  EQUAL    COMMA  ALGORITHM  EQUAL    COMMA  ENCRYPTED_VALUE  EQUAL  BINARY?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterColumnEncryptionKey
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_column_encryption_key
    /// 	 : CREATE  COLUMN  ENCRYPTION  KEY  column_encryption_key  WITH  VALUES  LR_BRACKET  COMMA?  COLUMN_MASTER_KEY  EQUAL    COMMA  ALGORITHM  EQUAL    COMMA  ENCRYPTED_VALUE  EQUAL    RR_BRACKET  COMMA?+
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateColumnEncryptionKey
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_certificate
    /// 	 : DROP  CERTIFICATE  certificate_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropCertificate
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_column_encryption_key
    /// 	 : DROP  COLUMN  ENCRYPTION  KEY  encryptor_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropColumnEncryptionKey
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_column_master_key
    /// 	 : DROP  COLUMN  MASTER  KEY  master_key
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropColumnMasterKey
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_contract
    /// 	 : DROP  CONTRACT  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropContract
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_credential
    /// 	 : DROP  CREDENTIAL  credential_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropCredential
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_cryptograhic_provider
    /// 	 : DROP  CRYPTOGRAPHIC  PROVIDER  provider_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropCryptograhicProvider
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_database
    /// 	 : DROP  DATABASE  IF  EXISTS?  COMMA?  database_name+
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropDatabase
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_database_audit_specification
    /// 	 : DROP  DATABASE  AUDIT  SPECIFICATION  audit_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropDatabaseAuditSpecification
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_database_encryption_key
    /// 	 : DROP  DATABASE  ENCRYPTION  KEY
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropDatabaseEncryptionKey
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_database_scoped_credential
    /// 	 : DROP  DATABASE  SCOPED  CREDENTIAL  credential_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropDatabaseScopedCredential
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_default
    /// 	 : DROP  DEFAULT  IF  EXISTS?  COMMA?  schema_name  DOT?  schema_name
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropDefault
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_endpoint
    /// 	 : DROP  ENDPOINT  endpoint_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropEndpoint
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_external_data_source
    /// 	 : DROP  EXTERNAL  DATA  SOURCE  external_data_source_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropExternalDataSource
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_external_file_format
    /// 	 : DROP  EXTERNAL  FILE  FORMAT  external_file_format_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropExternalFileFormat
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_external_library
    /// 	 : DROP  EXTERNAL  LIBRARY  library_name  AUTHORIZATION  owner_name?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropExternalLibrary
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_external_resource_pool
    /// 	 : DROP  EXTERNAL  RESOURCE  POOL  pool_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropExternalResourcePool
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_external_table
    /// 	 : DROP  EXTERNAL  TABLE  database_name  DOT?  schema_name  DOT?  tableName
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropExternalTable
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_event_notifications
    /// 	 : DROP  EVENT  NOTIFICATION  COMMA?  notification_name+  ON  SERVER DATABASE QUEUE  queue_name
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropEventNotifications
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_event_session
    /// 	 : DROP  EVENT  SESSION  event_session_name  ON  SERVER
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropEventSession
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_fulltext_catalog
    /// 	 : DROP  FULLTEXT  CATALOG  catalog_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropFulltextCatalog
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_fulltext_index
    /// 	 : DROP  FULLTEXT  INDEX  ON  schema_name  DOT?  tableName
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropFulltextIndex
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_fulltext_stoplist
    /// 	 : DROP  FULLTEXT  STOPLIST  stoplist_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropFulltextStoplist
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_login
    /// 	 : DROP  LOGIN  login_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropLogin
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_master_key
    /// 	 : DROP  MASTER  KEY
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropMasterKey
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_message_type
    /// 	 : DROP  MESSAGE  TYPE  message_type_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropMessageType
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// message_type_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstMessageTypeName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_partition_function
    /// 	 : DROP  PARTITION  FUNCTION  partition_function_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropPartitionFunction
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// partition_function_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstPartitionFunctionName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_partition_scheme
    /// 	 : DROP  PARTITION  SCHEME  partition_scheme_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropPartitionScheme
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// partition_scheme_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstPartitionSchemeName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_queue
    /// 	 : DROP  QUEUE  database_name  DOT?  schema_name  DOT?  queue_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropQueue
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_remote_service_binding
    /// 	 : DROP  REMOTE  SERVICE  BINDING  binding_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropRemoteServiceBinding
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_resource_pool
    /// 	 : DROP  RESOURCE  POOL  pool_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropResourcePool
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_db_role
    /// 	 : DROP  ROLE  IF  EXISTS?  role_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropDbRole
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_route
    /// 	 : DROP  ROUTE  route_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropRoute
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_rule
    /// 	 : DROP  RULE  IF  EXISTS?  COMMA?  schema_name  DOT?  rule_name?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropRule
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_schema
    /// 	 : DROP  SCHEMA  IF  EXISTS?  schema_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropSchema
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_search_property_list
    /// 	 : DROP  SEARCH  PROPERTY  LIST  property_list_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropSearchPropertyList
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_security_policy
    /// 	 : DROP  SECURITY  POLICY  IF  EXISTS?  schema_name  DOT?  security_policy_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropSecurityPolicy
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_sequence
    /// 	 : DROP  SEQUENCE  IF  EXISTS?  COMMA?  database_name  DOT?  schema_name  DOT?  sequence_name?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropSequence
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_server_audit
    /// 	 : DROP  SERVER  AUDIT  audit_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropServerAudit
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_server_audit_specification
    /// 	 : DROP  SERVER  AUDIT  SPECIFICATION  audit_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropServerAuditSpecification
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_server_role
    /// 	 : DROP  SERVER  ROLE  role_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropServerRole
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_service
    /// 	 : DROP  SERVICE  dropped_service_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropService
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_signature
    /// 	 : DROP  COUNTER?  SIGNATURE  FROM  schema_name  DOT?  module_name  BY  COMMA?  CERTIFICATE  certificate_name COMMA?  ASYMMETRIC  KEY  asym_key_name+
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropSignature
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_statistics_name_azure_dw_and_pdw
    /// 	 : DROP  STATISTICS  schema_name  DOT?  object_name  DOT  statistics_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropStatisticsNameAzureDwAndPdw
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_symmetric_key
    /// 	 : DROP  SYMMETRIC  KEY  symmetric_key_name  REMOVE  PROVIDER  KEY?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropSymmetricKey
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_synonym
    /// 	 : DROP  SYNONYM  IF  EXISTS?  schema_name  DOT?  synonym_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropSynonym
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_user
    /// 	 : DROP  USER  IF  EXISTS?  user_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropUser
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_workload_group
    /// 	 : DROP  WORKLOAD  GROUP  group_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropWorkloadGroup
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_xml_schema_collection
    /// 	 : DROP  XML  SCHEMA  COLLECTION  relational_schema  DOT?  sql_identifier
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropXmlSchemaCollection
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// disable_trigger
    /// 	 : DISABLE  TRIGGER  COMMA?  schema_name  DOT?  trigger_name+ ALL  ON  schema_name  DOT?  object_name DATABASE ALL  SERVER
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDisableTrigger
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// enable_trigger
    /// 	 : ENABLE  TRIGGER  COMMA?  schema_name  DOT?  trigger_name+ ALL  ON  schema_name  DOT?  object_name DATABASE ALL  SERVER
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEnableTrigger
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// lock_table
    /// 	 : LOCK  TABLE  full_table_name  IN  SHARE EXCLUSIVE  MODE  WAIT   NOWAIT?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstLockTable
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// truncate_table
    /// 	 : TRUNCATE  TABLE  full_table_name  WITH  LR_BRACKET  PARTITIONS  LR_BRACKET  COMMA?  DECIMAL DECIMAL  TO  DECIMAL+  RR_BRACKET  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstTruncateTable
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_column_master_key
    /// 	 : CREATE  COLUMN  MASTER  KEY    WITH  LR_BRACKET  KEY_STORE_PROVIDER_NAME  EQUAL    COMMA  KEY_PATH  EQUAL    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateColumnMasterKey
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_credential
    /// 	 : ALTER  CREDENTIAL  credential_name  WITH  IDENTITY  EQUAL    COMMA  SECRET  EQUAL  ?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterCredential
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_credential
    /// 	 : CREATE  CREDENTIAL  credential_name  WITH  IDENTITY  EQUAL    COMMA  SECRET  EQUAL  ?  FOR  CRYPTOGRAPHIC  PROVIDER  cryptographic_provider_name?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateCredential
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_cryptographic_provider
    /// 	 : ALTER  CRYPTOGRAPHIC  PROVIDER  provider_name  FROM  FILE  EQUAL  ?  ENABLE DISABLE?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterCryptographicProvider
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_cryptographic_provider
    /// 	 : CREATE  CRYPTOGRAPHIC  PROVIDER  provider_name  FROM  FILE  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateCryptographicProvider
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_event_notification
    /// 	 : CREATE  EVENT  NOTIFICATION  event_notification_name  ON  SERVER DATABASE QUEUE  queue_name  WITH  FAN_IN?  FOR  COMMA?  event_type_or_group+  TO  SERVICE    COMMA  
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateEventNotification
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session
    /// 	 : CREATE ALTER  EVENT  SESSION  event_session_name  ON  SERVER  COMMA?  ADD  EVENT  event_module_guid  DOT?  event_package_name  DOT  event_name  LR_BRACKET  SET  COMMA?  event_customizable_attributue  EQUAL  DECIMAL STRING*?  ACTION  LR_BRACKET  COMMA?  event_module_guid  DOT?  event_package_name  DOT  action_name+  RR_BRACKET+  WHERE  event_session_predicate_expression?  RR_BRACKET**  COMMA?  DROP  EVENT  event_module_guid  DOT?  event_package_name  DOT  event_name*  ADD  TARGET  event_module_guid  DOT?  event_package_name  DOT  target_name  LR_BRACKET  SET  COMMA?  target_parameter_name  EQUAL  LR_BRACKET?  DECIMAL  RR_BRACKET? STRING+  RR_BRACKET**  DROP  TARGET  event_module_guid  DOT?  event_package_name  DOT  target_name*  WITH  LR_BRACKET  COMMA?  MAX_MEMORY  EQUAL    KB MB?  COMMA?  EVENT_RETENTION_MODE  EQUAL  ALLOW_SINGLE_EVENT_LOSS ALLOW_MULTIPLE_EVENT_LOSS NO_EVENT_LOSS?  COMMA?  MAX_DISPATCH_LATENCY  EQUAL    SECONDS INFINITE?  COMMA?  MAX_EVENT_SIZE  EQUAL    KB MB?  COMMA?  MEMORY_PARTITION_MODE  EQUAL  NONE PER_NODE PER_CPU?  COMMA?  TRACK_CAUSALITY  EQUAL  on_off?  COMMA?  STARTUP_STATE  EQUAL  on_off?  RR_BRACKET?  STATE  EQUAL  START STOP?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateOrAlterEventSession
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// start_stop
    /// 	 : START
    /// 	 | STOP
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstStartStop
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// event_session_predicate_expression
    /// 	 : COMMA?  AND OR?  NOT?  event_session_predicate_factor LR_BRACKET  event_session_predicate_expression  RR_BRACKET+
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEventSessionPredicateExpression
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// event_session_predicate_factor
    /// 	 : event_session_predicate_leaf
    /// 	 | LR_BRACKET  event_session_predicate_expression  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEventSessionPredicateFactor
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// event_session_predicate_leaf
    /// 	 : event_field_name event_field_name event_module_guid  DOT?  event_package_name  DOT  predicate_source_name  EQUAL LESS  GREATER EXCLAMATION  EQUAL GREATER GREATER  EQUAL LESS LESS  EQUAL  DECIMAL STRING
    /// 	 | event_module_guid  DOT?  event_package_name  DOT  predicate_compare_name  LR_BRACKET  event_field_name event_module_guid  DOT?  event_package_name  DOT  predicate_source_name  COMMA  DECIMAL STRING  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEventSessionPredicateLeaf
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_external_data_source
    /// 	 : ALTER  EXTERNAL  DATA  SOURCE  data_source_name  SET  LOCATION  EQUAL    COMMA? RESOURCE_MANAGER_LOCATION  EQUAL    COMMA? CREDENTIAL  EQUAL  credential_name+
    /// 	 | ALTER  EXTERNAL  DATA  SOURCE  data_source_name  WITH  LR_BRACKET  TYPE  EQUAL  BLOB_STORAGE  COMMA  LOCATION  EQUAL    COMMA  CREDENTIAL  EQUAL  credential_name?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterExternalDataSource
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_external_library
    /// 	 : ALTER  EXTERNAL  LIBRARY  library_name  AUTHORIZATION  owner_name?  SET ADD  LR_BRACKET  CONTENT  EQUAL   BINARY NONE  COMMA  PLATFORM  EQUAL  WINDOWS LINUX?  RR_BRACKET  WITH  COMMA?  LANGUAGE  EQUAL  R PYTHON DATA_SOURCE  EQUAL  external_data_source_name+  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterExternalLibrary
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_external_library
    /// 	 : CREATE  EXTERNAL  LIBRARY  library_name  AUTHORIZATION  owner_name?  FROM  COMMA?  LR_BRACKET?  CONTENT  EQUAL?   BINARY NONE  COMMA  PLATFORM  EQUAL  WINDOWS LINUX?  RR_BRACKET?  WITH  COMMA?  LANGUAGE  EQUAL  R PYTHON DATA_SOURCE  EQUAL  external_data_source_name+  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateExternalLibrary
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_external_resource_pool
    /// 	 : ALTER  EXTERNAL  RESOURCE  POOL  pool_name DEFAULT_DOUBLE_QUOTE  WITH  LR_BRACKET  MAX_CPU_PERCENT  EQUAL    COMMA?  AFFINITY  CPU  EQUAL  AUTO COMMA?  DECIMAL  TO  DECIMAL COMMA  DECIMAL+ NUMANODE  EQUAL  COMMA?  DECIMAL  TO  DECIMAL COMMA?  DECIMAL+  COMMA?  MAX_MEMORY_PERCENT  EQUAL  ?  COMMA?  MAX_PROCESSES  EQUAL  ?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterExternalResourcePool
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_external_resource_pool
    /// 	 : CREATE  EXTERNAL  RESOURCE  POOL  pool_name  WITH  LR_BRACKET  MAX_CPU_PERCENT  EQUAL    COMMA?  AFFINITY  CPU  EQUAL  AUTO COMMA?  DECIMAL  TO  DECIMAL COMMA  DECIMAL+ NUMANODE  EQUAL  COMMA?  DECIMAL  TO  DECIMAL COMMA?  DECIMAL+  COMMA?  MAX_MEMORY_PERCENT  EQUAL  ?  COMMA?  MAX_PROCESSES  EQUAL  ?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateExternalResourcePool
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_fulltext_catalog
    /// 	 : ALTER  FULLTEXT  CATALOG  catalog_name  REBUILD  WITH  ACCENT_SENSITIVITY  EQUAL  on_off? REORGANIZE AS  DEFAULT
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterFulltextCatalog
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_fulltext_catalog
    /// 	 : CREATE  FULLTEXT  CATALOG  catalog_name  ON  FILEGROUP  file_group_name?  IN  PATH  ?  WITH  ACCENT_SENSITIVITY  EQUAL  on_off?  AS  DEFAULT?  AUTHORIZATION  owner_name?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateFulltextCatalog
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_fulltext_stoplist
    /// 	 : ALTER  FULLTEXT  STOPLIST  stoplist_name  ADD    LANGUAGE  STRING DECIMAL BINARY DROP    LANGUAGE  STRING DECIMAL BINARY ALL  STRING DECIMAL BINARY ALL
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterFulltextStoplist
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_fulltext_stoplist
    /// 	 : CREATE  FULLTEXT  STOPLIST  stoplist_name  FROM  database_name  DOT?  stoplist_name SYSTEM  STOPLIST?  AUTHORIZATION  owner_name?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateFulltextStoplist
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_login_sql_server
    /// 	 : ALTER  LOGIN  login_name  ENABLE DISABLE? WITH  PASSWORD  EQUAL     HASHED  MUST_CHANGE UNLOCK*?  OLD_PASSWORD  EQUAL    MUST_CHANGE UNLOCK*?  DEFAULT_DATABASE  EQUAL  database_name?  DEFAULT_LANGUAGE  EQUAL  language?  NAME  EQUAL  login_name?  CHECK_POLICY  EQUAL  on_off?  CHECK_EXPIRATION  EQUAL  on_off?  CREDENTIAL  EQUAL  credential_name?  NO  CREDENTIAL? ADD DROP  CREDENTIAL  credential_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterLoginSqlServer
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_login_sql_server
    /// 	 : CREATE  LOGIN  login_name  WITH  PASSWORD  EQUAL     HASHED  MUST_CHANGE UNLOCK*?  COMMA?  SID  EQUAL  ?  COMMA?  DEFAULT_DATABASE  EQUAL  database_name?  COMMA?  DEFAULT_LANGUAGE  EQUAL  language?  COMMA?  CHECK_EXPIRATION  EQUAL  on_off?  COMMA?  CHECK_POLICY  EQUAL  on_off?  COMMA?  CREDENTIAL  EQUAL  credential_name? FROM  WINDOWS  WITH  COMMA?  DEFAULT_DATABASE  EQUAL  database_name?  COMMA?  DEFAULT_LANGUAGE  EQUAL  ? CERTIFICATE  certificate_name ASYMMETRIC  KEY  asym_key_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateLoginSqlServer
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_login_azure_sql
    /// 	 : ALTER  LOGIN  login_name  ENABLE DISABLE? WITH  PASSWORD  EQUAL    OLD_PASSWORD  EQUAL  ? NAME  EQUAL  login_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterLoginAzureSql
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_login_azure_sql
    /// 	 : CREATE  LOGIN  login_name  WITH  PASSWORD  EQUAL  STRING  SID  EQUAL  ?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateLoginAzureSql
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_login_azure_sql_dw_and_pdw
    /// 	 : ALTER  LOGIN  login_name  enable_disable? WITH  PASSWORD  EQUAL    OLD_PASSWORD  EQUAL    MUST_CHANGE UNLOCK*? NAME  EQUAL  login_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterLoginAzureSqlDwAndPdw
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// enable_disable
    /// 	 : ENABLE
    /// 	 | DISABLE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstEnableDisable
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_login_pdw
    /// 	 : CREATE  LOGIN  login_name  WITH  PASSWORD  EQUAL    MUST_CHANGE?  CHECK_POLICY  EQUAL  on_off?? FROM  WINDOWS
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateLoginPdw
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_master_key_sql_server
    /// 	 : ALTER  MASTER  KEY  FORCE?  REGENERATE  WITH  ENCRYPTION  BY  PASSWORD  EQUAL   ADD DROP  ENCRYPTION  BY  SERVICE  MASTER  KEY PASSWORD  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterMasterKeySqlServer
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_master_key_sql_server
    /// 	 : CREATE  MASTER  KEY  ENCRYPTION  BY  PASSWORD  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateMasterKeySqlServer
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_master_key_azure_sql
    /// 	 : ALTER  MASTER  KEY  FORCE?  REGENERATE  WITH  ENCRYPTION  BY  PASSWORD  EQUAL   ADD  ENCRYPTION  BY  SERVICE  MASTER  KEY PASSWORD  EQUAL   DROP  ENCRYPTION  BY  PASSWORD  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterMasterKeyAzureSql
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_master_key_azure_sql
    /// 	 : CREATE  MASTER  KEY  ENCRYPTION  BY  PASSWORD  EQUAL  ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateMasterKeyAzureSql
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_message_type
    /// 	 : ALTER  MESSAGE  TYPE  message_type_name  VALIDATION  EQUAL  NONE EMPTY WELL_FORMED_XML VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterMessageType
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_partition_function
    /// 	 : ALTER  PARTITION  FUNCTION  partition_function_name  LR_BRACKET  RR_BRACKET  split_or_merge  RANGE  LR_BRACKET  DECIMAL  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterPartitionFunction
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// split_or_merge
    /// 	 : SPLIT
    /// 	 | MERGE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstSplitOrMerge
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_partition_scheme
    /// 	 : ALTER  PARTITION  SCHEME  partition_scheme_name  NEXT  USED  file_group_name?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterPartitionScheme
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_remote_service_binding
    /// 	 : ALTER  REMOTE  SERVICE  BINDING  binding_name  WITH  USER  EQUAL  user_name?  COMMA  ANONYMOUS  EQUAL  on_off?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterRemoteServiceBinding
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_remote_service_binding
    /// 	 : CREATE  REMOTE  SERVICE  BINDING  binding_name  AUTHORIZATION  owner_name?  TO  SERVICE    WITH  USER  EQUAL  user_name?  COMMA  ANONYMOUS  EQUAL  on_off?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateRemoteServiceBinding
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_resource_pool
    /// 	 : CREATE  RESOURCE  POOL  pool_name  WITH  LR_BRACKET  COMMA?  MIN_CPU_PERCENT  EQUAL  DECIMAL?  COMMA?  MAX_CPU_PERCENT  EQUAL  DECIMAL?  COMMA?  CAP_CPU_PERCENT  EQUAL  DECIMAL?  COMMA?  AFFINITY  SCHEDULER  EQUAL  AUTO LR_BRACKET  COMMA?  DECIMAL DECIMAL  TO  DECIMAL+  RR_BRACKET NUMANODE  EQUAL  LR_BRACKET  COMMA?  DECIMAL DECIMAL  TO  DECIMAL+  RR_BRACKET?  COMMA?  MIN_MEMORY_PERCENT  EQUAL  DECIMAL?  COMMA?  MAX_MEMORY_PERCENT  EQUAL  DECIMAL?  COMMA?  MIN_IOPS_PER_VOLUME  EQUAL  DECIMAL?  COMMA?  MAX_IOPS_PER_VOLUME  EQUAL  DECIMAL?  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateResourcePool
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_resource_governor
    /// 	 : ALTER  RESOURCE  GOVERNOR  DISABLE RECONFIGURE WITH  LR_BRACKET  CLASSIFIER_FUNCTION  EQUAL  schema_name  DOT  function_name NULL_  RR_BRACKET RESET  STATISTICS WITH  LR_BRACKET  MAX_OUTSTANDING_IO_PER_VOLUME  EQUAL    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterResourceGovernor
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_db_role
    /// 	 : ALTER  ROLE  role_name  add_drop  MEMBER  database_name WITH  NAME  EQUAL  role_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterDbRole
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// add_drop
    /// 	 : ADD
    /// 	 | DROP
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstAddDrop
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_db_role
    /// 	 : CREATE  ROLE  role_name  AUTHORIZATION  owner_name?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateDbRole
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_route
    /// 	 : CREATE  ROUTE  route_name  AUTHORIZATION  owner_name?  WITH  COMMA?  SERVICE_NAME  EQUAL  ?  COMMA?  BROKER_INSTANCE  EQUAL  ?  COMMA?  LIFETIME  EQUAL  DECIMAL?  COMMA?  ADDRESS  EQUAL  STRING  COMMA  MIRROR_ADDRESS  EQUAL  STRING?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateRoute
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_rule
    /// 	 : CREATE  RULE  schema_name  DOT?  rule_name  AS  search_condition
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateRule
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_schema_sql
    /// 	 : ALTER  SCHEMA  schema_name  TRANSFER  OBJECT TYPE XML  SCHEMA  COLLECTION  DOUBLE_COLON?  id_  DOT  id_?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterSchemaSql
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_schema
    /// 	 : CREATE  SCHEMA  schema_name AUTHORIZATION  owner_name schema_name  AUTHORIZATION  owner_name  create_table create_view grant_deny  enum_dml  ON  SCHEMA  DOUBLE_COLON?  object_name  TO  owner_name REVOKE  enum_dml  ON  SCHEMA  DOUBLE_COLON?  object_name  FROM  owner_name*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateSchema
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// enum_dml
    /// 	 : SELECT
    /// 	 | INSERT
    /// 	 | DELETE
    /// 	 | UPDATE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstEnumDml
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// grant_deny
    /// 	 : GRANT
    /// 	 | DENY
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstGrantDeny
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_schema_azure_sql_dw_and_pdw
    /// 	 : CREATE  SCHEMA  schema_name  AUTHORIZATION  owner_name?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateSchemaAzureSqlDwAndPdw
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_schema_azure_sql_dw_and_pdw
    /// 	 : ALTER  SCHEMA  schema_name  TRANSFER  OBJECT  DOUBLE_COLON?  id_  DOT  ID?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterSchemaAzureSqlDwAndPdw
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_search_property_list
    /// 	 : CREATE  SEARCH  PROPERTY  LIST  source_list_name  FROM  database_name  DOT?  source_list_name?  AUTHORIZATION  owner_name?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateSearchPropertyList
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_security_policy
    /// 	 : CREATE  SECURITY  POLICY  schema_name  DOT?  security_policy_name  COMMA?  ADD  FILTER BLOCK?  PREDICATE  tvf_schema_name  DOT  security_predicate_function_name  LR_BRACKET  COMMA?  column_name_or_arguments+  RR_BRACKET  ON  schema_name  DOT  tableName  COMMA?  AFTER  INSERT UPDATE COMMA?  BEFORE  UPDATE DELETE*+  WITH  LR_BRACKET  STATE  EQUAL  on_off  SCHEMABINDING  on_off?  RR_BRACKET?  NOT  FOR  REPLICATION?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateSecurityPolicy
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_sequence
    /// 	 : ALTER  SEQUENCE  schema_name  DOT?  sequence_name  RESTART  WITH  DECIMAL??  INCREMENT  BY  ?  MINVALUE  DECIMAL NO  MINVALUE?  MAXVALUE  DECIMAL NO  MAXVALUE?  CYCLE NO  CYCLE?  CACHE  DECIMAL NO  CACHE?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterSequence
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_sequence
    /// 	 : CREATE  SEQUENCE  schema_name  DOT?  sequence_name  AS  data_type?  START  WITH  DECIMAL?  INCREMENT  BY  MINUS?  DECIMAL?  MINVALUE  MINUS?  DECIMAL? NO  MINVALUE?  MAXVALUE  MINUS?  DECIMAL? NO  MAXVALUE?  CYCLE NO  CYCLE?  CACHE  DECIMAL? NO  CACHE?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateSequence
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_server_audit
    /// 	 : ALTER  SERVER  AUDIT  audit_name  TO  FILE  LR_BRACKET  COMMA?  FILEPATH  EQUAL   COMMA?  MAXSIZE  EQUAL  DECIMAL  MB GB TB UNLIMITED COMMA?  MAX_ROLLOVER_FILES  EQUAL   COMMA?  MAX_FILES  EQUAL   COMMA?  RESERVE_DISK_SPACE  EQUAL  on_off*  RR_BRACKET APPLICATION_LOG SECURITY_LOG?  WITH  LR_BRACKET  COMMA?  QUEUE_DELAY  EQUAL   COMMA?  ON_FAILURE  EQUAL  CONTINUE SHUTDOWN FAIL_OPERATION COMMA?  STATE  EQUAL  on_off*  RR_BRACKET?  WHERE  COMMA?  NOT?  event_field_name  EQUAL LESS  GREATER EXCLAMATION  EQUAL GREATER GREATER  EQUAL LESS LESS  EQUAL  DECIMAL STRING COMMA?  AND OR  NOT?  EQUAL LESS  GREATER EXCLAMATION  EQUAL GREATER GREATER  EQUAL LESS LESS  EQUAL  DECIMAL STRING? REMOVE  WHERE MODIFY  NAME  EQUAL  audit_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterServerAudit
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_server_audit
    /// 	 : CREATE  SERVER  AUDIT  audit_name  TO  FILE  LR_BRACKET  COMMA?  FILEPATH  EQUAL   COMMA?  MAXSIZE  EQUAL  DECIMAL  MB GB TB UNLIMITED COMMA?  MAX_ROLLOVER_FILES  EQUAL   COMMA?  MAX_FILES  EQUAL   COMMA?  RESERVE_DISK_SPACE  EQUAL  on_off*  RR_BRACKET APPLICATION_LOG SECURITY_LOG?  WITH  LR_BRACKET  COMMA?  QUEUE_DELAY  EQUAL   COMMA?  ON_FAILURE  EQUAL  CONTINUE SHUTDOWN FAIL_OPERATION COMMA?  STATE  EQUAL  on_off COMMA?  AUDIT_GUID  EQUAL  audit_guid*  RR_BRACKET?  WHERE  COMMA?  NOT?  event_field_name  EQUAL LESS  GREATER EXCLAMATION  EQUAL GREATER GREATER  EQUAL LESS LESS  EQUAL  DECIMAL STRING COMMA?  AND OR  NOT?  EQUAL LESS  GREATER EXCLAMATION  EQUAL GREATER GREATER  EQUAL LESS LESS  EQUAL  DECIMAL STRING? REMOVE  WHERE MODIFY  NAME  EQUAL  audit_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateServerAudit
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_server_audit_specification
    /// 	 : ALTER  SERVER  AUDIT  SPECIFICATION  audit_name  FOR  SERVER  AUDIT  audit_name?  ADD DROP  LR_BRACKET  audit_action_group_name  RR_BRACKET*  WITH  LR_BRACKET  STATE  EQUAL  on_off  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterServerAuditSpecification
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_server_audit_specification
    /// 	 : CREATE  SERVER  AUDIT  SPECIFICATION  audit_name  FOR  SERVER  AUDIT  audit_name?  ADD  LR_BRACKET  audit_action_group_name  RR_BRACKET*  WITH  LR_BRACKET  STATE  EQUAL  on_off  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateServerAuditSpecification
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_server_configuration
    /// 	 : ALTER  SERVER  CONFIGURATION  SET  PROCESS  AFFINITY  CPU  EQUAL  AUTO COMMA?  DECIMAL COMMA?  DECIMAL  TO  DECIMAL+ NUMANODE  EQUAL  COMMA?  DECIMAL COMMA?  DECIMAL  TO  DECIMAL+ DIAGNOSTICS  LOG  ON OFF PATH  EQUAL  STRING DEFAULT MAX_SIZE  EQUAL  DECIMAL  MB DEFAULT MAX_FILES  EQUAL  DECIMAL DEFAULT FAILOVER  CLUSTER  PROPERTY  VERBOSELOGGING  EQUAL  STRING DEFAULT SQLDUMPERFLAGS  EQUAL  STRING DEFAULT SQLDUMPERPATH  EQUAL  STRING DEFAULT SQLDUMPERTIMEOUT  STRING DEFAULT FAILURECONDITIONLEVEL  EQUAL  STRING DEFAULT HEALTHCHECKTIMEOUT  EQUAL  DECIMAL DEFAULT HADR  CLUSTER  CONTEXT  EQUAL  STRING LOCAL BUFFER  POOL  EXTENSION  ON  LR_BRACKET  FILENAME  EQUAL  STRING  COMMA  SIZE  EQUAL  DECIMAL  KB MB GB  RR_BRACKET OFF SET  SOFTNUMA  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterServerConfiguration
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_server_role
    /// 	 : ALTER  SERVER  ROLE  server_role_name  ADD DROP  MEMBER  server_name WITH  NAME  EQUAL  server_role_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterServerRole
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_server_role
    /// 	 : CREATE  SERVER  ROLE  server_role_name  AUTHORIZATION  server_name?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateServerRole
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_server_role_pdw
    /// 	 : ALTER  SERVER  ROLE  server_role_name  ADD DROP  MEMBER  login_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterServerRolePdw
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_service
    /// 	 : ALTER  SERVICE  modified_service_name  ON  QUEUE  schema_name  DOT  queue_name?  COMMA?  ADD DROP  modified_contract_name*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterService
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_service
    /// 	 : CREATE  SERVICE  create_service_name  AUTHORIZATION  owner_name?  ON  QUEUE  schema_name  DOT?  queue_name  LR_BRACKET  COMMA?  id_ DEFAULT+  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateService
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_service_master_key
    /// 	 : ALTER  SERVICE  MASTER  KEY  FORCE?  REGENERATE WITH  OLD_ACCOUNT  EQUAL    COMMA  OLD_PASSWORD  EQUAL   NEW_ACCOUNT  EQUAL    COMMA  NEW_PASSWORD  EQUAL  ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterServiceMasterKey
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_symmetric_key
    /// 	 : ALTER  SYMMETRIC  KEY  symmetric_key_name  add_drop  ENCRYPTION  BY  CERTIFICATE  certificate_name PASSWORD  EQUAL   SYMMETRIC  KEY  symmetric_key_name ASYMMETRIC  KEY  asym_key_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterSymmetricKey
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_synonym
    /// 	 : CREATE  SYNONYM  schema_name  DOT?  synonym_name  FOR  server_name  DOT?  database_name  DOT?  schema_name  DOT?  object_name database_name  DOT?    DOT?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateSynonym
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_user
    /// 	 : ALTER  USER  user_name  WITH  COMMA?  NAME  EQUAL  user_name COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name NULL_ COMMA?  LOGIN  EQUAL  login_name COMMA?  PASSWORD  EQUAL  STRING  OLD_PASSWORD  EQUAL  STRING+ COMMA?  DEFAULT_LANGUAGE  EQUAL  NONE  language COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off+
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterUser
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_user
    /// 	 : CREATE  USER  user_name  FOR FROM  LOGIN  login_name?  WITH  COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off*?
    /// 	 | CREATE  USER  windows_principal  WITH  COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  DEFAULT_LANGUAGE  EQUAL  NONE DECIMAL language COMMA?  SID  EQUAL  BINARY COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off*? user_name  WITH  PASSWORD  EQUAL    COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  DEFAULT_LANGUAGE  EQUAL  NONE DECIMAL language COMMA?  SID  EQUAL  BINARY COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off* azure_active_directory_principal  FROM  EXTERNAL  PROVIDER
    /// 	 | CREATE  USER  user_name  WITHOUT  LOGIN  COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off* FOR FROM  CERTIFICATE  certificate_name FOR FROM  ASYMMETRIC  KEY  asym_key_name
    /// 	 | CREATE  USER  user_name
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateUser
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_user_azure_sql_dw
    /// 	 : CREATE  USER  user_name  FOR FROM  LOGIN  login_name WITHOUT  LOGIN?  WITH  DEFAULT_SCHEMA  EQUAL  schema_name?
    /// 	 | CREATE  USER  azure_active_directory_principal  FROM  EXTERNAL  PROVIDER  WITH  DEFAULT_SCHEMA  EQUAL  schema_name?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateUserAzureSqlDw
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_user_azure_sql
    /// 	 : ALTER  USER  user_name  WITH  COMMA?  NAME  EQUAL  user_name COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  LOGIN  EQUAL  login_name COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off+
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterUserAzureSql
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_workload_group
    /// 	 : ALTER  WORKLOAD  GROUP  workload_group_group_name DEFAULT_DOUBLE_QUOTE  WITH  LR_BRACKET  IMPORTANCE  EQUAL  LOW MEDIUM HIGH COMMA?  REQUEST_MAX_MEMORY_GRANT_PERCENT  EQUAL   COMMA?  REQUEST_MAX_CPU_TIME_SEC  EQUAL   REQUEST_MEMORY_GRANT_TIMEOUT_SEC  EQUAL   MAX_DOP  EQUAL   GROUP_MAX_REQUESTS  EQUAL  +  RR_BRACKET?  USING  workload_group_pool_name DEFAULT_DOUBLE_QUOTE?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterWorkloadGroup
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_workload_group
    /// 	 : CREATE  WORKLOAD  GROUP  workload_group_group_name  WITH  LR_BRACKET  IMPORTANCE  EQUAL  LOW MEDIUM HIGH COMMA?  REQUEST_MAX_MEMORY_GRANT_PERCENT  EQUAL   COMMA?  REQUEST_MAX_CPU_TIME_SEC  EQUAL   REQUEST_MEMORY_GRANT_TIMEOUT_SEC  EQUAL   MAX_DOP  EQUAL   GROUP_MAX_REQUESTS  EQUAL  +  RR_BRACKET?  USING  workload_group_pool_name DEFAULT_DOUBLE_QUOTE?  COMMA?  EXTERNAL  external_pool_name DEFAULT_DOUBLE_QUOTE??
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateWorkloadGroup
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_xml_schema_collection
    /// 	 : CREATE  XML  SCHEMA  COLLECTION  relational_schema  DOT?  sql_identifier  AS  STRING id_ LOCAL_ID
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateXmlSchemaCollection
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_partition_function
    /// 	 : CREATE  PARTITION  FUNCTION  partition_function_name  LR_BRACKET    RR_BRACKET  AS  RANGE  LEFT RIGHT?  FOR  VALUES  LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreatePartitionFunction
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_partition_scheme
    /// 	 : CREATE  PARTITION  SCHEME  partition_scheme_name  AS  PARTITION  partition_function_name  ALL?  TO  LR_BRACKET    COMMA  *  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreatePartitionScheme
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_queue
    /// 	 : CREATE  QUEUE  complete_table_name queue_name  queue_settings?  ON  file_group_name DEFAULT?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateQueue
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// queue_settings
    /// 	 : WITH  STATUS  EQUAL  on_off  COMMA??  RETENTION  EQUAL  on_off  COMMA??  ACTIVATION  LR_BRACKET  STATUS  EQUAL  on_off  COMMA??  PROCEDURE_NAME  EQUAL  func_proc_name_database_schema  COMMA??  MAX_QUEUE_READERS  EQUAL    COMMA??  EXECUTE  AS  SELF  OWNER  COMMA?? DROP  RR_BRACKET  COMMA??  POISON_MESSAGE_HANDLING  LR_BRACKET  STATUS  EQUAL  on_off  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueueSettings
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_queue
    /// 	 : ALTER  QUEUE  complete_table_name queue_name  queue_settings queue_action
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterQueue
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// queue_action
    /// 	 : REBUILD  WITH  LR_BRACKET  queue_rebuild_options  RR_BRACKET?
    /// 	 | REORGANIZE  WITH  LOB_COMPACTION  EQUAL  on_off?
    /// 	 | MOVE  TO  id_ DEFAULT
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueueAction
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// queue_rebuild_options
    /// 	 : MAXDOP  EQUAL  DECIMAL
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueueRebuildOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_contract
    /// 	 : CREATE  CONTRACT  contract_name  AUTHORIZATION  owner_name?  LR_BRACKET  message_type_name DEFAULT  SENT  BY  INITIATOR TARGET ANY  COMMA?+  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateContract
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// message_statement
    /// 	 : CREATE  MESSAGE  TYPE  message_type_name  AUTHORIZATION  owner_name?  VALIDATION  EQUAL  NONE EMPTY WELL_FORMED_XML VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstMessageStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// merge_statement
    /// 	 : with_expression?  MERGE  TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT??  INTO?  ddl_object  with_table_hints?  as_table_alias?  USING  table_sources  ON  search_condition  when_matches+  output_clause?  option_clause?  SEMI
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstMergeStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// when_matches
    /// 	 : WHEN  MATCHED  AND  search_condition?  THEN  merge_matched+
    /// 	 | WHEN  NOT  MATCHED  BY  TARGET?  AND  search_condition?  THEN  merge_not_matched
    /// 	 | WHEN  NOT  MATCHED  BY  SOURCE  AND  search_condition?  THEN  merge_matched+
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWhenMatches
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// merge_matched
    /// 	 : UPDATE  SET  update_elem_merges
    /// 	 | DELETE
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstMergeMatched
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// update_elem_merges
    /// 	 : update_elem_merge  COMMA  update_elem_merge*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstUpdateElemMerges
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// merge_not_matched
    /// 	 : INSERT  LR_BRACKET  column_name_list  RR_BRACKET?  table_value_constructor DEFAULT  VALUES
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstMergeNotMatched
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// delete_statement
    /// 	 : with_expression?  DELETE  TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT? TOP  DECIMAL?  FROM?  delete_statement_from  with_table_hints?  output_clause?  FROM  table_sources?  WHERE  search_condition CURRENT  OF  GLOBAL?  cursor_name ?  for_clause?  option_clause?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDeleteStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// delete_statement_from
    /// 	 : ddl_object
    /// 	 | rowset_function_limited
    /// 	 | 
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDeleteStatementFrom
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// insert_statement
    /// 	 : with_expression?  INSERT  TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT??  INTO?  ddl_object rowset_function_limited  with_table_hints?  LR_BRACKET  insert_column_name_list  RR_BRACKET?  output_clause?  insert_statement_value  for_clause?  option_clause?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstInsertStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// insert_statement_value
    /// 	 : table_value_constructor
    /// 	 | derived_table
    /// 	 | execute_statement
    /// 	 | DEFAULT  VALUES
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstInsertStatementValue
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// receive_statement
    /// 	 : LR_BRACKET?  RECEIVE  ALL DISTINCT top_clause STAR  LOCAL_ID  EQUAL  expression  COMMA?*  FROM  complete_table_name  INTO  table_variable  WHERE  ?  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstReceiveStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// select_statement_standalone
    /// 	 : with_expression?  select_statement
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstSelectStatementStandalone
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// select_statement
    /// 	 : query_expression  select_order_by_clause?  for_clause?  option_clause?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstSelectStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// time
    /// 	 : LOCAL_ID constant
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTime
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// update_statement
    /// 	 : with_expression?  UPDATE  TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT??  ddl_object rowset_function_limited  with_table_hints?  SET  update_elems  output_clause?  FROM  table_sources?  WHERE  search_condition CURRENT  OF  GLOBAL?  cursor_name ?  for_clause?  option_clause?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstUpdateStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// update_elems
    /// 	 : update_elem  COMMA  update_elem*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstUpdateElems
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// output_clause
    /// 	 : OUTPUT  output_dml_list_elems  INTO  LOCAL_ID full_table_name  LR_BRACKET  column_name_list  RR_BRACKET??
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstOutputClause
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// output_dml_list_elems
    /// 	 : output_dml_list_elem  COMMA  output_dml_list_elem*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstOutputDmlListElems
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// output_dml_list_elem
    /// 	 : expression asterisk  as_column_alias?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstOutputDmlListElem
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_database
    /// 	 : CREATE  DATABASE  database_name  CONTAINMENT  EQUAL  NONE PARTIAL?  ON  PRIMARY?  database_file_spec  COMMA  database_file_spec*?  LOG  ON  database_file_spec  COMMA  database_file_spec*?  COLLATE  collation_name?  WITH  create_database_option  COMMA  create_database_option*?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateDatabase
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_index
    /// 	 : CREATE  UNIQUE?  clustered?  INDEX  id_  ON  full_table_name  LR_BRACKET  column_name_list_with_order  RR_BRACKET  INCLUDE  LR_BRACKET  column_name_list  RR_BRACKET?  WHERE  ?  create_index_options?  ON  id_?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateIndex
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_index_options
    /// 	 : WITH  LR_BRACKET  relational_index_options  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateIndexOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// relational_index_options
    /// 	 : relational_index_option  COMMA  relational_index_option*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstRelationalIndexOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// relational_index_option
    /// 	 : rebuild_index_option
    /// 	 | DROP_EXISTING  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRelationalIndexOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_index
    /// 	 : ALTER  INDEX  id_ ALL  ON  full_table_name  DISABLE PAUSE ABORT RESUME  resumable_index_options? reorganize_partition set_index_options rebuild_partition
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterIndex
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// resumable_index_options
    /// 	 : WITH  LR_BRACKET  resumable_index_option  COMMA  resumable_index_option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstResumableIndexOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// resumable_index_option
    /// 	 : MAXDOP  EQUAL  
    /// 	 | MAX_DURATION  EQUAL    MINUTES?
    /// 	 | low_priority_lock_wait
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstResumableIndexOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// reorganize_partition
    /// 	 : REORGANIZE  PARTITION  EQUAL  DECIMAL?  reorganize_options?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstReorganizePartition
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// reorganize_options
    /// 	 : WITH  LR_BRACKET  reorganize_option  COMMA  reorganize_option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstReorganizeOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// reorganize_option
    /// 	 : LOB_COMPACTION  EQUAL  on_off
    /// 	 | COMPRESS_ALL_ROW_GROUPS  EQUAL  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstReorganizeOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// set_index_options
    /// 	 : SET  LR_BRACKET  set_index_option  COMMA  set_index_option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstSetIndexOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// set_index_option
    /// 	 : ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | COMPRESSION_DELAY  EQUAL    MINUTES?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSetIndexOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// rebuild_partition
    /// 	 : REBUILD  PARTITION  EQUAL  ALL?  rebuild_index_options?
    /// 	 | REBUILD  PARTITION  EQUAL  DECIMAL  single_partition_rebuild_index_options?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRebuildPartition
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// rebuild_index_options
    /// 	 : WITH  LR_BRACKET  rebuild_index_option  COMMA  rebuild_index_option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstRebuildIndexOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// rebuild_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  DECIMAL
    /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | STATISTICS_INCREMENTAL  EQUAL  on_off
    /// 	 | ONLINE  EQUAL  ON  LR_BRACKET  low_priority_lock_wait  RR_BRACKET? OFF
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | MAX_DURATION  EQUAL    MINUTES?
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  
    /// 	 | DATA_COMPRESSION  EQUAL  NONE ROW PAGE COLUMNSTORE COLUMNSTORE_ARCHIVE  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRebuildIndexOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// single_partition_rebuild_index_options
    /// 	 : WITH  LR_BRACKET  single_partition_rebuild_index_option  COMMA  single_partition_rebuild_index_option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstSinglePartitionRebuildIndexOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// single_partition_rebuild_index_option
    /// 	 : SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | DATA_COMPRESSION  EQUAL  NONE ROW PAGE COLUMNSTORE COLUMNSTORE_ARCHIVE  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// 	 | ONLINE  EQUAL  ON  LR_BRACKET  low_priority_lock_wait  RR_BRACKET? OFF
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSinglePartitionRebuildIndexOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// on_partitions
    /// 	 : ON  PARTITIONS  LR_BRACKET    TO  ?  COMMA    TO  ?*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOnPartitions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_columnstore_index
    /// 	 : CREATE  CLUSTERED  COLUMNSTORE  INDEX  id_  ON  full_table_name  create_columnstore_index_options?  ON  id_?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateColumnstoreIndex
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_columnstore_index_options
    /// 	 : WITH  LR_BRACKET  columnstore_index_option  COMMA  columnstore_index_option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateColumnstoreIndexOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// columnstore_index_option
    /// 	 : DROP_EXISTING  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  
    /// 	 | ONLINE  EQUAL  on_off
    /// 	 | COMPRESSION_DELAY  EQUAL    MINUTES?
    /// 	 | DATA_COMPRESSION  EQUAL  COLUMNSTORE COLUMNSTORE_ARCHIVE  on_partitions?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnstoreIndexOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_nonclustered_columnstore_index
    /// 	 : CREATE  NONCLUSTERED?  COLUMNSTORE  INDEX  id_  ON  full_table_name  LR_BRACKET  column_name_list_with_order  RR_BRACKET  WHERE  search_condition?  create_columnstore_index_options?  ON  id_?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateNonclusteredColumnstoreIndex
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_xml_index
    /// 	 : CREATE  PRIMARY?  XML  INDEX  id_  ON  full_table_name  LR_BRACKET  id_  RR_BRACKET  USING  XML  INDEX  id_  FOR  VALUE PATH PROPERTY???  xml_index_options?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateXmlIndex
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// xml_index_options
    /// 	 : WITH  LR_BRACKET  xml_index_option  COMMA  xml_index_option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstXmlIndexOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// xml_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  DECIMAL
    /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | DROP_EXISTING  EQUAL  on_off
    /// 	 | ONLINE  EQUAL  ON  LR_BRACKET  low_priority_lock_wait  RR_BRACKET? OFF
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  
    /// 	 | XML_COMPRESSION  EQUAL  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstXmlIndexOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_or_alter_procedure
    /// 	 : CREATE  OR  ALTER REPLACE? ALTER      SEMI  DECIMAL?  LR_BRACKET?  procedure_params  RR_BRACKET??  procedure_options?  FOR  REPLICATION?  AS  as_external_name sql_clause
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateOrAlterProcedure
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// procedure_options
    /// 	 : WITH  procedure_option  COMMA  procedure_option*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstProcedureOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// as_external_name
    /// 	 : EXTERNAL  NAME  assembly_name  DOT  class_name  DOT  method_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAsExternalName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_or_alter_dml_trigger
    /// 	 : CREATE  OR  ALTER? ALTER  TRIGGER  simple_name  ON  full_table_name  dml_trigger_options?  FOR AFTER INSTEAD  OF  dml_trigger_operations  WITH  APPEND?  NOT  FOR  REPLICATION?  AS  sql_clauses
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateOrAlterDmlTrigger
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// dml_trigger_options
    /// 	 : WITH  dml_trigger_option  COMMA  dml_trigger_option*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDmlTriggerOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// dml_trigger_operations
    /// 	 : dml_trigger_operation  COMMA  dml_trigger_operation*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDmlTriggerOperations
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// dml_trigger_option
    /// 	 : ENCRYPTION
    /// 	 | execute_clause
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDmlTriggerOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// dml_trigger_operation
    /// 	 : INSERT UPDATE DELETE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstDmlTriggerOperation
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_or_alter_ddl_trigger
    /// 	 : CREATE  OR  ALTER? ALTER  TRIGGER  simple_name  ON  ALL  SERVER DATABASE  dml_trigger_options?  FOR AFTER  dml_trigger_operations  AS  sql_clauses
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateOrAlterDdlTrigger
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_or_alter_function
    /// 	 : CREATE  OR  ALTER? ALTER  FUNCTION    LR_BRACKET  procedure_params  RR_BRACKET LR_BRACKET  RR_BRACKET  func_body_returns_select func_body_returns_table func_body_returns_scalar  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateOrAlterFunction
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// procedure_params
    /// 	 : procedure_param  COMMA  procedure_param*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstProcedureParams
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// func_body_returns_select
    /// 	 : RETURNS  TABLE  function_options?  AS?  as_external_name RETURN  LR_BRACKET  select_statement_standalone  RR_BRACKET select_statement_standalone
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFuncBodyReturnsSelect
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// function_options
    /// 	 : WITH  function_option  COMMA  function_option*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFunctionOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// func_body_returns_table
    /// 	 : RETURNS  LOCAL_ID  table_type_definition  function_options?  AS?  as_external_name BEGIN  sql_clauses?  RETURN  SEMI?  END  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFuncBodyReturnsTable
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// func_body_returns_scalar
    /// 	 : RETURNS  data_type  function_options?  AS?  as_external_name BEGIN  sql_clause?  RETURN    SEMI?  END
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFuncBodyReturnsScalar
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// procedure_param
    /// 	 : LOCAL_ID  AS?  type_schema  DOT?  data_type  VARYING?  EQUAL  ?  OUT OUTPUT READONLY?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstProcedureParam
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// procedure_option
    /// 	 : ENCRYPTION
    /// 	 | RECOMPILE
    /// 	 | execute_clause
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstProcedureOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// function_option
    /// 	 : ENCRYPTION
    /// 	 | SCHEMABINDING
    /// 	 | RETURNS  NULL_  ON  NULL_  INPUT
    /// 	 | CALLED  ON  NULL_  INPUT
    /// 	 | execute_clause
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFunctionOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_statistics
    /// 	 : CREATE  STATISTICS  id_  ON  full_table_name  LR_BRACKET  column_name_list  RR_BRACKET  WITH  FULLSCAN SAMPLE  DECIMAL  PERCENT ROWS STATS_STREAM  COMMA  NORECOMPUTE?  COMMA  INCREMENTAL  EQUAL  on_off??  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateStatistics
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// update_statistics
    /// 	 : UPDATE  STATISTICS  complete_table_name  id_ LR_BRACKET  id_  COMMA  id_*  RR_BRACKET?  update_statistics_options?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstUpdateStatistics
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// update_statistics_options
    /// 	 : WITH  update_statistics_option  COMMA  update_statistics_option*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstUpdateStatisticsOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// update_statistics_option
    /// 	 : FULLSCAN  COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off?
    /// 	 | SAMPLE    PERCENT ROWS  COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off?
    /// 	 | RESAMPLE  on_partitions?
    /// 	 | STATS_STREAM  EQUAL  
    /// 	 | ROWCOUNT  EQUAL  DECIMAL
    /// 	 | PAGECOUNT  EQUAL  DECIMAL
    /// 	 | ALL
    /// 	 | COLUMNS
    /// 	 | INDEX
    /// 	 | NORECOMPUTE
    /// 	 | INCREMENTAL  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  
    /// 	 | AUTO_DROP  EQUAL  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUpdateStatisticsOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_table
    /// 	 : CREATE  TABLE  full_table_name  LR_BRACKET  column_def_table_constraints  COMMA?  table_indices*  COMMA?  RR_BRACKET  LOCK  simple_id?  table_options*  ON  id_ DEFAULT?  TEXTIMAGE_ON  id_ DEFAULT?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateTable
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// table_indices
    /// 	 : INDEX  id_  UNIQUE?  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// 	 | INDEX  id_  CLUSTERED  COLUMNSTORE
    /// 	 | INDEX  id_  NONCLUSTERED?  COLUMNSTORE  LR_BRACKET  column_name_list  RR_BRACKET  create_table_index_options?  ON  id_?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableIndices
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// table_options
    /// 	 : WITH  LR_BRACKET  table_option  COMMA  table_option*  RR_BRACKET table_option  COMMA  table_option*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// table_option
    /// 	 : simple_id keyword  EQUAL  simple_id keyword on_off DECIMAL
    /// 	 | CLUSTERED  COLUMNSTORE  INDEX
    /// 	 | HEAP
    /// 	 | FILLFACTOR  EQUAL  DECIMAL
    /// 	 | distribution
    /// 	 | DATA_COMPRESSION  EQUAL  NONE ROW PAGE  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// distribution
    /// 	 : DISTRIBUTION  EQUAL  HASH  LR_BRACKET  id_  RR_BRACKET
    /// 	 | CLUSTERED  INDEX  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDistribution
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_table_index_options
    /// 	 : WITH  LR_BRACKET  create_table_index_option  COMMA  create_table_index_option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateTableIndexOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_table_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  DECIMAL
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | STATISTICS_INCREMENTAL  EQUAL  on_off
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// 	 | DATA_COMPRESSION  EQUAL  NONE ROW PAGE COLUMNSTORE COLUMNSTORE_ARCHIVE  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateTableIndexOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_view
    /// 	 : CREATE  VIEW  simple_name  LR_BRACKET  column_name_list  RR_BRACKET?  view_attributes?  AS  select_statement_standalone  WITH  CHECK  OPTION?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateView
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// view_attributes
    /// 	 : WITH  view_attribute  COMMA  view_attribute*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstViewAttributes
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// view_attribute
    /// 	 : ENCRYPTION
    /// 	 | SCHEMABINDING
    /// 	 | VIEW_METADATA
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstViewAttribute
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_table
    /// 	 : ALTER  TABLE  full_table_name  SET  LR_BRACKET  LOCK_ESCALATION  EQUAL  AUTO TABLE DISABLE  RR_BRACKET ADD  column_def_table_constraints ALTER  COLUMN  column_definition column_modifier DROP  COLUMN  ids_ DROP  CONSTRAINT  constraint_name WITH  CHECK NOCHECK  ADD  CONSTRAINT  constraint_name?  FOREIGN  KEY  LR_BRACKET    RR_BRACKET  REFERENCES  full_table_name  LR_BRACKET    RR_BRACKET?  on_delete on_update* CHECK  LR_BRACKET  search_condition  RR_BRACKET NOCHECK CHECK  CONSTRAINT  constraint_name ENABLE DISABLE  TRIGGER  id_? REBUILD  table_options SWITCH  switch_partition  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterTable
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// ids_
    /// 	 : id_  COMMA  id_*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstIds
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// switch_partition
    /// 	 : PARTITION?  ?  TO    PARTITION  ?  WITH  low_priority_lock_wait?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSwitchPartition
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// low_priority_lock_wait
    /// 	 : WAIT_AT_LOW_PRIORITY  LR_BRACKET  MAX_DURATION  EQUAL    MINUTES?  COMMA  ABORT_AFTER_WAIT  EQUAL    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstLowPriorityLockWait
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_database
    /// 	 : ALTER  DATABASE  database_name CURRENT  MODIFY  NAME  EQUAL  database_name COLLATE  collation_name SET  database_optionspec  WITH  termination? add_or_modify_files add_or_modify_filegroups  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterDatabase
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// add_or_modify_files
    /// 	 : ADD  FILE  filespecs  TO  FILEGROUP  file_group_name?
    /// 	 | ADD  LOG  FILE  filespecs
    /// 	 | REMOVE  FILE  file_group_name
    /// 	 | MODIFY  FILE  filespec
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAddOrModifyFiles
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// filespecs
    /// 	 : filespec  COMMA  filespec*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFilespecs
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// filespec
    /// 	 : LR_BRACKET  NAME  EQUAL  file_group_name  COMMA  NEWNAME  EQUAL  new_file_group_name STRING?  COMMA  FILENAME  EQUAL  ?  COMMA  SIZE  EQUAL  ?  COMMA  MAXSIZE  EQUAL   UNLIMITED?  COMMA  FILEGROWTH  EQUAL  ?  COMMA  OFFLINE?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFilespec
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// add_or_modify_filegroups
    /// 	 : ADD  FILEGROUP  file_group_name  CONTAINS  FILESTREAM CONTAINS  MEMORY_OPTIMIZED_DATA?
    /// 	 | REMOVE  FILEGROUP  file_group_name
    /// 	 | MODIFY  FILEGROUP  file_group_name  filegroup_updatability_option DEFAULT NAME  EQUAL  new_file_group_name AUTOGROW_SINGLE_FILE AUTOGROW_ALL_FILES
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAddOrModifyFilegroups
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// filegroup_updatability_option
    /// 	 : READONLY
    /// 	 | READWRITE
    /// 	 | READ_ONLY
    /// 	 | READ_WRITE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstFilegroupUpdatabilityOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// database_optionspec
    /// 	 : auto_option
    /// 	 | change_tracking_option
    /// 	 | containment_option
    /// 	 | cursor_option
    /// 	 | database_mirroring_option
    /// 	 | date_correlation_optimization_option
    /// 	 | db_encryption_option
    /// 	 | db_state_option
    /// 	 | db_update_option
    /// 	 | db_user_access_option
    /// 	 | delayed_durability_option
    /// 	 | external_access_option
    /// 	 | FILESTREAM  database_filestream_option
    /// 	 | hadr_options
    /// 	 | mixed_page_allocation_option
    /// 	 | parameterization_option
    /// 	 | recovery_option
    /// 	 | service_broker_option
    /// 	 | snapshot_option
    /// 	 | sql_option
    /// 	 | target_recovery_time_option
    /// 	 | termination
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDatabaseOptionspec
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// auto_option
    /// 	 : AUTO_CLOSE  on_off
    /// 	 | AUTO_CREATE_STATISTICS  OFF
    /// 	 | ON  INCREMENTAL  EQUAL  ON OFF
    /// 	 | AUTO_SHRINK  on_off
    /// 	 | AUTO_UPDATE_STATISTICS  on_off
    /// 	 | AUTO_UPDATE_STATISTICS_ASYNC  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAutoOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// change_tracking_option
    /// 	 : CHANGE_TRACKING  EQUAL  OFF ON  change_tracking_option_list  change_tracking_option_lists*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstChangeTrackingOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// change_tracking_option_lists
    /// 	 : change_tracking_option_list  COMMA  change_tracking_option_list*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstChangeTrackingOptionLists
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// change_tracking_option_list
    /// 	 : AUTO_CLEANUP  EQUAL  on_off
    /// 	 | CHANGE_RETENTION  EQUAL  DAYS HOURS MINUTES
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstChangeTrackingOptionList
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// containment_option
    /// 	 : CONTAINMENT  EQUAL  NONE PARTIAL
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstContainmentOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// cursor_option
    /// 	 : CURSOR_CLOSE_ON_COMMIT  on_off
    /// 	 | CURSOR_DEFAULT  local_global
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCursorOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// local_global
    /// 	 : LOCAL
    /// 	 | GLOBAL
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstLocalGlobal
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_endpoint
    /// 	 : ALTER  ENDPOINT  endpoint_name  AUTHORIZATION  login_name?  STATE  EQUAL    ?  AS  TCP  LR_BRACKET  LISTENER_PORT  EQUAL    COMMA  LISTENER_IP  EQUAL  ALL IPV4_ADDR IPV6_ADDR STRING?  RR_BRACKET  TSQL FOR  SERVICE_BROKER  LR_BRACKET  AUTHENTICATION  EQUAL  WINDOWS  NTLM KERBEROS NEGOTIATE?  CERTIFICATE  certificate_name? CERTIFICATE  certificate_name  WINDOWS?  NTLM KERBEROS NEGOTIATE?  COMMA?  ENCRYPTION  EQUAL  DISABLED SUPPORTED REQUIRED  ALGORITHM  AES RC4 AES  RC4 RC4  AES??  COMMA?  MESSAGE_FORWARDING  EQUAL  ENABLED DISABLED?  COMMA?  MESSAGE_FORWARD_SIZE  EQUAL  DECIMAL?  RR_BRACKET FOR  DATABASE_MIRRORING  LR_BRACKET  AUTHENTICATION  EQUAL  WINDOWS  NTLM KERBEROS NEGOTIATE?  CERTIFICATE  certificate_name? CERTIFICATE  certificate_name  WINDOWS?  NTLM KERBEROS NEGOTIATE?  COMMA?  ENCRYPTION  EQUAL  DISABLED SUPPORTED REQUIRED  ALGORITHM  AES RC4 AES  RC4 RC4  AES??  COMMA?  ROLE  EQUAL  WITNESS PARTNER ALL  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterEndpoint
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// mirroring_set_option
    /// 	 : mirroring_partner  partner_option
    /// 	 | mirroring_witness  witness_option
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstMirroringSetOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// mirroring_partner
    /// 	 : PARTNER
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstMirroringPartner
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// mirroring_witness
    /// 	 : WITNESS
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstMirroringWitness
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// witness_partner_equal
    /// 	 : EQUAL
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstWitnessPartnerEqual
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// partner_option
    /// 	 : witness_partner_equal  partner_server
    /// 	 | FAILOVER
    /// 	 | FORCE_SERVICE_ALLOW_DATA_LOSS
    /// 	 | OFF
    /// 	 | RESUME
    /// 	 | SAFETY  FULL OFF
    /// 	 | SUSPEND
    /// 	 | TIMEOUT  DECIMAL
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPartnerOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// witness_option
    /// 	 : witness_partner_equal  witness_server
    /// 	 | OFF
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWitnessOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// partner_server
    /// 	 : partner_server_tcp_prefix  host  mirroring_host_port_seperator  port_number
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstPartnerServer
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// mirroring_host_port_seperator
    /// 	 : COLON
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstMirroringHostPortSeperator
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// partner_server_tcp_prefix
    /// 	 : TCP  COLON  DOUBLE_FORWARD_SLASH
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPartnerServerTcpPrefix
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// port_number
    /// 	 : 
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPortNumber
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// host
    /// 	 : id_  DOT  host
    /// 	 | id_  DOT id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstHost
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// date_correlation_optimization_option
    /// 	 : DATE_CORRELATION_OPTIMIZATION  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDateCorrelationOptimizationOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// db_encryption_option
    /// 	 : ENCRYPTION  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDbEncryptionOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// db_state_option
    /// 	 : ONLINE OFFLINE EMERGENCY
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstDbStateOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// db_update_option
    /// 	 : READ_ONLY
    /// 	 | READ_WRITE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstDbUpdateOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// db_user_access_option
    /// 	 : SINGLE_USER
    /// 	 | RESTRICTED_USER
    /// 	 | MULTI_USER
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstDbUserAccessOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// delayed_durability_option
    /// 	 : DELAYED_DURABILITY  EQUAL  DISABLED ALLOWED FORCED
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDelayedDurabilityOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// external_access_option
    /// 	 : DB_CHAINING  on_off
    /// 	 | TRUSTWORTHY  on_off
    /// 	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
    /// 	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
    /// 	 | NESTED_TRIGGERS  EQUAL  on_off
    /// 	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
    /// 	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  DECIMAL
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExternalAccessOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// id_or_string
    /// 	 : id_
    /// 	 | STRING
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstIdOrString
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// hadr_options
    /// 	 : HADR  AVAILABILITY  GROUP  EQUAL  group_name OFF SUSPEND RESUME
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstHadrOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// mixed_page_allocation_option
    /// 	 : MIXED_PAGE_ALLOCATION  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstMixedPageAllocationOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// parameterization_option
    /// 	 : PARAMETERIZATION  SIMPLE FORCED
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstParameterizationOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// recovery_option
    /// 	 : RECOVERY  FULL BULK_LOGGED SIMPLE
    /// 	 | TORN_PAGE_DETECTION  on_off
    /// 	 | ACCELERATED_DATABASE_RECOVERY  EQUAL  on_off
    /// 	 | PAGE_VERIFY  CHECKSUM TORN_PAGE_DETECTION NONE
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRecoveryOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// service_broker_option
    /// 	 : ENABLE_BROKER
    /// 	 | DISABLE_BROKER
    /// 	 | NEW_BROKER
    /// 	 | ERROR_BROKER_CONVERSATIONS
    /// 	 | HONOR_BROKER_PRIORITY  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstServiceBrokerOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// snapshot_option
    /// 	 : ALLOW_SNAPSHOT_ISOLATION  on_off
    /// 	 | READ_COMMITTED_SNAPSHOT  on_off
    /// 	 | 
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSnapshotOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// sql_option
    /// 	 : ANSI_NULL_DEFAULT  on_off
    /// 	 | ANSI_NULLS  on_off
    /// 	 | ANSI_PADDING  on_off
    /// 	 | ANSI_WARNINGS  on_off
    /// 	 | ARITHABORT  on_off
    /// 	 | COMPATIBILITY_LEVEL  EQUAL  DECIMAL
    /// 	 | CONCAT_NULL_YIELDS_NULL  on_off
    /// 	 | NUMERIC_ROUNDABORT  on_off
    /// 	 | QUOTED_IDENTIFIER  on_off
    /// 	 | RECURSIVE_TRIGGERS  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSqlOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// target_recovery_time_option
    /// 	 : TARGET_RECOVERY_TIME  EQUAL  DECIMAL  SECONDS MINUTES
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTargetRecoveryTimeOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// termination
    /// 	 : ROLLBACK  AFTER  
    /// 	 | ROLLBACK  IMMEDIATE
    /// 	 | NO_WAIT
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTermination
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_index
    /// 	 : DROP  INDEX  IF  EXISTS?  drop_relational_or_xml_or_spatial_indexs drop_backward_compatible_indexs  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropIndex
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_relational_or_xml_or_spatial_indexs
    /// 	 : drop_relational_or_xml_or_spatial_index  COMMA  drop_relational_or_xml_or_spatial_index*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropRelationalOrXmlOrSpatialIndexs
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_backward_compatible_indexs
    /// 	 : drop_backward_compatible_index  COMMA  drop_backward_compatible_index*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropBackwardCompatibleIndexs
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_relational_or_xml_or_spatial_index
    /// 	 : index_name  ON  complete_table_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropRelationalOrXmlOrSpatialIndex
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_backward_compatible_index
    /// 	 : schema_name  DOT?  table_or_view_name  DOT  index_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropBackwardCompatibleIndex
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_procedure
    /// 	 : DROP    IF  EXISTS?  func_proc_name_schemas  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropProcedure
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// func_proc_name_schemas
    /// 	 : func_proc_name_schema  COMMA  func_proc_name_schema*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFuncProcNameSchemas
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_dml_trigger
    /// 	 : DROP  TRIGGER  IF  EXISTS?  simple_names  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropDmlTrigger
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_ddl_trigger
    /// 	 : DROP  TRIGGER  IF  EXISTS?  simple_names  ON  DATABASE ALL  SERVER  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropDdlTrigger
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// simple_names
    /// 	 : simple_name  COMMA  simple_name*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstSimpleNames
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// table_names
    /// 	 : full_table_name  COMMA  full_table_name*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstTableNames
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_function
    /// 	 : DROP  FUNCTION  IF  EXISTS?  func_proc_name_schemas  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropFunction
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_statistics
    /// 	 : DROP  STATISTICS  COMMA?  full_table_name  DOT?  +  SEMI
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropStatistics
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_table
    /// 	 : DROP  TABLE  IF  EXISTS?  table_names  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropTable
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_view
    /// 	 : DROP  VIEW  IF  EXISTS?  simple_names  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDropView
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_type
    /// 	 : CREATE  TYPE    FROM  data_type  default_value?  AS  TABLE  LR_BRACKET  column_def_table_constraints  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateType
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// drop_type
    /// 	 : DROP  TYPE  IF  EXISTS?  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropType
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// openquery
    /// 	 : OPENQUERY  LR_BRACKET  linked_server  COMMA    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstOpenquery
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// opendatasource
    /// 	 : OPENDATASOURCE  LR_BRACKET    COMMA    RR_BRACKET  DOT  database_name?  DOT  schema_name?  DOT  tableName
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOpendatasource
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// declare_statement
    /// 	 : DECLARE  LOCAL_ID  AS?  table_type_definition full_table_name  SEMI?
    /// 	 | DECLARE    SEMI?
    /// 	 | DECLARE  LOCAL_ID  AS?  xml_type_definition  SEMI?
    /// 	 | WITH  XMLNAMESPACES  LR_BRACKET    RR_BRACKET  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDeclareStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// declare_locals
    /// 	 : declare_local  COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDeclareLocals
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// xml_declarations
    /// 	 : xml_declaration  COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstXmlDeclarations
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// xml_declaration
    /// 	 :   AS  id_
    /// 	 | DEFAULT  STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstXmlDeclaration
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// cursor_statement
    /// 	 : CLOSE  GLOBAL?  cursor_name  SEMI?
    /// 	 | DEALLOCATE  GLOBAL?  CURSOR?  cursor_name  SEMI?
    /// 	 | declare_cursor
    /// 	 | fetch_cursor
    /// 	 | OPEN  GLOBAL?  cursor_name  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCursorStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// backup_database
    /// 	 : BACKUP  DATABASE  database_name  READ_WRITE_FILEGROUPS  COMMA?  FILE FILEGROUP  EQUAL  *?  COMMA?  FILE FILEGROUP  EQUAL  *  TO  COMMA?  logical_device_name+ TO  COMMA?  DISK TAPE URL  EQUAL  STRING id_+  MIRROR  TO  COMMA?  logical_device_name++ MIRROR  TO  COMMA?  DISK TAPE URL  EQUAL  STRING id_++?  WITH  COMMA?  DIFFERENTIAL COMMA?  COPY_ONLY COMMA?  COMPRESSION NO_COMPRESSION COMMA?  DESCRIPTION  EQUAL  STRING id_ COMMA?  NAME  EQUAL  backup_name COMMA?  CREDENTIAL COMMA?  FILE_SNAPSHOT COMMA?  EXPIREDATE  EQUAL  STRING id_ RETAINDAYS  EQUAL  DECIMAL id_ COMMA?  NOINIT INIT COMMA?  NOSKIP SKIP_KEYWORD COMMA?  NOFORMAT FORMAT COMMA?  MEDIADESCRIPTION  EQUAL  STRING id_ COMMA?  MEDIANAME  EQUAL   COMMA?  BLOCKSIZE  EQUAL  DECIMAL id_ COMMA?  BUFFERCOUNT  EQUAL  DECIMAL id_ COMMA?  MAXTRANSFER  EQUAL  DECIMAL id_ COMMA?  NO_CHECKSUM CHECKSUM COMMA?  STOP_ON_ERROR CONTINUE_AFTER_ERROR COMMA?  RESTART COMMA?  STATS  EQUAL  ? COMMA?  REWIND NOREWIND COMMA?  LOAD NOUNLOAD COMMA?  ENCRYPTION  LR_BRACKET  ALGORITHM  EQUAL  AES_128 AES_192 AES_256 TRIPLE_DES_3KEY  COMMA  SERVER  CERTIFICATE  EQUAL  encryptor_name SERVER  ASYMMETRIC  KEY  EQUAL  encryptor_name*?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBackupDatabase
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// backup_log
    /// 	 : BACKUP  LOG  database_name  TO  COMMA?  logical_device_name+ TO  COMMA?  DISK TAPE URL  EQUAL  STRING id_+  MIRROR  TO  COMMA?  logical_device_name++ MIRROR  TO  COMMA?  DISK TAPE URL  EQUAL  STRING id_++?  WITH  COMMA?  DIFFERENTIAL COMMA?  COPY_ONLY COMMA?  COMPRESSION NO_COMPRESSION COMMA?  DESCRIPTION  EQUAL  STRING id_ COMMA?  NAME  EQUAL  backup_name COMMA?  CREDENTIAL COMMA?  FILE_SNAPSHOT COMMA?  EXPIREDATE  EQUAL  STRING id_ RETAINDAYS  EQUAL  DECIMAL id_ COMMA?  NOINIT INIT COMMA?  NOSKIP SKIP_KEYWORD COMMA?  NOFORMAT FORMAT COMMA?  MEDIADESCRIPTION  EQUAL  STRING id_ COMMA?  MEDIANAME  EQUAL   COMMA?  BLOCKSIZE  EQUAL  DECIMAL id_ COMMA?  BUFFERCOUNT  EQUAL  DECIMAL id_ COMMA?  MAXTRANSFER  EQUAL  DECIMAL id_ COMMA?  NO_CHECKSUM CHECKSUM COMMA?  STOP_ON_ERROR CONTINUE_AFTER_ERROR COMMA?  RESTART COMMA?  STATS  EQUAL  ? COMMA?  REWIND NOREWIND COMMA?  LOAD NOUNLOAD COMMA?  NORECOVERY STANDBY  EQUAL   COMMA?  NO_TRUNCATE COMMA?  ENCRYPTION  LR_BRACKET  ALGORITHM  EQUAL  AES_128 AES_192 AES_256 TRIPLE_DES_3KEY  COMMA  SERVER  CERTIFICATE  EQUAL  encryptor_name SERVER  ASYMMETRIC  KEY  EQUAL  encryptor_name*?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBackupLog
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// backup_certificate
    /// 	 : BACKUP  CERTIFICATE  certificate_name  TO  FILE  EQUAL    WITH  PRIVATE  KEY  LR_BRACKET  COMMA?  FILE  EQUAL   COMMA?  ENCRYPTION  BY  PASSWORD  EQUAL   COMMA?  DECRYPTION  BY  PASSWORD  EQUAL  +  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstBackupCertificate
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// backup_master_key
    /// 	 : BACKUP  MASTER  KEY  TO  FILE  EQUAL    ENCRYPTION  BY  PASSWORD  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBackupMasterKey
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// backup_service_master_key
    /// 	 : BACKUP  SERVICE  MASTER  KEY  TO  FILE  EQUAL    ENCRYPTION  BY  PASSWORD  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBackupServiceMasterKey
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// kill_statement
    /// 	 : KILL  kill_process kill_query_notification kill_stats_job
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstKillStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// kill_process
    /// 	 :  UOW  WITH  STATUSONLY?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstKillProcess
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// kill_query_notification
    /// 	 : QUERY  NOTIFICATION  SUBSCRIPTION  ALL 
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstKillQueryNotification
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// kill_stats_job
    /// 	 : STATS  JOB  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstKillStatsJob
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// execute_statement
    /// 	 : EXECUTE  execute_body  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstExecuteStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// execute_body_batch
    /// 	 : func_proc_name_server_database_schema  execute_statement_args?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstExecuteBodyBatch
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// execute_body
    /// 	 :   EQUAL?  func_proc_name_server_database_schema execute_var_string  execute_statement_arg?
    /// 	 | LR_BRACKET  execute_var_strings  RR_BRACKET  AS?  LOGIN USER  EQUAL  STRING?  AT_KEYWORD  linked_server?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteBody
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// execute_var_strings
    /// 	 : execute_var_string  COMMA  execute_var_string*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstExecuteVarStrings
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// execute_statement_arg
    /// 	 : execute_statement_arg_unnamed  COMMA  execute_statement_arg*
    /// 	 | execute_statement_arg_nameds
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteStatementArg
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// execute_statement_arg_nameds
    /// 	 : execute_statement_arg_named  COMMA  execute_statement_arg_named*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstExecuteStatementArgNameds
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// execute_statement_args
    /// 	 : execute_statement_arg  COMMA  execute_statement_arg*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstExecuteStatementArgs
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// execute_statement_arg_named
    /// 	 :   EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteStatementArgNamed
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// execute_statement_arg_unnamed
    /// 	 : 
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteStatementArgUnnamed
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// execute_parameter
    /// 	 : constant LOCAL_ID  OUTPUT OUT? id_ DEFAULT NULL_
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteParameter
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// execute_var_string
    /// 	 : LOCAL_ID  OUTPUT OUT?  PLUS  LOCAL_ID  PLUS  execute_var_string??
    /// 	 | STRING  PLUS  LOCAL_ID  PLUS  execute_var_string??
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteVarString
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// security_statement
    /// 	 : execute_clause  SEMI?
    /// 	 | GRANT  ALL  PRIVILEGES? grant_permission  LR_BRACKET  column_name_list  RR_BRACKET?  ON  class_type_for_grant  DOUBLE_COLON?  ?  TO  to_principal_rincipal_ids  WITH  GRANT  OPTION?  AS  ?  SEMI?
    /// 	 | REVERT  LR_BRACKET  WITH  COOKIE  EQUAL  LOCAL_ID  RR_BRACKET?  SEMI?
    /// 	 | open_key
    /// 	 | close_key
    /// 	 | create_key
    /// 	 | create_certificate
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSecurityStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// to_principal_rincipal_ids
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstToPrincipalRincipalIds
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// principal_id
    /// 	 : 
    /// 	 | id_
    /// 	 | PUBLIC
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstPrincipalId
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_certificate
    /// 	 : CREATE  CERTIFICATE  certificate_name  AUTHORIZATION  user_name?  FROM  existing_keys generate_new_keys  ACTIVE  FOR  BEGIN  DIALOG  EQUAL  on_off?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCreateCertificate
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// existing_keys
    /// 	 : ASSEMBLY  assembly_name
    /// 	 | EXECUTABLE?  FILE  EQUAL    WITH  PRIVATE  KEY  LR_BRACKET  private_key_options  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExistingKeys
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// private_key_options
    /// 	 : FILE BINARY  EQUAL    COMMA  DECRYPTION ENCRYPTION  BY  PASSWORD  EQUAL  ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPrivateKeyOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// generate_new_keys
    /// 	 : ENCRYPTION  BY  PASSWORD  EQUAL  ?  WITH  SUBJECT  EQUAL    COMMA  date_options*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGenerateNewKeys
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// date_options
    /// 	 : START_DATE EXPIRY_DATE  EQUAL  STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDateOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// open_key
    /// 	 : OPEN  SYMMETRIC  KEY  symmetric_key_name  DECRYPTION  BY  decryption_mechanism
    /// 	 | OPEN  MASTER  KEY  DECRYPTION  BY  PASSWORD  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOpenKey
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// close_key
    /// 	 : CLOSE  SYMMETRIC  KEY  symmetric_key_name
    /// 	 | CLOSE  ALL  SYMMETRIC  KEYS
    /// 	 | CLOSE  MASTER  KEY
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCloseKey
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_key
    /// 	 : CREATE  MASTER  KEY  ENCRYPTION  BY  PASSWORD  EQUAL  
    /// 	 | CREATE  SYMMETRIC  KEY  symmetric_key_name  AUTHORIZATION  user_name?  FROM  PROVIDER  provider_name?  WITH  key_options ENCRYPTION  BY  encryption_mechanism  COMMA?+
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateKey
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// key_options
    /// 	 : KEY_SOURCE  EQUAL  
    /// 	 | ALGORITHM  EQUAL  algorithm
    /// 	 | IDENTITY_VALUE  EQUAL  
    /// 	 | PROVIDER_KEY_NAME  EQUAL  
    /// 	 | CREATION_DISPOSITION  EQUAL  CREATE_NEW OPEN_EXISTING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstKeyOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// algorithm
    /// 	 : DES
    /// 	 | TRIPLE_DES
    /// 	 | TRIPLE_DES_3KEY
    /// 	 | RC2
    /// 	 | RC4
    /// 	 | RC4_128
    /// 	 | DESX
    /// 	 | AES_128
    /// 	 | AES_192
    /// 	 | AES_256
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstAlgorithm
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// encryption_mechanism
    /// 	 : CERTIFICATE  certificate_name
    /// 	 | ASYMMETRIC  KEY  asym_key_name
    /// 	 | SYMMETRIC  KEY  symmetric_key_name
    /// 	 | PASSWORD  EQUAL  STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEncryptionMechanism
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// decryption_mechanism
    /// 	 : CERTIFICATE  certificate_name  WITH  PASSWORD  EQUAL  STRING?
    /// 	 | ASYMMETRIC  KEY  asym_key_name  WITH  PASSWORD  EQUAL  STRING?
    /// 	 | SYMMETRIC  KEY  symmetric_key_name
    /// 	 | PASSWORD  EQUAL  STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDecryptionMechanism
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// grant_permission
    /// 	 : ADMINISTER  BULK  OPERATIONS DATABASE  BULK  OPERATIONS
    /// 	 | ALTER  ANY  APPLICATION  ROLE ASSEMBLY ASYMMETRIC  KEY AVAILABILITY  GROUP CERTIFICATE COLUMN  ENCRYPTION  KEY MASTER  KEY CONNECTION CONTRACT CREDENTIAL DATABASE  AUDIT DDL  TRIGGER EVENT  NOTIFICATION SESSION SCOPED  CONFIGURATION? DATASPACE ENDPOINT EVENT  NOTIFICATION SESSION EXTERNAL  DATA  SOURCE FILE  FORMAT LIBRARY FULLTEXT  CATALOG LINKED  SERVER LOGIN MASK MESSAGE  TYPE REMOTE  SERVICE  BINDING ROLE ROUTE SCHEMA SECURITY  POLICY SERVER  AUDIT ROLE SERVICE SYMMETRIC  KEY USER RESOURCES SERVER  STATE SETTINGS TRACE?
    /// 	 | AUTHENTICATE  SERVER?
    /// 	 | BACKUP  DATABASE LOG
    /// 	 | CHECKPOINT
    /// 	 | CONNECT  ANY  DATABASE REPLICATION SQL?
    /// 	 | CONTROL  SERVER?
    /// 	 | CREATE  AGGREGATE ANY  DATABASE ASSEMBLY ASYMMETRIC  KEY AVAILABILITY  GROUP CERTIFICATE CONTRACT DATABASE  DDL  EVENT  NOTIFICATION? DDL  EVENT  NOTIFICATION DEFAULT ENDPOINT EXTERNAL  LIBRARY FULLTEXT  CATALOG FUNCTION MESSAGE  TYPE PROCEDURE QUEUE REMOTE  SERVICE  BINDING ROLE ROUTE RULE SCHEMA SEQUENCE SERVER  ROLE SERVICE SYMMETRIC  KEY SYNONYM TABLE TRACE  EVENT  NOTIFICATION TYPE VIEW XML  SCHEMA  COLLECTION
    /// 	 | DELETE
    /// 	 | EXECUTE  ANY  EXTERNAL  SCRIPT?
    /// 	 | EXTERNAL  ACCESS  ASSEMBLY
    /// 	 | IMPERSONATE  ANY  LOGIN?
    /// 	 | INSERT
    /// 	 | KILL  DATABASE  CONNECTION
    /// 	 | RECEIVE
    /// 	 | REFERENCES
    /// 	 | SELECT  ALL  USER  SECURABLES?
    /// 	 | SEND
    /// 	 | SHOWPLAN
    /// 	 | SHUTDOWN
    /// 	 | SUBSCRIBE  QUERY  NOTIFICATIONS
    /// 	 | TAKE  OWNERSHIP
    /// 	 | UNMASK
    /// 	 | UNSAFE  ASSEMBLY
    /// 	 | UPDATE
    /// 	 | VIEW  ANY  DATABASE DEFINITION COLUMN  ENCRYPTION MASTER  KEY  DEFINITION CHANGE  TRACKING DATABASE  STATE DEFINITION SERVER  STATE
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGrantPermission
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// set_statement
    /// 	 : SET  LOCAL_ID  DOT  ?  EQUAL  expression  SEMI?
    /// 	 | SET  LOCAL_ID  assignment_operator  expression  SEMI?
    /// 	 | SET  LOCAL_ID  EQUAL  CURSOR  declare_set_cursor_common  FOR  READ  ONLY UPDATE  OF  column_name_list??  SEMI?
    /// 	 | set_special
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSetStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// transaction_statement
    /// 	 : BEGIN  DISTRIBUTED  TRAN TRANSACTION  id_ LOCAL_ID?  SEMI?
    /// 	 | BEGIN  TRAN TRANSACTION  id_ LOCAL_ID  WITH  MARK  STRING??  SEMI?
    /// 	 | COMMIT  TRAN TRANSACTION  id_ LOCAL_ID  WITH  LR_BRACKET  DELAYED_DURABILITY  EQUAL  OFF ON  RR_BRACKET??  SEMI?
    /// 	 | COMMIT  WORK?  SEMI?
    /// 	 | COMMIT  id_
    /// 	 | ROLLBACK  id_
    /// 	 | ROLLBACK  TRAN TRANSACTION  id_ LOCAL_ID?  SEMI?
    /// 	 | ROLLBACK  WORK?  SEMI?
    /// 	 | SAVE  TRAN TRANSACTION  id_ LOCAL_ID?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTransactionStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// go_statement
    /// 	 : GO  ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGoStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// use_statement
    /// 	 : USE  database_name  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstUseStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// setuser_statement
    /// 	 : SETUSER  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSetuserStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// reconfigure_statement
    /// 	 : RECONFIGURE  WITH  OVERRIDE?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstReconfigureStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// shutdown_statement
    /// 	 : SHUTDOWN  WITH  NOWAIT?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstShutdownStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// checkpoint_statement
    /// 	 : CHECKPOINT  ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCheckpointStatement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// dbcc_special
    /// 	 : DBCC  SHRINKLOG  LR_BRACKET  SIZE  EQUAL  constant_expression id_ DEFAULT  RR_BRACKET?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDbccSpecial
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// dbcc_clause
    /// 	 : DBCC    LR_BRACKET  expression_list  RR_BRACKET?  WITH  dbcc_options?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDbccClause
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// dbcc_command
    /// 	 : simple_id
    /// 	 | keyword
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDbccCommand
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// dbcc_options
    /// 	 : simple_id  COMMA  simple_id?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDbccOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// execute_clause
    /// 	 : EXECUTE  AS  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteClause
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// declare_local
    /// 	 : LOCAL_ID  AS?  data_type  EQUAL  expression?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDeclareLocal
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// table_type_definition
    /// 	 : TABLE  LR_BRACKET  column_def_table_constraints  COMMA?  table_type_indices*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstTableTypeDefinition
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// table_type_indices
    /// 	 : PRIMARY  KEY INDEX  id_  CLUSTERED NONCLUSTERED? UNIQUE  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// 	 | CHECK  LR_BRACKET  search_condition  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableTypeIndices
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// xml_type_definition
    /// 	 : XML  LR_BRACKET  CONTENT DOCUMENT?  xml_schema_collection  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstXmlTypeDefinition
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// xml_schema_collection
    /// 	 : ID  DOT  ID
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstXmlSchemaCollection
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// column_def_table_constraints
    /// 	 : column_def_table_constraint  COMMA?  column_def_table_constraint*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstColumnDefTableConstraints
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// column_def_table_constraint
    /// 	 : column_definition
    /// 	 | materialized_column_definition
    /// 	 | table_constraint
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnDefTableConstraint
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// column_definition
    /// 	 : column_name  data_type AS  expression  PERSISTED?  column_definition_element*  column_index?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstColumnDefinition
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// column_definition_element
    /// 	 : FILESTREAM
    /// 	 | COLLATE  collation_name
    /// 	 | SPARSE
    /// 	 | MASKED  WITH  LR_BRACKET  FUNCTION  EQUAL    RR_BRACKET
    /// 	 | CONSTRAINT  constraint_name?  DEFAULT  
    /// 	 | IDENTITY  LR_BRACKET    COMMA    RR_BRACKET?
    /// 	 | NOT  FOR  REPLICATION
    /// 	 | GENERATED  ALWAYS  AS  ROW TRANSACTION_ID SEQUENCE_NUMBER  START END  HIDDEN_KEYWORD?
    /// 	 | ROWGUIDCOL
    /// 	 | ENCRYPTED  WITH  LR_BRACKET  COLUMN_ENCRYPTION_KEY  EQUAL    COMMA  ENCRYPTION_TYPE  EQUAL  DETERMINISTIC RANDOMIZED  COMMA  ALGORITHM  EQUAL    RR_BRACKET
    /// 	 | column_constraint
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnDefinitionElement
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// column_modifier
    /// 	 : id_  add_drop  ROWGUIDCOL PERSISTED NOT  FOR  REPLICATION SPARSE HIDDEN_KEYWORD MASKED  WITH  FUNCTION  EQUAL  STRING LR_BRACKET  FUNCTION  EQUAL  STRING  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstColumnModifier
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// materialized_column_definition
    /// 	 : id_  COMPUTE AS  expression  MATERIALIZED NOT  MATERIALIZED?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstMaterializedColumnDefinition
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// column_constraint
    /// 	 : CONSTRAINT  constraint_name?  null_notnull PRIMARY  KEY UNIQUE  clustered?  primary_key_options FOREIGN  KEY?  foreign_key_options check_constraint
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnConstraint
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// column_index
    /// 	 : INDEX  index_name?  create_table_index_options?  on_partition_or_filegroup?  FILESTREAM_ON  filestream_filegroup_or_partition_schema_name NULL_DOUBLE_QUOTE?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstColumnIndex
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// on_partition_or_filegroup
    /// 	 : ON  partition_scheme_name  LR_BRACKET  partition_column_name  RR_BRACKET file_group_name DEFAULT_DOUBLE_QUOTE
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOnPartitionOrFilegroup
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// table_constraint
    /// 	 : CONSTRAINT  constraint_name?  PRIMARY  KEY UNIQUE  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET  primary_key_options FOREIGN  KEY  LR_BRACKET    RR_BRACKET  foreign_key_options CONNECTION  LR_BRACKET  connection_node  COMMA  connection_node*  RR_BRACKET DEFAULT  LR_BRACKET?  STRING PLUS function_call DECIMAL+ NEXT  VALUE  FOR  full_table_name  RR_BRACKET?  FOR  id_ check_constraint
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableConstraint
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// connection_node
    /// 	 :   TO  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstConnectionNode
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// primary_key_options
    /// 	 : WITH  FILLFACTOR  EQUAL  DECIMAL?  alter_table_index_options?  on_partition_or_filegroup?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstPrimaryKeyOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// foreign_key_options
    /// 	 : REFERENCES  full_table_name  LR_BRACKET    RR_BRACKET  on_delete?  on_update?  NOT  FOR  REPLICATION?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstForeignKeyOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// check_constraint
    /// 	 : CHECK  NOT  FOR  REPLICATION?  LR_BRACKET  search_condition  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCheckConstraint
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// on_delete
    /// 	 : ON  DELETE  NO  ACTION CASCADE SET  NULL_ SET  DEFAULT
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOnDelete
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// on_update
    /// 	 : ON  UPDATE  NO  ACTION CASCADE SET  NULL_ SET  DEFAULT
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOnUpdate
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_table_index_options
    /// 	 : WITH  LR_BRACKET  alter_table_index_option  COMMA  alter_table_index_option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAlterTableIndexOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// alter_table_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  DECIMAL
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  
    /// 	 | DATA_COMPRESSION  EQUAL  NONE ROW PAGE COLUMNSTORE COLUMNSTORE_ARCHIVE  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// 	 | distribution
    /// 	 | ONLINE  EQUAL  ON  LR_BRACKET  low_priority_lock_wait  RR_BRACKET? OFF
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | MAX_DURATION  EQUAL    MINUTES?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterTableIndexOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// declare_cursor
    /// 	 : DECLARE  cursor_name  CURSOR  declare_set_cursor_common  FOR  UPDATE  OF  column_name_list??? sensitive?  SCROLL?  CURSOR  FOR  select_statement_standalone  FOR  READ  ONLY UPDATE OF  column_name_list?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDeclareCursor
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// sensitive
    /// 	 : SEMI_SENSITIVE
    /// 	 | INSENSITIVE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstSensitive
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// declare_set_cursor_common
    /// 	 : declare_set_cursor_common_partial*  FOR  select_statement_standalone
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDeclareSetCursorCommon
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// declare_set_cursor_common_partial
    /// 	 : local_global
    /// 	 | FORWARD_ONLY SCROLL
    /// 	 | STATIC KEYSET DYNAMIC FAST_FORWARD
    /// 	 | READ_ONLY SCROLL_LOCKS OPTIMISTIC
    /// 	 | TYPE_WARNING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDeclareSetCursorCommonPartial
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// fetch_cursor
    /// 	 : FETCH  fetch_cursor_strategy absolute_relative  expression?  FROM?  GLOBAL?  cursor_name  INTO  local_ids?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFetchCursor
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// absolute_relative
    /// 	 : ABSOLUTE
    /// 	 | RELATIVE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstAbsoluteRelative
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// fetch_cursor_strategy
    /// 	 : NEXT
    /// 	 | PRIOR
    /// 	 | FIRST
    /// 	 | LAST
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstFetchCursorStrategy
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// local_ids
    /// 	 : LOCAL_ID  COMMA  LOCAL_ID*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstLocalIds
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// set_special
    /// 	 : SET  id_  id_ constant_LOCAL_ID on_off  SEMI?
    /// 	 | SET  STATISTICS  IO TIME XML PROFILE  on_off  SEMI?
    /// 	 | SET  ROWCOUNT  LOCAL_ID DECIMAL  SEMI?
    /// 	 | SET  TEXTSIZE  DECIMAL  SEMI?
    /// 	 | SET  TRANSACTION  ISOLATION  LEVEL  READ  UNCOMMITTED READ  COMMITTED REPEATABLE  READ SNAPSHOT SERIALIZABLE DECIMAL  SEMI?
    /// 	 | SET  IDENTITY_INSERT  full_table_name  on_off  SEMI?
    /// 	 | SET  special_list  COMMA  special_list*  on_off
    /// 	 | SET  modify_method
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSetSpecial
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// special_list
    /// 	 : ANSI_NULLS
    /// 	 | QUOTED_IDENTIFIER
    /// 	 | ANSI_PADDING
    /// 	 | ANSI_WARNINGS
    /// 	 | ANSI_DEFAULTS
    /// 	 | ANSI_NULL_DFLT_OFF
    /// 	 | ANSI_NULL_DFLT_ON
    /// 	 | ARITHABORT
    /// 	 | ARITHIGNORE
    /// 	 | CONCAT_NULL_YIELDS_NULL
    /// 	 | CURSOR_CLOSE_ON_COMMIT
    /// 	 | FMTONLY
    /// 	 | FORCEPLAN
    /// 	 | IMPLICIT_TRANSACTIONS
    /// 	 | NOCOUNT
    /// 	 | NOEXEC
    /// 	 | NUMERIC_ROUNDABORT
    /// 	 | PARSEONLY
    /// 	 | REMOTE_PROC_TRANSACTIONS
    /// 	 | SHOWPLAN_ALL
    /// 	 | SHOWPLAN_TEXT
    /// 	 | SHOWPLAN_XML
    /// 	 | XACT_ABORT
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstSpecialList
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// constant_LOCAL_ID
    /// 	 : constant
    /// 	 | LOCAL_ID
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstConstantLOCALID
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// expression
    /// 	 : primitive_expression
    /// 	 | function_call
    /// 	 | expression  DOT  value_call query_call exist_call modify_call
    /// 	 | expression  DOT  hierarchyid_call
    /// 	 | expression  COLLATE  id_
    /// 	 | case_expression
    /// 	 | full_column_name
    /// 	 | bracket_expression
    /// 	 | unary_operator_expression
    /// 	 | expression    expression
    /// 	 | expression    expression
    /// 	 | expression  time_zone
    /// 	 | over_clause
    /// 	 | DOLLAR_ACTION
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExpression
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// parameter
    /// 	 : PLACEHOLDER
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstParameter
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// time_zone
    /// 	 : AT_KEYWORD  TIME  ZONE  expression
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstTimeZone
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// primitive_expression
    /// 	 : DEFAULT
    /// 	 | NULL_
    /// 	 | LOCAL_ID
    /// 	 | constant
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPrimitiveExpression
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// case_expression
    /// 	 : CASE    switch_section+  ELSE  ?  END
    /// 	 | CASE  switch_search_condition_section+  ELSE  ?  END
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCaseExpression
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// unary_operator_expression
    /// 	 : BIT_NOT  expression
    /// 	 |   expression
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUnaryOperatorExpression
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// bracket_expression
    /// 	 : LR_BRACKET  expression  RR_BRACKET
    /// 	 | LR_BRACKET  subquery  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBracketExpression
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// constant_expression
    /// 	 : NULL_
    /// 	 | constant
    /// 	 | function_call
    /// 	 | LOCAL_ID
    /// 	 | LR_BRACKET  constant_expression  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstConstantExpression
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// with_expression
    /// 	 : WITH    COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWithExpression
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// common_table_expression
    /// 	 :   LR_BRACKET    RR_BRACKET?  AS  LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCommonTableExpression
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// update_elem
    /// 	 : LOCAL_ID  EQUAL  full_column_name  EQUAL assignment_operator  expression
    /// 	 | full_column_name LOCAL_ID  EQUAL assignment_operator  expression
    /// 	 | udt_column_name  DOT  method_name  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUpdateElem
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// update_elem_merge
    /// 	 : full_column_name LOCAL_ID  EQUAL assignment_operator  expression
    /// 	 | udt_column_name  DOT  method_name  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUpdateElemMerge
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// search_condition
    /// 	 : NOT*  predicate LR_BRACKET  search_condition  RR_BRACKET
    /// 	 | search_condition  AND  search_condition
    /// 	 | search_condition  OR  search_condition
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSearchCondition
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// predicate
    /// 	 : EXISTS  LR_BRACKET  subquery  RR_BRACKET
    /// 	 | freetext_predicate
    /// 	 | expression  comparison_operator  expression
    /// 	 | expression  MULT_ASSIGN  expression
    /// 	 | expression  comparison_operator  ALL SOME ANY  LR_BRACKET  subquery  RR_BRACKET
    /// 	 | expression  NOT*  BETWEEN  expression  AND  expression
    /// 	 | expression  NOT*  IN  LR_BRACKET  subquery expression_list  RR_BRACKET
    /// 	 | expression  NOT*  LIKE  expression  ESCAPE  expression?
    /// 	 | expression  IS  null_notnull
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPredicate
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// query_expression
    /// 	 : query_specification LR_BRACKET  query_expression  RR_BRACKET  UNION  ALL?  query_expression?
    /// 	 | query_specification  select_order_by_clause?  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueryExpression
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// sql_union
    /// 	 : UNION  ALL? EXCEPT INTERSECT   LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSqlUnion
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// query_specification
    /// 	 : SELECT        INTO  ?  FROM  ?  WHERE  ?  GROUP  BY    groupBys_list GROUPING  SETS  LR_BRACKET  groupSet_list  RR_BRACKET?  HAVING  ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQuerySpecification
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// groupSet_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGroupSetList
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// groupBys_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGroupBysList
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// top_clause
    /// 	 : TOP  top_percent top_count  WITH  TIES?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTopClause
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// top_percent
    /// 	 :   PERCENT
    /// 	 | LR_BRACKET    RR_BRACKET  PERCENT
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTopPercent
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// top_count
    /// 	 : 
    /// 	 | LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTopCount
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// order_by_clause
    /// 	 : ORDER  BY    COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOrderByClause
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// select_order_by_clause
    /// 	 : order_by_clause  OFFSET      FETCH        ONLY??
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstSelectOrderByClause
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// for_clause
    /// 	 : FOR  BROWSE
    /// 	 | FOR  XML  RAW  LR_BRACKET  STRING  RR_BRACKET? AUTO  xml_common_directives*  COMMA  XMLDATA XMLSCHEMA  LR_BRACKET  STRING  RR_BRACKET??  COMMA  ELEMENTS  XSINIL ABSENT??
    /// 	 | FOR  XML  EXPLICIT  xml_common_directives*  COMMA  XMLDATA?
    /// 	 | FOR  XML  PATH  LR_BRACKET  STRING  RR_BRACKET?  xml_common_directives*  COMMA  ELEMENTS  XSINIL ABSENT??
    /// 	 | FOR  JSON  AUTO PATH  COMMA  ROOT  LR_BRACKET  STRING  RR_BRACKET INCLUDE_NULL_VALUES WITHOUT_ARRAY_WRAPPER*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstForClause
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// xml_common_directives
    /// 	 : COMMA  BINARY_KEYWORD  BASE64 TYPE ROOT  LR_BRACKET  STRING  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstXmlCommonDirectives
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// order_by_expression
    /// 	 :    ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOrderByExpression
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// grouping_sets_item
    /// 	 : grouping_sets_list
    /// 	 | LR_BRACKET  grouping_sets_list?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGroupingSetsItem
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// grouping_sets_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGroupingSetsList
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// option_clause
    /// 	 : OPTION  LR_BRACKET  option  COMMA  option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstOptionClause
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// option
    /// 	 : FAST  
    /// 	 | HASH ORDER  GROUP
    /// 	 | MERGE HASH CONCAT  UNION
    /// 	 | LOOP MERGE HASH  JOIN
    /// 	 | EXPAND  VIEWS
    /// 	 | FORCE  ORDER
    /// 	 | IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX
    /// 	 | KEEP  PLAN
    /// 	 | KEEPFIXED  PLAN
    /// 	 | MAXDOP  
    /// 	 | MAXRECURSION  
    /// 	 | OPTIMIZE  FOR  LR_BRACKET  optimize_for_args  RR_BRACKET
    /// 	 | OPTIMIZE  FOR  UNKNOWN
    /// 	 | PARAMETERIZATION  SIMPLE FORCED
    /// 	 | RECOMPILE
    /// 	 | ROBUST  PLAN
    /// 	 | USE  PLAN  STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// optimize_for_args
    /// 	 : optimize_for_arg  COMMA  optimize_for_arg*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstOptimizeForArgs
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// optimize_for_arg
    /// 	 : LOCAL_ID  UNKNOWN EQUAL  constant NULL_
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOptimizeForArg
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// select_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSelectList
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// udt_method_arguments
    /// 	 : LR_BRACKET    COMMA  *  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUdtMethodArguments
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// star_asterisk
    /// 	 : STAR
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstStarAsterisk
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// table_asterisk
    /// 	 : full_table_name  DOT  STAR
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstTableAsterisk
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// updated_asterisk
    /// 	 : INSERTED DELETED  DOT  STAR
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUpdatedAsterisk
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// column_elem
    /// 	 : column_elem_target  as_column_alias?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstColumnElem
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// column_elem_target
    /// 	 : full_column_name
    /// 	 | DOLLAR  IDENTITY
    /// 	 | DOLLAR  ROWGUID
    /// 	 | NULL_
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnElemTarget
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// udt_elem
    /// 	 : udt_column_name  DOT  non_static_attr  udt_method_arguments  as_column_alias?
    /// 	 | udt_column_name  DOUBLE_COLON  static_attr  udt_method_arguments?  as_column_alias?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUdtElem
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// expression_elem
    /// 	 :     
    /// 	 |   as_column_alias?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExpressionElem
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// expression_assign_elem
    /// 	 : LOCAL_ID  assignment_operator EQUAL  expression
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstExpressionAssignElem
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// table_sources
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableSources
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// table_source
    /// 	 : table_source_item_joined
    /// 	 | LR_BRACKET  table_source  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableSource
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// table_source_item_joined
    /// 	 : table_source_item  
    /// 	 | LR_BRACKET  table_source_item_joined  RR_BRACKET  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableSourceItemJoined
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// table_source_item
    /// 	 : complete_table_name  deprecated_table_hint  as_table_alias
    /// 	 | complete_table_name  as_table_alias?  with_table_hints deprecated_table_hint sybase_legacy_hints?
    /// 	 | rowset_function  as_table_alias?
    /// 	 | LR_BRACKET  derived_table  RR_BRACKET  as_table_alias  column_alias_list??
    /// 	 | change_table  as_table_alias?
    /// 	 | nodes_method  as_table_alias  column_alias_list??
    /// 	 | function_call  as_table_alias  column_alias_list??
    /// 	 |   as_table_alias?
    /// 	 |   DOT    as_table_alias  column_alias_list??
    /// 	 | open_xml
    /// 	 | open_json
    /// 	 | DOUBLE_COLON    as_table_alias?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableSourceItem
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// expression2
    /// 	 : expression  COMMA  expression?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstExpression2
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// open_xml
    /// 	 : OPENXML  LR_BRACKET  expression  COMMA  expression2  RR_BRACKET  WITH  LR_BRACKET  schema_declaration  RR_BRACKET?  as_table_alias?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstOpenXml
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// open_json
    /// 	 : OPENJSON  LR_BRACKET  expression2  RR_BRACKET  WITH  LR_BRACKET  json_declaration  RR_BRACKET?  as_table_alias?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstOpenJson
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// json_declaration
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstJsonDeclaration
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// json_column_declaration
    /// 	 : column_declaration  AS  JSON?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstJsonColumnDeclaration
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// schema_declaration
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSchemaDeclaration
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// column_declaration
    /// 	 : id_  data_type  STRING?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstColumnDeclaration
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// change_table_changes
    /// 	 : CHANGETABLE  LR_BRACKET  CHANGES    COMMA    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstChangeTableChanges
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// change_table_version
    /// 	 : CHANGETABLE  LR_BRACKET  VERSION    COMMA    COMMA    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstChangeTableVersion
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// join_on
    /// 	 :      ?  JOIN    ON  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstJoinOn
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// cross_join
    /// 	 : CROSS  JOIN  table_source
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstCrossJoin
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// apply_
    /// 	 :   APPLY  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstApply
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// pivot
    /// 	 : PIVOT  pivot_clause  as_table_alias
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstPivot
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// unpivot
    /// 	 : UNPIVOT  unpivot_clause  as_table_alias
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstUnpivot
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// pivot_clause
    /// 	 : LR_BRACKET  aggregate_windowed_function  FOR  full_column_name  IN  column_alias_list  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstPivotClause
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// unpivot_clause
    /// 	 : LR_BRACKET    FOR  full_column_name  IN  LR_BRACKET  full_column_name_list  RR_BRACKET  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstUnpivotClause
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// full_column_name_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFullColumnNameList
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// rowset_function
    /// 	 : OPENROWSET  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | OPENROWSET  LR_BRACKET  BULK    COMMA  bulk_options id_  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRowsetFunction
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// bulk_options
    /// 	 : bulk_option  COMMA  bulk_option*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstBulkOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// bulk_option
    /// 	 : id_  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstBulkOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// derived_table
    /// 	 : subquery
    /// 	 | LR_BRACKET  subquery  UNION  ALL  subquery*  RR_BRACKET
    /// 	 | table_value_constructor
    /// 	 | LR_BRACKET  table_value_constructor  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDerivedTable
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// function_call
    /// 	 : RANKING_WINDOWED_FUNCranking_windowed_function
    /// 	 | AGGREGATE_WINDOWED_FUNCaggregate_windowed_function
    /// 	 | ANALYTIC_WINDOWED_FUNCanalytic_windowed_function
    /// 	 | BUILT_IN_FUNCbuilt_in_functions
    /// 	 | SCALAR_FUNCTIONscalar_function_name  LR_BRACKET  expression_list?  RR_BRACKET
    /// 	 | FREE_TEXTfreetext_function
    /// 	 | PARTITION_FUNCpartition_function
    /// 	 | HIERARCHYID_METHODhierarchyid_static_method
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFunctionCall
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// partition_function
    /// 	 : database_name  DOT?  DOLLAR_PARTITION  DOT  function_name  LR_BRACKET  expression  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstPartitionFunction
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// freetext_function
    /// 	 : CONTAINSTABLE FREETEXTTABLE  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  COMMA  expression?  RR_BRACKET
    /// 	 | SEMANTICSIMILARITYTABLE SEMANTICKEYPHRASETABLE  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression  RR_BRACKET
    /// 	 | SEMANTICSIMILARITYDETAILSTABLE  LR_BRACKET  full_table_name  COMMA  full_column_name  COMMA  expression  COMMA  full_column_name  COMMA  expression  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFreetextFunction
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// freetext_predicate
    /// 	 : CONTAINS  LR_BRACKET  full_column_name full_column_names STAR PROPERTY  LR_BRACKET  full_column_name  COMMA  expression  RR_BRACKET  COMMA  expression  RR_BRACKET
    /// 	 | FREETEXT  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFreetextPredicate
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// expression_language
    /// 	 : expression  COMMA  LANGUAGE  expression?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstExpressionLanguage
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// freetext_table_andcolumn_names
    /// 	 : full_table_name  COMMA  full_column_name full_column_names STAR
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFreetextTableAndcolumnNames
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// full_column_names
    /// 	 : LR_BRACKET  full_column_name  COMMA  full_column_name*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFullColumnNames
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// built_in_functions
    /// 	 : APP_NAMEAPP_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | APPLOCK_MODEAPPLOCK_MODE  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | APPLOCK_TESTAPPLOCK_TEST  LR_BRACKET    COMMA    COMMA    COMMA    RR_BRACKET
    /// 	 | ASSEMBLYPROPERTYASSEMBLYPROPERTY  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | COL_LENGTHCOL_LENGTH  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | COL_NAMECOL_NAME  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | COLUMNPROPERTYCOLUMNPROPERTY  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | DATABASEPROPERTYEXDATABASEPROPERTYEX  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | DB_IDDB_ID  LR_BRACKET    RR_BRACKET
    /// 	 | DB_NAMEDB_NAME  LR_BRACKET    RR_BRACKET
    /// 	 | FILE_IDFILE_ID  LR_BRACKET    RR_BRACKET
    /// 	 | FILE_IDEXFILE_IDEX  LR_BRACKET    RR_BRACKET
    /// 	 | FILE_NAMEFILE_NAME  LR_BRACKET    RR_BRACKET
    /// 	 | FILEGROUP_IDFILEGROUP_ID  LR_BRACKET    RR_BRACKET
    /// 	 | FILEGROUP_NAMEFILEGROUP_NAME  LR_BRACKET    RR_BRACKET
    /// 	 | FILEGROUPPROPERTYFILEGROUPPROPERTY  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | FILEPROPERTYFILEPROPERTY  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | FILEPROPERTYEXFILEPROPERTYEX  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | FULLTEXTCATALOGPROPERTYFULLTEXTCATALOGPROPERTY  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | FULLTEXTSERVICEPROPERTYFULLTEXTSERVICEPROPERTY  LR_BRACKET    RR_BRACKET
    /// 	 | INDEX_COLINDEX_COL  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | INDEXKEY_PROPERTYINDEXKEY_PROPERTY  LR_BRACKET    COMMA    COMMA    COMMA    RR_BRACKET
    /// 	 | INDEXPROPERTYINDEXPROPERTY  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | NEXT_VALUE_FORNEXT  VALUE  FOR    OVER  LR_BRACKET  order_by_clause  RR_BRACKET?
    /// 	 | OBJECT_DEFINITIONOBJECT_DEFINITION  LR_BRACKET    RR_BRACKET
    /// 	 | OBJECT_IDOBJECT_ID  LR_BRACKET    COMMA  ?  RR_BRACKET
    /// 	 | OBJECT_NAMEOBJECT_NAME  LR_BRACKET    COMMA  ?  RR_BRACKET
    /// 	 | OBJECT_SCHEMA_NAMEOBJECT_SCHEMA_NAME  LR_BRACKET    COMMA  ?  RR_BRACKET
    /// 	 | OBJECTPROPERTYOBJECTPROPERTY  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | OBJECTPROPERTYEXOBJECTPROPERTYEX  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | ORIGINAL_DB_NAMEORIGINAL_DB_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | PARSENAMEPARSENAME  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | SCHEMA_IDSCHEMA_ID  LR_BRACKET    RR_BRACKET
    /// 	 | SCHEMA_NAMESCHEMA_NAME  LR_BRACKET    RR_BRACKET
    /// 	 | SCOPE_IDENTITYSCOPE_IDENTITY  LR_BRACKET  RR_BRACKET
    /// 	 | SERVERPROPERTYSERVERPROPERTY  LR_BRACKET    RR_BRACKET
    /// 	 | STATS_DATESTATS_DATE  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | TYPE_IDTYPE_ID  LR_BRACKET    RR_BRACKET
    /// 	 | TYPE_NAMETYPE_NAME  LR_BRACKET    RR_BRACKET
    /// 	 | TYPEPROPERTYTYPEPROPERTY  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | ASCIIASCII  LR_BRACKET    RR_BRACKET
    /// 	 | CHARCHAR  LR_BRACKET    RR_BRACKET
    /// 	 | CHARINDEXCHARINDEX  LR_BRACKET    COMMA    COMMA  ?  RR_BRACKET
    /// 	 | CONCATCONCAT  LR_BRACKET    COMMA    COMMA  *  RR_BRACKET
    /// 	 | CONCAT_WSCONCAT_WS  LR_BRACKET    COMMA    COMMA    COMMA  *  RR_BRACKET
    /// 	 | DIFFERENCEDIFFERENCE  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | FORMATFORMAT  LR_BRACKET    COMMA    COMMA  ?  RR_BRACKET
    /// 	 | LEFTLEFT  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | LENLEN  LR_BRACKET    RR_BRACKET
    /// 	 | LOWERLOWER  LR_BRACKET    RR_BRACKET
    /// 	 | LTRIMLTRIM  LR_BRACKET    RR_BRACKET
    /// 	 | NCHARNCHAR  LR_BRACKET    RR_BRACKET
    /// 	 | PATINDEXPATINDEX  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | QUOTENAMEQUOTENAME  LR_BRACKET    COMMA  ?  RR_BRACKET
    /// 	 | REPLACEREPLACE  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | REPLICATEREPLICATE  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | REVERSEREVERSE  LR_BRACKET    RR_BRACKET
    /// 	 | RIGHTRIGHT  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | RTRIMRTRIM  LR_BRACKET    RR_BRACKET
    /// 	 | SOUNDEXSOUNDEX  LR_BRACKET    RR_BRACKET
    /// 	 | SPACESPACE_KEYWORD  LR_BRACKET    RR_BRACKET
    /// 	 | STRSTR  LR_BRACKET    COMMA    COMMA  ??  RR_BRACKET
    /// 	 | STRINGAGGSTRING_AGG  LR_BRACKET    COMMA    RR_BRACKET  WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET?
    /// 	 | STRING_ESCAPESTRING_ESCAPE  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | STUFFSTUFF  LR_BRACKET    COMMA    COMMA    COMMA    RR_BRACKET
    /// 	 | SUBSTRINGSUBSTRING  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | TRANSLATETRANSLATE  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | TRIMTRIM  LR_BRACKET    FROM?    RR_BRACKET
    /// 	 | UNICODEUNICODE  LR_BRACKET    RR_BRACKET
    /// 	 | UPPERUPPER  LR_BRACKET    RR_BRACKET
    /// 	 | BINARY_CHECKSUMBINARY_CHECKSUM  LR_BRACKET   expressions  RR_BRACKET
    /// 	 | CHECKSUMCHECKSUM  LR_BRACKET   expressions  RR_BRACKET
    /// 	 | COMPRESSCOMPRESS  LR_BRACKET    RR_BRACKET
    /// 	 | CONNECTIONPROPERTYCONNECTIONPROPERTY  LR_BRACKET    RR_BRACKET
    /// 	 | CONTEXT_INFOCONTEXT_INFO  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_REQUEST_IDCURRENT_REQUEST_ID  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_TRANSACTION_IDCURRENT_TRANSACTION_ID  LR_BRACKET  RR_BRACKET
    /// 	 | DECOMPRESSDECOMPRESS  LR_BRACKET    RR_BRACKET
    /// 	 | ERROR_LINEERROR_LINE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_MESSAGEERROR_MESSAGE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_NUMBERERROR_NUMBER  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_PROCEDUREERROR_PROCEDURE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_SEVERITYERROR_SEVERITY  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_STATEERROR_STATE  LR_BRACKET  RR_BRACKET
    /// 	 | FORMATMESSAGEFORMATMESSAGE  LR_BRACKET      COMMA  expressions  RR_BRACKET
    /// 	 | GET_FILESTREAM_TRANSACTION_CONTEXTGET_FILESTREAM_TRANSACTION_CONTEXT  LR_BRACKET  RR_BRACKET
    /// 	 | GETANSINULLGETANSINULL  LR_BRACKET  ?  RR_BRACKET
    /// 	 | HOST_IDHOST_ID  LR_BRACKET  RR_BRACKET
    /// 	 | HOST_NAMEHOST_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | ISNULLISNULL  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | ISNUMERICISNUMERIC  LR_BRACKET  expression  RR_BRACKET
    /// 	 | MIN_ACTIVE_ROWVERSIONMIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET
    /// 	 | NEWIDNEWID  LR_BRACKET  RR_BRACKET
    /// 	 | NEWSEQUENTIALIDNEWSEQUENTIALID  LR_BRACKET  RR_BRACKET
    /// 	 | ROWCOUNT_BIGROWCOUNT_BIG  LR_BRACKET  RR_BRACKET
    /// 	 | SESSION_CONTEXTSESSION_CONTEXT  LR_BRACKET    RR_BRACKET
    /// 	 | XACT_STATEXACT_STATE  LR_BRACKET  RR_BRACKET
    /// 	 | CASTCAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET
    /// 	 | TRY_CASTTRY_CAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET
    /// 	 | CONVERTCONVERT  LR_BRACKET    COMMA  expression2  RR_BRACKET
    /// 	 | COALESCECOALESCE  LR_BRACKET  expression_list  RR_BRACKET
    /// 	 | CURRENT_DATECURRENT_DATE  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_TIMESTAMPCURRENT_TIMESTAMP
    /// 	 | CURRENT_USERCURRENT_USER
    /// 	 | DATEADDDATEADD  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | DATEDIFFDATEDIFF  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | DATENAMEDATENAME  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | DATEPARTDATEPART  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | GETDATEGETDATE  LR_BRACKET  RR_BRACKET
    /// 	 | GETUTCDATEGETUTCDATE  LR_BRACKET  RR_BRACKET
    /// 	 | IDENTITYIDENTITY  LR_BRACKET  data_type  COMMA  ?  COMMA  ?  RR_BRACKET
    /// 	 | MIN_ACTIVE_ROWVERSIONMIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET
    /// 	 | NULLIFNULLIF  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | SESSION_USERSESSION_USER
    /// 	 | SYSTEM_USERSYSTEM_USER
    /// 	 | USERUSER
    /// 	 | PARSEPARSE  LR_BRACKET    AS  data_type  USING  ?  RR_BRACKET
    /// 	 | XML_DATA_TYPE_FUNCxml_data_type_methods
    /// 	 | IIFIIF  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBuiltInFunctions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// expressions
    /// 	 : expression  COMMA  expression*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstExpressions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// value_method
    /// 	 :     LR_BRACKET  RR_BRACKET  LR_BRACKET  subquery  RR_BRACKET  DOT  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstValueMethod
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// value_call
    /// 	 : VALUE  LR_BRACKET    COMMA    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstValueCall
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// query_method
    /// 	 :   LR_BRACKET  subquery  RR_BRACKET  DOT  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueryMethod
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// query_call
    /// 	 : QUERY  LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueryCall
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// exist_method
    /// 	 :   LR_BRACKET  subquery  RR_BRACKET  DOT  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExistMethod
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// exist_call
    /// 	 : EXIST  LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExistCall
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// modify_method
    /// 	 :   LR_BRACKET  subquery  RR_BRACKET  DOT  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstModifyMethod
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// modify_call
    /// 	 : MODIFY  LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstModifyCall
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// hierarchyid_call
    /// 	 : GETANCESTOR  LR_BRACKET    RR_BRACKET
    /// 	 | GETDESCENDANT  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | GETLEVEL  LR_BRACKET  RR_BRACKET
    /// 	 | ISDESCENDANTOF  LR_BRACKET    RR_BRACKET
    /// 	 | GETREPARENTEDVALUE  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | TOSTRING  LR_BRACKET  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstHierarchyidCall
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// hierarchyid_static_method
    /// 	 : HIERARCHYID  DOUBLE_COLON  GETROOT  LR_BRACKET  RR_BRACKET PARSE  LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstHierarchyidStaticMethod
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// nodes_method
    /// 	 :   LR_BRACKET  subquery  RR_BRACKET  DOT  NODES  LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstNodesMethod
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// switch_section
    /// 	 : WHEN  expression  THEN  expression
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstSwitchSection
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// switch_search_condition_section
    /// 	 : WHEN  search_condition  THEN  expression
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstSwitchSearchConditionSection
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// as_column_alias
    /// 	 : AS?  column_alias
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAsColumnAlias
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// as_table_alias
    /// 	 : AS?  table_alias
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAsTableAlias
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// table_alias
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstTableAlias
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// with_table_hints
    /// 	 : WITH  LR_BRACKET    COMMA?  *  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWithTableHints
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// deprecated_table_hint
    /// 	 : LR_BRACKET  table_hint  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDeprecatedTableHint
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// sybase_legacy_hints
    /// 	 : sybase_legacy_hint+
    /// </summary>
    /// <remarks>
    /// Strategy : ClassList
    /// </remarks>
    public partial class AstSybaseLegacyHints
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// sybase_legacy_hint
    /// 	 : HOLDLOCK
    /// 	 | NOHOLDLOCK
    /// 	 | READPAST
    /// 	 | SHARED
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstSybaseLegacyHint
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// index_values
    /// 	 : index_value  COMMA  index_value*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstIndexValues
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// table_hint
    /// 	 : NOEXPAND
    /// 	 | INDEX  LR_BRACKET  index_values  RR_BRACKET EQUAL  LR_BRACKET  index_value  RR_BRACKET EQUAL  index_value
    /// 	 | FORCESEEK  LR_BRACKET  index_value  LR_BRACKET  column_name_list  RR_BRACKET  RR_BRACKET?
    /// 	 | FORCESCAN
    /// 	 | HOLDLOCK
    /// 	 | NOLOCK
    /// 	 | NOWAIT
    /// 	 | PAGLOCK
    /// 	 | READCOMMITTED
    /// 	 | READCOMMITTEDLOCK
    /// 	 | READPAST
    /// 	 | READUNCOMMITTED
    /// 	 | REPEATABLEREAD
    /// 	 | ROWLOCK
    /// 	 | SERIALIZABLE
    /// 	 | SNAPSHOT
    /// 	 | SPATIAL_WINDOW_MAX_CELLS  EQUAL  DECIMAL
    /// 	 | TABLOCK
    /// 	 | TABLOCKX
    /// 	 | UPDLOCK
    /// 	 | XLOCK
    /// 	 | KEEPIDENTITY
    /// 	 | KEEPDEFAULTS
    /// 	 | IGNORE_CONSTRAINTS
    /// 	 | IGNORE_TRIGGERS
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableHint
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// index_value
    /// 	 : id_
    /// 	 | DECIMAL
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstIndexValue
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// column_alias_list
    /// 	 : LR_BRACKET    COMMA  *  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnAliasList
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// column_alias
    /// 	 : id_
    /// 	 | STRING
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstColumnAlias
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// table_value_constructor
    /// 	 : VALUES  LR_BRACKET    RR_BRACKET  COMMA  LR_BRACKET    RR_BRACKET*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableValueConstructor
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// expression_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExpressionList
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// ranking_windowed_function
    /// 	 : RANK DENSE_RANK ROW_NUMBER  LR_BRACKET  RR_BRACKET  over_clause
    /// 	 | NTILE  LR_BRACKET  expression  RR_BRACKET  over_clause
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRankingWindowedFunction
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// aggregate_windowed_function
    /// 	 :   LR_BRACKET  all_distinct_expression  RR_BRACKET  over_clause?
    /// 	 |   LR_BRACKET  STAR all_distinct_expression  RR_BRACKET  over_clause?
    /// 	 | CHECKSUM_AGG  LR_BRACKET  all_distinct_expression  RR_BRACKET
    /// 	 | GROUPING  LR_BRACKET  expression  RR_BRACKET
    /// 	 | GROUPING_ID  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAggregateWindowedFunction
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// analytic_windowed_function
    /// 	 : FIRST_VALUE LAST_VALUE  LR_BRACKET  expression  RR_BRACKET  over_clause
    /// 	 | LAG LEAD  LR_BRACKET  expression  COMMA  expression2?  RR_BRACKET  over_clause
    /// 	 | CUME_DIST PERCENT_RANK  LR_BRACKET  RR_BRACKET  OVER  LR_BRACKET  PARTITION  BY  expression_list?  order_by_clause  RR_BRACKET
    /// 	 | PERCENTILE_CONT PERCENTILE_DISC  LR_BRACKET  expression  RR_BRACKET  WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET  OVER  LR_BRACKET  PARTITION  BY  expression_list?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAnalyticWindowedFunction
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// all_distinct_expression
    /// 	 : ALL DISTINCT?  expression
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstAllDistinctExpression
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// over_clause
    /// 	 : OVER  LR_BRACKET  PARTITION  BY  expression_list?  order_by_clause?  row_or_range_clause?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstOverClause
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// row_or_range_clause
    /// 	 : ROWS RANGE  window_frame_extent
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstRowOrRangeClause
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// window_frame_extent
    /// 	 : window_frame_preceding
    /// 	 | BETWEEN  window_frame_bound  AND  window_frame_bound
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWindowFrameExtent
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// window_frame_preceding
    /// 	 : UNBOUNDED  PRECEDING
    /// 	 | DECIMAL  PRECEDING
    /// 	 | CURRENT  ROW
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWindowFramePreceding
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// window_frame_following
    /// 	 : UNBOUNDED  FOLLOWING
    /// 	 | DECIMAL  FOLLOWING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWindowFrameFollowing
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_database_option
    /// 	 : FILESTREAM  database_filestream_options
    /// 	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
    /// 	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
    /// 	 | NESTED_TRIGGERS  EQUAL  on_off
    /// 	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
    /// 	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  DECIMAL
    /// 	 | DB_CHAINING  on_off
    /// 	 | TRUSTWORTHY  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateDatabaseOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// database_filestream_options
    /// 	 : database_filestream_option  COMMA  database_filestream_option*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstDatabaseFilestreamOptions
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// database_filestream_option
    /// 	 : LR_BRACKET  NON_TRANSACTED_ACCESS  EQUAL  OFF READ_ONLY FULL DIRECTORY_NAME  EQUAL  STRING  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDatabaseFilestreamOption
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// file_group
    /// 	 : FILEGROUP  id_  CONTAINS  FILESTREAM?  DEFAULT?  CONTAINS  MEMORY_OPTIMIZED_DATA?  file_spec  COMMA  file_spec*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFileGroup
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// file_spec
    /// 	 : LR_BRACKET  NAME  EQUAL  id_or_string  COMMA?  FILENAME  EQUAL    COMMA?  SIZE  EQUAL  file_size  COMMA??  MAXSIZE  EQUAL  file_size UNLIMITED  COMMA??  FILEGROWTH  EQUAL  file_size  COMMA??  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFileSpec
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// entity_name
    /// 	 : server_name  DOT  database_name  DOT  schema_name  DOT database_name  DOT  schema_name?  DOT schema_name  DOT?  tableName
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstEntityName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// entity_name_for_azure_dw
    /// 	 : schema_name
    /// 	 | schema_name  DOT  object_name
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEntityNameForAzureDw
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// entity_name_for_parallel_dw
    /// 	 : 
    /// 	 | schema_name  DOT  object_name
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEntityNameForParallelDw
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// complete_table_name
    /// 	 : linked_server  DOT  DOT  schema_name  DOT server_name  DOT  database_name  DOT  schema_name  DOT database_name  DOT  schema_name?  DOT schema_name  DOT?  tableName
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstCompleteTableName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// full_table_name
    /// 	 : full_schema_name?  tableName
    /// 	 | full_schema_name?  
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstFullTableName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// full_schema_name
    /// 	 : database_name  DOT?  schema_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstFullSchemaName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// simple_name
    /// 	 : schema_name  DOT?  
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstSimpleName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// func_proc_name_schema
    /// 	 : schema_name  DOT?  function_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstFuncProcNameSchema
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// func_proc_name_database_schema
    /// 	 : database_name?  DOT  schema_name?  DOT  function_name
    /// 	 | func_proc_name_schema
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstFuncProcNameDatabaseSchema
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// func_proc_name_server_database_schema
    /// 	 : server_name?  DOT  database_name?  DOT  schema_name?  DOT  function_name
    /// 	 | func_proc_name_database_schema
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstFuncProcNameServerDatabaseSchema
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// ddl_object
    /// 	 : complete_table_name
    /// 	 | LOCAL_ID
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstDdlObject
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// full_column_name
    /// 	 : DELETED INSERTED  DOT  column_name
    /// 	 | server_name?  DOT  schema_name?  DOT  tableName?  DOT  column_name
    /// 	 | schema_name?  DOT  tableName?  DOT  column_name
    /// 	 | tableName?  DOT  column_name
    /// 	 | column_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstFullColumnName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// column_name_list_with_order
    /// 	 : id_  ASC DESC?  COMMA  id_  ASC DESC?*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstColumnNameListWithOrder
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// insert_column_name_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstInsertColumnNameList
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// insert_column_id
    /// 	 :   DOT*  id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstInsertColumnId
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// column_name_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnNameList
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// cursor_name
    /// 	 : id_
    /// 	 | LOCAL_ID
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstCursorName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// on_off
    /// 	 : ON
    /// 	 | OFF
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstOnOff
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// clustered
    /// 	 : CLUSTERED
    /// 	 | NONCLUSTERED
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstClustered
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// null_notnull
    /// 	 : NOT?  NULL_
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstNullNotnull
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// null_or_default
    /// 	 : null_notnull DEFAULT  constant_expression  COLLATE  id_?  WITH  VALUES?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstNullOrDefault
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// scalar_function_name
    /// 	 : func_proc_name_server_database_schema
    /// 	 | RIGHT
    /// 	 | LEFT
    /// 	 | BINARY_CHECKSUM
    /// 	 | CHECKSUM
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstScalarFunctionName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// begin_conversation_timer
    /// 	 : BEGIN  CONVERSATION  TIMER  LR_BRACKET  LOCAL_ID  RR_BRACKET  TIMEOUT  EQUAL  time  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstBeginConversationTimer
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// begin_conversation_dialog
    /// 	 : BEGIN  DIALOG  CONVERSATION?    FROM  SERVICE    TO  SERVICE    COMMA  ?  ON  CONTRACT  contract_name  WITH  RELATED_CONVERSATION RELATED_CONVERSATION_GROUP  EQUAL  LOCAL_ID  COMMA??  LIFETIME  EQUAL  DECIMAL LOCAL_ID  COMMA??  ENCRYPTION  EQUAL  on_off??  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstBeginConversationDialog
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// contract_name
    /// 	 : id_ expression
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstContractName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// service_name
    /// 	 : id_ expression
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstServiceName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// end_conversation
    /// 	 : END  CONVERSATION    SEMI?  WITH  ERROR  EQUAL    DESCRIPTION  EQUAL  ?  CLEANUP??
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEndConversation
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// waitfor_conversation
    /// 	 : WAITFOR?  LR_BRACKET  get_conversation  RR_BRACKET  COMMA?  TIMEOUT  ?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstWaitforConversation
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// get_conversation
    /// 	 : GET  CONVERSATION  GROUP    FROM    SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGetConversation
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// queue_id
    /// 	 : database_name  DOT  schema_name  DOT  queue_name
    /// 	 | id_
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueueId
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// send_conversation
    /// 	 : SEND  ON  CONVERSATION    MESSAGE  TYPE    LR_BRACKET    RR_BRACKET?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSendConversation
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// data_type
    /// 	 :   LR_BRACKET  MAX  RR_BRACKET
    /// 	 | ext_type  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | ext_type  LR_BRACKET    RR_BRACKET
    /// 	 | ext_type  IDENTITY  LR_BRACKET    COMMA    RR_BRACKET?
    /// 	 |   PRECISION?
    /// 	 | unscaled_type
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDataType
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// default_value
    /// 	 : NULL_
    /// 	 | DEFAULT
    /// 	 | constant
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDefaultValue
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// constant
    /// 	 : STRING
    /// 	 | BINARY
    /// 	 | sign?  DECIMAL
    /// 	 | sign?  REAL FLOAT
    /// 	 | sign?    DECIMAL FLOAT
    /// 	 | parameter
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstConstant
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// sign
    /// 	 : PLUS
    /// 	 | MINUS
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSign
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// keyword
    /// 	 : ABORT
    /// 	 | ABSOLUTE
    /// 	 | ACCENT_SENSITIVITY
    /// 	 | ACCESS
    /// 	 | ACTION
    /// 	 | ACTIVATION
    /// 	 | ACTIVE
    /// 	 | ADD
    /// 	 | ADDRESS
    /// 	 | AES_128
    /// 	 | AES_192
    /// 	 | AES_256
    /// 	 | AFFINITY
    /// 	 | AFTER
    /// 	 | AGGREGATE
    /// 	 | ALGORITHM
    /// 	 | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS
    /// 	 | ALLOW_PAGE_LOCKS
    /// 	 | ALLOW_ROW_LOCKS
    /// 	 | ALLOW_SNAPSHOT_ISOLATION
    /// 	 | ALLOWED
    /// 	 | ALWAYS
    /// 	 | ANSI_DEFAULTS
    /// 	 | ANSI_NULL_DEFAULT
    /// 	 | ANSI_NULL_DFLT_OFF
    /// 	 | ANSI_NULL_DFLT_ON
    /// 	 | ANSI_NULLS
    /// 	 | ANSI_PADDING
    /// 	 | ANSI_WARNINGS
    /// 	 | APP_NAME
    /// 	 | APPLICATION_LOG
    /// 	 | APPLOCK_MODE
    /// 	 | APPLOCK_TEST
    /// 	 | APPLY
    /// 	 | ARITHABORT
    /// 	 | ARITHIGNORE
    /// 	 | ASCII
    /// 	 | ASSEMBLY
    /// 	 | ASSEMBLYPROPERTY
    /// 	 | AT_KEYWORD
    /// 	 | AUDIT
    /// 	 | AUDIT_GUID
    /// 	 | AUTO
    /// 	 | AUTO_CLEANUP
    /// 	 | AUTO_CLOSE
    /// 	 | AUTO_CREATE_STATISTICS
    /// 	 | AUTO_DROP
    /// 	 | AUTO_SHRINK
    /// 	 | AUTO_UPDATE_STATISTICS
    /// 	 | AUTO_UPDATE_STATISTICS_ASYNC
    /// 	 | AUTOGROW_ALL_FILES
    /// 	 | AUTOGROW_SINGLE_FILE
    /// 	 | AVAILABILITY
    /// 	 | AVG
    /// 	 | BACKUP_PRIORITY
    /// 	 | BASE64
    /// 	 | BEGIN_DIALOG
    /// 	 | BIGINT
    /// 	 | BINARY_KEYWORD
    /// 	 | BINARY_CHECKSUM
    /// 	 | BINDING
    /// 	 | BLOB_STORAGE
    /// 	 | BROKER
    /// 	 | BROKER_INSTANCE
    /// 	 | BULK_LOGGED
    /// 	 | CALLER
    /// 	 | CAP_CPU_PERCENT
    /// 	 | CAST
    /// 	 | TRY_CAST
    /// 	 | CATALOG
    /// 	 | CATCH
    /// 	 | CHANGE
    /// 	 | CHANGE_RETENTION
    /// 	 | CHANGE_TRACKING
    /// 	 | CHAR
    /// 	 | CHARINDEX
    /// 	 | CHECKSUM
    /// 	 | CHECKSUM_AGG
    /// 	 | CLEANUP
    /// 	 | COL_LENGTH
    /// 	 | COL_NAME
    /// 	 | COLLECTION
    /// 	 | COLUMN_ENCRYPTION_KEY
    /// 	 | COLUMN_MASTER_KEY
    /// 	 | COLUMNPROPERTY
    /// 	 | COLUMNS
    /// 	 | COLUMNSTORE
    /// 	 | COLUMNSTORE_ARCHIVE
    /// 	 | COMMITTED
    /// 	 | COMPATIBILITY_LEVEL
    /// 	 | COMPRESS_ALL_ROW_GROUPS
    /// 	 | COMPRESSION_DELAY
    /// 	 | CONCAT
    /// 	 | CONCAT_WS
    /// 	 | CONCAT_NULL_YIELDS_NULL
    /// 	 | CONTENT
    /// 	 | CONTROL
    /// 	 | COOKIE
    /// 	 | COUNT
    /// 	 | COUNT_BIG
    /// 	 | COUNTER
    /// 	 | CPU
    /// 	 | CREATE_NEW
    /// 	 | CREATION_DISPOSITION
    /// 	 | CREDENTIAL
    /// 	 | CRYPTOGRAPHIC
    /// 	 | CUME_DIST
    /// 	 | CURSOR_CLOSE_ON_COMMIT
    /// 	 | CURSOR_DEFAULT
    /// 	 | DATA
    /// 	 | DATABASE_PRINCIPAL_ID
    /// 	 | DATABASEPROPERTYEX
    /// 	 | DATE_CORRELATION_OPTIMIZATION
    /// 	 | DATEADD
    /// 	 | DATEDIFF
    /// 	 | DATENAME
    /// 	 | DATEPART
    /// 	 | DAYS
    /// 	 | DB_CHAINING
    /// 	 | DB_FAILOVER
    /// 	 | DB_ID
    /// 	 | DB_NAME
    /// 	 | DECRYPTION
    /// 	 | DEFAULT_DOUBLE_QUOTE
    /// 	 | DEFAULT_FULLTEXT_LANGUAGE
    /// 	 | DEFAULT_LANGUAGE
    /// 	 | DEFINITION
    /// 	 | DELAY
    /// 	 | DELAYED_DURABILITY
    /// 	 | DELETED
    /// 	 | DENSE_RANK
    /// 	 | DEPENDENTS
    /// 	 | DES
    /// 	 | DESCRIPTION
    /// 	 | DESX
    /// 	 | DETERMINISTIC
    /// 	 | DHCP
    /// 	 | DIALOG
    /// 	 | DIFFERENCE
    /// 	 | DIRECTORY_NAME
    /// 	 | DISABLE
    /// 	 | DISABLE_BROKER
    /// 	 | DISABLED
    /// 	 | DOCUMENT
    /// 	 | DROP_EXISTING
    /// 	 | DYNAMIC
    /// 	 | ELEMENTS
    /// 	 | EMERGENCY
    /// 	 | EMPTY
    /// 	 | ENABLE
    /// 	 | ENABLE_BROKER
    /// 	 | ENCRYPTED
    /// 	 | ENCRYPTED_VALUE
    /// 	 | ENCRYPTION
    /// 	 | ENCRYPTION_TYPE
    /// 	 | ENDPOINT_URL
    /// 	 | ERROR_BROKER_CONVERSATIONS
    /// 	 | EXCLUSIVE
    /// 	 | EXECUTABLE
    /// 	 | EXIST
    /// 	 | EXPAND
    /// 	 | EXPIRY_DATE
    /// 	 | EXPLICIT
    /// 	 | FAIL_OPERATION
    /// 	 | FAILOVER_MODE
    /// 	 | FAILURE
    /// 	 | FAILURE_CONDITION_LEVEL
    /// 	 | FAST
    /// 	 | FAST_FORWARD
    /// 	 | FILE_ID
    /// 	 | FILE_IDEX
    /// 	 | FILE_NAME
    /// 	 | FILEGROUP
    /// 	 | FILEGROUP_ID
    /// 	 | FILEGROUP_NAME
    /// 	 | FILEGROUPPROPERTY
    /// 	 | FILEGROWTH
    /// 	 | FILENAME
    /// 	 | FILEPATH
    /// 	 | FILEPROPERTY
    /// 	 | FILEPROPERTYEX
    /// 	 | FILESTREAM
    /// 	 | FILTER
    /// 	 | FIRST
    /// 	 | FIRST_VALUE
    /// 	 | FMTONLY
    /// 	 | FOLLOWING
    /// 	 | FORCE
    /// 	 | FORCE_FAILOVER_ALLOW_DATA_LOSS
    /// 	 | FORCED
    /// 	 | FORCEPLAN
    /// 	 | FORCESCAN
    /// 	 | FORMAT
    /// 	 | FORWARD_ONLY
    /// 	 | FULLSCAN
    /// 	 | FULLTEXT
    /// 	 | FULLTEXTCATALOGPROPERTY
    /// 	 | FULLTEXTSERVICEPROPERTY
    /// 	 | GB
    /// 	 | GENERATED
    /// 	 | GETDATE
    /// 	 | GETUTCDATE
    /// 	 | GLOBAL
    /// 	 | GO
    /// 	 | GROUP_MAX_REQUESTS
    /// 	 | GROUPING
    /// 	 | GROUPING_ID
    /// 	 | HADR
    /// 	 | HASH
    /// 	 | HEALTH_CHECK_TIMEOUT
    /// 	 | HIDDEN_KEYWORD
    /// 	 | HIGH
    /// 	 | HONOR_BROKER_PRIORITY
    /// 	 | HOURS
    /// 	 | IDENTITY_VALUE
    /// 	 | IGNORE_CONSTRAINTS
    /// 	 | IGNORE_DUP_KEY
    /// 	 | IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX
    /// 	 | IGNORE_TRIGGERS
    /// 	 | IMMEDIATE
    /// 	 | IMPERSONATE
    /// 	 | IMPLICIT_TRANSACTIONS
    /// 	 | IMPORTANCE
    /// 	 | INCLUDE_NULL_VALUES
    /// 	 | INCREMENTAL
    /// 	 | INDEX_COL
    /// 	 | INDEXKEY_PROPERTY
    /// 	 | INDEXPROPERTY
    /// 	 | INITIATOR
    /// 	 | INPUT
    /// 	 | INSENSITIVE
    /// 	 | INSERTED
    /// 	 | INT
    /// 	 | IP
    /// 	 | ISOLATION
    /// 	 | JOB
    /// 	 | JSON
    /// 	 | KB
    /// 	 | KEEP
    /// 	 | KEEPDEFAULTS
    /// 	 | KEEPFIXED
    /// 	 | KEEPIDENTITY
    /// 	 | KEY_SOURCE
    /// 	 | KEYS
    /// 	 | KEYSET
    /// 	 | LAG
    /// 	 | LAST
    /// 	 | LAST_VALUE
    /// 	 | LEAD
    /// 	 | LEN
    /// 	 | LEVEL
    /// 	 | LIST
    /// 	 | LISTENER
    /// 	 | LISTENER_URL
    /// 	 | LOB_COMPACTION
    /// 	 | LOCAL
    /// 	 | LOCATION
    /// 	 | LOCK
    /// 	 | LOCK_ESCALATION
    /// 	 | LOGIN
    /// 	 | LOOP
    /// 	 | LOW
    /// 	 | LOWER
    /// 	 | LTRIM
    /// 	 | MANUAL
    /// 	 | MARK
    /// 	 | MASKED
    /// 	 | MATERIALIZED
    /// 	 | MAX
    /// 	 | MAX_CPU_PERCENT
    /// 	 | MAX_DOP
    /// 	 | MAX_FILES
    /// 	 | MAX_IOPS_PER_VOLUME
    /// 	 | MAX_MEMORY_PERCENT
    /// 	 | MAX_PROCESSES
    /// 	 | MAX_QUEUE_READERS
    /// 	 | MAX_ROLLOVER_FILES
    /// 	 | MAXDOP
    /// 	 | MAXRECURSION
    /// 	 | MAXSIZE
    /// 	 | MB
    /// 	 | MEDIUM
    /// 	 | MEMORY_OPTIMIZED_DATA
    /// 	 | MESSAGE
    /// 	 | MIN
    /// 	 | MIN_ACTIVE_ROWVERSION
    /// 	 | MIN_CPU_PERCENT
    /// 	 | MIN_IOPS_PER_VOLUME
    /// 	 | MIN_MEMORY_PERCENT
    /// 	 | MINUTES
    /// 	 | MIRROR_ADDRESS
    /// 	 | MIXED_PAGE_ALLOCATION
    /// 	 | MODE
    /// 	 | MODIFY
    /// 	 | MOVE
    /// 	 | MULTI_USER
    /// 	 | NAME
    /// 	 | NCHAR
    /// 	 | NESTED_TRIGGERS
    /// 	 | NEW_ACCOUNT
    /// 	 | NEW_BROKER
    /// 	 | NEW_PASSWORD
    /// 	 | NEWNAME
    /// 	 | NEXT
    /// 	 | NO
    /// 	 | NO_TRUNCATE
    /// 	 | NO_WAIT
    /// 	 | NOCOUNT
    /// 	 | NODES
    /// 	 | NOEXEC
    /// 	 | NOEXPAND
    /// 	 | NOLOCK
    /// 	 | NON_TRANSACTED_ACCESS
    /// 	 | NORECOMPUTE
    /// 	 | NORECOVERY
    /// 	 | NOTIFICATIONS
    /// 	 | NOWAIT
    /// 	 | NTILE
    /// 	 | NULL_DOUBLE_QUOTE
    /// 	 | NUMANODE
    /// 	 | NUMBER
    /// 	 | NUMERIC_ROUNDABORT
    /// 	 | OBJECT
    /// 	 | OBJECT_DEFINITION
    /// 	 | OBJECT_ID
    /// 	 | OBJECT_NAME
    /// 	 | OBJECT_SCHEMA_NAME
    /// 	 | OBJECTPROPERTY
    /// 	 | OBJECTPROPERTYEX
    /// 	 | OFFLINE
    /// 	 | OFFSET
    /// 	 | OLD_ACCOUNT
    /// 	 | ONLINE
    /// 	 | ONLY
    /// 	 | OPEN_EXISTING
    /// 	 | OPENJSON
    /// 	 | OPTIMISTIC
    /// 	 | OPTIMIZE
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY
    /// 	 | ORIGINAL_DB_NAME
    /// 	 | OUT
    /// 	 | OUTPUT
    /// 	 | OVERRIDE
    /// 	 | OWNER
    /// 	 | OWNERSHIP
    /// 	 | PAD_INDEX
    /// 	 | PAGE_VERIFY
    /// 	 | PAGECOUNT
    /// 	 | PAGLOCK
    /// 	 | PARAMETERIZATION
    /// 	 | PARSENAME
    /// 	 | PARSEONLY
    /// 	 | PARTITION
    /// 	 | PARTITIONS
    /// 	 | PARTNER
    /// 	 | PATH
    /// 	 | PATINDEX
    /// 	 | PAUSE
    /// 	 | PERCENT_RANK
    /// 	 | PERCENTILE_CONT
    /// 	 | PERCENTILE_DISC
    /// 	 | PERSIST_SAMPLE_PERCENT
    /// 	 | POISON_MESSAGE_HANDLING
    /// 	 | POOL
    /// 	 | PORT
    /// 	 | PRECEDING
    /// 	 | PRIMARY_ROLE
    /// 	 | PRIOR
    /// 	 | PRIORITY
    /// 	 | PRIORITY_LEVEL
    /// 	 | PRIVATE
    /// 	 | PRIVATE_KEY
    /// 	 | PRIVILEGES
    /// 	 | PROCEDURE_NAME
    /// 	 | PROPERTY
    /// 	 | PROVIDER
    /// 	 | PROVIDER_KEY_NAME
    /// 	 | QUERY
    /// 	 | QUEUE
    /// 	 | QUEUE_DELAY
    /// 	 | QUOTED_IDENTIFIER
    /// 	 | QUOTENAME
    /// 	 | RANDOMIZED
    /// 	 | RANGE
    /// 	 | RANK
    /// 	 | RC2
    /// 	 | RC4
    /// 	 | RC4_128
    /// 	 | READ_COMMITTED_SNAPSHOT
    /// 	 | READ_ONLY
    /// 	 | READ_ONLY_ROUTING_LIST
    /// 	 | READ_WRITE
    /// 	 | READCOMMITTED
    /// 	 | READCOMMITTEDLOCK
    /// 	 | READONLY
    /// 	 | READPAST
    /// 	 | READUNCOMMITTED
    /// 	 | READWRITE
    /// 	 | REBUILD
    /// 	 | RECEIVE
    /// 	 | RECOMPILE
    /// 	 | RECOVERY
    /// 	 | RECURSIVE_TRIGGERS
    /// 	 | RELATIVE
    /// 	 | REMOTE
    /// 	 | REMOTE_PROC_TRANSACTIONS
    /// 	 | REMOTE_SERVICE_NAME
    /// 	 | REMOVE
    /// 	 | REORGANIZE
    /// 	 | REPEATABLE
    /// 	 | REPEATABLEREAD
    /// 	 | REPLACE
    /// 	 | REPLICA
    /// 	 | REPLICATE
    /// 	 | REQUEST_MAX_CPU_TIME_SEC
    /// 	 | REQUEST_MAX_MEMORY_GRANT_PERCENT
    /// 	 | REQUEST_MEMORY_GRANT_TIMEOUT_SEC
    /// 	 | REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT
    /// 	 | RESAMPLE
    /// 	 | RESERVE_DISK_SPACE
    /// 	 | RESOURCE
    /// 	 | RESOURCE_MANAGER_LOCATION
    /// 	 | RESTRICTED_USER
    /// 	 | RESUMABLE
    /// 	 | RETENTION
    /// 	 | REVERSE
    /// 	 | ROBUST
    /// 	 | ROOT
    /// 	 | ROUTE
    /// 	 | ROW
    /// 	 | ROW_NUMBER
    /// 	 | ROWGUID
    /// 	 | ROWLOCK
    /// 	 | ROWS
    /// 	 | RTRIM
    /// 	 | SAMPLE
    /// 	 | SCHEMA_ID
    /// 	 | SCHEMA_NAME
    /// 	 | SCHEMABINDING
    /// 	 | SCOPE_IDENTITY
    /// 	 | SCOPED
    /// 	 | SCROLL
    /// 	 | SCROLL_LOCKS
    /// 	 | SEARCH
    /// 	 | SECONDARY
    /// 	 | SECONDARY_ONLY
    /// 	 | SECONDARY_ROLE
    /// 	 | SECONDS
    /// 	 | SECRET
    /// 	 | SECURABLES
    /// 	 | SECURITY
    /// 	 | SECURITY_LOG
    /// 	 | SEEDING_MODE
    /// 	 | SELF
    /// 	 | SEMI_SENSITIVE
    /// 	 | SEND
    /// 	 | SENT
    /// 	 | SEQUENCE
    /// 	 | SEQUENCE_NUMBER
    /// 	 | SERIALIZABLE
    /// 	 | SERVERPROPERTY
    /// 	 | SESSION_TIMEOUT
    /// 	 | SETERROR
    /// 	 | SHARE
    /// 	 | SHARED
    /// 	 | SHOWPLAN
    /// 	 | SHOWPLAN_ALL
    /// 	 | SHOWPLAN_TEXT
    /// 	 | SHOWPLAN_XML
    /// 	 | SIGNATURE
    /// 	 | SIMPLE
    /// 	 | SINGLE_USER
    /// 	 | SIZE
    /// 	 | SMALLINT
    /// 	 | SNAPSHOT
    /// 	 | SORT_IN_TEMPDB
    /// 	 | SOUNDEX
    /// 	 | SPACE_KEYWORD
    /// 	 | SPARSE
    /// 	 | SPATIAL_WINDOW_MAX_CELLS
    /// 	 | STANDBY
    /// 	 | START_DATE
    /// 	 | STATIC
    /// 	 | STATISTICS_INCREMENTAL
    /// 	 | STATISTICS_NORECOMPUTE
    /// 	 | STATS_DATE
    /// 	 | STATS_STREAM
    /// 	 | STATUS
    /// 	 | STATUSONLY
    /// 	 | STDEV
    /// 	 | STDEVP
    /// 	 | STOPLIST
    /// 	 | STR
    /// 	 | STRING_AGG
    /// 	 | STRING_ESCAPE
    /// 	 | STUFF
    /// 	 | SUBJECT
    /// 	 | SUBSCRIBE
    /// 	 | SUBSCRIPTION
    /// 	 | SUBSTRING
    /// 	 | SUM
    /// 	 | SUSPEND
    /// 	 | SYMMETRIC
    /// 	 | SYNCHRONOUS_COMMIT
    /// 	 | SYNONYM
    /// 	 | SYSTEM
    /// 	 | TABLOCK
    /// 	 | TABLOCKX
    /// 	 | TAKE
    /// 	 | TARGET_RECOVERY_TIME
    /// 	 | TB
    /// 	 | TEXTIMAGE_ON
    /// 	 | THROW
    /// 	 | TIES
    /// 	 | TIME
    /// 	 | TIMEOUT
    /// 	 | TIMER
    /// 	 | TINYINT
    /// 	 | TORN_PAGE_DETECTION
    /// 	 | TRACKING
    /// 	 | TRANSACTION_ID
    /// 	 | TRANSFORM_NOISE_WORDS
    /// 	 | TRANSLATE
    /// 	 | TRIM
    /// 	 | TRIPLE_DES
    /// 	 | TRIPLE_DES_3KEY
    /// 	 | TRUSTWORTHY
    /// 	 | TRY
    /// 	 | TSQL
    /// 	 | TWO_DIGIT_YEAR_CUTOFF
    /// 	 | TYPE
    /// 	 | TYPE_ID
    /// 	 | TYPE_NAME
    /// 	 | TYPE_WARNING
    /// 	 | TYPEPROPERTY
    /// 	 | UNBOUNDED
    /// 	 | UNCOMMITTED
    /// 	 | UNICODE
    /// 	 | UNKNOWN
    /// 	 | UNLIMITED
    /// 	 | UNMASK
    /// 	 | UOW
    /// 	 | UPDLOCK
    /// 	 | UPPER
    /// 	 | USING
    /// 	 | VALID_XML
    /// 	 | VALIDATION
    /// 	 | VALUE
    /// 	 | VAR
    /// 	 | VARBINARY_KEYWORD
    /// 	 | VARP
    /// 	 | VERSION
    /// 	 | VIEW_METADATA
    /// 	 | VIEWS
    /// 	 | WAIT
    /// 	 | WELL_FORMED_XML
    /// 	 | WITHOUT_ARRAY_WRAPPER
    /// 	 | WORK
    /// 	 | WORKLOAD
    /// 	 | XLOCK
    /// 	 | XML
    /// 	 | XML_COMPRESSION
    /// 	 | XMLDATA
    /// 	 | XMLNAMESPACES
    /// 	 | XMLSCHEMA
    /// 	 | XSINIL
    /// 	 | ZONE
    /// 	 | ABORT_AFTER_WAIT
    /// 	 | ABSENT
    /// 	 | ADMINISTER
    /// 	 | AES
    /// 	 | ALLOW_CONNECTIONS
    /// 	 | ALLOW_MULTIPLE_EVENT_LOSS
    /// 	 | ALLOW_SINGLE_EVENT_LOSS
    /// 	 | ANONYMOUS
    /// 	 | APPEND
    /// 	 | APPLICATION
    /// 	 | ASYMMETRIC
    /// 	 | ASYNCHRONOUS_COMMIT
    /// 	 | AUTHENTICATE
    /// 	 | AUTHENTICATION
    /// 	 | AUTOMATED_BACKUP_PREFERENCE
    /// 	 | AUTOMATIC
    /// 	 | AVAILABILITY_MODE
    /// 	 | BEFORE
    /// 	 | BLOCK
    /// 	 | BLOCKERS
    /// 	 | BLOCKSIZE
    /// 	 | BLOCKING_HIERARCHY
    /// 	 | BUFFER
    /// 	 | BUFFERCOUNT
    /// 	 | CACHE
    /// 	 | CALLED
    /// 	 | CERTIFICATE
    /// 	 | CHANGETABLE
    /// 	 | CHANGES
    /// 	 | CHECK_POLICY
    /// 	 | CHECK_EXPIRATION
    /// 	 | CLASSIFIER_FUNCTION
    /// 	 | CLUSTER
    /// 	 | COMPRESS
    /// 	 | COMPRESSION
    /// 	 | CONNECT
    /// 	 | CONNECTION
    /// 	 | CONFIGURATION
    /// 	 | CONNECTIONPROPERTY
    /// 	 | CONTAINMENT
    /// 	 | CONTEXT
    /// 	 | CONTEXT_INFO
    /// 	 | CONTINUE_AFTER_ERROR
    /// 	 | CONTRACT
    /// 	 | CONTRACT_NAME
    /// 	 | CONVERSATION
    /// 	 | COPY_ONLY
    /// 	 | CURRENT_REQUEST_ID
    /// 	 | CURRENT_TRANSACTION_ID
    /// 	 | CYCLE
    /// 	 | DATA_COMPRESSION
    /// 	 | DATA_SOURCE
    /// 	 | DATABASE_MIRRORING
    /// 	 | DATASPACE
    /// 	 | DDL
    /// 	 | DECOMPRESS
    /// 	 | DEFAULT_DATABASE
    /// 	 | DEFAULT_SCHEMA
    /// 	 | DIAGNOSTICS
    /// 	 | DIFFERENTIAL
    /// 	 | DISTRIBUTION
    /// 	 | DTC_SUPPORT
    /// 	 | ENABLED
    /// 	 | ENDPOINT
    /// 	 | ERROR
    /// 	 | ERROR_LINE
    /// 	 | ERROR_MESSAGE
    /// 	 | ERROR_NUMBER
    /// 	 | ERROR_PROCEDURE
    /// 	 | ERROR_SEVERITY
    /// 	 | ERROR_STATE
    /// 	 | EVENT
    /// 	 | EVENTDATA
    /// 	 | EVENT_RETENTION_MODE
    /// 	 | EXECUTABLE_FILE
    /// 	 | EXPIREDATE
    /// 	 | EXTENSION
    /// 	 | EXTERNAL_ACCESS
    /// 	 | FAILOVER
    /// 	 | FAILURECONDITIONLEVEL
    /// 	 | FAN_IN
    /// 	 | FILE_SNAPSHOT
    /// 	 | FORCESEEK
    /// 	 | FORCE_SERVICE_ALLOW_DATA_LOSS
    /// 	 | FORMATMESSAGE
    /// 	 | GET
    /// 	 | GET_FILESTREAM_TRANSACTION_CONTEXT
    /// 	 | GETANCESTOR
    /// 	 | GETANSINULL
    /// 	 | GETDESCENDANT
    /// 	 | GETLEVEL
    /// 	 | GETREPARENTEDVALUE
    /// 	 | GETROOT
    /// 	 | GOVERNOR
    /// 	 | HASHED
    /// 	 | HEALTHCHECKTIMEOUT
    /// 	 | HEAP
    /// 	 | HIERARCHYID
    /// 	 | HOST_ID
    /// 	 | HOST_NAME
    /// 	 | IIF
    /// 	 | IO
    /// 	 | INCLUDE
    /// 	 | INCREMENT
    /// 	 | INFINITE
    /// 	 | INIT
    /// 	 | INSTEAD
    /// 	 | ISDESCENDANTOF
    /// 	 | ISNULL
    /// 	 | ISNUMERIC
    /// 	 | KERBEROS
    /// 	 | KEY_PATH
    /// 	 | KEY_STORE_PROVIDER_NAME
    /// 	 | LANGUAGE
    /// 	 | LIBRARY
    /// 	 | LIFETIME
    /// 	 | LINKED
    /// 	 | LINUX
    /// 	 | LISTENER_IP
    /// 	 | LISTENER_PORT
    /// 	 | LOCAL_SERVICE_NAME
    /// 	 | LOG
    /// 	 | MASK
    /// 	 | MATCHED
    /// 	 | MASTER
    /// 	 | MAX_MEMORY
    /// 	 | MAXTRANSFER
    /// 	 | MAXVALUE
    /// 	 | MAX_DISPATCH_LATENCY
    /// 	 | MAX_DURATION
    /// 	 | MAX_EVENT_SIZE
    /// 	 | MAX_SIZE
    /// 	 | MAX_OUTSTANDING_IO_PER_VOLUME
    /// 	 | MEDIADESCRIPTION
    /// 	 | MEDIANAME
    /// 	 | MEMBER
    /// 	 | MEMORY_PARTITION_MODE
    /// 	 | MESSAGE_FORWARDING
    /// 	 | MESSAGE_FORWARD_SIZE
    /// 	 | MINVALUE
    /// 	 | MIRROR
    /// 	 | MUST_CHANGE
    /// 	 | NEWID
    /// 	 | NEWSEQUENTIALID
    /// 	 | NOFORMAT
    /// 	 | NOINIT
    /// 	 | NONE
    /// 	 | NOREWIND
    /// 	 | NOSKIP
    /// 	 | NOUNLOAD
    /// 	 | NO_CHECKSUM
    /// 	 | NO_COMPRESSION
    /// 	 | NO_EVENT_LOSS
    /// 	 | NOTIFICATION
    /// 	 | NTLM
    /// 	 | OLD_PASSWORD
    /// 	 | ON_FAILURE
    /// 	 | OPERATIONS
    /// 	 | PAGE
    /// 	 | PARAM_NODE
    /// 	 | PARTIAL
    /// 	 | PASSWORD
    /// 	 | PERMISSION_SET
    /// 	 | PER_CPU
    /// 	 | PER_DB
    /// 	 | PER_NODE
    /// 	 | PERSISTED
    /// 	 | PLATFORM
    /// 	 | POLICY
    /// 	 | PREDICATE
    /// 	 | PROCESS
    /// 	 | PROFILE
    /// 	 | PYTHON
    /// 	 | R
    /// 	 | READ_WRITE_FILEGROUPS
    /// 	 | REGENERATE
    /// 	 | RELATED_CONVERSATION
    /// 	 | RELATED_CONVERSATION_GROUP
    /// 	 | REQUIRED
    /// 	 | RESET
    /// 	 | RESOURCES
    /// 	 | RESTART
    /// 	 | RESUME
    /// 	 | RETAINDAYS
    /// 	 | RETURNS
    /// 	 | REWIND
    /// 	 | ROLE
    /// 	 | ROUND_ROBIN
    /// 	 | ROWCOUNT_BIG
    /// 	 | RSA_512
    /// 	 | RSA_1024
    /// 	 | RSA_2048
    /// 	 | RSA_3072
    /// 	 | RSA_4096
    /// 	 | SAFETY
    /// 	 | SAFE
    /// 	 | SCHEDULER
    /// 	 | SCHEME
    /// 	 | SCRIPT
    /// 	 | SERVER
    /// 	 | SERVICE
    /// 	 | SERVICE_BROKER
    /// 	 | SERVICE_NAME
    /// 	 | SESSION
    /// 	 | SESSION_CONTEXT
    /// 	 | SETTINGS
    /// 	 | SHRINKLOG
    /// 	 | SID
    /// 	 | SKIP_KEYWORD
    /// 	 | SOFTNUMA
    /// 	 | SOURCE
    /// 	 | SPECIFICATION
    /// 	 | SPLIT
    /// 	 | SQL
    /// 	 | SQLDUMPERFLAGS
    /// 	 | SQLDUMPERPATH
    /// 	 | SQLDUMPERTIMEOUT
    /// 	 | STATE
    /// 	 | STATS
    /// 	 | START
    /// 	 | STARTED
    /// 	 | STARTUP_STATE
    /// 	 | STOP
    /// 	 | STOPPED
    /// 	 | STOP_ON_ERROR
    /// 	 | SUPPORTED
    /// 	 | SWITCH
    /// 	 | TAPE
    /// 	 | TARGET
    /// 	 | TCP
    /// 	 | TOSTRING
    /// 	 | TRACE
    /// 	 | TRACK_CAUSALITY
    /// 	 | TRANSFER
    /// 	 | UNCHECKED
    /// 	 | UNLOCK
    /// 	 | UNSAFE
    /// 	 | URL
    /// 	 | USED
    /// 	 | VERBOSELOGGING
    /// 	 | VISIBILITY
    /// 	 | WAIT_AT_LOW_PRIORITY
    /// 	 | WINDOWS
    /// 	 | WITHOUT
    /// 	 | WITNESS
    /// 	 | XACT_ABORT
    /// 	 | XACT_STATE
    /// 	 | VARCHAR
    /// 	 | NVARCHAR
    /// 	 | PRECISION
    /// </summary>
    /// <remarks>
    /// Strategy : ClassEnum
    /// </remarks>
    public partial class AstKeyword
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// id_
    /// 	 : ID
    /// 	 | DOUBLE_QUOTE_ID
    /// 	 | DOUBLE_QUOTE_BLANK
    /// 	 | SQUARE_BRACKET_ID
    /// 	 | keyword
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstId
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// simple_id
    /// 	 : ID
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstSimpleId
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// comparison_operator
    /// 	 : EQUAL
    /// 	 | GREATER
    /// 	 | LESS
    /// 	 | LESS  EQUAL
    /// 	 | GREATER  EQUAL
    /// 	 | LESS  GREATER
    /// 	 | EXCLAMATION  EQUAL
    /// 	 | EXCLAMATION  GREATER
    /// 	 | EXCLAMATION  LESS
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstComparisonOperator
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// assignment_operator
    /// 	 : PLUS_ASSIGN
    /// 	 | MINUS_ASSIGN
    /// 	 | MULT_ASSIGN
    /// 	 | DIV_ASSIGN
    /// 	 | MOD_ASSIGN
    /// 	 | AND_ASSIGN
    /// 	 | XOR_ASSIGN
    /// 	 | OR_ASSIGN
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAssignmentOperator
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// file_size
    /// 	 : DECIMAL  file_size_unity?
    /// </summary>
    /// <remarks>
    /// Strategy : ClassWithProperties
    /// </remarks>
    public partial class AstFileSize
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// file_size_unity
    /// 	 : KB
    /// 	 | MB
    /// 	 | GB
    /// 	 | TB
    /// 	 | MODULE
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFileSizeUnity
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// filestream_filegroup_or_partition_schema_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstFilestreamFilegroupOrPartitionSchemaName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// action_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstActionName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// aggregate_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstAggregateName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// app_role_schema
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstAppRoleSchema
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// application_role
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstApplicationRole
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// assembly_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstAssemblyName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// asym_key_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstAsymKeyName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// audit_action_group_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstAuditActionGroupName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// audit_guid
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstAuditGuid
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// audit_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstAuditName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// audit_specification_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstAuditSpecificationName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// azure_active_directory_principal
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstAzureActiveDirectoryPrincipal
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// backup_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstBackupName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// binding_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstBindingName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// catalog_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstCatalogName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// cert_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstCertName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// certificate_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstCertificateName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// class_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstClassName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// collation_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstCollationName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// column_encryption_key
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstColumnEncryptionKey
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// column_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstColumnName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// column_name_or_arguments
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstColumnNameOrArguments
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// constraint_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstConstraintName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// create_service_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstCreateServiceName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// credential_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstCredentialName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// cryptographic_provider_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstCryptographicProviderName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// data_source_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstDataSourceName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// database_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstDatabaseName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// dropped_service_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstDroppedServiceName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// encryptor_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstEncryptorName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// endpoint_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstEndpointName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// event_customizable_attributue
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstEventCustomizableAttributue
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// event_field_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstEventFieldName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// event_module_guid
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstEventModuleGuid
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// event_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstEventName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// event_notification_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstEventNotificationName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// event_package_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstEventPackageName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// event_session_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstEventSessionName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// event_type_or_group
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstEventTypeOrGroup
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// ext_type
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstExtType
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// external_data_source_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstExternalDataSourceName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// external_file_format_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstExternalFileFormatName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// external_pool_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstExternalPoolName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// file_group_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstFileGroupName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// function_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstFunctionName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// group_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstGroupName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// index_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstIndexName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// language
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstLanguage
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// library_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstLibraryName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// linked_server
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstLinkedServer
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// logical_device_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstLogicalDeviceName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// login_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstLoginName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// master_key
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstMasterKey
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// method_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstMethodName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// modified_contract_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstModifiedContractName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// modified_service_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstModifiedServiceName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// module_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstModuleName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// network_computer
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstNetworkComputer
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// new_application_role_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstNewApplicationRoleName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// new_file_group_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstNewFileGroupName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// non_static_attr
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstNonStaticAttr
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// notification_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstNotificationName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// object_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstObjectName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// owner_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstOwnerName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// partition_column_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstPartitionColumnName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// pool_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstPoolName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// predicate_compare_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstPredicateCompareName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// predicate_source_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstPredicateSourceName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// property_list_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstPropertyListName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// provider_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstProviderName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// queue_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstQueueName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// relational_schema
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstRelationalSchema
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// role_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstRoleName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// route_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstRouteName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// rule_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstRuleName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// schema_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstSchemaName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// schema_collection_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstSchemaCollectionName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// security_policy_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstSecurityPolicyName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// security_predicate_function_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstSecurityPredicateFunctionName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// sequence_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstSequenceName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// server_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstServerName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// server_role_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstServerRoleName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// source_list_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstSourceListName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// sql_identifier
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstSqlIdentifier
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// static_attr
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstStaticAttr
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// statistics_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstStatisticsName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// stoplist_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstStoplistName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// symmetric_key_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstSymmetricKeyName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// synonym_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstSynonymName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// table_or_view_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstTableOrViewName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// table_variable
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstTableVariable
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// tableName
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstTableName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// target_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstTargetName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// target_parameter_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstTargetParameterName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// trigger_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstTriggerName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// tvf_schema_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstTvfSchemaName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// type_schema
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstTypeSchema
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// udt_column_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstUdtColumnName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// unscaled_type
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstUnscaledType
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// user_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstUserName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// windows_principal
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstWindowsPrincipal
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// workload_group_group_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstWorkloadGroupGroupName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
    
    /// <summary>
    /// workload_group_pool_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstWorkloadGroupPoolName
    {
        
        public override void ToString(Writer wrt)
        {
        }
    }
}
