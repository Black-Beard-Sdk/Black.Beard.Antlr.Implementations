//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Asts.TSql
{
    using System;
    using Bb.Parsers;
    using Antlr4.Runtime;
    using System.Collections;
    using Antlr4.Runtime.Tree;
    
    
    /// <summary>
    /// block_statement
    /// 	 : BEGIN  SEMI?  sql_clauses?  END  SEMI?
    /// </summary>
    public partial class AstBlockStatement : AstCflStatement
    {
        
        private AstSqlClauses _sqlClauses;
        
        public AstBlockStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public AstBlockStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSqlClauses SqlClauses
        {
            get
            {
                return this._sqlClauses;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBlockStatement(this);
        }
    }
    
    /// <summary>
    /// return_statement
    /// 	 : RETURN  expression?  SEMI?
    /// </summary>
    public partial class AstReturnStatement : AstCflStatement
    {
        
        private AstExpression _expression;
        
        public AstReturnStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstReturnStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReturnStatement(this);
        }
    }
    
    /// <summary>
    /// if_statement
    /// 	 : IF  search_condition  sql_clause_true = sql_clause  (ELSE  sql_clause_false = sql_clause)?  SEMI?
    /// </summary>
    public partial class AstIfStatement : AstCflStatement
    {
        
        private AstSearchCondition _searchCondition;
        
        public AstIfStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstIfStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIfStatement(this);
        }
    }
    
    /// <summary>
    /// throw_error_number
    /// 	 : decimal_local_id
    /// </summary>
    public partial class AstThrowErrorNumber : AstRule
    {
        
        private AstDecimalLocalId _decimalLocalId;
        
        public AstThrowErrorNumber(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalLocalId>())
                {
                    this._decimalLocalId = ((AstDecimalLocalId)(enumerator.Current));
                }
            }
        }
        
        public AstThrowErrorNumber(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalLocalId>())
                {
                    this._decimalLocalId = ((AstDecimalLocalId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimalLocalId DecimalLocalId
        {
            get
            {
                return this._decimalLocalId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowErrorNumber(this);
        }
    }
    
    /// <summary>
    /// throw_message
    /// 	 : string_local_id
    /// </summary>
    public partial class AstThrowMessage : AstRule
    {
        
        private AstStringLocalId _stringLocalId;
        
        public AstThrowMessage(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringLocalId>())
                {
                    this._stringLocalId = ((AstStringLocalId)(enumerator.Current));
                }
            }
        }
        
        public AstThrowMessage(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringLocalId>())
                {
                    this._stringLocalId = ((AstStringLocalId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringLocalId StringLocalId
        {
            get
            {
                return this._stringLocalId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowMessage(this);
        }
    }
    
    /// <summary>
    /// throw_state
    /// 	 : decimal_local_id
    /// </summary>
    public partial class AstThrowState : AstRule
    {
        
        private AstDecimalLocalId _decimalLocalId;
        
        public AstThrowState(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalLocalId>())
                {
                    this._decimalLocalId = ((AstDecimalLocalId)(enumerator.Current));
                }
            }
        }
        
        public AstThrowState(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalLocalId>())
                {
                    this._decimalLocalId = ((AstDecimalLocalId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimalLocalId DecimalLocalId
        {
            get
            {
                return this._decimalLocalId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowState(this);
        }
    }
    
    /// <summary>
    /// waitfor_statement
    /// 	 : WAITFOR  receive_statement?  COMMA?  (delay_time_timeout  time)?  expression?  SEMI?
    /// </summary>
    public partial class AstWaitforStatement : AstCflStatement
    {
        
        private AstReceiveStatement _receiveStatement;
        
        private AstExpression _expression;
        
        public AstWaitforStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReceiveStatement>())
                {
                    this._receiveStatement = ((AstReceiveStatement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstWaitforStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReceiveStatement>())
                {
                    this._receiveStatement = ((AstReceiveStatement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstReceiveStatement ReceiveStatement
        {
            get
            {
                return this._receiveStatement;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWaitforStatement(this);
        }
    }
    
    /// <summary>
    /// while_statement
    /// 	 : WHILE  search_condition  (sql_clause | BREAK  SEMI? | CONTINUE  SEMI?)
    /// </summary>
    public partial class AstWhileStatement : AstCflStatement
    {
        
        private AstSearchCondition _searchCondition;
        
        public AstWhileStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstWhileStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWhileStatement(this);
        }
    }
    
    /// <summary>
    /// alter_application_role
    /// 	 : ALTER  APPLICATION  ROLE  role_id  WITH  (COMMA?  NAME  EQUAL  new_role = role_id)?  (COMMA?  PASSWORD  EQUAL  application_role_password = STRING)?  (COMMA?  DEFAULT_SCHEMA  EQUAL  schema_id)?
    /// </summary>
    public partial class AstAlterApplicationRole : AstDdlClause
    {
        
        private AstRoleId _roleId;
        
        public AstAlterApplicationRole(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterApplicationRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleId RoleId
        {
            get
            {
                return this._roleId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterApplicationRole(this);
        }
    }
    
    /// <summary>
    /// create_application_role
    /// 	 : CREATE  APPLICATION  ROLE  role_id  WITH  (COMMA?  PASSWORD  EQUAL  application_role_password = STRING)?  (COMMA?  DEFAULT_SCHEMA  EQUAL  schema_id)?
    /// </summary>
    public partial class AstCreateApplicationRole : AstDdlClause
    {
        
        private AstRoleId _roleId;
        
        public AstCreateApplicationRole(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateApplicationRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleId RoleId
        {
            get
            {
                return this._roleId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateApplicationRole(this);
        }
    }
    
    /// <summary>
    /// drop_aggregate
    /// 	 : DROP  AGGREGATE  (IF  EXISTS)?  schema_aggregate_ref
    /// </summary>
    public partial class AstDropAggregate : AstDdlClause
    {
        
        private AstSchemaAggregateRef _schemaAggregateRef;
        
        public AstDropAggregate(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaAggregateRef>())
                {
                    this._schemaAggregateRef = ((AstSchemaAggregateRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropAggregate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaAggregateRef>())
                {
                    this._schemaAggregateRef = ((AstSchemaAggregateRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaAggregateRef SchemaAggregateRef
        {
            get
            {
                return this._schemaAggregateRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAggregate(this);
        }
    }
    
    /// <summary>
    /// drop_application_role
    /// 	 : DROP  APPLICATION  ROLE  role_id
    /// </summary>
    public partial class AstDropApplicationRole : AstDdlClause
    {
        
        private AstRoleId _roleId;
        
        public AstDropApplicationRole(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public AstDropApplicationRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleId RoleId
        {
            get
            {
                return this._roleId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropApplicationRole(this);
        }
    }
    
    /// <summary>
    /// alter_assembly
    /// 	 : alter_assembly_start  assembly_id  alter_assembly_clause
    /// </summary>
    public partial class AstAlterAssembly : AstDdlClause
    {
        
        private AstAlterAssemblyStart _alterAssemblyStart;
        
        private AstAssemblyId _assemblyId;
        
        private AstAlterAssemblyClause _alterAssemblyClause;
        
        public AstAlterAssembly(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyStart>())
                {
                    this._alterAssemblyStart = ((AstAlterAssemblyStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyClause>())
                {
                    this._alterAssemblyClause = ((AstAlterAssemblyClause)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssembly(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyStart>())
                {
                    this._alterAssemblyStart = ((AstAlterAssemblyStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyClause>())
                {
                    this._alterAssemblyClause = ((AstAlterAssemblyClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyStart AlterAssemblyStart
        {
            get
            {
                return this._alterAssemblyStart;
            }
        }
        
        public virtual AstAssemblyId AssemblyId
        {
            get
            {
                return this._assemblyId;
            }
        }
        
        public virtual AstAlterAssemblyClause AlterAssemblyClause
        {
            get
            {
                return this._alterAssemblyClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssembly(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_clause
    /// 	 : alter_assembly_from_clause?  alter_assembly_with_clause?  alter_assembly_drop_clause?  alter_assembly_add_clause?
    /// </summary>
    public partial class AstAlterAssemblyClause : AstRule
    {
        
        private AstAlterAssemblyFromClause _alterAssemblyFromClause;
        
        private AstAlterAssemblyWithClause _alterAssemblyWithClause;
        
        private AstAlterAssemblyDropClause _alterAssemblyDropClause;
        
        private AstAlterAssemblyAddClause _alterAssemblyAddClause;
        
        public AstAlterAssemblyClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClause>())
                {
                    this._alterAssemblyFromClause = ((AstAlterAssemblyFromClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyWithClause>())
                {
                    this._alterAssemblyWithClause = ((AstAlterAssemblyWithClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropClause>())
                {
                    this._alterAssemblyDropClause = ((AstAlterAssemblyDropClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyAddClause>())
                {
                    this._alterAssemblyAddClause = ((AstAlterAssemblyAddClause)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClause>())
                {
                    this._alterAssemblyFromClause = ((AstAlterAssemblyFromClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyWithClause>())
                {
                    this._alterAssemblyWithClause = ((AstAlterAssemblyWithClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropClause>())
                {
                    this._alterAssemblyDropClause = ((AstAlterAssemblyDropClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyAddClause>())
                {
                    this._alterAssemblyAddClause = ((AstAlterAssemblyAddClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyFromClause AlterAssemblyFromClause
        {
            get
            {
                return this._alterAssemblyFromClause;
            }
        }
        
        public virtual AstAlterAssemblyWithClause AlterAssemblyWithClause
        {
            get
            {
                return this._alterAssemblyWithClause;
            }
        }
        
        public virtual AstAlterAssemblyDropClause AlterAssemblyDropClause
        {
            get
            {
                return this._alterAssemblyDropClause;
            }
        }
        
        public virtual AstAlterAssemblyAddClause AlterAssemblyAddClause
        {
            get
            {
                return this._alterAssemblyAddClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyClause(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_from_clause
    /// 	 : alter_assembly_from_clause_start  (client_assembly_specifier | alter_assembly_file_bits)
    /// </summary>
    public partial class AstAlterAssemblyFromClause : AstRule
    {
        
        private AstAlterAssemblyFromClauseStart _alterAssemblyFromClauseStart;
        
        public AstAlterAssemblyFromClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClauseStart>())
                {
                    this._alterAssemblyFromClauseStart = ((AstAlterAssemblyFromClauseStart)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyFromClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClauseStart>())
                {
                    this._alterAssemblyFromClauseStart = ((AstAlterAssemblyFromClauseStart)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyFromClauseStart AlterAssemblyFromClauseStart
        {
            get
            {
                return this._alterAssemblyFromClauseStart;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyFromClause(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_drop_clause
    /// 	 : alter_assembly_drop  alter_assembly_drop_multiple_files
    /// </summary>
    public partial class AstAlterAssemblyDropClause : AstRule
    {
        
        private AstAlterAssemblyDrop _alterAssemblyDrop;
        
        private AstAlterAssemblyDropMultipleFiles _alterAssemblyDropMultipleFiles;
        
        public AstAlterAssemblyDropClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyDrop>())
                {
                    this._alterAssemblyDrop = ((AstAlterAssemblyDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropMultipleFiles>())
                {
                    this._alterAssemblyDropMultipleFiles = ((AstAlterAssemblyDropMultipleFiles)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyDropClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyDrop>())
                {
                    this._alterAssemblyDrop = ((AstAlterAssemblyDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropMultipleFiles>())
                {
                    this._alterAssemblyDropMultipleFiles = ((AstAlterAssemblyDropMultipleFiles)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyDrop AlterAssemblyDrop
        {
            get
            {
                return this._alterAssemblyDrop;
            }
        }
        
        public virtual AstAlterAssemblyDropMultipleFiles AlterAssemblyDropMultipleFiles
        {
            get
            {
                return this._alterAssemblyDropMultipleFiles;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyDropClause(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_add_clause
    /// 	 : ADD  FILE  FROM  alter_assembly_client_file_clause
    /// </summary>
    public partial class AstAlterAssemblyAddClause : AstRule
    {
        
        private AstAlterAssemblyClientFileClause _alterAssemblyClientFileClause;
        
        public AstAlterAssemblyAddClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyClientFileClause>())
                {
                    this._alterAssemblyClientFileClause = ((AstAlterAssemblyClientFileClause)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyAddClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyClientFileClause>())
                {
                    this._alterAssemblyClientFileClause = ((AstAlterAssemblyClientFileClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyClientFileClause AlterAssemblyClientFileClause
        {
            get
            {
                return this._alterAssemblyClientFileClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyAddClause(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_client_file_clause
    /// 	 : assembly_file_name  (AS  id_)?
    /// </summary>
    public partial class AstAlterAssemblyClientFileClause : AstRule
    {
        
        private AstAssemblyFileName _assemblyFileName;
        
        public AstAlterAssemblyClientFileClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyFileName>())
                {
                    this._assemblyFileName = ((AstAssemblyFileName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyClientFileClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyFileName>())
                {
                    this._assemblyFileName = ((AstAssemblyFileName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblyFileName AssemblyFileName
        {
            get
            {
                return this._assemblyFileName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyClientFileClause(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_file_bits
    /// 	 : AS  id_
    /// </summary>
    public partial class AstAlterAssemblyFileBits : AstRule
    {
        
        private AstId _id;
        
        public AstAlterAssemblyFileBits(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyFileBits(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyFileBits(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_with_clause
    /// 	 : WITH  assembly_option
    /// </summary>
    public partial class AstAlterAssemblyWithClause : AstRule
    {
        
        private AstAssemblyOption _assemblyOption;
        
        public AstAlterAssemblyWithClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyOption>())
                {
                    this._assemblyOption = ((AstAssemblyOption)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyWithClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyOption>())
                {
                    this._assemblyOption = ((AstAssemblyOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblyOption AssemblyOption
        {
            get
            {
                return this._assemblyOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyWithClause(this);
        }
    }
    
    /// <summary>
    /// network_file_share
    /// 	 : network_file_start  network_computer  file_path
    /// </summary>
    public partial class AstNetworkFileShare : AstRule
    {
        
        private AstNetworkFileStart _networkFileStart;
        
        private AstNetworkComputer _networkComputer;
        
        private AstFilePath _filePath;
        
        public AstNetworkFileShare(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNetworkFileStart>())
                {
                    this._networkFileStart = ((AstNetworkFileStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstNetworkComputer>())
                {
                    this._networkComputer = ((AstNetworkComputer)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this._filePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public AstNetworkFileShare(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNetworkFileStart>())
                {
                    this._networkFileStart = ((AstNetworkFileStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstNetworkComputer>())
                {
                    this._networkComputer = ((AstNetworkComputer)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this._filePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public virtual AstNetworkFileStart NetworkFileStart
        {
            get
            {
                return this._networkFileStart;
            }
        }
        
        public virtual AstNetworkComputer NetworkComputer
        {
            get
            {
                return this._networkComputer;
            }
        }
        
        public virtual AstFilePath FilePath
        {
            get
            {
                return this._filePath;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNetworkFileShare(this);
        }
    }
    
    /// <summary>
    /// local_file
    /// 	 : local_drive  file_path
    /// </summary>
    public partial class AstLocalFile : AstRule
    {
        
        private AstLocalDrive _localDrive;
        
        private AstFilePath _filePath;
        
        public AstLocalFile(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalDrive>())
                {
                    this._localDrive = ((AstLocalDrive)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this._filePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public AstLocalFile(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalDrive>())
                {
                    this._localDrive = ((AstLocalDrive)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this._filePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalDrive LocalDrive
        {
            get
            {
                return this._localDrive;
            }
        }
        
        public virtual AstFilePath FilePath
        {
            get
            {
                return this._filePath;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLocalFile(this);
        }
    }
    
    /// <summary>
    /// create_assembly
    /// 	 : CREATE  ASSEMBLY  assembly_id  (AUTHORIZATION  owner_id)?  FROM  binary_content_nexts  (WITH  PERMISSION_SET  EQUAL  (SAFE | EXTERNAL_ACCESS | UNSAFE))?
    /// </summary>
    public partial class AstCreateAssembly : AstDdlClause
    {
        
        private AstAssemblyId _assemblyId;
        
        private AstBinaryContentNexts _binaryContentNexts;
        
        public AstCreateAssembly(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinaryContentNexts>())
                {
                    this._binaryContentNexts = ((AstBinaryContentNexts)(enumerator.Current));
                }
            }
        }
        
        public AstCreateAssembly(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinaryContentNexts>())
                {
                    this._binaryContentNexts = ((AstBinaryContentNexts)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblyId AssemblyId
        {
            get
            {
                return this._assemblyId;
            }
        }
        
        public virtual AstBinaryContentNexts BinaryContentNexts
        {
            get
            {
                return this._binaryContentNexts;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateAssembly(this);
        }
    }
    
    /// <summary>
    /// binary_content_next
    /// 	 : COMMA?  binary_content
    /// </summary>
    public partial class AstBinaryContentNext : AstRule
    {
        
        private AstBinaryContent _binaryContent;
        
        public AstBinaryContentNext(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBinaryContent>())
                {
                    this._binaryContent = ((AstBinaryContent)(enumerator.Current));
                }
            }
        }
        
        public AstBinaryContentNext(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBinaryContent>())
                {
                    this._binaryContent = ((AstBinaryContent)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBinaryContent BinaryContent
        {
            get
            {
                return this._binaryContent;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBinaryContentNext(this);
        }
    }
    
    /// <summary>
    /// drop_assembly
    /// 	 : DROP  ASSEMBLY  (IF  EXISTS)?  assemblies  (WITH  NO  DEPENDENTS)?
    /// </summary>
    public partial class AstDropAssembly : AstDdlClause
    {
        
        private AstAssemblies _assemblies;
        
        public AstDropAssembly(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblies>())
                {
                    this._assemblies = ((AstAssemblies)(enumerator.Current));
                }
            }
        }
        
        public AstDropAssembly(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblies>())
                {
                    this._assemblies = ((AstAssemblies)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblies Assemblies
        {
            get
            {
                return this._assemblies;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAssembly(this);
        }
    }
    
    /// <summary>
    /// alter_asymmetric_key
    /// 	 : ALTER  ASYMMETRIC  KEY  asym_key_id  (asymmetric_key_option | REMOVE  PRIVATE  KEY)
    /// </summary>
    public partial class AstAlterAsymmetricKey : AstDdlClause
    {
        
        private AstAsymKeyId _asymKeyId;
        
        public AstAlterAsymmetricKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymKeyId>())
                {
                    this._asymKeyId = ((AstAsymKeyId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAsymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymKeyId>())
                {
                    this._asymKeyId = ((AstAsymKeyId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAsymKeyId AsymKeyId
        {
            get
            {
                return this._asymKeyId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAsymmetricKey(this);
        }
    }
    
    /// <summary>
    /// create_asymmetric_key
    /// 	 : CREATE  ASYMMETRIC  KEY  asym_key_id  (AUTHORIZATION  database_id)?  (FROM  (FILE  EQUAL  STRING | EXECUTABLE_FILE  EQUAL  STRING | ASSEMBLY  assembly_id | PROVIDER  provider_id))?  (WITH  (ALGORITHM  EQUAL  (RSA_4096 | RSA_3072 | RSA_2048 | RSA_1024 | RSA_512) | PROVIDER_KEY_NAME  EQUAL  provider_key_name = STRING | CREATION_DISPOSITION  EQUAL  (CREATE_NEW | OPEN_EXISTING)))?  (ENCRYPTION  BY  PASSWORD  EQUAL  asymmetric_key_password = STRING)?
    /// </summary>
    public partial class AstCreateAsymmetricKey : AstDdlClause
    {
        
        private AstAsymKeyId _asymKeyId;
        
        public AstCreateAsymmetricKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymKeyId>())
                {
                    this._asymKeyId = ((AstAsymKeyId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateAsymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymKeyId>())
                {
                    this._asymKeyId = ((AstAsymKeyId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAsymKeyId AsymKeyId
        {
            get
            {
                return this._asymKeyId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateAsymmetricKey(this);
        }
    }
    
    /// <summary>
    /// alter_authorization
    /// 	 : ALTER  AUTHORIZATION  ON  (class_type  DOUBLE_COLON)?  entity = entity_name  TO  authorization_grantee
    /// </summary>
    public partial class AstAlterAuthorization : AstDdlClause
    {
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        public AstAlterAuthorization(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAuthorization(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorization(this);
        }
    }
    
    /// <summary>
    /// alter_authorization_for_sql_database
    /// 	 : ALTER  AUTHORIZATION  ON  (class_type_for_sql_database  DOUBLE_COLON)?  entity = entity_name  TO  authorization_grantee
    /// </summary>
    public partial class AstAlterAuthorizationForSqlDatabase : AstDdlClause
    {
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        public AstAlterAuthorizationForSqlDatabase(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAuthorizationForSqlDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationForSqlDatabase(this);
        }
    }
    
    /// <summary>
    /// alter_authorization_for_azure_dw
    /// 	 : ALTER  AUTHORIZATION  ON  (class_type_for_azure_dw  DOUBLE_COLON)?  entity = entity_name_for_azure_dw_ref  TO  authorization_grantee
    /// </summary>
    public partial class AstAlterAuthorizationForAzureDw : AstDdlClause
    {
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        public AstAlterAuthorizationForAzureDw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAuthorizationForAzureDw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationForAzureDw(this);
        }
    }
    
    /// <summary>
    /// alter_authorization_for_parallel_dw
    /// 	 : ALTER  AUTHORIZATION  ON  (class_type_for_parallel_dw  DOUBLE_COLON)?  entity = entity_name_for_parallel_dw_ref  TO  authorization_grantee
    /// </summary>
    public partial class AstAlterAuthorizationForParallelDw : AstDdlClause
    {
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        public AstAlterAuthorizationForParallelDw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAuthorizationForParallelDw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationForParallelDw(this);
        }
    }
    
    /// <summary>
    /// drop_availability_group
    /// 	 : DROP  AVAILABILITY  GROUP  group_id
    /// </summary>
    public partial class AstDropAvailabilityGroup : AstDdlClause
    {
        
        private AstGroupId _groupId;
        
        public AstDropAvailabilityGroup(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstDropAvailabilityGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGroupId GroupId
        {
            get
            {
                return this._groupId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAvailabilityGroup(this);
        }
    }
    
    /// <summary>
    /// alter_availability_group
    /// 	 : alter_availability_group_start  alter_availability_group_options
    /// </summary>
    public partial class AstAlterAvailabilityGroup : AstDdlClause
    {
        
        private AstAlterAvailabilityGroupStart _alterAvailabilityGroupStart;
        
        private AstAlterAvailabilityGroupOptions _alterAvailabilityGroupOptions;
        
        public AstAlterAvailabilityGroup(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAvailabilityGroupStart>())
                {
                    this._alterAvailabilityGroupStart = ((AstAlterAvailabilityGroupStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilityGroupOptions>())
                {
                    this._alterAvailabilityGroupOptions = ((AstAlterAvailabilityGroupOptions)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAvailabilityGroupStart>())
                {
                    this._alterAvailabilityGroupStart = ((AstAlterAvailabilityGroupStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilityGroupOptions>())
                {
                    this._alterAvailabilityGroupOptions = ((AstAlterAvailabilityGroupOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAvailabilityGroupStart AlterAvailabilityGroupStart
        {
            get
            {
                return this._alterAvailabilityGroupStart;
            }
        }
        
        public virtual AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions
        {
            get
            {
                return this._alterAvailabilityGroupOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroup(this);
        }
    }
    
    /// <summary>
    /// alter_availability_group_start
    /// 	 : ALTER  AVAILABILITY  GROUP  group_id
    /// </summary>
    public partial class AstAlterAvailabilityGroupStart : AstRule
    {
        
        private AstGroupId _groupId;
        
        public AstAlterAvailabilityGroupStart(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityGroupStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGroupId GroupId
        {
            get
            {
                return this._groupId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupStart(this);
        }
    }
    
    /// <summary>
    /// alter_availability_group_options_database
    /// 	 : add_remove  DATABASE  database_id
    /// </summary>
    public partial class AstAlterAvailabilityGroupOptionsDatabase : AstRule
    {
        
        private AstAddRemove _addRemove;
        
        private AstDatabaseId _databaseId;
        
        public AstAlterAvailabilityGroupOptionsDatabase(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAddRemove>())
                {
                    this._addRemove = ((AstAddRemove)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityGroupOptionsDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAddRemove>())
                {
                    this._addRemove = ((AstAddRemove)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAddRemove AddRemove
        {
            get
            {
                return this._addRemove;
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupOptionsDatabase(this);
        }
    }
    
    /// <summary>
    /// range_ip_v4
    /// 	 : left = IPV4_ADDR  right = IPV4_ADDR
    /// </summary>
    public partial class AstRangeIpV4 : AstRule
    {
        
        public AstRangeIpV4(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
            }
        }
        
        public AstRangeIpV4(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRangeIpV4(this);
        }
    }
    
    /// <summary>
    /// range_ip_comma_v4
    /// 	 : left = IPV4_ADDR  COMMA  right = IPV4_ADDR
    /// </summary>
    public partial class AstRangeIpCommaV4 : AstRule
    {
        
        public AstRangeIpCommaV4(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
            }
        }
        
        public AstRangeIpCommaV4(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRangeIpCommaV4(this);
        }
    }
    
    /// <summary>
    /// alter_availability_group_options_listener_restart
    /// 	 : restart_remove  LISTENER  STRING
    /// </summary>
    public partial class AstAlterAvailabilityGroupOptionsListenerRestart : AstRule
    {
        
        private AstRestartRemove _restartRemove;
        
        public AstAlterAvailabilityGroupOptionsListenerRestart(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRestartRemove>())
                {
                    this._restartRemove = ((AstRestartRemove)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityGroupOptionsListenerRestart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRestartRemove>())
                {
                    this._restartRemove = ((AstRestartRemove)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRestartRemove RestartRemove
        {
            get
            {
                return this._restartRemove;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupOptionsListenerRestart(this);
        }
    }
    
    /// <summary>
    /// alter_availability_group_options_listener_dhcp
    /// 	 : WITH  DHCP  ON  LR_BRACKET  range_ip_v4  RR_BRACKET
    /// </summary>
    public partial class AstAlterAvailabilityGroupOptionsListenerDhcp : AstRule
    {
        
        private AstRangeIpV4 _rangeIpV4;
        
        public AstAlterAvailabilityGroupOptionsListenerDhcp(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRangeIpV4>())
                {
                    this._rangeIpV4 = ((AstRangeIpV4)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityGroupOptionsListenerDhcp(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRangeIpV4>())
                {
                    this._rangeIpV4 = ((AstRangeIpV4)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRangeIpV4 RangeIpV4
        {
            get
            {
                return this._rangeIpV4;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupOptionsListenerDhcp(this);
        }
    }
    
    /// <summary>
    /// alter_availability_replicat_modify
    /// 	 : MODIFY  REPLICA  ON  server_instance  (WITH  LR_BRACKET  (ENDPOINT_URL  EQUAL  STRING | availability_mode | FAILOVER_MODE  EQUAL  auto_manual | seeding_mode | backup_priority)  RR_BRACKET | SECONDARY_ROLE  LR_BRACKET  (allow_connections | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  STRING  RR_BRACKET)  RR_BRACKET | PRIMARY_ROLE  LR_BRACKET  (allow_connections | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  (string_list | NONE)  RR_BRACKET | SESSION_TIMEOUT  EQUAL  session_timeout = DECIMAL)  RR_BRACKET)
    /// </summary>
    public partial class AstAlterAvailabilityReplicatModify : AstRule
    {
        
        private AstServerInstance _serverInstance;
        
        public AstAlterAvailabilityReplicatModify(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerInstance>())
                {
                    this._serverInstance = ((AstServerInstance)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityReplicatModify(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerInstance>())
                {
                    this._serverInstance = ((AstServerInstance)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerInstance ServerInstance
        {
            get
            {
                return this._serverInstance;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityReplicatModify(this);
        }
    }
    
    /// <summary>
    /// alter_availability_replicat_add
    /// 	 : ADD  REPLICA  ON  server_instance  WITH  LR_BRACKET  (ENDPOINT_URL  EQUAL  STRING)?  (COMMA?  availability_mode)?  (COMMA?  FAILOVER_MODE  EQUAL  auto_manual)?  (COMMA?  seeding_mode)?  (COMMA?  backup_priority)?  (COMMA?  PRIMARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  real_write_all  RR_BRACKET)?  (COMMA?  SECONDARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  READ_ONLY  RR_BRACKET)?  RR_BRACKET
    /// </summary>
    public partial class AstAlterAvailabilityReplicatAdd : AstRule
    {
        
        private AstServerInstance _serverInstance;
        
        public AstAlterAvailabilityReplicatAdd(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerInstance>())
                {
                    this._serverInstance = ((AstServerInstance)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityReplicatAdd(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerInstance>())
                {
                    this._serverInstance = ((AstServerInstance)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerInstance ServerInstance
        {
            get
            {
                return this._serverInstance;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityReplicatAdd(this);
        }
    }
    
    /// <summary>
    /// availability_mode
    /// 	 : AVAILABILITY_MODE  EQUAL  synch_asynch
    /// </summary>
    public partial class AstAvailabilityMode : AstRule
    {
        
        private AstSynchAsynch _synchAsynch;
        
        public AstAvailabilityMode(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSynchAsynch>())
                {
                    this._synchAsynch = ((AstSynchAsynch)(enumerator.Current));
                }
            }
        }
        
        public AstAvailabilityMode(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSynchAsynch>())
                {
                    this._synchAsynch = ((AstSynchAsynch)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSynchAsynch SynchAsynch
        {
            get
            {
                return this._synchAsynch;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAvailabilityMode(this);
        }
    }
    
    /// <summary>
    /// seeding_mode
    /// 	 : SEEDING_MODE  EQUAL  auto_manual
    /// </summary>
    public partial class AstSeedingMode : AstRule
    {
        
        private AstAutoManual _autoManual;
        
        public AstSeedingMode(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAutoManual>())
                {
                    this._autoManual = ((AstAutoManual)(enumerator.Current));
                }
            }
        }
        
        public AstSeedingMode(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAutoManual>())
                {
                    this._autoManual = ((AstAutoManual)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAutoManual AutoManual
        {
            get
            {
                return this._autoManual;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSeedingMode(this);
        }
    }
    
    /// <summary>
    /// allow_connections
    /// 	 : ALLOW_CONNECTIONS  EQUAL  no_real_write_all
    /// </summary>
    public partial class AstAllowConnections : AstRule
    {
        
        private AstNoRealWriteAll _noRealWriteAll;
        
        public AstAllowConnections(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNoRealWriteAll>())
                {
                    this._noRealWriteAll = ((AstNoRealWriteAll)(enumerator.Current));
                }
            }
        }
        
        public AstAllowConnections(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNoRealWriteAll>())
                {
                    this._noRealWriteAll = ((AstNoRealWriteAll)(enumerator.Current));
                }
            }
        }
        
        public virtual AstNoRealWriteAll NoRealWriteAll
        {
            get
            {
                return this._noRealWriteAll;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAllowConnections(this);
        }
    }
    
    /// <summary>
    /// create_or_alter_broker_priority
    /// 	 : create_alter  BROKER  PRIORITY  ConversationPriorityName = id_  FOR  CONVERSATION  SET  LR_BRACKET  broker_contract_name?  broker_local_service_name?  broker_remote_service_name?  broker_priority_level?  RR_BRACKET
    /// </summary>
    public partial class AstCreateOrAlterBrokerPriority : AstDdlClause
    {
        
        private AstCreateAlter _createAlter;
        
        private AstBrokerContractName _brokerContractName;
        
        private AstBrokerLocalServiceName _brokerLocalServiceName;
        
        private AstBrokerRemoteServiceName _brokerRemoteServiceName;
        
        private AstBrokerPriorityLevel _brokerPriorityLevel;
        
        public AstCreateOrAlterBrokerPriority(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateAlter>())
                {
                    this._createAlter = ((AstCreateAlter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerContractName>())
                {
                    this._brokerContractName = ((AstBrokerContractName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerLocalServiceName>())
                {
                    this._brokerLocalServiceName = ((AstBrokerLocalServiceName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerRemoteServiceName>())
                {
                    this._brokerRemoteServiceName = ((AstBrokerRemoteServiceName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerPriorityLevel>())
                {
                    this._brokerPriorityLevel = ((AstBrokerPriorityLevel)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterBrokerPriority(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateAlter>())
                {
                    this._createAlter = ((AstCreateAlter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerContractName>())
                {
                    this._brokerContractName = ((AstBrokerContractName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerLocalServiceName>())
                {
                    this._brokerLocalServiceName = ((AstBrokerLocalServiceName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerRemoteServiceName>())
                {
                    this._brokerRemoteServiceName = ((AstBrokerRemoteServiceName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerPriorityLevel>())
                {
                    this._brokerPriorityLevel = ((AstBrokerPriorityLevel)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCreateAlter CreateAlter
        {
            get
            {
                return this._createAlter;
            }
        }
        
        public virtual AstBrokerContractName BrokerContractName
        {
            get
            {
                return this._brokerContractName;
            }
        }
        
        public virtual AstBrokerLocalServiceName BrokerLocalServiceName
        {
            get
            {
                return this._brokerLocalServiceName;
            }
        }
        
        public virtual AstBrokerRemoteServiceName BrokerRemoteServiceName
        {
            get
            {
                return this._brokerRemoteServiceName;
            }
        }
        
        public virtual AstBrokerPriorityLevel BrokerPriorityLevel
        {
            get
            {
                return this._brokerPriorityLevel;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterBrokerPriority(this);
        }
    }
    
    /// <summary>
    /// alter_certificate
    /// 	 : ALTER  CERTIFICATE  certificate_id  (REMOVE  PRIVATE_KEY | WITH  PRIVATE  KEY  LR_BRACKET  (FILE  EQUAL  STRING  COMMA? | DECRYPTION  BY  PASSWORD  EQUAL  STRING  COMMA? | ENCRYPTION  BY  PASSWORD  EQUAL  STRING  COMMA?)+  RR_BRACKET | WITH  ACTIVE  FOR  BEGIN_DIALOG  EQUAL  on_off)
    /// </summary>
    public partial class AstAlterCertificate : AstDdlClause
    {
        
        private AstCertificateId _certificateId;
        
        public AstAlterCertificate(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterCertificate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateId CertificateId
        {
            get
            {
                return this._certificateId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterCertificate(this);
        }
    }
    
    /// <summary>
    /// alter_column_encryption_key
    /// 	 : ALTER  COLUMN  ENCRYPTION  KEY  column_encryption_key_id  add_drop  VALUE  LR_BRACKET  COLUMN_MASTER_KEY  EQUAL  column_master_key_name = id_  (COMMA  ALGORITHM  EQUAL  algorithm_name = STRING  COMMA  ENCRYPTED_VALUE  EQUAL  BINARY)?  RR_BRACKET
    /// </summary>
    public partial class AstAlterColumnEncryptionKey : AstDdlClause
    {
        
        private AstColumnEncryptionKeyId _columnEncryptionKeyId;
        
        private AstAddDrop _addDrop;
        
        public AstAlterColumnEncryptionKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKeyId>())
                {
                    this._columnEncryptionKeyId = ((AstColumnEncryptionKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
            }
        }
        
        public AstAlterColumnEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKeyId>())
                {
                    this._columnEncryptionKeyId = ((AstColumnEncryptionKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnEncryptionKeyId ColumnEncryptionKeyId
        {
            get
            {
                return this._columnEncryptionKeyId;
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterColumnEncryptionKey(this);
        }
    }
    
    /// <summary>
    /// create_column_encryption_key
    /// 	 : CREATE  COLUMN  ENCRYPTION  KEY  column_encryption_key_id  WITH  VALUES  (LR_BRACKET  COMMA?  COLUMN_MASTER_KEY  EQUAL  column_master_key_name = id_  COMMA  ALGORITHM  EQUAL  algorithm_name = STRING  COMMA  ENCRYPTED_VALUE  EQUAL  encrypted_value = BINARY  RR_BRACKET  COMMA?)+
    /// </summary>
    public partial class AstCreateColumnEncryptionKey : AstDdlClause
    {
        
        private AstColumnEncryptionKeyId _columnEncryptionKeyId;
        
        public AstCreateColumnEncryptionKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKeyId>())
                {
                    this._columnEncryptionKeyId = ((AstColumnEncryptionKeyId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateColumnEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKeyId>())
                {
                    this._columnEncryptionKeyId = ((AstColumnEncryptionKeyId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnEncryptionKeyId ColumnEncryptionKeyId
        {
            get
            {
                return this._columnEncryptionKeyId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnEncryptionKey(this);
        }
    }
    
    /// <summary>
    /// drop_certificate
    /// 	 : DROP  CERTIFICATE  certificate_id
    /// </summary>
    public partial class AstDropCertificate : AstDdlClause
    {
        
        private AstCertificateId _certificateId;
        
        public AstDropCertificate(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
            }
        }
        
        public AstDropCertificate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateId CertificateId
        {
            get
            {
                return this._certificateId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropCertificate(this);
        }
    }
    
    /// <summary>
    /// drop_column_encryption_key
    /// 	 : DROP  COLUMN  ENCRYPTION  KEY  encryptor_id
    /// </summary>
    public partial class AstDropColumnEncryptionKey : AstDdlClause
    {
        
        private AstEncryptorId _encryptorId;
        
        public AstDropColumnEncryptionKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptorId>())
                {
                    this._encryptorId = ((AstEncryptorId)(enumerator.Current));
                }
            }
        }
        
        public AstDropColumnEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptorId>())
                {
                    this._encryptorId = ((AstEncryptorId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEncryptorId EncryptorId
        {
            get
            {
                return this._encryptorId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropColumnEncryptionKey(this);
        }
    }
    
    /// <summary>
    /// drop_column_master_key
    /// 	 : DROP  COLUMN  MASTER  KEY  master_key
    /// </summary>
    public partial class AstDropColumnMasterKey : AstDdlClause
    {
        
        private AstMasterKey _masterKey;
        
        public AstDropColumnMasterKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMasterKey>())
                {
                    this._masterKey = ((AstMasterKey)(enumerator.Current));
                }
            }
        }
        
        public AstDropColumnMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMasterKey>())
                {
                    this._masterKey = ((AstMasterKey)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMasterKey MasterKey
        {
            get
            {
                return this._masterKey;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropColumnMasterKey(this);
        }
    }
    
    /// <summary>
    /// drop_credential
    /// 	 : DROP  CREDENTIAL  credential_id
    /// </summary>
    public partial class AstDropCredential : AstDdlClause
    {
        
        private AstCredentialId _credentialId;
        
        public AstDropCredential(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public AstDropCredential(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialId CredentialId
        {
            get
            {
                return this._credentialId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropCredential(this);
        }
    }
    
    /// <summary>
    /// drop_cryptograhic_provider
    /// 	 : DROP  CRYPTOGRAPHIC  PROVIDER  provider_id
    /// </summary>
    public partial class AstDropCryptograhicProvider : AstDdlClause
    {
        
        private AstProviderId _providerId;
        
        public AstDropCryptograhicProvider(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderId>())
                {
                    this._providerId = ((AstProviderId)(enumerator.Current));
                }
            }
        }
        
        public AstDropCryptograhicProvider(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderId>())
                {
                    this._providerId = ((AstProviderId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProviderId ProviderId
        {
            get
            {
                return this._providerId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropCryptograhicProvider(this);
        }
    }
    
    /// <summary>
    /// drop_database_audit_specification
    /// 	 : DROP  DATABASE  AUDIT  SPECIFICATION  audit_id
    /// </summary>
    public partial class AstDropDatabaseAuditSpecification : AstDdlClause
    {
        
        private AstAuditId _auditId;
        
        public AstDropDatabaseAuditSpecification(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public AstDropDatabaseAuditSpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabaseAuditSpecification(this);
        }
    }
    
    /// <summary>
    /// drop_database_scoped_credential
    /// 	 : DROP  DATABASE  SCOPED  CREDENTIAL  credential_id
    /// </summary>
    public partial class AstDropDatabaseScopedCredential : AstDdlClause
    {
        
        private AstCredentialId _credentialId;
        
        public AstDropDatabaseScopedCredential(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public AstDropDatabaseScopedCredential(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialId CredentialId
        {
            get
            {
                return this._credentialId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabaseScopedCredential(this);
        }
    }
    
    /// <summary>
    /// drop_endpoint
    /// 	 : DROP  ENDPOINT  endpoint_id
    /// </summary>
    public partial class AstDropEndpoint : AstDdlClause
    {
        
        private AstEndpointId _endpointId;
        
        public AstDropEndpoint(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointId>())
                {
                    this._endpointId = ((AstEndpointId)(enumerator.Current));
                }
            }
        }
        
        public AstDropEndpoint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointId>())
                {
                    this._endpointId = ((AstEndpointId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEndpointId EndpointId
        {
            get
            {
                return this._endpointId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropEndpoint(this);
        }
    }
    
    /// <summary>
    /// drop_external_data_source
    /// 	 : DROP  EXTERNAL  DATA  SOURCE  external_data_source_id
    /// </summary>
    public partial class AstDropExternalDataSource : AstDdlClause
    {
        
        private AstExternalDataSourceId _externalDataSourceId;
        
        public AstDropExternalDataSource(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalDataSourceId>())
                {
                    this._externalDataSourceId = ((AstExternalDataSourceId)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalDataSource(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalDataSourceId>())
                {
                    this._externalDataSourceId = ((AstExternalDataSourceId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExternalDataSourceId ExternalDataSourceId
        {
            get
            {
                return this._externalDataSourceId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalDataSource(this);
        }
    }
    
    /// <summary>
    /// drop_external_file_format
    /// 	 : DROP  EXTERNAL  FILE  FORMAT  external_file_format_id
    /// </summary>
    public partial class AstDropExternalFileFormat : AstDdlClause
    {
        
        private AstExternalFileFormatId _externalFileFormatId;
        
        public AstDropExternalFileFormat(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalFileFormatId>())
                {
                    this._externalFileFormatId = ((AstExternalFileFormatId)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalFileFormat(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalFileFormatId>())
                {
                    this._externalFileFormatId = ((AstExternalFileFormatId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExternalFileFormatId ExternalFileFormatId
        {
            get
            {
                return this._externalFileFormatId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalFileFormat(this);
        }
    }
    
    /// <summary>
    /// drop_external_library
    /// 	 : DROP  EXTERNAL  LIBRARY  library_id  (AUTHORIZATION  owner_id)?
    /// </summary>
    public partial class AstDropExternalLibrary : AstDdlClause
    {
        
        private AstLibraryId _libraryId;
        
        public AstDropExternalLibrary(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryId>())
                {
                    this._libraryId = ((AstLibraryId)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalLibrary(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryId>())
                {
                    this._libraryId = ((AstLibraryId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLibraryId LibraryId
        {
            get
            {
                return this._libraryId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalLibrary(this);
        }
    }
    
    /// <summary>
    /// drop_external_resource_pool
    /// 	 : DROP  EXTERNAL  RESOURCE  POOL  pool_id
    /// </summary>
    public partial class AstDropExternalResourcePool : AstDdlClause
    {
        
        private AstPoolId _poolId;
        
        public AstDropExternalResourcePool(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolId PoolId
        {
            get
            {
                return this._poolId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalResourcePool(this);
        }
    }
    
    /// <summary>
    /// drop_external_table
    /// 	 : DROP  EXTERNAL  TABLE  database_schema_table_ref
    /// </summary>
    public partial class AstDropExternalTable : AstDdlClause
    {
        
        private AstDatabaseSchemaTableRef _databaseSchemaTableRef;
        
        public AstDropExternalTable(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseSchemaTableRef DatabaseSchemaTableRef
        {
            get
            {
                return this._databaseSchemaTableRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalTable(this);
        }
    }
    
    /// <summary>
    /// drop_event_session
    /// 	 : DROP  EVENT  SESSION  event_session_id  ON  SERVER
    /// </summary>
    public partial class AstDropEventSession : AstDdlClause
    {
        
        private AstEventSessionId _eventSessionId;
        
        public AstDropEventSession(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionId>())
                {
                    this._eventSessionId = ((AstEventSessionId)(enumerator.Current));
                }
            }
        }
        
        public AstDropEventSession(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionId>())
                {
                    this._eventSessionId = ((AstEventSessionId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventSessionId EventSessionId
        {
            get
            {
                return this._eventSessionId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropEventSession(this);
        }
    }
    
    /// <summary>
    /// drop_fulltext_catalog
    /// 	 : DROP  FULLTEXT  CATALOG  catalog_id
    /// </summary>
    public partial class AstDropFulltextCatalog : AstDdlClause
    {
        
        private AstCatalogId _catalogId;
        
        public AstDropFulltextCatalog(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogId>())
                {
                    this._catalogId = ((AstCatalogId)(enumerator.Current));
                }
            }
        }
        
        public AstDropFulltextCatalog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogId>())
                {
                    this._catalogId = ((AstCatalogId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCatalogId CatalogId
        {
            get
            {
                return this._catalogId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFulltextCatalog(this);
        }
    }
    
    /// <summary>
    /// drop_fulltext_index
    /// 	 : DROP  FULLTEXT  INDEX  ON  database_schema_table_ref
    /// </summary>
    public partial class AstDropFulltextIndex : AstDdlClause
    {
        
        private AstDatabaseSchemaTableRef _databaseSchemaTableRef;
        
        public AstDropFulltextIndex(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropFulltextIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseSchemaTableRef DatabaseSchemaTableRef
        {
            get
            {
                return this._databaseSchemaTableRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFulltextIndex(this);
        }
    }
    
    /// <summary>
    /// drop_fulltext_stoplist
    /// 	 : DROP  FULLTEXT  STOPLIST  stoplist_id
    /// </summary>
    public partial class AstDropFulltextStoplist : AstDdlClause
    {
        
        private AstStoplistId _stoplistId;
        
        public AstDropFulltextStoplist(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
            }
        }
        
        public AstDropFulltextStoplist(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStoplistId StoplistId
        {
            get
            {
                return this._stoplistId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFulltextStoplist(this);
        }
    }
    
    /// <summary>
    /// drop_login
    /// 	 : DROP  LOGIN  login_id
    /// </summary>
    public partial class AstDropLogin : AstDdlClause
    {
        
        private AstLoginId _loginId;
        
        public AstDropLogin(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
            }
        }
        
        public AstDropLogin(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropLogin(this);
        }
    }
    
    /// <summary>
    /// drop_message_type
    /// 	 : DROP  MESSAGE  TYPE  message_type_id
    /// </summary>
    public partial class AstDropMessageType : AstDdlClause
    {
        
        private AstMessageTypeId _messageTypeId;
        
        public AstDropMessageType(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeId>())
                {
                    this._messageTypeId = ((AstMessageTypeId)(enumerator.Current));
                }
            }
        }
        
        public AstDropMessageType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeId>())
                {
                    this._messageTypeId = ((AstMessageTypeId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMessageTypeId MessageTypeId
        {
            get
            {
                return this._messageTypeId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropMessageType(this);
        }
    }
    
    /// <summary>
    /// drop_partition_function
    /// 	 : DROP  PARTITION  FUNCTION  partition_function_id
    /// </summary>
    public partial class AstDropPartitionFunction : AstDdlClause
    {
        
        private AstPartitionFunctionId _partitionFunctionId;
        
        public AstDropPartitionFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
            }
        }
        
        public AstDropPartitionFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionFunctionId PartitionFunctionId
        {
            get
            {
                return this._partitionFunctionId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropPartitionFunction(this);
        }
    }
    
    /// <summary>
    /// drop_partition_scheme
    /// 	 : DROP  PARTITION  SCHEME  partition_scheme_id
    /// </summary>
    public partial class AstDropPartitionScheme : AstDdlClause
    {
        
        private AstPartitionSchemeId _partitionSchemeId;
        
        public AstDropPartitionScheme(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeId>())
                {
                    this._partitionSchemeId = ((AstPartitionSchemeId)(enumerator.Current));
                }
            }
        }
        
        public AstDropPartitionScheme(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeId>())
                {
                    this._partitionSchemeId = ((AstPartitionSchemeId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionSchemeId PartitionSchemeId
        {
            get
            {
                return this._partitionSchemeId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropPartitionScheme(this);
        }
    }
    
    /// <summary>
    /// drop_queue
    /// 	 : DROP  QUEUE  database_schema_queue_ref
    /// </summary>
    public partial class AstDropQueue : AstDdlClause
    {
        
        private AstDatabaseSchemaQueueRef _databaseSchemaQueueRef;
        
        public AstDropQueue(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaQueueRef>())
                {
                    this._databaseSchemaQueueRef = ((AstDatabaseSchemaQueueRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropQueue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaQueueRef>())
                {
                    this._databaseSchemaQueueRef = ((AstDatabaseSchemaQueueRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseSchemaQueueRef DatabaseSchemaQueueRef
        {
            get
            {
                return this._databaseSchemaQueueRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropQueue(this);
        }
    }
    
    /// <summary>
    /// drop_remote_service_binding
    /// 	 : DROP  REMOTE  SERVICE  BINDING  binding_id
    /// </summary>
    public partial class AstDropRemoteServiceBinding : AstDdlClause
    {
        
        private AstBindingId _bindingId;
        
        public AstDropRemoteServiceBinding(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingId>())
                {
                    this._bindingId = ((AstBindingId)(enumerator.Current));
                }
            }
        }
        
        public AstDropRemoteServiceBinding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingId>())
                {
                    this._bindingId = ((AstBindingId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBindingId BindingId
        {
            get
            {
                return this._bindingId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRemoteServiceBinding(this);
        }
    }
    
    /// <summary>
    /// drop_resource_pool
    /// 	 : DROP  RESOURCE  POOL  pool_id
    /// </summary>
    public partial class AstDropResourcePool : AstDdlClause
    {
        
        private AstPoolId _poolId;
        
        public AstDropResourcePool(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
            }
        }
        
        public AstDropResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolId PoolId
        {
            get
            {
                return this._poolId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropResourcePool(this);
        }
    }
    
    /// <summary>
    /// drop_db_role
    /// 	 : DROP  ROLE  (IF  EXISTS)?  role_id
    /// </summary>
    public partial class AstDropDbRole : AstDdlClause
    {
        
        private AstRoleId _roleId;
        
        public AstDropDbRole(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public AstDropDbRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleId RoleId
        {
            get
            {
                return this._roleId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDbRole(this);
        }
    }
    
    /// <summary>
    /// drop_route
    /// 	 : DROP  ROUTE  route_id
    /// </summary>
    public partial class AstDropRoute : AstDdlClause
    {
        
        private AstRouteId _routeId;
        
        public AstDropRoute(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteId>())
                {
                    this._routeId = ((AstRouteId)(enumerator.Current));
                }
            }
        }
        
        public AstDropRoute(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteId>())
                {
                    this._routeId = ((AstRouteId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRouteId RouteId
        {
            get
            {
                return this._routeId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRoute(this);
        }
    }
    
    /// <summary>
    /// drop_schema
    /// 	 : DROP  SCHEMA  (IF  EXISTS)?  schema_id
    /// </summary>
    public partial class AstDropSchema : AstDdlClause
    {
        
        private AstSchemaId _schemaId;
        
        public AstDropSchema(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
            }
        }
        
        public AstDropSchema(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaId SchemaId
        {
            get
            {
                return this._schemaId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSchema(this);
        }
    }
    
    /// <summary>
    /// drop_search_property_list
    /// 	 : DROP  SEARCH  PROPERTY  LIST  property_list_id
    /// </summary>
    public partial class AstDropSearchPropertyList : AstDdlClause
    {
        
        private AstPropertyListId _propertyListId;
        
        public AstDropSearchPropertyList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPropertyListId>())
                {
                    this._propertyListId = ((AstPropertyListId)(enumerator.Current));
                }
            }
        }
        
        public AstDropSearchPropertyList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPropertyListId>())
                {
                    this._propertyListId = ((AstPropertyListId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPropertyListId PropertyListId
        {
            get
            {
                return this._propertyListId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSearchPropertyList(this);
        }
    }
    
    /// <summary>
    /// drop_security_policy
    /// 	 : DROP  SECURITY  POLICY  (IF  EXISTS)?  schema_security_policy_ref
    /// </summary>
    public partial class AstDropSecurityPolicy : AstDdlClause
    {
        
        private AstSchemaSecurityPolicyRef _schemaSecurityPolicyRef;
        
        public AstDropSecurityPolicy(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSecurityPolicyRef>())
                {
                    this._schemaSecurityPolicyRef = ((AstSchemaSecurityPolicyRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropSecurityPolicy(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSecurityPolicyRef>())
                {
                    this._schemaSecurityPolicyRef = ((AstSchemaSecurityPolicyRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSecurityPolicyRef SchemaSecurityPolicyRef
        {
            get
            {
                return this._schemaSecurityPolicyRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSecurityPolicy(this);
        }
    }
    
    /// <summary>
    /// drop_server_audit
    /// 	 : DROP  SERVER  AUDIT  audit_id
    /// </summary>
    public partial class AstDropServerAudit : AstDdlClause
    {
        
        private AstAuditId _auditId;
        
        public AstDropServerAudit(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public AstDropServerAudit(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropServerAudit(this);
        }
    }
    
    /// <summary>
    /// drop_server_audit_specification
    /// 	 : DROP  SERVER  AUDIT  SPECIFICATION  audit_id
    /// </summary>
    public partial class AstDropServerAuditSpecification : AstDdlClause
    {
        
        private AstAuditId _auditId;
        
        public AstDropServerAuditSpecification(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public AstDropServerAuditSpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropServerAuditSpecification(this);
        }
    }
    
    /// <summary>
    /// drop_server_role
    /// 	 : DROP  SERVER  ROLE  role_id
    /// </summary>
    public partial class AstDropServerRole : AstDdlClause
    {
        
        private AstRoleId _roleId;
        
        public AstDropServerRole(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public AstDropServerRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleId RoleId
        {
            get
            {
                return this._roleId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropServerRole(this);
        }
    }
    
    /// <summary>
    /// drop_service
    /// 	 : DROP  SERVICE  service_id
    /// </summary>
    public partial class AstDropService : AstDdlClause
    {
        
        private AstServiceId _serviceId;
        
        public AstDropService(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServiceId>())
                {
                    this._serviceId = ((AstServiceId)(enumerator.Current));
                }
            }
        }
        
        public AstDropService(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServiceId>())
                {
                    this._serviceId = ((AstServiceId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServiceId ServiceId
        {
            get
            {
                return this._serviceId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropService(this);
        }
    }
    
    /// <summary>
    /// drop_signature
    /// 	 : DROP  (COUNTER)?  SIGNATURE  FROM  schema_module_ref  BY  (COMMA?  CERTIFICATE  certificate_id | COMMA?  ASYMMETRIC  KEY  asym_key_id)+
    /// </summary>
    public partial class AstDropSignature : AstDdlClause
    {
        
        private AstSchemaModuleRef _schemaModuleRef;
        
        public AstDropSignature(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaModuleRef>())
                {
                    this._schemaModuleRef = ((AstSchemaModuleRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropSignature(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaModuleRef>())
                {
                    this._schemaModuleRef = ((AstSchemaModuleRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaModuleRef SchemaModuleRef
        {
            get
            {
                return this._schemaModuleRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSignature(this);
        }
    }
    
    /// <summary>
    /// drop_statistics_id_azure_dw_and_pdw
    /// 	 : DROP  STATISTICS  schema_object_statistics_ref
    /// </summary>
    public partial class AstDropStatisticsIdAzureDwAndPdw : AstDdlClause
    {
        
        private AstSchemaObjectStatisticsRef _schemaObjectStatisticsRef;
        
        public AstDropStatisticsIdAzureDwAndPdw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaObjectStatisticsRef>())
                {
                    this._schemaObjectStatisticsRef = ((AstSchemaObjectStatisticsRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropStatisticsIdAzureDwAndPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaObjectStatisticsRef>())
                {
                    this._schemaObjectStatisticsRef = ((AstSchemaObjectStatisticsRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaObjectStatisticsRef SchemaObjectStatisticsRef
        {
            get
            {
                return this._schemaObjectStatisticsRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropStatisticsIdAzureDwAndPdw(this);
        }
    }
    
    /// <summary>
    /// drop_symmetric_key
    /// 	 : DROP  SYMMETRIC  KEY  symmetric_key_id  (REMOVE  PROVIDER  KEY)?
    /// </summary>
    public partial class AstDropSymmetricKey : AstDdlClause
    {
        
        private AstSymmetricKeyId _symmetricKeyId;
        
        public AstDropSymmetricKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyId>())
                {
                    this._symmetricKeyId = ((AstSymmetricKeyId)(enumerator.Current));
                }
            }
        }
        
        public AstDropSymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyId>())
                {
                    this._symmetricKeyId = ((AstSymmetricKeyId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSymmetricKeyId SymmetricKeyId
        {
            get
            {
                return this._symmetricKeyId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSymmetricKey(this);
        }
    }
    
    /// <summary>
    /// drop_synonym
    /// 	 : DROP  SYNONYM  (IF  EXISTS)?  schema_synonym_ref
    /// </summary>
    public partial class AstDropSynonym : AstDdlClause
    {
        
        private AstSchemaSynonymRef _schemaSynonymRef;
        
        public AstDropSynonym(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSynonymRef>())
                {
                    this._schemaSynonymRef = ((AstSchemaSynonymRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropSynonym(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSynonymRef>())
                {
                    this._schemaSynonymRef = ((AstSchemaSynonymRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSynonymRef SchemaSynonymRef
        {
            get
            {
                return this._schemaSynonymRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSynonym(this);
        }
    }
    
    /// <summary>
    /// drop_user
    /// 	 : DROP  USER  (IF  EXISTS)?  user_id
    /// </summary>
    public partial class AstDropUser : AstDdlClause
    {
        
        private AstUserId _userId;
        
        public AstDropUser(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
            }
        }
        
        public AstDropUser(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUserId UserId
        {
            get
            {
                return this._userId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropUser(this);
        }
    }
    
    /// <summary>
    /// drop_workload_group
    /// 	 : DROP  WORKLOAD  GROUP  group_id
    /// </summary>
    public partial class AstDropWorkloadGroup : AstDdlClause
    {
        
        private AstGroupId _groupId;
        
        public AstDropWorkloadGroup(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstDropWorkloadGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGroupId GroupId
        {
            get
            {
                return this._groupId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropWorkloadGroup(this);
        }
    }
    
    /// <summary>
    /// drop_xml_schema_collection
    /// 	 : DROP  XML  SCHEMA  COLLECTION  schema_sql_identifier_id
    /// </summary>
    public partial class AstDropXmlSchemaCollection : AstDdlClause
    {
        
        private AstSchemaSqlIdentifierId _schemaSqlIdentifierId;
        
        public AstDropXmlSchemaCollection(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSqlIdentifierId>())
                {
                    this._schemaSqlIdentifierId = ((AstSchemaSqlIdentifierId)(enumerator.Current));
                }
            }
        }
        
        public AstDropXmlSchemaCollection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSqlIdentifierId>())
                {
                    this._schemaSqlIdentifierId = ((AstSchemaSqlIdentifierId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSqlIdentifierId SchemaSqlIdentifierId
        {
            get
            {
                return this._schemaSqlIdentifierId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropXmlSchemaCollection(this);
        }
    }
    
    /// <summary>
    /// lock_table
    /// 	 : LOCK  TABLE  full_table_ref  IN  (SHARE | EXCLUSIVE)  MODE  (WAIT  seconds = DECIMAL | NOWAIT)?  SEMI?
    /// </summary>
    public partial class AstLockTable : AstDdlClause
    {
        
        private AstFullTableRef _fullTableRef;
        
        public AstLockTable(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstLockTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLockTable(this);
        }
    }
    
    /// <summary>
    /// truncate_table
    /// 	 : TRUNCATE  TABLE  full_table_ref  (WITH  LR_BRACKET  PARTITIONS  LR_BRACKET  decimal_range  RR_BRACKET  (COMMA  DECIMAL)*)?
    /// </summary>
    public partial class AstTruncateTable : AstDdlClause
    {
        
        private AstFullTableRef _fullTableRef;
        
        public AstTruncateTable(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstTruncateTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTruncateTable(this);
        }
    }
    
    /// <summary>
    /// alter_credential
    /// 	 : ALTER  CREDENTIAL  credential_id  WITH  IDENTITY  EQUAL  identity_name = STRING  (COMMA  SECRET  EQUAL  secret = STRING)?
    /// </summary>
    public partial class AstAlterCredential : AstDdlClause
    {
        
        private AstCredentialId _credentialId;
        
        public AstAlterCredential(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterCredential(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialId CredentialId
        {
            get
            {
                return this._credentialId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterCredential(this);
        }
    }
    
    /// <summary>
    /// create_credential
    /// 	 : CREATE  CREDENTIAL  credential_id  WITH  IDENTITY  EQUAL  identity_name = STRING  (COMMA  SECRET  EQUAL  secret = STRING)?  (FOR  CRYPTOGRAPHIC  PROVIDER  cryptographic_provider_id)?
    /// </summary>
    public partial class AstCreateCredential : AstDdlClause
    {
        
        private AstCredentialId _credentialId;
        
        public AstCreateCredential(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateCredential(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialId CredentialId
        {
            get
            {
                return this._credentialId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateCredential(this);
        }
    }
    
    /// <summary>
    /// alter_cryptographic_provider
    /// 	 : ALTER  CRYPTOGRAPHIC  PROVIDER  provider_id  (FROM  FILE  EQUAL  crypto_provider_ddl_file = STRING)?  enable_disable?
    /// </summary>
    public partial class AstAlterCryptographicProvider : AstDdlClause
    {
        
        private AstProviderId _providerId;
        
        private AstEnableDisable _enableDisable;
        
        public AstAlterCryptographicProvider(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderId>())
                {
                    this._providerId = ((AstProviderId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEnableDisable>())
                {
                    this._enableDisable = ((AstEnableDisable)(enumerator.Current));
                }
            }
        }
        
        public AstAlterCryptographicProvider(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderId>())
                {
                    this._providerId = ((AstProviderId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEnableDisable>())
                {
                    this._enableDisable = ((AstEnableDisable)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProviderId ProviderId
        {
            get
            {
                return this._providerId;
            }
        }
        
        public virtual AstEnableDisable EnableDisable
        {
            get
            {
                return this._enableDisable;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterCryptographicProvider(this);
        }
    }
    
    /// <summary>
    /// create_cryptographic_provider
    /// 	 : CREATE  CRYPTOGRAPHIC  PROVIDER  provider_id  FROM  FILE  EQUAL  path_of_DLL = STRING
    /// </summary>
    public partial class AstCreateCryptographicProvider : AstDdlClause
    {
        
        private AstProviderId _providerId;
        
        public AstCreateCryptographicProvider(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderId>())
                {
                    this._providerId = ((AstProviderId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateCryptographicProvider(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderId>())
                {
                    this._providerId = ((AstProviderId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProviderId ProviderId
        {
            get
            {
                return this._providerId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateCryptographicProvider(this);
        }
    }
    
    /// <summary>
    /// create_event_notification
    /// 	 : CREATE  EVENT  NOTIFICATION  event_notification_id  ON  (SERVER | DATABASE | QUEUE  queue_id)  (WITH  FAN_IN)?  FOR  (COMMA?  event_type_or_group_id)+  TO  SERVICE  broker_service = STRING  COMMA  broker_service_specifier_or_current_database = STRING
    /// </summary>
    public partial class AstCreateEventNotification : AstDdlClause
    {
        
        private AstEventNotificationId _eventNotificationId;
        
        public AstCreateEventNotification(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventNotificationId>())
                {
                    this._eventNotificationId = ((AstEventNotificationId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateEventNotification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventNotificationId>())
                {
                    this._eventNotificationId = ((AstEventNotificationId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventNotificationId EventNotificationId
        {
            get
            {
                return this._eventNotificationId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateEventNotification(this);
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session
    /// 	 : (CREATE | ALTER)  EVENT  SESSION  event_session_id  ON  SERVER  create_or_alter_event_session_add_event*  create_or_alter_event_session_del_event*  create_or_alter_event_session_add_target*  create_or_alter_event_session_del_target*  create_or_alter_event_session_with?  (STATE  EQUAL  start_stop)?
    /// </summary>
    public partial class AstCreateOrAlterEventSession : AstDdlClause
    {
        
        private AstEventSessionId _eventSessionId;
        
        private AstCreateOrAlterEventSessionAddEvent _createOrAlterEventSessionAddEvent;
        
        private AstCreateOrAlterEventSessionDelEvent _createOrAlterEventSessionDelEvent;
        
        private AstCreateOrAlterEventSessionAddTarget _createOrAlterEventSessionAddTarget;
        
        private AstCreateOrAlterEventSessionDelTarget _createOrAlterEventSessionDelTarget;
        
        private AstCreateOrAlterEventSessionWith _createOrAlterEventSessionWith;
        
        public AstCreateOrAlterEventSession(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionId>())
                {
                    this._eventSessionId = ((AstEventSessionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionAddEvent>())
                {
                    this._createOrAlterEventSessionAddEvent = ((AstCreateOrAlterEventSessionAddEvent)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionDelEvent>())
                {
                    this._createOrAlterEventSessionDelEvent = ((AstCreateOrAlterEventSessionDelEvent)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionAddTarget>())
                {
                    this._createOrAlterEventSessionAddTarget = ((AstCreateOrAlterEventSessionAddTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionDelTarget>())
                {
                    this._createOrAlterEventSessionDelTarget = ((AstCreateOrAlterEventSessionDelTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionWith>())
                {
                    this._createOrAlterEventSessionWith = ((AstCreateOrAlterEventSessionWith)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterEventSession(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionId>())
                {
                    this._eventSessionId = ((AstEventSessionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionAddEvent>())
                {
                    this._createOrAlterEventSessionAddEvent = ((AstCreateOrAlterEventSessionAddEvent)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionDelEvent>())
                {
                    this._createOrAlterEventSessionDelEvent = ((AstCreateOrAlterEventSessionDelEvent)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionAddTarget>())
                {
                    this._createOrAlterEventSessionAddTarget = ((AstCreateOrAlterEventSessionAddTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionDelTarget>())
                {
                    this._createOrAlterEventSessionDelTarget = ((AstCreateOrAlterEventSessionDelTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionWith>())
                {
                    this._createOrAlterEventSessionWith = ((AstCreateOrAlterEventSessionWith)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventSessionId EventSessionId
        {
            get
            {
                return this._eventSessionId;
            }
        }
        
        public virtual AstCreateOrAlterEventSessionAddEvent CreateOrAlterEventSessionAddEvent
        {
            get
            {
                return this._createOrAlterEventSessionAddEvent;
            }
        }
        
        public virtual AstCreateOrAlterEventSessionDelEvent CreateOrAlterEventSessionDelEvent
        {
            get
            {
                return this._createOrAlterEventSessionDelEvent;
            }
        }
        
        public virtual AstCreateOrAlterEventSessionAddTarget CreateOrAlterEventSessionAddTarget
        {
            get
            {
                return this._createOrAlterEventSessionAddTarget;
            }
        }
        
        public virtual AstCreateOrAlterEventSessionDelTarget CreateOrAlterEventSessionDelTarget
        {
            get
            {
                return this._createOrAlterEventSessionDelTarget;
            }
        }
        
        public virtual AstCreateOrAlterEventSessionWith CreateOrAlterEventSessionWith
        {
            get
            {
                return this._createOrAlterEventSessionWith;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSession(this);
        }
    }
    
    /// <summary>
    /// session_arg_track_causality
    /// 	 : TRACK_CAUSALITY  EQUAL  on_off
    /// </summary>
    public partial class AstSessionArgTrackCausality : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstSessionArgTrackCausality(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstSessionArgTrackCausality(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSessionArgTrackCausality(this);
        }
    }
    
    /// <summary>
    /// session_arg_startup_state
    /// 	 : STARTUP_STATE  EQUAL  on_off
    /// </summary>
    public partial class AstSessionArgStartupState : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstSessionArgStartupState(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstSessionArgStartupState(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSessionArgStartupState(this);
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session_add_event
    /// 	 : COMMA?  ADD  EVENT  module_package_event_ref  (LR_BRACKET  (SET  (COMMA?  event_customizable_attribute_id  EQUAL  decimal_string)*)?  (ACTION  LR_BRACKET  (COMMA?  event_module_package_action_ref)+  RR_BRACKET)+  (WHERE  event_session_predicate_expression)?  RR_BRACKET)
    /// </summary>
    public partial class AstCreateOrAlterEventSessionAddEvent : AstRule
    {
        
        private AstModulePackageEventRef _modulePackageEventRef;
        
        public AstCreateOrAlterEventSessionAddEvent(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModulePackageEventRef>())
                {
                    this._modulePackageEventRef = ((AstModulePackageEventRef)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterEventSessionAddEvent(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModulePackageEventRef>())
                {
                    this._modulePackageEventRef = ((AstModulePackageEventRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstModulePackageEventRef ModulePackageEventRef
        {
            get
            {
                return this._modulePackageEventRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSessionAddEvent(this);
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session_del_event
    /// 	 : COMMA?  DROP  EVENT  module_package_event_ref
    /// </summary>
    public partial class AstCreateOrAlterEventSessionDelEvent : AstRule
    {
        
        private AstModulePackageEventRef _modulePackageEventRef;
        
        public AstCreateOrAlterEventSessionDelEvent(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModulePackageEventRef>())
                {
                    this._modulePackageEventRef = ((AstModulePackageEventRef)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterEventSessionDelEvent(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModulePackageEventRef>())
                {
                    this._modulePackageEventRef = ((AstModulePackageEventRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstModulePackageEventRef ModulePackageEventRef
        {
            get
            {
                return this._modulePackageEventRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSessionDelEvent(this);
        }
    }
    
    /// <summary>
    /// alter_external_library
    /// 	 : ALTER  EXTERNAL  LIBRARY  library_id  (AUTHORIZATION  owner_id)?  set_add  file_spec2  WITH  LR_BRACKET  (COMMA?  LANGUAGE  EQUAL  code_language | DATA_SOURCE  EQUAL  external_data_source_id)+  RR_BRACKET
    /// </summary>
    public partial class AstAlterExternalLibrary : AstDdlClause
    {
        
        private AstLibraryId _libraryId;
        
        private AstSetAdd _setAdd;
        
        private AstFileSpec2 _fileSpec2;
        
        public AstAlterExternalLibrary(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryId>())
                {
                    this._libraryId = ((AstLibraryId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSetAdd>())
                {
                    this._setAdd = ((AstSetAdd)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpec2>())
                {
                    this._fileSpec2 = ((AstFileSpec2)(enumerator.Current));
                }
            }
        }
        
        public AstAlterExternalLibrary(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryId>())
                {
                    this._libraryId = ((AstLibraryId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSetAdd>())
                {
                    this._setAdd = ((AstSetAdd)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpec2>())
                {
                    this._fileSpec2 = ((AstFileSpec2)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLibraryId LibraryId
        {
            get
            {
                return this._libraryId;
            }
        }
        
        public virtual AstSetAdd SetAdd
        {
            get
            {
                return this._setAdd;
            }
        }
        
        public virtual AstFileSpec2 FileSpec2
        {
            get
            {
                return this._fileSpec2;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterExternalLibrary(this);
        }
    }
    
    /// <summary>
    /// create_external_library
    /// 	 : CREATE  EXTERNAL  LIBRARY  library_id  (AUTHORIZATION  owner_id)?  FROM  file_spec2  (WITH  LR_BRACKET  (COMMA?  LANGUAGE  EQUAL  code_language | DATA_SOURCE  EQUAL  external_data_source_id)+  RR_BRACKET)?
    /// </summary>
    public partial class AstCreateExternalLibrary : AstDdlClause
    {
        
        private AstLibraryId _libraryId;
        
        private AstFileSpec2 _fileSpec2;
        
        public AstCreateExternalLibrary(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryId>())
                {
                    this._libraryId = ((AstLibraryId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpec2>())
                {
                    this._fileSpec2 = ((AstFileSpec2)(enumerator.Current));
                }
            }
        }
        
        public AstCreateExternalLibrary(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryId>())
                {
                    this._libraryId = ((AstLibraryId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpec2>())
                {
                    this._fileSpec2 = ((AstFileSpec2)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLibraryId LibraryId
        {
            get
            {
                return this._libraryId;
            }
        }
        
        public virtual AstFileSpec2 FileSpec2
        {
            get
            {
                return this._fileSpec2;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateExternalLibrary(this);
        }
    }
    
    /// <summary>
    /// file_spec2
    /// 	 : LR_BRACKET  CONTENT  EQUAL  code_content  (COMMA  PLATFORM  EQUAL  platform)?  RR_BRACKET
    /// </summary>
    public partial class AstFileSpec2 : AstRule
    {
        
        private AstCodeContent _codeContent;
        
        public AstFileSpec2(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCodeContent>())
                {
                    this._codeContent = ((AstCodeContent)(enumerator.Current));
                }
            }
        }
        
        public AstFileSpec2(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCodeContent>())
                {
                    this._codeContent = ((AstCodeContent)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCodeContent CodeContent
        {
            get
            {
                return this._codeContent;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileSpec2(this);
        }
    }
    
    /// <summary>
    /// alter_external_resource_pool
    /// 	 : ALTER  EXTERNAL  RESOURCE  POOL  (pool_id | DEFAULT_DOUBLE_QUOTE)  WITH  external_resource_with
    /// </summary>
    public partial class AstAlterExternalResourcePool : AstDdlClause
    {
        
        private AstExternalResourceWith _externalResourceWith;
        
        public AstAlterExternalResourcePool(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalResourceWith>())
                {
                    this._externalResourceWith = ((AstExternalResourceWith)(enumerator.Current));
                }
            }
        }
        
        public AstAlterExternalResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalResourceWith>())
                {
                    this._externalResourceWith = ((AstExternalResourceWith)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExternalResourceWith ExternalResourceWith
        {
            get
            {
                return this._externalResourceWith;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterExternalResourcePool(this);
        }
    }
    
    /// <summary>
    /// create_external_resource_pool
    /// 	 : CREATE  EXTERNAL  RESOURCE  POOL  pool_id  WITH  external_resource_with
    /// </summary>
    public partial class AstCreateExternalResourcePool : AstDdlClause
    {
        
        private AstPoolId _poolId;
        
        private AstExternalResourceWith _externalResourceWith;
        
        public AstCreateExternalResourcePool(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExternalResourceWith>())
                {
                    this._externalResourceWith = ((AstExternalResourceWith)(enumerator.Current));
                }
            }
        }
        
        public AstCreateExternalResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExternalResourceWith>())
                {
                    this._externalResourceWith = ((AstExternalResourceWith)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolId PoolId
        {
            get
            {
                return this._poolId;
            }
        }
        
        public virtual AstExternalResourceWith ExternalResourceWith
        {
            get
            {
                return this._externalResourceWith;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateExternalResourcePool(this);
        }
    }
    
    /// <summary>
    /// external_resource_with
    /// 	 : LR_BRACKET  max_cpu  (COMMA?  AFFINITY  CPU  EQUAL  (AUTO | (COMMA?  DECIMAL  TO  DECIMAL | COMMA  DECIMAL)+) | NUMANODE  EQUAL  (COMMA?  DECIMAL  TO  DECIMAL | COMMA?  DECIMAL)+)  (COMMA?  max_memory)?  (COMMA?  maw_process)?  RR_BRACKET
    /// </summary>
    public partial class AstExternalResourceWith : AstRule
    {
        
        private AstMaxCpu _maxCpu;
        
        public AstExternalResourceWith(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMaxCpu>())
                {
                    this._maxCpu = ((AstMaxCpu)(enumerator.Current));
                }
            }
        }
        
        public AstExternalResourceWith(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMaxCpu>())
                {
                    this._maxCpu = ((AstMaxCpu)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMaxCpu MaxCpu
        {
            get
            {
                return this._maxCpu;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalResourceWith(this);
        }
    }
    
    /// <summary>
    /// alter_fulltext_catalog
    /// 	 : ALTER  FULLTEXT  CATALOG  catalog_id  (REBUILD  (WITH  ACCENT_SENSITIVITY  EQUAL  on_off)? | REORGANIZE | AS  DEFAULT)
    /// </summary>
    public partial class AstAlterFulltextCatalog : AstDdlClause
    {
        
        private AstCatalogId _catalogId;
        
        public AstAlterFulltextCatalog(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogId>())
                {
                    this._catalogId = ((AstCatalogId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterFulltextCatalog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogId>())
                {
                    this._catalogId = ((AstCatalogId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCatalogId CatalogId
        {
            get
            {
                return this._catalogId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterFulltextCatalog(this);
        }
    }
    
    /// <summary>
    /// create_fulltext_catalog
    /// 	 : CREATE  FULLTEXT  CATALOG  catalog_id  (ON  FILEGROUP  file_group_id)?  (IN  PATH  rootpath = STRING)?  (WITH  ACCENT_SENSITIVITY  EQUAL  on_off)?  (AS  DEFAULT)?  (AUTHORIZATION  owner_id)?
    /// </summary>
    public partial class AstCreateFulltextCatalog : AstDdlClause
    {
        
        private AstCatalogId _catalogId;
        
        public AstCreateFulltextCatalog(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogId>())
                {
                    this._catalogId = ((AstCatalogId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateFulltextCatalog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogId>())
                {
                    this._catalogId = ((AstCatalogId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCatalogId CatalogId
        {
            get
            {
                return this._catalogId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateFulltextCatalog(this);
        }
    }
    
    /// <summary>
    /// alter_fulltext_stoplist
    /// 	 : ALTER  FULLTEXT  STOPLIST  stoplist_id  (ADD  stopword = STRING  LANGUAGE  (STRING | DECIMAL | BINARY) | DROP  (stopword = STRING  LANGUAGE  (STRING | DECIMAL | BINARY) | ALL  (STRING | DECIMAL | BINARY) | ALL))
    /// </summary>
    public partial class AstAlterFulltextStoplist : AstDdlClause
    {
        
        private AstStoplistId _stoplistId;
        
        public AstAlterFulltextStoplist(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterFulltextStoplist(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStoplistId StoplistId
        {
            get
            {
                return this._stoplistId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterFulltextStoplist(this);
        }
    }
    
    /// <summary>
    /// create_fulltext_stoplist
    /// 	 : CREATE  FULLTEXT  STOPLIST  stoplist_id  (FROM  (database_stoplist_ref | SYSTEM  STOPLIST))?  (AUTHORIZATION  owner_id)?
    /// </summary>
    public partial class AstCreateFulltextStoplist : AstDdlClause
    {
        
        private AstStoplistId _stoplistId;
        
        public AstCreateFulltextStoplist(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateFulltextStoplist(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStoplistId StoplistId
        {
            get
            {
                return this._stoplistId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateFulltextStoplist(this);
        }
    }
    
    /// <summary>
    /// alter_login_sql_server
    /// 	 : ALTER  LOGIN  login_id  alter_login_sql_server_infos
    /// </summary>
    public partial class AstAlterLoginSqlServer : AstDdlClause
    {
        
        private AstLoginId _loginId;
        
        private AstAlterLoginSqlServerInfos _alterLoginSqlServerInfos;
        
        public AstAlterLoginSqlServer(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterLoginSqlServerInfos>())
                {
                    this._alterLoginSqlServerInfos = ((AstAlterLoginSqlServerInfos)(enumerator.Current));
                }
            }
        }
        
        public AstAlterLoginSqlServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterLoginSqlServerInfos>())
                {
                    this._alterLoginSqlServerInfos = ((AstAlterLoginSqlServerInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public virtual AstAlterLoginSqlServerInfos AlterLoginSqlServerInfos
        {
            get
            {
                return this._alterLoginSqlServerInfos;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginSqlServer(this);
        }
    }
    
    /// <summary>
    /// create_login_sql_server
    /// 	 : CREATE  LOGIN  login_id  (WITH  create_login_sql_server_settings | FROM  create_login_sql_server_from)
    /// </summary>
    public partial class AstCreateLoginSqlServer : AstDdlClause
    {
        
        private AstLoginId _loginId;
        
        public AstCreateLoginSqlServer(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateLoginSqlServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginSqlServer(this);
        }
    }
    
    /// <summary>
    /// alter_login_azure_sql
    /// 	 : ALTER  LOGIN  login_id  alter_login_azure_sql_infos
    /// </summary>
    public partial class AstAlterLoginAzureSql : AstDdlClause
    {
        
        private AstLoginId _loginId;
        
        private AstAlterLoginAzureSqlInfos _alterLoginAzureSqlInfos;
        
        public AstAlterLoginAzureSql(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterLoginAzureSqlInfos>())
                {
                    this._alterLoginAzureSqlInfos = ((AstAlterLoginAzureSqlInfos)(enumerator.Current));
                }
            }
        }
        
        public AstAlterLoginAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterLoginAzureSqlInfos>())
                {
                    this._alterLoginAzureSqlInfos = ((AstAlterLoginAzureSqlInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public virtual AstAlterLoginAzureSqlInfos AlterLoginAzureSqlInfos
        {
            get
            {
                return this._alterLoginAzureSqlInfos;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginAzureSql(this);
        }
    }
    
    /// <summary>
    /// create_login_azure_sql
    /// 	 : CREATE  LOGIN  login_id  WITH  PASSWORD  EQUAL  STRING  (SID  EQUAL  sid = BINARY)?
    /// </summary>
    public partial class AstCreateLoginAzureSql : AstDdlClause
    {
        
        private AstLoginId _loginId;
        
        public AstCreateLoginAzureSql(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateLoginAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginAzureSql(this);
        }
    }
    
    /// <summary>
    /// alter_login_azure_sql_dw_and_pdw
    /// 	 : ALTER  LOGIN  login_id  (enable_disable? | WITH  (PASSWORD  EQUAL  password = STRING  (OLD_PASSWORD  EQUAL  old_password = STRING  (MUST_CHANGE | UNLOCK)*)? | NAME  EQUAL  new_name = login_id))
    /// </summary>
    public partial class AstAlterLoginAzureSqlDwAndPdw : AstDdlClause
    {
        
        private AstLoginId _loginId;
        
        public AstAlterLoginAzureSqlDwAndPdw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterLoginAzureSqlDwAndPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginAzureSqlDwAndPdw(this);
        }
    }
    
    /// <summary>
    /// create_login_pdw
    /// 	 : CREATE  LOGIN  login_id  (WITH  (PASSWORD  EQUAL  password = STRING  (MUST_CHANGE)?  (CHECK_POLICY  EQUAL  on_off?)?) | FROM  WINDOWS)
    /// </summary>
    public partial class AstCreateLoginPdw : AstDdlClause
    {
        
        private AstLoginId _loginId;
        
        public AstCreateLoginPdw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateLoginPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginPdw(this);
        }
    }
    
    /// <summary>
    /// alter_message_type
    /// 	 : ALTER  MESSAGE  TYPE  message_type_id  VALIDATION  EQUAL  (NONE | EMPTY | WELL_FORMED_XML | VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_id)
    /// </summary>
    public partial class AstAlterMessageType : AstDdlClause
    {
        
        private AstMessageTypeId _messageTypeId;
        
        public AstAlterMessageType(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeId>())
                {
                    this._messageTypeId = ((AstMessageTypeId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterMessageType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeId>())
                {
                    this._messageTypeId = ((AstMessageTypeId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMessageTypeId MessageTypeId
        {
            get
            {
                return this._messageTypeId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterMessageType(this);
        }
    }
    
    /// <summary>
    /// alter_partition_function
    /// 	 : ALTER  PARTITION  FUNCTION  partition_function_id  LR_BRACKET  RR_BRACKET  split_or_merge  RANGE  LR_BRACKET  DECIMAL  RR_BRACKET
    /// </summary>
    public partial class AstAlterPartitionFunction : AstDdlClause
    {
        
        private AstPartitionFunctionId _partitionFunctionId;
        
        private AstSplitOrMerge _splitOrMerge;
        
        public AstAlterPartitionFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSplitOrMerge>())
                {
                    this._splitOrMerge = ((AstSplitOrMerge)(enumerator.Current));
                }
            }
        }
        
        public AstAlterPartitionFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSplitOrMerge>())
                {
                    this._splitOrMerge = ((AstSplitOrMerge)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionFunctionId PartitionFunctionId
        {
            get
            {
                return this._partitionFunctionId;
            }
        }
        
        public virtual AstSplitOrMerge SplitOrMerge
        {
            get
            {
                return this._splitOrMerge;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterPartitionFunction(this);
        }
    }
    
    /// <summary>
    /// alter_partition_scheme
    /// 	 : ALTER  PARTITION  SCHEME  partition_scheme_id  NEXT  USED  (file_group_id)?
    /// </summary>
    public partial class AstAlterPartitionScheme : AstDdlClause
    {
        
        private AstPartitionSchemeId _partitionSchemeId;
        
        public AstAlterPartitionScheme(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeId>())
                {
                    this._partitionSchemeId = ((AstPartitionSchemeId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterPartitionScheme(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeId>())
                {
                    this._partitionSchemeId = ((AstPartitionSchemeId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionSchemeId PartitionSchemeId
        {
            get
            {
                return this._partitionSchemeId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterPartitionScheme(this);
        }
    }
    
    /// <summary>
    /// alter_remote_service_binding
    /// 	 : ALTER  REMOTE  SERVICE  BINDING  binding_id  WITH  (USER  EQUAL  user_id)?  (COMMA  ANONYMOUS  EQUAL  on_off)?
    /// </summary>
    public partial class AstAlterRemoteServiceBinding : AstDdlClause
    {
        
        private AstBindingId _bindingId;
        
        public AstAlterRemoteServiceBinding(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingId>())
                {
                    this._bindingId = ((AstBindingId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterRemoteServiceBinding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingId>())
                {
                    this._bindingId = ((AstBindingId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBindingId BindingId
        {
            get
            {
                return this._bindingId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterRemoteServiceBinding(this);
        }
    }
    
    /// <summary>
    /// create_remote_service_binding
    /// 	 : CREATE  REMOTE  SERVICE  BINDING  binding_id  (AUTHORIZATION  owner_id)?  TO  SERVICE  remote_service_name = STRING  WITH  (USER  EQUAL  user_id)?  (COMMA  ANONYMOUS  EQUAL  on_off)?
    /// </summary>
    public partial class AstCreateRemoteServiceBinding : AstDdlClause
    {
        
        private AstBindingId _bindingId;
        
        public AstCreateRemoteServiceBinding(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingId>())
                {
                    this._bindingId = ((AstBindingId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateRemoteServiceBinding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingId>())
                {
                    this._bindingId = ((AstBindingId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBindingId BindingId
        {
            get
            {
                return this._bindingId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateRemoteServiceBinding(this);
        }
    }
    
    /// <summary>
    /// create_resource_pool
    /// 	 : CREATE  RESOURCE  POOL  pool_id  (WITH  LR_BRACKET  (COMMA?  MIN_CPU_PERCENT  EQUAL  min_cpu_percent = DECIMAL)?  (COMMA?  MAX_CPU_PERCENT  EQUAL  max_cpu_percent = DECIMAL)?  (COMMA?  CAP_CPU_PERCENT  EQUAL  cap_cpu_percent = DECIMAL)?  (COMMA?  AFFINITY  SCHEDULER  EQUAL  (AUTO | LR_BRACKET  decimal_ranges  RR_BRACKET | NUMANODE  EQUAL  LR_BRACKET  decimal_ranges  RR_BRACKET))?  (COMMA?  MIN_MEMORY_PERCENT  EQUAL  min_memory_percent = DECIMAL)?  (COMMA?  MAX_MEMORY_PERCENT  EQUAL  max_memory_percent = DECIMAL)?  (COMMA?  MIN_IOPS_PER_VOLUME  EQUAL  min_tops_percent = DECIMAL)?  (COMMA?  MAX_IOPS_PER_VOLUME  EQUAL  max_tops_percent = DECIMAL)?  RR_BRACKET)?
    /// </summary>
    public partial class AstCreateResourcePool : AstDdlClause
    {
        
        private AstPoolId _poolId;
        
        public AstCreateResourcePool(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolId PoolId
        {
            get
            {
                return this._poolId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateResourcePool(this);
        }
    }
    
    /// <summary>
    /// decimal_range
    /// 	 : dec_start = DECIMAL
    /// 	 | dec_start = DECIMAL  TO  dec_end = DECIMAL
    /// </summary>
    public partial class AstDecimalRange : AstRule
    {
        
        public AstDecimalRange(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
            }
        }
        
        public AstDecimalRange(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecimalRange(this);
        }
    }
    
    /// <summary>
    /// create_db_role
    /// 	 : CREATE  ROLE  role_id  (AUTHORIZATION  owner_id)?
    /// </summary>
    public partial class AstCreateDbRole : AstDdlClause
    {
        
        private AstRoleId _roleId;
        
        public AstCreateDbRole(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateDbRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleId RoleId
        {
            get
            {
                return this._roleId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateDbRole(this);
        }
    }
    
    /// <summary>
    /// create_route
    /// 	 : CREATE  ROUTE  route_id  (AUTHORIZATION  owner_id)?  WITH  (COMMA?  SERVICE_NAME  EQUAL  route_service_name = STRING)?  (COMMA?  BROKER_INSTANCE  EQUAL  broker_instance_identifier = STRING)?  (COMMA?  LIFETIME  EQUAL  lifetime = DECIMAL)?  COMMA?  ADDRESS  EQUAL  address = STRING  (COMMA  MIRROR_ADDRESS  EQUAL  mirror_address = STRING)?
    /// </summary>
    public partial class AstCreateRoute : AstDdlClause
    {
        
        private AstRouteId _routeId;
        
        public AstCreateRoute(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteId>())
                {
                    this._routeId = ((AstRouteId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateRoute(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteId>())
                {
                    this._routeId = ((AstRouteId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRouteId RouteId
        {
            get
            {
                return this._routeId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateRoute(this);
        }
    }
    
    /// <summary>
    /// create_rule
    /// 	 : CREATE  RULE  schema_rule_ref  AS  search_condition
    /// </summary>
    public partial class AstCreateRule : AstDdlClause
    {
        
        private AstSchemaRuleRef _schemaRuleRef;
        
        private AstSearchCondition _searchCondition;
        
        public AstCreateRule(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaRuleRef>())
                {
                    this._schemaRuleRef = ((AstSchemaRuleRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstCreateRule(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaRuleRef>())
                {
                    this._schemaRuleRef = ((AstSchemaRuleRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaRuleRef SchemaRuleRef
        {
            get
            {
                return this._schemaRuleRef;
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateRule(this);
        }
    }
    
    /// <summary>
    /// alter_schema_sql
    /// 	 : ALTER  SCHEMA  schema_id  TRANSFER  ((OBJECT | TYPE | XML  SCHEMA  COLLECTION)  DOUBLE_COLON)?  id_dot_id
    /// </summary>
    public partial class AstAlterSchemaSql : AstDdlClause
    {
        
        private AstSchemaId _schemaId;
        
        private AstIdDotId _idDotId;
        
        public AstAlterSchemaSql(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIdDotId>())
                {
                    this._idDotId = ((AstIdDotId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterSchemaSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIdDotId>())
                {
                    this._idDotId = ((AstIdDotId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaId SchemaId
        {
            get
            {
                return this._schemaId;
            }
        }
        
        public virtual AstIdDotId IdDotId
        {
            get
            {
                return this._idDotId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSchemaSql(this);
        }
    }
    
    /// <summary>
    /// create_schema
    /// 	 : CREATE  SCHEMA  create_schema_name  create_schema_target*
    /// </summary>
    public partial class AstCreateSchema : AstDdlClause
    {
        
        private AstCreateSchemaName _createSchemaName;
        
        private AstCreateSchemaTarget _createSchemaTarget;
        
        public AstCreateSchema(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateSchemaName>())
                {
                    this._createSchemaName = ((AstCreateSchemaName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSchemaTarget>())
                {
                    this._createSchemaTarget = ((AstCreateSchemaTarget)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSchema(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateSchemaName>())
                {
                    this._createSchemaName = ((AstCreateSchemaName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSchemaTarget>())
                {
                    this._createSchemaTarget = ((AstCreateSchemaTarget)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCreateSchemaName CreateSchemaName
        {
            get
            {
                return this._createSchemaName;
            }
        }
        
        public virtual AstCreateSchemaTarget CreateSchemaTarget
        {
            get
            {
                return this._createSchemaTarget;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSchema(this);
        }
    }
    
    /// <summary>
    /// schema_authorization
    /// 	 : AUTHORIZATION  owner_id
    /// </summary>
    public partial class AstSchemaAuthorization : AstRule
    {
        
        private AstOwnerId _ownerId;
        
        public AstSchemaAuthorization(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaAuthorization(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaAuthorization(this);
        }
    }
    
    /// <summary>
    /// create_schema_azure_sql_dw_and_pdw
    /// 	 : CREATE  SCHEMA  schema_id  (AUTHORIZATION  owner_id)?
    /// </summary>
    public partial class AstCreateSchemaAzureSqlDwAndPdw : AstDdlClause
    {
        
        private AstSchemaId _schemaId;
        
        public AstCreateSchemaAzureSqlDwAndPdw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSchemaAzureSqlDwAndPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaId SchemaId
        {
            get
            {
                return this._schemaId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSchemaAzureSqlDwAndPdw(this);
        }
    }
    
    /// <summary>
    /// alter_schema_azure_sql_dw_and_pdw
    /// 	 : ALTER  SCHEMA  schema_id  TRANSFER  (OBJECT  DOUBLE_COLON)?  id_  (DOT  ID)?
    /// </summary>
    public partial class AstAlterSchemaAzureSqlDwAndPdw : AstDdlClause
    {
        
        private AstSchemaId _schemaId;
        
        private AstId _id;
        
        public AstAlterSchemaAzureSqlDwAndPdw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterSchemaAzureSqlDwAndPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaId SchemaId
        {
            get
            {
                return this._schemaId;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSchemaAzureSqlDwAndPdw(this);
        }
    }
    
    /// <summary>
    /// create_search_property_list
    /// 	 : CREATE  SEARCH  PROPERTY  LIST  source_list_id  (FROM  database_source_list_ref)?  (AUTHORIZATION  owner_id)?
    /// </summary>
    public partial class AstCreateSearchPropertyList : AstDdlClause
    {
        
        private AstSourceListId _sourceListId;
        
        public AstCreateSearchPropertyList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSourceListId>())
                {
                    this._sourceListId = ((AstSourceListId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSearchPropertyList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSourceListId>())
                {
                    this._sourceListId = ((AstSourceListId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSourceListId SourceListId
        {
            get
            {
                return this._sourceListId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSearchPropertyList(this);
        }
    }
    
    /// <summary>
    /// create_security_policy
    /// 	 : CREATE  SECURITY  POLICY  schema_security_policy_ref  create_security_policy_adds  (WITH  LR_BRACKET  STATE  EQUAL  on_off  schema_binding?  RR_BRACKET)?  (NOT  FOR  REPLICATION)?
    /// </summary>
    public partial class AstCreateSecurityPolicy : AstDdlClause
    {
        
        private AstSchemaSecurityPolicyRef _schemaSecurityPolicyRef;
        
        private AstCreateSecurityPolicyAdds _createSecurityPolicyAdds;
        
        public AstCreateSecurityPolicy(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSecurityPolicyRef>())
                {
                    this._schemaSecurityPolicyRef = ((AstSchemaSecurityPolicyRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSecurityPolicyAdds>())
                {
                    this._createSecurityPolicyAdds = ((AstCreateSecurityPolicyAdds)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSecurityPolicy(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSecurityPolicyRef>())
                {
                    this._schemaSecurityPolicyRef = ((AstSchemaSecurityPolicyRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSecurityPolicyAdds>())
                {
                    this._createSecurityPolicyAdds = ((AstCreateSecurityPolicyAdds)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSecurityPolicyRef SchemaSecurityPolicyRef
        {
            get
            {
                return this._schemaSecurityPolicyRef;
            }
        }
        
        public virtual AstCreateSecurityPolicyAdds CreateSecurityPolicyAdds
        {
            get
            {
                return this._createSecurityPolicyAdds;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSecurityPolicy(this);
        }
    }
    
    /// <summary>
    /// schema_binding
    /// 	 : SCHEMABINDING  on_off
    /// </summary>
    public partial class AstSchemaBinding : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstSchemaBinding(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaBinding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaBinding(this);
        }
    }
    
    /// <summary>
    /// create_security_policy_add
    /// 	 : ADD  filter_block?  PREDICATE  schema_security_predicate_function_id  LR_BRACKET  column_or_argument_ids  RR_BRACKET  ON  database_schema_table_ref  schema_table_ref_impacts*
    /// </summary>
    public partial class AstCreateSecurityPolicyAdd : AstRule
    {
        
        private AstFilterBlock _filterBlock;
        
        private AstSchemaSecurityPredicateFunctionId _schemaSecurityPredicateFunctionId;
        
        private AstColumnOrArgumentIds _columnOrArgumentIds;
        
        private AstDatabaseSchemaTableRef _databaseSchemaTableRef;
        
        private AstSchemaTableRefImpacts _schemaTableRefImpacts;
        
        public AstCreateSecurityPolicyAdd(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFilterBlock>())
                {
                    this._filterBlock = ((AstFilterBlock)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaSecurityPredicateFunctionId>())
                {
                    this._schemaSecurityPredicateFunctionId = ((AstSchemaSecurityPredicateFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnOrArgumentIds>())
                {
                    this._columnOrArgumentIds = ((AstColumnOrArgumentIds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaTableRefImpacts>())
                {
                    this._schemaTableRefImpacts = ((AstSchemaTableRefImpacts)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSecurityPolicyAdd(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFilterBlock>())
                {
                    this._filterBlock = ((AstFilterBlock)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaSecurityPredicateFunctionId>())
                {
                    this._schemaSecurityPredicateFunctionId = ((AstSchemaSecurityPredicateFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnOrArgumentIds>())
                {
                    this._columnOrArgumentIds = ((AstColumnOrArgumentIds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaTableRefImpacts>())
                {
                    this._schemaTableRefImpacts = ((AstSchemaTableRefImpacts)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFilterBlock FilterBlock
        {
            get
            {
                return this._filterBlock;
            }
        }
        
        public virtual AstSchemaSecurityPredicateFunctionId SchemaSecurityPredicateFunctionId
        {
            get
            {
                return this._schemaSecurityPredicateFunctionId;
            }
        }
        
        public virtual AstColumnOrArgumentIds ColumnOrArgumentIds
        {
            get
            {
                return this._columnOrArgumentIds;
            }
        }
        
        public virtual AstDatabaseSchemaTableRef DatabaseSchemaTableRef
        {
            get
            {
                return this._databaseSchemaTableRef;
            }
        }
        
        public virtual AstSchemaTableRefImpacts SchemaTableRefImpacts
        {
            get
            {
                return this._schemaTableRefImpacts;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSecurityPolicyAdd(this);
        }
    }
    
    /// <summary>
    /// alter_sequence
    /// 	 : ALTER  SEQUENCE  schema_sequence_ref  alter_sequence_restart?  alter_sequence_increment?  alter_sequence_min_value?  alter_sequence_max_value  cycle?  sequence_cache?
    /// </summary>
    public partial class AstAlterSequence : AstDdlClause
    {
        
        private AstSchemaSequenceRef _schemaSequenceRef;
        
        private AstAlterSequenceRestart _alterSequenceRestart;
        
        private AstAlterSequenceIncrement _alterSequenceIncrement;
        
        private AstAlterSequenceMinValue _alterSequenceMinValue;
        
        private AstAlterSequenceMaxValue _alterSequenceMaxValue;
        
        private AstCycle _cycle;
        
        private AstSequenceCache _sequenceCache;
        
        public AstAlterSequence(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSequenceRef>())
                {
                    this._schemaSequenceRef = ((AstSchemaSequenceRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceRestart>())
                {
                    this._alterSequenceRestart = ((AstAlterSequenceRestart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceIncrement>())
                {
                    this._alterSequenceIncrement = ((AstAlterSequenceIncrement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceMinValue>())
                {
                    this._alterSequenceMinValue = ((AstAlterSequenceMinValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceMaxValue>())
                {
                    this._alterSequenceMaxValue = ((AstAlterSequenceMaxValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCycle>())
                {
                    this._cycle = ((AstCycle)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSequenceCache>())
                {
                    this._sequenceCache = ((AstSequenceCache)(enumerator.Current));
                }
            }
        }
        
        public AstAlterSequence(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSequenceRef>())
                {
                    this._schemaSequenceRef = ((AstSchemaSequenceRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceRestart>())
                {
                    this._alterSequenceRestart = ((AstAlterSequenceRestart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceIncrement>())
                {
                    this._alterSequenceIncrement = ((AstAlterSequenceIncrement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceMinValue>())
                {
                    this._alterSequenceMinValue = ((AstAlterSequenceMinValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceMaxValue>())
                {
                    this._alterSequenceMaxValue = ((AstAlterSequenceMaxValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCycle>())
                {
                    this._cycle = ((AstCycle)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSequenceCache>())
                {
                    this._sequenceCache = ((AstSequenceCache)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSequenceRef SchemaSequenceRef
        {
            get
            {
                return this._schemaSequenceRef;
            }
        }
        
        public virtual AstAlterSequenceRestart AlterSequenceRestart
        {
            get
            {
                return this._alterSequenceRestart;
            }
        }
        
        public virtual AstAlterSequenceIncrement AlterSequenceIncrement
        {
            get
            {
                return this._alterSequenceIncrement;
            }
        }
        
        public virtual AstAlterSequenceMinValue AlterSequenceMinValue
        {
            get
            {
                return this._alterSequenceMinValue;
            }
        }
        
        public virtual AstAlterSequenceMaxValue AlterSequenceMaxValue
        {
            get
            {
                return this._alterSequenceMaxValue;
            }
        }
        
        public virtual AstCycle Cycle
        {
            get
            {
                return this._cycle;
            }
        }
        
        public virtual AstSequenceCache SequenceCache
        {
            get
            {
                return this._sequenceCache;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSequence(this);
        }
    }
    
    /// <summary>
    /// create_sequence
    /// 	 : CREATE  SEQUENCE  schema_sequence_ref  (AS  data_type)?  create_sequence_start?  create_sequence_increment?  create_sequence_min_value?  create_sequence_max_value?  cycle?  sequence_cache?
    /// </summary>
    public partial class AstCreateSequence : AstDdlClause
    {
        
        private AstSchemaSequenceRef _schemaSequenceRef;
        
        private AstCreateSequenceStart _createSequenceStart;
        
        private AstCreateSequenceIncrement _createSequenceIncrement;
        
        private AstCreateSequenceMinValue _createSequenceMinValue;
        
        private AstCreateSequenceMaxValue _createSequenceMaxValue;
        
        private AstCycle _cycle;
        
        private AstSequenceCache _sequenceCache;
        
        public AstCreateSequence(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSequenceRef>())
                {
                    this._schemaSequenceRef = ((AstSchemaSequenceRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceStart>())
                {
                    this._createSequenceStart = ((AstCreateSequenceStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceIncrement>())
                {
                    this._createSequenceIncrement = ((AstCreateSequenceIncrement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceMinValue>())
                {
                    this._createSequenceMinValue = ((AstCreateSequenceMinValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceMaxValue>())
                {
                    this._createSequenceMaxValue = ((AstCreateSequenceMaxValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCycle>())
                {
                    this._cycle = ((AstCycle)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSequenceCache>())
                {
                    this._sequenceCache = ((AstSequenceCache)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSequence(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSequenceRef>())
                {
                    this._schemaSequenceRef = ((AstSchemaSequenceRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceStart>())
                {
                    this._createSequenceStart = ((AstCreateSequenceStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceIncrement>())
                {
                    this._createSequenceIncrement = ((AstCreateSequenceIncrement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceMinValue>())
                {
                    this._createSequenceMinValue = ((AstCreateSequenceMinValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceMaxValue>())
                {
                    this._createSequenceMaxValue = ((AstCreateSequenceMaxValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCycle>())
                {
                    this._cycle = ((AstCycle)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSequenceCache>())
                {
                    this._sequenceCache = ((AstSequenceCache)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSequenceRef SchemaSequenceRef
        {
            get
            {
                return this._schemaSequenceRef;
            }
        }
        
        public virtual AstCreateSequenceStart CreateSequenceStart
        {
            get
            {
                return this._createSequenceStart;
            }
        }
        
        public virtual AstCreateSequenceIncrement CreateSequenceIncrement
        {
            get
            {
                return this._createSequenceIncrement;
            }
        }
        
        public virtual AstCreateSequenceMinValue CreateSequenceMinValue
        {
            get
            {
                return this._createSequenceMinValue;
            }
        }
        
        public virtual AstCreateSequenceMaxValue CreateSequenceMaxValue
        {
            get
            {
                return this._createSequenceMaxValue;
            }
        }
        
        public virtual AstCycle Cycle
        {
            get
            {
                return this._cycle;
            }
        }
        
        public virtual AstSequenceCache SequenceCache
        {
            get
            {
                return this._sequenceCache;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSequence(this);
        }
    }
    
    /// <summary>
    /// create_sequence_increment
    /// 	 : INCREMENT  BY  real
    /// </summary>
    public partial class AstCreateSequenceIncrement : AstRule
    {
        
        private AstReal _real;
        
        public AstCreateSequenceIncrement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReal>())
                {
                    this._real = ((AstReal)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSequenceIncrement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReal>())
                {
                    this._real = ((AstReal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstReal Real
        {
            get
            {
                return this._real;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSequenceIncrement(this);
        }
    }
    
    /// <summary>
    /// alter_server_audit
    /// 	 : ALTER  SERVER  AUDIT  audit_id  alter_server_audit_infos
    /// </summary>
    public partial class AstAlterServerAudit : AstDdlClause
    {
        
        private AstAuditId _auditId;
        
        private AstAlterServerAuditInfos _alterServerAuditInfos;
        
        public AstAlterServerAudit(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerAuditInfos>())
                {
                    this._alterServerAuditInfos = ((AstAlterServerAuditInfos)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerAudit(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerAuditInfos>())
                {
                    this._alterServerAuditInfos = ((AstAlterServerAuditInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public virtual AstAlterServerAuditInfos AlterServerAuditInfos
        {
            get
            {
                return this._alterServerAuditInfos;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerAudit(this);
        }
    }
    
    /// <summary>
    /// create_server_audit
    /// 	 : CREATE  SERVER  AUDIT  audit_id  create_server_audit_to_infos
    /// </summary>
    public partial class AstCreateServerAudit : AstDdlClause
    {
        
        private AstAuditId _auditId;
        
        private AstCreateServerAuditToInfos _createServerAuditToInfos;
        
        public AstCreateServerAudit(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateServerAuditToInfos>())
                {
                    this._createServerAuditToInfos = ((AstCreateServerAuditToInfos)(enumerator.Current));
                }
            }
        }
        
        public AstCreateServerAudit(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateServerAuditToInfos>())
                {
                    this._createServerAuditToInfos = ((AstCreateServerAuditToInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public virtual AstCreateServerAuditToInfos CreateServerAuditToInfos
        {
            get
            {
                return this._createServerAuditToInfos;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerAudit(this);
        }
    }
    
    /// <summary>
    /// alter_server_audit_specification
    /// 	 : ALTER  SERVER  AUDIT  SPECIFICATION  audit_id  alter_server_audit_specification_server?  (add_drop  LR_BRACKET  audit_action_group_id  RR_BRACKET)*  (WITH  LR_BRACKET  STATE  EQUAL  on_off  RR_BRACKET)?
    /// </summary>
    public partial class AstAlterServerAuditSpecification : AstDdlClause
    {
        
        private AstAuditId _auditId;
        
        private AstAlterServerAuditSpecificationServer _alterServerAuditSpecificationServer;
        
        public AstAlterServerAuditSpecification(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerAuditSpecificationServer>())
                {
                    this._alterServerAuditSpecificationServer = ((AstAlterServerAuditSpecificationServer)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerAuditSpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerAuditSpecificationServer>())
                {
                    this._alterServerAuditSpecificationServer = ((AstAlterServerAuditSpecificationServer)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public virtual AstAlterServerAuditSpecificationServer AlterServerAuditSpecificationServer
        {
            get
            {
                return this._alterServerAuditSpecificationServer;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerAuditSpecification(this);
        }
    }
    
    /// <summary>
    /// alter_server_audit_specification_server
    /// 	 : FOR  SERVER  AUDIT  audit_id
    /// </summary>
    public partial class AstAlterServerAuditSpecificationServer : AstRule
    {
        
        private AstAuditId _auditId;
        
        public AstAlterServerAuditSpecificationServer(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerAuditSpecificationServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerAuditSpecificationServer(this);
        }
    }
    
    /// <summary>
    /// create_server_audit_specification
    /// 	 : CREATE  SERVER  AUDIT  SPECIFICATION  audit_id  alter_server_audit_specification_server?  (ADD  LR_BRACKET  audit_action_group_id  RR_BRACKET)*  (WITH  LR_BRACKET  STATE  EQUAL  on_off  RR_BRACKET)?
    /// </summary>
    public partial class AstCreateServerAuditSpecification : AstDdlClause
    {
        
        private AstAuditId _auditId;
        
        private AstAlterServerAuditSpecificationServer _alterServerAuditSpecificationServer;
        
        public AstCreateServerAuditSpecification(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerAuditSpecificationServer>())
                {
                    this._alterServerAuditSpecificationServer = ((AstAlterServerAuditSpecificationServer)(enumerator.Current));
                }
            }
        }
        
        public AstCreateServerAuditSpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerAuditSpecificationServer>())
                {
                    this._alterServerAuditSpecificationServer = ((AstAlterServerAuditSpecificationServer)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public virtual AstAlterServerAuditSpecificationServer AlterServerAuditSpecificationServer
        {
            get
            {
                return this._alterServerAuditSpecificationServer;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerAuditSpecification(this);
        }
    }
    
    /// <summary>
    /// alter_server_role
    /// 	 : ALTER  SERVER  ROLE  server_role_id  (add_drop  MEMBER  server_id | alter_server_role_new_name)
    /// </summary>
    public partial class AstAlterServerRole : AstDdlClause
    {
        
        private AstServerRoleId _serverRoleId;
        
        public AstAlterServerRole(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleId ServerRoleId
        {
            get
            {
                return this._serverRoleId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerRole(this);
        }
    }
    
    /// <summary>
    /// alter_server_role_new_name
    /// 	 : WITH  NAME  EQUAL  server_role_id
    /// </summary>
    public partial class AstAlterServerRoleNewName : AstRule
    {
        
        private AstServerRoleId _serverRoleId;
        
        public AstAlterServerRoleNewName(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerRoleNewName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleId ServerRoleId
        {
            get
            {
                return this._serverRoleId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerRoleNewName(this);
        }
    }
    
    /// <summary>
    /// create_server_role
    /// 	 : CREATE  SERVER  ROLE  server_role_id  (AUTHORIZATION  server_id)?
    /// </summary>
    public partial class AstCreateServerRole : AstDdlClause
    {
        
        private AstServerRoleId _serverRoleId;
        
        public AstCreateServerRole(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateServerRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleId ServerRoleId
        {
            get
            {
                return this._serverRoleId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerRole(this);
        }
    }
    
    /// <summary>
    /// alter_server_role_pdw
    /// 	 : ALTER  SERVER  ROLE  server_role_id  add_drop  MEMBER  login_id
    /// </summary>
    public partial class AstAlterServerRolePdw : AstDdlClause
    {
        
        private AstServerRoleId _serverRoleId;
        
        private AstAddDrop _addDrop;
        
        private AstLoginId _loginId;
        
        public AstAlterServerRolePdw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerRolePdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleId ServerRoleId
        {
            get
            {
                return this._serverRoleId;
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerRolePdw(this);
        }
    }
    
    /// <summary>
    /// alter_service
    /// 	 : ALTER  SERVICE  service_id  (ON  QUEUE  schema_queue_ref)?  alter_service_contracts?
    /// </summary>
    public partial class AstAlterService : AstDdlClause
    {
        
        private AstServiceId _serviceId;
        
        private AstAlterServiceContracts _alterServiceContracts;
        
        public AstAlterService(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServiceId>())
                {
                    this._serviceId = ((AstServiceId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServiceContracts>())
                {
                    this._alterServiceContracts = ((AstAlterServiceContracts)(enumerator.Current));
                }
            }
        }
        
        public AstAlterService(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServiceId>())
                {
                    this._serviceId = ((AstServiceId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServiceContracts>())
                {
                    this._alterServiceContracts = ((AstAlterServiceContracts)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServiceId ServiceId
        {
            get
            {
                return this._serviceId;
            }
        }
        
        public virtual AstAlterServiceContracts AlterServiceContracts
        {
            get
            {
                return this._alterServiceContracts;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterService(this);
        }
    }
    
    /// <summary>
    /// alter_service_contract
    /// 	 : add_drop  modified_contract_id
    /// </summary>
    public partial class AstAlterServiceContract : AstRule
    {
        
        private AstAddDrop _addDrop;
        
        private AstModifiedContractId _modifiedContractId;
        
        public AstAlterServiceContract(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstModifiedContractId>())
                {
                    this._modifiedContractId = ((AstModifiedContractId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServiceContract(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstModifiedContractId>())
                {
                    this._modifiedContractId = ((AstModifiedContractId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
        }
        
        public virtual AstModifiedContractId ModifiedContractId
        {
            get
            {
                return this._modifiedContractId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServiceContract(this);
        }
    }
    
    /// <summary>
    /// create_service
    /// 	 : CREATE  SERVICE  service_id  (AUTHORIZATION  owner_id)?  ON  QUEUE  schema_queue_ref  (LR_BRACKET  contracts  RR_BRACKET)?
    /// </summary>
    public partial class AstCreateService : AstDdlClause
    {
        
        private AstServiceId _serviceId;
        
        private AstSchemaQueueRef _schemaQueueRef;
        
        public AstCreateService(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServiceId>())
                {
                    this._serviceId = ((AstServiceId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaQueueRef>())
                {
                    this._schemaQueueRef = ((AstSchemaQueueRef)(enumerator.Current));
                }
            }
        }
        
        public AstCreateService(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServiceId>())
                {
                    this._serviceId = ((AstServiceId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaQueueRef>())
                {
                    this._schemaQueueRef = ((AstSchemaQueueRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServiceId ServiceId
        {
            get
            {
                return this._serviceId;
            }
        }
        
        public virtual AstSchemaQueueRef SchemaQueueRef
        {
            get
            {
                return this._schemaQueueRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateService(this);
        }
    }
    
    /// <summary>
    /// alter_symmetric_key
    /// 	 : ALTER  SYMMETRIC  KEY  symmetric_key_id  (add_drop  ENCRYPTION  BY  (CERTIFICATE  certificate_id | PASSWORD  EQUAL  password = STRING | SYMMETRIC  KEY  newkey = symmetric_key_id | ASYMMETRIC  KEY  asym_key_id))
    /// </summary>
    public partial class AstAlterSymmetricKey : AstDdlClause
    {
        
        private AstSymmetricKeyId _symmetricKeyId;
        
        public AstAlterSymmetricKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyId>())
                {
                    this._symmetricKeyId = ((AstSymmetricKeyId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterSymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyId>())
                {
                    this._symmetricKeyId = ((AstSymmetricKeyId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSymmetricKeyId SymmetricKeyId
        {
            get
            {
                return this._symmetricKeyId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSymmetricKey(this);
        }
    }
    
    /// <summary>
    /// create_synonym
    /// 	 : CREATE  SYNONYM  schema_synonym_ref  FOR  server_database_schema_object_ref
    /// </summary>
    public partial class AstCreateSynonym : AstDdlClause
    {
        
        private AstSchemaSynonymRef _schemaSynonymRef;
        
        private AstServerDatabaseSchemaObjectRef _serverDatabaseSchemaObjectRef;
        
        public AstCreateSynonym(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSynonymRef>())
                {
                    this._schemaSynonymRef = ((AstSchemaSynonymRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerDatabaseSchemaObjectRef>())
                {
                    this._serverDatabaseSchemaObjectRef = ((AstServerDatabaseSchemaObjectRef)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSynonym(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSynonymRef>())
                {
                    this._schemaSynonymRef = ((AstSchemaSynonymRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerDatabaseSchemaObjectRef>())
                {
                    this._serverDatabaseSchemaObjectRef = ((AstServerDatabaseSchemaObjectRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSynonymRef SchemaSynonymRef
        {
            get
            {
                return this._schemaSynonymRef;
            }
        }
        
        public virtual AstServerDatabaseSchemaObjectRef ServerDatabaseSchemaObjectRef
        {
            get
            {
                return this._serverDatabaseSchemaObjectRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSynonym(this);
        }
    }
    
    /// <summary>
    /// alter_user
    /// 	 : ALTER  USER  user_id  WITH  alter_user_item+
    /// </summary>
    public partial class AstAlterUser : AstDdlClause
    {
        
        private AstUserId _userId;
        
        private AstAlterUserItem _alterUserItem;
        
        public AstAlterUser(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterUserItem>())
                {
                    this._alterUserItem = ((AstAlterUserItem)(enumerator.Current));
                }
            }
        }
        
        public AstAlterUser(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterUserItem>())
                {
                    this._alterUserItem = ((AstAlterUserItem)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUserId UserId
        {
            get
            {
                return this._userId;
            }
        }
        
        public virtual AstAlterUserItem AlterUserItem
        {
            get
            {
                return this._alterUserItem;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterUser(this);
        }
    }
    
    /// <summary>
    /// alter_user_azure_sql
    /// 	 : ALTER  USER  user_id  WITH  alter_user_azure_sql_infos
    /// </summary>
    public partial class AstAlterUserAzureSql : AstDdlClause
    {
        
        private AstUserId _userId;
        
        private AstAlterUserAzureSqlInfos _alterUserAzureSqlInfos;
        
        public AstAlterUserAzureSql(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterUserAzureSqlInfos>())
                {
                    this._alterUserAzureSqlInfos = ((AstAlterUserAzureSqlInfos)(enumerator.Current));
                }
            }
        }
        
        public AstAlterUserAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterUserAzureSqlInfos>())
                {
                    this._alterUserAzureSqlInfos = ((AstAlterUserAzureSqlInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUserId UserId
        {
            get
            {
                return this._userId;
            }
        }
        
        public virtual AstAlterUserAzureSqlInfos AlterUserAzureSqlInfos
        {
            get
            {
                return this._alterUserAzureSqlInfos;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterUserAzureSql(this);
        }
    }
    
    /// <summary>
    /// create_workload_group
    /// 	 : CREATE  WORKLOAD  GROUP  workload_group_group_id  (WITH  LR_BRACKET  (IMPORTANCE  EQUAL  (LOW | MEDIUM | HIGH) | COMMA?  REQUEST_MAX_MEMORY_GRANT_PERCENT  EQUAL  request_max_memory_grant = DECIMAL | COMMA?  REQUEST_MAX_CPU_TIME_SEC  EQUAL  request_max_cpu_time_sec = DECIMAL | REQUEST_MEMORY_GRANT_TIMEOUT_SEC  EQUAL  request_memory_grant_timeout_sec = DECIMAL | MAX_DOP  EQUAL  max_dop = DECIMAL | GROUP_MAX_REQUESTS  EQUAL  group_max_requests = DECIMAL)+  RR_BRACKET)?  (USING  (workload_group_pool_id | DEFAULT_DOUBLE_QUOTE)?  (COMMA?  EXTERNAL  external_pool_id | DEFAULT_DOUBLE_QUOTE)?)?
    /// </summary>
    public partial class AstCreateWorkloadGroup : AstDdlClause
    {
        
        private AstWorkloadGroupGroupId _workloadGroupGroupId;
        
        public AstCreateWorkloadGroup(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWorkloadGroupGroupId>())
                {
                    this._workloadGroupGroupId = ((AstWorkloadGroupGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateWorkloadGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWorkloadGroupGroupId>())
                {
                    this._workloadGroupGroupId = ((AstWorkloadGroupGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWorkloadGroupGroupId WorkloadGroupGroupId
        {
            get
            {
                return this._workloadGroupGroupId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateWorkloadGroup(this);
        }
    }
    
    /// <summary>
    /// create_xml_schema_collection
    /// 	 : CREATE  XML  SCHEMA  COLLECTION  schema_sql_identifier_id  AS  string_id2
    /// </summary>
    public partial class AstCreateXmlSchemaCollection : AstDdlClause
    {
        
        private AstSchemaSqlIdentifierId _schemaSqlIdentifierId;
        
        private AstStringId2 _stringId2;
        
        public AstCreateXmlSchemaCollection(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSqlIdentifierId>())
                {
                    this._schemaSqlIdentifierId = ((AstSchemaSqlIdentifierId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringId2>())
                {
                    this._stringId2 = ((AstStringId2)(enumerator.Current));
                }
            }
        }
        
        public AstCreateXmlSchemaCollection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSqlIdentifierId>())
                {
                    this._schemaSqlIdentifierId = ((AstSchemaSqlIdentifierId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringId2>())
                {
                    this._stringId2 = ((AstStringId2)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSqlIdentifierId SchemaSqlIdentifierId
        {
            get
            {
                return this._schemaSqlIdentifierId;
            }
        }
        
        public virtual AstStringId2 StringId2
        {
            get
            {
                return this._stringId2;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateXmlSchemaCollection(this);
        }
    }
    
    /// <summary>
    /// create_partition_function
    /// 	 : CREATE  PARTITION  FUNCTION  partition_function_id  LR_BRACKET  input_parameter_type = data_type  RR_BRACKET  AS  RANGE  (LEFT | RIGHT)?  FOR  VALUES  LR_BRACKET  boundary_values = expression_list  RR_BRACKET
    /// </summary>
    public partial class AstCreatePartitionFunction : AstDdlClause
    {
        
        private AstPartitionFunctionId _partitionFunctionId;
        
        public AstCreatePartitionFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
            }
        }
        
        public AstCreatePartitionFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionFunctionId PartitionFunctionId
        {
            get
            {
                return this._partitionFunctionId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreatePartitionFunction(this);
        }
    }
    
    /// <summary>
    /// create_partition_scheme
    /// 	 : CREATE  PARTITION  SCHEME  partition_scheme_id  AS  PARTITION  partition_function_id  ALL?  TO  LR_BRACKET  file_group_ids  RR_BRACKET
    /// </summary>
    public partial class AstCreatePartitionScheme : AstDdlClause
    {
        
        private AstPartitionSchemeId _partitionSchemeId;
        
        private AstPartitionFunctionId _partitionFunctionId;
        
        private AstFileGroupIds _fileGroupIds;
        
        public AstCreatePartitionScheme(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeId>())
                {
                    this._partitionSchemeId = ((AstPartitionSchemeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupIds>())
                {
                    this._fileGroupIds = ((AstFileGroupIds)(enumerator.Current));
                }
            }
        }
        
        public AstCreatePartitionScheme(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeId>())
                {
                    this._partitionSchemeId = ((AstPartitionSchemeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupIds>())
                {
                    this._fileGroupIds = ((AstFileGroupIds)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionSchemeId PartitionSchemeId
        {
            get
            {
                return this._partitionSchemeId;
            }
        }
        
        public virtual AstPartitionFunctionId PartitionFunctionId
        {
            get
            {
                return this._partitionFunctionId;
            }
        }
        
        public virtual AstFileGroupIds FileGroupIds
        {
            get
            {
                return this._fileGroupIds;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreatePartitionScheme(this);
        }
    }
    
    /// <summary>
    /// create_queue
    /// 	 : CREATE  QUEUE  (complete_table_ref | queue_id)  queue_settings?  (ON  file_group_id | DEFAULT)?
    /// </summary>
    public partial class AstCreateQueue : AstAnotherStatement
    {
        
        private AstQueueSettings _queueSettings;
        
        public AstCreateQueue(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueueSettings>())
                {
                    this._queueSettings = ((AstQueueSettings)(enumerator.Current));
                }
            }
        }
        
        public AstCreateQueue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueueSettings>())
                {
                    this._queueSettings = ((AstQueueSettings)(enumerator.Current));
                }
            }
        }
        
        public virtual AstQueueSettings QueueSettings
        {
            get
            {
                return this._queueSettings;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateQueue(this);
        }
    }
    
    /// <summary>
    /// create_contract
    /// 	 : CREATE  CONTRACT  contract_name_expression  (AUTHORIZATION  owner_id)?  LR_BRACKET  ((message_type_id | DEFAULT)  SENT  BY  (INITIATOR | TARGET | ANY)  COMMA?)+  RR_BRACKET
    /// </summary>
    public partial class AstCreateContract : AstAnotherStatement
    {
        
        private AstContractNameExpression _contractNameExpression;
        
        public AstCreateContract(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContractNameExpression>())
                {
                    this._contractNameExpression = ((AstContractNameExpression)(enumerator.Current));
                }
            }
        }
        
        public AstCreateContract(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContractNameExpression>())
                {
                    this._contractNameExpression = ((AstContractNameExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstContractNameExpression ContractNameExpression
        {
            get
            {
                return this._contractNameExpression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateContract(this);
        }
    }
    
    /// <summary>
    /// message_statement
    /// 	 : CREATE  MESSAGE  TYPE  message_type_id  (AUTHORIZATION  owner_id)?  (VALIDATION  EQUAL  (NONE | EMPTY | WELL_FORMED_XML | VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_id))
    /// </summary>
    public partial class AstMessageStatement : AstAnotherStatement
    {
        
        private AstMessageTypeId _messageTypeId;
        
        public AstMessageStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeId>())
                {
                    this._messageTypeId = ((AstMessageTypeId)(enumerator.Current));
                }
            }
        }
        
        public AstMessageStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeId>())
                {
                    this._messageTypeId = ((AstMessageTypeId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMessageTypeId MessageTypeId
        {
            get
            {
                return this._messageTypeId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMessageStatement(this);
        }
    }
    
    /// <summary>
    /// merge_statement
    /// 	 : with_expression?  MERGE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  INTO?  ddl_object  with_table_hints?  as_table_alias?  USING  table_sources  ON  search_condition  when_matches+  output_clause?  option_clause?  SEMI
    /// </summary>
    public partial class AstMergeStatement : AstDmlClause
    {
        
        private AstWithExpression _withExpression;
        
        private AstDdlObject _ddlObject;
        
        private AstWithTableHints _withTableHints;
        
        private AstAsTableAlias _asTableAlias;
        
        private AstTableSources _tableSources;
        
        private AstSearchCondition _searchCondition;
        
        private AstWhenMatches _whenMatches;
        
        private AstOutputClause _outputClause;
        
        private AstOptionClause _optionClause;
        
        public AstMergeStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDdlObject>())
                {
                    this._ddlObject = ((AstDdlObject)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._tableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhenMatches>())
                {
                    this._whenMatches = ((AstWhenMatches)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public AstMergeStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDdlObject>())
                {
                    this._ddlObject = ((AstDdlObject)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._tableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhenMatches>())
                {
                    this._whenMatches = ((AstWhenMatches)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstDdlObject DdlObject
        {
            get
            {
                return this._ddlObject;
            }
        }
        
        public virtual AstWithTableHints WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public virtual AstTableSources TableSources
        {
            get
            {
                return this._tableSources;
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public virtual AstWhenMatches WhenMatches
        {
            get
            {
                return this._whenMatches;
            }
        }
        
        public virtual AstOutputClause OutputClause
        {
            get
            {
                return this._outputClause;
            }
        }
        
        public virtual AstOptionClause OptionClause
        {
            get
            {
                return this._optionClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMergeStatement(this);
        }
    }
    
    /// <summary>
    /// delete_statement
    /// 	 : with_expression?  DELETE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT? | TOP  DECIMAL)?  FROM?  delete_statement_from  with_table_hints?  output_clause?  (FROM  table_sources)?  (WHERE  (search_condition | CURRENT  OF  (GLOBAL?  cursor_name | cursor_var = LOCAL_ID)))?  for_clause?  option_clause?  SEMI?
    /// </summary>
    public partial class AstDeleteStatement : AstDmlClause
    {
        
        private AstWithExpression _withExpression;
        
        private AstDeleteStatementFrom _deleteStatementFrom;
        
        private AstWithTableHints _withTableHints;
        
        private AstOutputClause _outputClause;
        
        private AstForClause _forClause;
        
        private AstOptionClause _optionClause;
        
        public AstDeleteStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDeleteStatementFrom>())
                {
                    this._deleteStatementFrom = ((AstDeleteStatementFrom)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public AstDeleteStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDeleteStatementFrom>())
                {
                    this._deleteStatementFrom = ((AstDeleteStatementFrom)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstDeleteStatementFrom DeleteStatementFrom
        {
            get
            {
                return this._deleteStatementFrom;
            }
        }
        
        public virtual AstWithTableHints WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
        }
        
        public virtual AstOutputClause OutputClause
        {
            get
            {
                return this._outputClause;
            }
        }
        
        public virtual AstForClause ForClause
        {
            get
            {
                return this._forClause;
            }
        }
        
        public virtual AstOptionClause OptionClause
        {
            get
            {
                return this._optionClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeleteStatement(this);
        }
    }
    
    /// <summary>
    /// insert_statement
    /// 	 : with_expression?  INSERT  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  INTO?  (ddl_object | rowset_function_limited)  with_table_hints?  (LR_BRACKET  insert_column_name_list  RR_BRACKET)?  output_clause?  insert_statement_value  for_clause?  option_clause?  SEMI?
    /// </summary>
    public partial class AstInsertStatement : AstDmlClause
    {
        
        private AstWithExpression _withExpression;
        
        private AstWithTableHints _withTableHints;
        
        private AstOutputClause _outputClause;
        
        private AstInsertStatementValue _insertStatementValue;
        
        private AstForClause _forClause;
        
        private AstOptionClause _optionClause;
        
        public AstInsertStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstInsertStatementValue>())
                {
                    this._insertStatementValue = ((AstInsertStatementValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public AstInsertStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstInsertStatementValue>())
                {
                    this._insertStatementValue = ((AstInsertStatementValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstWithTableHints WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
        }
        
        public virtual AstOutputClause OutputClause
        {
            get
            {
                return this._outputClause;
            }
        }
        
        public virtual AstInsertStatementValue InsertStatementValue
        {
            get
            {
                return this._insertStatementValue;
            }
        }
        
        public virtual AstForClause ForClause
        {
            get
            {
                return this._forClause;
            }
        }
        
        public virtual AstOptionClause OptionClause
        {
            get
            {
                return this._optionClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitInsertStatement(this);
        }
    }
    
    /// <summary>
    /// receive_statement
    /// 	 : LR_BRACKET?  RECEIVE  (ALL | DISTINCT | top_clause | STAR)  (LOCAL_ID  EQUAL  expression  COMMA?)*  FROM  complete_table_ref  (INTO  table_id  (WHERE  where = search_condition))?  RR_BRACKET?
    /// </summary>
    public partial class AstReceiveStatement : AstRule
    {
        
        private AstCompleteTableRef _completeTableRef;
        
        public AstReceiveStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCompleteTableRef>())
                {
                    this._completeTableRef = ((AstCompleteTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstReceiveStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCompleteTableRef>())
                {
                    this._completeTableRef = ((AstCompleteTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCompleteTableRef CompleteTableRef
        {
            get
            {
                return this._completeTableRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReceiveStatement(this);
        }
    }
    
    /// <summary>
    /// select_statement_standalone
    /// 	 : with_expression?  select_statement
    /// </summary>
    public partial class AstSelectStatementStandalone : AstDmlClause
    {
        
        private AstWithExpression _withExpression;
        
        private AstSelectStatement _selectStatement;
        
        public AstSelectStatementStandalone(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatement>())
                {
                    this._selectStatement = ((AstSelectStatement)(enumerator.Current));
                }
            }
        }
        
        public AstSelectStatementStandalone(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatement>())
                {
                    this._selectStatement = ((AstSelectStatement)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstSelectStatement SelectStatement
        {
            get
            {
                return this._selectStatement;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectStatementStandalone(this);
        }
    }
    
    /// <summary>
    /// select_statement
    /// 	 : query_expression  select_order_by_clause?  for_clause?  option_clause?  SEMI?
    /// </summary>
    public partial class AstSelectStatement : AstRule
    {
        
        private AstQueryExpression _queryExpression;
        
        private AstSelectOrderByClause _selectOrderByClause;
        
        private AstForClause _forClause;
        
        private AstOptionClause _optionClause;
        
        public AstSelectStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueryExpression>())
                {
                    this._queryExpression = ((AstQueryExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectOrderByClause>())
                {
                    this._selectOrderByClause = ((AstSelectOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public AstSelectStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueryExpression>())
                {
                    this._queryExpression = ((AstQueryExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectOrderByClause>())
                {
                    this._selectOrderByClause = ((AstSelectOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstQueryExpression QueryExpression
        {
            get
            {
                return this._queryExpression;
            }
        }
        
        public virtual AstSelectOrderByClause SelectOrderByClause
        {
            get
            {
                return this._selectOrderByClause;
            }
        }
        
        public virtual AstForClause ForClause
        {
            get
            {
                return this._forClause;
            }
        }
        
        public virtual AstOptionClause OptionClause
        {
            get
            {
                return this._optionClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectStatement(this);
        }
    }
    
    /// <summary>
    /// update_statement
    /// 	 : with_expression?  UPDATE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  (ddl_object | rowset_function_limited)  with_table_hints?  SET  update_elems  output_clause?  (FROM  table_sources)?  (WHERE  (search_condition | CURRENT  OF  (GLOBAL?  cursor_name | cursor_var = LOCAL_ID)))?  for_clause?  option_clause?  SEMI?
    /// </summary>
    public partial class AstUpdateStatement : AstDmlClause
    {
        
        private AstWithExpression _withExpression;
        
        private AstWithTableHints _withTableHints;
        
        private AstUpdateElems _updateElems;
        
        private AstOutputClause _outputClause;
        
        private AstForClause _forClause;
        
        private AstOptionClause _optionClause;
        
        public AstUpdateStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateElems>())
                {
                    this._updateElems = ((AstUpdateElems)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public AstUpdateStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateElems>())
                {
                    this._updateElems = ((AstUpdateElems)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstWithTableHints WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
        }
        
        public virtual AstUpdateElems UpdateElems
        {
            get
            {
                return this._updateElems;
            }
        }
        
        public virtual AstOutputClause OutputClause
        {
            get
            {
                return this._outputClause;
            }
        }
        
        public virtual AstForClause ForClause
        {
            get
            {
                return this._forClause;
            }
        }
        
        public virtual AstOptionClause OptionClause
        {
            get
            {
                return this._optionClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateStatement(this);
        }
    }
    
    /// <summary>
    /// output_clause
    /// 	 : OUTPUT  output_dml_list_elems  (INTO  (LOCAL_ID | full_table_ref)  (LR_BRACKET  column_name_list  RR_BRACKET)?)?
    /// </summary>
    public partial class AstOutputClause : AstRule
    {
        
        private AstOutputDmlListElems _outputDmlListElems;
        
        public AstOutputClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOutputDmlListElems>())
                {
                    this._outputDmlListElems = ((AstOutputDmlListElems)(enumerator.Current));
                }
            }
        }
        
        public AstOutputClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOutputDmlListElems>())
                {
                    this._outputDmlListElems = ((AstOutputDmlListElems)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOutputDmlListElems OutputDmlListElems
        {
            get
            {
                return this._outputDmlListElems;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOutputClause(this);
        }
    }
    
    /// <summary>
    /// create_database
    /// 	 : CREATE  DATABASE  database_id  database_containment?  database_on_primary?  database_on_log?  database_collate?  database_create_with?
    /// </summary>
    public partial class AstCreateDatabase : AstDdlClause
    {
        
        private AstDatabaseId _databaseId;
        
        private AstDatabaseContainment _databaseContainment;
        
        private AstDatabaseOnPrimary _databaseOnPrimary;
        
        private AstDatabaseOnLog _databaseOnLog;
        
        private AstDatabaseCollate _databaseCollate;
        
        private AstDatabaseCreateWith _databaseCreateWith;
        
        public AstCreateDatabase(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseContainment>())
                {
                    this._databaseContainment = ((AstDatabaseContainment)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseOnPrimary>())
                {
                    this._databaseOnPrimary = ((AstDatabaseOnPrimary)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseOnLog>())
                {
                    this._databaseOnLog = ((AstDatabaseOnLog)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseCollate>())
                {
                    this._databaseCollate = ((AstDatabaseCollate)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseCreateWith>())
                {
                    this._databaseCreateWith = ((AstDatabaseCreateWith)(enumerator.Current));
                }
            }
        }
        
        public AstCreateDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseContainment>())
                {
                    this._databaseContainment = ((AstDatabaseContainment)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseOnPrimary>())
                {
                    this._databaseOnPrimary = ((AstDatabaseOnPrimary)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseOnLog>())
                {
                    this._databaseOnLog = ((AstDatabaseOnLog)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseCollate>())
                {
                    this._databaseCollate = ((AstDatabaseCollate)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseCreateWith>())
                {
                    this._databaseCreateWith = ((AstDatabaseCreateWith)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstDatabaseContainment DatabaseContainment
        {
            get
            {
                return this._databaseContainment;
            }
        }
        
        public virtual AstDatabaseOnPrimary DatabaseOnPrimary
        {
            get
            {
                return this._databaseOnPrimary;
            }
        }
        
        public virtual AstDatabaseOnLog DatabaseOnLog
        {
            get
            {
                return this._databaseOnLog;
            }
        }
        
        public virtual AstDatabaseCollate DatabaseCollate
        {
            get
            {
                return this._databaseCollate;
            }
        }
        
        public virtual AstDatabaseCreateWith DatabaseCreateWith
        {
            get
            {
                return this._databaseCreateWith;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateDatabase(this);
        }
    }
    
    /// <summary>
    /// database_containment
    /// 	 : CONTAINMENT  EQUAL  none_partial
    /// </summary>
    public partial class AstDatabaseContainment : AstRule
    {
        
        private AstNonePartial _nonePartial;
        
        public AstDatabaseContainment(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNonePartial>())
                {
                    this._nonePartial = ((AstNonePartial)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseContainment(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNonePartial>())
                {
                    this._nonePartial = ((AstNonePartial)(enumerator.Current));
                }
            }
        }
        
        public virtual AstNonePartial NonePartial
        {
            get
            {
                return this._nonePartial;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseContainment(this);
        }
    }
    
    /// <summary>
    /// database_on_primary
    /// 	 : ON  PRIMARY?  database_file_spec_list
    /// </summary>
    public partial class AstDatabaseOnPrimary : AstRule
    {
        
        private AstDatabaseFileSpecList _databaseFileSpecList;
        
        public AstDatabaseOnPrimary(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseFileSpecList>())
                {
                    this._databaseFileSpecList = ((AstDatabaseFileSpecList)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseOnPrimary(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseFileSpecList>())
                {
                    this._databaseFileSpecList = ((AstDatabaseFileSpecList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseFileSpecList DatabaseFileSpecList
        {
            get
            {
                return this._databaseFileSpecList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseOnPrimary(this);
        }
    }
    
    /// <summary>
    /// database_on_log
    /// 	 : ON  PRIMARY?  database_file_spec_list
    /// </summary>
    public partial class AstDatabaseOnLog : AstRule
    {
        
        private AstDatabaseFileSpecList _databaseFileSpecList;
        
        public AstDatabaseOnLog(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseFileSpecList>())
                {
                    this._databaseFileSpecList = ((AstDatabaseFileSpecList)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseOnLog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseFileSpecList>())
                {
                    this._databaseFileSpecList = ((AstDatabaseFileSpecList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseFileSpecList DatabaseFileSpecList
        {
            get
            {
                return this._databaseFileSpecList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseOnLog(this);
        }
    }
    
    /// <summary>
    /// database_collate
    /// 	 : COLLATE  collation_id
    /// </summary>
    public partial class AstDatabaseCollate : AstRule
    {
        
        private AstCollationId _collationId;
        
        public AstDatabaseCollate(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCollationId>())
                {
                    this._collationId = ((AstCollationId)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseCollate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCollationId>())
                {
                    this._collationId = ((AstCollationId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCollationId CollationId
        {
            get
            {
                return this._collationId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseCollate(this);
        }
    }
    
    /// <summary>
    /// database_create_with
    /// 	 : WITH  create_database_option_list
    /// </summary>
    public partial class AstDatabaseCreateWith : AstRule
    {
        
        private AstCreateDatabaseOptionList _createDatabaseOptionList;
        
        public AstDatabaseCreateWith(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateDatabaseOptionList>())
                {
                    this._createDatabaseOptionList = ((AstCreateDatabaseOptionList)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseCreateWith(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateDatabaseOptionList>())
                {
                    this._createDatabaseOptionList = ((AstCreateDatabaseOptionList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCreateDatabaseOptionList CreateDatabaseOptionList
        {
            get
            {
                return this._createDatabaseOptionList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseCreateWith(this);
        }
    }
    
    /// <summary>
    /// create_index
    /// 	 : CREATE  UNIQUE?  clustered?  INDEX  index_id  ON  full_table_ref  LR_BRACKET  column_name_list_with_order  RR_BRACKET  (INCLUDE  LR_BRACKET  column_name_list  RR_BRACKET)?  (WHERE  search_condition)?  (create_index_options)?  (ON  file_group_id)?  SEMI?
    /// </summary>
    public partial class AstCreateIndex : AstDdlClause
    {
        
        private AstClustered _clustered;
        
        private AstIndexId _indexId;
        
        private AstFullTableRef _fullTableRef;
        
        private AstColumnNameListWithOrder _columnNameListWithOrder;
        
        public AstCreateIndex(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClustered>())
                {
                    this._clustered = ((AstClustered)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this._columnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
            }
        }
        
        public AstCreateIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClustered>())
                {
                    this._clustered = ((AstClustered)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this._columnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
            }
        }
        
        public virtual AstClustered Clustered
        {
            get
            {
                return this._clustered;
            }
        }
        
        public virtual AstIndexId IndexId
        {
            get
            {
                return this._indexId;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstColumnNameListWithOrder ColumnNameListWithOrder
        {
            get
            {
                return this._columnNameListWithOrder;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateIndex(this);
        }
    }
    
    /// <summary>
    /// alter_index
    /// 	 : ALTER  INDEX  (id_ | ALL)  ON  full_table_ref  (DISABLE | PAUSE | ABORT | RESUME  resumable_index_options? | reorganize_partition | set_index_options | rebuild_partition)
    /// </summary>
    public partial class AstAlterIndex : AstDdlClause
    {
        
        private AstFullTableRef _fullTableRef;
        
        public AstAlterIndex(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstAlterIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterIndex(this);
        }
    }
    
    /// <summary>
    /// reorganize_partition
    /// 	 : REORGANIZE  (PARTITION  EQUAL  DECIMAL)?  reorganize_options?
    /// </summary>
    public partial class AstReorganizePartition : AstRule
    {
        
        private AstReorganizeOptions _reorganizeOptions;
        
        public AstReorganizePartition(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReorganizeOptions>())
                {
                    this._reorganizeOptions = ((AstReorganizeOptions)(enumerator.Current));
                }
            }
        }
        
        public AstReorganizePartition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReorganizeOptions>())
                {
                    this._reorganizeOptions = ((AstReorganizeOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstReorganizeOptions ReorganizeOptions
        {
            get
            {
                return this._reorganizeOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReorganizePartition(this);
        }
    }
    
    /// <summary>
    /// create_columnstore_index
    /// 	 : CREATE  CLUSTERED  COLUMNSTORE  INDEX  id_  ON  full_table_ref  create_columnstore_index_options?  (ON  table_id)?  SEMI?
    /// </summary>
    public partial class AstCreateColumnstoreIndex : AstDdlClause
    {
        
        private AstId _id;
        
        private AstFullTableRef _fullTableRef;
        
        private AstCreateColumnstoreIndexOptions _createColumnstoreIndexOptions;
        
        public AstCreateColumnstoreIndex(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions>())
                {
                    this._createColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateColumnstoreIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions>())
                {
                    this._createColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstCreateColumnstoreIndexOptions CreateColumnstoreIndexOptions
        {
            get
            {
                return this._createColumnstoreIndexOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnstoreIndex(this);
        }
    }
    
    /// <summary>
    /// create_nonclustered_columnstore_index
    /// 	 : CREATE  NONCLUSTERED?  COLUMNSTORE  INDEX  id_  ON  full_table_ref  LR_BRACKET  column_name_list_with_order  RR_BRACKET  (WHERE  search_condition)?  create_columnstore_index_options?  (ON  group_id)?  SEMI?
    /// </summary>
    public partial class AstCreateNonclusteredColumnstoreIndex : AstDdlClause
    {
        
        private AstId _id;
        
        private AstFullTableRef _fullTableRef;
        
        private AstColumnNameListWithOrder _columnNameListWithOrder;
        
        private AstCreateColumnstoreIndexOptions _createColumnstoreIndexOptions;
        
        public AstCreateNonclusteredColumnstoreIndex(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this._columnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions>())
                {
                    this._createColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateNonclusteredColumnstoreIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this._columnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions>())
                {
                    this._createColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstColumnNameListWithOrder ColumnNameListWithOrder
        {
            get
            {
                return this._columnNameListWithOrder;
            }
        }
        
        public virtual AstCreateColumnstoreIndexOptions CreateColumnstoreIndexOptions
        {
            get
            {
                return this._createColumnstoreIndexOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateNonclusteredColumnstoreIndex(this);
        }
    }
    
    /// <summary>
    /// create_xml_index
    /// 	 : CREATE  PRIMARY?  XML  INDEX  index_id  ON  full_table_ref  LR_BRACKET  column_id  RR_BRACKET  (USING  XML  INDEX  parent_index = index_id  (FOR  (VALUE | PATH | PROPERTY)?)?)?  xml_index_options?  SEMI?
    /// </summary>
    public partial class AstCreateXmlIndex : AstDdlClause
    {
        
        private AstIndexId _indexId;
        
        private AstFullTableRef _fullTableRef;
        
        private AstColumnId _columnId;
        
        private AstXmlIndexOptions _xmlIndexOptions;
        
        public AstCreateXmlIndex(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstXmlIndexOptions>())
                {
                    this._xmlIndexOptions = ((AstXmlIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateXmlIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstXmlIndexOptions>())
                {
                    this._xmlIndexOptions = ((AstXmlIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexId IndexId
        {
            get
            {
                return this._indexId;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstColumnId ColumnId
        {
            get
            {
                return this._columnId;
            }
        }
        
        public virtual AstXmlIndexOptions XmlIndexOptions
        {
            get
            {
                return this._xmlIndexOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateXmlIndex(this);
        }
    }
    
    /// <summary>
    /// create_or_alter_procedure
    /// 	 : ((CREATE  (OR  (ALTER | REPLACE))?) | ALTER)  proc = (PROC | PROCEDURE)  procName = schema_func_proc_ref  (SEMI  DECIMAL)?  (LR_BRACKET?  procedure_params  RR_BRACKET?)?  procedure_options?  (FOR  REPLICATION)?  AS  (as_external_name | sql_clause)
    /// </summary>
    public partial class AstCreateOrAlterProcedure : AstBatchLevelStatement
    {
        
        private AstProcedureOptions _procedureOptions;
        
        public AstCreateOrAlterProcedure(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcedureOptions>())
                {
                    this._procedureOptions = ((AstProcedureOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterProcedure(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcedureOptions>())
                {
                    this._procedureOptions = ((AstProcedureOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProcedureOptions ProcedureOptions
        {
            get
            {
                return this._procedureOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterProcedure(this);
        }
    }
    
    /// <summary>
    /// as_external_name
    /// 	 : EXTERNAL  NAME  assembly_id  DOT  class_id  DOT  method_id
    /// </summary>
    public partial class AstAsExternalName : AstRule
    {
        
        private AstAssemblyId _assemblyId;
        
        private AstClassId _classId;
        
        private AstMethodId _methodId;
        
        public AstAsExternalName(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClassId>())
                {
                    this._classId = ((AstClassId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMethodId>())
                {
                    this._methodId = ((AstMethodId)(enumerator.Current));
                }
            }
        }
        
        public AstAsExternalName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClassId>())
                {
                    this._classId = ((AstClassId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMethodId>())
                {
                    this._methodId = ((AstMethodId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblyId AssemblyId
        {
            get
            {
                return this._assemblyId;
            }
        }
        
        public virtual AstClassId ClassId
        {
            get
            {
                return this._classId;
            }
        }
        
        public virtual AstMethodId MethodId
        {
            get
            {
                return this._methodId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsExternalName(this);
        }
    }
    
    /// <summary>
    /// create_or_alter_dml_trigger
    /// 	 : ((CREATE  (OR  ALTER)?) | ALTER)  TRIGGER  schema_trigger_ref  ON  full_table_ref  dml_trigger_options?  for_after_instead  dml_trigger_operations  (WITH  APPEND)?  (NOT  FOR  REPLICATION)?  AS  sql_clauses
    /// </summary>
    public partial class AstCreateOrAlterDmlTrigger : AstCreateOrAlterTrigger
    {
        
        private AstSchemaTriggerRef _schemaTriggerRef;
        
        private AstFullTableRef _fullTableRef;
        
        private AstDmlTriggerOptions _dmlTriggerOptions;
        
        private AstForAfterInstead _forAfterInstead;
        
        private AstDmlTriggerOperations _dmlTriggerOperations;
        
        private AstSqlClauses _sqlClauses;
        
        public AstCreateOrAlterDmlTrigger(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaTriggerRef>())
                {
                    this._schemaTriggerRef = ((AstSchemaTriggerRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions>())
                {
                    this._dmlTriggerOptions = ((AstDmlTriggerOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForAfterInstead>())
                {
                    this._forAfterInstead = ((AstForAfterInstead)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this._dmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterDmlTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaTriggerRef>())
                {
                    this._schemaTriggerRef = ((AstSchemaTriggerRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions>())
                {
                    this._dmlTriggerOptions = ((AstDmlTriggerOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForAfterInstead>())
                {
                    this._forAfterInstead = ((AstForAfterInstead)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this._dmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaTriggerRef SchemaTriggerRef
        {
            get
            {
                return this._schemaTriggerRef;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstDmlTriggerOptions DmlTriggerOptions
        {
            get
            {
                return this._dmlTriggerOptions;
            }
        }
        
        public virtual AstForAfterInstead ForAfterInstead
        {
            get
            {
                return this._forAfterInstead;
            }
        }
        
        public virtual AstDmlTriggerOperations DmlTriggerOperations
        {
            get
            {
                return this._dmlTriggerOperations;
            }
        }
        
        public virtual AstSqlClauses SqlClauses
        {
            get
            {
                return this._sqlClauses;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterDmlTrigger(this);
        }
    }
    
    /// <summary>
    /// create_or_alter_ddl_trigger
    /// 	 : ((CREATE  (OR  ALTER)?) | ALTER)  TRIGGER  schema_trigger_ref  ON  all_server_database  dml_trigger_options?  for_after  dml_trigger_operations  AS  sql_clauses
    /// </summary>
    public partial class AstCreateOrAlterDdlTrigger : AstCreateOrAlterTrigger
    {
        
        private AstSchemaTriggerRef _schemaTriggerRef;
        
        private AstAllServerDatabase _allServerDatabase;
        
        private AstDmlTriggerOptions _dmlTriggerOptions;
        
        private AstForAfter _forAfter;
        
        private AstDmlTriggerOperations _dmlTriggerOperations;
        
        private AstSqlClauses _sqlClauses;
        
        public AstCreateOrAlterDdlTrigger(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaTriggerRef>())
                {
                    this._schemaTriggerRef = ((AstSchemaTriggerRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAllServerDatabase>())
                {
                    this._allServerDatabase = ((AstAllServerDatabase)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions>())
                {
                    this._dmlTriggerOptions = ((AstDmlTriggerOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForAfter>())
                {
                    this._forAfter = ((AstForAfter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this._dmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterDdlTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaTriggerRef>())
                {
                    this._schemaTriggerRef = ((AstSchemaTriggerRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAllServerDatabase>())
                {
                    this._allServerDatabase = ((AstAllServerDatabase)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions>())
                {
                    this._dmlTriggerOptions = ((AstDmlTriggerOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForAfter>())
                {
                    this._forAfter = ((AstForAfter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this._dmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaTriggerRef SchemaTriggerRef
        {
            get
            {
                return this._schemaTriggerRef;
            }
        }
        
        public virtual AstAllServerDatabase AllServerDatabase
        {
            get
            {
                return this._allServerDatabase;
            }
        }
        
        public virtual AstDmlTriggerOptions DmlTriggerOptions
        {
            get
            {
                return this._dmlTriggerOptions;
            }
        }
        
        public virtual AstForAfter ForAfter
        {
            get
            {
                return this._forAfter;
            }
        }
        
        public virtual AstDmlTriggerOperations DmlTriggerOperations
        {
            get
            {
                return this._dmlTriggerOperations;
            }
        }
        
        public virtual AstSqlClauses SqlClauses
        {
            get
            {
                return this._sqlClauses;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterDdlTrigger(this);
        }
    }
    
    /// <summary>
    /// func_body_returns_select
    /// 	 : RETURNS  TABLE  function_options?  AS?  (as_external_name | RETURN  (LR_BRACKET  select_statement_standalone  RR_BRACKET | select_statement_standalone))
    /// </summary>
    public partial class AstFuncBodyReturnsSelect : AstRule
    {
        
        private AstFunctionOptions _functionOptions;
        
        public AstFuncBodyReturnsSelect(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public AstFuncBodyReturnsSelect(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFunctionOptions FunctionOptions
        {
            get
            {
                return this._functionOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncBodyReturnsSelect(this);
        }
    }
    
    /// <summary>
    /// func_body_returns_table
    /// 	 : RETURNS  LOCAL_ID  table_type_definition  function_options?  AS?  (as_external_name | BEGIN  sql_clauses?  RETURN  SEMI?  END  SEMI?)
    /// </summary>
    public partial class AstFuncBodyReturnsTable : AstRule
    {
        
        private AstTableTypeDefinition _tableTypeDefinition;
        
        private AstFunctionOptions _functionOptions;
        
        public AstFuncBodyReturnsTable(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableTypeDefinition>())
                {
                    this._tableTypeDefinition = ((AstTableTypeDefinition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public AstFuncBodyReturnsTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableTypeDefinition>())
                {
                    this._tableTypeDefinition = ((AstTableTypeDefinition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableTypeDefinition TableTypeDefinition
        {
            get
            {
                return this._tableTypeDefinition;
            }
        }
        
        public virtual AstFunctionOptions FunctionOptions
        {
            get
            {
                return this._functionOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncBodyReturnsTable(this);
        }
    }
    
    /// <summary>
    /// func_body_returns_scalar
    /// 	 : RETURNS  data_type  function_options?  AS?  (as_external_name | BEGIN  sql_clause?  RETURN  ret = expression  SEMI?  END)
    /// </summary>
    public partial class AstFuncBodyReturnsScalar : AstRule
    {
        
        private AstDataType _dataType;
        
        private AstFunctionOptions _functionOptions;
        
        public AstFuncBodyReturnsScalar(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public AstFuncBodyReturnsScalar(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public virtual AstFunctionOptions FunctionOptions
        {
            get
            {
                return this._functionOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncBodyReturnsScalar(this);
        }
    }
    
    /// <summary>
    /// procedure_param
    /// 	 : LOCAL_ID  AS?  schema_type_ref  VARYING?  (EQUAL  default_val = default_value)?  (OUT | OUTPUT | READONLY)?
    /// </summary>
    public partial class AstProcedureParam : AstRule
    {
        
        private AstSchemaTypeRef _schemaTypeRef;
        
        public AstProcedureParam(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaTypeRef>())
                {
                    this._schemaTypeRef = ((AstSchemaTypeRef)(enumerator.Current));
                }
            }
        }
        
        public AstProcedureParam(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaTypeRef>())
                {
                    this._schemaTypeRef = ((AstSchemaTypeRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaTypeRef SchemaTypeRef
        {
            get
            {
                return this._schemaTypeRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcedureParam(this);
        }
    }
    
    /// <summary>
    /// create_statistics
    /// 	 : CREATE  STATISTICS  id_  ON  full_table_ref  LR_BRACKET  column_name_list  RR_BRACKET  (WITH  (FULLSCAN | SAMPLE  DECIMAL  (PERCENT | ROWS) | STATS_STREAM)  (COMMA  NORECOMPUTE)?  (COMMA  INCREMENTAL  EQUAL  on_off)?)?  SEMI?
    /// </summary>
    public partial class AstCreateStatistics : AstDdlClause
    {
        
        private AstId _id;
        
        private AstFullTableRef _fullTableRef;
        
        private AstColumnNameList _columnNameList;
        
        public AstCreateStatistics(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public AstCreateStatistics(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstColumnNameList ColumnNameList
        {
            get
            {
                return this._columnNameList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateStatistics(this);
        }
    }
    
    /// <summary>
    /// update_statistics
    /// 	 : UPDATE  STATISTICS  complete_table_ref  (id_ | LR_BRACKET  ids  RR_BRACKET)?  update_statistics_options?
    /// </summary>
    public partial class AstUpdateStatistics : AstDdlClause
    {
        
        private AstCompleteTableRef _completeTableRef;
        
        private AstUpdateStatisticsOptions _updateStatisticsOptions;
        
        public AstUpdateStatistics(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCompleteTableRef>())
                {
                    this._completeTableRef = ((AstCompleteTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateStatisticsOptions>())
                {
                    this._updateStatisticsOptions = ((AstUpdateStatisticsOptions)(enumerator.Current));
                }
            }
        }
        
        public AstUpdateStatistics(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCompleteTableRef>())
                {
                    this._completeTableRef = ((AstCompleteTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateStatisticsOptions>())
                {
                    this._updateStatisticsOptions = ((AstUpdateStatisticsOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCompleteTableRef CompleteTableRef
        {
            get
            {
                return this._completeTableRef;
            }
        }
        
        public virtual AstUpdateStatisticsOptions UpdateStatisticsOptions
        {
            get
            {
                return this._updateStatisticsOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateStatistics(this);
        }
    }
    
    /// <summary>
    /// create_table
    /// 	 : CREATE  TABLE  full_table_ref  LR_BRACKET  column_def_table_constraints  table_indices_list?  RR_BRACKET  (LOCK  simple_id)?  table_options*  (ON  on = group_id | DEFAULT)?  (TEXTIMAGE_ON  text_image = group_id | DEFAULT)?  SEMI?
    /// </summary>
    public partial class AstCreateTable : AstDdlClause
    {
        
        private AstFullTableRef _fullTableRef;
        
        private AstColumnDefTableConstraints _columnDefTableConstraints;
        
        private AstTableIndicesList _tableIndicesList;
        
        private AstTableOptions _tableOptions;
        
        public AstCreateTable(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableIndicesList>())
                {
                    this._tableIndicesList = ((AstTableIndicesList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableOptions>())
                {
                    this._tableOptions = ((AstTableOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableIndicesList>())
                {
                    this._tableIndicesList = ((AstTableIndicesList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableOptions>())
                {
                    this._tableOptions = ((AstTableOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstColumnDefTableConstraints ColumnDefTableConstraints
        {
            get
            {
                return this._columnDefTableConstraints;
            }
        }
        
        public virtual AstTableIndicesList TableIndicesList
        {
            get
            {
                return this._tableIndicesList;
            }
        }
        
        public virtual AstTableOptions TableOptions
        {
            get
            {
                return this._tableOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateTable(this);
        }
    }
    
    /// <summary>
    /// create_view
    /// 	 : CREATE  VIEW  schema_view_ref  (LR_BRACKET  column_name_list  RR_BRACKET)?  view_attributes?  AS  select_statement_standalone  (WITH  CHECK  OPTION)?  SEMI?
    /// </summary>
    public partial class AstCreateView : AstBatchLevelStatement
    {
        
        private AstSchemaViewRef _schemaViewRef;
        
        private AstViewAttributes _viewAttributes;
        
        private AstSelectStatementStandalone _selectStatementStandalone;
        
        public AstCreateView(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaViewRef>())
                {
                    this._schemaViewRef = ((AstSchemaViewRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstViewAttributes>())
                {
                    this._viewAttributes = ((AstViewAttributes)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public AstCreateView(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaViewRef>())
                {
                    this._schemaViewRef = ((AstSchemaViewRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstViewAttributes>())
                {
                    this._viewAttributes = ((AstViewAttributes)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaViewRef SchemaViewRef
        {
            get
            {
                return this._schemaViewRef;
            }
        }
        
        public virtual AstViewAttributes ViewAttributes
        {
            get
            {
                return this._viewAttributes;
            }
        }
        
        public virtual AstSelectStatementStandalone SelectStatementStandalone
        {
            get
            {
                return this._selectStatementStandalone;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateView(this);
        }
    }
    
    /// <summary>
    /// alter_table
    /// 	 : ALTER  TABLE  full_table_ref  (SET  LR_BRACKET  LOCK_ESCALATION  EQUAL  (AUTO | TABLE | DISABLE)  RR_BRACKET | ADD  column_def_table_constraints | ALTER  COLUMN  (column_definition | column_modifier) | DROP  COLUMN  ids | DROP  CONSTRAINT  constraint_id | WITH  (CHECK | NOCHECK)  ADD  alter_table_constraint | (NOCHECK | CHECK)  CONSTRAINT  constraint_id | enable_disable  TRIGGER  id_? | REBUILD  table_options | SWITCH  switch_partition)  SEMI?
    /// </summary>
    public partial class AstAlterTable : AstDdlClause
    {
        
        private AstFullTableRef _fullTableRef;
        
        public AstAlterTable(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstAlterTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterTable(this);
        }
    }
    
    /// <summary>
    /// alter_table_constraint_foreign
    /// 	 : FOREIGN  KEY  LR_BRACKET  fk = column_name_list  RR_BRACKET  REFERENCES  full_table_ref  (LR_BRACKET  pk = column_name_list  RR_BRACKET)?  on1 = constraint_delete_or_update  on2 = constraint_delete_or_update
    /// </summary>
    public partial class AstAlterTableConstraintForeign : AstRule
    {
        
        private AstFullTableRef _fullTableRef;
        
        public AstAlterTableConstraintForeign(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstAlterTableConstraintForeign(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterTableConstraintForeign(this);
        }
    }
    
    /// <summary>
    /// alter_database
    /// 	 : ALTER  DATABASE  (database_id | CURRENT)  alter_database_new_infos  SEMI?
    /// </summary>
    public partial class AstAlterDatabase : AstDdlClause
    {
        
        private AstAlterDatabaseNewInfos _alterDatabaseNewInfos;
        
        public AstAlterDatabase(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterDatabaseNewInfos>())
                {
                    this._alterDatabaseNewInfos = ((AstAlterDatabaseNewInfos)(enumerator.Current));
                }
            }
        }
        
        public AstAlterDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterDatabaseNewInfos>())
                {
                    this._alterDatabaseNewInfos = ((AstAlterDatabaseNewInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterDatabaseNewInfos AlterDatabaseNewInfos
        {
            get
            {
                return this._alterDatabaseNewInfos;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterDatabase(this);
        }
    }
    
    /// <summary>
    /// containment_option
    /// 	 : CONTAINMENT  EQUAL  none_partial
    /// </summary>
    public partial class AstContainmentOption : AstRule
    {
        
        private AstNonePartial _nonePartial;
        
        public AstContainmentOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNonePartial>())
                {
                    this._nonePartial = ((AstNonePartial)(enumerator.Current));
                }
            }
        }
        
        public AstContainmentOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNonePartial>())
                {
                    this._nonePartial = ((AstNonePartial)(enumerator.Current));
                }
            }
        }
        
        public virtual AstNonePartial NonePartial
        {
            get
            {
                return this._nonePartial;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContainmentOption(this);
        }
    }
    
    /// <summary>
    /// alter_endpoint
    /// 	 : ALTER  ENDPOINT  endpoint_id  (AUTHORIZATION  login_id)?  (STATE  EQUAL  state_enum)?  AS  TCP  LR_BRACKET  LISTENER_PORT  EQUAL  DECIMAL  (COMMA  listener_ip)?  RR_BRACKET  (TSQL | alter_endpoint_service_broker | alter_endpoint_database_mirroring)
    /// </summary>
    public partial class AstAlterEndpoint : AstDdlClause
    {
        
        private AstEndpointId _endpointId;
        
        public AstAlterEndpoint(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointId>())
                {
                    this._endpointId = ((AstEndpointId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterEndpoint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointId>())
                {
                    this._endpointId = ((AstEndpointId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEndpointId EndpointId
        {
            get
            {
                return this._endpointId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterEndpoint(this);
        }
    }
    
    /// <summary>
    /// alter_endpoint_database_mirroring
    /// 	 : FOR  DATABASE_MIRRORING  LR_BRACKET  authentication_configuration  (COMMA?  encryption_state  encryption_algorithm?)?  COMMA?  ROLE  EQUAL  (WITNESS | PARTNER | ALL)  RR_BRACKET
    /// </summary>
    public partial class AstAlterEndpointDatabaseMirroring : AstRule
    {
        
        private AstAuthenticationConfiguration _authenticationConfiguration;
        
        public AstAlterEndpointDatabaseMirroring(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuthenticationConfiguration>())
                {
                    this._authenticationConfiguration = ((AstAuthenticationConfiguration)(enumerator.Current));
                }
            }
        }
        
        public AstAlterEndpointDatabaseMirroring(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuthenticationConfiguration>())
                {
                    this._authenticationConfiguration = ((AstAuthenticationConfiguration)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuthenticationConfiguration AuthenticationConfiguration
        {
            get
            {
                return this._authenticationConfiguration;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterEndpointDatabaseMirroring(this);
        }
    }
    
    /// <summary>
    /// alter_endpoint_service_broker
    /// 	 : FOR  SERVICE_BROKER  LR_BRACKET  authentication_configuration  (COMMA?  encryption_state  encryption_algorithm?)?  (COMMA?  MESSAGE_FORWARDING  EQUAL  enable_disable)?  (COMMA?  MESSAGE_FORWARD_SIZE  EQUAL  DECIMAL)?  RR_BRACKET
    /// </summary>
    public partial class AstAlterEndpointServiceBroker : AstRule
    {
        
        private AstAuthenticationConfiguration _authenticationConfiguration;
        
        public AstAlterEndpointServiceBroker(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuthenticationConfiguration>())
                {
                    this._authenticationConfiguration = ((AstAuthenticationConfiguration)(enumerator.Current));
                }
            }
        }
        
        public AstAlterEndpointServiceBroker(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuthenticationConfiguration>())
                {
                    this._authenticationConfiguration = ((AstAuthenticationConfiguration)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuthenticationConfiguration AuthenticationConfiguration
        {
            get
            {
                return this._authenticationConfiguration;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterEndpointServiceBroker(this);
        }
    }
    
    /// <summary>
    /// partner_server
    /// 	 : partner_server_tcp_prefix  host  mirroring_host_port_seperator  port_number
    /// </summary>
    public partial class AstPartnerServer : AstWitnessServer
    {
        
        private AstPartnerServerTcpPrefix _partnerServerTcpPrefix;
        
        private AstHost _host;
        
        private AstMirroringHostPortSeperator _mirroringHostPortSeperator;
        
        private AstPortNumber _portNumber;
        
        public AstPartnerServer(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartnerServerTcpPrefix>())
                {
                    this._partnerServerTcpPrefix = ((AstPartnerServerTcpPrefix)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstHost>())
                {
                    this._host = ((AstHost)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMirroringHostPortSeperator>())
                {
                    this._mirroringHostPortSeperator = ((AstMirroringHostPortSeperator)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPortNumber>())
                {
                    this._portNumber = ((AstPortNumber)(enumerator.Current));
                }
            }
        }
        
        public AstPartnerServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartnerServerTcpPrefix>())
                {
                    this._partnerServerTcpPrefix = ((AstPartnerServerTcpPrefix)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstHost>())
                {
                    this._host = ((AstHost)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMirroringHostPortSeperator>())
                {
                    this._mirroringHostPortSeperator = ((AstMirroringHostPortSeperator)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPortNumber>())
                {
                    this._portNumber = ((AstPortNumber)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartnerServerTcpPrefix PartnerServerTcpPrefix
        {
            get
            {
                return this._partnerServerTcpPrefix;
            }
        }
        
        public virtual AstHost Host
        {
            get
            {
                return this._host;
            }
        }
        
        public virtual AstMirroringHostPortSeperator MirroringHostPortSeperator
        {
            get
            {
                return this._mirroringHostPortSeperator;
            }
        }
        
        public virtual AstPortNumber PortNumber
        {
            get
            {
                return this._portNumber;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartnerServer(this);
        }
    }
    
    /// <summary>
    /// date_correlation_optimization_option
    /// 	 : DATE_CORRELATION_OPTIMIZATION  on_off
    /// </summary>
    public partial class AstDateCorrelationOptimizationOption : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstDateCorrelationOptimizationOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstDateCorrelationOptimizationOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDateCorrelationOptimizationOption(this);
        }
    }
    
    /// <summary>
    /// db_encryption_option
    /// 	 : ENCRYPTION  on_off
    /// </summary>
    public partial class AstDbEncryptionOption : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstDbEncryptionOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstDbEncryptionOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbEncryptionOption(this);
        }
    }
    
    /// <summary>
    /// mixed_page_allocation_option
    /// 	 : MIXED_PAGE_ALLOCATION  on_off
    /// </summary>
    public partial class AstMixedPageAllocationOption : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstMixedPageAllocationOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstMixedPageAllocationOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMixedPageAllocationOption(this);
        }
    }
    
    /// <summary>
    /// drop_relational_or_xml_or_spatial_index
    /// 	 : index_id  ON  complete_table_ref
    /// </summary>
    public partial class AstDropRelationalOrXmlOrSpatialIndex : AstRule
    {
        
        private AstIndexId _indexId;
        
        private AstCompleteTableRef _completeTableRef;
        
        public AstDropRelationalOrXmlOrSpatialIndex(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCompleteTableRef>())
                {
                    this._completeTableRef = ((AstCompleteTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropRelationalOrXmlOrSpatialIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCompleteTableRef>())
                {
                    this._completeTableRef = ((AstCompleteTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexId IndexId
        {
            get
            {
                return this._indexId;
            }
        }
        
        public virtual AstCompleteTableRef CompleteTableRef
        {
            get
            {
                return this._completeTableRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRelationalOrXmlOrSpatialIndex(this);
        }
    }
    
    /// <summary>
    /// drop_procedure
    /// 	 : DROP  proc = (PROC | PROCEDURE)  (IF  EXISTS)?  func_proc_name_schemas  SEMI?
    /// </summary>
    public partial class AstDropProcedure : AstDdlClause
    {
        
        private AstFuncProcNameSchemas _funcProcNameSchemas;
        
        public AstDropProcedure(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this._funcProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public AstDropProcedure(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this._funcProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFuncProcNameSchemas FuncProcNameSchemas
        {
            get
            {
                return this._funcProcNameSchemas;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropProcedure(this);
        }
    }
    
    /// <summary>
    /// drop_dml_trigger
    /// 	 : DROP  TRIGGER  (IF  EXISTS)?  schema_trigger_refs  SEMI?
    /// </summary>
    public partial class AstDropDmlTrigger : AstDropTrigger
    {
        
        private AstSchemaTriggerRefs _schemaTriggerRefs;
        
        public AstDropDmlTrigger(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaTriggerRefs>())
                {
                    this._schemaTriggerRefs = ((AstSchemaTriggerRefs)(enumerator.Current));
                }
            }
        }
        
        public AstDropDmlTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaTriggerRefs>())
                {
                    this._schemaTriggerRefs = ((AstSchemaTriggerRefs)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaTriggerRefs SchemaTriggerRefs
        {
            get
            {
                return this._schemaTriggerRefs;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDmlTrigger(this);
        }
    }
    
    /// <summary>
    /// drop_ddl_trigger
    /// 	 : DROP  TRIGGER  (IF  EXISTS)?  schema_view_refs  ON  (DATABASE | ALL  SERVER)  SEMI?
    /// </summary>
    public partial class AstDropDdlTrigger : AstDropTrigger
    {
        
        private AstSchemaViewRefs _schemaViewRefs;
        
        public AstDropDdlTrigger(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaViewRefs>())
                {
                    this._schemaViewRefs = ((AstSchemaViewRefs)(enumerator.Current));
                }
            }
        }
        
        public AstDropDdlTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaViewRefs>())
                {
                    this._schemaViewRefs = ((AstSchemaViewRefs)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaViewRefs SchemaViewRefs
        {
            get
            {
                return this._schemaViewRefs;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDdlTrigger(this);
        }
    }
    
    /// <summary>
    /// drop_function
    /// 	 : DROP  FUNCTION  (IF  EXISTS)?  func_proc_name_schemas  SEMI?
    /// </summary>
    public partial class AstDropFunction : AstDdlClause
    {
        
        private AstFuncProcNameSchemas _funcProcNameSchemas;
        
        public AstDropFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this._funcProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public AstDropFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this._funcProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFuncProcNameSchemas FuncProcNameSchemas
        {
            get
            {
                return this._funcProcNameSchemas;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFunction(this);
        }
    }
    
    /// <summary>
    /// drop_table
    /// 	 : DROP  TABLE  (IF  EXISTS)?  table_names  SEMI?
    /// </summary>
    public partial class AstDropTable : AstDdlClause
    {
        
        private AstTableNames _tableNames;
        
        public AstDropTable(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableNames>())
                {
                    this._tableNames = ((AstTableNames)(enumerator.Current));
                }
            }
        }
        
        public AstDropTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableNames>())
                {
                    this._tableNames = ((AstTableNames)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableNames TableNames
        {
            get
            {
                return this._tableNames;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropTable(this);
        }
    }
    
    /// <summary>
    /// drop_view
    /// 	 : DROP  VIEW  (IF  EXISTS)?  schema_view_refs  SEMI?
    /// </summary>
    public partial class AstDropView : AstDdlClause
    {
        
        private AstSchemaViewRefs _schemaViewRefs;
        
        public AstDropView(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaViewRefs>())
                {
                    this._schemaViewRefs = ((AstSchemaViewRefs)(enumerator.Current));
                }
            }
        }
        
        public AstDropView(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaViewRefs>())
                {
                    this._schemaViewRefs = ((AstSchemaViewRefs)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaViewRefs SchemaViewRefs
        {
            get
            {
                return this._schemaViewRefs;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropView(this);
        }
    }
    
    /// <summary>
    /// openquery
    /// 	 : OPENQUERY  LR_BRACKET  server_id  COMMA  query = STRING  RR_BRACKET
    /// </summary>
    public partial class AstOpenquery : AstRowsetFunctionLimited
    {
        
        private AstServerId _serverId;
        
        public AstOpenquery(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
            }
        }
        
        public AstOpenquery(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerId ServerId
        {
            get
            {
                return this._serverId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenquery(this);
        }
    }
    
    /// <summary>
    /// opendatasource
    /// 	 : OPENDATASOURCE  LR_BRACKET  provider = STRING  COMMA  init = STRING  RR_BRACKET  DOT  database_schema_table_ref
    /// </summary>
    public partial class AstOpendatasource : AstRowsetFunctionLimited
    {
        
        private AstDatabaseSchemaTableRef _databaseSchemaTableRef;
        
        public AstOpendatasource(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstOpendatasource(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseSchemaTableRef DatabaseSchemaTableRef
        {
            get
            {
                return this._databaseSchemaTableRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpendatasource(this);
        }
    }
    
    /// <summary>
    /// backup_database
    /// 	 : BACKUP  DATABASE  (database_id)  (READ_WRITE_FILEGROUPS  group1 = file_group_list)?  group2 = file_group_list  backup_target?  backup_settings?
    /// </summary>
    public partial class AstBackupDatabase : AstBackupStatement
    {
        
        private AstBackupTarget _backupTarget;
        
        private AstBackupSettings _backupSettings;
        
        public AstBackupDatabase(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBackupTarget>())
                {
                    this._backupTarget = ((AstBackupTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupSettings>())
                {
                    this._backupSettings = ((AstBackupSettings)(enumerator.Current));
                }
            }
        }
        
        public AstBackupDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBackupTarget>())
                {
                    this._backupTarget = ((AstBackupTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupSettings>())
                {
                    this._backupSettings = ((AstBackupSettings)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBackupTarget BackupTarget
        {
            get
            {
                return this._backupTarget;
            }
        }
        
        public virtual AstBackupSettings BackupSettings
        {
            get
            {
                return this._backupSettings;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupDatabase(this);
        }
    }
    
    /// <summary>
    /// file_group_assign
    /// 	 : file_file_group  EQUAL  file_or_filegroup = STRING
    /// </summary>
    public partial class AstFileGroupAssign : AstRule
    {
        
        private AstFileFileGroup _fileFileGroup;
        
        public AstFileGroupAssign(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileFileGroup>())
                {
                    this._fileFileGroup = ((AstFileFileGroup)(enumerator.Current));
                }
            }
        }
        
        public AstFileGroupAssign(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileFileGroup>())
                {
                    this._fileFileGroup = ((AstFileFileGroup)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFileFileGroup FileFileGroup
        {
            get
            {
                return this._fileFileGroup;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileGroupAssign(this);
        }
    }
    
    /// <summary>
    /// backup_log
    /// 	 : BACKUP  LOG  database_id  backup_target?  backup_settings?
    /// </summary>
    public partial class AstBackupLog : AstBackupStatement
    {
        
        private AstDatabaseId _databaseId;
        
        private AstBackupTarget _backupTarget;
        
        private AstBackupSettings _backupSettings;
        
        public AstBackupLog(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupTarget>())
                {
                    this._backupTarget = ((AstBackupTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupSettings>())
                {
                    this._backupSettings = ((AstBackupSettings)(enumerator.Current));
                }
            }
        }
        
        public AstBackupLog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupTarget>())
                {
                    this._backupTarget = ((AstBackupTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupSettings>())
                {
                    this._backupSettings = ((AstBackupSettings)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstBackupTarget BackupTarget
        {
            get
            {
                return this._backupTarget;
            }
        }
        
        public virtual AstBackupSettings BackupSettings
        {
            get
            {
                return this._backupSettings;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupLog(this);
        }
    }
    
    /// <summary>
    /// backup_target
    /// 	 : backup_to  backup_to_mirror
    /// </summary>
    public partial class AstBackupTarget : AstRule
    {
        
        private AstBackupTo _backupTo;
        
        private AstBackupToMirror _backupToMirror;
        
        public AstBackupTarget(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBackupTo>())
                {
                    this._backupTo = ((AstBackupTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupToMirror>())
                {
                    this._backupToMirror = ((AstBackupToMirror)(enumerator.Current));
                }
            }
        }
        
        public AstBackupTarget(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBackupTo>())
                {
                    this._backupTo = ((AstBackupTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupToMirror>())
                {
                    this._backupToMirror = ((AstBackupToMirror)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBackupTo BackupTo
        {
            get
            {
                return this._backupTo;
            }
        }
        
        public virtual AstBackupToMirror BackupToMirror
        {
            get
            {
                return this._backupToMirror;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupTarget(this);
        }
    }
    
    /// <summary>
    /// backup_certificate
    /// 	 : BACKUP  CERTIFICATE  certificate_id  TO  FILE  EQUAL  cert_file = STRING  (WITH  PRIVATE  KEY  LR_BRACKET  (COMMA?  FILE  EQUAL  private_key_file = STRING | COMMA?  ENCRYPTION  BY  PASSWORD  EQUAL  encryption_password = STRING | COMMA?  DECRYPTION  BY  PASSWORD  EQUAL  decryption_pasword = STRING)+  RR_BRACKET)?
    /// </summary>
    public partial class AstBackupCertificate : AstBackupStatement
    {
        
        private AstCertificateId _certificateId;
        
        public AstBackupCertificate(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
            }
        }
        
        public AstBackupCertificate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateId CertificateId
        {
            get
            {
                return this._certificateId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupCertificate(this);
        }
    }
    
    /// <summary>
    /// execute_statement
    /// 	 : EXECUTE  execute_body  SEMI?
    /// </summary>
    public partial class AstExecuteStatement : AstAnotherStatement
    {
        
        private AstExecuteBody _executeBody;
        
        public AstExecuteStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteBody>())
                {
                    this._executeBody = ((AstExecuteBody)(enumerator.Current));
                }
            }
        }
        
        public AstExecuteStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteBody>())
                {
                    this._executeBody = ((AstExecuteBody)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExecuteBody ExecuteBody
        {
            get
            {
                return this._executeBody;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatement(this);
        }
    }
    
    /// <summary>
    /// execute_body_batch
    /// 	 : func_proc_name_server_database_schema  (execute_statement_args)?  SEMI?
    /// </summary>
    public partial class AstExecuteBodyBatch : AstRule
    {
        
        private AstFuncProcNameServerDatabaseSchema _funcProcNameServerDatabaseSchema;
        
        public AstExecuteBodyBatch(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameServerDatabaseSchema>())
                {
                    this._funcProcNameServerDatabaseSchema = ((AstFuncProcNameServerDatabaseSchema)(enumerator.Current));
                }
            }
        }
        
        public AstExecuteBodyBatch(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameServerDatabaseSchema>())
                {
                    this._funcProcNameServerDatabaseSchema = ((AstFuncProcNameServerDatabaseSchema)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFuncProcNameServerDatabaseSchema FuncProcNameServerDatabaseSchema
        {
            get
            {
                return this._funcProcNameServerDatabaseSchema;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteBodyBatch(this);
        }
    }
    
    /// <summary>
    /// create_certificate
    /// 	 : CREATE  CERTIFICATE  certificate_id  (AUTHORIZATION  user_id)?  (FROM  existing_keys | generate_new_keys)  (ACTIVE  FOR  BEGIN  DIALOG  EQUAL  on_off)?
    /// </summary>
    public partial class AstCreateCertificate : AstRule
    {
        
        private AstCertificateId _certificateId;
        
        public AstCreateCertificate(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateCertificate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateId CertificateId
        {
            get
            {
                return this._certificateId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateCertificate(this);
        }
    }
    
    /// <summary>
    /// use_statement
    /// 	 : USE  database_id  SEMI?
    /// </summary>
    public partial class AstUseStatement : AstAnotherStatement
    {
        
        private AstDatabaseId _databaseId;
        
        public AstUseStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
            }
        }
        
        public AstUseStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUseStatement(this);
        }
    }
    
    /// <summary>
    /// declare_local
    /// 	 : LOCAL_ID  AS?  data_type  (EQUAL  expression)?
    /// </summary>
    public partial class AstDeclareLocal : AstRule
    {
        
        private AstDataType _dataType;
        
        public AstDeclareLocal(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
            }
        }
        
        public AstDeclareLocal(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareLocal(this);
        }
    }
    
    /// <summary>
    /// table_type_definition
    /// 	 : TABLE  LR_BRACKET  column_def_table_constraints  (COMMA?  table_type_indices)*  RR_BRACKET
    /// </summary>
    public partial class AstTableTypeDefinition : AstRule
    {
        
        private AstColumnDefTableConstraints _columnDefTableConstraints;
        
        public AstTableTypeDefinition(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
            }
        }
        
        public AstTableTypeDefinition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnDefTableConstraints ColumnDefTableConstraints
        {
            get
            {
                return this._columnDefTableConstraints;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableTypeDefinition(this);
        }
    }
    
    /// <summary>
    /// xml_type_definition
    /// 	 : XML  LR_BRACKET  (CONTENT | DOCUMENT)?  xml_schema_collection  RR_BRACKET
    /// </summary>
    public partial class AstXmlTypeDefinition : AstRule
    {
        
        private AstXmlSchemaCollection _xmlSchemaCollection;
        
        public AstXmlTypeDefinition(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstXmlSchemaCollection>())
                {
                    this._xmlSchemaCollection = ((AstXmlSchemaCollection)(enumerator.Current));
                }
            }
        }
        
        public AstXmlTypeDefinition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstXmlSchemaCollection>())
                {
                    this._xmlSchemaCollection = ((AstXmlSchemaCollection)(enumerator.Current));
                }
            }
        }
        
        public virtual AstXmlSchemaCollection XmlSchemaCollection
        {
            get
            {
                return this._xmlSchemaCollection;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlTypeDefinition(this);
        }
    }
    
    /// <summary>
    /// column_def_table_constraints
    /// 	 : column_def_table_constraint  (COMMA?  column_def_table_constraint)*
    /// </summary>
    public partial class AstColumnDefTableConstraints : AstRule
    {
        
        private AstColumnDefTableConstraint _columnDefTableConstraint;
        
        public AstColumnDefTableConstraints(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDefTableConstraint>())
                {
                    this._columnDefTableConstraint = ((AstColumnDefTableConstraint)(enumerator.Current));
                }
            }
        }
        
        public AstColumnDefTableConstraints(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDefTableConstraint>())
                {
                    this._columnDefTableConstraint = ((AstColumnDefTableConstraint)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnDefTableConstraint ColumnDefTableConstraint
        {
            get
            {
                return this._columnDefTableConstraint;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDefTableConstraints(this);
        }
    }
    
    /// <summary>
    /// column_definition
    /// 	 : column_id  (data_type | AS  expression  PERSISTED?)  column_definition_element*  column_index?
    /// </summary>
    public partial class AstColumnDefinition : AstRule
    {
        
        private AstColumnId _columnId;
        
        private AstColumnDefinitionElement _columnDefinitionElement;
        
        private AstColumnIndex _columnIndex;
        
        public AstColumnDefinition(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefinitionElement>())
                {
                    this._columnDefinitionElement = ((AstColumnDefinitionElement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnIndex>())
                {
                    this._columnIndex = ((AstColumnIndex)(enumerator.Current));
                }
            }
        }
        
        public AstColumnDefinition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefinitionElement>())
                {
                    this._columnDefinitionElement = ((AstColumnDefinitionElement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnIndex>())
                {
                    this._columnIndex = ((AstColumnIndex)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnId ColumnId
        {
            get
            {
                return this._columnId;
            }
        }
        
        public virtual AstColumnDefinitionElement ColumnDefinitionElement
        {
            get
            {
                return this._columnDefinitionElement;
            }
        }
        
        public virtual AstColumnIndex ColumnIndex
        {
            get
            {
                return this._columnIndex;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDefinition(this);
        }
    }
    
    /// <summary>
    /// column_modifier
    /// 	 : id_  add_drop  (ROWGUIDCOL | PERSISTED | NOT  FOR  REPLICATION | SPARSE | HIDDEN_KEYWORD | MASKED  (WITH  (FUNCTION  EQUAL  STRING | LR_BRACKET  FUNCTION  EQUAL  STRING  RR_BRACKET))?)
    /// </summary>
    public partial class AstColumnModifier : AstRule
    {
        
        private AstId _id;
        
        private AstAddDrop _addDrop;
        
        public AstColumnModifier(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
            }
        }
        
        public AstColumnModifier(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnModifier(this);
        }
    }
    
    /// <summary>
    /// materialized_column_definition
    /// 	 : id_  (COMPUTE | AS)  expression  (MATERIALIZED | NOT  MATERIALIZED)?
    /// </summary>
    public partial class AstMaterializedColumnDefinition : AstRule
    {
        
        private AstId _id;
        
        private AstExpression _expression;
        
        public AstMaterializedColumnDefinition(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstMaterializedColumnDefinition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMaterializedColumnDefinition(this);
        }
    }
    
    /// <summary>
    /// column_index
    /// 	 : INDEX  index_id?  create_table_index_options?  on_partition_or_filegroup?  (FILESTREAM_ON  (filestream_filegroup_or_partition_schema_id | NULL_DOUBLE_QUOTE))?
    /// </summary>
    public partial class AstColumnIndex : AstRule
    {
        
        private AstIndexId _indexId;
        
        private AstCreateTableIndexOptions _createTableIndexOptions;
        
        private AstOnPartitionOrFilegroup _onPartitionOrFilegroup;
        
        public AstColumnIndex(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateTableIndexOptions>())
                {
                    this._createTableIndexOptions = ((AstCreateTableIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup>())
                {
                    this._onPartitionOrFilegroup = ((AstOnPartitionOrFilegroup)(enumerator.Current));
                }
            }
        }
        
        public AstColumnIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateTableIndexOptions>())
                {
                    this._createTableIndexOptions = ((AstCreateTableIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup>())
                {
                    this._onPartitionOrFilegroup = ((AstOnPartitionOrFilegroup)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexId IndexId
        {
            get
            {
                return this._indexId;
            }
        }
        
        public virtual AstCreateTableIndexOptions CreateTableIndexOptions
        {
            get
            {
                return this._createTableIndexOptions;
            }
        }
        
        public virtual AstOnPartitionOrFilegroup OnPartitionOrFilegroup
        {
            get
            {
                return this._onPartitionOrFilegroup;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnIndex(this);
        }
    }
    
    /// <summary>
    /// primary_key_options
    /// 	 : (WITH  FILLFACTOR  EQUAL  DECIMAL)?  alter_table_index_options?  on_partition_or_filegroup?
    /// </summary>
    public partial class AstPrimaryKeyOptions : AstRule
    {
        
        private AstAlterTableIndexOptions _alterTableIndexOptions;
        
        private AstOnPartitionOrFilegroup _onPartitionOrFilegroup;
        
        public AstPrimaryKeyOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterTableIndexOptions>())
                {
                    this._alterTableIndexOptions = ((AstAlterTableIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup>())
                {
                    this._onPartitionOrFilegroup = ((AstOnPartitionOrFilegroup)(enumerator.Current));
                }
            }
        }
        
        public AstPrimaryKeyOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterTableIndexOptions>())
                {
                    this._alterTableIndexOptions = ((AstAlterTableIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup>())
                {
                    this._onPartitionOrFilegroup = ((AstOnPartitionOrFilegroup)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterTableIndexOptions AlterTableIndexOptions
        {
            get
            {
                return this._alterTableIndexOptions;
            }
        }
        
        public virtual AstOnPartitionOrFilegroup OnPartitionOrFilegroup
        {
            get
            {
                return this._onPartitionOrFilegroup;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrimaryKeyOptions(this);
        }
    }
    
    /// <summary>
    /// foreign_key_options
    /// 	 : REFERENCES  full_table_ref  LR_BRACKET  pk = column_name_list  RR_BRACKET  on_delete?  on_update?  (NOT  FOR  REPLICATION)?
    /// </summary>
    public partial class AstForeignKeyOptions : AstRule
    {
        
        private AstFullTableRef _fullTableRef;
        
        private AstOnDelete _onDelete;
        
        private AstOnUpdate _onUpdate;
        
        public AstForeignKeyOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnDelete>())
                {
                    this._onDelete = ((AstOnDelete)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnUpdate>())
                {
                    this._onUpdate = ((AstOnUpdate)(enumerator.Current));
                }
            }
        }
        
        public AstForeignKeyOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnDelete>())
                {
                    this._onDelete = ((AstOnDelete)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnUpdate>())
                {
                    this._onUpdate = ((AstOnUpdate)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstOnDelete OnDelete
        {
            get
            {
                return this._onDelete;
            }
        }
        
        public virtual AstOnUpdate OnUpdate
        {
            get
            {
                return this._onUpdate;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitForeignKeyOptions(this);
        }
    }
    
    /// <summary>
    /// check_constraint
    /// 	 : CHECK  (NOT  FOR  REPLICATION)?  LR_BRACKET  search_condition  RR_BRACKET
    /// </summary>
    public partial class AstCheckConstraint : AstRule
    {
        
        private AstSearchCondition _searchCondition;
        
        public AstCheckConstraint(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstCheckConstraint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCheckConstraint(this);
        }
    }
    
    /// <summary>
    /// declare_cursor
    /// 	 : DECLARE  cursor_name  (CURSOR  (declare_set_cursor_common  (FOR  UPDATE  (OF  column_name_list)?)?)? | sensitive?  SCROLL?  CURSOR  FOR  select_statement_standalone  (FOR  (READ  ONLY | UPDATE | (OF  column_name_list)))?)  SEMI?
    /// </summary>
    public partial class AstDeclareCursor : AstRule
    {
        
        private AstCursorName _cursorName;
        
        public AstDeclareCursor(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
            }
        }
        
        public AstDeclareCursor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCursorName CursorName
        {
            get
            {
                return this._cursorName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareCursor(this);
        }
    }
    
    /// <summary>
    /// declare_set_cursor_common
    /// 	 : declare_set_cursor_common_partial*  FOR  select_statement_standalone
    /// </summary>
    public partial class AstDeclareSetCursorCommon : AstRule
    {
        
        private AstDeclareSetCursorCommonPartial _declareSetCursorCommonPartial;
        
        private AstSelectStatementStandalone _selectStatementStandalone;
        
        public AstDeclareSetCursorCommon(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDeclareSetCursorCommonPartial>())
                {
                    this._declareSetCursorCommonPartial = ((AstDeclareSetCursorCommonPartial)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public AstDeclareSetCursorCommon(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDeclareSetCursorCommonPartial>())
                {
                    this._declareSetCursorCommonPartial = ((AstDeclareSetCursorCommonPartial)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDeclareSetCursorCommonPartial DeclareSetCursorCommonPartial
        {
            get
            {
                return this._declareSetCursorCommonPartial;
            }
        }
        
        public virtual AstSelectStatementStandalone SelectStatementStandalone
        {
            get
            {
                return this._selectStatementStandalone;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareSetCursorCommon(this);
        }
    }
    
    /// <summary>
    /// fetch_cursor
    /// 	 : FETCH  ((fetch_cursor_strategy | absolute_relative  expression)?  FROM)?  GLOBAL?  cursor_name  (INTO  local_ids)?  SEMI?
    /// </summary>
    public partial class AstFetchCursor : AstRule
    {
        
        private AstCursorName _cursorName;
        
        public AstFetchCursor(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
            }
        }
        
        public AstFetchCursor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCursorName CursorName
        {
            get
            {
                return this._cursorName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFetchCursor(this);
        }
    }
    
    /// <summary>
    /// time_zone
    /// 	 : AT_KEYWORD  TIME  ZONE  expression
    /// </summary>
    public partial class AstTimeZone : AstRule
    {
        
        private AstExpression _expression;
        
        public AstTimeZone(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstTimeZone(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTimeZone(this);
        }
    }
    
    /// <summary>
    /// predicate_multi_assign
    /// 	 : left = expression  MULT_ASSIGN  right = expression
    /// </summary>
    public partial class AstPredicateMultiAssign : AstRule
    {
        
        public AstPredicateMultiAssign(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
            }
        }
        
        public AstPredicateMultiAssign(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateMultiAssign(this);
        }
    }
    
    /// <summary>
    /// predicate_binary
    /// 	 : left = expression  comparison_operator  right = expression
    /// </summary>
    public partial class AstPredicateBinary : AstRule
    {
        
        private AstComparisonOperator _comparisonOperator;
        
        public AstPredicateBinary(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstComparisonOperator>())
                {
                    this._comparisonOperator = ((AstComparisonOperator)(enumerator.Current));
                }
            }
        }
        
        public AstPredicateBinary(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstComparisonOperator>())
                {
                    this._comparisonOperator = ((AstComparisonOperator)(enumerator.Current));
                }
            }
        }
        
        public virtual AstComparisonOperator ComparisonOperator
        {
            get
            {
                return this._comparisonOperator;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateBinary(this);
        }
    }
    
    /// <summary>
    /// predicate_tier
    /// 	 : init = expression  NOT*  BETWEEN  left = expression  AND  right = expression
    /// </summary>
    public partial class AstPredicateTier : AstRule
    {
        
        public AstPredicateTier(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
            }
        }
        
        public AstPredicateTier(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateTier(this);
        }
    }
    
    /// <summary>
    /// predicate_not_like
    /// 	 : left = expression  NOT*  LIKE  right = expression  (ESCAPE  escape = expression)?
    /// </summary>
    public partial class AstPredicateNotLike : AstRule
    {
        
        public AstPredicateNotLike(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
            }
        }
        
        public AstPredicateNotLike(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateNotLike(this);
        }
    }
    
    /// <summary>
    /// predicate_not_in
    /// 	 : left = expression  NOT*  IN  LR_BRACKET  (subquery | expression_list)  RR_BRACKET
    /// </summary>
    public partial class AstPredicateNotIn : AstRule
    {
        
        public AstPredicateNotIn(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
            }
        }
        
        public AstPredicateNotIn(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateNotIn(this);
        }
    }
    
    /// <summary>
    /// select_order_by_clause
    /// 	 : order_by_clause  (OFFSET  offset_exp = expression  offset_rows = (ROW | ROWS)  (FETCH  fetch_offset = (FIRST | NEXT)  fetch_exp = expression  fetch_rows = (ROW | ROWS)  ONLY)?)?
    /// </summary>
    public partial class AstSelectOrderByClause : AstRule
    {
        
        private AstOrderByClause _orderByClause;
        
        public AstSelectOrderByClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOrderByClause>())
                {
                    this._orderByClause = ((AstOrderByClause)(enumerator.Current));
                }
            }
        }
        
        public AstSelectOrderByClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOrderByClause>())
                {
                    this._orderByClause = ((AstOrderByClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOrderByClause OrderByClause
        {
            get
            {
                return this._orderByClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectOrderByClause(this);
        }
    }
    
    /// <summary>
    /// for_clause_xml_raw
    /// 	 : FOR  XML  (RAW  (LR_BRACKET  xmlraw = STRING  RR_BRACKET)? | AUTO)  xml_common_directives*  (COMMA  (XMLDATA | XMLSCHEMA  (LR_BRACKET  xml_schema = STRING  RR_BRACKET)?))?  (COMMA  ELEMENTS  (XSINIL | ABSENT)?)?
    /// </summary>
    public partial class AstForClauseXmlRaw : AstRule
    {
        
        private AstXmlCommonDirectives _xmlCommonDirectives;
        
        public AstForClauseXmlRaw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstXmlCommonDirectives>())
                {
                    this._xmlCommonDirectives = ((AstXmlCommonDirectives)(enumerator.Current));
                }
            }
        }
        
        public AstForClauseXmlRaw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstXmlCommonDirectives>())
                {
                    this._xmlCommonDirectives = ((AstXmlCommonDirectives)(enumerator.Current));
                }
            }
        }
        
        public virtual AstXmlCommonDirectives XmlCommonDirectives
        {
            get
            {
                return this._xmlCommonDirectives;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitForClauseXmlRaw(this);
        }
    }
    
    /// <summary>
    /// table_asterisk
    /// 	 : full_table_ref  DOT  STAR
    /// </summary>
    public partial class AstTableAsterisk : AstSelectListElem
    {
        
        private AstFullTableRef _fullTableRef;
        
        public AstTableAsterisk(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstTableAsterisk(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableAsterisk(this);
        }
    }
    
    /// <summary>
    /// column_elem
    /// 	 : column_elem_target  as_column_alias?
    /// </summary>
    public partial class AstColumnElem : AstSelectListElem
    {
        
        private AstColumnElemTarget _columnElemTarget;
        
        private AstAsColumnAlias _asColumnAlias;
        
        public AstColumnElem(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnElemTarget>())
                {
                    this._columnElemTarget = ((AstColumnElemTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsColumnAlias>())
                {
                    this._asColumnAlias = ((AstAsColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public AstColumnElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnElemTarget>())
                {
                    this._columnElemTarget = ((AstColumnElemTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsColumnAlias>())
                {
                    this._asColumnAlias = ((AstAsColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnElemTarget ColumnElemTarget
        {
            get
            {
                return this._columnElemTarget;
            }
        }
        
        public virtual AstAsColumnAlias AsColumnAlias
        {
            get
            {
                return this._asColumnAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnElem(this);
        }
    }
    
    /// <summary>
    /// expression_assign_elem
    /// 	 : LOCAL_ID  (assignment_operator | EQUAL)  expression
    /// </summary>
    public partial class AstExpressionAssignElem : AstSelectListElem
    {
        
        private AstExpression _expression;
        
        public AstExpressionAssignElem(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstExpressionAssignElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressionAssignElem(this);
        }
    }
    
    /// <summary>
    /// open_xml
    /// 	 : OPENXML  LR_BRACKET  expression  COMMA  expression2  RR_BRACKET  (WITH  LR_BRACKET  schema_declaration  RR_BRACKET)?  as_table_alias?
    /// </summary>
    public partial class AstOpenXml : AstRule
    {
        
        private AstExpression _expression;
        
        private AstExpression2 _expression2;
        
        private AstAsTableAlias _asTableAlias;
        
        public AstOpenXml(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this._expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstOpenXml(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this._expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstExpression2 Expression2
        {
            get
            {
                return this._expression2;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenXml(this);
        }
    }
    
    /// <summary>
    /// open_json
    /// 	 : OPENJSON  LR_BRACKET  expression2  RR_BRACKET  (WITH  LR_BRACKET  json_declaration  RR_BRACKET)?  as_table_alias?
    /// </summary>
    public partial class AstOpenJson : AstRule
    {
        
        private AstExpression2 _expression2;
        
        private AstAsTableAlias _asTableAlias;
        
        public AstOpenJson(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this._expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstOpenJson(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this._expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression2 Expression2
        {
            get
            {
                return this._expression2;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenJson(this);
        }
    }
    
    /// <summary>
    /// json_column_declaration
    /// 	 : column_declaration  (AS  JSON)?
    /// </summary>
    public partial class AstJsonColumnDeclaration : AstRule
    {
        
        private AstColumnDeclaration _columnDeclaration;
        
        public AstJsonColumnDeclaration(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDeclaration>())
                {
                    this._columnDeclaration = ((AstColumnDeclaration)(enumerator.Current));
                }
            }
        }
        
        public AstJsonColumnDeclaration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDeclaration>())
                {
                    this._columnDeclaration = ((AstColumnDeclaration)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnDeclaration ColumnDeclaration
        {
            get
            {
                return this._columnDeclaration;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitJsonColumnDeclaration(this);
        }
    }
    
    /// <summary>
    /// column_declaration
    /// 	 : id_  data_type  STRING?
    /// </summary>
    public partial class AstColumnDeclaration : AstRule
    {
        
        private AstId _id;
        
        private AstDataType _dataType;
        
        public AstColumnDeclaration(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
            }
        }
        
        public AstColumnDeclaration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDeclaration(this);
        }
    }
    
    /// <summary>
    /// cross_join
    /// 	 : CROSS  JOIN  table_source
    /// </summary>
    public partial class AstCrossJoin : AstJoinPart
    {
        
        private AstTableSource _tableSource;
        
        public AstCrossJoin(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableSource>())
                {
                    this._tableSource = ((AstTableSource)(enumerator.Current));
                }
            }
        }
        
        public AstCrossJoin(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableSource>())
                {
                    this._tableSource = ((AstTableSource)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableSource TableSource
        {
            get
            {
                return this._tableSource;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCrossJoin(this);
        }
    }
    
    /// <summary>
    /// pivot
    /// 	 : PIVOT  pivot_clause  as_table_alias
    /// </summary>
    public partial class AstPivot : AstJoinPart
    {
        
        private AstPivotClause _pivotClause;
        
        private AstAsTableAlias _asTableAlias;
        
        public AstPivot(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPivotClause>())
                {
                    this._pivotClause = ((AstPivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstPivot(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPivotClause>())
                {
                    this._pivotClause = ((AstPivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPivotClause PivotClause
        {
            get
            {
                return this._pivotClause;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPivot(this);
        }
    }
    
    /// <summary>
    /// unpivot
    /// 	 : UNPIVOT  unpivot_clause  as_table_alias
    /// </summary>
    public partial class AstUnpivot : AstJoinPart
    {
        
        private AstUnpivotClause _unpivotClause;
        
        private AstAsTableAlias _asTableAlias;
        
        public AstUnpivot(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUnpivotClause>())
                {
                    this._unpivotClause = ((AstUnpivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstUnpivot(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUnpivotClause>())
                {
                    this._unpivotClause = ((AstUnpivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUnpivotClause UnpivotClause
        {
            get
            {
                return this._unpivotClause;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnpivot(this);
        }
    }
    
    /// <summary>
    /// pivot_clause
    /// 	 : LR_BRACKET  aggregate_windowed_function  FOR  full_column_name  IN  column_alias_list  RR_BRACKET
    /// </summary>
    public partial class AstPivotClause : AstRule
    {
        
        private AstAggregateWindowedFunction _aggregateWindowedFunction;
        
        private AstFullColumnName _fullColumnName;
        
        private AstColumnAliasList _columnAliasList;
        
        public AstPivotClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAggregateWindowedFunction>())
                {
                    this._aggregateWindowedFunction = ((AstAggregateWindowedFunction)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnAliasList>())
                {
                    this._columnAliasList = ((AstColumnAliasList)(enumerator.Current));
                }
            }
        }
        
        public AstPivotClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAggregateWindowedFunction>())
                {
                    this._aggregateWindowedFunction = ((AstAggregateWindowedFunction)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnAliasList>())
                {
                    this._columnAliasList = ((AstColumnAliasList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAggregateWindowedFunction AggregateWindowedFunction
        {
            get
            {
                return this._aggregateWindowedFunction;
            }
        }
        
        public virtual AstFullColumnName FullColumnName
        {
            get
            {
                return this._fullColumnName;
            }
        }
        
        public virtual AstColumnAliasList ColumnAliasList
        {
            get
            {
                return this._columnAliasList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPivotClause(this);
        }
    }
    
    /// <summary>
    /// unpivot_clause
    /// 	 : LR_BRACKET  unpivot_exp = expression  FOR  full_column_name  IN  LR_BRACKET  full_column_name_list  RR_BRACKET  RR_BRACKET
    /// </summary>
    public partial class AstUnpivotClause : AstRule
    {
        
        private AstFullColumnName _fullColumnName;
        
        private AstFullColumnNameList _fullColumnNameList;
        
        public AstUnpivotClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnNameList>())
                {
                    this._fullColumnNameList = ((AstFullColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public AstUnpivotClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnNameList>())
                {
                    this._fullColumnNameList = ((AstFullColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullColumnName FullColumnName
        {
            get
            {
                return this._fullColumnName;
            }
        }
        
        public virtual AstFullColumnNameList FullColumnNameList
        {
            get
            {
                return this._fullColumnNameList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnpivotClause(this);
        }
    }
    
    /// <summary>
    /// bulk_option
    /// 	 : id_  EQUAL  bulk_option_value = decimal_string
    /// </summary>
    public partial class AstBulkOption : AstRule
    {
        
        private AstId _id;
        
        public AstBulkOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstBulkOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBulkOption(this);
        }
    }
    
    /// <summary>
    /// partition_function
    /// 	 : (database_id  DOT)?  DOLLAR_PARTITION  DOT  function_id  LR_BRACKET  expression  RR_BRACKET
    /// </summary>
    public partial class AstPartitionFunction : AstRule
    {
        
        private AstFunctionId _functionId;
        
        private AstExpression _expression;
        
        public AstPartitionFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionId>())
                {
                    this._functionId = ((AstFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstPartitionFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionId>())
                {
                    this._functionId = ((AstFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFunctionId FunctionId
        {
            get
            {
                return this._functionId;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionFunction(this);
        }
    }
    
    /// <summary>
    /// freetext_table_andcolumn_names
    /// 	 : full_table_ref  COMMA  (full_column_name | full_column_names | STAR)
    /// </summary>
    public partial class AstFreetextTableAndcolumnNames : AstRule
    {
        
        private AstFullTableRef _fullTableRef;
        
        public AstFreetextTableAndcolumnNames(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstFreetextTableAndcolumnNames(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFreetextTableAndcolumnNames(this);
        }
    }
    
    /// <summary>
    /// switch_section
    /// 	 : WHEN  expression  THEN  expression
    /// </summary>
    public partial class AstSwitchSection : AstRule
    {
        
        private AstExpression _expression;
        
        public AstSwitchSection(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstSwitchSection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSwitchSection(this);
        }
    }
    
    /// <summary>
    /// switch_search_condition_section
    /// 	 : WHEN  search_condition  THEN  expression
    /// </summary>
    public partial class AstSwitchSearchConditionSection : AstRule
    {
        
        private AstSearchCondition _searchCondition;
        
        private AstExpression _expression;
        
        public AstSwitchSearchConditionSection(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstSwitchSearchConditionSection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSwitchSearchConditionSection(this);
        }
    }
    
    /// <summary>
    /// as_column_alias
    /// 	 : AS?  column_alias
    /// </summary>
    public partial class AstAsColumnAlias : AstRule
    {
        
        private AstColumnAlias _columnAlias;
        
        public AstAsColumnAlias(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnAlias>())
                {
                    this._columnAlias = ((AstColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public AstAsColumnAlias(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnAlias>())
                {
                    this._columnAlias = ((AstColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnAlias ColumnAlias
        {
            get
            {
                return this._columnAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsColumnAlias(this);
        }
    }
    
    /// <summary>
    /// as_table_alias
    /// 	 : AS?  table_alias
    /// </summary>
    public partial class AstAsTableAlias : AstRule
    {
        
        private AstTableAlias _tableAlias;
        
        public AstAsTableAlias(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableAlias>())
                {
                    this._tableAlias = ((AstTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstAsTableAlias(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableAlias>())
                {
                    this._tableAlias = ((AstTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableAlias TableAlias
        {
            get
            {
                return this._tableAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsTableAlias(this);
        }
    }
    
    /// <summary>
    /// deprecated_table_hint
    /// 	 : LR_BRACKET  table_hint  RR_BRACKET
    /// </summary>
    public partial class AstDeprecatedTableHint : AstRule
    {
        
        private AstTableHint _tableHint;
        
        public AstDeprecatedTableHint(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableHint>())
                {
                    this._tableHint = ((AstTableHint)(enumerator.Current));
                }
            }
        }
        
        public AstDeprecatedTableHint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableHint>())
                {
                    this._tableHint = ((AstTableHint)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableHint TableHint
        {
            get
            {
                return this._tableHint;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeprecatedTableHint(this);
        }
    }
    
    /// <summary>
    /// all_distinct_expression
    /// 	 : (ALL | DISTINCT)?  expression
    /// </summary>
    public partial class AstAllDistinctExpression : AstRule
    {
        
        private AstExpression _expression;
        
        public AstAllDistinctExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstAllDistinctExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAllDistinctExpression(this);
        }
    }
    
    /// <summary>
    /// over_clause
    /// 	 : OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  order_by_clause?  row_or_range_clause?  RR_BRACKET
    /// </summary>
    public partial class AstOverClause : AstRule
    {
        
        private AstOrderByClause _orderByClause;
        
        private AstRowOrRangeClause _rowOrRangeClause;
        
        public AstOverClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOrderByClause>())
                {
                    this._orderByClause = ((AstOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowOrRangeClause>())
                {
                    this._rowOrRangeClause = ((AstRowOrRangeClause)(enumerator.Current));
                }
            }
        }
        
        public AstOverClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOrderByClause>())
                {
                    this._orderByClause = ((AstOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowOrRangeClause>())
                {
                    this._rowOrRangeClause = ((AstRowOrRangeClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOrderByClause OrderByClause
        {
            get
            {
                return this._orderByClause;
            }
        }
        
        public virtual AstRowOrRangeClause RowOrRangeClause
        {
            get
            {
                return this._rowOrRangeClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOverClause(this);
        }
    }
    
    /// <summary>
    /// row_or_range_clause
    /// 	 : (ROWS | RANGE)  window_frame_extent
    /// </summary>
    public partial class AstRowOrRangeClause : AstRule
    {
        
        private AstWindowFrameExtent _windowFrameExtent;
        
        public AstRowOrRangeClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWindowFrameExtent>())
                {
                    this._windowFrameExtent = ((AstWindowFrameExtent)(enumerator.Current));
                }
            }
        }
        
        public AstRowOrRangeClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWindowFrameExtent>())
                {
                    this._windowFrameExtent = ((AstWindowFrameExtent)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWindowFrameExtent WindowFrameExtent
        {
            get
            {
                return this._windowFrameExtent;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRowOrRangeClause(this);
        }
    }
    
    /// <summary>
    /// file_group
    /// 	 : FILEGROUP  file_group_id  (CONTAINS  FILESTREAM)?  (DEFAULT)?  (CONTAINS  MEMORY_OPTIMIZED_DATA)?  file_specs
    /// </summary>
    public partial class AstFileGroup : AstDatabaseFileSpec
    {
        
        private AstFileGroupId _fileGroupId;
        
        private AstFileSpecs _fileSpecs;
        
        public AstFileGroup(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpecs>())
                {
                    this._fileSpecs = ((AstFileSpecs)(enumerator.Current));
                }
            }
        }
        
        public AstFileGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpecs>())
                {
                    this._fileSpecs = ((AstFileSpecs)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFileGroupId FileGroupId
        {
            get
            {
                return this._fileGroupId;
            }
        }
        
        public virtual AstFileSpecs FileSpecs
        {
            get
            {
                return this._fileSpecs;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileGroup(this);
        }
    }
    
    /// <summary>
    /// file_spec
    /// 	 : LR_BRACKET  NAME  EQUAL  id_or_string  COMMA?  FILENAME  EQUAL  file = STRING  COMMA?  (SIZE  EQUAL  size = file_size  COMMA?)?  (MAXSIZE  EQUAL  max_size  COMMA?)?  (FILEGROWTH  EQUAL  filegrowth = file_size  COMMA?)?  RR_BRACKET
    /// </summary>
    public partial class AstFileSpec : AstDatabaseFileSpec
    {
        
        private AstIdOrString _idOrString;
        
        public AstFileSpec(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIdOrString>())
                {
                    this._idOrString = ((AstIdOrString)(enumerator.Current));
                }
            }
        }
        
        public AstFileSpec(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIdOrString>())
                {
                    this._idOrString = ((AstIdOrString)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIdOrString IdOrString
        {
            get
            {
                return this._idOrString;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileSpec(this);
        }
    }
    
    /// <summary>
    /// begin_conversation_timer
    /// 	 : BEGIN  CONVERSATION  TIMER  LR_BRACKET  LOCAL_ID  RR_BRACKET  TIMEOUT  EQUAL  time  SEMI?
    /// </summary>
    public partial class AstBeginConversationTimer : AstConversationStatement
    {
        
        private AstTime _time;
        
        public AstBeginConversationTimer(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTime>())
                {
                    this._time = ((AstTime)(enumerator.Current));
                }
            }
        }
        
        public AstBeginConversationTimer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTime>())
                {
                    this._time = ((AstTime)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTime Time
        {
            get
            {
                return this._time;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBeginConversationTimer(this);
        }
    }
    
    /// <summary>
    /// begin_conversation_dialog
    /// 	 : BEGIN  DIALOG  (CONVERSATION)?  dialog_handle = LOCAL_ID  FROM  SERVICE  initiator_service_name = service_name  TO  SERVICE  target_service_name = service_name  (COMMA  service_broker_guid = STRING)?  ON  CONTRACT  contract_name_expression  (WITH  ((RELATED_CONVERSATION | RELATED_CONVERSATION_GROUP)  EQUAL  LOCAL_ID  COMMA?)?  (LIFETIME  EQUAL  decimal_local_id  COMMA?)?  (ENCRYPTION  EQUAL  on_off)?)?  SEMI?
    /// </summary>
    public partial class AstBeginConversationDialog : AstConversationStatement
    {
        
        private AstContractNameExpression _contractNameExpression;
        
        public AstBeginConversationDialog(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContractNameExpression>())
                {
                    this._contractNameExpression = ((AstContractNameExpression)(enumerator.Current));
                }
            }
        }
        
        public AstBeginConversationDialog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContractNameExpression>())
                {
                    this._contractNameExpression = ((AstContractNameExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstContractNameExpression ContractNameExpression
        {
            get
            {
                return this._contractNameExpression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBeginConversationDialog(this);
        }
    }
    
    /// <summary>
    /// waitfor_conversation
    /// 	 : WAITFOR?  LR_BRACKET  get_conversation  RR_BRACKET  (COMMA?  TIMEOUT  timeout = time)?  SEMI?
    /// </summary>
    public partial class AstWaitforConversation : AstConversationStatement
    {
        
        private AstGetConversation _getConversation;
        
        public AstWaitforConversation(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGetConversation>())
                {
                    this._getConversation = ((AstGetConversation)(enumerator.Current));
                }
            }
        }
        
        public AstWaitforConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGetConversation>())
                {
                    this._getConversation = ((AstGetConversation)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGetConversation GetConversation
        {
            get
            {
                return this._getConversation;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWaitforConversation(this);
        }
    }
    
    /// <summary>
    /// file_size
    /// 	 : DECIMAL  file_size_unity?
    /// </summary>
    public partial class AstFileSize : AstRule
    {
        
        private AstFileSizeUnity _fileSizeUnity;
        
        public AstFileSize(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileSizeUnity>())
                {
                    this._fileSizeUnity = ((AstFileSizeUnity)(enumerator.Current));
                }
            }
        }
        
        public AstFileSize(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileSizeUnity>())
                {
                    this._fileSizeUnity = ((AstFileSizeUnity)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFileSizeUnity FileSizeUnity
        {
            get
            {
                return this._fileSizeUnity;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileSize(this);
        }
    }
    
    /// <summary>
    /// schema_security_predicate_function_id
    /// 	 : tvf_schema_id  DOT  security_predicate_function_id
    /// </summary>
    public partial class AstSchemaSecurityPredicateFunctionId : AstRule
    {
        
        private AstTvfSchemaId _tvfSchemaId;
        
        private AstSecurityPredicateFunctionId _securityPredicateFunctionId;
        
        public AstSchemaSecurityPredicateFunctionId(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTvfSchemaId>())
                {
                    this._tvfSchemaId = ((AstTvfSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSecurityPredicateFunctionId>())
                {
                    this._securityPredicateFunctionId = ((AstSecurityPredicateFunctionId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaSecurityPredicateFunctionId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTvfSchemaId>())
                {
                    this._tvfSchemaId = ((AstTvfSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSecurityPredicateFunctionId>())
                {
                    this._securityPredicateFunctionId = ((AstSecurityPredicateFunctionId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTvfSchemaId TvfSchemaId
        {
            get
            {
                return this._tvfSchemaId;
            }
        }
        
        public virtual AstSecurityPredicateFunctionId SecurityPredicateFunctionId
        {
            get
            {
                return this._securityPredicateFunctionId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaSecurityPredicateFunctionId(this);
        }
    }
    
    /// <summary>
    /// schema_schema_id
    /// 	 : (schema_id  DOT)?  schema_id
    /// </summary>
    public partial class AstSchemaSchemaId : AstRule
    {
        
        private AstSchemaId _schemaId;
        
        public AstSchemaSchemaId(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaSchemaId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaId SchemaId
        {
            get
            {
                return this._schemaId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaSchemaId(this);
        }
    }
    
    /// <summary>
    /// schema_sql_identifier_id
    /// 	 : (schema_id  DOT)?  sql_identifier_id
    /// </summary>
    public partial class AstSchemaSqlIdentifierId : AstRule
    {
        
        private AstSqlIdentifierId _sqlIdentifierId;
        
        public AstSchemaSqlIdentifierId(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlIdentifierId>())
                {
                    this._sqlIdentifierId = ((AstSqlIdentifierId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaSqlIdentifierId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlIdentifierId>())
                {
                    this._sqlIdentifierId = ((AstSqlIdentifierId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSqlIdentifierId SqlIdentifierId
        {
            get
            {
                return this._sqlIdentifierId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaSqlIdentifierId(this);
        }
    }
    
    /// <summary>
    /// schema_security_policy_ref
    /// 	 : (schema_id  DOT)?  security_policy_id
    /// </summary>
    public partial class AstSchemaSecurityPolicyRef : AstRule
    {
        
        private AstSecurityPolicyId _securityPolicyId;
        
        public AstSchemaSecurityPolicyRef(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSecurityPolicyId>())
                {
                    this._securityPolicyId = ((AstSecurityPolicyId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaSecurityPolicyRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSecurityPolicyId>())
                {
                    this._securityPolicyId = ((AstSecurityPolicyId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSecurityPolicyId SecurityPolicyId
        {
            get
            {
                return this._securityPolicyId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaSecurityPolicyRef(this);
        }
    }
    
    /// <summary>
    /// drop_backward_compatible_index
    /// 	 : (schema_id  DOT)?  table_or_view_id  DOT  index_id
    /// </summary>
    public partial class AstDropBackwardCompatibleIndex : AstRule
    {
        
        private AstTableOrViewId _tableOrViewId;
        
        private AstIndexId _indexId;
        
        public AstDropBackwardCompatibleIndex(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableOrViewId>())
                {
                    this._tableOrViewId = ((AstTableOrViewId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
            }
        }
        
        public AstDropBackwardCompatibleIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableOrViewId>())
                {
                    this._tableOrViewId = ((AstTableOrViewId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableOrViewId TableOrViewId
        {
            get
            {
                return this._tableOrViewId;
            }
        }
        
        public virtual AstIndexId IndexId
        {
            get
            {
                return this._indexId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropBackwardCompatibleIndex(this);
        }
    }
    
    /// <summary>
    /// entity_name
    /// 	 : (server_id  DOT  database_id  DOT  schema_id  DOT | database_id  DOT  schema_id?  DOT | schema_id  DOT)?  object_id
    /// </summary>
    public partial class AstEntityName : AstRule
    {
        
        private AstObjectId _objectId;
        
        public AstEntityName(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstObjectId>())
                {
                    this._objectId = ((AstObjectId)(enumerator.Current));
                }
            }
        }
        
        public AstEntityName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstObjectId>())
                {
                    this._objectId = ((AstObjectId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstObjectId ObjectId
        {
            get
            {
                return this._objectId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEntityName(this);
        }
    }
    
    /// <summary>
    /// column_ordered
    /// 	 : column_id  asc_desc?
    /// </summary>
    public partial class AstColumnOrdered : AstRule
    {
        
        private AstColumnId _columnId;
        
        private AstAscDesc _ascDesc;
        
        public AstColumnOrdered(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAscDesc>())
                {
                    this._ascDesc = ((AstAscDesc)(enumerator.Current));
                }
            }
        }
        
        public AstColumnOrdered(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAscDesc>())
                {
                    this._ascDesc = ((AstAscDesc)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnId ColumnId
        {
            get
            {
                return this._columnId;
            }
        }
        
        public virtual AstAscDesc AscDesc
        {
            get
            {
                return this._ascDesc;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnOrdered(this);
        }
    }
    
    /// <summary>
    /// column_or_argument_ids
    /// 	 : column_or_argument_id  (COMMA?  column_or_argument_id)*
    /// </summary>
    public partial class AstColumnOrArgumentIds : AstRule
    {
        
        private AstColumnOrArgumentId _columnOrArgumentId;
        
        public AstColumnOrArgumentIds(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnOrArgumentId>())
                {
                    this._columnOrArgumentId = ((AstColumnOrArgumentId)(enumerator.Current));
                }
            }
        }
        
        public AstColumnOrArgumentIds(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnOrArgumentId>())
                {
                    this._columnOrArgumentId = ((AstColumnOrArgumentId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnOrArgumentId ColumnOrArgumentId
        {
            get
            {
                return this._columnOrArgumentId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnOrArgumentIds(this);
        }
    }
    
    /// <summary>
    /// create_index_options
    /// 	 : WITH  LR_BRACKET  relational_index_options  RR_BRACKET
    /// </summary>
    public partial class AstCreateIndexOptions : AstRule
    {
        
        private AstRelationalIndexOptions _relationalIndexOptions;
        
        public AstCreateIndexOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRelationalIndexOptions>())
                {
                    this._relationalIndexOptions = ((AstRelationalIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRelationalIndexOptions>())
                {
                    this._relationalIndexOptions = ((AstRelationalIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRelationalIndexOptions RelationalIndexOptions
        {
            get
            {
                return this._relationalIndexOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateIndexOptions(this);
        }
    }
    
    /// <summary>
    /// expression_language
    /// 	 : expression  (COMMA  LANGUAGE  expression)?
    /// </summary>
    public partial class AstExpressionLanguage : AstRule
    {
        
        private AstExpression _expression;
        
        public AstExpressionLanguage(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstExpressionLanguage(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressionLanguage(this);
        }
    }
    
    /// <summary>
    /// grouping_sets_list
    /// 	 : group_by_item  (COMMA  group_by_item)*
    /// </summary>
    public partial class AstGroupingSetsList : AstRule
    {
        
        private AstGroupByItem _groupByItem;
        
        public AstGroupingSetsList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupByItem>())
                {
                    this._groupByItem = ((AstGroupByItem)(enumerator.Current));
                }
            }
        }
        
        public AstGroupingSetsList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupByItem>())
                {
                    this._groupByItem = ((AstGroupByItem)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGroupByItem GroupByItem
        {
            get
            {
                return this._groupByItem;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupingSetsList(this);
        }
    }
    
    /// <summary>
    /// groupBys_list
    /// 	 : group_by_item  (COMMA  group_by_item)*
    /// </summary>
    public partial class AstGroupBysList : AstRule
    {
        
        private AstGroupByItem _groupByItem;
        
        public AstGroupBysList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupByItem>())
                {
                    this._groupByItem = ((AstGroupByItem)(enumerator.Current));
                }
            }
        }
        
        public AstGroupBysList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupByItem>())
                {
                    this._groupByItem = ((AstGroupByItem)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGroupByItem GroupByItem
        {
            get
            {
                return this._groupByItem;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupBysList(this);
        }
    }
    
    /// <summary>
    /// alter_table_index_options
    /// 	 : WITH  LR_BRACKET  alter_table_index_option  (COMMA  alter_table_index_option)*  RR_BRACKET
    /// </summary>
    public partial class AstAlterTableIndexOptions : AstRule
    {
        
        private AstAlterTableIndexOption _alterTableIndexOption;
        
        public AstAlterTableIndexOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterTableIndexOption>())
                {
                    this._alterTableIndexOption = ((AstAlterTableIndexOption)(enumerator.Current));
                }
            }
        }
        
        public AstAlterTableIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterTableIndexOption>())
                {
                    this._alterTableIndexOption = ((AstAlterTableIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterTableIndexOption AlterTableIndexOption
        {
            get
            {
                return this._alterTableIndexOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterTableIndexOptions(this);
        }
    }
}
