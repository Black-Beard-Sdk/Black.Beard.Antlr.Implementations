//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Asts.TSql
{
    using System;
    using Bb.Parsers;
    using Antlr4.Runtime;
    using System.Collections;
    using Antlr4.Runtime.Tree;
    
    
    /// <summary>
    /// block_statement
    /// 	 : BEGIN  SEMI?  sql_clause*?  END  SEMI?
    /// </summary>
    public partial class AstBlockStatement : AstRule
    {
        
        private AstSqlClause _sqlClause;
        
        public AstBlockStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlClause>())
                {
                    this._sqlClause = ((AstSqlClause)(enumerator.Current));
                }
            }
        }
        
        public AstBlockStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlClause>())
                {
                    this._sqlClause = ((AstSqlClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSqlClause SqlClause
        {
            get
            {
                return this._sqlClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBlockStatement(this);
        }
    }
    
    /// <summary>
    /// return_statement
    /// 	 : RETURN  expression?  SEMI?
    /// </summary>
    public partial class AstReturnStatement : AstRule
    {
        
        private AstExpression _expression;
        
        public AstReturnStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstReturnStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReturnStatement(this);
        }
    }
    
    /// <summary>
    /// if_statement
    /// 	 : IF  search_condition  sql_clause_true = sql_clause  (ELSE  sql_clause_false = sql_clause)?  SEMI?
    /// </summary>
    public partial class AstIfStatement : AstRule
    {
        
        private AstSearchCondition _searchCondition;
        
        public AstIfStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstIfStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIfStatement(this);
        }
    }
    
    /// <summary>
    /// waitfor_statement
    /// 	 : WAITFOR  receive_statement?  COMMA?  ((DELAY TIME TIMEOUT)  time)?  expression?  SEMI?
    /// </summary>
    public partial class AstWaitforStatement : AstRule
    {
        
        private AstReceiveStatement _receiveStatement;
        
        private AstExpression _expression;
        
        public AstWaitforStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReceiveStatement>())
                {
                    this._receiveStatement = ((AstReceiveStatement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstWaitforStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReceiveStatement>())
                {
                    this._receiveStatement = ((AstReceiveStatement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstReceiveStatement ReceiveStatement
        {
            get
            {
                return this._receiveStatement;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWaitforStatement(this);
        }
    }
    
    /// <summary>
    /// while_statement
    /// 	 : WHILE  search_condition  (sql_clause BREAK  SEMI? CONTINUE  SEMI?)
    /// </summary>
    public partial class AstWhileStatement : AstRule
    {
        
        private AstSearchCondition _searchCondition;
        
        public AstWhileStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstWhileStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWhileStatement(this);
        }
    }
    
    /// <summary>
    /// alter_application_role
    /// 	 : ALTER  APPLICATION  ROLE  application_role  WITH  (COMMA?  NAME  EQUAL  new_application_role_name)?  (COMMA?  PASSWORD  EQUAL  application_role_password = STRING)?  (COMMA?  DEFAULT_SCHEMA  EQUAL  app_role_schema)?
    /// </summary>
    public partial class AstAlterApplicationRole : AstRule
    {
        
        private AstApplicationRole _applicationRole;
        
        public AstAlterApplicationRole(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstApplicationRole>())
                {
                    this._applicationRole = ((AstApplicationRole)(enumerator.Current));
                }
            }
        }
        
        public AstAlterApplicationRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstApplicationRole>())
                {
                    this._applicationRole = ((AstApplicationRole)(enumerator.Current));
                }
            }
        }
        
        public virtual AstApplicationRole ApplicationRole
        {
            get
            {
                return this._applicationRole;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterApplicationRole(this);
        }
    }
    
    /// <summary>
    /// create_application_role
    /// 	 : CREATE  APPLICATION  ROLE  application_role  WITH  (COMMA?  PASSWORD  EQUAL  application_role_password = STRING)?  (COMMA?  DEFAULT_SCHEMA  EQUAL  app_role_schema)?
    /// </summary>
    public partial class AstCreateApplicationRole : AstRule
    {
        
        private AstApplicationRole _applicationRole;
        
        public AstCreateApplicationRole(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstApplicationRole>())
                {
                    this._applicationRole = ((AstApplicationRole)(enumerator.Current));
                }
            }
        }
        
        public AstCreateApplicationRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstApplicationRole>())
                {
                    this._applicationRole = ((AstApplicationRole)(enumerator.Current));
                }
            }
        }
        
        public virtual AstApplicationRole ApplicationRole
        {
            get
            {
                return this._applicationRole;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateApplicationRole(this);
        }
    }
    
    /// <summary>
    /// drop_aggregate
    /// 	 : DROP  AGGREGATE  (IF  EXISTS)?  (schema_name  DOT)?  aggregate_name
    /// </summary>
    public partial class AstDropAggregate : AstRule
    {
        
        private AstAggregateName _aggregateName;
        
        public AstDropAggregate(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAggregateName>())
                {
                    this._aggregateName = ((AstAggregateName)(enumerator.Current));
                }
            }
        }
        
        public AstDropAggregate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAggregateName>())
                {
                    this._aggregateName = ((AstAggregateName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAggregateName AggregateName
        {
            get
            {
                return this._aggregateName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAggregate(this);
        }
    }
    
    /// <summary>
    /// drop_application_role
    /// 	 : DROP  APPLICATION  ROLE  role_name
    /// </summary>
    public partial class AstDropApplicationRole : AstRule
    {
        
        private AstRoleName _roleName;
        
        public AstDropApplicationRole(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this._roleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public AstDropApplicationRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this._roleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleName RoleName
        {
            get
            {
                return this._roleName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropApplicationRole(this);
        }
    }
    
    /// <summary>
    /// alter_assembly
    /// 	 : alter_assembly_start  assembly_name  alter_assembly_clause
    /// </summary>
    public partial class AstAlterAssembly : AstRule
    {
        
        private AstAlterAssemblyStart _alterAssemblyStart;
        
        private AstAssemblyName _assemblyName;
        
        private AstAlterAssemblyClause _alterAssemblyClause;
        
        public AstAlterAssembly(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyStart>())
                {
                    this._alterAssemblyStart = ((AstAlterAssemblyStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyName>())
                {
                    this._assemblyName = ((AstAssemblyName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyClause>())
                {
                    this._alterAssemblyClause = ((AstAlterAssemblyClause)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssembly(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyStart>())
                {
                    this._alterAssemblyStart = ((AstAlterAssemblyStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyName>())
                {
                    this._assemblyName = ((AstAssemblyName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyClause>())
                {
                    this._alterAssemblyClause = ((AstAlterAssemblyClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyStart AlterAssemblyStart
        {
            get
            {
                return this._alterAssemblyStart;
            }
        }
        
        public virtual AstAssemblyName AssemblyName
        {
            get
            {
                return this._assemblyName;
            }
        }
        
        public virtual AstAlterAssemblyClause AlterAssemblyClause
        {
            get
            {
                return this._alterAssemblyClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssembly(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_clause
    /// 	 : alter_assembly_from_clause?  alter_assembly_with_clause?  alter_assembly_drop_clause?  alter_assembly_add_clause?
    /// </summary>
    public partial class AstAlterAssemblyClause : AstRule
    {
        
        private AstAlterAssemblyFromClause _alterAssemblyFromClause;
        
        private AstAlterAssemblyWithClause _alterAssemblyWithClause;
        
        private AstAlterAssemblyDropClause _alterAssemblyDropClause;
        
        private AstAlterAssemblyAddClause _alterAssemblyAddClause;
        
        public AstAlterAssemblyClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClause>())
                {
                    this._alterAssemblyFromClause = ((AstAlterAssemblyFromClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyWithClause>())
                {
                    this._alterAssemblyWithClause = ((AstAlterAssemblyWithClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropClause>())
                {
                    this._alterAssemblyDropClause = ((AstAlterAssemblyDropClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyAddClause>())
                {
                    this._alterAssemblyAddClause = ((AstAlterAssemblyAddClause)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClause>())
                {
                    this._alterAssemblyFromClause = ((AstAlterAssemblyFromClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyWithClause>())
                {
                    this._alterAssemblyWithClause = ((AstAlterAssemblyWithClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropClause>())
                {
                    this._alterAssemblyDropClause = ((AstAlterAssemblyDropClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyAddClause>())
                {
                    this._alterAssemblyAddClause = ((AstAlterAssemblyAddClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyFromClause AlterAssemblyFromClause
        {
            get
            {
                return this._alterAssemblyFromClause;
            }
        }
        
        public virtual AstAlterAssemblyWithClause AlterAssemblyWithClause
        {
            get
            {
                return this._alterAssemblyWithClause;
            }
        }
        
        public virtual AstAlterAssemblyDropClause AlterAssemblyDropClause
        {
            get
            {
                return this._alterAssemblyDropClause;
            }
        }
        
        public virtual AstAlterAssemblyAddClause AlterAssemblyAddClause
        {
            get
            {
                return this._alterAssemblyAddClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyClause(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_from_clause
    /// 	 : alter_assembly_from_clause_start  (client_assembly_specifier alter_assembly_file_bits)
    /// </summary>
    public partial class AstAlterAssemblyFromClause : AstRule
    {
        
        private AstAlterAssemblyFromClauseStart _alterAssemblyFromClauseStart;
        
        public AstAlterAssemblyFromClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClauseStart>())
                {
                    this._alterAssemblyFromClauseStart = ((AstAlterAssemblyFromClauseStart)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyFromClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClauseStart>())
                {
                    this._alterAssemblyFromClauseStart = ((AstAlterAssemblyFromClauseStart)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyFromClauseStart AlterAssemblyFromClauseStart
        {
            get
            {
                return this._alterAssemblyFromClauseStart;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyFromClause(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_drop_clause
    /// 	 : alter_assembly_drop  alter_assembly_drop_multiple_files
    /// </summary>
    public partial class AstAlterAssemblyDropClause : AstRule
    {
        
        private AstAlterAssemblyDrop _alterAssemblyDrop;
        
        private AstAlterAssemblyDropMultipleFiles _alterAssemblyDropMultipleFiles;
        
        public AstAlterAssemblyDropClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyDrop>())
                {
                    this._alterAssemblyDrop = ((AstAlterAssemblyDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropMultipleFiles>())
                {
                    this._alterAssemblyDropMultipleFiles = ((AstAlterAssemblyDropMultipleFiles)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyDropClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyDrop>())
                {
                    this._alterAssemblyDrop = ((AstAlterAssemblyDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropMultipleFiles>())
                {
                    this._alterAssemblyDropMultipleFiles = ((AstAlterAssemblyDropMultipleFiles)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyDrop AlterAssemblyDrop
        {
            get
            {
                return this._alterAssemblyDrop;
            }
        }
        
        public virtual AstAlterAssemblyDropMultipleFiles AlterAssemblyDropMultipleFiles
        {
            get
            {
                return this._alterAssemblyDropMultipleFiles;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyDropClause(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_add_clause
    /// 	 : alter_asssembly_add_clause_start  alter_assembly_client_file_clause
    /// </summary>
    public partial class AstAlterAssemblyAddClause : AstRule
    {
        
        private AstAlterAsssemblyAddClauseStart _alterAsssemblyAddClauseStart;
        
        private AstAlterAssemblyClientFileClause _alterAssemblyClientFileClause;
        
        public AstAlterAssemblyAddClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAsssemblyAddClauseStart>())
                {
                    this._alterAsssemblyAddClauseStart = ((AstAlterAsssemblyAddClauseStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyClientFileClause>())
                {
                    this._alterAssemblyClientFileClause = ((AstAlterAssemblyClientFileClause)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyAddClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAsssemblyAddClauseStart>())
                {
                    this._alterAsssemblyAddClauseStart = ((AstAlterAsssemblyAddClauseStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyClientFileClause>())
                {
                    this._alterAssemblyClientFileClause = ((AstAlterAssemblyClientFileClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAsssemblyAddClauseStart AlterAsssemblyAddClauseStart
        {
            get
            {
                return this._alterAsssemblyAddClauseStart;
            }
        }
        
        public virtual AstAlterAssemblyClientFileClause AlterAssemblyClientFileClause
        {
            get
            {
                return this._alterAssemblyClientFileClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyAddClause(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_client_file_clause
    /// 	 : alter_assembly_file_name  (alter_assembly_as  id_)?
    /// </summary>
    public partial class AstAlterAssemblyClientFileClause : AstRule
    {
        
        private AstAlterAssemblyFileName _alterAssemblyFileName;
        
        public AstAlterAssemblyClientFileClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFileName>())
                {
                    this._alterAssemblyFileName = ((AstAlterAssemblyFileName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyClientFileClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFileName>())
                {
                    this._alterAssemblyFileName = ((AstAlterAssemblyFileName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyFileName AlterAssemblyFileName
        {
            get
            {
                return this._alterAssemblyFileName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyClientFileClause(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_file_bits
    /// 	 : alter_assembly_as  id_
    /// </summary>
    public partial class AstAlterAssemblyFileBits : AstRule
    {
        
        private AstAlterAssemblyAs _alterAssemblyAs;
        
        private AstId _id;
        
        public AstAlterAssemblyFileBits(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyAs>())
                {
                    this._alterAssemblyAs = ((AstAlterAssemblyAs)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyFileBits(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyAs>())
                {
                    this._alterAssemblyAs = ((AstAlterAssemblyAs)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyAs AlterAssemblyAs
        {
            get
            {
                return this._alterAssemblyAs;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyFileBits(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_with_clause
    /// 	 : alter_assembly_with  assembly_option
    /// </summary>
    public partial class AstAlterAssemblyWithClause : AstRule
    {
        
        private AstAlterAssemblyWith _alterAssemblyWith;
        
        private AstAssemblyOption _assemblyOption;
        
        public AstAlterAssemblyWithClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyWith>())
                {
                    this._alterAssemblyWith = ((AstAlterAssemblyWith)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyOption>())
                {
                    this._assemblyOption = ((AstAssemblyOption)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyWithClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyWith>())
                {
                    this._alterAssemblyWith = ((AstAlterAssemblyWith)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyOption>())
                {
                    this._assemblyOption = ((AstAssemblyOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyWith AlterAssemblyWith
        {
            get
            {
                return this._alterAssemblyWith;
            }
        }
        
        public virtual AstAssemblyOption AssemblyOption
        {
            get
            {
                return this._assemblyOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyWithClause(this);
        }
    }
    
    /// <summary>
    /// network_file_share
    /// 	 : network_file_start  network_computer  file_path
    /// </summary>
    public partial class AstNetworkFileShare : AstRule
    {
        
        private AstNetworkFileStart _networkFileStart;
        
        private AstNetworkComputer _networkComputer;
        
        private AstFilePath _filePath;
        
        public AstNetworkFileShare(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNetworkFileStart>())
                {
                    this._networkFileStart = ((AstNetworkFileStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstNetworkComputer>())
                {
                    this._networkComputer = ((AstNetworkComputer)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this._filePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public AstNetworkFileShare(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNetworkFileStart>())
                {
                    this._networkFileStart = ((AstNetworkFileStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstNetworkComputer>())
                {
                    this._networkComputer = ((AstNetworkComputer)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this._filePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public virtual AstNetworkFileStart NetworkFileStart
        {
            get
            {
                return this._networkFileStart;
            }
        }
        
        public virtual AstNetworkComputer NetworkComputer
        {
            get
            {
                return this._networkComputer;
            }
        }
        
        public virtual AstFilePath FilePath
        {
            get
            {
                return this._filePath;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNetworkFileShare(this);
        }
    }
    
    /// <summary>
    /// local_file
    /// 	 : local_drive  file_path
    /// </summary>
    public partial class AstLocalFile : AstRule
    {
        
        private AstLocalDrive _localDrive;
        
        private AstFilePath _filePath;
        
        public AstLocalFile(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalDrive>())
                {
                    this._localDrive = ((AstLocalDrive)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this._filePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public AstLocalFile(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalDrive>())
                {
                    this._localDrive = ((AstLocalDrive)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this._filePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalDrive LocalDrive
        {
            get
            {
                return this._localDrive;
            }
        }
        
        public virtual AstFilePath FilePath
        {
            get
            {
                return this._filePath;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLocalFile(this);
        }
    }
    
    /// <summary>
    /// create_assembly
    /// 	 : CREATE  ASSEMBLY  assembly_name  (AUTHORIZATION  owner_name)?  FROM  binary_content_nexts  (WITH  PERMISSION_SET  EQUAL  (SAFE EXTERNAL_ACCESS UNSAFE))?
    /// </summary>
    public partial class AstCreateAssembly : AstRule
    {
        
        private AstAssemblyName _assemblyName;
        
        private AstBinaryContentNexts _binaryContentNexts;
        
        public AstCreateAssembly(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyName>())
                {
                    this._assemblyName = ((AstAssemblyName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinaryContentNexts>())
                {
                    this._binaryContentNexts = ((AstBinaryContentNexts)(enumerator.Current));
                }
            }
        }
        
        public AstCreateAssembly(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyName>())
                {
                    this._assemblyName = ((AstAssemblyName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinaryContentNexts>())
                {
                    this._binaryContentNexts = ((AstBinaryContentNexts)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblyName AssemblyName
        {
            get
            {
                return this._assemblyName;
            }
        }
        
        public virtual AstBinaryContentNexts BinaryContentNexts
        {
            get
            {
                return this._binaryContentNexts;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateAssembly(this);
        }
    }
    
    /// <summary>
    /// binary_content_next
    /// 	 : COMMA?  binary_content
    /// </summary>
    public partial class AstBinaryContentNext : AstRule
    {
        
        private AstBinaryContent _binaryContent;
        
        public AstBinaryContentNext(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBinaryContent>())
                {
                    this._binaryContent = ((AstBinaryContent)(enumerator.Current));
                }
            }
        }
        
        public AstBinaryContentNext(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBinaryContent>())
                {
                    this._binaryContent = ((AstBinaryContent)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBinaryContent BinaryContent
        {
            get
            {
                return this._binaryContent;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBinaryContentNext(this);
        }
    }
    
    /// <summary>
    /// alter_asymmetric_key
    /// 	 : alter_asymmetric_key_start  asym_key_name  (asymmetric_key_option REMOVE  PRIVATE  KEY)
    /// </summary>
    public partial class AstAlterAsymmetricKey : AstRule
    {
        
        private AstAlterAsymmetricKeyStart _alterAsymmetricKeyStart;
        
        private AstAsymKeyName _asymKeyName;
        
        public AstAlterAsymmetricKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAsymmetricKeyStart>())
                {
                    this._alterAsymmetricKeyStart = ((AstAlterAsymmetricKeyStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymKeyName>())
                {
                    this._asymKeyName = ((AstAsymKeyName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAsymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAsymmetricKeyStart>())
                {
                    this._alterAsymmetricKeyStart = ((AstAlterAsymmetricKeyStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymKeyName>())
                {
                    this._asymKeyName = ((AstAsymKeyName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAsymmetricKeyStart AlterAsymmetricKeyStart
        {
            get
            {
                return this._alterAsymmetricKeyStart;
            }
        }
        
        public virtual AstAsymKeyName AsymKeyName
        {
            get
            {
                return this._asymKeyName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAsymmetricKey(this);
        }
    }
    
    /// <summary>
    /// asymmetric_key_option
    /// 	 : asymmetric_key_option_start  asymmetric_key_password_change_option  (COMMA  asymmetric_key_password_change_option)?  RR_BRACKET
    /// </summary>
    public partial class AstAsymmetricKeyOption : AstRule
    {
        
        private AstAsymmetricKeyOptionStart _asymmetricKeyOptionStart;
        
        private AstAsymmetricKeyPasswordChangeOption _asymmetricKeyPasswordChangeOption;
        
        public AstAsymmetricKeyOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymmetricKeyOptionStart>())
                {
                    this._asymmetricKeyOptionStart = ((AstAsymmetricKeyOptionStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymmetricKeyPasswordChangeOption>())
                {
                    this._asymmetricKeyPasswordChangeOption = ((AstAsymmetricKeyPasswordChangeOption)(enumerator.Current));
                }
            }
        }
        
        public AstAsymmetricKeyOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymmetricKeyOptionStart>())
                {
                    this._asymmetricKeyOptionStart = ((AstAsymmetricKeyOptionStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymmetricKeyPasswordChangeOption>())
                {
                    this._asymmetricKeyPasswordChangeOption = ((AstAsymmetricKeyPasswordChangeOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAsymmetricKeyOptionStart AsymmetricKeyOptionStart
        {
            get
            {
                return this._asymmetricKeyOptionStart;
            }
        }
        
        public virtual AstAsymmetricKeyPasswordChangeOption AsymmetricKeyPasswordChangeOption
        {
            get
            {
                return this._asymmetricKeyPasswordChangeOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsymmetricKeyOption(this);
        }
    }
    
    /// <summary>
    /// create_asymmetric_key
    /// 	 : CREATE  ASYMMETRIC  KEY  asym_key_name  (AUTHORIZATION  database_name)?  (FROM  (FILE  EQUAL  STRING EXECUTABLE_FILE  EQUAL  STRING ASSEMBLY  assembly_name PROVIDER  provider_name))?  (WITH  (ALGORITHM  EQUAL  (RSA_4096 RSA_3072 RSA_2048 RSA_1024 RSA_512) PROVIDER_KEY_NAME  EQUAL  provider_key_name = STRING CREATION_DISPOSITION  EQUAL  (CREATE_NEW OPEN_EXISTING)))?  (ENCRYPTION  BY  PASSWORD  EQUAL  asymmetric_key_password = STRING)?
    /// </summary>
    public partial class AstCreateAsymmetricKey : AstRule
    {
        
        private AstAsymKeyName _asymKeyName;
        
        public AstCreateAsymmetricKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymKeyName>())
                {
                    this._asymKeyName = ((AstAsymKeyName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateAsymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymKeyName>())
                {
                    this._asymKeyName = ((AstAsymKeyName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAsymKeyName AsymKeyName
        {
            get
            {
                return this._asymKeyName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateAsymmetricKey(this);
        }
    }
    
    /// <summary>
    /// alter_authorization
    /// 	 : alter_authorization_start  (class_type  colon_colon)?  entity = entity_name  entity_to  authorization_grantee
    /// </summary>
    public partial class AstAlterAuthorization : AstRule
    {
        
        private AstAlterAuthorizationStart _alterAuthorizationStart;
        
        private AstEntityTo _entityTo;
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        public AstAlterAuthorization(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAuthorizationStart>())
                {
                    this._alterAuthorizationStart = ((AstAlterAuthorizationStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityTo>())
                {
                    this._entityTo = ((AstEntityTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAuthorization(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAuthorizationStart>())
                {
                    this._alterAuthorizationStart = ((AstAlterAuthorizationStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityTo>())
                {
                    this._entityTo = ((AstEntityTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAuthorizationStart AlterAuthorizationStart
        {
            get
            {
                return this._alterAuthorizationStart;
            }
        }
        
        public virtual AstEntityTo EntityTo
        {
            get
            {
                return this._entityTo;
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorization(this);
        }
    }
    
    /// <summary>
    /// alter_authorization_for_sql_database
    /// 	 : alter_authorization_start  (class_type_for_sql_database  colon_colon)?  entity = entity_name  entity_to  authorization_grantee
    /// </summary>
    public partial class AstAlterAuthorizationForSqlDatabase : AstRule
    {
        
        private AstAlterAuthorizationStart _alterAuthorizationStart;
        
        private AstEntityTo _entityTo;
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        public AstAlterAuthorizationForSqlDatabase(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAuthorizationStart>())
                {
                    this._alterAuthorizationStart = ((AstAlterAuthorizationStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityTo>())
                {
                    this._entityTo = ((AstEntityTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAuthorizationForSqlDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAuthorizationStart>())
                {
                    this._alterAuthorizationStart = ((AstAlterAuthorizationStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityTo>())
                {
                    this._entityTo = ((AstEntityTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAuthorizationStart AlterAuthorizationStart
        {
            get
            {
                return this._alterAuthorizationStart;
            }
        }
        
        public virtual AstEntityTo EntityTo
        {
            get
            {
                return this._entityTo;
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationForSqlDatabase(this);
        }
    }
    
    /// <summary>
    /// alter_authorization_for_azure_dw
    /// 	 : alter_authorization_start  (class_type_for_azure_dw  colon_colon)?  entity = entity_name_for_azure_dw  entity_to  authorization_grantee
    /// </summary>
    public partial class AstAlterAuthorizationForAzureDw : AstRule
    {
        
        private AstAlterAuthorizationStart _alterAuthorizationStart;
        
        private AstEntityTo _entityTo;
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        public AstAlterAuthorizationForAzureDw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAuthorizationStart>())
                {
                    this._alterAuthorizationStart = ((AstAlterAuthorizationStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityTo>())
                {
                    this._entityTo = ((AstEntityTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAuthorizationForAzureDw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAuthorizationStart>())
                {
                    this._alterAuthorizationStart = ((AstAlterAuthorizationStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityTo>())
                {
                    this._entityTo = ((AstEntityTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAuthorizationStart AlterAuthorizationStart
        {
            get
            {
                return this._alterAuthorizationStart;
            }
        }
        
        public virtual AstEntityTo EntityTo
        {
            get
            {
                return this._entityTo;
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationForAzureDw(this);
        }
    }
    
    /// <summary>
    /// alter_authorization_for_parallel_dw
    /// 	 : alter_authorization_start  (class_type_for_parallel_dw  colon_colon)?  entity = entity_name_for_parallel_dw  entity_to  authorization_grantee
    /// </summary>
    public partial class AstAlterAuthorizationForParallelDw : AstRule
    {
        
        private AstAlterAuthorizationStart _alterAuthorizationStart;
        
        private AstEntityTo _entityTo;
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        public AstAlterAuthorizationForParallelDw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAuthorizationStart>())
                {
                    this._alterAuthorizationStart = ((AstAlterAuthorizationStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityTo>())
                {
                    this._entityTo = ((AstEntityTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAuthorizationForParallelDw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAuthorizationStart>())
                {
                    this._alterAuthorizationStart = ((AstAlterAuthorizationStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityTo>())
                {
                    this._entityTo = ((AstEntityTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAuthorizationStart AlterAuthorizationStart
        {
            get
            {
                return this._alterAuthorizationStart;
            }
        }
        
        public virtual AstEntityTo EntityTo
        {
            get
            {
                return this._entityTo;
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationForParallelDw(this);
        }
    }
    
    /// <summary>
    /// drop_availability_group
    /// 	 : DROP  AVAILABILITY  GROUP  group_name
    /// </summary>
    public partial class AstDropAvailabilityGroup : AstRule
    {
        
        private AstGroupName _groupName;
        
        public AstDropAvailabilityGroup(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupName>())
                {
                    this._groupName = ((AstGroupName)(enumerator.Current));
                }
            }
        }
        
        public AstDropAvailabilityGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupName>())
                {
                    this._groupName = ((AstGroupName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGroupName GroupName
        {
            get
            {
                return this._groupName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAvailabilityGroup(this);
        }
    }
    
    /// <summary>
    /// alter_availability_group
    /// 	 : alter_availability_group_start  alter_availability_group_options
    /// </summary>
    public partial class AstAlterAvailabilityGroup : AstRule
    {
        
        private AstAlterAvailabilityGroupStart _alterAvailabilityGroupStart;
        
        private AstAlterAvailabilityGroupOptions _alterAvailabilityGroupOptions;
        
        public AstAlterAvailabilityGroup(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAvailabilityGroupStart>())
                {
                    this._alterAvailabilityGroupStart = ((AstAlterAvailabilityGroupStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilityGroupOptions>())
                {
                    this._alterAvailabilityGroupOptions = ((AstAlterAvailabilityGroupOptions)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAvailabilityGroupStart>())
                {
                    this._alterAvailabilityGroupStart = ((AstAlterAvailabilityGroupStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilityGroupOptions>())
                {
                    this._alterAvailabilityGroupOptions = ((AstAlterAvailabilityGroupOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAvailabilityGroupStart AlterAvailabilityGroupStart
        {
            get
            {
                return this._alterAvailabilityGroupStart;
            }
        }
        
        public virtual AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions
        {
            get
            {
                return this._alterAvailabilityGroupOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroup(this);
        }
    }
    
    /// <summary>
    /// alter_availability_group_start
    /// 	 : ALTER  AVAILABILITY  GROUP  group_name
    /// </summary>
    public partial class AstAlterAvailabilityGroupStart : AstRule
    {
        
        private AstGroupName _groupName;
        
        public AstAlterAvailabilityGroupStart(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupName>())
                {
                    this._groupName = ((AstGroupName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityGroupStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupName>())
                {
                    this._groupName = ((AstGroupName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGroupName GroupName
        {
            get
            {
                return this._groupName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupStart(this);
        }
    }
    
    /// <summary>
    /// alter_certificate
    /// 	 : ALTER  CERTIFICATE  certificate_name  (REMOVE  PRIVATE_KEY WITH  PRIVATE  KEY  LR_BRACKET  (FILE  EQUAL  STRING  COMMA? DECRYPTION  BY  PASSWORD  EQUAL  STRING  COMMA? ENCRYPTION  BY  PASSWORD  EQUAL  STRING  COMMA?)+  RR_BRACKET WITH  ACTIVE  FOR  BEGIN_DIALOG  EQUAL  on_off)
    /// </summary>
    public partial class AstAlterCertificate : AstRule
    {
        
        private AstCertificateName _certificateName;
        
        public AstAlterCertificate(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateName>())
                {
                    this._certificateName = ((AstCertificateName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterCertificate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateName>())
                {
                    this._certificateName = ((AstCertificateName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateName CertificateName
        {
            get
            {
                return this._certificateName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterCertificate(this);
        }
    }
    
    /// <summary>
    /// alter_column_encryption_key
    /// 	 : ALTER  COLUMN  ENCRYPTION  KEY  column_encryption_key  (ADD DROP)  VALUE  LR_BRACKET  COLUMN_MASTER_KEY  EQUAL  column_master_key_name = id_  (COMMA  ALGORITHM  EQUAL  algorithm_name = STRING  COMMA  ENCRYPTED_VALUE  EQUAL  BINARY)?  RR_BRACKET
    /// </summary>
    public partial class AstAlterColumnEncryptionKey : AstRule
    {
        
        private AstColumnEncryptionKey _columnEncryptionKey;
        
        public AstAlterColumnEncryptionKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKey>())
                {
                    this._columnEncryptionKey = ((AstColumnEncryptionKey)(enumerator.Current));
                }
            }
        }
        
        public AstAlterColumnEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKey>())
                {
                    this._columnEncryptionKey = ((AstColumnEncryptionKey)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnEncryptionKey ColumnEncryptionKey
        {
            get
            {
                return this._columnEncryptionKey;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterColumnEncryptionKey(this);
        }
    }
    
    /// <summary>
    /// create_column_encryption_key
    /// 	 : CREATE  COLUMN  ENCRYPTION  KEY  column_encryption_key  WITH  VALUES  (LR_BRACKET  COMMA?  COLUMN_MASTER_KEY  EQUAL  column_master_key_name = id_  COMMA  ALGORITHM  EQUAL  algorithm_name = STRING  COMMA  ENCRYPTED_VALUE  EQUAL  encrypted_value = BINARY  RR_BRACKET  COMMA?)+
    /// </summary>
    public partial class AstCreateColumnEncryptionKey : AstRule
    {
        
        private AstColumnEncryptionKey _columnEncryptionKey;
        
        public AstCreateColumnEncryptionKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKey>())
                {
                    this._columnEncryptionKey = ((AstColumnEncryptionKey)(enumerator.Current));
                }
            }
        }
        
        public AstCreateColumnEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKey>())
                {
                    this._columnEncryptionKey = ((AstColumnEncryptionKey)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnEncryptionKey ColumnEncryptionKey
        {
            get
            {
                return this._columnEncryptionKey;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnEncryptionKey(this);
        }
    }
    
    /// <summary>
    /// drop_certificate
    /// 	 : DROP  CERTIFICATE  certificate_name
    /// </summary>
    public partial class AstDropCertificate : AstRule
    {
        
        private AstCertificateName _certificateName;
        
        public AstDropCertificate(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateName>())
                {
                    this._certificateName = ((AstCertificateName)(enumerator.Current));
                }
            }
        }
        
        public AstDropCertificate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateName>())
                {
                    this._certificateName = ((AstCertificateName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateName CertificateName
        {
            get
            {
                return this._certificateName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropCertificate(this);
        }
    }
    
    /// <summary>
    /// drop_column_encryption_key
    /// 	 : DROP  COLUMN  ENCRYPTION  KEY  encryptor_name
    /// </summary>
    public partial class AstDropColumnEncryptionKey : AstRule
    {
        
        private AstEncryptorName _encryptorName;
        
        public AstDropColumnEncryptionKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptorName>())
                {
                    this._encryptorName = ((AstEncryptorName)(enumerator.Current));
                }
            }
        }
        
        public AstDropColumnEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptorName>())
                {
                    this._encryptorName = ((AstEncryptorName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEncryptorName EncryptorName
        {
            get
            {
                return this._encryptorName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropColumnEncryptionKey(this);
        }
    }
    
    /// <summary>
    /// drop_column_master_key
    /// 	 : DROP  COLUMN  MASTER  KEY  master_key
    /// </summary>
    public partial class AstDropColumnMasterKey : AstRule
    {
        
        private AstMasterKey _masterKey;
        
        public AstDropColumnMasterKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMasterKey>())
                {
                    this._masterKey = ((AstMasterKey)(enumerator.Current));
                }
            }
        }
        
        public AstDropColumnMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMasterKey>())
                {
                    this._masterKey = ((AstMasterKey)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMasterKey MasterKey
        {
            get
            {
                return this._masterKey;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropColumnMasterKey(this);
        }
    }
    
    /// <summary>
    /// drop_credential
    /// 	 : DROP  CREDENTIAL  credential_name
    /// </summary>
    public partial class AstDropCredential : AstRule
    {
        
        private AstCredentialName _credentialName;
        
        public AstDropCredential(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialName>())
                {
                    this._credentialName = ((AstCredentialName)(enumerator.Current));
                }
            }
        }
        
        public AstDropCredential(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialName>())
                {
                    this._credentialName = ((AstCredentialName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialName CredentialName
        {
            get
            {
                return this._credentialName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropCredential(this);
        }
    }
    
    /// <summary>
    /// drop_cryptograhic_provider
    /// 	 : DROP  CRYPTOGRAPHIC  PROVIDER  provider_name
    /// </summary>
    public partial class AstDropCryptograhicProvider : AstRule
    {
        
        private AstProviderName _providerName;
        
        public AstDropCryptograhicProvider(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderName>())
                {
                    this._providerName = ((AstProviderName)(enumerator.Current));
                }
            }
        }
        
        public AstDropCryptograhicProvider(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderName>())
                {
                    this._providerName = ((AstProviderName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProviderName ProviderName
        {
            get
            {
                return this._providerName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropCryptograhicProvider(this);
        }
    }
    
    /// <summary>
    /// drop_database_audit_specification
    /// 	 : DROP  DATABASE  AUDIT  SPECIFICATION  audit_name
    /// </summary>
    public partial class AstDropDatabaseAuditSpecification : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstDropDatabaseAuditSpecification(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public AstDropDatabaseAuditSpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabaseAuditSpecification(this);
        }
    }
    
    /// <summary>
    /// drop_database_scoped_credential
    /// 	 : DROP  DATABASE  SCOPED  CREDENTIAL  credential_name
    /// </summary>
    public partial class AstDropDatabaseScopedCredential : AstRule
    {
        
        private AstCredentialName _credentialName;
        
        public AstDropDatabaseScopedCredential(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialName>())
                {
                    this._credentialName = ((AstCredentialName)(enumerator.Current));
                }
            }
        }
        
        public AstDropDatabaseScopedCredential(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialName>())
                {
                    this._credentialName = ((AstCredentialName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialName CredentialName
        {
            get
            {
                return this._credentialName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabaseScopedCredential(this);
        }
    }
    
    /// <summary>
    /// drop_endpoint
    /// 	 : DROP  ENDPOINT  endpoint_name
    /// </summary>
    public partial class AstDropEndpoint : AstRule
    {
        
        private AstEndpointName _endpointName;
        
        public AstDropEndpoint(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointName>())
                {
                    this._endpointName = ((AstEndpointName)(enumerator.Current));
                }
            }
        }
        
        public AstDropEndpoint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointName>())
                {
                    this._endpointName = ((AstEndpointName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEndpointName EndpointName
        {
            get
            {
                return this._endpointName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropEndpoint(this);
        }
    }
    
    /// <summary>
    /// drop_external_data_source
    /// 	 : DROP  EXTERNAL  DATA  SOURCE  external_data_source_name
    /// </summary>
    public partial class AstDropExternalDataSource : AstRule
    {
        
        private AstExternalDataSourceName _externalDataSourceName;
        
        public AstDropExternalDataSource(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalDataSourceName>())
                {
                    this._externalDataSourceName = ((AstExternalDataSourceName)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalDataSource(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalDataSourceName>())
                {
                    this._externalDataSourceName = ((AstExternalDataSourceName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExternalDataSourceName ExternalDataSourceName
        {
            get
            {
                return this._externalDataSourceName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalDataSource(this);
        }
    }
    
    /// <summary>
    /// drop_external_file_format
    /// 	 : DROP  EXTERNAL  FILE  FORMAT  external_file_format_name
    /// </summary>
    public partial class AstDropExternalFileFormat : AstRule
    {
        
        private AstExternalFileFormatName _externalFileFormatName;
        
        public AstDropExternalFileFormat(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalFileFormatName>())
                {
                    this._externalFileFormatName = ((AstExternalFileFormatName)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalFileFormat(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalFileFormatName>())
                {
                    this._externalFileFormatName = ((AstExternalFileFormatName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExternalFileFormatName ExternalFileFormatName
        {
            get
            {
                return this._externalFileFormatName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalFileFormat(this);
        }
    }
    
    /// <summary>
    /// drop_external_library
    /// 	 : DROP  EXTERNAL  LIBRARY  library_name  (AUTHORIZATION  owner_name)?
    /// </summary>
    public partial class AstDropExternalLibrary : AstRule
    {
        
        private AstLibraryName _libraryName;
        
        public AstDropExternalLibrary(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryName>())
                {
                    this._libraryName = ((AstLibraryName)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalLibrary(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryName>())
                {
                    this._libraryName = ((AstLibraryName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLibraryName LibraryName
        {
            get
            {
                return this._libraryName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalLibrary(this);
        }
    }
    
    /// <summary>
    /// drop_external_resource_pool
    /// 	 : DROP  EXTERNAL  RESOURCE  POOL  pool_name
    /// </summary>
    public partial class AstDropExternalResourcePool : AstRule
    {
        
        private AstPoolName _poolName;
        
        public AstDropExternalResourcePool(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolName>())
                {
                    this._poolName = ((AstPoolName)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolName>())
                {
                    this._poolName = ((AstPoolName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolName PoolName
        {
            get
            {
                return this._poolName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalResourcePool(this);
        }
    }
    
    /// <summary>
    /// drop_external_table
    /// 	 : DROP  EXTERNAL  TABLE  (database_name  DOT)?  (schema_name  DOT)?  tableName
    /// </summary>
    public partial class AstDropExternalTable : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstDropExternalTable(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalTable(this);
        }
    }
    
    /// <summary>
    /// drop_event_session
    /// 	 : DROP  EVENT  SESSION  event_session_name  ON  SERVER
    /// </summary>
    public partial class AstDropEventSession : AstRule
    {
        
        private AstEventSessionName _eventSessionName;
        
        public AstDropEventSession(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionName>())
                {
                    this._eventSessionName = ((AstEventSessionName)(enumerator.Current));
                }
            }
        }
        
        public AstDropEventSession(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionName>())
                {
                    this._eventSessionName = ((AstEventSessionName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventSessionName EventSessionName
        {
            get
            {
                return this._eventSessionName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropEventSession(this);
        }
    }
    
    /// <summary>
    /// drop_fulltext_catalog
    /// 	 : DROP  FULLTEXT  CATALOG  catalog_name
    /// </summary>
    public partial class AstDropFulltextCatalog : AstRule
    {
        
        private AstCatalogName _catalogName;
        
        public AstDropFulltextCatalog(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogName>())
                {
                    this._catalogName = ((AstCatalogName)(enumerator.Current));
                }
            }
        }
        
        public AstDropFulltextCatalog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogName>())
                {
                    this._catalogName = ((AstCatalogName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCatalogName CatalogName
        {
            get
            {
                return this._catalogName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFulltextCatalog(this);
        }
    }
    
    /// <summary>
    /// drop_fulltext_index
    /// 	 : DROP  FULLTEXT  INDEX  ON  (schema_name  DOT)?  tableName
    /// </summary>
    public partial class AstDropFulltextIndex : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstDropFulltextIndex(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public AstDropFulltextIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFulltextIndex(this);
        }
    }
    
    /// <summary>
    /// drop_fulltext_stoplist
    /// 	 : DROP  FULLTEXT  STOPLIST  stoplist_name
    /// </summary>
    public partial class AstDropFulltextStoplist : AstRule
    {
        
        private AstStoplistName _stoplistName;
        
        public AstDropFulltextStoplist(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistName>())
                {
                    this._stoplistName = ((AstStoplistName)(enumerator.Current));
                }
            }
        }
        
        public AstDropFulltextStoplist(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistName>())
                {
                    this._stoplistName = ((AstStoplistName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStoplistName StoplistName
        {
            get
            {
                return this._stoplistName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFulltextStoplist(this);
        }
    }
    
    /// <summary>
    /// drop_login
    /// 	 : DROP  LOGIN  login_name
    /// </summary>
    public partial class AstDropLogin : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstDropLogin(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public AstDropLogin(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropLogin(this);
        }
    }
    
    /// <summary>
    /// drop_message_type
    /// 	 : DROP  MESSAGE  TYPE  message_type_name
    /// </summary>
    public partial class AstDropMessageType : AstRule
    {
        
        private AstMessageTypeName _messageTypeName;
        
        public AstDropMessageType(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeName>())
                {
                    this._messageTypeName = ((AstMessageTypeName)(enumerator.Current));
                }
            }
        }
        
        public AstDropMessageType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeName>())
                {
                    this._messageTypeName = ((AstMessageTypeName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMessageTypeName MessageTypeName
        {
            get
            {
                return this._messageTypeName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropMessageType(this);
        }
    }
    
    /// <summary>
    /// drop_partition_function
    /// 	 : DROP  PARTITION  FUNCTION  partition_function_name
    /// </summary>
    public partial class AstDropPartitionFunction : AstRule
    {
        
        private AstPartitionFunctionName _partitionFunctionName;
        
        public AstDropPartitionFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionName>())
                {
                    this._partitionFunctionName = ((AstPartitionFunctionName)(enumerator.Current));
                }
            }
        }
        
        public AstDropPartitionFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionName>())
                {
                    this._partitionFunctionName = ((AstPartitionFunctionName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionFunctionName PartitionFunctionName
        {
            get
            {
                return this._partitionFunctionName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropPartitionFunction(this);
        }
    }
    
    /// <summary>
    /// drop_partition_scheme
    /// 	 : DROP  PARTITION  SCHEME  partition_scheme_name
    /// </summary>
    public partial class AstDropPartitionScheme : AstRule
    {
        
        private AstPartitionSchemeName _partitionSchemeName;
        
        public AstDropPartitionScheme(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeName>())
                {
                    this._partitionSchemeName = ((AstPartitionSchemeName)(enumerator.Current));
                }
            }
        }
        
        public AstDropPartitionScheme(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeName>())
                {
                    this._partitionSchemeName = ((AstPartitionSchemeName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionSchemeName PartitionSchemeName
        {
            get
            {
                return this._partitionSchemeName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropPartitionScheme(this);
        }
    }
    
    /// <summary>
    /// drop_queue
    /// 	 : DROP  QUEUE  (database_name  DOT)?  (schema_name  DOT)?  queue_name
    /// </summary>
    public partial class AstDropQueue : AstRule
    {
        
        private AstQueueName _queueName;
        
        public AstDropQueue(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueueName>())
                {
                    this._queueName = ((AstQueueName)(enumerator.Current));
                }
            }
        }
        
        public AstDropQueue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueueName>())
                {
                    this._queueName = ((AstQueueName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstQueueName QueueName
        {
            get
            {
                return this._queueName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropQueue(this);
        }
    }
    
    /// <summary>
    /// drop_remote_service_binding
    /// 	 : DROP  REMOTE  SERVICE  BINDING  binding_name
    /// </summary>
    public partial class AstDropRemoteServiceBinding : AstRule
    {
        
        private AstBindingName _bindingName;
        
        public AstDropRemoteServiceBinding(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingName>())
                {
                    this._bindingName = ((AstBindingName)(enumerator.Current));
                }
            }
        }
        
        public AstDropRemoteServiceBinding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingName>())
                {
                    this._bindingName = ((AstBindingName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBindingName BindingName
        {
            get
            {
                return this._bindingName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRemoteServiceBinding(this);
        }
    }
    
    /// <summary>
    /// drop_resource_pool
    /// 	 : DROP  RESOURCE  POOL  pool_name
    /// </summary>
    public partial class AstDropResourcePool : AstRule
    {
        
        private AstPoolName _poolName;
        
        public AstDropResourcePool(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolName>())
                {
                    this._poolName = ((AstPoolName)(enumerator.Current));
                }
            }
        }
        
        public AstDropResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolName>())
                {
                    this._poolName = ((AstPoolName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolName PoolName
        {
            get
            {
                return this._poolName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropResourcePool(this);
        }
    }
    
    /// <summary>
    /// drop_db_role
    /// 	 : DROP  ROLE  (IF  EXISTS)?  role_name
    /// </summary>
    public partial class AstDropDbRole : AstRule
    {
        
        private AstRoleName _roleName;
        
        public AstDropDbRole(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this._roleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public AstDropDbRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this._roleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleName RoleName
        {
            get
            {
                return this._roleName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDbRole(this);
        }
    }
    
    /// <summary>
    /// drop_route
    /// 	 : DROP  ROUTE  route_name
    /// </summary>
    public partial class AstDropRoute : AstRule
    {
        
        private AstRouteName _routeName;
        
        public AstDropRoute(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteName>())
                {
                    this._routeName = ((AstRouteName)(enumerator.Current));
                }
            }
        }
        
        public AstDropRoute(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteName>())
                {
                    this._routeName = ((AstRouteName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRouteName RouteName
        {
            get
            {
                return this._routeName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRoute(this);
        }
    }
    
    /// <summary>
    /// drop_schema
    /// 	 : DROP  SCHEMA  (IF  EXISTS)?  schema_name
    /// </summary>
    public partial class AstDropSchema : AstRule
    {
        
        private AstSchemaName _schemaName;
        
        public AstDropSchema(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaName>())
                {
                    this._schemaName = ((AstSchemaName)(enumerator.Current));
                }
            }
        }
        
        public AstDropSchema(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaName>())
                {
                    this._schemaName = ((AstSchemaName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaName SchemaName
        {
            get
            {
                return this._schemaName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSchema(this);
        }
    }
    
    /// <summary>
    /// drop_search_property_list
    /// 	 : DROP  SEARCH  PROPERTY  LIST  property_list_name
    /// </summary>
    public partial class AstDropSearchPropertyList : AstRule
    {
        
        private AstPropertyListName _propertyListName;
        
        public AstDropSearchPropertyList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPropertyListName>())
                {
                    this._propertyListName = ((AstPropertyListName)(enumerator.Current));
                }
            }
        }
        
        public AstDropSearchPropertyList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPropertyListName>())
                {
                    this._propertyListName = ((AstPropertyListName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPropertyListName PropertyListName
        {
            get
            {
                return this._propertyListName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSearchPropertyList(this);
        }
    }
    
    /// <summary>
    /// drop_security_policy
    /// 	 : DROP  SECURITY  POLICY  (IF  EXISTS)?  (schema_name  DOT)?  security_policy_name
    /// </summary>
    public partial class AstDropSecurityPolicy : AstRule
    {
        
        private AstSecurityPolicyName _securityPolicyName;
        
        public AstDropSecurityPolicy(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSecurityPolicyName>())
                {
                    this._securityPolicyName = ((AstSecurityPolicyName)(enumerator.Current));
                }
            }
        }
        
        public AstDropSecurityPolicy(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSecurityPolicyName>())
                {
                    this._securityPolicyName = ((AstSecurityPolicyName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSecurityPolicyName SecurityPolicyName
        {
            get
            {
                return this._securityPolicyName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSecurityPolicy(this);
        }
    }
    
    /// <summary>
    /// drop_server_audit
    /// 	 : DROP  SERVER  AUDIT  audit_name
    /// </summary>
    public partial class AstDropServerAudit : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstDropServerAudit(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public AstDropServerAudit(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropServerAudit(this);
        }
    }
    
    /// <summary>
    /// drop_server_audit_specification
    /// 	 : DROP  SERVER  AUDIT  SPECIFICATION  audit_name
    /// </summary>
    public partial class AstDropServerAuditSpecification : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstDropServerAuditSpecification(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public AstDropServerAuditSpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropServerAuditSpecification(this);
        }
    }
    
    /// <summary>
    /// drop_server_role
    /// 	 : DROP  SERVER  ROLE  role_name
    /// </summary>
    public partial class AstDropServerRole : AstRule
    {
        
        private AstRoleName _roleName;
        
        public AstDropServerRole(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this._roleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public AstDropServerRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this._roleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleName RoleName
        {
            get
            {
                return this._roleName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropServerRole(this);
        }
    }
    
    /// <summary>
    /// drop_service
    /// 	 : DROP  SERVICE  dropped_service_name
    /// </summary>
    public partial class AstDropService : AstRule
    {
        
        private AstDroppedServiceName _droppedServiceName;
        
        public AstDropService(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDroppedServiceName>())
                {
                    this._droppedServiceName = ((AstDroppedServiceName)(enumerator.Current));
                }
            }
        }
        
        public AstDropService(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDroppedServiceName>())
                {
                    this._droppedServiceName = ((AstDroppedServiceName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDroppedServiceName DroppedServiceName
        {
            get
            {
                return this._droppedServiceName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropService(this);
        }
    }
    
    /// <summary>
    /// drop_signature
    /// 	 : DROP  (COUNTER)?  SIGNATURE  FROM  (schema_name  DOT)?  module_name  BY  (COMMA?  CERTIFICATE  certificate_name COMMA?  ASYMMETRIC  KEY  asym_key_name)+
    /// </summary>
    public partial class AstDropSignature : AstRule
    {
        
        private AstModuleName _moduleName;
        
        public AstDropSignature(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModuleName>())
                {
                    this._moduleName = ((AstModuleName)(enumerator.Current));
                }
            }
        }
        
        public AstDropSignature(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModuleName>())
                {
                    this._moduleName = ((AstModuleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstModuleName ModuleName
        {
            get
            {
                return this._moduleName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSignature(this);
        }
    }
    
    /// <summary>
    /// drop_statistics_name_azure_dw_and_pdw
    /// 	 : DROP  STATISTICS  (schema_name  DOT)?  object_name  DOT  statistics_name
    /// </summary>
    public partial class AstDropStatisticsNameAzureDwAndPdw : AstRule
    {
        
        private AstObjectName _objectName;
        
        private AstStatisticsName _statisticsName;
        
        public AstDropStatisticsNameAzureDwAndPdw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstObjectName>())
                {
                    this._objectName = ((AstObjectName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStatisticsName>())
                {
                    this._statisticsName = ((AstStatisticsName)(enumerator.Current));
                }
            }
        }
        
        public AstDropStatisticsNameAzureDwAndPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstObjectName>())
                {
                    this._objectName = ((AstObjectName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStatisticsName>())
                {
                    this._statisticsName = ((AstStatisticsName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstObjectName ObjectName
        {
            get
            {
                return this._objectName;
            }
        }
        
        public virtual AstStatisticsName StatisticsName
        {
            get
            {
                return this._statisticsName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropStatisticsNameAzureDwAndPdw(this);
        }
    }
    
    /// <summary>
    /// drop_symmetric_key
    /// 	 : DROP  SYMMETRIC  KEY  symmetric_key_name  (REMOVE  PROVIDER  KEY)?
    /// </summary>
    public partial class AstDropSymmetricKey : AstRule
    {
        
        private AstSymmetricKeyName _symmetricKeyName;
        
        public AstDropSymmetricKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyName>())
                {
                    this._symmetricKeyName = ((AstSymmetricKeyName)(enumerator.Current));
                }
            }
        }
        
        public AstDropSymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyName>())
                {
                    this._symmetricKeyName = ((AstSymmetricKeyName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSymmetricKeyName SymmetricKeyName
        {
            get
            {
                return this._symmetricKeyName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSymmetricKey(this);
        }
    }
    
    /// <summary>
    /// drop_synonym
    /// 	 : DROP  SYNONYM  (IF  EXISTS)?  (schema_name  DOT)?  synonym_name
    /// </summary>
    public partial class AstDropSynonym : AstRule
    {
        
        private AstSynonymName _synonymName;
        
        public AstDropSynonym(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSynonymName>())
                {
                    this._synonymName = ((AstSynonymName)(enumerator.Current));
                }
            }
        }
        
        public AstDropSynonym(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSynonymName>())
                {
                    this._synonymName = ((AstSynonymName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSynonymName SynonymName
        {
            get
            {
                return this._synonymName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSynonym(this);
        }
    }
    
    /// <summary>
    /// drop_user
    /// 	 : DROP  USER  (IF  EXISTS)?  user_name
    /// </summary>
    public partial class AstDropUser : AstRule
    {
        
        private AstUserName _userName;
        
        public AstDropUser(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserName>())
                {
                    this._userName = ((AstUserName)(enumerator.Current));
                }
            }
        }
        
        public AstDropUser(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserName>())
                {
                    this._userName = ((AstUserName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUserName UserName
        {
            get
            {
                return this._userName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropUser(this);
        }
    }
    
    /// <summary>
    /// drop_workload_group
    /// 	 : DROP  WORKLOAD  GROUP  group_name
    /// </summary>
    public partial class AstDropWorkloadGroup : AstRule
    {
        
        private AstGroupName _groupName;
        
        public AstDropWorkloadGroup(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupName>())
                {
                    this._groupName = ((AstGroupName)(enumerator.Current));
                }
            }
        }
        
        public AstDropWorkloadGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupName>())
                {
                    this._groupName = ((AstGroupName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGroupName GroupName
        {
            get
            {
                return this._groupName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropWorkloadGroup(this);
        }
    }
    
    /// <summary>
    /// drop_xml_schema_collection
    /// 	 : DROP  XML  SCHEMA  COLLECTION  (relational_schema  DOT)?  sql_identifier
    /// </summary>
    public partial class AstDropXmlSchemaCollection : AstRule
    {
        
        private AstSqlIdentifier _sqlIdentifier;
        
        public AstDropXmlSchemaCollection(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlIdentifier>())
                {
                    this._sqlIdentifier = ((AstSqlIdentifier)(enumerator.Current));
                }
            }
        }
        
        public AstDropXmlSchemaCollection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlIdentifier>())
                {
                    this._sqlIdentifier = ((AstSqlIdentifier)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSqlIdentifier SqlIdentifier
        {
            get
            {
                return this._sqlIdentifier;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropXmlSchemaCollection(this);
        }
    }
    
    /// <summary>
    /// lock_table
    /// 	 : LOCK  TABLE  full_table_name  IN  (SHARE EXCLUSIVE)  MODE  (WAIT  seconds = DECIMAL NOWAIT)?  SEMI?
    /// </summary>
    public partial class AstLockTable : AstRule
    {
        
        private AstFullTableName _fullTableName;
        
        public AstLockTable(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
            }
        }
        
        public AstLockTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLockTable(this);
        }
    }
    
    /// <summary>
    /// truncate_table
    /// 	 : TRUNCATE  TABLE  full_table_name  (WITH  LR_BRACKET  PARTITIONS  LR_BRACKET  (COMMA?  (DECIMAL DECIMAL  TO  DECIMAL))+  RR_BRACKET  RR_BRACKET)?
    /// </summary>
    public partial class AstTruncateTable : AstRule
    {
        
        private AstFullTableName _fullTableName;
        
        public AstTruncateTable(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
            }
        }
        
        public AstTruncateTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTruncateTable(this);
        }
    }
    
    /// <summary>
    /// alter_credential
    /// 	 : ALTER  CREDENTIAL  credential_name  WITH  IDENTITY  EQUAL  identity_name = STRING  (COMMA  SECRET  EQUAL  secret = STRING)?
    /// </summary>
    public partial class AstAlterCredential : AstRule
    {
        
        private AstCredentialName _credentialName;
        
        public AstAlterCredential(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialName>())
                {
                    this._credentialName = ((AstCredentialName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterCredential(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialName>())
                {
                    this._credentialName = ((AstCredentialName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialName CredentialName
        {
            get
            {
                return this._credentialName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterCredential(this);
        }
    }
    
    /// <summary>
    /// create_credential
    /// 	 : CREATE  CREDENTIAL  credential_name  WITH  IDENTITY  EQUAL  identity_name = STRING  (COMMA  SECRET  EQUAL  secret = STRING)?  (FOR  CRYPTOGRAPHIC  PROVIDER  cryptographic_provider_name)?
    /// </summary>
    public partial class AstCreateCredential : AstRule
    {
        
        private AstCredentialName _credentialName;
        
        public AstCreateCredential(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialName>())
                {
                    this._credentialName = ((AstCredentialName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateCredential(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialName>())
                {
                    this._credentialName = ((AstCredentialName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialName CredentialName
        {
            get
            {
                return this._credentialName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateCredential(this);
        }
    }
    
    /// <summary>
    /// alter_cryptographic_provider
    /// 	 : ALTER  CRYPTOGRAPHIC  PROVIDER  provider_name  (FROM  FILE  EQUAL  crypto_provider_ddl_file = STRING)?  (ENABLE DISABLE)?
    /// </summary>
    public partial class AstAlterCryptographicProvider : AstRule
    {
        
        private AstProviderName _providerName;
        
        public AstAlterCryptographicProvider(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderName>())
                {
                    this._providerName = ((AstProviderName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterCryptographicProvider(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderName>())
                {
                    this._providerName = ((AstProviderName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProviderName ProviderName
        {
            get
            {
                return this._providerName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterCryptographicProvider(this);
        }
    }
    
    /// <summary>
    /// create_cryptographic_provider
    /// 	 : CREATE  CRYPTOGRAPHIC  PROVIDER  provider_name  FROM  FILE  EQUAL  path_of_DLL = STRING
    /// </summary>
    public partial class AstCreateCryptographicProvider : AstRule
    {
        
        private AstProviderName _providerName;
        
        public AstCreateCryptographicProvider(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderName>())
                {
                    this._providerName = ((AstProviderName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateCryptographicProvider(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderName>())
                {
                    this._providerName = ((AstProviderName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProviderName ProviderName
        {
            get
            {
                return this._providerName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateCryptographicProvider(this);
        }
    }
    
    /// <summary>
    /// create_event_notification
    /// 	 : CREATE  EVENT  NOTIFICATION  event_notification_name  ON  (SERVER DATABASE QUEUE  queue_name)  (WITH  FAN_IN)?  FOR  (COMMA?  event_type_or_group)+  TO  SERVICE  broker_service = STRING  COMMA  broker_service_specifier_or_current_database = STRING
    /// </summary>
    public partial class AstCreateEventNotification : AstRule
    {
        
        private AstEventNotificationName _eventNotificationName;
        
        public AstCreateEventNotification(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventNotificationName>())
                {
                    this._eventNotificationName = ((AstEventNotificationName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateEventNotification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventNotificationName>())
                {
                    this._eventNotificationName = ((AstEventNotificationName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventNotificationName EventNotificationName
        {
            get
            {
                return this._eventNotificationName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateEventNotification(this);
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session
    /// 	 : (CREATE ALTER)  EVENT  SESSION  event_session_name  ON  SERVER  (COMMA?  ADD  EVENT  ((event_module_guid  DOT)?  event_package_name  DOT  event_name)  (LR_BRACKET  (SET  (COMMA?  event_customizable_attributue  EQUAL  (DECIMAL STRING))*?)?  (ACTION  LR_BRACKET  (COMMA?  (event_module_guid  DOT)?  event_package_name  DOT  action_name)+  RR_BRACKET)+  (WHERE  event_session_predicate_expression)?  RR_BRACKET)*?)*?  (COMMA?  DROP  EVENT  (event_module_guid  DOT)?  event_package_name  DOT  event_name)*?  ((ADD  TARGET  (event_module_guid  DOT)?  event_package_name  DOT  target_name)  (LR_BRACKET  SET  (COMMA?  target_parameter_name  EQUAL  (LR_BRACKET?  DECIMAL  RR_BRACKET? STRING))+  RR_BRACKET)*?)*?  (DROP  TARGET  (event_module_guid  DOT)?  event_package_name  DOT  target_name)*?  (WITH  LR_BRACKET  (COMMA?  MAX_MEMORY  EQUAL  max_memory = DECIMAL  (KB MB))?  (COMMA?  EVENT_RETENTION_MODE  EQUAL  (ALLOW_SINGLE_EVENT_LOSS ALLOW_MULTIPLE_EVENT_LOSS NO_EVENT_LOSS))?  (COMMA?  MAX_DISPATCH_LATENCY  EQUAL  (max_dispatch_latency_seconds = DECIMAL  SECONDS INFINITE))?  (COMMA?  MAX_EVENT_SIZE  EQUAL  max_event_size = DECIMAL  (KB MB))?  (COMMA?  MEMORY_PARTITION_MODE  EQUAL  (NONE PER_NODE PER_CPU))?  (COMMA?  TRACK_CAUSALITY  EQUAL  on_off)?  (COMMA?  STARTUP_STATE  EQUAL  on_off)?  RR_BRACKET)?  (STATE  EQUAL  (START STOP))?
    /// </summary>
    public partial class AstCreateOrAlterEventSession : AstRule
    {
        
        private AstEventSessionName _eventSessionName;
        
        public AstCreateOrAlterEventSession(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionName>())
                {
                    this._eventSessionName = ((AstEventSessionName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterEventSession(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionName>())
                {
                    this._eventSessionName = ((AstEventSessionName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventSessionName EventSessionName
        {
            get
            {
                return this._eventSessionName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSession(this);
        }
    }
    
    /// <summary>
    /// alter_external_library
    /// 	 : ALTER  EXTERNAL  LIBRARY  library_name  (AUTHORIZATION  owner_name)?  (SET ADD)  (LR_BRACKET  CONTENT  EQUAL  (client_library = STRING BINARY NONE)  (COMMA  PLATFORM  EQUAL  (WINDOWS LINUX)?  RR_BRACKET)  WITH  (COMMA?  LANGUAGE  EQUAL  (R PYTHON) DATA_SOURCE  EQUAL  external_data_source_name)+  RR_BRACKET)
    /// </summary>
    public partial class AstAlterExternalLibrary : AstRule
    {
        
        private AstLibraryName _libraryName;
        
        public AstAlterExternalLibrary(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryName>())
                {
                    this._libraryName = ((AstLibraryName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterExternalLibrary(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryName>())
                {
                    this._libraryName = ((AstLibraryName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLibraryName LibraryName
        {
            get
            {
                return this._libraryName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterExternalLibrary(this);
        }
    }
    
    /// <summary>
    /// create_external_library
    /// 	 : CREATE  EXTERNAL  LIBRARY  library_name  (AUTHORIZATION  owner_name)?  FROM  (COMMA?  LR_BRACKET?  (CONTENT  EQUAL)?  (client_library = STRING BINARY NONE)  (COMMA  PLATFORM  EQUAL  (WINDOWS LINUX)?  RR_BRACKET)?)  (WITH  (COMMA?  LANGUAGE  EQUAL  (R PYTHON) DATA_SOURCE  EQUAL  external_data_source_name)+  RR_BRACKET)?
    /// </summary>
    public partial class AstCreateExternalLibrary : AstRule
    {
        
        private AstLibraryName _libraryName;
        
        public AstCreateExternalLibrary(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryName>())
                {
                    this._libraryName = ((AstLibraryName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateExternalLibrary(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryName>())
                {
                    this._libraryName = ((AstLibraryName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLibraryName LibraryName
        {
            get
            {
                return this._libraryName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateExternalLibrary(this);
        }
    }
    
    /// <summary>
    /// create_external_resource_pool
    /// 	 : CREATE  EXTERNAL  RESOURCE  POOL  pool_name  WITH  LR_BRACKET  MAX_CPU_PERCENT  EQUAL  max_cpu_percent = DECIMAL  (COMMA?  AFFINITY  CPU  EQUAL  (AUTO (COMMA?  DECIMAL  TO  DECIMAL COMMA  DECIMAL)+) NUMANODE  EQUAL  (COMMA?  DECIMAL  TO  DECIMAL COMMA?  DECIMAL)+)  (COMMA?  MAX_MEMORY_PERCENT  EQUAL  max_memory_percent = DECIMAL)?  (COMMA?  MAX_PROCESSES  EQUAL  max_processes = DECIMAL)?  RR_BRACKET
    /// </summary>
    public partial class AstCreateExternalResourcePool : AstRule
    {
        
        private AstPoolName _poolName;
        
        public AstCreateExternalResourcePool(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolName>())
                {
                    this._poolName = ((AstPoolName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateExternalResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolName>())
                {
                    this._poolName = ((AstPoolName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolName PoolName
        {
            get
            {
                return this._poolName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateExternalResourcePool(this);
        }
    }
    
    /// <summary>
    /// alter_fulltext_catalog
    /// 	 : ALTER  FULLTEXT  CATALOG  catalog_name  (REBUILD  (WITH  ACCENT_SENSITIVITY  EQUAL  on_off)? REORGANIZE AS  DEFAULT)
    /// </summary>
    public partial class AstAlterFulltextCatalog : AstRule
    {
        
        private AstCatalogName _catalogName;
        
        public AstAlterFulltextCatalog(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogName>())
                {
                    this._catalogName = ((AstCatalogName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterFulltextCatalog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogName>())
                {
                    this._catalogName = ((AstCatalogName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCatalogName CatalogName
        {
            get
            {
                return this._catalogName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterFulltextCatalog(this);
        }
    }
    
    /// <summary>
    /// create_fulltext_catalog
    /// 	 : CREATE  FULLTEXT  CATALOG  catalog_name  (ON  FILEGROUP  file_group_name)?  (IN  PATH  rootpath = STRING)?  (WITH  ACCENT_SENSITIVITY  EQUAL  on_off)?  (AS  DEFAULT)?  (AUTHORIZATION  owner_name)?
    /// </summary>
    public partial class AstCreateFulltextCatalog : AstRule
    {
        
        private AstCatalogName _catalogName;
        
        public AstCreateFulltextCatalog(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogName>())
                {
                    this._catalogName = ((AstCatalogName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateFulltextCatalog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogName>())
                {
                    this._catalogName = ((AstCatalogName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCatalogName CatalogName
        {
            get
            {
                return this._catalogName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateFulltextCatalog(this);
        }
    }
    
    /// <summary>
    /// alter_fulltext_stoplist
    /// 	 : ALTER  FULLTEXT  STOPLIST  stoplist_name  (ADD  stopword = STRING  LANGUAGE  (STRING DECIMAL BINARY) DROP  (stopword = STRING  LANGUAGE  (STRING DECIMAL BINARY) ALL  (STRING DECIMAL BINARY) ALL))
    /// </summary>
    public partial class AstAlterFulltextStoplist : AstRule
    {
        
        private AstStoplistName _stoplistName;
        
        public AstAlterFulltextStoplist(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistName>())
                {
                    this._stoplistName = ((AstStoplistName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterFulltextStoplist(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistName>())
                {
                    this._stoplistName = ((AstStoplistName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStoplistName StoplistName
        {
            get
            {
                return this._stoplistName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterFulltextStoplist(this);
        }
    }
    
    /// <summary>
    /// create_fulltext_stoplist
    /// 	 : CREATE  FULLTEXT  STOPLIST  stoplist_name  (FROM  ((database_name  DOT)?  stoplist_name SYSTEM  STOPLIST))?  (AUTHORIZATION  owner_name)?
    /// </summary>
    public partial class AstCreateFulltextStoplist : AstRule
    {
        
        private AstStoplistName _stoplistName;
        
        public AstCreateFulltextStoplist(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistName>())
                {
                    this._stoplistName = ((AstStoplistName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateFulltextStoplist(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistName>())
                {
                    this._stoplistName = ((AstStoplistName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStoplistName StoplistName
        {
            get
            {
                return this._stoplistName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateFulltextStoplist(this);
        }
    }
    
    /// <summary>
    /// alter_login_sql_server
    /// 	 : ALTER  LOGIN  login_name  ((ENABLE DISABLE)? WITH  ((PASSWORD  EQUAL  (password = STRING password_hash = BINARY  HASHED))  (MUST_CHANGE UNLOCK)*?)?  (OLD_PASSWORD  EQUAL  old_password = STRING  (MUST_CHANGE UNLOCK)*?)?  (DEFAULT_DATABASE  EQUAL  database_name)?  (DEFAULT_LANGUAGE  EQUAL  language)?  (NAME  EQUAL  login_name)?  (CHECK_POLICY  EQUAL  on_off)?  (CHECK_EXPIRATION  EQUAL  on_off)?  (CREDENTIAL  EQUAL  credential_name)?  (NO  CREDENTIAL)? (ADD DROP)  CREDENTIAL  credential_name)
    /// </summary>
    public partial class AstAlterLoginSqlServer : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstAlterLoginSqlServer(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterLoginSqlServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginSqlServer(this);
        }
    }
    
    /// <summary>
    /// create_login_sql_server
    /// 	 : CREATE  LOGIN  login_name  (WITH  ((PASSWORD  EQUAL  (password = STRING password_hash = BINARY  HASHED))  (MUST_CHANGE UNLOCK)*?)?  (COMMA?  SID  EQUAL  sid = BINARY)?  (COMMA?  DEFAULT_DATABASE  EQUAL  database_name)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  language)?  (COMMA?  CHECK_EXPIRATION  EQUAL  on_off)?  (COMMA?  CHECK_POLICY  EQUAL  on_off)?  (COMMA?  CREDENTIAL  EQUAL  credential_name)? (FROM  (WINDOWS  (WITH  (COMMA?  DEFAULT_DATABASE  EQUAL  database_name)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  default_language = STRING)?) CERTIFICATE  certificate_name ASYMMETRIC  KEY  asym_key_name)))
    /// </summary>
    public partial class AstCreateLoginSqlServer : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstCreateLoginSqlServer(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateLoginSqlServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginSqlServer(this);
        }
    }
    
    /// <summary>
    /// alter_login_azure_sql
    /// 	 : ALTER  LOGIN  login_name  ((ENABLE DISABLE)? WITH  (PASSWORD  EQUAL  password = STRING  (OLD_PASSWORD  EQUAL  old_password = STRING)? NAME  EQUAL  login_name))
    /// </summary>
    public partial class AstAlterLoginAzureSql : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstAlterLoginAzureSql(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterLoginAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginAzureSql(this);
        }
    }
    
    /// <summary>
    /// create_login_azure_sql
    /// 	 : CREATE  LOGIN  login_name  WITH  PASSWORD  EQUAL  STRING  (SID  EQUAL  sid = BINARY)?
    /// </summary>
    public partial class AstCreateLoginAzureSql : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstCreateLoginAzureSql(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateLoginAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginAzureSql(this);
        }
    }
    
    /// <summary>
    /// alter_login_azure_sql_dw_and_pdw
    /// 	 : ALTER  LOGIN  login_name  (enable_disable? WITH  (PASSWORD  EQUAL  password = STRING  (OLD_PASSWORD  EQUAL  old_password = STRING  (MUST_CHANGE UNLOCK)*?)? NAME  EQUAL  login_name))
    /// </summary>
    public partial class AstAlterLoginAzureSqlDwAndPdw : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstAlterLoginAzureSqlDwAndPdw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterLoginAzureSqlDwAndPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginAzureSqlDwAndPdw(this);
        }
    }
    
    /// <summary>
    /// create_login_pdw
    /// 	 : CREATE  LOGIN  login_name  (WITH  (PASSWORD  EQUAL  password = STRING  (MUST_CHANGE)?  (CHECK_POLICY  EQUAL  on_off?)?) FROM  WINDOWS)
    /// </summary>
    public partial class AstCreateLoginPdw : AstRule
    {
        
        private AstLoginName _loginName;
        
        public AstCreateLoginPdw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateLoginPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginPdw(this);
        }
    }
    
    /// <summary>
    /// alter_message_type
    /// 	 : ALTER  MESSAGE  TYPE  message_type_name  VALIDATION  EQUAL  (NONE EMPTY WELL_FORMED_XML VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_name)
    /// </summary>
    public partial class AstAlterMessageType : AstRule
    {
        
        private AstMessageTypeName _messageTypeName;
        
        public AstAlterMessageType(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeName>())
                {
                    this._messageTypeName = ((AstMessageTypeName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterMessageType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeName>())
                {
                    this._messageTypeName = ((AstMessageTypeName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMessageTypeName MessageTypeName
        {
            get
            {
                return this._messageTypeName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterMessageType(this);
        }
    }
    
    /// <summary>
    /// alter_partition_function
    /// 	 : ALTER  PARTITION  FUNCTION  partition_function_name  LR_BRACKET  RR_BRACKET  split_or_merge  RANGE  LR_BRACKET  DECIMAL  RR_BRACKET
    /// </summary>
    public partial class AstAlterPartitionFunction : AstRule
    {
        
        private AstPartitionFunctionName _partitionFunctionName;
        
        private AstSplitOrMerge _splitOrMerge;
        
        public AstAlterPartitionFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionName>())
                {
                    this._partitionFunctionName = ((AstPartitionFunctionName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSplitOrMerge>())
                {
                    this._splitOrMerge = ((AstSplitOrMerge)(enumerator.Current));
                }
            }
        }
        
        public AstAlterPartitionFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionName>())
                {
                    this._partitionFunctionName = ((AstPartitionFunctionName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSplitOrMerge>())
                {
                    this._splitOrMerge = ((AstSplitOrMerge)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionFunctionName PartitionFunctionName
        {
            get
            {
                return this._partitionFunctionName;
            }
        }
        
        public virtual AstSplitOrMerge SplitOrMerge
        {
            get
            {
                return this._splitOrMerge;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterPartitionFunction(this);
        }
    }
    
    /// <summary>
    /// alter_partition_scheme
    /// 	 : ALTER  PARTITION  SCHEME  partition_scheme_name  NEXT  USED  (file_group_name)?
    /// </summary>
    public partial class AstAlterPartitionScheme : AstRule
    {
        
        private AstPartitionSchemeName _partitionSchemeName;
        
        public AstAlterPartitionScheme(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeName>())
                {
                    this._partitionSchemeName = ((AstPartitionSchemeName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterPartitionScheme(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeName>())
                {
                    this._partitionSchemeName = ((AstPartitionSchemeName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionSchemeName PartitionSchemeName
        {
            get
            {
                return this._partitionSchemeName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterPartitionScheme(this);
        }
    }
    
    /// <summary>
    /// alter_remote_service_binding
    /// 	 : ALTER  REMOTE  SERVICE  BINDING  binding_name  WITH  (USER  EQUAL  user_name)?  (COMMA  ANONYMOUS  EQUAL  on_off)?
    /// </summary>
    public partial class AstAlterRemoteServiceBinding : AstRule
    {
        
        private AstBindingName _bindingName;
        
        public AstAlterRemoteServiceBinding(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingName>())
                {
                    this._bindingName = ((AstBindingName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterRemoteServiceBinding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingName>())
                {
                    this._bindingName = ((AstBindingName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBindingName BindingName
        {
            get
            {
                return this._bindingName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterRemoteServiceBinding(this);
        }
    }
    
    /// <summary>
    /// create_remote_service_binding
    /// 	 : CREATE  REMOTE  SERVICE  BINDING  binding_name  (AUTHORIZATION  owner_name)?  TO  SERVICE  remote_service_name = STRING  WITH  (USER  EQUAL  user_name)?  (COMMA  ANONYMOUS  EQUAL  on_off)?
    /// </summary>
    public partial class AstCreateRemoteServiceBinding : AstRule
    {
        
        private AstBindingName _bindingName;
        
        public AstCreateRemoteServiceBinding(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingName>())
                {
                    this._bindingName = ((AstBindingName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateRemoteServiceBinding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingName>())
                {
                    this._bindingName = ((AstBindingName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBindingName BindingName
        {
            get
            {
                return this._bindingName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateRemoteServiceBinding(this);
        }
    }
    
    /// <summary>
    /// create_resource_pool
    /// 	 : CREATE  RESOURCE  POOL  pool_name  (WITH  LR_BRACKET  (COMMA?  MIN_CPU_PERCENT  EQUAL  DECIMAL)?  (COMMA?  MAX_CPU_PERCENT  EQUAL  DECIMAL)?  (COMMA?  CAP_CPU_PERCENT  EQUAL  DECIMAL)?  (COMMA?  AFFINITY  SCHEDULER  EQUAL  (AUTO LR_BRACKET  (COMMA?  (DECIMAL DECIMAL  TO  DECIMAL))+  RR_BRACKET NUMANODE  EQUAL  LR_BRACKET  (COMMA?  (DECIMAL DECIMAL  TO  DECIMAL))+  RR_BRACKET))?  (COMMA?  MIN_MEMORY_PERCENT  EQUAL  DECIMAL)?  (COMMA?  MAX_MEMORY_PERCENT  EQUAL  DECIMAL)?  (COMMA?  MIN_IOPS_PER_VOLUME  EQUAL  DECIMAL)?  (COMMA?  MAX_IOPS_PER_VOLUME  EQUAL  DECIMAL)?  RR_BRACKET)?
    /// </summary>
    public partial class AstCreateResourcePool : AstRule
    {
        
        private AstPoolName _poolName;
        
        public AstCreateResourcePool(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolName>())
                {
                    this._poolName = ((AstPoolName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolName>())
                {
                    this._poolName = ((AstPoolName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolName PoolName
        {
            get
            {
                return this._poolName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateResourcePool(this);
        }
    }
    
    /// <summary>
    /// alter_db_role
    /// 	 : ALTER  ROLE  role_name  (add_drop  MEMBER  database_name WITH  NAME  EQUAL  role_name)
    /// </summary>
    public partial class AstAlterDbRole : AstRule
    {
        
        private AstRoleName _roleName;
        
        public AstAlterDbRole(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this._roleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterDbRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this._roleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleName RoleName
        {
            get
            {
                return this._roleName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterDbRole(this);
        }
    }
    
    /// <summary>
    /// create_db_role
    /// 	 : CREATE  ROLE  role_name  (AUTHORIZATION  owner_name)?
    /// </summary>
    public partial class AstCreateDbRole : AstRule
    {
        
        private AstRoleName _roleName;
        
        public AstCreateDbRole(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this._roleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateDbRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleName>())
                {
                    this._roleName = ((AstRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleName RoleName
        {
            get
            {
                return this._roleName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateDbRole(this);
        }
    }
    
    /// <summary>
    /// create_route
    /// 	 : CREATE  ROUTE  route_name  (AUTHORIZATION  owner_name)?  WITH  (COMMA?  SERVICE_NAME  EQUAL  route_service_name = STRING)?  (COMMA?  BROKER_INSTANCE  EQUAL  broker_instance_identifier = STRING)?  (COMMA?  LIFETIME  EQUAL  DECIMAL)?  COMMA?  ADDRESS  EQUAL  STRING  (COMMA  MIRROR_ADDRESS  EQUAL  STRING)?
    /// </summary>
    public partial class AstCreateRoute : AstRule
    {
        
        private AstRouteName _routeName;
        
        public AstCreateRoute(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteName>())
                {
                    this._routeName = ((AstRouteName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateRoute(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteName>())
                {
                    this._routeName = ((AstRouteName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRouteName RouteName
        {
            get
            {
                return this._routeName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateRoute(this);
        }
    }
    
    /// <summary>
    /// create_rule
    /// 	 : CREATE  RULE  (schema_name  DOT)?  rule_name  AS  search_condition
    /// </summary>
    public partial class AstCreateRule : AstRule
    {
        
        private AstRuleName _ruleName;
        
        private AstSearchCondition _searchCondition;
        
        public AstCreateRule(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRuleName>())
                {
                    this._ruleName = ((AstRuleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstCreateRule(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRuleName>())
                {
                    this._ruleName = ((AstRuleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRuleName RuleName
        {
            get
            {
                return this._ruleName;
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateRule(this);
        }
    }
    
    /// <summary>
    /// alter_schema_sql
    /// 	 : ALTER  SCHEMA  schema_name  TRANSFER  ((OBJECT TYPE XML  SCHEMA  COLLECTION)  DOUBLE_COLON)?  id_  (DOT  id_)?
    /// </summary>
    public partial class AstAlterSchemaSql : AstRule
    {
        
        private AstSchemaName _schemaName;
        
        private AstId _id;
        
        public AstAlterSchemaSql(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaName>())
                {
                    this._schemaName = ((AstSchemaName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterSchemaSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaName>())
                {
                    this._schemaName = ((AstSchemaName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaName SchemaName
        {
            get
            {
                return this._schemaName;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSchemaSql(this);
        }
    }
    
    /// <summary>
    /// create_schema_azure_sql_dw_and_pdw
    /// 	 : CREATE  SCHEMA  schema_name  (AUTHORIZATION  owner_name)?
    /// </summary>
    public partial class AstCreateSchemaAzureSqlDwAndPdw : AstRule
    {
        
        private AstSchemaName _schemaName;
        
        public AstCreateSchemaAzureSqlDwAndPdw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaName>())
                {
                    this._schemaName = ((AstSchemaName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSchemaAzureSqlDwAndPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaName>())
                {
                    this._schemaName = ((AstSchemaName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaName SchemaName
        {
            get
            {
                return this._schemaName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSchemaAzureSqlDwAndPdw(this);
        }
    }
    
    /// <summary>
    /// alter_schema_azure_sql_dw_and_pdw
    /// 	 : ALTER  SCHEMA  schema_name  TRANSFER  (OBJECT  DOUBLE_COLON)?  id_  (DOT  ID)?
    /// </summary>
    public partial class AstAlterSchemaAzureSqlDwAndPdw : AstRule
    {
        
        private AstSchemaName _schemaName;
        
        private AstId _id;
        
        public AstAlterSchemaAzureSqlDwAndPdw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaName>())
                {
                    this._schemaName = ((AstSchemaName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterSchemaAzureSqlDwAndPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaName>())
                {
                    this._schemaName = ((AstSchemaName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaName SchemaName
        {
            get
            {
                return this._schemaName;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSchemaAzureSqlDwAndPdw(this);
        }
    }
    
    /// <summary>
    /// create_search_property_list
    /// 	 : CREATE  SEARCH  PROPERTY  LIST  source_list_name  (FROM  (database_name  DOT)?  source_list_name)?  (AUTHORIZATION  owner_name)?
    /// </summary>
    public partial class AstCreateSearchPropertyList : AstRule
    {
        
        private AstSourceListName _sourceListName;
        
        public AstCreateSearchPropertyList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSourceListName>())
                {
                    this._sourceListName = ((AstSourceListName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSearchPropertyList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSourceListName>())
                {
                    this._sourceListName = ((AstSourceListName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSourceListName SourceListName
        {
            get
            {
                return this._sourceListName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSearchPropertyList(this);
        }
    }
    
    /// <summary>
    /// create_security_policy
    /// 	 : CREATE  SECURITY  POLICY  (schema_name  DOT)?  security_policy_name  (COMMA?  ADD  (FILTER BLOCK)?  PREDICATE  tvf_schema_name  DOT  security_predicate_function_name  LR_BRACKET  (COMMA?  column_name_or_arguments)+  RR_BRACKET  ON  schema_name  DOT  tableName  (COMMA?  AFTER  (INSERT UPDATE) COMMA?  BEFORE  (UPDATE DELETE))*?)+  (WITH  LR_BRACKET  STATE  EQUAL  on_off  (SCHEMABINDING  on_off)?  RR_BRACKET)?  (NOT  FOR  REPLICATION)?
    /// </summary>
    public partial class AstCreateSecurityPolicy : AstRule
    {
        
        private AstSecurityPolicyName _securityPolicyName;
        
        public AstCreateSecurityPolicy(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSecurityPolicyName>())
                {
                    this._securityPolicyName = ((AstSecurityPolicyName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSecurityPolicy(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSecurityPolicyName>())
                {
                    this._securityPolicyName = ((AstSecurityPolicyName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSecurityPolicyName SecurityPolicyName
        {
            get
            {
                return this._securityPolicyName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSecurityPolicy(this);
        }
    }
    
    /// <summary>
    /// alter_sequence
    /// 	 : ALTER  SEQUENCE  (schema_name  DOT)?  sequence_name  (RESTART  (WITH  DECIMAL)?)?  (INCREMENT  BY  sequnce_increment = DECIMAL)?  (MINVALUE  DECIMAL NO  MINVALUE)?  (MAXVALUE  DECIMAL NO  MAXVALUE)?  (CYCLE NO  CYCLE)?  (CACHE  DECIMAL NO  CACHE)?
    /// </summary>
    public partial class AstAlterSequence : AstRule
    {
        
        private AstSequenceName _sequenceName;
        
        public AstAlterSequence(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSequenceName>())
                {
                    this._sequenceName = ((AstSequenceName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterSequence(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSequenceName>())
                {
                    this._sequenceName = ((AstSequenceName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSequenceName SequenceName
        {
            get
            {
                return this._sequenceName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSequence(this);
        }
    }
    
    /// <summary>
    /// create_sequence
    /// 	 : CREATE  SEQUENCE  (schema_name  DOT)?  sequence_name  (AS  data_type)?  (START  WITH  DECIMAL)?  (INCREMENT  BY  MINUS?  DECIMAL)?  (MINVALUE  (MINUS?  DECIMAL)? NO  MINVALUE)?  (MAXVALUE  (MINUS?  DECIMAL)? NO  MAXVALUE)?  (CYCLE NO  CYCLE)?  (CACHE  DECIMAL? NO  CACHE)?
    /// </summary>
    public partial class AstCreateSequence : AstRule
    {
        
        private AstSequenceName _sequenceName;
        
        public AstCreateSequence(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSequenceName>())
                {
                    this._sequenceName = ((AstSequenceName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSequence(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSequenceName>())
                {
                    this._sequenceName = ((AstSequenceName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSequenceName SequenceName
        {
            get
            {
                return this._sequenceName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSequence(this);
        }
    }
    
    /// <summary>
    /// alter_server_audit
    /// 	 : ALTER  SERVER  AUDIT  audit_name  ((TO  (FILE  (LR_BRACKET  (COMMA?  FILEPATH  EQUAL  filepath = STRING COMMA?  MAXSIZE  EQUAL  (DECIMAL  (MB GB TB) UNLIMITED) COMMA?  MAX_ROLLOVER_FILES  EQUAL  max_rollover_files = (DECIMAL UNLIMITED) COMMA?  MAX_FILES  EQUAL  max_files = DECIMAL COMMA?  RESERVE_DISK_SPACE  EQUAL  on_off)*?  RR_BRACKET) APPLICATION_LOG SECURITY_LOG))?  (WITH  LR_BRACKET  (COMMA?  QUEUE_DELAY  EQUAL  queue_delay = DECIMAL COMMA?  ON_FAILURE  EQUAL  (CONTINUE SHUTDOWN FAIL_OPERATION) COMMA?  STATE  EQUAL  on_off)*?  RR_BRACKET)?  (WHERE  (COMMA?  (NOT?)  event_field_name  (EQUAL (LESS  GREATER) (EXCLAMATION  EQUAL) GREATER (GREATER  EQUAL) LESS LESS  EQUAL)  (DECIMAL STRING) COMMA?  (AND OR)  NOT?  (EQUAL (LESS  GREATER) (EXCLAMATION  EQUAL) GREATER (GREATER  EQUAL) LESS LESS  EQUAL)  (DECIMAL STRING)))? REMOVE  WHERE MODIFY  NAME  EQUAL  audit_name)
    /// </summary>
    public partial class AstAlterServerAudit : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstAlterServerAudit(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerAudit(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerAudit(this);
        }
    }
    
    /// <summary>
    /// create_server_audit
    /// 	 : CREATE  SERVER  AUDIT  audit_name  ((TO  (FILE  (LR_BRACKET  (COMMA?  FILEPATH  EQUAL  filepath = STRING COMMA?  MAXSIZE  EQUAL  (DECIMAL  (MB GB TB) UNLIMITED) COMMA?  MAX_ROLLOVER_FILES  EQUAL  max_rollover_files = (DECIMAL UNLIMITED) COMMA?  MAX_FILES  EQUAL  max_files = DECIMAL COMMA?  RESERVE_DISK_SPACE  EQUAL  on_off)*?  RR_BRACKET) APPLICATION_LOG SECURITY_LOG))?  (WITH  LR_BRACKET  (COMMA?  QUEUE_DELAY  EQUAL  queue_delay = DECIMAL COMMA?  ON_FAILURE  EQUAL  (CONTINUE SHUTDOWN FAIL_OPERATION) COMMA?  STATE  EQUAL  on_off COMMA?  AUDIT_GUID  EQUAL  audit_guid)*?  RR_BRACKET)?  (WHERE  (COMMA?  (NOT?)  event_field_name  (EQUAL (LESS  GREATER) (EXCLAMATION  EQUAL) GREATER (GREATER  EQUAL) LESS LESS  EQUAL)  (DECIMAL STRING) COMMA?  (AND OR)  NOT?  (EQUAL (LESS  GREATER) (EXCLAMATION  EQUAL) GREATER (GREATER  EQUAL) LESS LESS  EQUAL)  (DECIMAL STRING)))? REMOVE  WHERE MODIFY  NAME  EQUAL  audit_name)
    /// </summary>
    public partial class AstCreateServerAudit : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstCreateServerAudit(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateServerAudit(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerAudit(this);
        }
    }
    
    /// <summary>
    /// alter_server_audit_specification
    /// 	 : ALTER  SERVER  AUDIT  SPECIFICATION  audit_name  (FOR  SERVER  AUDIT  audit_name)?  ((ADD DROP)  LR_BRACKET  audit_action_group_name  RR_BRACKET)*?  (WITH  LR_BRACKET  STATE  EQUAL  on_off  RR_BRACKET)?
    /// </summary>
    public partial class AstAlterServerAuditSpecification : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstAlterServerAuditSpecification(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerAuditSpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerAuditSpecification(this);
        }
    }
    
    /// <summary>
    /// create_server_audit_specification
    /// 	 : CREATE  SERVER  AUDIT  SPECIFICATION  audit_name  (FOR  SERVER  AUDIT  audit_name)?  (ADD  LR_BRACKET  audit_action_group_name  RR_BRACKET)*?  (WITH  LR_BRACKET  STATE  EQUAL  on_off  RR_BRACKET)?
    /// </summary>
    public partial class AstCreateServerAuditSpecification : AstRule
    {
        
        private AstAuditName _auditName;
        
        public AstCreateServerAuditSpecification(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateServerAuditSpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditName>())
                {
                    this._auditName = ((AstAuditName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditName AuditName
        {
            get
            {
                return this._auditName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerAuditSpecification(this);
        }
    }
    
    /// <summary>
    /// alter_server_role
    /// 	 : ALTER  SERVER  ROLE  server_role_name  ((ADD DROP)  MEMBER  server_name WITH  NAME  EQUAL  server_role_name)
    /// </summary>
    public partial class AstAlterServerRole : AstRule
    {
        
        private AstServerRoleName _serverRoleName;
        
        public AstAlterServerRole(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleName>())
                {
                    this._serverRoleName = ((AstServerRoleName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleName>())
                {
                    this._serverRoleName = ((AstServerRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleName ServerRoleName
        {
            get
            {
                return this._serverRoleName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerRole(this);
        }
    }
    
    /// <summary>
    /// create_server_role
    /// 	 : CREATE  SERVER  ROLE  server_role_name  (AUTHORIZATION  server_name)?
    /// </summary>
    public partial class AstCreateServerRole : AstRule
    {
        
        private AstServerRoleName _serverRoleName;
        
        public AstCreateServerRole(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleName>())
                {
                    this._serverRoleName = ((AstServerRoleName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateServerRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleName>())
                {
                    this._serverRoleName = ((AstServerRoleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleName ServerRoleName
        {
            get
            {
                return this._serverRoleName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerRole(this);
        }
    }
    
    /// <summary>
    /// alter_server_role_pdw
    /// 	 : ALTER  SERVER  ROLE  server_role_name  (ADD DROP)  MEMBER  login_name
    /// </summary>
    public partial class AstAlterServerRolePdw : AstRule
    {
        
        private AstServerRoleName _serverRoleName;
        
        private AstLoginName _loginName;
        
        public AstAlterServerRolePdw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleName>())
                {
                    this._serverRoleName = ((AstServerRoleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerRolePdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleName>())
                {
                    this._serverRoleName = ((AstServerRoleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginName>())
                {
                    this._loginName = ((AstLoginName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleName ServerRoleName
        {
            get
            {
                return this._serverRoleName;
            }
        }
        
        public virtual AstLoginName LoginName
        {
            get
            {
                return this._loginName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerRolePdw(this);
        }
    }
    
    /// <summary>
    /// alter_service
    /// 	 : ALTER  SERVICE  modified_service_name  (ON  QUEUE  (schema_name  DOT)  queue_name)?  (COMMA?  (ADD DROP)  modified_contract_name)*?
    /// </summary>
    public partial class AstAlterService : AstRule
    {
        
        private AstModifiedServiceName _modifiedServiceName;
        
        public AstAlterService(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModifiedServiceName>())
                {
                    this._modifiedServiceName = ((AstModifiedServiceName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterService(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModifiedServiceName>())
                {
                    this._modifiedServiceName = ((AstModifiedServiceName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstModifiedServiceName ModifiedServiceName
        {
            get
            {
                return this._modifiedServiceName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterService(this);
        }
    }
    
    /// <summary>
    /// create_service
    /// 	 : CREATE  SERVICE  create_service_name  (AUTHORIZATION  owner_name)?  ON  QUEUE  (schema_name  DOT)?  queue_name  (LR_BRACKET  (COMMA?  (id_ DEFAULT))+  RR_BRACKET)?
    /// </summary>
    public partial class AstCreateService : AstRule
    {
        
        private AstCreateServiceName _createServiceName;
        
        private AstQueueName _queueName;
        
        public AstCreateService(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateServiceName>())
                {
                    this._createServiceName = ((AstCreateServiceName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueueName>())
                {
                    this._queueName = ((AstQueueName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateService(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateServiceName>())
                {
                    this._createServiceName = ((AstCreateServiceName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueueName>())
                {
                    this._queueName = ((AstQueueName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCreateServiceName CreateServiceName
        {
            get
            {
                return this._createServiceName;
            }
        }
        
        public virtual AstQueueName QueueName
        {
            get
            {
                return this._queueName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateService(this);
        }
    }
    
    /// <summary>
    /// alter_symmetric_key
    /// 	 : ALTER  SYMMETRIC  KEY  symmetric_key_name  (add_drop  ENCRYPTION  BY  (CERTIFICATE  certificate_name PASSWORD  EQUAL  password = STRING SYMMETRIC  KEY  symmetric_key_name ASYMMETRIC  KEY  asym_key_name))
    /// </summary>
    public partial class AstAlterSymmetricKey : AstRule
    {
        
        private AstSymmetricKeyName _symmetricKeyName;
        
        public AstAlterSymmetricKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyName>())
                {
                    this._symmetricKeyName = ((AstSymmetricKeyName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterSymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyName>())
                {
                    this._symmetricKeyName = ((AstSymmetricKeyName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSymmetricKeyName SymmetricKeyName
        {
            get
            {
                return this._symmetricKeyName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSymmetricKey(this);
        }
    }
    
    /// <summary>
    /// create_synonym
    /// 	 : CREATE  SYNONYM  (schema_name  DOT)?  synonym_name  FOR  ((server_name  DOT)?  (database_name  DOT)?  (schema_name  DOT)?  object_name (database_name  DOT)?  (schema_id_2_or_object_name = id_  DOT)?)
    /// </summary>
    public partial class AstCreateSynonym : AstRule
    {
        
        private AstSynonymName _synonymName;
        
        public AstCreateSynonym(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSynonymName>())
                {
                    this._synonymName = ((AstSynonymName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSynonym(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSynonymName>())
                {
                    this._synonymName = ((AstSynonymName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSynonymName SynonymName
        {
            get
            {
                return this._synonymName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSynonym(this);
        }
    }
    
    /// <summary>
    /// alter_user
    /// 	 : ALTER  USER  user_name  WITH  (COMMA?  NAME  EQUAL  user_name COMMA?  DEFAULT_SCHEMA  EQUAL  (schema_name NULL_) COMMA?  LOGIN  EQUAL  login_name COMMA?  PASSWORD  EQUAL  STRING  (OLD_PASSWORD  EQUAL  STRING)+ COMMA?  DEFAULT_LANGUAGE  EQUAL  (NONE lcid = DECIMAL language) COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off)+
    /// </summary>
    public partial class AstAlterUser : AstRule
    {
        
        private AstUserName _userName;
        
        public AstAlterUser(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserName>())
                {
                    this._userName = ((AstUserName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterUser(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserName>())
                {
                    this._userName = ((AstUserName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUserName UserName
        {
            get
            {
                return this._userName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterUser(this);
        }
    }
    
    /// <summary>
    /// alter_user_azure_sql
    /// 	 : ALTER  USER  user_name  WITH  (COMMA?  NAME  EQUAL  user_name COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  LOGIN  EQUAL  login_name COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off)+
    /// </summary>
    public partial class AstAlterUserAzureSql : AstRule
    {
        
        private AstUserName _userName;
        
        public AstAlterUserAzureSql(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserName>())
                {
                    this._userName = ((AstUserName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterUserAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserName>())
                {
                    this._userName = ((AstUserName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUserName UserName
        {
            get
            {
                return this._userName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterUserAzureSql(this);
        }
    }
    
    /// <summary>
    /// create_workload_group
    /// 	 : CREATE  WORKLOAD  GROUP  workload_group_group_name  (WITH  LR_BRACKET  (IMPORTANCE  EQUAL  (LOW MEDIUM HIGH) COMMA?  REQUEST_MAX_MEMORY_GRANT_PERCENT  EQUAL  request_max_memory_grant = DECIMAL COMMA?  REQUEST_MAX_CPU_TIME_SEC  EQUAL  request_max_cpu_time_sec = DECIMAL REQUEST_MEMORY_GRANT_TIMEOUT_SEC  EQUAL  request_memory_grant_timeout_sec = DECIMAL MAX_DOP  EQUAL  max_dop = DECIMAL GROUP_MAX_REQUESTS  EQUAL  group_max_requests = DECIMAL)+  RR_BRACKET)?  (USING  (workload_group_pool_name DEFAULT_DOUBLE_QUOTE)?  (COMMA?  EXTERNAL  external_pool_name DEFAULT_DOUBLE_QUOTE)?)?
    /// </summary>
    public partial class AstCreateWorkloadGroup : AstRule
    {
        
        private AstWorkloadGroupGroupName _workloadGroupGroupName;
        
        public AstCreateWorkloadGroup(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWorkloadGroupGroupName>())
                {
                    this._workloadGroupGroupName = ((AstWorkloadGroupGroupName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateWorkloadGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWorkloadGroupGroupName>())
                {
                    this._workloadGroupGroupName = ((AstWorkloadGroupGroupName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWorkloadGroupGroupName WorkloadGroupGroupName
        {
            get
            {
                return this._workloadGroupGroupName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateWorkloadGroup(this);
        }
    }
    
    /// <summary>
    /// create_xml_schema_collection
    /// 	 : CREATE  XML  SCHEMA  COLLECTION  (relational_schema  DOT)?  sql_identifier  AS  (STRING id_ LOCAL_ID)
    /// </summary>
    public partial class AstCreateXmlSchemaCollection : AstRule
    {
        
        private AstSqlIdentifier _sqlIdentifier;
        
        public AstCreateXmlSchemaCollection(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlIdentifier>())
                {
                    this._sqlIdentifier = ((AstSqlIdentifier)(enumerator.Current));
                }
            }
        }
        
        public AstCreateXmlSchemaCollection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlIdentifier>())
                {
                    this._sqlIdentifier = ((AstSqlIdentifier)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSqlIdentifier SqlIdentifier
        {
            get
            {
                return this._sqlIdentifier;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateXmlSchemaCollection(this);
        }
    }
    
    /// <summary>
    /// create_partition_function
    /// 	 : CREATE  PARTITION  FUNCTION  partition_function_name  LR_BRACKET  input_parameter_type = data_type  RR_BRACKET  AS  RANGE  (LEFT RIGHT)?  FOR  VALUES  LR_BRACKET  boundary_values = expression_list  RR_BRACKET
    /// </summary>
    public partial class AstCreatePartitionFunction : AstRule
    {
        
        private AstPartitionFunctionName _partitionFunctionName;
        
        public AstCreatePartitionFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionName>())
                {
                    this._partitionFunctionName = ((AstPartitionFunctionName)(enumerator.Current));
                }
            }
        }
        
        public AstCreatePartitionFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionName>())
                {
                    this._partitionFunctionName = ((AstPartitionFunctionName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionFunctionName PartitionFunctionName
        {
            get
            {
                return this._partitionFunctionName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreatePartitionFunction(this);
        }
    }
    
    /// <summary>
    /// create_partition_scheme
    /// 	 : CREATE  PARTITION  SCHEME  partition_scheme_name  AS  PARTITION  partition_function_name  ALL?  TO  LR_BRACKET  file_group_names += id_  (COMMA  file_group_names += id_)*?  RR_BRACKET
    /// </summary>
    public partial class AstCreatePartitionScheme : AstRule
    {
        
        private AstPartitionSchemeName _partitionSchemeName;
        
        private AstPartitionFunctionName _partitionFunctionName;
        
        public AstCreatePartitionScheme(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeName>())
                {
                    this._partitionSchemeName = ((AstPartitionSchemeName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPartitionFunctionName>())
                {
                    this._partitionFunctionName = ((AstPartitionFunctionName)(enumerator.Current));
                }
            }
        }
        
        public AstCreatePartitionScheme(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeName>())
                {
                    this._partitionSchemeName = ((AstPartitionSchemeName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPartitionFunctionName>())
                {
                    this._partitionFunctionName = ((AstPartitionFunctionName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionSchemeName PartitionSchemeName
        {
            get
            {
                return this._partitionSchemeName;
            }
        }
        
        public virtual AstPartitionFunctionName PartitionFunctionName
        {
            get
            {
                return this._partitionFunctionName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreatePartitionScheme(this);
        }
    }
    
    /// <summary>
    /// create_queue
    /// 	 : CREATE  QUEUE  (complete_table_name queue_name)  queue_settings?  (ON  file_group_name DEFAULT)?
    /// </summary>
    public partial class AstCreateQueue : AstRule
    {
        
        private AstQueueSettings _queueSettings;
        
        public AstCreateQueue(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueueSettings>())
                {
                    this._queueSettings = ((AstQueueSettings)(enumerator.Current));
                }
            }
        }
        
        public AstCreateQueue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueueSettings>())
                {
                    this._queueSettings = ((AstQueueSettings)(enumerator.Current));
                }
            }
        }
        
        public virtual AstQueueSettings QueueSettings
        {
            get
            {
                return this._queueSettings;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateQueue(this);
        }
    }
    
    /// <summary>
    /// create_contract
    /// 	 : CREATE  CONTRACT  contract_name  (AUTHORIZATION  owner_name)?  LR_BRACKET  ((message_type_name DEFAULT)  SENT  BY  (INITIATOR TARGET ANY)  COMMA?)+  RR_BRACKET
    /// </summary>
    public partial class AstCreateContract : AstRule
    {
        
        private AstContractName _contractName;
        
        public AstCreateContract(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContractName>())
                {
                    this._contractName = ((AstContractName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateContract(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContractName>())
                {
                    this._contractName = ((AstContractName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstContractName ContractName
        {
            get
            {
                return this._contractName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateContract(this);
        }
    }
    
    /// <summary>
    /// message_statement
    /// 	 : CREATE  MESSAGE  TYPE  message_type_name  (AUTHORIZATION  owner_name)?  (VALIDATION  EQUAL  (NONE EMPTY WELL_FORMED_XML VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_name))
    /// </summary>
    public partial class AstMessageStatement : AstRule
    {
        
        private AstMessageTypeName _messageTypeName;
        
        public AstMessageStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeName>())
                {
                    this._messageTypeName = ((AstMessageTypeName)(enumerator.Current));
                }
            }
        }
        
        public AstMessageStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeName>())
                {
                    this._messageTypeName = ((AstMessageTypeName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMessageTypeName MessageTypeName
        {
            get
            {
                return this._messageTypeName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMessageStatement(this);
        }
    }
    
    /// <summary>
    /// merge_statement
    /// 	 : with_expression?  MERGE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  INTO?  ddl_object  with_table_hints?  as_table_alias?  USING  table_sources  ON  search_condition  when_matches+  output_clause?  option_clause?  SEMI
    /// </summary>
    public partial class AstMergeStatement : AstRule
    {
        
        private AstWithExpression _withExpression;
        
        private AstDdlObject _ddlObject;
        
        private AstWithTableHints _withTableHints;
        
        private AstAsTableAlias _asTableAlias;
        
        private AstTableSources _tableSources;
        
        private AstSearchCondition _searchCondition;
        
        private AstWhenMatches _whenMatches;
        
        private AstOutputClause _outputClause;
        
        private AstOptionClause _optionClause;
        
        public AstMergeStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDdlObject>())
                {
                    this._ddlObject = ((AstDdlObject)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._tableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhenMatches>())
                {
                    this._whenMatches = ((AstWhenMatches)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public AstMergeStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDdlObject>())
                {
                    this._ddlObject = ((AstDdlObject)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._tableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhenMatches>())
                {
                    this._whenMatches = ((AstWhenMatches)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstDdlObject DdlObject
        {
            get
            {
                return this._ddlObject;
            }
        }
        
        public virtual AstWithTableHints WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public virtual AstTableSources TableSources
        {
            get
            {
                return this._tableSources;
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public virtual AstWhenMatches WhenMatches
        {
            get
            {
                return this._whenMatches;
            }
        }
        
        public virtual AstOutputClause OutputClause
        {
            get
            {
                return this._outputClause;
            }
        }
        
        public virtual AstOptionClause OptionClause
        {
            get
            {
                return this._optionClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMergeStatement(this);
        }
    }
    
    /// <summary>
    /// update_elem_merges
    /// 	 : update_elem_merge  (COMMA  update_elem_merge)*?
    /// </summary>
    public partial class AstUpdateElemMerges : AstRule
    {
        
        private AstUpdateElemMerge _updateElemMerge;
        
        public AstUpdateElemMerges(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUpdateElemMerge>())
                {
                    this._updateElemMerge = ((AstUpdateElemMerge)(enumerator.Current));
                }
            }
        }
        
        public AstUpdateElemMerges(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUpdateElemMerge>())
                {
                    this._updateElemMerge = ((AstUpdateElemMerge)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUpdateElemMerge UpdateElemMerge
        {
            get
            {
                return this._updateElemMerge;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateElemMerges(this);
        }
    }
    
    /// <summary>
    /// delete_statement
    /// 	 : with_expression?  DELETE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT? TOP  DECIMAL)?  FROM?  delete_statement_from  with_table_hints?  output_clause?  (FROM  table_sources)?  (WHERE  (search_condition CURRENT  OF  (GLOBAL?  cursor_name cursor_var = LOCAL_ID)))?  for_clause?  option_clause?  SEMI?
    /// </summary>
    public partial class AstDeleteStatement : AstRule
    {
        
        private AstWithExpression _withExpression;
        
        private AstDeleteStatementFrom _deleteStatementFrom;
        
        private AstWithTableHints _withTableHints;
        
        private AstOutputClause _outputClause;
        
        private AstForClause _forClause;
        
        private AstOptionClause _optionClause;
        
        public AstDeleteStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDeleteStatementFrom>())
                {
                    this._deleteStatementFrom = ((AstDeleteStatementFrom)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public AstDeleteStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDeleteStatementFrom>())
                {
                    this._deleteStatementFrom = ((AstDeleteStatementFrom)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstDeleteStatementFrom DeleteStatementFrom
        {
            get
            {
                return this._deleteStatementFrom;
            }
        }
        
        public virtual AstWithTableHints WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
        }
        
        public virtual AstOutputClause OutputClause
        {
            get
            {
                return this._outputClause;
            }
        }
        
        public virtual AstForClause ForClause
        {
            get
            {
                return this._forClause;
            }
        }
        
        public virtual AstOptionClause OptionClause
        {
            get
            {
                return this._optionClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeleteStatement(this);
        }
    }
    
    /// <summary>
    /// insert_statement
    /// 	 : with_expression?  INSERT  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  INTO?  (ddl_object rowset_function_limited)  with_table_hints?  (LR_BRACKET  insert_column_name_list  RR_BRACKET)?  output_clause?  insert_statement_value  for_clause?  option_clause?  SEMI?
    /// </summary>
    public partial class AstInsertStatement : AstRule
    {
        
        private AstWithExpression _withExpression;
        
        private AstWithTableHints _withTableHints;
        
        private AstOutputClause _outputClause;
        
        private AstInsertStatementValue _insertStatementValue;
        
        private AstForClause _forClause;
        
        private AstOptionClause _optionClause;
        
        public AstInsertStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstInsertStatementValue>())
                {
                    this._insertStatementValue = ((AstInsertStatementValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public AstInsertStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstInsertStatementValue>())
                {
                    this._insertStatementValue = ((AstInsertStatementValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstWithTableHints WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
        }
        
        public virtual AstOutputClause OutputClause
        {
            get
            {
                return this._outputClause;
            }
        }
        
        public virtual AstInsertStatementValue InsertStatementValue
        {
            get
            {
                return this._insertStatementValue;
            }
        }
        
        public virtual AstForClause ForClause
        {
            get
            {
                return this._forClause;
            }
        }
        
        public virtual AstOptionClause OptionClause
        {
            get
            {
                return this._optionClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitInsertStatement(this);
        }
    }
    
    /// <summary>
    /// receive_statement
    /// 	 : LR_BRACKET?  RECEIVE  (ALL DISTINCT top_clause STAR)  (LOCAL_ID  EQUAL  expression  COMMA?)*?  FROM  complete_table_name  (INTO  table_variable  (WHERE  where = search_condition))?  RR_BRACKET?
    /// </summary>
    public partial class AstReceiveStatement : AstRule
    {
        
        private AstCompleteTableName _completeTableName;
        
        public AstReceiveStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCompleteTableName>())
                {
                    this._completeTableName = ((AstCompleteTableName)(enumerator.Current));
                }
            }
        }
        
        public AstReceiveStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCompleteTableName>())
                {
                    this._completeTableName = ((AstCompleteTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCompleteTableName CompleteTableName
        {
            get
            {
                return this._completeTableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReceiveStatement(this);
        }
    }
    
    /// <summary>
    /// select_statement_standalone
    /// 	 : with_expression?  select_statement
    /// </summary>
    public partial class AstSelectStatementStandalone : AstRule
    {
        
        private AstWithExpression _withExpression;
        
        private AstSelectStatement _selectStatement;
        
        public AstSelectStatementStandalone(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatement>())
                {
                    this._selectStatement = ((AstSelectStatement)(enumerator.Current));
                }
            }
        }
        
        public AstSelectStatementStandalone(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatement>())
                {
                    this._selectStatement = ((AstSelectStatement)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstSelectStatement SelectStatement
        {
            get
            {
                return this._selectStatement;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectStatementStandalone(this);
        }
    }
    
    /// <summary>
    /// select_statement
    /// 	 : query_expression  select_order_by_clause?  for_clause?  option_clause?  SEMI?
    /// </summary>
    public partial class AstSelectStatement : AstRule
    {
        
        private AstQueryExpression _queryExpression;
        
        private AstSelectOrderByClause _selectOrderByClause;
        
        private AstForClause _forClause;
        
        private AstOptionClause _optionClause;
        
        public AstSelectStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueryExpression>())
                {
                    this._queryExpression = ((AstQueryExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectOrderByClause>())
                {
                    this._selectOrderByClause = ((AstSelectOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public AstSelectStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueryExpression>())
                {
                    this._queryExpression = ((AstQueryExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectOrderByClause>())
                {
                    this._selectOrderByClause = ((AstSelectOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstQueryExpression QueryExpression
        {
            get
            {
                return this._queryExpression;
            }
        }
        
        public virtual AstSelectOrderByClause SelectOrderByClause
        {
            get
            {
                return this._selectOrderByClause;
            }
        }
        
        public virtual AstForClause ForClause
        {
            get
            {
                return this._forClause;
            }
        }
        
        public virtual AstOptionClause OptionClause
        {
            get
            {
                return this._optionClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectStatement(this);
        }
    }
    
    /// <summary>
    /// update_statement
    /// 	 : with_expression?  UPDATE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  (ddl_object rowset_function_limited)  with_table_hints?  SET  update_elems  output_clause?  (FROM  table_sources)?  (WHERE  (search_condition CURRENT  OF  (GLOBAL?  cursor_name cursor_var = LOCAL_ID)))?  for_clause?  option_clause?  SEMI?
    /// </summary>
    public partial class AstUpdateStatement : AstRule
    {
        
        private AstWithExpression _withExpression;
        
        private AstWithTableHints _withTableHints;
        
        private AstUpdateElems _updateElems;
        
        private AstOutputClause _outputClause;
        
        private AstForClause _forClause;
        
        private AstOptionClause _optionClause;
        
        public AstUpdateStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateElems>())
                {
                    this._updateElems = ((AstUpdateElems)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public AstUpdateStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateElems>())
                {
                    this._updateElems = ((AstUpdateElems)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOptionClause>())
                {
                    this._optionClause = ((AstOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstWithTableHints WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
        }
        
        public virtual AstUpdateElems UpdateElems
        {
            get
            {
                return this._updateElems;
            }
        }
        
        public virtual AstOutputClause OutputClause
        {
            get
            {
                return this._outputClause;
            }
        }
        
        public virtual AstForClause ForClause
        {
            get
            {
                return this._forClause;
            }
        }
        
        public virtual AstOptionClause OptionClause
        {
            get
            {
                return this._optionClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateStatement(this);
        }
    }
    
    /// <summary>
    /// update_elems
    /// 	 : update_elem  (COMMA  update_elem)*?
    /// </summary>
    public partial class AstUpdateElems : AstRule
    {
        
        private AstUpdateElem _updateElem;
        
        public AstUpdateElems(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUpdateElem>())
                {
                    this._updateElem = ((AstUpdateElem)(enumerator.Current));
                }
            }
        }
        
        public AstUpdateElems(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUpdateElem>())
                {
                    this._updateElem = ((AstUpdateElem)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUpdateElem UpdateElem
        {
            get
            {
                return this._updateElem;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateElems(this);
        }
    }
    
    /// <summary>
    /// output_clause
    /// 	 : OUTPUT  output_dml_list_elems  (INTO  (LOCAL_ID full_table_name)  (LR_BRACKET  column_name_list  RR_BRACKET)?)?
    /// </summary>
    public partial class AstOutputClause : AstRule
    {
        
        private AstOutputDmlListElems _outputDmlListElems;
        
        public AstOutputClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOutputDmlListElems>())
                {
                    this._outputDmlListElems = ((AstOutputDmlListElems)(enumerator.Current));
                }
            }
        }
        
        public AstOutputClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOutputDmlListElems>())
                {
                    this._outputDmlListElems = ((AstOutputDmlListElems)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOutputDmlListElems OutputDmlListElems
        {
            get
            {
                return this._outputDmlListElems;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOutputClause(this);
        }
    }
    
    /// <summary>
    /// output_dml_list_elems
    /// 	 : output_dml_list_elem  (COMMA  output_dml_list_elem)*?
    /// </summary>
    public partial class AstOutputDmlListElems : AstRule
    {
        
        private AstOutputDmlListElem _outputDmlListElem;
        
        public AstOutputDmlListElems(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOutputDmlListElem>())
                {
                    this._outputDmlListElem = ((AstOutputDmlListElem)(enumerator.Current));
                }
            }
        }
        
        public AstOutputDmlListElems(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOutputDmlListElem>())
                {
                    this._outputDmlListElem = ((AstOutputDmlListElem)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOutputDmlListElem OutputDmlListElem
        {
            get
            {
                return this._outputDmlListElem;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOutputDmlListElems(this);
        }
    }
    
    /// <summary>
    /// output_dml_list_elem
    /// 	 : (expression asterisk)  as_column_alias?
    /// </summary>
    public partial class AstOutputDmlListElem : AstRule
    {
        
        private AstAsColumnAlias _asColumnAlias;
        
        public AstOutputDmlListElem(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsColumnAlias>())
                {
                    this._asColumnAlias = ((AstAsColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public AstOutputDmlListElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsColumnAlias>())
                {
                    this._asColumnAlias = ((AstAsColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAsColumnAlias AsColumnAlias
        {
            get
            {
                return this._asColumnAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOutputDmlListElem(this);
        }
    }
    
    /// <summary>
    /// create_index
    /// 	 : CREATE  UNIQUE?  clustered?  INDEX  id_  ON  full_table_name  LR_BRACKET  column_name_list_with_order  RR_BRACKET  (INCLUDE  LR_BRACKET  column_name_list  RR_BRACKET)?  (WHERE  where = search_condition)?  (create_index_options)?  (ON  id_)?  SEMI?
    /// </summary>
    public partial class AstCreateIndex : AstRule
    {
        
        private AstClustered _clustered;
        
        private AstId _id;
        
        private AstFullTableName _fullTableName;
        
        private AstColumnNameListWithOrder _columnNameListWithOrder;
        
        public AstCreateIndex(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClustered>())
                {
                    this._clustered = ((AstClustered)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this._columnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
            }
        }
        
        public AstCreateIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClustered>())
                {
                    this._clustered = ((AstClustered)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this._columnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
            }
        }
        
        public virtual AstClustered Clustered
        {
            get
            {
                return this._clustered;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
        }
        
        public virtual AstColumnNameListWithOrder ColumnNameListWithOrder
        {
            get
            {
                return this._columnNameListWithOrder;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateIndex(this);
        }
    }
    
    /// <summary>
    /// create_index_options
    /// 	 : WITH  LR_BRACKET  relational_index_options  RR_BRACKET
    /// </summary>
    public partial class AstCreateIndexOptions : AstRule
    {
        
        private AstRelationalIndexOptions _relationalIndexOptions;
        
        public AstCreateIndexOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRelationalIndexOptions>())
                {
                    this._relationalIndexOptions = ((AstRelationalIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRelationalIndexOptions>())
                {
                    this._relationalIndexOptions = ((AstRelationalIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRelationalIndexOptions RelationalIndexOptions
        {
            get
            {
                return this._relationalIndexOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateIndexOptions(this);
        }
    }
    
    /// <summary>
    /// relational_index_options
    /// 	 : relational_index_option  (COMMA  relational_index_option)*?
    /// </summary>
    public partial class AstRelationalIndexOptions : AstRule
    {
        
        private AstRelationalIndexOption _relationalIndexOption;
        
        public AstRelationalIndexOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRelationalIndexOption>())
                {
                    this._relationalIndexOption = ((AstRelationalIndexOption)(enumerator.Current));
                }
            }
        }
        
        public AstRelationalIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRelationalIndexOption>())
                {
                    this._relationalIndexOption = ((AstRelationalIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRelationalIndexOption RelationalIndexOption
        {
            get
            {
                return this._relationalIndexOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRelationalIndexOptions(this);
        }
    }
    
    /// <summary>
    /// alter_index
    /// 	 : ALTER  INDEX  (id_ ALL)  ON  full_table_name  (DISABLE PAUSE ABORT RESUME  resumable_index_options? reorganize_partition set_index_options rebuild_partition)
    /// </summary>
    public partial class AstAlterIndex : AstRule
    {
        
        private AstFullTableName _fullTableName;
        
        public AstAlterIndex(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterIndex(this);
        }
    }
    
    /// <summary>
    /// reorganize_partition
    /// 	 : REORGANIZE  (PARTITION  EQUAL  DECIMAL)?  reorganize_options?
    /// </summary>
    public partial class AstReorganizePartition : AstRule
    {
        
        private AstReorganizeOptions _reorganizeOptions;
        
        public AstReorganizePartition(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReorganizeOptions>())
                {
                    this._reorganizeOptions = ((AstReorganizeOptions)(enumerator.Current));
                }
            }
        }
        
        public AstReorganizePartition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReorganizeOptions>())
                {
                    this._reorganizeOptions = ((AstReorganizeOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstReorganizeOptions ReorganizeOptions
        {
            get
            {
                return this._reorganizeOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReorganizePartition(this);
        }
    }
    
    /// <summary>
    /// set_index_options
    /// 	 : SET  LR_BRACKET  set_index_option  (COMMA  set_index_option)*?  RR_BRACKET
    /// </summary>
    public partial class AstSetIndexOptions : AstRule
    {
        
        private AstSetIndexOption _setIndexOption;
        
        public AstSetIndexOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSetIndexOption>())
                {
                    this._setIndexOption = ((AstSetIndexOption)(enumerator.Current));
                }
            }
        }
        
        public AstSetIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSetIndexOption>())
                {
                    this._setIndexOption = ((AstSetIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSetIndexOption SetIndexOption
        {
            get
            {
                return this._setIndexOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetIndexOptions(this);
        }
    }
    
    /// <summary>
    /// rebuild_index_options
    /// 	 : WITH  LR_BRACKET  rebuild_index_option  (COMMA  rebuild_index_option)*?  RR_BRACKET
    /// </summary>
    public partial class AstRebuildIndexOptions : AstRule
    {
        
        private AstRebuildIndexOption _rebuildIndexOption;
        
        public AstRebuildIndexOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRebuildIndexOption>())
                {
                    this._rebuildIndexOption = ((AstRebuildIndexOption)(enumerator.Current));
                }
            }
        }
        
        public AstRebuildIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRebuildIndexOption>())
                {
                    this._rebuildIndexOption = ((AstRebuildIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRebuildIndexOption RebuildIndexOption
        {
            get
            {
                return this._rebuildIndexOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRebuildIndexOptions(this);
        }
    }
    
    /// <summary>
    /// single_partition_rebuild_index_options
    /// 	 : WITH  LR_BRACKET  single_partition_rebuild_index_option  (COMMA  single_partition_rebuild_index_option)*?  RR_BRACKET
    /// </summary>
    public partial class AstSinglePartitionRebuildIndexOptions : AstRule
    {
        
        private AstSinglePartitionRebuildIndexOption _singlePartitionRebuildIndexOption;
        
        public AstSinglePartitionRebuildIndexOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSinglePartitionRebuildIndexOption>())
                {
                    this._singlePartitionRebuildIndexOption = ((AstSinglePartitionRebuildIndexOption)(enumerator.Current));
                }
            }
        }
        
        public AstSinglePartitionRebuildIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSinglePartitionRebuildIndexOption>())
                {
                    this._singlePartitionRebuildIndexOption = ((AstSinglePartitionRebuildIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption
        {
            get
            {
                return this._singlePartitionRebuildIndexOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSinglePartitionRebuildIndexOptions(this);
        }
    }
    
    /// <summary>
    /// create_columnstore_index
    /// 	 : CREATE  CLUSTERED  COLUMNSTORE  INDEX  id_  ON  full_table_name  create_columnstore_index_options?  (ON  id_)?  SEMI?
    /// </summary>
    public partial class AstCreateColumnstoreIndex : AstRule
    {
        
        private AstId _id;
        
        private AstFullTableName _fullTableName;
        
        private AstCreateColumnstoreIndexOptions _createColumnstoreIndexOptions;
        
        public AstCreateColumnstoreIndex(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions>())
                {
                    this._createColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateColumnstoreIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions>())
                {
                    this._createColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
        }
        
        public virtual AstCreateColumnstoreIndexOptions CreateColumnstoreIndexOptions
        {
            get
            {
                return this._createColumnstoreIndexOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnstoreIndex(this);
        }
    }
    
    /// <summary>
    /// create_columnstore_index_options
    /// 	 : WITH  LR_BRACKET  columnstore_index_option  (COMMA  columnstore_index_option)*?  RR_BRACKET
    /// </summary>
    public partial class AstCreateColumnstoreIndexOptions : AstRule
    {
        
        private AstColumnstoreIndexOption _columnstoreIndexOption;
        
        public AstCreateColumnstoreIndexOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnstoreIndexOption>())
                {
                    this._columnstoreIndexOption = ((AstColumnstoreIndexOption)(enumerator.Current));
                }
            }
        }
        
        public AstCreateColumnstoreIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnstoreIndexOption>())
                {
                    this._columnstoreIndexOption = ((AstColumnstoreIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnstoreIndexOption ColumnstoreIndexOption
        {
            get
            {
                return this._columnstoreIndexOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnstoreIndexOptions(this);
        }
    }
    
    /// <summary>
    /// create_nonclustered_columnstore_index
    /// 	 : CREATE  NONCLUSTERED?  COLUMNSTORE  INDEX  id_  ON  full_table_name  LR_BRACKET  column_name_list_with_order  RR_BRACKET  (WHERE  search_condition)?  create_columnstore_index_options?  (ON  id_)?  SEMI?
    /// </summary>
    public partial class AstCreateNonclusteredColumnstoreIndex : AstRule
    {
        
        private AstId _id;
        
        private AstFullTableName _fullTableName;
        
        private AstColumnNameListWithOrder _columnNameListWithOrder;
        
        private AstCreateColumnstoreIndexOptions _createColumnstoreIndexOptions;
        
        public AstCreateNonclusteredColumnstoreIndex(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this._columnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions>())
                {
                    this._createColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateNonclusteredColumnstoreIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this._columnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions>())
                {
                    this._createColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
        }
        
        public virtual AstColumnNameListWithOrder ColumnNameListWithOrder
        {
            get
            {
                return this._columnNameListWithOrder;
            }
        }
        
        public virtual AstCreateColumnstoreIndexOptions CreateColumnstoreIndexOptions
        {
            get
            {
                return this._createColumnstoreIndexOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateNonclusteredColumnstoreIndex(this);
        }
    }
    
    /// <summary>
    /// create_xml_index
    /// 	 : CREATE  PRIMARY?  XML  INDEX  id_  ON  full_table_name  LR_BRACKET  id_  RR_BRACKET  (USING  XML  INDEX  id_  (FOR  (VALUE PATH PROPERTY)?)?)?  xml_index_options?  SEMI?
    /// </summary>
    public partial class AstCreateXmlIndex : AstRule
    {
        
        private AstId _id;
        
        private AstFullTableName _fullTableName;
        
        private AstXmlIndexOptions _xmlIndexOptions;
        
        public AstCreateXmlIndex(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstXmlIndexOptions>())
                {
                    this._xmlIndexOptions = ((AstXmlIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateXmlIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstXmlIndexOptions>())
                {
                    this._xmlIndexOptions = ((AstXmlIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
        }
        
        public virtual AstXmlIndexOptions XmlIndexOptions
        {
            get
            {
                return this._xmlIndexOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateXmlIndex(this);
        }
    }
    
    /// <summary>
    /// xml_index_options
    /// 	 : WITH  LR_BRACKET  xml_index_option  (COMMA  xml_index_option)*?  RR_BRACKET
    /// </summary>
    public partial class AstXmlIndexOptions : AstRule
    {
        
        private AstXmlIndexOption _xmlIndexOption;
        
        public AstXmlIndexOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstXmlIndexOption>())
                {
                    this._xmlIndexOption = ((AstXmlIndexOption)(enumerator.Current));
                }
            }
        }
        
        public AstXmlIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstXmlIndexOption>())
                {
                    this._xmlIndexOption = ((AstXmlIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstXmlIndexOption XmlIndexOption
        {
            get
            {
                return this._xmlIndexOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlIndexOptions(this);
        }
    }
    
    /// <summary>
    /// create_or_alter_procedure
    /// 	 : ((CREATE  (OR  (ALTER REPLACE))?) ALTER)  proc = (PROC PROCEDURE)  procName = func_proc_name_schema  (SEMI  DECIMAL)?  (LR_BRACKET?  procedure_params  RR_BRACKET?)?  procedure_options?  (FOR  REPLICATION)?  AS  (as_external_name sql_clause)
    /// </summary>
    public partial class AstCreateOrAlterProcedure : AstRule
    {
        
        private AstProcedureOptions _procedureOptions;
        
        public AstCreateOrAlterProcedure(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcedureOptions>())
                {
                    this._procedureOptions = ((AstProcedureOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterProcedure(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcedureOptions>())
                {
                    this._procedureOptions = ((AstProcedureOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProcedureOptions ProcedureOptions
        {
            get
            {
                return this._procedureOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterProcedure(this);
        }
    }
    
    /// <summary>
    /// procedure_options
    /// 	 : WITH  procedure_option  (COMMA  procedure_option)*?
    /// </summary>
    public partial class AstProcedureOptions : AstRule
    {
        
        private AstProcedureOption _procedureOption;
        
        public AstProcedureOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcedureOption>())
                {
                    this._procedureOption = ((AstProcedureOption)(enumerator.Current));
                }
            }
        }
        
        public AstProcedureOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcedureOption>())
                {
                    this._procedureOption = ((AstProcedureOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProcedureOption ProcedureOption
        {
            get
            {
                return this._procedureOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcedureOptions(this);
        }
    }
    
    /// <summary>
    /// as_external_name
    /// 	 : EXTERNAL  NAME  assembly_name  DOT  class_name  DOT  method_name
    /// </summary>
    public partial class AstAsExternalName : AstRule
    {
        
        private AstAssemblyName _assemblyName;
        
        private AstClassName _className;
        
        private AstMethodName _methodName;
        
        public AstAsExternalName(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyName>())
                {
                    this._assemblyName = ((AstAssemblyName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClassName>())
                {
                    this._className = ((AstClassName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMethodName>())
                {
                    this._methodName = ((AstMethodName)(enumerator.Current));
                }
            }
        }
        
        public AstAsExternalName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyName>())
                {
                    this._assemblyName = ((AstAssemblyName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClassName>())
                {
                    this._className = ((AstClassName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMethodName>())
                {
                    this._methodName = ((AstMethodName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblyName AssemblyName
        {
            get
            {
                return this._assemblyName;
            }
        }
        
        public virtual AstClassName ClassName
        {
            get
            {
                return this._className;
            }
        }
        
        public virtual AstMethodName MethodName
        {
            get
            {
                return this._methodName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsExternalName(this);
        }
    }
    
    /// <summary>
    /// create_or_alter_dml_trigger
    /// 	 : ((CREATE  (OR  ALTER)?) ALTER)  TRIGGER  simple_name  ON  full_table_name  dml_trigger_options?  (FOR AFTER INSTEAD  OF)  dml_trigger_operations  (WITH  APPEND)?  (NOT  FOR  REPLICATION)?  AS  sql_clauses
    /// </summary>
    public partial class AstCreateOrAlterDmlTrigger : AstRule
    {
        
        private AstSimpleName _simpleName;
        
        private AstFullTableName _fullTableName;
        
        private AstDmlTriggerOptions _dmlTriggerOptions;
        
        private AstDmlTriggerOperations _dmlTriggerOperations;
        
        private AstSqlClauses _sqlClauses;
        
        public AstCreateOrAlterDmlTrigger(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleName>())
                {
                    this._simpleName = ((AstSimpleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions>())
                {
                    this._dmlTriggerOptions = ((AstDmlTriggerOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this._dmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterDmlTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleName>())
                {
                    this._simpleName = ((AstSimpleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions>())
                {
                    this._dmlTriggerOptions = ((AstDmlTriggerOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this._dmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleName SimpleName
        {
            get
            {
                return this._simpleName;
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
        }
        
        public virtual AstDmlTriggerOptions DmlTriggerOptions
        {
            get
            {
                return this._dmlTriggerOptions;
            }
        }
        
        public virtual AstDmlTriggerOperations DmlTriggerOperations
        {
            get
            {
                return this._dmlTriggerOperations;
            }
        }
        
        public virtual AstSqlClauses SqlClauses
        {
            get
            {
                return this._sqlClauses;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterDmlTrigger(this);
        }
    }
    
    /// <summary>
    /// dml_trigger_options
    /// 	 : WITH  dml_trigger_option  (COMMA  dml_trigger_option)*?
    /// </summary>
    public partial class AstDmlTriggerOptions : AstRule
    {
        
        private AstDmlTriggerOption _dmlTriggerOption;
        
        public AstDmlTriggerOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDmlTriggerOption>())
                {
                    this._dmlTriggerOption = ((AstDmlTriggerOption)(enumerator.Current));
                }
            }
        }
        
        public AstDmlTriggerOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDmlTriggerOption>())
                {
                    this._dmlTriggerOption = ((AstDmlTriggerOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDmlTriggerOption DmlTriggerOption
        {
            get
            {
                return this._dmlTriggerOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDmlTriggerOptions(this);
        }
    }
    
    /// <summary>
    /// dml_trigger_operations
    /// 	 : dml_trigger_operation  (COMMA  dml_trigger_operation)*?
    /// </summary>
    public partial class AstDmlTriggerOperations : AstRule
    {
        
        private AstDmlTriggerOperation _dmlTriggerOperation;
        
        public AstDmlTriggerOperations(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDmlTriggerOperation>())
                {
                    this._dmlTriggerOperation = ((AstDmlTriggerOperation)(enumerator.Current));
                }
            }
        }
        
        public AstDmlTriggerOperations(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDmlTriggerOperation>())
                {
                    this._dmlTriggerOperation = ((AstDmlTriggerOperation)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDmlTriggerOperation DmlTriggerOperation
        {
            get
            {
                return this._dmlTriggerOperation;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDmlTriggerOperations(this);
        }
    }
    
    /// <summary>
    /// create_or_alter_ddl_trigger
    /// 	 : ((CREATE  (OR  ALTER)?) ALTER)  TRIGGER  simple_name  ON  (ALL  SERVER DATABASE)  dml_trigger_options?  (FOR AFTER)  dml_trigger_operations  AS  sql_clauses
    /// </summary>
    public partial class AstCreateOrAlterDdlTrigger : AstRule
    {
        
        private AstSimpleName _simpleName;
        
        private AstDmlTriggerOptions _dmlTriggerOptions;
        
        private AstDmlTriggerOperations _dmlTriggerOperations;
        
        private AstSqlClauses _sqlClauses;
        
        public AstCreateOrAlterDdlTrigger(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleName>())
                {
                    this._simpleName = ((AstSimpleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions>())
                {
                    this._dmlTriggerOptions = ((AstDmlTriggerOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this._dmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterDdlTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleName>())
                {
                    this._simpleName = ((AstSimpleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions>())
                {
                    this._dmlTriggerOptions = ((AstDmlTriggerOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this._dmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleName SimpleName
        {
            get
            {
                return this._simpleName;
            }
        }
        
        public virtual AstDmlTriggerOptions DmlTriggerOptions
        {
            get
            {
                return this._dmlTriggerOptions;
            }
        }
        
        public virtual AstDmlTriggerOperations DmlTriggerOperations
        {
            get
            {
                return this._dmlTriggerOperations;
            }
        }
        
        public virtual AstSqlClauses SqlClauses
        {
            get
            {
                return this._sqlClauses;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterDdlTrigger(this);
        }
    }
    
    /// <summary>
    /// procedure_params
    /// 	 : procedure_param  (COMMA  procedure_param)*?
    /// </summary>
    public partial class AstProcedureParams : AstRule
    {
        
        private AstProcedureParam _procedureParam;
        
        public AstProcedureParams(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcedureParam>())
                {
                    this._procedureParam = ((AstProcedureParam)(enumerator.Current));
                }
            }
        }
        
        public AstProcedureParams(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcedureParam>())
                {
                    this._procedureParam = ((AstProcedureParam)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProcedureParam ProcedureParam
        {
            get
            {
                return this._procedureParam;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcedureParams(this);
        }
    }
    
    /// <summary>
    /// func_body_returns_select
    /// 	 : RETURNS  TABLE  function_options?  AS?  (as_external_name RETURN  (LR_BRACKET  select_statement_standalone  RR_BRACKET select_statement_standalone))
    /// </summary>
    public partial class AstFuncBodyReturnsSelect : AstRule
    {
        
        private AstFunctionOptions _functionOptions;
        
        public AstFuncBodyReturnsSelect(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public AstFuncBodyReturnsSelect(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFunctionOptions FunctionOptions
        {
            get
            {
                return this._functionOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncBodyReturnsSelect(this);
        }
    }
    
    /// <summary>
    /// function_options
    /// 	 : WITH  function_option  (COMMA  function_option)*?
    /// </summary>
    public partial class AstFunctionOptions : AstRule
    {
        
        private AstFunctionOption _functionOption;
        
        public AstFunctionOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionOption>())
                {
                    this._functionOption = ((AstFunctionOption)(enumerator.Current));
                }
            }
        }
        
        public AstFunctionOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionOption>())
                {
                    this._functionOption = ((AstFunctionOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFunctionOption FunctionOption
        {
            get
            {
                return this._functionOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFunctionOptions(this);
        }
    }
    
    /// <summary>
    /// func_body_returns_table
    /// 	 : RETURNS  LOCAL_ID  table_type_definition  function_options?  AS?  (as_external_name BEGIN  sql_clauses?  RETURN  SEMI?  END  SEMI?)
    /// </summary>
    public partial class AstFuncBodyReturnsTable : AstRule
    {
        
        private AstTableTypeDefinition _tableTypeDefinition;
        
        private AstFunctionOptions _functionOptions;
        
        public AstFuncBodyReturnsTable(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableTypeDefinition>())
                {
                    this._tableTypeDefinition = ((AstTableTypeDefinition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public AstFuncBodyReturnsTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableTypeDefinition>())
                {
                    this._tableTypeDefinition = ((AstTableTypeDefinition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableTypeDefinition TableTypeDefinition
        {
            get
            {
                return this._tableTypeDefinition;
            }
        }
        
        public virtual AstFunctionOptions FunctionOptions
        {
            get
            {
                return this._functionOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncBodyReturnsTable(this);
        }
    }
    
    /// <summary>
    /// func_body_returns_scalar
    /// 	 : RETURNS  data_type  function_options?  AS?  (as_external_name BEGIN  sql_clause?  RETURN  ret = expression  SEMI?  END)
    /// </summary>
    public partial class AstFuncBodyReturnsScalar : AstRule
    {
        
        private AstDataType _dataType;
        
        private AstFunctionOptions _functionOptions;
        
        public AstFuncBodyReturnsScalar(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public AstFuncBodyReturnsScalar(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public virtual AstFunctionOptions FunctionOptions
        {
            get
            {
                return this._functionOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncBodyReturnsScalar(this);
        }
    }
    
    /// <summary>
    /// procedure_param
    /// 	 : LOCAL_ID  AS?  (type_schema  DOT)?  data_type  VARYING?  (EQUAL  default_val = default_value)?  (OUT OUTPUT READONLY)?
    /// </summary>
    public partial class AstProcedureParam : AstRule
    {
        
        private AstDataType _dataType;
        
        public AstProcedureParam(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
            }
        }
        
        public AstProcedureParam(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcedureParam(this);
        }
    }
    
    /// <summary>
    /// create_statistics
    /// 	 : CREATE  STATISTICS  id_  ON  full_table_name  LR_BRACKET  column_name_list  RR_BRACKET  (WITH  (FULLSCAN SAMPLE  DECIMAL  (PERCENT ROWS) STATS_STREAM)  (COMMA  NORECOMPUTE)?  (COMMA  INCREMENTAL  EQUAL  on_off)?)?  SEMI?
    /// </summary>
    public partial class AstCreateStatistics : AstRule
    {
        
        private AstId _id;
        
        private AstFullTableName _fullTableName;
        
        private AstColumnNameList _columnNameList;
        
        public AstCreateStatistics(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public AstCreateStatistics(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
        }
        
        public virtual AstColumnNameList ColumnNameList
        {
            get
            {
                return this._columnNameList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateStatistics(this);
        }
    }
    
    /// <summary>
    /// update_statistics
    /// 	 : UPDATE  STATISTICS  complete_table_name  (id_ LR_BRACKET  id_  (COMMA  id_)*?  RR_BRACKET)?  update_statistics_options?
    /// </summary>
    public partial class AstUpdateStatistics : AstRule
    {
        
        private AstCompleteTableName _completeTableName;
        
        private AstUpdateStatisticsOptions _updateStatisticsOptions;
        
        public AstUpdateStatistics(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCompleteTableName>())
                {
                    this._completeTableName = ((AstCompleteTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateStatisticsOptions>())
                {
                    this._updateStatisticsOptions = ((AstUpdateStatisticsOptions)(enumerator.Current));
                }
            }
        }
        
        public AstUpdateStatistics(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCompleteTableName>())
                {
                    this._completeTableName = ((AstCompleteTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateStatisticsOptions>())
                {
                    this._updateStatisticsOptions = ((AstUpdateStatisticsOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCompleteTableName CompleteTableName
        {
            get
            {
                return this._completeTableName;
            }
        }
        
        public virtual AstUpdateStatisticsOptions UpdateStatisticsOptions
        {
            get
            {
                return this._updateStatisticsOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateStatistics(this);
        }
    }
    
    /// <summary>
    /// update_statistics_options
    /// 	 : WITH  update_statistics_option  (COMMA  update_statistics_option)*?
    /// </summary>
    public partial class AstUpdateStatisticsOptions : AstRule
    {
        
        private AstUpdateStatisticsOption _updateStatisticsOption;
        
        public AstUpdateStatisticsOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUpdateStatisticsOption>())
                {
                    this._updateStatisticsOption = ((AstUpdateStatisticsOption)(enumerator.Current));
                }
            }
        }
        
        public AstUpdateStatisticsOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUpdateStatisticsOption>())
                {
                    this._updateStatisticsOption = ((AstUpdateStatisticsOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUpdateStatisticsOption UpdateStatisticsOption
        {
            get
            {
                return this._updateStatisticsOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateStatisticsOptions(this);
        }
    }
    
    /// <summary>
    /// create_table
    /// 	 : CREATE  TABLE  full_table_name  LR_BRACKET  column_def_table_constraints  (COMMA?  table_indices)*?  COMMA?  RR_BRACKET  (LOCK  simple_id)?  table_options*?  (ON  id_ DEFAULT)?  (TEXTIMAGE_ON  id_ DEFAULT)?  SEMI?
    /// </summary>
    public partial class AstCreateTable : AstRule
    {
        
        private AstFullTableName _fullTableName;
        
        private AstColumnDefTableConstraints _columnDefTableConstraints;
        
        private AstTableOptions _tableOptions;
        
        public AstCreateTable(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableOptions>())
                {
                    this._tableOptions = ((AstTableOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableOptions>())
                {
                    this._tableOptions = ((AstTableOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
        }
        
        public virtual AstColumnDefTableConstraints ColumnDefTableConstraints
        {
            get
            {
                return this._columnDefTableConstraints;
            }
        }
        
        public virtual AstTableOptions TableOptions
        {
            get
            {
                return this._tableOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateTable(this);
        }
    }
    
    /// <summary>
    /// create_table_index_options
    /// 	 : WITH  LR_BRACKET  create_table_index_option  (COMMA  create_table_index_option)*?  RR_BRACKET
    /// </summary>
    public partial class AstCreateTableIndexOptions : AstRule
    {
        
        private AstCreateTableIndexOption _createTableIndexOption;
        
        public AstCreateTableIndexOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateTableIndexOption>())
                {
                    this._createTableIndexOption = ((AstCreateTableIndexOption)(enumerator.Current));
                }
            }
        }
        
        public AstCreateTableIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateTableIndexOption>())
                {
                    this._createTableIndexOption = ((AstCreateTableIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCreateTableIndexOption CreateTableIndexOption
        {
            get
            {
                return this._createTableIndexOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateTableIndexOptions(this);
        }
    }
    
    /// <summary>
    /// create_view
    /// 	 : CREATE  VIEW  simple_name  (LR_BRACKET  column_name_list  RR_BRACKET)?  view_attributes?  AS  select_statement_standalone  (WITH  CHECK  OPTION)?  SEMI?
    /// </summary>
    public partial class AstCreateView : AstRule
    {
        
        private AstSimpleName _simpleName;
        
        private AstViewAttributes _viewAttributes;
        
        private AstSelectStatementStandalone _selectStatementStandalone;
        
        public AstCreateView(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleName>())
                {
                    this._simpleName = ((AstSimpleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstViewAttributes>())
                {
                    this._viewAttributes = ((AstViewAttributes)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public AstCreateView(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleName>())
                {
                    this._simpleName = ((AstSimpleName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstViewAttributes>())
                {
                    this._viewAttributes = ((AstViewAttributes)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleName SimpleName
        {
            get
            {
                return this._simpleName;
            }
        }
        
        public virtual AstViewAttributes ViewAttributes
        {
            get
            {
                return this._viewAttributes;
            }
        }
        
        public virtual AstSelectStatementStandalone SelectStatementStandalone
        {
            get
            {
                return this._selectStatementStandalone;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateView(this);
        }
    }
    
    /// <summary>
    /// alter_table
    /// 	 : ALTER  TABLE  full_table_name  (SET  LR_BRACKET  LOCK_ESCALATION  EQUAL  (AUTO TABLE DISABLE)  RR_BRACKET ADD  column_def_table_constraints ALTER  COLUMN  (column_definition column_modifier) DROP  COLUMN  ids_ DROP  CONSTRAINT  constraint_name WITH  (CHECK NOCHECK)  ADD  (CONSTRAINT  constraint_name)?  (FOREIGN  KEY  LR_BRACKET  fk = column_name_list  RR_BRACKET  REFERENCES  full_table_name  (LR_BRACKET  pk = column_name_list  RR_BRACKET)?  (on_delete on_update)*? CHECK  LR_BRACKET  search_condition  RR_BRACKET) (NOCHECK CHECK)  CONSTRAINT  constraint_name (ENABLE DISABLE)  TRIGGER  id_? REBUILD  table_options SWITCH  switch_partition)  SEMI?
    /// </summary>
    public partial class AstAlterTable : AstRule
    {
        
        private AstFullTableName _fullTableName;
        
        public AstAlterTable(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterTable(this);
        }
    }
    
    /// <summary>
    /// filespecs
    /// 	 : filespec  (COMMA  filespec)*?
    /// </summary>
    public partial class AstFilespecs : AstRule
    {
        
        private AstFilespec _filespec;
        
        public AstFilespecs(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFilespec>())
                {
                    this._filespec = ((AstFilespec)(enumerator.Current));
                }
            }
        }
        
        public AstFilespecs(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFilespec>())
                {
                    this._filespec = ((AstFilespec)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFilespec Filespec
        {
            get
            {
                return this._filespec;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilespecs(this);
        }
    }
    
    /// <summary>
    /// filespec
    /// 	 : LR_BRACKET  NAME  EQUAL  file_group_name  (COMMA  NEWNAME  EQUAL  new_file_group_name STRING)?  (COMMA  FILENAME  EQUAL  file_name = STRING)?  (COMMA  SIZE  EQUAL  size = file_size)?  (COMMA  MAXSIZE  EQUAL  (max_size = file_size) UNLIMITED)?  (COMMA  FILEGROWTH  EQUAL  growth_increment = file_size)?  (COMMA  OFFLINE)?  RR_BRACKET
    /// </summary>
    public partial class AstFilespec : AstRule
    {
        
        private AstFileGroupName _fileGroupName;
        
        public AstFilespec(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileGroupName>())
                {
                    this._fileGroupName = ((AstFileGroupName)(enumerator.Current));
                }
            }
        }
        
        public AstFilespec(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileGroupName>())
                {
                    this._fileGroupName = ((AstFileGroupName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFileGroupName FileGroupName
        {
            get
            {
                return this._fileGroupName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilespec(this);
        }
    }
    
    /// <summary>
    /// change_tracking_option_lists
    /// 	 : change_tracking_option_list  (COMMA  change_tracking_option_list)*?
    /// </summary>
    public partial class AstChangeTrackingOptionLists : AstRule
    {
        
        private AstChangeTrackingOptionList _changeTrackingOptionList;
        
        public AstChangeTrackingOptionLists(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstChangeTrackingOptionList>())
                {
                    this._changeTrackingOptionList = ((AstChangeTrackingOptionList)(enumerator.Current));
                }
            }
        }
        
        public AstChangeTrackingOptionLists(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstChangeTrackingOptionList>())
                {
                    this._changeTrackingOptionList = ((AstChangeTrackingOptionList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstChangeTrackingOptionList ChangeTrackingOptionList
        {
            get
            {
                return this._changeTrackingOptionList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTrackingOptionLists(this);
        }
    }
    
    /// <summary>
    /// alter_endpoint
    /// 	 : ALTER  ENDPOINT  endpoint_name  (AUTHORIZATION  login_name)?  (STATE  EQUAL  (state = STARTED state = STOPPED state = DISABLED))?  AS  TCP  LR_BRACKET  LISTENER_PORT  EQUAL  port = DECIMAL  (COMMA  LISTENER_IP  EQUAL  (ALL IPV4_ADDR IPV6_ADDR STRING))?  RR_BRACKET  (TSQL FOR  SERVICE_BROKER  LR_BRACKET  AUTHENTICATION  EQUAL  (WINDOWS  (NTLM KERBEROS NEGOTIATE)?  (CERTIFICATE  certificate_name)? CERTIFICATE  certificate_name  WINDOWS?  (NTLM KERBEROS NEGOTIATE)?)  (COMMA?  ENCRYPTION  EQUAL  (DISABLED SUPPORTED REQUIRED)  (ALGORITHM  (AES RC4 AES  RC4 RC4  AES))?)?  (COMMA?  MESSAGE_FORWARDING  EQUAL  (ENABLED DISABLED))?  (COMMA?  MESSAGE_FORWARD_SIZE  EQUAL  DECIMAL)?  RR_BRACKET FOR  DATABASE_MIRRORING  LR_BRACKET  AUTHENTICATION  EQUAL  (WINDOWS  (NTLM KERBEROS NEGOTIATE)?  (CERTIFICATE  certificate_name)? CERTIFICATE  certificate_name  WINDOWS?  (NTLM KERBEROS NEGOTIATE)?)  (COMMA?  ENCRYPTION  EQUAL  (DISABLED SUPPORTED REQUIRED)  (ALGORITHM  (AES RC4 AES  RC4 RC4  AES))?)?  COMMA?  ROLE  EQUAL  (WITNESS PARTNER ALL)  RR_BRACKET)
    /// </summary>
    public partial class AstAlterEndpoint : AstRule
    {
        
        private AstEndpointName _endpointName;
        
        public AstAlterEndpoint(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointName>())
                {
                    this._endpointName = ((AstEndpointName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterEndpoint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointName>())
                {
                    this._endpointName = ((AstEndpointName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEndpointName EndpointName
        {
            get
            {
                return this._endpointName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterEndpoint(this);
        }
    }
    
    /// <summary>
    /// partner_server
    /// 	 : partner_server_tcp_prefix  host  mirroring_host_port_seperator  port_number
    /// </summary>
    public partial class AstPartnerServer : AstRule
    {
        
        private AstPartnerServerTcpPrefix _partnerServerTcpPrefix;
        
        private AstHost _host;
        
        private AstMirroringHostPortSeperator _mirroringHostPortSeperator;
        
        private AstPortNumber _portNumber;
        
        public AstPartnerServer(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartnerServerTcpPrefix>())
                {
                    this._partnerServerTcpPrefix = ((AstPartnerServerTcpPrefix)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstHost>())
                {
                    this._host = ((AstHost)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMirroringHostPortSeperator>())
                {
                    this._mirroringHostPortSeperator = ((AstMirroringHostPortSeperator)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPortNumber>())
                {
                    this._portNumber = ((AstPortNumber)(enumerator.Current));
                }
            }
        }
        
        public AstPartnerServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartnerServerTcpPrefix>())
                {
                    this._partnerServerTcpPrefix = ((AstPartnerServerTcpPrefix)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstHost>())
                {
                    this._host = ((AstHost)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMirroringHostPortSeperator>())
                {
                    this._mirroringHostPortSeperator = ((AstMirroringHostPortSeperator)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPortNumber>())
                {
                    this._portNumber = ((AstPortNumber)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartnerServerTcpPrefix PartnerServerTcpPrefix
        {
            get
            {
                return this._partnerServerTcpPrefix;
            }
        }
        
        public virtual AstHost Host
        {
            get
            {
                return this._host;
            }
        }
        
        public virtual AstMirroringHostPortSeperator MirroringHostPortSeperator
        {
            get
            {
                return this._mirroringHostPortSeperator;
            }
        }
        
        public virtual AstPortNumber PortNumber
        {
            get
            {
                return this._portNumber;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartnerServer(this);
        }
    }
    
    /// <summary>
    /// date_correlation_optimization_option
    /// 	 : DATE_CORRELATION_OPTIMIZATION  on_off
    /// </summary>
    public partial class AstDateCorrelationOptimizationOption : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstDateCorrelationOptimizationOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstDateCorrelationOptimizationOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDateCorrelationOptimizationOption(this);
        }
    }
    
    /// <summary>
    /// db_encryption_option
    /// 	 : ENCRYPTION  on_off
    /// </summary>
    public partial class AstDbEncryptionOption : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstDbEncryptionOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstDbEncryptionOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbEncryptionOption(this);
        }
    }
    
    /// <summary>
    /// mixed_page_allocation_option
    /// 	 : MIXED_PAGE_ALLOCATION  on_off
    /// </summary>
    public partial class AstMixedPageAllocationOption : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstMixedPageAllocationOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstMixedPageAllocationOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMixedPageAllocationOption(this);
        }
    }
    
    /// <summary>
    /// drop_relational_or_xml_or_spatial_indexs
    /// 	 : drop_relational_or_xml_or_spatial_index  (COMMA  drop_relational_or_xml_or_spatial_index)*?
    /// </summary>
    public partial class AstDropRelationalOrXmlOrSpatialIndexs : AstRule
    {
        
        private AstDropRelationalOrXmlOrSpatialIndex _dropRelationalOrXmlOrSpatialIndex;
        
        public AstDropRelationalOrXmlOrSpatialIndexs(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDropRelationalOrXmlOrSpatialIndex>())
                {
                    this._dropRelationalOrXmlOrSpatialIndex = ((AstDropRelationalOrXmlOrSpatialIndex)(enumerator.Current));
                }
            }
        }
        
        public AstDropRelationalOrXmlOrSpatialIndexs(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDropRelationalOrXmlOrSpatialIndex>())
                {
                    this._dropRelationalOrXmlOrSpatialIndex = ((AstDropRelationalOrXmlOrSpatialIndex)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDropRelationalOrXmlOrSpatialIndex DropRelationalOrXmlOrSpatialIndex
        {
            get
            {
                return this._dropRelationalOrXmlOrSpatialIndex;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRelationalOrXmlOrSpatialIndexs(this);
        }
    }
    
    /// <summary>
    /// drop_backward_compatible_indexs
    /// 	 : drop_backward_compatible_index  (COMMA  drop_backward_compatible_index)*?
    /// </summary>
    public partial class AstDropBackwardCompatibleIndexs : AstRule
    {
        
        private AstDropBackwardCompatibleIndex _dropBackwardCompatibleIndex;
        
        public AstDropBackwardCompatibleIndexs(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDropBackwardCompatibleIndex>())
                {
                    this._dropBackwardCompatibleIndex = ((AstDropBackwardCompatibleIndex)(enumerator.Current));
                }
            }
        }
        
        public AstDropBackwardCompatibleIndexs(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDropBackwardCompatibleIndex>())
                {
                    this._dropBackwardCompatibleIndex = ((AstDropBackwardCompatibleIndex)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDropBackwardCompatibleIndex DropBackwardCompatibleIndex
        {
            get
            {
                return this._dropBackwardCompatibleIndex;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropBackwardCompatibleIndexs(this);
        }
    }
    
    /// <summary>
    /// drop_relational_or_xml_or_spatial_index
    /// 	 : index_name  ON  complete_table_name
    /// </summary>
    public partial class AstDropRelationalOrXmlOrSpatialIndex : AstRule
    {
        
        private AstIndexName _indexName;
        
        private AstCompleteTableName _completeTableName;
        
        public AstDropRelationalOrXmlOrSpatialIndex(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexName>())
                {
                    this._indexName = ((AstIndexName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCompleteTableName>())
                {
                    this._completeTableName = ((AstCompleteTableName)(enumerator.Current));
                }
            }
        }
        
        public AstDropRelationalOrXmlOrSpatialIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexName>())
                {
                    this._indexName = ((AstIndexName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCompleteTableName>())
                {
                    this._completeTableName = ((AstCompleteTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexName IndexName
        {
            get
            {
                return this._indexName;
            }
        }
        
        public virtual AstCompleteTableName CompleteTableName
        {
            get
            {
                return this._completeTableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRelationalOrXmlOrSpatialIndex(this);
        }
    }
    
    /// <summary>
    /// drop_backward_compatible_index
    /// 	 : (schema_name  DOT)?  table_or_view_name  DOT  index_name
    /// </summary>
    public partial class AstDropBackwardCompatibleIndex : AstRule
    {
        
        private AstTableOrViewName _tableOrViewName;
        
        private AstIndexName _indexName;
        
        public AstDropBackwardCompatibleIndex(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableOrViewName>())
                {
                    this._tableOrViewName = ((AstTableOrViewName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexName>())
                {
                    this._indexName = ((AstIndexName)(enumerator.Current));
                }
            }
        }
        
        public AstDropBackwardCompatibleIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableOrViewName>())
                {
                    this._tableOrViewName = ((AstTableOrViewName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexName>())
                {
                    this._indexName = ((AstIndexName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableOrViewName TableOrViewName
        {
            get
            {
                return this._tableOrViewName;
            }
        }
        
        public virtual AstIndexName IndexName
        {
            get
            {
                return this._indexName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropBackwardCompatibleIndex(this);
        }
    }
    
    /// <summary>
    /// drop_procedure
    /// 	 : DROP  proc = (PROC PROCEDURE)  (IF  EXISTS)?  func_proc_name_schemas  SEMI?
    /// </summary>
    public partial class AstDropProcedure : AstRule
    {
        
        private AstFuncProcNameSchemas _funcProcNameSchemas;
        
        public AstDropProcedure(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this._funcProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public AstDropProcedure(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this._funcProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFuncProcNameSchemas FuncProcNameSchemas
        {
            get
            {
                return this._funcProcNameSchemas;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropProcedure(this);
        }
    }
    
    /// <summary>
    /// func_proc_name_schemas
    /// 	 : func_proc_name_schema  (COMMA  func_proc_name_schema)*?
    /// </summary>
    public partial class AstFuncProcNameSchemas : AstRule
    {
        
        private AstFuncProcNameSchema _funcProcNameSchema;
        
        public AstFuncProcNameSchemas(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameSchema>())
                {
                    this._funcProcNameSchema = ((AstFuncProcNameSchema)(enumerator.Current));
                }
            }
        }
        
        public AstFuncProcNameSchemas(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameSchema>())
                {
                    this._funcProcNameSchema = ((AstFuncProcNameSchema)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFuncProcNameSchema FuncProcNameSchema
        {
            get
            {
                return this._funcProcNameSchema;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncProcNameSchemas(this);
        }
    }
    
    /// <summary>
    /// drop_dml_trigger
    /// 	 : DROP  TRIGGER  (IF  EXISTS)?  simple_names  SEMI?
    /// </summary>
    public partial class AstDropDmlTrigger : AstRule
    {
        
        private AstSimpleNames _simpleNames;
        
        public AstDropDmlTrigger(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleNames>())
                {
                    this._simpleNames = ((AstSimpleNames)(enumerator.Current));
                }
            }
        }
        
        public AstDropDmlTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleNames>())
                {
                    this._simpleNames = ((AstSimpleNames)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleNames SimpleNames
        {
            get
            {
                return this._simpleNames;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDmlTrigger(this);
        }
    }
    
    /// <summary>
    /// drop_ddl_trigger
    /// 	 : DROP  TRIGGER  (IF  EXISTS)?  simple_names  ON  (DATABASE ALL  SERVER)  SEMI?
    /// </summary>
    public partial class AstDropDdlTrigger : AstRule
    {
        
        private AstSimpleNames _simpleNames;
        
        public AstDropDdlTrigger(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleNames>())
                {
                    this._simpleNames = ((AstSimpleNames)(enumerator.Current));
                }
            }
        }
        
        public AstDropDdlTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleNames>())
                {
                    this._simpleNames = ((AstSimpleNames)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleNames SimpleNames
        {
            get
            {
                return this._simpleNames;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDdlTrigger(this);
        }
    }
    
    /// <summary>
    /// simple_names
    /// 	 : simple_name  (COMMA  simple_name)*?
    /// </summary>
    public partial class AstSimpleNames : AstRule
    {
        
        private AstSimpleName _simpleName;
        
        public AstSimpleNames(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleName>())
                {
                    this._simpleName = ((AstSimpleName)(enumerator.Current));
                }
            }
        }
        
        public AstSimpleNames(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleName>())
                {
                    this._simpleName = ((AstSimpleName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleName SimpleName
        {
            get
            {
                return this._simpleName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSimpleNames(this);
        }
    }
    
    /// <summary>
    /// table_names
    /// 	 : full_table_name  (COMMA  full_table_name)*?
    /// </summary>
    public partial class AstTableNames : AstRule
    {
        
        private AstFullTableName _fullTableName;
        
        public AstTableNames(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
            }
        }
        
        public AstTableNames(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableNames(this);
        }
    }
    
    /// <summary>
    /// drop_function
    /// 	 : DROP  FUNCTION  (IF  EXISTS)?  func_proc_name_schemas  SEMI?
    /// </summary>
    public partial class AstDropFunction : AstRule
    {
        
        private AstFuncProcNameSchemas _funcProcNameSchemas;
        
        public AstDropFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this._funcProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public AstDropFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this._funcProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFuncProcNameSchemas FuncProcNameSchemas
        {
            get
            {
                return this._funcProcNameSchemas;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFunction(this);
        }
    }
    
    /// <summary>
    /// drop_table
    /// 	 : DROP  TABLE  (IF  EXISTS)?  table_names  SEMI?
    /// </summary>
    public partial class AstDropTable : AstRule
    {
        
        private AstTableNames _tableNames;
        
        public AstDropTable(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableNames>())
                {
                    this._tableNames = ((AstTableNames)(enumerator.Current));
                }
            }
        }
        
        public AstDropTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableNames>())
                {
                    this._tableNames = ((AstTableNames)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableNames TableNames
        {
            get
            {
                return this._tableNames;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropTable(this);
        }
    }
    
    /// <summary>
    /// drop_view
    /// 	 : DROP  VIEW  (IF  EXISTS)?  simple_names  SEMI?
    /// </summary>
    public partial class AstDropView : AstRule
    {
        
        private AstSimpleNames _simpleNames;
        
        public AstDropView(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleNames>())
                {
                    this._simpleNames = ((AstSimpleNames)(enumerator.Current));
                }
            }
        }
        
        public AstDropView(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleNames>())
                {
                    this._simpleNames = ((AstSimpleNames)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleNames SimpleNames
        {
            get
            {
                return this._simpleNames;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropView(this);
        }
    }
    
    /// <summary>
    /// openquery
    /// 	 : OPENQUERY  LR_BRACKET  linked_server  COMMA  query = STRING  RR_BRACKET
    /// </summary>
    public partial class AstOpenquery : AstRule
    {
        
        private AstLinkedServer _linkedServer;
        
        public AstOpenquery(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLinkedServer>())
                {
                    this._linkedServer = ((AstLinkedServer)(enumerator.Current));
                }
            }
        }
        
        public AstOpenquery(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLinkedServer>())
                {
                    this._linkedServer = ((AstLinkedServer)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLinkedServer LinkedServer
        {
            get
            {
                return this._linkedServer;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenquery(this);
        }
    }
    
    /// <summary>
    /// declare_locals
    /// 	 : declare_local  (COMMA  loc += declare_local)*?
    /// </summary>
    public partial class AstDeclareLocals : AstRule
    {
        
        private AstDeclareLocal _declareLocal;
        
        public AstDeclareLocals(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDeclareLocal>())
                {
                    this._declareLocal = ((AstDeclareLocal)(enumerator.Current));
                }
            }
        }
        
        public AstDeclareLocals(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDeclareLocal>())
                {
                    this._declareLocal = ((AstDeclareLocal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDeclareLocal DeclareLocal
        {
            get
            {
                return this._declareLocal;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareLocals(this);
        }
    }
    
    /// <summary>
    /// xml_declarations
    /// 	 : xml_declaration  (COMMA  xml_dec += xml_declaration)*?
    /// </summary>
    public partial class AstXmlDeclarations : AstRule
    {
        
        private AstXmlDeclaration _xmlDeclaration;
        
        public AstXmlDeclarations(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstXmlDeclaration>())
                {
                    this._xmlDeclaration = ((AstXmlDeclaration)(enumerator.Current));
                }
            }
        }
        
        public AstXmlDeclarations(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstXmlDeclaration>())
                {
                    this._xmlDeclaration = ((AstXmlDeclaration)(enumerator.Current));
                }
            }
        }
        
        public virtual AstXmlDeclaration XmlDeclaration
        {
            get
            {
                return this._xmlDeclaration;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlDeclarations(this);
        }
    }
    
    /// <summary>
    /// backup_certificate
    /// 	 : BACKUP  CERTIFICATE  certificate_name  TO  FILE  EQUAL  cert_file = STRING  (WITH  PRIVATE  KEY  LR_BRACKET  (COMMA?  FILE  EQUAL  private_key_file = STRING COMMA?  ENCRYPTION  BY  PASSWORD  EQUAL  encryption_password = STRING COMMA?  DECRYPTION  BY  PASSWORD  EQUAL  decryption_pasword = STRING)+  RR_BRACKET)?
    /// </summary>
    public partial class AstBackupCertificate : AstRule
    {
        
        private AstCertificateName _certificateName;
        
        public AstBackupCertificate(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateName>())
                {
                    this._certificateName = ((AstCertificateName)(enumerator.Current));
                }
            }
        }
        
        public AstBackupCertificate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateName>())
                {
                    this._certificateName = ((AstCertificateName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateName CertificateName
        {
            get
            {
                return this._certificateName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupCertificate(this);
        }
    }
    
    /// <summary>
    /// execute_statement
    /// 	 : EXECUTE  execute_body  SEMI?
    /// </summary>
    public partial class AstExecuteStatement : AstRule
    {
        
        private AstExecuteBody _executeBody;
        
        public AstExecuteStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteBody>())
                {
                    this._executeBody = ((AstExecuteBody)(enumerator.Current));
                }
            }
        }
        
        public AstExecuteStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteBody>())
                {
                    this._executeBody = ((AstExecuteBody)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExecuteBody ExecuteBody
        {
            get
            {
                return this._executeBody;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatement(this);
        }
    }
    
    /// <summary>
    /// execute_body_batch
    /// 	 : func_proc_name_server_database_schema  (execute_statement_args)?  SEMI?
    /// </summary>
    public partial class AstExecuteBodyBatch : AstRule
    {
        
        private AstFuncProcNameServerDatabaseSchema _funcProcNameServerDatabaseSchema;
        
        public AstExecuteBodyBatch(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameServerDatabaseSchema>())
                {
                    this._funcProcNameServerDatabaseSchema = ((AstFuncProcNameServerDatabaseSchema)(enumerator.Current));
                }
            }
        }
        
        public AstExecuteBodyBatch(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameServerDatabaseSchema>())
                {
                    this._funcProcNameServerDatabaseSchema = ((AstFuncProcNameServerDatabaseSchema)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFuncProcNameServerDatabaseSchema FuncProcNameServerDatabaseSchema
        {
            get
            {
                return this._funcProcNameServerDatabaseSchema;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteBodyBatch(this);
        }
    }
    
    /// <summary>
    /// execute_var_strings
    /// 	 : execute_var_string  (COMMA  execute_var_string)*?
    /// </summary>
    public partial class AstExecuteVarStrings : AstRule
    {
        
        private AstExecuteVarString _executeVarString;
        
        public AstExecuteVarStrings(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteVarString>())
                {
                    this._executeVarString = ((AstExecuteVarString)(enumerator.Current));
                }
            }
        }
        
        public AstExecuteVarStrings(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteVarString>())
                {
                    this._executeVarString = ((AstExecuteVarString)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExecuteVarString ExecuteVarString
        {
            get
            {
                return this._executeVarString;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteVarStrings(this);
        }
    }
    
    /// <summary>
    /// execute_statement_arg_nameds
    /// 	 : execute_statement_arg_named  (COMMA  execute_statement_arg_named)*?
    /// </summary>
    public partial class AstExecuteStatementArgNameds : AstRule
    {
        
        private AstExecuteStatementArgNamed _executeStatementArgNamed;
        
        public AstExecuteStatementArgNameds(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteStatementArgNamed>())
                {
                    this._executeStatementArgNamed = ((AstExecuteStatementArgNamed)(enumerator.Current));
                }
            }
        }
        
        public AstExecuteStatementArgNameds(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteStatementArgNamed>())
                {
                    this._executeStatementArgNamed = ((AstExecuteStatementArgNamed)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExecuteStatementArgNamed ExecuteStatementArgNamed
        {
            get
            {
                return this._executeStatementArgNamed;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgNameds(this);
        }
    }
    
    /// <summary>
    /// execute_statement_args
    /// 	 : execute_statement_arg  (COMMA  execute_statement_arg)*?
    /// </summary>
    public partial class AstExecuteStatementArgs : AstRule
    {
        
        private AstExecuteStatementArg _executeStatementArg;
        
        public AstExecuteStatementArgs(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteStatementArg>())
                {
                    this._executeStatementArg = ((AstExecuteStatementArg)(enumerator.Current));
                }
            }
        }
        
        public AstExecuteStatementArgs(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteStatementArg>())
                {
                    this._executeStatementArg = ((AstExecuteStatementArg)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExecuteStatementArg ExecuteStatementArg
        {
            get
            {
                return this._executeStatementArg;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgs(this);
        }
    }
    
    /// <summary>
    /// create_certificate
    /// 	 : CREATE  CERTIFICATE  certificate_name  (AUTHORIZATION  user_name)?  (FROM  existing_keys generate_new_keys)  (ACTIVE  FOR  BEGIN  DIALOG  EQUAL  on_off)?
    /// </summary>
    public partial class AstCreateCertificate : AstRule
    {
        
        private AstCertificateName _certificateName;
        
        public AstCreateCertificate(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateName>())
                {
                    this._certificateName = ((AstCertificateName)(enumerator.Current));
                }
            }
        }
        
        public AstCreateCertificate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateName>())
                {
                    this._certificateName = ((AstCertificateName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateName CertificateName
        {
            get
            {
                return this._certificateName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateCertificate(this);
        }
    }
    
    /// <summary>
    /// use_statement
    /// 	 : USE  database_name  SEMI?
    /// </summary>
    public partial class AstUseStatement : AstRule
    {
        
        private AstDatabaseName _databaseName;
        
        public AstUseStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseName>())
                {
                    this._databaseName = ((AstDatabaseName)(enumerator.Current));
                }
            }
        }
        
        public AstUseStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseName>())
                {
                    this._databaseName = ((AstDatabaseName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseName DatabaseName
        {
            get
            {
                return this._databaseName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUseStatement(this);
        }
    }
    
    /// <summary>
    /// dbcc_options
    /// 	 : simple_id  (COMMA  simple_id)?
    /// </summary>
    public partial class AstDbccOptions : AstRule
    {
        
        private AstSimpleId _simpleId;
        
        public AstDbccOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleId>())
                {
                    this._simpleId = ((AstSimpleId)(enumerator.Current));
                }
            }
        }
        
        public AstDbccOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSimpleId>())
                {
                    this._simpleId = ((AstSimpleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSimpleId SimpleId
        {
            get
            {
                return this._simpleId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccOptions(this);
        }
    }
    
    /// <summary>
    /// declare_local
    /// 	 : LOCAL_ID  AS?  data_type  (EQUAL  expression)?
    /// </summary>
    public partial class AstDeclareLocal : AstRule
    {
        
        private AstDataType _dataType;
        
        public AstDeclareLocal(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
            }
        }
        
        public AstDeclareLocal(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareLocal(this);
        }
    }
    
    /// <summary>
    /// table_type_definition
    /// 	 : TABLE  LR_BRACKET  column_def_table_constraints  (COMMA?  table_type_indices)*?  RR_BRACKET
    /// </summary>
    public partial class AstTableTypeDefinition : AstRule
    {
        
        private AstColumnDefTableConstraints _columnDefTableConstraints;
        
        public AstTableTypeDefinition(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
            }
        }
        
        public AstTableTypeDefinition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnDefTableConstraints ColumnDefTableConstraints
        {
            get
            {
                return this._columnDefTableConstraints;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableTypeDefinition(this);
        }
    }
    
    /// <summary>
    /// xml_type_definition
    /// 	 : XML  LR_BRACKET  (CONTENT DOCUMENT)?  xml_schema_collection  RR_BRACKET
    /// </summary>
    public partial class AstXmlTypeDefinition : AstRule
    {
        
        private AstXmlSchemaCollection _xmlSchemaCollection;
        
        public AstXmlTypeDefinition(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstXmlSchemaCollection>())
                {
                    this._xmlSchemaCollection = ((AstXmlSchemaCollection)(enumerator.Current));
                }
            }
        }
        
        public AstXmlTypeDefinition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstXmlSchemaCollection>())
                {
                    this._xmlSchemaCollection = ((AstXmlSchemaCollection)(enumerator.Current));
                }
            }
        }
        
        public virtual AstXmlSchemaCollection XmlSchemaCollection
        {
            get
            {
                return this._xmlSchemaCollection;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlTypeDefinition(this);
        }
    }
    
    /// <summary>
    /// column_def_table_constraints
    /// 	 : column_def_table_constraint  (COMMA?  column_def_table_constraint)*?
    /// </summary>
    public partial class AstColumnDefTableConstraints : AstRule
    {
        
        private AstColumnDefTableConstraint _columnDefTableConstraint;
        
        public AstColumnDefTableConstraints(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDefTableConstraint>())
                {
                    this._columnDefTableConstraint = ((AstColumnDefTableConstraint)(enumerator.Current));
                }
            }
        }
        
        public AstColumnDefTableConstraints(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDefTableConstraint>())
                {
                    this._columnDefTableConstraint = ((AstColumnDefTableConstraint)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnDefTableConstraint ColumnDefTableConstraint
        {
            get
            {
                return this._columnDefTableConstraint;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDefTableConstraints(this);
        }
    }
    
    /// <summary>
    /// column_definition
    /// 	 : column_name  (data_type AS  expression  PERSISTED?)  column_definition_element*?  column_index?
    /// </summary>
    public partial class AstColumnDefinition : AstRule
    {
        
        private AstColumnName _columnName;
        
        private AstColumnDefinitionElement _columnDefinitionElement;
        
        private AstColumnIndex _columnIndex;
        
        public AstColumnDefinition(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnName>())
                {
                    this._columnName = ((AstColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefinitionElement>())
                {
                    this._columnDefinitionElement = ((AstColumnDefinitionElement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnIndex>())
                {
                    this._columnIndex = ((AstColumnIndex)(enumerator.Current));
                }
            }
        }
        
        public AstColumnDefinition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnName>())
                {
                    this._columnName = ((AstColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefinitionElement>())
                {
                    this._columnDefinitionElement = ((AstColumnDefinitionElement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnIndex>())
                {
                    this._columnIndex = ((AstColumnIndex)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnName ColumnName
        {
            get
            {
                return this._columnName;
            }
        }
        
        public virtual AstColumnDefinitionElement ColumnDefinitionElement
        {
            get
            {
                return this._columnDefinitionElement;
            }
        }
        
        public virtual AstColumnIndex ColumnIndex
        {
            get
            {
                return this._columnIndex;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDefinition(this);
        }
    }
    
    /// <summary>
    /// column_modifier
    /// 	 : id_  add_drop  (ROWGUIDCOL PERSISTED NOT  FOR  REPLICATION SPARSE HIDDEN_KEYWORD MASKED  (WITH  (FUNCTION  EQUAL  STRING LR_BRACKET  FUNCTION  EQUAL  STRING  RR_BRACKET))?)
    /// </summary>
    public partial class AstColumnModifier : AstRule
    {
        
        private AstId _id;
        
        private AstAddDrop _addDrop;
        
        public AstColumnModifier(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
            }
        }
        
        public AstColumnModifier(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnModifier(this);
        }
    }
    
    /// <summary>
    /// materialized_column_definition
    /// 	 : id_  (COMPUTE AS)  expression  (MATERIALIZED NOT  MATERIALIZED)?
    /// </summary>
    public partial class AstMaterializedColumnDefinition : AstRule
    {
        
        private AstId _id;
        
        private AstExpression _expression;
        
        public AstMaterializedColumnDefinition(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstMaterializedColumnDefinition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMaterializedColumnDefinition(this);
        }
    }
    
    /// <summary>
    /// column_index
    /// 	 : INDEX  index_name?  create_table_index_options?  on_partition_or_filegroup?  (FILESTREAM_ON  (filestream_filegroup_or_partition_schema_name NULL_DOUBLE_QUOTE))?
    /// </summary>
    public partial class AstColumnIndex : AstRule
    {
        
        private AstIndexName _indexName;
        
        private AstCreateTableIndexOptions _createTableIndexOptions;
        
        private AstOnPartitionOrFilegroup _onPartitionOrFilegroup;
        
        public AstColumnIndex(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexName>())
                {
                    this._indexName = ((AstIndexName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateTableIndexOptions>())
                {
                    this._createTableIndexOptions = ((AstCreateTableIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup>())
                {
                    this._onPartitionOrFilegroup = ((AstOnPartitionOrFilegroup)(enumerator.Current));
                }
            }
        }
        
        public AstColumnIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexName>())
                {
                    this._indexName = ((AstIndexName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateTableIndexOptions>())
                {
                    this._createTableIndexOptions = ((AstCreateTableIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup>())
                {
                    this._onPartitionOrFilegroup = ((AstOnPartitionOrFilegroup)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexName IndexName
        {
            get
            {
                return this._indexName;
            }
        }
        
        public virtual AstCreateTableIndexOptions CreateTableIndexOptions
        {
            get
            {
                return this._createTableIndexOptions;
            }
        }
        
        public virtual AstOnPartitionOrFilegroup OnPartitionOrFilegroup
        {
            get
            {
                return this._onPartitionOrFilegroup;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnIndex(this);
        }
    }
    
    /// <summary>
    /// primary_key_options
    /// 	 : (WITH  FILLFACTOR  EQUAL  DECIMAL)?  alter_table_index_options?  on_partition_or_filegroup?
    /// </summary>
    public partial class AstPrimaryKeyOptions : AstRule
    {
        
        private AstAlterTableIndexOptions _alterTableIndexOptions;
        
        private AstOnPartitionOrFilegroup _onPartitionOrFilegroup;
        
        public AstPrimaryKeyOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterTableIndexOptions>())
                {
                    this._alterTableIndexOptions = ((AstAlterTableIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup>())
                {
                    this._onPartitionOrFilegroup = ((AstOnPartitionOrFilegroup)(enumerator.Current));
                }
            }
        }
        
        public AstPrimaryKeyOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterTableIndexOptions>())
                {
                    this._alterTableIndexOptions = ((AstAlterTableIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup>())
                {
                    this._onPartitionOrFilegroup = ((AstOnPartitionOrFilegroup)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterTableIndexOptions AlterTableIndexOptions
        {
            get
            {
                return this._alterTableIndexOptions;
            }
        }
        
        public virtual AstOnPartitionOrFilegroup OnPartitionOrFilegroup
        {
            get
            {
                return this._onPartitionOrFilegroup;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrimaryKeyOptions(this);
        }
    }
    
    /// <summary>
    /// foreign_key_options
    /// 	 : REFERENCES  full_table_name  LR_BRACKET  pk = column_name_list  RR_BRACKET  on_delete?  on_update?  (NOT  FOR  REPLICATION)?
    /// </summary>
    public partial class AstForeignKeyOptions : AstRule
    {
        
        private AstFullTableName _fullTableName;
        
        private AstOnDelete _onDelete;
        
        private AstOnUpdate _onUpdate;
        
        public AstForeignKeyOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnDelete>())
                {
                    this._onDelete = ((AstOnDelete)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnUpdate>())
                {
                    this._onUpdate = ((AstOnUpdate)(enumerator.Current));
                }
            }
        }
        
        public AstForeignKeyOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnDelete>())
                {
                    this._onDelete = ((AstOnDelete)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnUpdate>())
                {
                    this._onUpdate = ((AstOnUpdate)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
        }
        
        public virtual AstOnDelete OnDelete
        {
            get
            {
                return this._onDelete;
            }
        }
        
        public virtual AstOnUpdate OnUpdate
        {
            get
            {
                return this._onUpdate;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitForeignKeyOptions(this);
        }
    }
    
    /// <summary>
    /// check_constraint
    /// 	 : CHECK  (NOT  FOR  REPLICATION)?  LR_BRACKET  search_condition  RR_BRACKET
    /// </summary>
    public partial class AstCheckConstraint : AstRule
    {
        
        private AstSearchCondition _searchCondition;
        
        public AstCheckConstraint(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstCheckConstraint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCheckConstraint(this);
        }
    }
    
    /// <summary>
    /// alter_table_index_options
    /// 	 : WITH  LR_BRACKET  alter_table_index_option  (COMMA  alter_table_index_option)*?  RR_BRACKET
    /// </summary>
    public partial class AstAlterTableIndexOptions : AstRule
    {
        
        private AstAlterTableIndexOption _alterTableIndexOption;
        
        public AstAlterTableIndexOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterTableIndexOption>())
                {
                    this._alterTableIndexOption = ((AstAlterTableIndexOption)(enumerator.Current));
                }
            }
        }
        
        public AstAlterTableIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterTableIndexOption>())
                {
                    this._alterTableIndexOption = ((AstAlterTableIndexOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterTableIndexOption AlterTableIndexOption
        {
            get
            {
                return this._alterTableIndexOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterTableIndexOptions(this);
        }
    }
    
    /// <summary>
    /// declare_cursor
    /// 	 : DECLARE  cursor_name  (CURSOR  (declare_set_cursor_common  (FOR  UPDATE  (OF  column_name_list)?)?)? sensitive?  SCROLL?  CURSOR  FOR  select_statement_standalone  (FOR  (READ  ONLY UPDATE (OF  column_name_list)))?)  SEMI?
    /// </summary>
    public partial class AstDeclareCursor : AstRule
    {
        
        private AstCursorName _cursorName;
        
        public AstDeclareCursor(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
            }
        }
        
        public AstDeclareCursor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCursorName CursorName
        {
            get
            {
                return this._cursorName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareCursor(this);
        }
    }
    
    /// <summary>
    /// declare_set_cursor_common
    /// 	 : declare_set_cursor_common_partial*?  FOR  select_statement_standalone
    /// </summary>
    public partial class AstDeclareSetCursorCommon : AstRule
    {
        
        private AstDeclareSetCursorCommonPartial _declareSetCursorCommonPartial;
        
        private AstSelectStatementStandalone _selectStatementStandalone;
        
        public AstDeclareSetCursorCommon(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDeclareSetCursorCommonPartial>())
                {
                    this._declareSetCursorCommonPartial = ((AstDeclareSetCursorCommonPartial)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public AstDeclareSetCursorCommon(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDeclareSetCursorCommonPartial>())
                {
                    this._declareSetCursorCommonPartial = ((AstDeclareSetCursorCommonPartial)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDeclareSetCursorCommonPartial DeclareSetCursorCommonPartial
        {
            get
            {
                return this._declareSetCursorCommonPartial;
            }
        }
        
        public virtual AstSelectStatementStandalone SelectStatementStandalone
        {
            get
            {
                return this._selectStatementStandalone;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareSetCursorCommon(this);
        }
    }
    
    /// <summary>
    /// fetch_cursor
    /// 	 : FETCH  ((fetch_cursor_strategy absolute_relative  expression)?  FROM)?  GLOBAL?  cursor_name  (INTO  local_ids)?  SEMI?
    /// </summary>
    public partial class AstFetchCursor : AstRule
    {
        
        private AstCursorName _cursorName;
        
        public AstFetchCursor(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
            }
        }
        
        public AstFetchCursor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCursorName CursorName
        {
            get
            {
                return this._cursorName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFetchCursor(this);
        }
    }
    
    /// <summary>
    /// time_zone
    /// 	 : AT_KEYWORD  TIME  ZONE  expression
    /// </summary>
    public partial class AstTimeZone : AstRule
    {
        
        private AstExpression _expression;
        
        public AstTimeZone(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstTimeZone(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTimeZone(this);
        }
    }
    
    /// <summary>
    /// select_order_by_clause
    /// 	 : order_by_clause  (OFFSET  offset_exp = expression  offset_rows = (ROW ROWS)  (FETCH  fetch_offset = (FIRST NEXT)  fetch_exp = expression  fetch_rows = (ROW ROWS)  ONLY)?)?
    /// </summary>
    public partial class AstSelectOrderByClause : AstRule
    {
        
        private AstOrderByClause _orderByClause;
        
        public AstSelectOrderByClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOrderByClause>())
                {
                    this._orderByClause = ((AstOrderByClause)(enumerator.Current));
                }
            }
        }
        
        public AstSelectOrderByClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOrderByClause>())
                {
                    this._orderByClause = ((AstOrderByClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOrderByClause OrderByClause
        {
            get
            {
                return this._orderByClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectOrderByClause(this);
        }
    }
    
    /// <summary>
    /// option_clause
    /// 	 : OPTION  LR_BRACKET  option  (COMMA  option)*?  RR_BRACKET
    /// </summary>
    public partial class AstOptionClause : AstRule
    {
        
        private AstOption _option;
        
        public AstOptionClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOption>())
                {
                    this._option = ((AstOption)(enumerator.Current));
                }
            }
        }
        
        public AstOptionClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOption>())
                {
                    this._option = ((AstOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOption Option
        {
            get
            {
                return this._option;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOptionClause(this);
        }
    }
    
    /// <summary>
    /// optimize_for_args
    /// 	 : optimize_for_arg  (COMMA  optimize_for_arg)*?
    /// </summary>
    public partial class AstOptimizeForArgs : AstRule
    {
        
        private AstOptimizeForArg _optimizeForArg;
        
        public AstOptimizeForArgs(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOptimizeForArg>())
                {
                    this._optimizeForArg = ((AstOptimizeForArg)(enumerator.Current));
                }
            }
        }
        
        public AstOptimizeForArgs(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOptimizeForArg>())
                {
                    this._optimizeForArg = ((AstOptimizeForArg)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOptimizeForArg OptimizeForArg
        {
            get
            {
                return this._optimizeForArg;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOptimizeForArgs(this);
        }
    }
    
    /// <summary>
    /// table_asterisk
    /// 	 : full_table_name  DOT  STAR
    /// </summary>
    public partial class AstTableAsterisk : AstRule
    {
        
        private AstFullTableName _fullTableName;
        
        public AstTableAsterisk(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
            }
        }
        
        public AstTableAsterisk(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableAsterisk(this);
        }
    }
    
    /// <summary>
    /// column_elem
    /// 	 : column_elem_target  as_column_alias?
    /// </summary>
    public partial class AstColumnElem : AstRule
    {
        
        private AstColumnElemTarget _columnElemTarget;
        
        private AstAsColumnAlias _asColumnAlias;
        
        public AstColumnElem(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnElemTarget>())
                {
                    this._columnElemTarget = ((AstColumnElemTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsColumnAlias>())
                {
                    this._asColumnAlias = ((AstAsColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public AstColumnElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnElemTarget>())
                {
                    this._columnElemTarget = ((AstColumnElemTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsColumnAlias>())
                {
                    this._asColumnAlias = ((AstAsColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnElemTarget ColumnElemTarget
        {
            get
            {
                return this._columnElemTarget;
            }
        }
        
        public virtual AstAsColumnAlias AsColumnAlias
        {
            get
            {
                return this._asColumnAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnElem(this);
        }
    }
    
    /// <summary>
    /// expression_assign_elem
    /// 	 : LOCAL_ID  (assignment_operator EQUAL)  expression
    /// </summary>
    public partial class AstExpressionAssignElem : AstRule
    {
        
        private AstExpression _expression;
        
        public AstExpressionAssignElem(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstExpressionAssignElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressionAssignElem(this);
        }
    }
    
    /// <summary>
    /// expression2
    /// 	 : expression  (COMMA  expression)?
    /// </summary>
    public partial class AstExpression2 : AstRule
    {
        
        private AstExpression _expression;
        
        public AstExpression2(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstExpression2(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpression2(this);
        }
    }
    
    /// <summary>
    /// open_xml
    /// 	 : OPENXML  LR_BRACKET  expression  COMMA  expression2  RR_BRACKET  (WITH  LR_BRACKET  schema_declaration  RR_BRACKET)?  as_table_alias?
    /// </summary>
    public partial class AstOpenXml : AstRule
    {
        
        private AstExpression _expression;
        
        private AstExpression2 _expression2;
        
        private AstAsTableAlias _asTableAlias;
        
        public AstOpenXml(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this._expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstOpenXml(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this._expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstExpression2 Expression2
        {
            get
            {
                return this._expression2;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenXml(this);
        }
    }
    
    /// <summary>
    /// open_json
    /// 	 : OPENJSON  LR_BRACKET  expression2  RR_BRACKET  (WITH  LR_BRACKET  json_declaration  RR_BRACKET)?  as_table_alias?
    /// </summary>
    public partial class AstOpenJson : AstRule
    {
        
        private AstExpression2 _expression2;
        
        private AstAsTableAlias _asTableAlias;
        
        public AstOpenJson(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this._expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstOpenJson(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this._expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression2 Expression2
        {
            get
            {
                return this._expression2;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenJson(this);
        }
    }
    
    /// <summary>
    /// json_column_declaration
    /// 	 : column_declaration  (AS  JSON)?
    /// </summary>
    public partial class AstJsonColumnDeclaration : AstRule
    {
        
        private AstColumnDeclaration _columnDeclaration;
        
        public AstJsonColumnDeclaration(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDeclaration>())
                {
                    this._columnDeclaration = ((AstColumnDeclaration)(enumerator.Current));
                }
            }
        }
        
        public AstJsonColumnDeclaration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDeclaration>())
                {
                    this._columnDeclaration = ((AstColumnDeclaration)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnDeclaration ColumnDeclaration
        {
            get
            {
                return this._columnDeclaration;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitJsonColumnDeclaration(this);
        }
    }
    
    /// <summary>
    /// column_declaration
    /// 	 : id_  data_type  STRING?
    /// </summary>
    public partial class AstColumnDeclaration : AstRule
    {
        
        private AstId _id;
        
        private AstDataType _dataType;
        
        public AstColumnDeclaration(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
            }
        }
        
        public AstColumnDeclaration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDeclaration(this);
        }
    }
    
    /// <summary>
    /// cross_join
    /// 	 : CROSS  JOIN  table_source
    /// </summary>
    public partial class AstCrossJoin : AstRule
    {
        
        private AstTableSource _tableSource;
        
        public AstCrossJoin(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableSource>())
                {
                    this._tableSource = ((AstTableSource)(enumerator.Current));
                }
            }
        }
        
        public AstCrossJoin(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableSource>())
                {
                    this._tableSource = ((AstTableSource)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableSource TableSource
        {
            get
            {
                return this._tableSource;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCrossJoin(this);
        }
    }
    
    /// <summary>
    /// pivot
    /// 	 : PIVOT  pivot_clause  as_table_alias
    /// </summary>
    public partial class AstPivot : AstRule
    {
        
        private AstPivotClause _pivotClause;
        
        private AstAsTableAlias _asTableAlias;
        
        public AstPivot(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPivotClause>())
                {
                    this._pivotClause = ((AstPivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstPivot(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPivotClause>())
                {
                    this._pivotClause = ((AstPivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPivotClause PivotClause
        {
            get
            {
                return this._pivotClause;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPivot(this);
        }
    }
    
    /// <summary>
    /// unpivot
    /// 	 : UNPIVOT  unpivot_clause  as_table_alias
    /// </summary>
    public partial class AstUnpivot : AstRule
    {
        
        private AstUnpivotClause _unpivotClause;
        
        private AstAsTableAlias _asTableAlias;
        
        public AstUnpivot(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUnpivotClause>())
                {
                    this._unpivotClause = ((AstUnpivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstUnpivot(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUnpivotClause>())
                {
                    this._unpivotClause = ((AstUnpivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUnpivotClause UnpivotClause
        {
            get
            {
                return this._unpivotClause;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnpivot(this);
        }
    }
    
    /// <summary>
    /// pivot_clause
    /// 	 : LR_BRACKET  aggregate_windowed_function  FOR  full_column_name  IN  column_alias_list  RR_BRACKET
    /// </summary>
    public partial class AstPivotClause : AstRule
    {
        
        private AstAggregateWindowedFunction _aggregateWindowedFunction;
        
        private AstFullColumnName _fullColumnName;
        
        private AstColumnAliasList _columnAliasList;
        
        public AstPivotClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAggregateWindowedFunction>())
                {
                    this._aggregateWindowedFunction = ((AstAggregateWindowedFunction)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnAliasList>())
                {
                    this._columnAliasList = ((AstColumnAliasList)(enumerator.Current));
                }
            }
        }
        
        public AstPivotClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAggregateWindowedFunction>())
                {
                    this._aggregateWindowedFunction = ((AstAggregateWindowedFunction)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnAliasList>())
                {
                    this._columnAliasList = ((AstColumnAliasList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAggregateWindowedFunction AggregateWindowedFunction
        {
            get
            {
                return this._aggregateWindowedFunction;
            }
        }
        
        public virtual AstFullColumnName FullColumnName
        {
            get
            {
                return this._fullColumnName;
            }
        }
        
        public virtual AstColumnAliasList ColumnAliasList
        {
            get
            {
                return this._columnAliasList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPivotClause(this);
        }
    }
    
    /// <summary>
    /// unpivot_clause
    /// 	 : LR_BRACKET  unpivot_exp = expression  FOR  full_column_name  IN  LR_BRACKET  full_column_name_list  RR_BRACKET  RR_BRACKET
    /// </summary>
    public partial class AstUnpivotClause : AstRule
    {
        
        private AstFullColumnName _fullColumnName;
        
        private AstFullColumnNameList _fullColumnNameList;
        
        public AstUnpivotClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnNameList>())
                {
                    this._fullColumnNameList = ((AstFullColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public AstUnpivotClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnNameList>())
                {
                    this._fullColumnNameList = ((AstFullColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullColumnName FullColumnName
        {
            get
            {
                return this._fullColumnName;
            }
        }
        
        public virtual AstFullColumnNameList FullColumnNameList
        {
            get
            {
                return this._fullColumnNameList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnpivotClause(this);
        }
    }
    
    /// <summary>
    /// bulk_options
    /// 	 : bulk_option  (COMMA  bulk_option)*?
    /// </summary>
    public partial class AstBulkOptions : AstRule
    {
        
        private AstBulkOption _bulkOption;
        
        public AstBulkOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBulkOption>())
                {
                    this._bulkOption = ((AstBulkOption)(enumerator.Current));
                }
            }
        }
        
        public AstBulkOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBulkOption>())
                {
                    this._bulkOption = ((AstBulkOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBulkOption BulkOption
        {
            get
            {
                return this._bulkOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBulkOptions(this);
        }
    }
    
    /// <summary>
    /// bulk_option
    /// 	 : id_  EQUAL  bulk_option_value = (DECIMAL STRING)
    /// </summary>
    public partial class AstBulkOption : AstRule
    {
        
        private AstId _id;
        
        public AstBulkOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstBulkOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBulkOption(this);
        }
    }
    
    /// <summary>
    /// partition_function
    /// 	 : (database_name  DOT)?  DOLLAR_PARTITION  DOT  function_name  LR_BRACKET  expression  RR_BRACKET
    /// </summary>
    public partial class AstPartitionFunction : AstRule
    {
        
        private AstFunctionName _functionName;
        
        private AstExpression _expression;
        
        public AstPartitionFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionName>())
                {
                    this._functionName = ((AstFunctionName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstPartitionFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionName>())
                {
                    this._functionName = ((AstFunctionName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFunctionName FunctionName
        {
            get
            {
                return this._functionName;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionFunction(this);
        }
    }
    
    /// <summary>
    /// expression_language
    /// 	 : expression  (COMMA  LANGUAGE  expression)?
    /// </summary>
    public partial class AstExpressionLanguage : AstRule
    {
        
        private AstExpression _expression;
        
        public AstExpressionLanguage(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstExpressionLanguage(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressionLanguage(this);
        }
    }
    
    /// <summary>
    /// freetext_table_andcolumn_names
    /// 	 : full_table_name  COMMA  (full_column_name full_column_names STAR)
    /// </summary>
    public partial class AstFreetextTableAndcolumnNames : AstRule
    {
        
        private AstFullTableName _fullTableName;
        
        public AstFreetextTableAndcolumnNames(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
            }
        }
        
        public AstFreetextTableAndcolumnNames(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableName>())
                {
                    this._fullTableName = ((AstFullTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableName FullTableName
        {
            get
            {
                return this._fullTableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFreetextTableAndcolumnNames(this);
        }
    }
    
    /// <summary>
    /// full_column_names
    /// 	 : LR_BRACKET  full_column_name  (COMMA  full_column_name)*?  RR_BRACKET
    /// </summary>
    public partial class AstFullColumnNames : AstRule
    {
        
        private AstFullColumnName _fullColumnName;
        
        public AstFullColumnNames(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
            }
        }
        
        public AstFullColumnNames(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullColumnName FullColumnName
        {
            get
            {
                return this._fullColumnName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullColumnNames(this);
        }
    }
    
    /// <summary>
    /// expressions
    /// 	 : expression  (COMMA  expression)*?
    /// </summary>
    public partial class AstExpressions : AstRule
    {
        
        private AstExpression _expression;
        
        public AstExpressions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstExpressions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressions(this);
        }
    }
    
    /// <summary>
    /// switch_section
    /// 	 : WHEN  expression  THEN  expression
    /// </summary>
    public partial class AstSwitchSection : AstRule
    {
        
        private AstExpression _expression;
        
        public AstSwitchSection(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstSwitchSection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSwitchSection(this);
        }
    }
    
    /// <summary>
    /// switch_search_condition_section
    /// 	 : WHEN  search_condition  THEN  expression
    /// </summary>
    public partial class AstSwitchSearchConditionSection : AstRule
    {
        
        private AstSearchCondition _searchCondition;
        
        private AstExpression _expression;
        
        public AstSwitchSearchConditionSection(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstSwitchSearchConditionSection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSwitchSearchConditionSection(this);
        }
    }
    
    /// <summary>
    /// as_column_alias
    /// 	 : AS?  column_alias
    /// </summary>
    public partial class AstAsColumnAlias : AstRule
    {
        
        private AstColumnAlias _columnAlias;
        
        public AstAsColumnAlias(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnAlias>())
                {
                    this._columnAlias = ((AstColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public AstAsColumnAlias(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnAlias>())
                {
                    this._columnAlias = ((AstColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnAlias ColumnAlias
        {
            get
            {
                return this._columnAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsColumnAlias(this);
        }
    }
    
    /// <summary>
    /// as_table_alias
    /// 	 : AS?  table_alias
    /// </summary>
    public partial class AstAsTableAlias : AstRule
    {
        
        private AstTableAlias _tableAlias;
        
        public AstAsTableAlias(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableAlias>())
                {
                    this._tableAlias = ((AstTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstAsTableAlias(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableAlias>())
                {
                    this._tableAlias = ((AstTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableAlias TableAlias
        {
            get
            {
                return this._tableAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsTableAlias(this);
        }
    }
    
    /// <summary>
    /// deprecated_table_hint
    /// 	 : LR_BRACKET  table_hint  RR_BRACKET
    /// </summary>
    public partial class AstDeprecatedTableHint : AstRule
    {
        
        private AstTableHint _tableHint;
        
        public AstDeprecatedTableHint(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableHint>())
                {
                    this._tableHint = ((AstTableHint)(enumerator.Current));
                }
            }
        }
        
        public AstDeprecatedTableHint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableHint>())
                {
                    this._tableHint = ((AstTableHint)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableHint TableHint
        {
            get
            {
                return this._tableHint;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeprecatedTableHint(this);
        }
    }
    
    /// <summary>
    /// index_values
    /// 	 : index_value  (COMMA  index_value)*?
    /// </summary>
    public partial class AstIndexValues : AstRule
    {
        
        private AstIndexValue _indexValue;
        
        public AstIndexValues(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexValue>())
                {
                    this._indexValue = ((AstIndexValue)(enumerator.Current));
                }
            }
        }
        
        public AstIndexValues(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexValue>())
                {
                    this._indexValue = ((AstIndexValue)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexValue IndexValue
        {
            get
            {
                return this._indexValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIndexValues(this);
        }
    }
    
    /// <summary>
    /// all_distinct_expression
    /// 	 : (ALL DISTINCT)?  expression
    /// </summary>
    public partial class AstAllDistinctExpression : AstRule
    {
        
        private AstExpression _expression;
        
        public AstAllDistinctExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstAllDistinctExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAllDistinctExpression(this);
        }
    }
    
    /// <summary>
    /// over_clause
    /// 	 : OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  order_by_clause?  row_or_range_clause?  RR_BRACKET
    /// </summary>
    public partial class AstOverClause : AstRule
    {
        
        private AstOrderByClause _orderByClause;
        
        private AstRowOrRangeClause _rowOrRangeClause;
        
        public AstOverClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOrderByClause>())
                {
                    this._orderByClause = ((AstOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowOrRangeClause>())
                {
                    this._rowOrRangeClause = ((AstRowOrRangeClause)(enumerator.Current));
                }
            }
        }
        
        public AstOverClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOrderByClause>())
                {
                    this._orderByClause = ((AstOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowOrRangeClause>())
                {
                    this._rowOrRangeClause = ((AstRowOrRangeClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOrderByClause OrderByClause
        {
            get
            {
                return this._orderByClause;
            }
        }
        
        public virtual AstRowOrRangeClause RowOrRangeClause
        {
            get
            {
                return this._rowOrRangeClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOverClause(this);
        }
    }
    
    /// <summary>
    /// row_or_range_clause
    /// 	 : (ROWS RANGE)  window_frame_extent
    /// </summary>
    public partial class AstRowOrRangeClause : AstRule
    {
        
        private AstWindowFrameExtent _windowFrameExtent;
        
        public AstRowOrRangeClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWindowFrameExtent>())
                {
                    this._windowFrameExtent = ((AstWindowFrameExtent)(enumerator.Current));
                }
            }
        }
        
        public AstRowOrRangeClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWindowFrameExtent>())
                {
                    this._windowFrameExtent = ((AstWindowFrameExtent)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWindowFrameExtent WindowFrameExtent
        {
            get
            {
                return this._windowFrameExtent;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRowOrRangeClause(this);
        }
    }
    
    /// <summary>
    /// database_filestream_options
    /// 	 : database_filestream_option  (COMMA  database_filestream_option)*?
    /// </summary>
    public partial class AstDatabaseFilestreamOptions : AstRule
    {
        
        private AstDatabaseFilestreamOption _databaseFilestreamOption;
        
        public AstDatabaseFilestreamOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseFilestreamOption>())
                {
                    this._databaseFilestreamOption = ((AstDatabaseFilestreamOption)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseFilestreamOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseFilestreamOption>())
                {
                    this._databaseFilestreamOption = ((AstDatabaseFilestreamOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseFilestreamOption DatabaseFilestreamOption
        {
            get
            {
                return this._databaseFilestreamOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseFilestreamOptions(this);
        }
    }
    
    /// <summary>
    /// file_group
    /// 	 : FILEGROUP  id_  (CONTAINS  FILESTREAM)?  (DEFAULT)?  (CONTAINS  MEMORY_OPTIMIZED_DATA)?  file_spec  (COMMA  file_spec)*?
    /// </summary>
    public partial class AstFileGroup : AstRule
    {
        
        private AstId _id;
        
        private AstFileSpec _fileSpec;
        
        public AstFileGroup(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpec>())
                {
                    this._fileSpec = ((AstFileSpec)(enumerator.Current));
                }
            }
        }
        
        public AstFileGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpec>())
                {
                    this._fileSpec = ((AstFileSpec)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstFileSpec FileSpec
        {
            get
            {
                return this._fileSpec;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileGroup(this);
        }
    }
    
    /// <summary>
    /// file_spec
    /// 	 : LR_BRACKET  NAME  EQUAL  id_or_string  COMMA?  FILENAME  EQUAL  file = STRING  COMMA?  (SIZE  EQUAL  file_size  COMMA?)?  (MAXSIZE  EQUAL  (file_size UNLIMITED)  COMMA?)?  (FILEGROWTH  EQUAL  file_size  COMMA?)?  RR_BRACKET
    /// </summary>
    public partial class AstFileSpec : AstRule
    {
        
        private AstIdOrString _idOrString;
        
        public AstFileSpec(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIdOrString>())
                {
                    this._idOrString = ((AstIdOrString)(enumerator.Current));
                }
            }
        }
        
        public AstFileSpec(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIdOrString>())
                {
                    this._idOrString = ((AstIdOrString)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIdOrString IdOrString
        {
            get
            {
                return this._idOrString;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileSpec(this);
        }
    }
    
    /// <summary>
    /// entity_name
    /// 	 : (server_name  DOT  database_name  DOT  schema_name  DOT database_name  DOT  schema_name?  DOT schema_name  DOT)?  tableName
    /// </summary>
    public partial class AstEntityName : AstRule
    {
        
        private AstTableName _tableName;
        
        public AstEntityName(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public AstEntityName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableName>())
                {
                    this._tableName = ((AstTableName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableName TableName
        {
            get
            {
                return this._tableName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEntityName(this);
        }
    }
    
    /// <summary>
    /// column_name_list_with_order
    /// 	 : id_  (ASC DESC)?  (COMMA  id_  (ASC DESC)?)*?
    /// </summary>
    public partial class AstColumnNameListWithOrder : AstRule
    {
        
        private AstId _id;
        
        public AstColumnNameListWithOrder(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstColumnNameListWithOrder(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnNameListWithOrder(this);
        }
    }
    
    /// <summary>
    /// begin_conversation_timer
    /// 	 : BEGIN  CONVERSATION  TIMER  LR_BRACKET  LOCAL_ID  RR_BRACKET  TIMEOUT  EQUAL  time  SEMI?
    /// </summary>
    public partial class AstBeginConversationTimer : AstRule
    {
        
        private AstTime _time;
        
        public AstBeginConversationTimer(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTime>())
                {
                    this._time = ((AstTime)(enumerator.Current));
                }
            }
        }
        
        public AstBeginConversationTimer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTime>())
                {
                    this._time = ((AstTime)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTime Time
        {
            get
            {
                return this._time;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBeginConversationTimer(this);
        }
    }
    
    /// <summary>
    /// begin_conversation_dialog
    /// 	 : BEGIN  DIALOG  (CONVERSATION)?  dialog_handle = LOCAL_ID  FROM  SERVICE  initiator_service_name = service_name  TO  SERVICE  target_service_name = service_name  (COMMA  service_broker_guid = STRING)?  ON  CONTRACT  contract_name  (WITH  ((RELATED_CONVERSATION RELATED_CONVERSATION_GROUP)  EQUAL  LOCAL_ID  COMMA?)?  (LIFETIME  EQUAL  (DECIMAL LOCAL_ID)  COMMA?)?  (ENCRYPTION  EQUAL  on_off)?)?  SEMI?
    /// </summary>
    public partial class AstBeginConversationDialog : AstRule
    {
        
        private AstContractName _contractName;
        
        public AstBeginConversationDialog(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContractName>())
                {
                    this._contractName = ((AstContractName)(enumerator.Current));
                }
            }
        }
        
        public AstBeginConversationDialog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContractName>())
                {
                    this._contractName = ((AstContractName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstContractName ContractName
        {
            get
            {
                return this._contractName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBeginConversationDialog(this);
        }
    }
    
    /// <summary>
    /// waitfor_conversation
    /// 	 : WAITFOR?  LR_BRACKET  get_conversation  RR_BRACKET  (COMMA?  TIMEOUT  timeout = time)?  SEMI?
    /// </summary>
    public partial class AstWaitforConversation : AstRule
    {
        
        private AstGetConversation _getConversation;
        
        public AstWaitforConversation(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGetConversation>())
                {
                    this._getConversation = ((AstGetConversation)(enumerator.Current));
                }
            }
        }
        
        public AstWaitforConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGetConversation>())
                {
                    this._getConversation = ((AstGetConversation)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGetConversation GetConversation
        {
            get
            {
                return this._getConversation;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWaitforConversation(this);
        }
    }
    
    /// <summary>
    /// file_size
    /// 	 : DECIMAL  file_size_unity?
    /// </summary>
    public partial class AstFileSize : AstRule
    {
        
        private AstFileSizeUnity _fileSizeUnity;
        
        public AstFileSize(Position p, List<AstRoot> list) : 
                base(p, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileSizeUnity>())
                {
                    this._fileSizeUnity = ((AstFileSizeUnity)(enumerator.Current));
                }
            }
        }
        
        public AstFileSize(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileSizeUnity>())
                {
                    this._fileSizeUnity = ((AstFileSizeUnity)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFileSizeUnity FileSizeUnity
        {
            get
            {
                return this._fileSizeUnity;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileSize(this);
        }
    }
}
