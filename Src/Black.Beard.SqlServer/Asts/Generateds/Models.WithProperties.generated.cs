#nullable disable
// Generated by Models.WithProperties : mardi 11 avril 2023
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Asts.TSql
{
    using System;
    using Bb.Parsers;
    using Antlr4.Runtime;
    using System.Collections;
    using Antlr4.Runtime.Tree;
    
    
    /// <summary>
    /// block_statement
    /// 	 : BEGIN  SEMI?  sql_clauses?  END  SEMI?
    /// </summary>
    public partial class AstBlockStatement : AstCflStatement
    {
        
        private AstSqlClauses _sqlClauses;
        
        public AstBlockStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public AstBlockStatement(Position p, AstSqlClauses sqlClauses) : 
                base(p)
        {
            this._sqlClauses = sqlClauses;
        }
        
        public AstBlockStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSqlClauses SqlClauses
        {
            get
            {
                return this._sqlClauses;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBlockStatement(this);
        }
        
        /// <summary>
        /// block_statement : 
        ///    BEGIN SEMI? sql_clauses? END SEMI? 
        /// </summary>
        public static AstBlockStatement BlockStatement(AstSqlClauses? sqlClauses)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(sqlClauses);
            return new AstBlockStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// return_statement
    /// 	 : RETURN  expression?  SEMI?
    /// </summary>
    public partial class AstReturnStatement : AstCflStatement
    {
        
        private AstExpression _expression;
        
        public AstReturnStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstReturnStatement(Position p, AstExpression expression) : 
                base(p)
        {
            this._expression = expression;
        }
        
        public AstReturnStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReturnStatement(this);
        }
        
        /// <summary>
        /// return_statement : 
        ///    RETURN expression? SEMI? 
        /// </summary>
        public static AstReturnStatement ReturnStatement(AstExpression? expression)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(expression);
            return new AstReturnStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// if_statement
    /// 	 : IF  search_condition  sql_clause_true = sql_clause  (ELSE  sql_clause_false = sql_clause)?  SEMI?
    /// </summary>
    public partial class AstIfStatement : AstCflStatement
    {
        
        private AstSearchCondition _searchCondition;
        
        private AstSqlClause _sqlClause;
        
        public AstIfStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClause>())
                {
                    this._sqlClause = ((AstSqlClause)(enumerator.Current));
                }
            }
        }
        
        public AstIfStatement(Position p, AstSearchCondition searchCondition, AstSqlClause sqlClause) : 
                base(p)
        {
            this._searchCondition = searchCondition;
            this._sqlClause = sqlClause;
        }
        
        public AstIfStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClause>())
                {
                    this._sqlClause = ((AstSqlClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public virtual AstSqlClause SqlClause
        {
            get
            {
                return this._sqlClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIfStatement(this);
        }
        
        /// <summary>
        /// if_statement : 
        ///    IF search_condition sql_clause_true=sql_clause ELSE sql_clause_false=sql_clause SEMI? 
        /// </summary>
        public static AstIfStatement IfStatement(AstSearchCondition searchCondition, AstSqlClause sqlClauseTrue, AstSqlClause sqlClauseFalse)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(searchCondition);
            list.Add(sqlClauseTrue);
            list.Add(sqlClauseFalse);
            return new AstIfStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// throw_error_number
    /// 	 : decimal_local_id
    /// </summary>
    public partial class AstThrowErrorNumber : AstRule
    {
        
        private AstDecimalLocalId _decimalLocalId;
        
        public AstThrowErrorNumber(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalLocalId>())
                {
                    this._decimalLocalId = ((AstDecimalLocalId)(enumerator.Current));
                }
            }
        }
        
        public AstThrowErrorNumber(Position p, AstDecimalLocalId decimalLocalId) : 
                base(p)
        {
            this._decimalLocalId = decimalLocalId;
        }
        
        public AstThrowErrorNumber(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalLocalId>())
                {
                    this._decimalLocalId = ((AstDecimalLocalId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimalLocalId DecimalLocalId
        {
            get
            {
                return this._decimalLocalId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowErrorNumber(this);
        }
        
        /// <summary>
        /// throw_error_number : 
        ///    decimal_local_id 
        /// </summary>
        public static AstThrowErrorNumber ThrowErrorNumber(AstDecimalLocalId decimalLocalId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(decimalLocalId);
            return new AstThrowErrorNumber(Position.Default, list);
        }
    }
    
    /// <summary>
    /// throw_message
    /// 	 : string_local_id
    /// </summary>
    public partial class AstThrowMessage : AstRule
    {
        
        private AstStringLocalId _stringLocalId;
        
        public AstThrowMessage(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringLocalId>())
                {
                    this._stringLocalId = ((AstStringLocalId)(enumerator.Current));
                }
            }
        }
        
        public AstThrowMessage(Position p, AstStringLocalId stringLocalId) : 
                base(p)
        {
            this._stringLocalId = stringLocalId;
        }
        
        public AstThrowMessage(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringLocalId>())
                {
                    this._stringLocalId = ((AstStringLocalId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringLocalId StringLocalId
        {
            get
            {
                return this._stringLocalId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowMessage(this);
        }
        
        /// <summary>
        /// throw_message : 
        ///    string_local_id 
        /// </summary>
        public static AstThrowMessage ThrowMessage(AstStringLocalId stringLocalId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(stringLocalId);
            return new AstThrowMessage(Position.Default, list);
        }
    }
    
    /// <summary>
    /// throw_state
    /// 	 : decimal_local_id
    /// </summary>
    public partial class AstThrowState : AstRule
    {
        
        private AstDecimalLocalId _decimalLocalId;
        
        public AstThrowState(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalLocalId>())
                {
                    this._decimalLocalId = ((AstDecimalLocalId)(enumerator.Current));
                }
            }
        }
        
        public AstThrowState(Position p, AstDecimalLocalId decimalLocalId) : 
                base(p)
        {
            this._decimalLocalId = decimalLocalId;
        }
        
        public AstThrowState(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalLocalId>())
                {
                    this._decimalLocalId = ((AstDecimalLocalId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimalLocalId DecimalLocalId
        {
            get
            {
                return this._decimalLocalId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowState(this);
        }
        
        /// <summary>
        /// throw_state : 
        ///    decimal_local_id 
        /// </summary>
        public static AstThrowState ThrowState(AstDecimalLocalId decimalLocalId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(decimalLocalId);
            return new AstThrowState(Position.Default, list);
        }
    }
    
    /// <summary>
    /// waitfor_statement
    /// 	 : WAITFOR  receive_statement?  COMMA?  (delay_time_timeout  time)?  expression?  SEMI?
    /// </summary>
    public partial class AstWaitforStatement : AstCflStatement
    {
        
        private AstReceiveStatement _receiveStatement;
        
        private AstDelayTimeTimeout _delayTimeTimeout;
        
        private AstTime _time;
        
        private AstExpression _expression;
        
        public AstWaitforStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReceiveStatement>())
                {
                    this._receiveStatement = ((AstReceiveStatement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDelayTimeTimeout>())
                {
                    this._delayTimeTimeout = ((AstDelayTimeTimeout)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTime>())
                {
                    this._time = ((AstTime)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstWaitforStatement(Position p, AstReceiveStatement receiveStatement, AstDelayTimeTimeout delayTimeTimeout, AstTime time, AstExpression expression) : 
                base(p)
        {
            this._receiveStatement = receiveStatement;
            this._delayTimeTimeout = delayTimeTimeout;
            this._time = time;
            this._expression = expression;
        }
        
        public AstWaitforStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReceiveStatement>())
                {
                    this._receiveStatement = ((AstReceiveStatement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDelayTimeTimeout>())
                {
                    this._delayTimeTimeout = ((AstDelayTimeTimeout)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTime>())
                {
                    this._time = ((AstTime)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstReceiveStatement ReceiveStatement
        {
            get
            {
                return this._receiveStatement;
            }
        }
        
        public virtual AstDelayTimeTimeout DelayTimeTimeout
        {
            get
            {
                return this._delayTimeTimeout;
            }
        }
        
        public virtual AstTime Time
        {
            get
            {
                return this._time;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWaitforStatement(this);
        }
        
        /// <summary>
        /// waitfor_statement : 
        ///    WAITFOR receive_statement? COMMA? delay_time_timeout time expression? SEMI? 
        /// </summary>
        public static AstWaitforStatement WaitforStatement(AstReceiveStatement? receiveStatement, AstDelayTimeTimeout delayTimeTimeout, AstTime time, AstExpression? expression)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(receiveStatement);
            list.Add(delayTimeTimeout);
            list.Add(time);
            list.Add(expression);
            return new AstWaitforStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// while_statement
    /// 	 : WHILE  search_condition  (sql_clause | BREAK  SEMI? | CONTINUE  SEMI?)
    /// </summary>
    public partial class AstWhileStatement : AstCflStatement
    {
        
        private AstSearchCondition _searchCondition;
        
        private AstSqlClause _sqlClause;
        
        public AstWhileStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClause>())
                {
                    this._sqlClause = ((AstSqlClause)(enumerator.Current));
                }
            }
        }
        
        public AstWhileStatement(Position p, AstSearchCondition searchCondition, AstSqlClause sqlClause) : 
                base(p)
        {
            this._searchCondition = searchCondition;
            this._sqlClause = sqlClause;
        }
        
        public AstWhileStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClause>())
                {
                    this._sqlClause = ((AstSqlClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public virtual AstSqlClause SqlClause
        {
            get
            {
                return this._sqlClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWhileStatement(this);
        }
        
        /// <summary>
        /// while_statement : 
        ///    WHILE search_condition sql_clause 
        /// </summary>
        public static AstWhileStatement WhileStatement(AstSearchCondition searchCondition, AstSqlClause sqlClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(searchCondition);
            list.Add(sqlClause);
            return new AstWhileStatement(Position.Default, list);
        }
        
        /// <summary>
        /// while_statement : 
        ///    WHILE search_condition BREAK SEMI? 
        /// </summary>
        public static AstWhileStatement WhileStatement(AstSearchCondition searchCondition)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(searchCondition);
            return new AstWhileStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// print_statement
    /// 	 : PRINT  (expression | empty_value)  local_ids?  SEMI?
    /// </summary>
    public partial class AstPrintStatement : AstCflStatement
    {
        
        private AstExpression _expression;
        
        private AstEmptyValue _emptyValue;
        
        private AstLocalIds _localIds;
        
        public AstPrintStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEmptyValue>())
                {
                    this._emptyValue = ((AstEmptyValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalIds>())
                {
                    this._localIds = ((AstLocalIds)(enumerator.Current));
                }
            }
        }
        
        public AstPrintStatement(Position p, AstExpression expression, AstEmptyValue emptyValue, AstLocalIds localIds) : 
                base(p)
        {
            this._expression = expression;
            this._emptyValue = emptyValue;
            this._localIds = localIds;
        }
        
        public AstPrintStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEmptyValue>())
                {
                    this._emptyValue = ((AstEmptyValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalIds>())
                {
                    this._localIds = ((AstLocalIds)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstEmptyValue EmptyValue
        {
            get
            {
                return this._emptyValue;
            }
        }
        
        public virtual AstLocalIds LocalIds
        {
            get
            {
                return this._localIds;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrintStatement(this);
        }
        
        /// <summary>
        /// print_statement : 
        ///    PRINT expression local_ids? SEMI? 
        /// </summary>
        public static AstPrintStatement PrintStatement(AstExpression expression, AstLocalIds? localIds)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(expression);
            list.Add(localIds);
            return new AstPrintStatement(Position.Default, list);
        }
        
        /// <summary>
        /// print_statement : 
        ///    PRINT empty_value local_ids? SEMI? 
        /// </summary>
        public static AstPrintStatement PrintStatement(AstEmptyValue emptyValue, AstLocalIds? localIds)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(emptyValue);
            list.Add(localIds);
            return new AstPrintStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// constant_local_id_or_null
    /// 	 : constant_local_id
    /// 	 | NULL_
    /// </summary>
    public partial class AstConstantLocalIdOrNull : AstRule
    {
        
        private AstConstantLocalId _constantLocalId;
        
        public AstConstantLocalIdOrNull(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstConstantLocalId>())
                {
                    this._constantLocalId = ((AstConstantLocalId)(enumerator.Current));
                }
            }
        }
        
        public AstConstantLocalIdOrNull(Position p, AstConstantLocalId constantLocalId) : 
                base(p)
        {
            this._constantLocalId = constantLocalId;
        }
        
        public AstConstantLocalIdOrNull(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstConstantLocalId>())
                {
                    this._constantLocalId = ((AstConstantLocalId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstConstantLocalId ConstantLocalId
        {
            get
            {
                return this._constantLocalId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConstantLocalIdOrNull(this);
        }
        
        /// <summary>
        /// constant_local_id_or_null : 
        ///    constant_local_id 
        /// </summary>
        public static AstConstantLocalIdOrNull ConstantLocalIdOrNull(AstConstantLocalId constantLocalId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(constantLocalId);
            return new AstConstantLocalIdOrNull(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_application_role
    /// 	 : ALTER  APPLICATION  ROLE  role_id  WITH  (COMMA?  NAME  EQUAL  new_role = role_id)?  (COMMA?  PASSWORD  EQUAL  application_role_password = stringtext)?  (COMMA?  DEFAULT_SCHEMA  EQUAL  schema_id)?
    /// </summary>
    public partial class AstAlterApplicationRole : AstDdlClause
    {
        
        private AstRoleId _roleId;
        
        private AstStringtext _stringtext;
        
        private AstSchemaId _schemaId;
        
        public AstAlterApplicationRole(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterApplicationRole(Position p, AstRoleId roleId, AstStringtext stringtext, AstSchemaId schemaId) : 
                base(p)
        {
            this._roleId = roleId;
            this._stringtext = stringtext;
            this._schemaId = schemaId;
        }
        
        public AstAlterApplicationRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleId RoleId
        {
            get
            {
                return this._roleId;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstSchemaId SchemaId
        {
            get
            {
                return this._schemaId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterApplicationRole(this);
        }
        
        /// <summary>
        /// alter_application_role : 
        ///    ALTER APPLICATION ROLE role_id WITH COMMA? NAME EQUAL new_role=role_id COMMA? PASSWORD EQUAL application_role_password=stringtext COMMA? DEFAULT_SCHEMA EQUAL schema_id 
        /// </summary>
        public static AstAlterApplicationRole AlterApplicationRole(AstRoleId roleId, AstRoleId newRole, AstStringtext applicationRolePassword, AstSchemaId schemaId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(roleId);
            list.Add(newRole);
            list.Add(applicationRolePassword);
            list.Add(schemaId);
            return new AstAlterApplicationRole(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_application_role
    /// 	 : CREATE  APPLICATION  ROLE  role_id  WITH  (COMMA?  PASSWORD  EQUAL  application_role_password = stringtext)?  (COMMA?  DEFAULT_SCHEMA  EQUAL  schema_id)?
    /// </summary>
    public partial class AstCreateApplicationRole : AstDdlClause
    {
        
        private AstRoleId _roleId;
        
        private AstStringtext _stringtext;
        
        private AstSchemaId _schemaId;
        
        public AstCreateApplicationRole(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateApplicationRole(Position p, AstRoleId roleId, AstStringtext stringtext, AstSchemaId schemaId) : 
                base(p)
        {
            this._roleId = roleId;
            this._stringtext = stringtext;
            this._schemaId = schemaId;
        }
        
        public AstCreateApplicationRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleId RoleId
        {
            get
            {
                return this._roleId;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstSchemaId SchemaId
        {
            get
            {
                return this._schemaId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateApplicationRole(this);
        }
        
        /// <summary>
        /// create_application_role : 
        ///    CREATE APPLICATION ROLE role_id WITH COMMA? PASSWORD EQUAL application_role_password=stringtext COMMA? DEFAULT_SCHEMA EQUAL schema_id 
        /// </summary>
        public static AstCreateApplicationRole CreateApplicationRole(AstRoleId roleId, AstStringtext applicationRolePassword, AstSchemaId schemaId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(roleId);
            list.Add(applicationRolePassword);
            list.Add(schemaId);
            return new AstCreateApplicationRole(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_aggregate
    /// 	 : DROP  AGGREGATE  (IF  EXISTS)?  schema_aggregate_ref
    /// </summary>
    public partial class AstDropAggregate : AstDdlClause
    {
        
        private AstSchemaAggregateRef _schemaAggregateRef;
        
        public AstDropAggregate(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaAggregateRef>())
                {
                    this._schemaAggregateRef = ((AstSchemaAggregateRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropAggregate(Position p, AstSchemaAggregateRef schemaAggregateRef) : 
                base(p)
        {
            this._schemaAggregateRef = schemaAggregateRef;
        }
        
        public AstDropAggregate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaAggregateRef>())
                {
                    this._schemaAggregateRef = ((AstSchemaAggregateRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaAggregateRef SchemaAggregateRef
        {
            get
            {
                return this._schemaAggregateRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAggregate(this);
        }
        
        /// <summary>
        /// drop_aggregate : 
        ///    DROP AGGREGATE IF EXISTS schema_aggregate_ref 
        /// </summary>
        public static AstDropAggregate DropAggregate(AstSchemaAggregateRef schemaAggregateRef)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(schemaAggregateRef);
            return new AstDropAggregate(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_application_role
    /// 	 : DROP  APPLICATION  ROLE  role_id
    /// </summary>
    public partial class AstDropApplicationRole : AstDdlClause
    {
        
        private AstRoleId _roleId;
        
        public AstDropApplicationRole(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public AstDropApplicationRole(Position p, AstRoleId roleId) : 
                base(p)
        {
            this._roleId = roleId;
        }
        
        public AstDropApplicationRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleId RoleId
        {
            get
            {
                return this._roleId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropApplicationRole(this);
        }
        
        /// <summary>
        /// drop_application_role : 
        ///    DROP APPLICATION ROLE role_id 
        /// </summary>
        public static AstDropApplicationRole DropApplicationRole(AstRoleId roleId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(roleId);
            return new AstDropApplicationRole(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_assembly
    /// 	 : alter_assembly_start  assembly_id  alter_assembly_clause
    /// </summary>
    public partial class AstAlterAssembly : AstDdlClause
    {
        
        private AstAlterAssemblyStart _alterAssemblyStart;
        
        private AstAssemblyId _assemblyId;
        
        private AstAlterAssemblyClause _alterAssemblyClause;
        
        public AstAlterAssembly(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyStart>())
                {
                    this._alterAssemblyStart = ((AstAlterAssemblyStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyClause>())
                {
                    this._alterAssemblyClause = ((AstAlterAssemblyClause)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssembly(Position p, AstAlterAssemblyStart alterAssemblyStart, AstAssemblyId assemblyId, AstAlterAssemblyClause alterAssemblyClause) : 
                base(p)
        {
            this._alterAssemblyStart = alterAssemblyStart;
            this._assemblyId = assemblyId;
            this._alterAssemblyClause = alterAssemblyClause;
        }
        
        public AstAlterAssembly(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyStart>())
                {
                    this._alterAssemblyStart = ((AstAlterAssemblyStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyClause>())
                {
                    this._alterAssemblyClause = ((AstAlterAssemblyClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyStart AlterAssemblyStart
        {
            get
            {
                return this._alterAssemblyStart;
            }
        }
        
        public virtual AstAssemblyId AssemblyId
        {
            get
            {
                return this._assemblyId;
            }
        }
        
        public virtual AstAlterAssemblyClause AlterAssemblyClause
        {
            get
            {
                return this._alterAssemblyClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssembly(this);
        }
        
        /// <summary>
        /// alter_assembly : 
        ///    alter_assembly_start assembly_id alter_assembly_clause 
        /// </summary>
        public static AstAlterAssembly AlterAssembly(AstAlterAssemblyStart alterAssemblyStart, AstAssemblyId assemblyId, AstAlterAssemblyClause alterAssemblyClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(alterAssemblyStart);
            list.Add(assemblyId);
            list.Add(alterAssemblyClause);
            return new AstAlterAssembly(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_assembly_clause
    /// 	 : alter_assembly_from_clause?  alter_assembly_with_clause?  alter_assembly_drop_clause?  alter_assembly_add_clause?
    /// </summary>
    public partial class AstAlterAssemblyClause : AstRule
    {
        
        private AstAlterAssemblyFromClause _alterAssemblyFromClause;
        
        private AstAlterAssemblyWithClause _alterAssemblyWithClause;
        
        private AstAlterAssemblyDropClause _alterAssemblyDropClause;
        
        private AstAlterAssemblyAddClause _alterAssemblyAddClause;
        
        public AstAlterAssemblyClause(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClause>())
                {
                    this._alterAssemblyFromClause = ((AstAlterAssemblyFromClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyWithClause>())
                {
                    this._alterAssemblyWithClause = ((AstAlterAssemblyWithClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropClause>())
                {
                    this._alterAssemblyDropClause = ((AstAlterAssemblyDropClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyAddClause>())
                {
                    this._alterAssemblyAddClause = ((AstAlterAssemblyAddClause)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyClause(Position p, AstAlterAssemblyFromClause alterAssemblyFromClause, AstAlterAssemblyWithClause alterAssemblyWithClause, AstAlterAssemblyDropClause alterAssemblyDropClause, AstAlterAssemblyAddClause alterAssemblyAddClause) : 
                base(p)
        {
            this._alterAssemblyFromClause = alterAssemblyFromClause;
            this._alterAssemblyWithClause = alterAssemblyWithClause;
            this._alterAssemblyDropClause = alterAssemblyDropClause;
            this._alterAssemblyAddClause = alterAssemblyAddClause;
        }
        
        public AstAlterAssemblyClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClause>())
                {
                    this._alterAssemblyFromClause = ((AstAlterAssemblyFromClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyWithClause>())
                {
                    this._alterAssemblyWithClause = ((AstAlterAssemblyWithClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropClause>())
                {
                    this._alterAssemblyDropClause = ((AstAlterAssemblyDropClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyAddClause>())
                {
                    this._alterAssemblyAddClause = ((AstAlterAssemblyAddClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyFromClause AlterAssemblyFromClause
        {
            get
            {
                return this._alterAssemblyFromClause;
            }
        }
        
        public virtual AstAlterAssemblyWithClause AlterAssemblyWithClause
        {
            get
            {
                return this._alterAssemblyWithClause;
            }
        }
        
        public virtual AstAlterAssemblyDropClause AlterAssemblyDropClause
        {
            get
            {
                return this._alterAssemblyDropClause;
            }
        }
        
        public virtual AstAlterAssemblyAddClause AlterAssemblyAddClause
        {
            get
            {
                return this._alterAssemblyAddClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyClause(this);
        }
        
        /// <summary>
        /// alter_assembly_clause : 
        ///    alter_assembly_from_clause? alter_assembly_with_clause? alter_assembly_drop_clause? alter_assembly_add_clause? 
        /// </summary>
        public static AstAlterAssemblyClause AlterAssemblyClause(AstAlterAssemblyFromClause? alterAssemblyFromClause, AstAlterAssemblyWithClause? alterAssemblyWithClause, AstAlterAssemblyDropClause? alterAssemblyDropClause, AstAlterAssemblyAddClause? alterAssemblyAddClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(alterAssemblyFromClause);
            list.Add(alterAssemblyWithClause);
            list.Add(alterAssemblyDropClause);
            list.Add(alterAssemblyAddClause);
            return new AstAlterAssemblyClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_assembly_from_clause
    /// 	 : alter_assembly_from_clause_start  (client_assembly_specifier | alter_assembly_file_bits)
    /// </summary>
    public partial class AstAlterAssemblyFromClause : AstRule
    {
        
        private AstAlterAssemblyFromClauseStart _alterAssemblyFromClauseStart;
        
        private AstClientAssemblySpecifier _clientAssemblySpecifier;
        
        private AstAlterAssemblyFileBits _alterAssemblyFileBits;
        
        public AstAlterAssemblyFromClause(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClauseStart>())
                {
                    this._alterAssemblyFromClauseStart = ((AstAlterAssemblyFromClauseStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClientAssemblySpecifier>())
                {
                    this._clientAssemblySpecifier = ((AstClientAssemblySpecifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyFileBits>())
                {
                    this._alterAssemblyFileBits = ((AstAlterAssemblyFileBits)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyFromClause(Position p, AstAlterAssemblyFromClauseStart alterAssemblyFromClauseStart, AstClientAssemblySpecifier clientAssemblySpecifier, AstAlterAssemblyFileBits alterAssemblyFileBits) : 
                base(p)
        {
            this._alterAssemblyFromClauseStart = alterAssemblyFromClauseStart;
            this._clientAssemblySpecifier = clientAssemblySpecifier;
            this._alterAssemblyFileBits = alterAssemblyFileBits;
        }
        
        public AstAlterAssemblyFromClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClauseStart>())
                {
                    this._alterAssemblyFromClauseStart = ((AstAlterAssemblyFromClauseStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClientAssemblySpecifier>())
                {
                    this._clientAssemblySpecifier = ((AstClientAssemblySpecifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyFileBits>())
                {
                    this._alterAssemblyFileBits = ((AstAlterAssemblyFileBits)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyFromClauseStart AlterAssemblyFromClauseStart
        {
            get
            {
                return this._alterAssemblyFromClauseStart;
            }
        }
        
        public virtual AstClientAssemblySpecifier ClientAssemblySpecifier
        {
            get
            {
                return this._clientAssemblySpecifier;
            }
        }
        
        public virtual AstAlterAssemblyFileBits AlterAssemblyFileBits
        {
            get
            {
                return this._alterAssemblyFileBits;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyFromClause(this);
        }
        
        /// <summary>
        /// alter_assembly_from_clause : 
        ///    alter_assembly_from_clause_start client_assembly_specifier 
        /// </summary>
        public static AstAlterAssemblyFromClause AlterAssemblyFromClause(AstAlterAssemblyFromClauseStart alterAssemblyFromClauseStart, AstClientAssemblySpecifier clientAssemblySpecifier)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(alterAssemblyFromClauseStart);
            list.Add(clientAssemblySpecifier);
            return new AstAlterAssemblyFromClause(Position.Default, list);
        }
        
        /// <summary>
        /// alter_assembly_from_clause : 
        ///    alter_assembly_from_clause_start alter_assembly_file_bits 
        /// </summary>
        public static AstAlterAssemblyFromClause AlterAssemblyFromClause(AstAlterAssemblyFromClauseStart alterAssemblyFromClauseStart, AstAlterAssemblyFileBits alterAssemblyFileBits)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(alterAssemblyFromClauseStart);
            list.Add(alterAssemblyFileBits);
            return new AstAlterAssemblyFromClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_assembly_drop_clause
    /// 	 : alter_assembly_drop  alter_assembly_drop_multiple_files
    /// </summary>
    public partial class AstAlterAssemblyDropClause : AstRule
    {
        
        private AstAlterAssemblyDrop _alterAssemblyDrop;
        
        private AstAlterAssemblyDropMultipleFiles _alterAssemblyDropMultipleFiles;
        
        public AstAlterAssemblyDropClause(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyDrop>())
                {
                    this._alterAssemblyDrop = ((AstAlterAssemblyDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropMultipleFiles>())
                {
                    this._alterAssemblyDropMultipleFiles = ((AstAlterAssemblyDropMultipleFiles)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyDropClause(Position p, AstAlterAssemblyDrop alterAssemblyDrop, AstAlterAssemblyDropMultipleFiles alterAssemblyDropMultipleFiles) : 
                base(p)
        {
            this._alterAssemblyDrop = alterAssemblyDrop;
            this._alterAssemblyDropMultipleFiles = alterAssemblyDropMultipleFiles;
        }
        
        public AstAlterAssemblyDropClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyDrop>())
                {
                    this._alterAssemblyDrop = ((AstAlterAssemblyDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropMultipleFiles>())
                {
                    this._alterAssemblyDropMultipleFiles = ((AstAlterAssemblyDropMultipleFiles)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyDrop AlterAssemblyDrop
        {
            get
            {
                return this._alterAssemblyDrop;
            }
        }
        
        public virtual AstAlterAssemblyDropMultipleFiles AlterAssemblyDropMultipleFiles
        {
            get
            {
                return this._alterAssemblyDropMultipleFiles;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyDropClause(this);
        }
        
        /// <summary>
        /// alter_assembly_drop_clause : 
        ///    alter_assembly_drop alter_assembly_drop_multiple_files 
        /// </summary>
        public static AstAlterAssemblyDropClause AlterAssemblyDropClause(AstAlterAssemblyDrop alterAssemblyDrop, AstAlterAssemblyDropMultipleFiles alterAssemblyDropMultipleFiles)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(alterAssemblyDrop);
            list.Add(alterAssemblyDropMultipleFiles);
            return new AstAlterAssemblyDropClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_assembly_add_clause
    /// 	 : ADD  FILE  FROM  alter_assembly_client_file_clause
    /// </summary>
    public partial class AstAlterAssemblyAddClause : AstRule
    {
        
        private AstAlterAssemblyClientFileClause _alterAssemblyClientFileClause;
        
        public AstAlterAssemblyAddClause(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyClientFileClause>())
                {
                    this._alterAssemblyClientFileClause = ((AstAlterAssemblyClientFileClause)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyAddClause(Position p, AstAlterAssemblyClientFileClause alterAssemblyClientFileClause) : 
                base(p)
        {
            this._alterAssemblyClientFileClause = alterAssemblyClientFileClause;
        }
        
        public AstAlterAssemblyAddClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyClientFileClause>())
                {
                    this._alterAssemblyClientFileClause = ((AstAlterAssemblyClientFileClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyClientFileClause AlterAssemblyClientFileClause
        {
            get
            {
                return this._alterAssemblyClientFileClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyAddClause(this);
        }
        
        /// <summary>
        /// alter_assembly_add_clause : 
        ///    ADD FILE FROM alter_assembly_client_file_clause 
        /// </summary>
        public static AstAlterAssemblyAddClause AlterAssemblyAddClause(AstAlterAssemblyClientFileClause alterAssemblyClientFileClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(alterAssemblyClientFileClause);
            return new AstAlterAssemblyAddClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_assembly_client_file_clause
    /// 	 : assembly_file_name  (AS  id_)?
    /// </summary>
    public partial class AstAlterAssemblyClientFileClause : AstRule
    {
        
        private AstAssemblyFileName _assemblyFileName;
        
        private AstId _id;
        
        public AstAlterAssemblyClientFileClause(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyFileName>())
                {
                    this._assemblyFileName = ((AstAssemblyFileName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyClientFileClause(Position p, AstAssemblyFileName assemblyFileName, AstId id) : 
                base(p)
        {
            this._assemblyFileName = assemblyFileName;
            this._id = id;
        }
        
        public AstAlterAssemblyClientFileClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyFileName>())
                {
                    this._assemblyFileName = ((AstAssemblyFileName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblyFileName AssemblyFileName
        {
            get
            {
                return this._assemblyFileName;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyClientFileClause(this);
        }
        
        /// <summary>
        /// alter_assembly_client_file_clause : 
        ///    assembly_file_name AS id_ 
        /// </summary>
        public static AstAlterAssemblyClientFileClause AlterAssemblyClientFileClause(AstAssemblyFileName assemblyFileName, AstId id)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(assemblyFileName);
            list.Add(id);
            return new AstAlterAssemblyClientFileClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// assembly_file_name
    /// 	 : stringtext
    /// </summary>
    public partial class AstAssemblyFileName : AstRule
    {
        
        private AstStringtext _stringtext;
        
        public AstAssemblyFileName(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstAssemblyFileName(Position p, AstStringtext stringtext) : 
                base(p)
        {
            this._stringtext = stringtext;
        }
        
        public AstAssemblyFileName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAssemblyFileName(this);
        }
        
        /// <summary>
        /// assembly_file_name : 
        ///    stringtext 
        /// </summary>
        public static AstAssemblyFileName AssemblyFileName(AstStringtext stringtext)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(stringtext);
            return new AstAssemblyFileName(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_assembly_file_bits
    /// 	 : AS  id_
    /// </summary>
    public partial class AstAlterAssemblyFileBits : AstRule
    {
        
        private AstId _id;
        
        public AstAlterAssemblyFileBits(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyFileBits(Position p, AstId id) : 
                base(p)
        {
            this._id = id;
        }
        
        public AstAlterAssemblyFileBits(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyFileBits(this);
        }
        
        /// <summary>
        /// alter_assembly_file_bits : 
        ///    AS id_ 
        /// </summary>
        public static AstAlterAssemblyFileBits AlterAssemblyFileBits(AstId id)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(id);
            return new AstAlterAssemblyFileBits(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_assembly_with_clause
    /// 	 : WITH  assembly_option
    /// </summary>
    public partial class AstAlterAssemblyWithClause : AstRule
    {
        
        private AstAssemblyOption _assemblyOption;
        
        public AstAlterAssemblyWithClause(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyOption>())
                {
                    this._assemblyOption = ((AstAssemblyOption)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyWithClause(Position p, AstAssemblyOption assemblyOption) : 
                base(p)
        {
            this._assemblyOption = assemblyOption;
        }
        
        public AstAlterAssemblyWithClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyOption>())
                {
                    this._assemblyOption = ((AstAssemblyOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblyOption AssemblyOption
        {
            get
            {
                return this._assemblyOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyWithClause(this);
        }
        
        /// <summary>
        /// alter_assembly_with_clause : 
        ///    WITH assembly_option 
        /// </summary>
        public static AstAlterAssemblyWithClause AlterAssemblyWithClause(AstAssemblyOption assemblyOption)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(assemblyOption);
            return new AstAlterAssemblyWithClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// network_file_share
    /// 	 : network_file_start  network_computer  file_path
    /// </summary>
    public partial class AstNetworkFileShare : AstRule
    {
        
        private AstNetworkFileStart _networkFileStart;
        
        private AstNetworkComputer _networkComputer;
        
        private AstFilePath _filePath;
        
        public AstNetworkFileShare(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNetworkFileStart>())
                {
                    this._networkFileStart = ((AstNetworkFileStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstNetworkComputer>())
                {
                    this._networkComputer = ((AstNetworkComputer)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this._filePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public AstNetworkFileShare(Position p, AstNetworkFileStart networkFileStart, AstNetworkComputer networkComputer, AstFilePath filePath) : 
                base(p)
        {
            this._networkFileStart = networkFileStart;
            this._networkComputer = networkComputer;
            this._filePath = filePath;
        }
        
        public AstNetworkFileShare(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNetworkFileStart>())
                {
                    this._networkFileStart = ((AstNetworkFileStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstNetworkComputer>())
                {
                    this._networkComputer = ((AstNetworkComputer)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this._filePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public virtual AstNetworkFileStart NetworkFileStart
        {
            get
            {
                return this._networkFileStart;
            }
        }
        
        public virtual AstNetworkComputer NetworkComputer
        {
            get
            {
                return this._networkComputer;
            }
        }
        
        public virtual AstFilePath FilePath
        {
            get
            {
                return this._filePath;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNetworkFileShare(this);
        }
        
        /// <summary>
        /// network_file_share : 
        ///    network_file_start network_computer file_path 
        /// </summary>
        public static AstNetworkFileShare NetworkFileShare(AstNetworkFileStart networkFileStart, AstNetworkComputer networkComputer, AstFilePath filePath)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(networkFileStart);
            list.Add(networkComputer);
            list.Add(filePath);
            return new AstNetworkFileShare(Position.Default, list);
        }
    }
    
    /// <summary>
    /// local_file
    /// 	 : local_drive  file_path
    /// </summary>
    public partial class AstLocalFile : AstRule
    {
        
        private AstLocalDrive _localDrive;
        
        private AstFilePath _filePath;
        
        public AstLocalFile(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalDrive>())
                {
                    this._localDrive = ((AstLocalDrive)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this._filePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public AstLocalFile(Position p, AstLocalDrive localDrive, AstFilePath filePath) : 
                base(p)
        {
            this._localDrive = localDrive;
            this._filePath = filePath;
        }
        
        public AstLocalFile(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalDrive>())
                {
                    this._localDrive = ((AstLocalDrive)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this._filePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalDrive LocalDrive
        {
            get
            {
                return this._localDrive;
            }
        }
        
        public virtual AstFilePath FilePath
        {
            get
            {
                return this._filePath;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLocalFile(this);
        }
        
        /// <summary>
        /// local_file : 
        ///    local_drive file_path 
        /// </summary>
        public static AstLocalFile LocalFile(AstLocalDrive localDrive, AstFilePath filePath)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(localDrive);
            list.Add(filePath);
            return new AstLocalFile(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_assembly
    /// 	 : CREATE  ASSEMBLY  assembly_id  (AUTHORIZATION  owner_id)?  FROM  binary_content_nexts  (WITH  PERMISSION_SET  EQUAL  assembly_permission)?
    /// </summary>
    public partial class AstCreateAssembly : AstDdlClause
    {
        
        private AstAssemblyId _assemblyId;
        
        private AstOwnerId _ownerId;
        
        private AstBinaryContentNexts _binaryContentNexts;
        
        private AstAssemblyPermission _assemblyPermission;
        
        public AstCreateAssembly(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinaryContentNexts>())
                {
                    this._binaryContentNexts = ((AstBinaryContentNexts)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyPermission>())
                {
                    this._assemblyPermission = ((AstAssemblyPermission)(enumerator.Current));
                }
            }
        }
        
        public AstCreateAssembly(Position p, AstAssemblyId assemblyId, AstOwnerId ownerId, AstBinaryContentNexts binaryContentNexts, AstAssemblyPermission assemblyPermission) : 
                base(p)
        {
            this._assemblyId = assemblyId;
            this._ownerId = ownerId;
            this._binaryContentNexts = binaryContentNexts;
            this._assemblyPermission = assemblyPermission;
        }
        
        public AstCreateAssembly(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinaryContentNexts>())
                {
                    this._binaryContentNexts = ((AstBinaryContentNexts)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyPermission>())
                {
                    this._assemblyPermission = ((AstAssemblyPermission)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblyId AssemblyId
        {
            get
            {
                return this._assemblyId;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public virtual AstBinaryContentNexts BinaryContentNexts
        {
            get
            {
                return this._binaryContentNexts;
            }
        }
        
        public virtual AstAssemblyPermission AssemblyPermission
        {
            get
            {
                return this._assemblyPermission;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateAssembly(this);
        }
        
        /// <summary>
        /// create_assembly : 
        ///    CREATE ASSEMBLY assembly_id AUTHORIZATION owner_id FROM binary_content_nexts WITH PERMISSION_SET EQUAL assembly_permission 
        /// </summary>
        public static AstCreateAssembly CreateAssembly(AstAssemblyId assemblyId, AstOwnerId ownerId, AstBinaryContentNexts binaryContentNexts, AstAssemblyPermission assemblyPermission)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(assemblyId);
            list.Add(ownerId);
            list.Add(binaryContentNexts);
            list.Add(assemblyPermission);
            return new AstCreateAssembly(Position.Default, list);
        }
    }
    
    /// <summary>
    /// binary_content_next
    /// 	 : COMMA?  binary_content
    /// </summary>
    public partial class AstBinaryContentNext : AstRule
    {
        
        private AstBinaryContent _binaryContent;
        
        public AstBinaryContentNext(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBinaryContent>())
                {
                    this._binaryContent = ((AstBinaryContent)(enumerator.Current));
                }
            }
        }
        
        public AstBinaryContentNext(Position p, AstBinaryContent binaryContent) : 
                base(p)
        {
            this._binaryContent = binaryContent;
        }
        
        public AstBinaryContentNext(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBinaryContent>())
                {
                    this._binaryContent = ((AstBinaryContent)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBinaryContent BinaryContent
        {
            get
            {
                return this._binaryContent;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBinaryContentNext(this);
        }
        
        /// <summary>
        /// binary_content_next : 
        ///    COMMA? binary_content 
        /// </summary>
        public static AstBinaryContentNext BinaryContentNext(AstBinaryContent binaryContent)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(binaryContent);
            return new AstBinaryContentNext(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_assembly
    /// 	 : DROP  ASSEMBLY  (IF  EXISTS)?  assemblies  (WITH  NO  DEPENDENTS)?
    /// </summary>
    public partial class AstDropAssembly : AstDdlClause
    {
        
        private AstAssemblies _assemblies;
        
        public AstDropAssembly(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblies>())
                {
                    this._assemblies = ((AstAssemblies)(enumerator.Current));
                }
            }
        }
        
        public AstDropAssembly(Position p, AstAssemblies assemblies) : 
                base(p)
        {
            this._assemblies = assemblies;
        }
        
        public AstDropAssembly(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblies>())
                {
                    this._assemblies = ((AstAssemblies)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblies Assemblies
        {
            get
            {
                return this._assemblies;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAssembly(this);
        }
        
        /// <summary>
        /// drop_assembly : 
        ///    DROP ASSEMBLY IF EXISTS assemblies WITH NO DEPENDENTS 
        /// </summary>
        public static AstDropAssembly DropAssembly(AstAssemblies assemblies)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(assemblies);
            return new AstDropAssembly(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_asymmetric_key
    /// 	 : ALTER  ASYMMETRIC  KEY  asym_key_id  (asymmetric_key_option | REMOVE  PRIVATE  KEY)
    /// </summary>
    public partial class AstAlterAsymmetricKey : AstDdlClause
    {
        
        private AstAsymKeyId _asymKeyId;
        
        private AstAsymmetricKeyOption _asymmetricKeyOption;
        
        public AstAlterAsymmetricKey(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymKeyId>())
                {
                    this._asymKeyId = ((AstAsymKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymmetricKeyOption>())
                {
                    this._asymmetricKeyOption = ((AstAsymmetricKeyOption)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAsymmetricKey(Position p, AstAsymKeyId asymKeyId, AstAsymmetricKeyOption asymmetricKeyOption) : 
                base(p)
        {
            this._asymKeyId = asymKeyId;
            this._asymmetricKeyOption = asymmetricKeyOption;
        }
        
        public AstAlterAsymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymKeyId>())
                {
                    this._asymKeyId = ((AstAsymKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymmetricKeyOption>())
                {
                    this._asymmetricKeyOption = ((AstAsymmetricKeyOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAsymKeyId AsymKeyId
        {
            get
            {
                return this._asymKeyId;
            }
        }
        
        public virtual AstAsymmetricKeyOption AsymmetricKeyOption
        {
            get
            {
                return this._asymmetricKeyOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAsymmetricKey(this);
        }
        
        /// <summary>
        /// alter_asymmetric_key : 
        ///    ALTER ASYMMETRIC KEY asym_key_id asymmetric_key_option 
        /// </summary>
        public static AstAlterAsymmetricKey AlterAsymmetricKey(AstAsymKeyId asymKeyId, AstAsymmetricKeyOption asymmetricKeyOption)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(asymKeyId);
            list.Add(asymmetricKeyOption);
            return new AstAlterAsymmetricKey(Position.Default, list);
        }
        
        /// <summary>
        /// alter_asymmetric_key : 
        ///    ALTER ASYMMETRIC KEY asym_key_id REMOVE PRIVATE KEY 
        /// </summary>
        public static AstAlterAsymmetricKey AlterAsymmetricKey(AstAsymKeyId asymKeyId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(asymKeyId);
            return new AstAlterAsymmetricKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_asymmetric_key
    /// 	 : CREATE  ASYMMETRIC  KEY  asym_key_id  (AUTHORIZATION  database_id)?  (FROM  (FILE  EQUAL  stringtext | EXECUTABLE_FILE  EQUAL  stringtext | ASSEMBLY  assembly_id | PROVIDER  provider_id))?  (WITH  (ALGORITHM  EQUAL  asymetric_algorithm | PROVIDER_KEY_NAME  EQUAL  provider_key_name = stringtext | CREATION_DISPOSITION  EQUAL  creation_disposition))?  encryption_by_pwd?
    /// </summary>
    public partial class AstCreateAsymmetricKey : AstDdlClause
    {
        
        private AstAsymKeyId _asymKeyId;
        
        private AstDatabaseId _databaseId;
        
        private AstStringtext _stringtext;
        
        private AstAssemblyId _assemblyId;
        
        private AstProviderId _providerId;
        
        private AstAsymetricAlgorithm _asymetricAlgorithm;
        
        private AstCreationDisposition _creationDisposition;
        
        private AstEncryptionByPwd _encryptionByPwd;
        
        public AstCreateAsymmetricKey(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymKeyId>())
                {
                    this._asymKeyId = ((AstAsymKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstProviderId>())
                {
                    this._providerId = ((AstProviderId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymetricAlgorithm>())
                {
                    this._asymetricAlgorithm = ((AstAsymetricAlgorithm)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreationDisposition>())
                {
                    this._creationDisposition = ((AstCreationDisposition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
            }
        }
        
        public AstCreateAsymmetricKey(Position p, AstAsymKeyId asymKeyId, AstDatabaseId databaseId, AstStringtext stringtext, AstAssemblyId assemblyId, AstProviderId providerId, AstAsymetricAlgorithm asymetricAlgorithm, AstCreationDisposition creationDisposition, AstEncryptionByPwd encryptionByPwd) : 
                base(p)
        {
            this._asymKeyId = asymKeyId;
            this._databaseId = databaseId;
            this._stringtext = stringtext;
            this._assemblyId = assemblyId;
            this._providerId = providerId;
            this._asymetricAlgorithm = asymetricAlgorithm;
            this._creationDisposition = creationDisposition;
            this._encryptionByPwd = encryptionByPwd;
        }
        
        public AstCreateAsymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymKeyId>())
                {
                    this._asymKeyId = ((AstAsymKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstProviderId>())
                {
                    this._providerId = ((AstProviderId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymetricAlgorithm>())
                {
                    this._asymetricAlgorithm = ((AstAsymetricAlgorithm)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreationDisposition>())
                {
                    this._creationDisposition = ((AstCreationDisposition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAsymKeyId AsymKeyId
        {
            get
            {
                return this._asymKeyId;
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstAssemblyId AssemblyId
        {
            get
            {
                return this._assemblyId;
            }
        }
        
        public virtual AstProviderId ProviderId
        {
            get
            {
                return this._providerId;
            }
        }
        
        public virtual AstAsymetricAlgorithm AsymetricAlgorithm
        {
            get
            {
                return this._asymetricAlgorithm;
            }
        }
        
        public virtual AstCreationDisposition CreationDisposition
        {
            get
            {
                return this._creationDisposition;
            }
        }
        
        public virtual AstEncryptionByPwd EncryptionByPwd
        {
            get
            {
                return this._encryptionByPwd;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateAsymmetricKey(this);
        }
        
        /// <summary>
        /// create_asymmetric_key : 
        ///    CREATE ASYMMETRIC KEY asym_key_id AUTHORIZATION database_id FROM FILE EQUAL stringtext WITH ALGORITHM EQUAL asymetric_algorithm encryption_by_pwd? 
        /// </summary>
        public static AstCreateAsymmetricKey CreateAsymmetricKey(AstAsymKeyId asymKeyId, AstDatabaseId databaseId, AstStringtext stringtext, AstAsymetricAlgorithm asymetricAlgorithm, AstEncryptionByPwd? encryptionByPwd)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(asymKeyId);
            list.Add(databaseId);
            list.Add(stringtext);
            list.Add(asymetricAlgorithm);
            list.Add(encryptionByPwd);
            return new AstCreateAsymmetricKey(Position.Default, list);
        }
        
        /// <summary>
        /// create_asymmetric_key : 
        ///    CREATE ASYMMETRIC KEY asym_key_id AUTHORIZATION database_id FROM ASSEMBLY assembly_id WITH ALGORITHM EQUAL asymetric_algorithm encryption_by_pwd? 
        /// </summary>
        public static AstCreateAsymmetricKey CreateAsymmetricKey(AstAsymKeyId asymKeyId, AstDatabaseId databaseId, AstAssemblyId assemblyId, AstAsymetricAlgorithm asymetricAlgorithm, AstEncryptionByPwd? encryptionByPwd)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(asymKeyId);
            list.Add(databaseId);
            list.Add(assemblyId);
            list.Add(asymetricAlgorithm);
            list.Add(encryptionByPwd);
            return new AstCreateAsymmetricKey(Position.Default, list);
        }
        
        /// <summary>
        /// create_asymmetric_key : 
        ///    CREATE ASYMMETRIC KEY asym_key_id AUTHORIZATION database_id FROM PROVIDER provider_id WITH ALGORITHM EQUAL asymetric_algorithm encryption_by_pwd? 
        /// </summary>
        public static AstCreateAsymmetricKey CreateAsymmetricKey(AstAsymKeyId asymKeyId, AstDatabaseId databaseId, AstProviderId providerId, AstAsymetricAlgorithm asymetricAlgorithm, AstEncryptionByPwd? encryptionByPwd)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(asymKeyId);
            list.Add(databaseId);
            list.Add(providerId);
            list.Add(asymetricAlgorithm);
            list.Add(encryptionByPwd);
            return new AstCreateAsymmetricKey(Position.Default, list);
        }
        
        /// <summary>
        /// create_asymmetric_key : 
        ///    CREATE ASYMMETRIC KEY asym_key_id AUTHORIZATION database_id FROM FILE EQUAL stringtext WITH PROVIDER_KEY_NAME EQUAL provider_key_name=stringtext encryption_by_pwd? 
        /// </summary>
        public static AstCreateAsymmetricKey CreateAsymmetricKey(AstAsymKeyId asymKeyId, AstDatabaseId databaseId, AstStringtext stringtext, AstStringtext providerKeyName, AstEncryptionByPwd? encryptionByPwd)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(asymKeyId);
            list.Add(databaseId);
            list.Add(stringtext);
            list.Add(providerKeyName);
            list.Add(encryptionByPwd);
            return new AstCreateAsymmetricKey(Position.Default, list);
        }
        
        /// <summary>
        /// create_asymmetric_key : 
        ///    CREATE ASYMMETRIC KEY asym_key_id AUTHORIZATION database_id FROM ASSEMBLY assembly_id WITH PROVIDER_KEY_NAME EQUAL provider_key_name=stringtext encryption_by_pwd? 
        /// </summary>
        public static AstCreateAsymmetricKey CreateAsymmetricKey(AstAsymKeyId asymKeyId, AstDatabaseId databaseId, AstAssemblyId assemblyId, AstStringtext providerKeyName, AstEncryptionByPwd? encryptionByPwd)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(asymKeyId);
            list.Add(databaseId);
            list.Add(assemblyId);
            list.Add(providerKeyName);
            list.Add(encryptionByPwd);
            return new AstCreateAsymmetricKey(Position.Default, list);
        }
        
        /// <summary>
        /// create_asymmetric_key : 
        ///    CREATE ASYMMETRIC KEY asym_key_id AUTHORIZATION database_id FROM PROVIDER provider_id WITH PROVIDER_KEY_NAME EQUAL provider_key_name=stringtext encryption_by_pwd? 
        /// </summary>
        public static AstCreateAsymmetricKey CreateAsymmetricKey(AstAsymKeyId asymKeyId, AstDatabaseId databaseId, AstProviderId providerId, AstStringtext providerKeyName, AstEncryptionByPwd? encryptionByPwd)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(asymKeyId);
            list.Add(databaseId);
            list.Add(providerId);
            list.Add(providerKeyName);
            list.Add(encryptionByPwd);
            return new AstCreateAsymmetricKey(Position.Default, list);
        }
        
        /// <summary>
        /// create_asymmetric_key : 
        ///    CREATE ASYMMETRIC KEY asym_key_id AUTHORIZATION database_id FROM FILE EQUAL stringtext WITH CREATION_DISPOSITION EQUAL creation_disposition encryption_by_pwd? 
        /// </summary>
        public static AstCreateAsymmetricKey CreateAsymmetricKey(AstAsymKeyId asymKeyId, AstDatabaseId databaseId, AstStringtext stringtext, AstCreationDisposition creationDisposition, AstEncryptionByPwd? encryptionByPwd)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(asymKeyId);
            list.Add(databaseId);
            list.Add(stringtext);
            list.Add(creationDisposition);
            list.Add(encryptionByPwd);
            return new AstCreateAsymmetricKey(Position.Default, list);
        }
        
        /// <summary>
        /// create_asymmetric_key : 
        ///    CREATE ASYMMETRIC KEY asym_key_id AUTHORIZATION database_id FROM ASSEMBLY assembly_id WITH CREATION_DISPOSITION EQUAL creation_disposition encryption_by_pwd? 
        /// </summary>
        public static AstCreateAsymmetricKey CreateAsymmetricKey(AstAsymKeyId asymKeyId, AstDatabaseId databaseId, AstAssemblyId assemblyId, AstCreationDisposition creationDisposition, AstEncryptionByPwd? encryptionByPwd)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(asymKeyId);
            list.Add(databaseId);
            list.Add(assemblyId);
            list.Add(creationDisposition);
            list.Add(encryptionByPwd);
            return new AstCreateAsymmetricKey(Position.Default, list);
        }
        
        /// <summary>
        /// create_asymmetric_key : 
        ///    CREATE ASYMMETRIC KEY asym_key_id AUTHORIZATION database_id FROM PROVIDER provider_id WITH CREATION_DISPOSITION EQUAL creation_disposition encryption_by_pwd? 
        /// </summary>
        public static AstCreateAsymmetricKey CreateAsymmetricKey(AstAsymKeyId asymKeyId, AstDatabaseId databaseId, AstProviderId providerId, AstCreationDisposition creationDisposition, AstEncryptionByPwd? encryptionByPwd)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(asymKeyId);
            list.Add(databaseId);
            list.Add(providerId);
            list.Add(creationDisposition);
            list.Add(encryptionByPwd);
            return new AstCreateAsymmetricKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_authorization
    /// 	 : ALTER  AUTHORIZATION  ON  (class_type  DOUBLE_COLON)?  entity = entity_name  TO  authorization_grantee
    /// </summary>
    public partial class AstAlterAuthorization : AstDdlClause
    {
        
        private AstClassType _classType;
        
        private AstEntityName _entityName;
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        public AstAlterAuthorization(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClassType>())
                {
                    this._classType = ((AstClassType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityName>())
                {
                    this._entityName = ((AstEntityName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAuthorization(Position p, AstClassType classType, AstEntityName entityName, AstAuthorizationGrantee authorizationGrantee) : 
                base(p)
        {
            this._classType = classType;
            this._entityName = entityName;
            this._authorizationGrantee = authorizationGrantee;
        }
        
        public AstAlterAuthorization(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClassType>())
                {
                    this._classType = ((AstClassType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityName>())
                {
                    this._entityName = ((AstEntityName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstClassType ClassType
        {
            get
            {
                return this._classType;
            }
        }
        
        public virtual AstEntityName EntityName
        {
            get
            {
                return this._entityName;
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorization(this);
        }
        
        /// <summary>
        /// alter_authorization : 
        ///    ALTER AUTHORIZATION ON class_type :: entity=entity_name TO authorization_grantee 
        /// </summary>
        public static AstAlterAuthorization AlterAuthorization(AstClassType classType, AstEntityName entity, AstAuthorizationGrantee authorizationGrantee)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(classType);
            list.Add(entity);
            list.Add(authorizationGrantee);
            return new AstAlterAuthorization(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_authorization_for_sql_database
    /// 	 : ALTER  AUTHORIZATION  ON  (class_type_for_sql_database  DOUBLE_COLON)?  entity = entity_name  TO  authorization_grantee
    /// </summary>
    public partial class AstAlterAuthorizationForSqlDatabase : AstDdlClause
    {
        
        private AstClassTypeForSqlDatabase _classTypeForSqlDatabase;
        
        private AstEntityName _entityName;
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        public AstAlterAuthorizationForSqlDatabase(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClassTypeForSqlDatabase>())
                {
                    this._classTypeForSqlDatabase = ((AstClassTypeForSqlDatabase)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityName>())
                {
                    this._entityName = ((AstEntityName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAuthorizationForSqlDatabase(Position p, AstClassTypeForSqlDatabase classTypeForSqlDatabase, AstEntityName entityName, AstAuthorizationGrantee authorizationGrantee) : 
                base(p)
        {
            this._classTypeForSqlDatabase = classTypeForSqlDatabase;
            this._entityName = entityName;
            this._authorizationGrantee = authorizationGrantee;
        }
        
        public AstAlterAuthorizationForSqlDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClassTypeForSqlDatabase>())
                {
                    this._classTypeForSqlDatabase = ((AstClassTypeForSqlDatabase)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityName>())
                {
                    this._entityName = ((AstEntityName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstClassTypeForSqlDatabase ClassTypeForSqlDatabase
        {
            get
            {
                return this._classTypeForSqlDatabase;
            }
        }
        
        public virtual AstEntityName EntityName
        {
            get
            {
                return this._entityName;
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationForSqlDatabase(this);
        }
        
        /// <summary>
        /// alter_authorization_for_sql_database : 
        ///    ALTER AUTHORIZATION ON class_type_for_sql_database :: entity=entity_name TO authorization_grantee 
        /// </summary>
        public static AstAlterAuthorizationForSqlDatabase AlterAuthorizationForSqlDatabase(AstClassTypeForSqlDatabase classTypeForSqlDatabase, AstEntityName entity, AstAuthorizationGrantee authorizationGrantee)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(classTypeForSqlDatabase);
            list.Add(entity);
            list.Add(authorizationGrantee);
            return new AstAlterAuthorizationForSqlDatabase(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_authorization_for_azure_dw
    /// 	 : ALTER  AUTHORIZATION  ON  (class_type_for_azure_dw  DOUBLE_COLON)?  entity = entity_name_for_azure_dw_ref  TO  authorization_grantee
    /// </summary>
    public partial class AstAlterAuthorizationForAzureDw : AstDdlClause
    {
        
        private AstClassTypeForAzureDw _classTypeForAzureDw;
        
        private AstEntityNameForAzureDwRef _entityNameForAzureDwRef;
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        public AstAlterAuthorizationForAzureDw(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClassTypeForAzureDw>())
                {
                    this._classTypeForAzureDw = ((AstClassTypeForAzureDw)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityNameForAzureDwRef>())
                {
                    this._entityNameForAzureDwRef = ((AstEntityNameForAzureDwRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAuthorizationForAzureDw(Position p, AstClassTypeForAzureDw classTypeForAzureDw, AstEntityNameForAzureDwRef entityNameForAzureDwRef, AstAuthorizationGrantee authorizationGrantee) : 
                base(p)
        {
            this._classTypeForAzureDw = classTypeForAzureDw;
            this._entityNameForAzureDwRef = entityNameForAzureDwRef;
            this._authorizationGrantee = authorizationGrantee;
        }
        
        public AstAlterAuthorizationForAzureDw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClassTypeForAzureDw>())
                {
                    this._classTypeForAzureDw = ((AstClassTypeForAzureDw)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityNameForAzureDwRef>())
                {
                    this._entityNameForAzureDwRef = ((AstEntityNameForAzureDwRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstClassTypeForAzureDw ClassTypeForAzureDw
        {
            get
            {
                return this._classTypeForAzureDw;
            }
        }
        
        public virtual AstEntityNameForAzureDwRef EntityNameForAzureDwRef
        {
            get
            {
                return this._entityNameForAzureDwRef;
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationForAzureDw(this);
        }
        
        /// <summary>
        /// alter_authorization_for_azure_dw : 
        ///    ALTER AUTHORIZATION ON class_type_for_azure_dw :: entity=entity_name_for_azure_dw_ref TO authorization_grantee 
        /// </summary>
        public static AstAlterAuthorizationForAzureDw AlterAuthorizationForAzureDw(AstClassTypeForAzureDw classTypeForAzureDw, AstEntityNameForAzureDwRef entity, AstAuthorizationGrantee authorizationGrantee)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(classTypeForAzureDw);
            list.Add(entity);
            list.Add(authorizationGrantee);
            return new AstAlterAuthorizationForAzureDw(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_authorization_for_parallel_dw
    /// 	 : ALTER  AUTHORIZATION  ON  (class_type_for_parallel_dw  DOUBLE_COLON)?  entity = entity_name_for_parallel_dw_ref  TO  authorization_grantee
    /// </summary>
    public partial class AstAlterAuthorizationForParallelDw : AstDdlClause
    {
        
        private AstClassTypeForParallelDw _classTypeForParallelDw;
        
        private AstEntityNameForParallelDwRef _entityNameForParallelDwRef;
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        public AstAlterAuthorizationForParallelDw(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClassTypeForParallelDw>())
                {
                    this._classTypeForParallelDw = ((AstClassTypeForParallelDw)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityNameForParallelDwRef>())
                {
                    this._entityNameForParallelDwRef = ((AstEntityNameForParallelDwRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAuthorizationForParallelDw(Position p, AstClassTypeForParallelDw classTypeForParallelDw, AstEntityNameForParallelDwRef entityNameForParallelDwRef, AstAuthorizationGrantee authorizationGrantee) : 
                base(p)
        {
            this._classTypeForParallelDw = classTypeForParallelDw;
            this._entityNameForParallelDwRef = entityNameForParallelDwRef;
            this._authorizationGrantee = authorizationGrantee;
        }
        
        public AstAlterAuthorizationForParallelDw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClassTypeForParallelDw>())
                {
                    this._classTypeForParallelDw = ((AstClassTypeForParallelDw)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityNameForParallelDwRef>())
                {
                    this._entityNameForParallelDwRef = ((AstEntityNameForParallelDwRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstClassTypeForParallelDw ClassTypeForParallelDw
        {
            get
            {
                return this._classTypeForParallelDw;
            }
        }
        
        public virtual AstEntityNameForParallelDwRef EntityNameForParallelDwRef
        {
            get
            {
                return this._entityNameForParallelDwRef;
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationForParallelDw(this);
        }
        
        /// <summary>
        /// alter_authorization_for_parallel_dw : 
        ///    ALTER AUTHORIZATION ON class_type_for_parallel_dw :: entity=entity_name_for_parallel_dw_ref TO authorization_grantee 
        /// </summary>
        public static AstAlterAuthorizationForParallelDw AlterAuthorizationForParallelDw(AstClassTypeForParallelDw classTypeForParallelDw, AstEntityNameForParallelDwRef entity, AstAuthorizationGrantee authorizationGrantee)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(classTypeForParallelDw);
            list.Add(entity);
            list.Add(authorizationGrantee);
            return new AstAlterAuthorizationForParallelDw(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_availability_group
    /// 	 : DROP  AVAILABILITY  GROUP  group_id
    /// </summary>
    public partial class AstDropAvailabilityGroup : AstDdlClause
    {
        
        private AstGroupId _groupId;
        
        public AstDropAvailabilityGroup(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstDropAvailabilityGroup(Position p, AstGroupId groupId) : 
                base(p)
        {
            this._groupId = groupId;
        }
        
        public AstDropAvailabilityGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGroupId GroupId
        {
            get
            {
                return this._groupId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAvailabilityGroup(this);
        }
        
        /// <summary>
        /// drop_availability_group : 
        ///    DROP AVAILABILITY GROUP group_id 
        /// </summary>
        public static AstDropAvailabilityGroup DropAvailabilityGroup(AstGroupId groupId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(groupId);
            return new AstDropAvailabilityGroup(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_availability_group
    /// 	 : alter_availability_group_start  alter_availability_group_options
    /// </summary>
    public partial class AstAlterAvailabilityGroup : AstDdlClause
    {
        
        private AstAlterAvailabilityGroupStart _alterAvailabilityGroupStart;
        
        private AstAlterAvailabilityGroupOptions _alterAvailabilityGroupOptions;
        
        public AstAlterAvailabilityGroup(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAvailabilityGroupStart>())
                {
                    this._alterAvailabilityGroupStart = ((AstAlterAvailabilityGroupStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilityGroupOptions>())
                {
                    this._alterAvailabilityGroupOptions = ((AstAlterAvailabilityGroupOptions)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityGroup(Position p, AstAlterAvailabilityGroupStart alterAvailabilityGroupStart, AstAlterAvailabilityGroupOptions alterAvailabilityGroupOptions) : 
                base(p)
        {
            this._alterAvailabilityGroupStart = alterAvailabilityGroupStart;
            this._alterAvailabilityGroupOptions = alterAvailabilityGroupOptions;
        }
        
        public AstAlterAvailabilityGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAvailabilityGroupStart>())
                {
                    this._alterAvailabilityGroupStart = ((AstAlterAvailabilityGroupStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilityGroupOptions>())
                {
                    this._alterAvailabilityGroupOptions = ((AstAlterAvailabilityGroupOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAvailabilityGroupStart AlterAvailabilityGroupStart
        {
            get
            {
                return this._alterAvailabilityGroupStart;
            }
        }
        
        public virtual AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions
        {
            get
            {
                return this._alterAvailabilityGroupOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroup(this);
        }
        
        /// <summary>
        /// alter_availability_group : 
        ///    alter_availability_group_start alter_availability_group_options 
        /// </summary>
        public static AstAlterAvailabilityGroup AlterAvailabilityGroup(AstAlterAvailabilityGroupStart alterAvailabilityGroupStart, AstAlterAvailabilityGroupOptions alterAvailabilityGroupOptions)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(alterAvailabilityGroupStart);
            list.Add(alterAvailabilityGroupOptions);
            return new AstAlterAvailabilityGroup(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_availability_group_start
    /// 	 : ALTER  AVAILABILITY  GROUP  group_id
    /// </summary>
    public partial class AstAlterAvailabilityGroupStart : AstRule
    {
        
        private AstGroupId _groupId;
        
        public AstAlterAvailabilityGroupStart(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityGroupStart(Position p, AstGroupId groupId) : 
                base(p)
        {
            this._groupId = groupId;
        }
        
        public AstAlterAvailabilityGroupStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGroupId GroupId
        {
            get
            {
                return this._groupId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupStart(this);
        }
        
        /// <summary>
        /// alter_availability_group_start : 
        ///    ALTER AVAILABILITY GROUP group_id 
        /// </summary>
        public static AstAlterAvailabilityGroupStart AlterAvailabilityGroupStart(AstGroupId groupId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(groupId);
            return new AstAlterAvailabilityGroupStart(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_availability_group_options_database
    /// 	 : add_remove  DATABASE  database_id
    /// </summary>
    public partial class AstAlterAvailabilityGroupOptionsDatabase : AstRule
    {
        
        private AstAddRemove _addRemove;
        
        private AstDatabaseId _databaseId;
        
        public AstAlterAvailabilityGroupOptionsDatabase(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAddRemove>())
                {
                    this._addRemove = ((AstAddRemove)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityGroupOptionsDatabase(Position p, AstAddRemove addRemove, AstDatabaseId databaseId) : 
                base(p)
        {
            this._addRemove = addRemove;
            this._databaseId = databaseId;
        }
        
        public AstAlterAvailabilityGroupOptionsDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAddRemove>())
                {
                    this._addRemove = ((AstAddRemove)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAddRemove AddRemove
        {
            get
            {
                return this._addRemove;
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupOptionsDatabase(this);
        }
        
        /// <summary>
        /// alter_availability_group_options_database : 
        ///    add_remove DATABASE database_id 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsDatabase AlterAvailabilityGroupOptionsDatabase(AstAddRemove addRemove, AstDatabaseId databaseId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(addRemove);
            list.Add(databaseId);
            return new AstAlterAvailabilityGroupOptionsDatabase(Position.Default, list);
        }
    }
    
    /// <summary>
    /// range_ip_v4
    /// 	 : left = ipv4  right = ipv4
    /// </summary>
    public partial class AstRangeIpV4 : AstRule
    {
        
        private AstIpv4 _ipv4;
        
        public AstRangeIpV4(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIpv4>())
                {
                    this._ipv4 = ((AstIpv4)(enumerator.Current));
                }
            }
        }
        
        public AstRangeIpV4(Position p, AstIpv4 ipv4) : 
                base(p)
        {
            this._ipv4 = ipv4;
        }
        
        public AstRangeIpV4(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIpv4>())
                {
                    this._ipv4 = ((AstIpv4)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIpv4 Ipv4
        {
            get
            {
                return this._ipv4;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRangeIpV4(this);
        }
        
        /// <summary>
        /// range_ip_v4 : 
        ///    left=ipv4 right=ipv4 
        /// </summary>
        public static AstRangeIpV4 RangeIpV4(AstIpv4 left, AstIpv4 right)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(left);
            list.Add(right);
            return new AstRangeIpV4(Position.Default, list);
        }
    }
    
    /// <summary>
    /// range_ip_comma_v4
    /// 	 : left = ipv4  COMMA  right = ipv4
    /// </summary>
    public partial class AstRangeIpCommaV4 : AstRule
    {
        
        private AstIpv4 _ipv4;
        
        public AstRangeIpCommaV4(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIpv4>())
                {
                    this._ipv4 = ((AstIpv4)(enumerator.Current));
                }
            }
        }
        
        public AstRangeIpCommaV4(Position p, AstIpv4 ipv4) : 
                base(p)
        {
            this._ipv4 = ipv4;
        }
        
        public AstRangeIpCommaV4(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIpv4>())
                {
                    this._ipv4 = ((AstIpv4)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIpv4 Ipv4
        {
            get
            {
                return this._ipv4;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRangeIpCommaV4(this);
        }
        
        /// <summary>
        /// range_ip_comma_v4 : 
        ///    left=ipv4 , right=ipv4 
        /// </summary>
        public static AstRangeIpCommaV4 RangeIpCommaV4(AstIpv4 left, AstIpv4 right)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(left);
            list.Add(right);
            return new AstRangeIpCommaV4(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_availability_group_options_listener_restart
    /// 	 : restart_remove  LISTENER  stringtext
    /// </summary>
    public partial class AstAlterAvailabilityGroupOptionsListenerRestart : AstRule
    {
        
        private AstRestartRemove _restartRemove;
        
        private AstStringtext _stringtext;
        
        public AstAlterAvailabilityGroupOptionsListenerRestart(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRestartRemove>())
                {
                    this._restartRemove = ((AstRestartRemove)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityGroupOptionsListenerRestart(Position p, AstRestartRemove restartRemove, AstStringtext stringtext) : 
                base(p)
        {
            this._restartRemove = restartRemove;
            this._stringtext = stringtext;
        }
        
        public AstAlterAvailabilityGroupOptionsListenerRestart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRestartRemove>())
                {
                    this._restartRemove = ((AstRestartRemove)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRestartRemove RestartRemove
        {
            get
            {
                return this._restartRemove;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupOptionsListenerRestart(this);
        }
        
        /// <summary>
        /// alter_availability_group_options_listener_restart : 
        ///    restart_remove LISTENER stringtext 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListenerRestart AlterAvailabilityGroupOptionsListenerRestart(AstRestartRemove restartRemove, AstStringtext stringtext)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(restartRemove);
            list.Add(stringtext);
            return new AstAlterAvailabilityGroupOptionsListenerRestart(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_availability_group_options_listener_dhcp
    /// 	 : WITH  DHCP  ON  LR_BRACKET  range_ip_v4  RR_BRACKET
    /// </summary>
    public partial class AstAlterAvailabilityGroupOptionsListenerDhcp : AstRule
    {
        
        private AstRangeIpV4 _rangeIpV4;
        
        public AstAlterAvailabilityGroupOptionsListenerDhcp(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRangeIpV4>())
                {
                    this._rangeIpV4 = ((AstRangeIpV4)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityGroupOptionsListenerDhcp(Position p, AstRangeIpV4 rangeIpV4) : 
                base(p)
        {
            this._rangeIpV4 = rangeIpV4;
        }
        
        public AstAlterAvailabilityGroupOptionsListenerDhcp(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRangeIpV4>())
                {
                    this._rangeIpV4 = ((AstRangeIpV4)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRangeIpV4 RangeIpV4
        {
            get
            {
                return this._rangeIpV4;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupOptionsListenerDhcp(this);
        }
        
        /// <summary>
        /// alter_availability_group_options_listener_dhcp : 
        ///    WITH DHCP ON ( range_ip_v4 ) 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListenerDhcp AlterAvailabilityGroupOptionsListenerDhcp(AstRangeIpV4 rangeIpV4)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(rangeIpV4);
            return new AstAlterAvailabilityGroupOptionsListenerDhcp(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_availability_replicat_modify
    /// 	 : MODIFY  REPLICA  ON  server_instance_txt  (WITH  LR_BRACKET  alter_availability_replicat_primary  RR_BRACKET | SECONDARY_ROLE  LR_BRACKET  alter_availability_secondary_role  RR_BRACKET | PRIMARY_ROLE  LR_BRACKET  alter_availability_primary_role  RR_BRACKET)
    /// </summary>
    public partial class AstAlterAvailabilityReplicatModify : AstRule
    {
        
        private AstServerInstanceTxt _serverInstanceTxt;
        
        private AstAlterAvailabilityReplicatPrimary _alterAvailabilityReplicatPrimary;
        
        private AstAlterAvailabilitySecondaryRole _alterAvailabilitySecondaryRole;
        
        private AstAlterAvailabilityPrimaryRole _alterAvailabilityPrimaryRole;
        
        public AstAlterAvailabilityReplicatModify(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerInstanceTxt>())
                {
                    this._serverInstanceTxt = ((AstServerInstanceTxt)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilityReplicatPrimary>())
                {
                    this._alterAvailabilityReplicatPrimary = ((AstAlterAvailabilityReplicatPrimary)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilitySecondaryRole>())
                {
                    this._alterAvailabilitySecondaryRole = ((AstAlterAvailabilitySecondaryRole)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilityPrimaryRole>())
                {
                    this._alterAvailabilityPrimaryRole = ((AstAlterAvailabilityPrimaryRole)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityReplicatModify(Position p, AstServerInstanceTxt serverInstanceTxt, AstAlterAvailabilityReplicatPrimary alterAvailabilityReplicatPrimary, AstAlterAvailabilitySecondaryRole alterAvailabilitySecondaryRole, AstAlterAvailabilityPrimaryRole alterAvailabilityPrimaryRole) : 
                base(p)
        {
            this._serverInstanceTxt = serverInstanceTxt;
            this._alterAvailabilityReplicatPrimary = alterAvailabilityReplicatPrimary;
            this._alterAvailabilitySecondaryRole = alterAvailabilitySecondaryRole;
            this._alterAvailabilityPrimaryRole = alterAvailabilityPrimaryRole;
        }
        
        public AstAlterAvailabilityReplicatModify(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerInstanceTxt>())
                {
                    this._serverInstanceTxt = ((AstServerInstanceTxt)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilityReplicatPrimary>())
                {
                    this._alterAvailabilityReplicatPrimary = ((AstAlterAvailabilityReplicatPrimary)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilitySecondaryRole>())
                {
                    this._alterAvailabilitySecondaryRole = ((AstAlterAvailabilitySecondaryRole)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilityPrimaryRole>())
                {
                    this._alterAvailabilityPrimaryRole = ((AstAlterAvailabilityPrimaryRole)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerInstanceTxt ServerInstanceTxt
        {
            get
            {
                return this._serverInstanceTxt;
            }
        }
        
        public virtual AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary
        {
            get
            {
                return this._alterAvailabilityReplicatPrimary;
            }
        }
        
        public virtual AstAlterAvailabilitySecondaryRole AlterAvailabilitySecondaryRole
        {
            get
            {
                return this._alterAvailabilitySecondaryRole;
            }
        }
        
        public virtual AstAlterAvailabilityPrimaryRole AlterAvailabilityPrimaryRole
        {
            get
            {
                return this._alterAvailabilityPrimaryRole;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityReplicatModify(this);
        }
        
        /// <summary>
        /// alter_availability_replicat_modify : 
        ///    MODIFY REPLICA ON server_instance_txt WITH ( alter_availability_replicat_primary ) 
        /// </summary>
        public static AstAlterAvailabilityReplicatModify AlterAvailabilityReplicatModify(AstServerInstanceTxt serverInstanceTxt, AstAlterAvailabilityReplicatPrimary alterAvailabilityReplicatPrimary)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(serverInstanceTxt);
            list.Add(alterAvailabilityReplicatPrimary);
            return new AstAlterAvailabilityReplicatModify(Position.Default, list);
        }
        
        /// <summary>
        /// alter_availability_replicat_modify : 
        ///    MODIFY REPLICA ON server_instance_txt SECONDARY_ROLE ( alter_availability_secondary_role ) 
        /// </summary>
        public static AstAlterAvailabilityReplicatModify AlterAvailabilityReplicatModify(AstServerInstanceTxt serverInstanceTxt, AstAlterAvailabilitySecondaryRole alterAvailabilitySecondaryRole)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(serverInstanceTxt);
            list.Add(alterAvailabilitySecondaryRole);
            return new AstAlterAvailabilityReplicatModify(Position.Default, list);
        }
        
        /// <summary>
        /// alter_availability_replicat_modify : 
        ///    MODIFY REPLICA ON server_instance_txt PRIMARY_ROLE ( alter_availability_primary_role ) 
        /// </summary>
        public static AstAlterAvailabilityReplicatModify AlterAvailabilityReplicatModify(AstServerInstanceTxt serverInstanceTxt, AstAlterAvailabilityPrimaryRole alterAvailabilityPrimaryRole)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(serverInstanceTxt);
            list.Add(alterAvailabilityPrimaryRole);
            return new AstAlterAvailabilityReplicatModify(Position.Default, list);
        }
    }
    
    /// <summary>
    /// routing_list
    /// 	 : string_list
    /// 	 | NONE
    /// </summary>
    public partial class AstRoutingList : AstRule
    {
        
        private AstStringList _stringList;
        
        public AstRoutingList(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringList>())
                {
                    this._stringList = ((AstStringList)(enumerator.Current));
                }
            }
        }
        
        public AstRoutingList(Position p, AstStringList stringList) : 
                base(p)
        {
            this._stringList = stringList;
        }
        
        public AstRoutingList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringList>())
                {
                    this._stringList = ((AstStringList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringList StringList
        {
            get
            {
                return this._stringList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRoutingList(this);
        }
        
        /// <summary>
        /// routing_list : 
        ///    string_list 
        /// </summary>
        public static AstRoutingList RoutingList(AstStringList stringList)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(stringList);
            return new AstRoutingList(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_availability_secondary_role
    /// 	 : allow_connections
    /// 	 | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  routingList = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstAlterAvailabilitySecondaryRole : AstRule
    {
        
        private AstAllowConnections _allowConnections;
        
        private AstStringtext _stringtext;
        
        public AstAlterAvailabilitySecondaryRole(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAllowConnections>())
                {
                    this._allowConnections = ((AstAllowConnections)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilitySecondaryRole(Position p, AstAllowConnections allowConnections, AstStringtext stringtext) : 
                base(p)
        {
            this._allowConnections = allowConnections;
            this._stringtext = stringtext;
        }
        
        public AstAlterAvailabilitySecondaryRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAllowConnections>())
                {
                    this._allowConnections = ((AstAllowConnections)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAllowConnections AllowConnections
        {
            get
            {
                return this._allowConnections;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilitySecondaryRole(this);
        }
        
        /// <summary>
        /// alter_availability_secondary_role : 
        ///    allow_connections 
        /// </summary>
        public static AstAlterAvailabilitySecondaryRole AlterAvailabilitySecondaryRole(AstAllowConnections allowConnections)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(allowConnections);
            return new AstAlterAvailabilitySecondaryRole(Position.Default, list);
        }
        
        /// <summary>
        /// alter_availability_secondary_role : 
        ///    READ_ONLY_ROUTING_LIST EQUAL ( routingList=stringtext ) 
        /// </summary>
        public static AstAlterAvailabilitySecondaryRole AlterAvailabilitySecondaryRole(AstStringtext routingList)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(routingList);
            return new AstAlterAvailabilitySecondaryRole(Position.Default, list);
        }
    }
    
    /// <summary>
    /// backup_priority
    /// 	 : BACKUP_PRIORITY  EQUAL  decimal
    /// </summary>
    public partial class AstBackupPriority : AstRule
    {
        
        private AstDecimal _decimal;
        
        public AstBackupPriority(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstBackupPriority(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstBackupPriority(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupPriority(this);
        }
        
        /// <summary>
        /// backup_priority : 
        ///    BACKUP_PRIORITY EQUAL decimal 
        /// </summary>
        public static AstBackupPriority BackupPriority(AstDecimal @decimal)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(@decimal);
            return new AstBackupPriority(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_availability_replicat_add
    /// 	 : ADD  REPLICA  ON  server_instance_txt  WITH  LR_BRACKET  (ENDPOINT_URL  EQUAL  stringtext)?  (COMMA?  availability_mode)?  (COMMA?  FAILOVER_MODE  EQUAL  auto_manual)?  (COMMA?  seeding_mode)?  (COMMA?  backup_priority)?  (COMMA?  PRIMARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  real_write_all  RR_BRACKET)?  (COMMA?  SECONDARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  READ_ONLY  RR_BRACKET)?  RR_BRACKET
    /// </summary>
    public partial class AstAlterAvailabilityReplicatAdd : AstRule
    {
        
        private AstServerInstanceTxt _serverInstanceTxt;
        
        private AstStringtext _stringtext;
        
        private AstAvailabilityMode _availabilityMode;
        
        private AstAutoManual _autoManual;
        
        private AstSeedingMode _seedingMode;
        
        private AstBackupPriority _backupPriority;
        
        private AstRealWriteAll _realWriteAll;
        
        public AstAlterAvailabilityReplicatAdd(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerInstanceTxt>())
                {
                    this._serverInstanceTxt = ((AstServerInstanceTxt)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAvailabilityMode>())
                {
                    this._availabilityMode = ((AstAvailabilityMode)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAutoManual>())
                {
                    this._autoManual = ((AstAutoManual)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSeedingMode>())
                {
                    this._seedingMode = ((AstSeedingMode)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupPriority>())
                {
                    this._backupPriority = ((AstBackupPriority)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRealWriteAll>())
                {
                    this._realWriteAll = ((AstRealWriteAll)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityReplicatAdd(Position p, AstServerInstanceTxt serverInstanceTxt, AstStringtext stringtext, AstAvailabilityMode availabilityMode, AstAutoManual autoManual, AstSeedingMode seedingMode, AstBackupPriority backupPriority, AstRealWriteAll realWriteAll) : 
                base(p)
        {
            this._serverInstanceTxt = serverInstanceTxt;
            this._stringtext = stringtext;
            this._availabilityMode = availabilityMode;
            this._autoManual = autoManual;
            this._seedingMode = seedingMode;
            this._backupPriority = backupPriority;
            this._realWriteAll = realWriteAll;
        }
        
        public AstAlterAvailabilityReplicatAdd(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerInstanceTxt>())
                {
                    this._serverInstanceTxt = ((AstServerInstanceTxt)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAvailabilityMode>())
                {
                    this._availabilityMode = ((AstAvailabilityMode)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAutoManual>())
                {
                    this._autoManual = ((AstAutoManual)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSeedingMode>())
                {
                    this._seedingMode = ((AstSeedingMode)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupPriority>())
                {
                    this._backupPriority = ((AstBackupPriority)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRealWriteAll>())
                {
                    this._realWriteAll = ((AstRealWriteAll)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerInstanceTxt ServerInstanceTxt
        {
            get
            {
                return this._serverInstanceTxt;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstAvailabilityMode AvailabilityMode
        {
            get
            {
                return this._availabilityMode;
            }
        }
        
        public virtual AstAutoManual AutoManual
        {
            get
            {
                return this._autoManual;
            }
        }
        
        public virtual AstSeedingMode SeedingMode
        {
            get
            {
                return this._seedingMode;
            }
        }
        
        public virtual AstBackupPriority BackupPriority
        {
            get
            {
                return this._backupPriority;
            }
        }
        
        public virtual AstRealWriteAll RealWriteAll
        {
            get
            {
                return this._realWriteAll;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityReplicatAdd(this);
        }
        
        /// <summary>
        /// alter_availability_replicat_add : 
        ///    ADD REPLICA ON server_instance_txt WITH ( ENDPOINT_URL EQUAL stringtext COMMA? availability_mode COMMA? FAILOVER_MODE EQUAL auto_manual COMMA? seeding_mode COMMA? backup_priority COMMA? PRIMARY_ROLE ( ALLOW_CONNECTIONS EQUAL real_write_all ) COMMA? SECONDARY_ROLE ( ALLOW_CONNECTIONS EQUAL READ_ONLY ) ) 
        /// </summary>
        public static AstAlterAvailabilityReplicatAdd AlterAvailabilityReplicatAdd(AstServerInstanceTxt serverInstanceTxt, AstStringtext stringtext, AstAvailabilityMode availabilityMode, AstAutoManual autoManual, AstSeedingMode seedingMode, AstBackupPriority backupPriority, AstRealWriteAll realWriteAll)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(serverInstanceTxt);
            list.Add(stringtext);
            list.Add(availabilityMode);
            list.Add(autoManual);
            list.Add(seedingMode);
            list.Add(backupPriority);
            list.Add(realWriteAll);
            return new AstAlterAvailabilityReplicatAdd(Position.Default, list);
        }
    }
    
    /// <summary>
    /// listener_url
    /// 	 : LISTENER_URL  EQUAL  stringtext
    /// </summary>
    public partial class AstListenerUrl : AstRule
    {
        
        private AstStringtext _stringtext;
        
        public AstListenerUrl(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstListenerUrl(Position p, AstStringtext stringtext) : 
                base(p)
        {
            this._stringtext = stringtext;
        }
        
        public AstListenerUrl(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitListenerUrl(this);
        }
        
        /// <summary>
        /// listener_url : 
        ///    LISTENER_URL EQUAL stringtext 
        /// </summary>
        public static AstListenerUrl ListenerUrl(AstStringtext stringtext)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(stringtext);
            return new AstListenerUrl(Position.Default, list);
        }
    }
    
    /// <summary>
    /// availability_mode
    /// 	 : AVAILABILITY_MODE  EQUAL  synch_asynch
    /// </summary>
    public partial class AstAvailabilityMode : AstRule
    {
        
        private AstSynchAsynch _synchAsynch;
        
        public AstAvailabilityMode(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSynchAsynch>())
                {
                    this._synchAsynch = ((AstSynchAsynch)(enumerator.Current));
                }
            }
        }
        
        public AstAvailabilityMode(Position p, AstSynchAsynch synchAsynch) : 
                base(p)
        {
            this._synchAsynch = synchAsynch;
        }
        
        public AstAvailabilityMode(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSynchAsynch>())
                {
                    this._synchAsynch = ((AstSynchAsynch)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSynchAsynch SynchAsynch
        {
            get
            {
                return this._synchAsynch;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAvailabilityMode(this);
        }
        
        /// <summary>
        /// availability_mode : 
        ///    AVAILABILITY_MODE EQUAL synch_asynch 
        /// </summary>
        public static AstAvailabilityMode AvailabilityMode(AstSynchAsynch synchAsynch)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(synchAsynch);
            return new AstAvailabilityMode(Position.Default, list);
        }
    }
    
    /// <summary>
    /// seeding_mode
    /// 	 : SEEDING_MODE  EQUAL  auto_manual
    /// </summary>
    public partial class AstSeedingMode : AstRule
    {
        
        private AstAutoManual _autoManual;
        
        public AstSeedingMode(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAutoManual>())
                {
                    this._autoManual = ((AstAutoManual)(enumerator.Current));
                }
            }
        }
        
        public AstSeedingMode(Position p, AstAutoManual autoManual) : 
                base(p)
        {
            this._autoManual = autoManual;
        }
        
        public AstSeedingMode(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAutoManual>())
                {
                    this._autoManual = ((AstAutoManual)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAutoManual AutoManual
        {
            get
            {
                return this._autoManual;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSeedingMode(this);
        }
        
        /// <summary>
        /// seeding_mode : 
        ///    SEEDING_MODE EQUAL auto_manual 
        /// </summary>
        public static AstSeedingMode SeedingMode(AstAutoManual autoManual)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(autoManual);
            return new AstSeedingMode(Position.Default, list);
        }
    }
    
    /// <summary>
    /// allow_connections
    /// 	 : ALLOW_CONNECTIONS  EQUAL  no_real_write_all
    /// </summary>
    public partial class AstAllowConnections : AstRule
    {
        
        private AstNoRealWriteAll _noRealWriteAll;
        
        public AstAllowConnections(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNoRealWriteAll>())
                {
                    this._noRealWriteAll = ((AstNoRealWriteAll)(enumerator.Current));
                }
            }
        }
        
        public AstAllowConnections(Position p, AstNoRealWriteAll noRealWriteAll) : 
                base(p)
        {
            this._noRealWriteAll = noRealWriteAll;
        }
        
        public AstAllowConnections(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNoRealWriteAll>())
                {
                    this._noRealWriteAll = ((AstNoRealWriteAll)(enumerator.Current));
                }
            }
        }
        
        public virtual AstNoRealWriteAll NoRealWriteAll
        {
            get
            {
                return this._noRealWriteAll;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAllowConnections(this);
        }
        
        /// <summary>
        /// allow_connections : 
        ///    ALLOW_CONNECTIONS EQUAL no_real_write_all 
        /// </summary>
        public static AstAllowConnections AllowConnections(AstNoRealWriteAll noRealWriteAll)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(noRealWriteAll);
            return new AstAllowConnections(Position.Default, list);
        }
    }
    
    /// <summary>
    /// server_instance_txt
    /// 	 : stringtext
    /// </summary>
    public partial class AstServerInstanceTxt : AstRule
    {
        
        private AstStringtext _stringtext;
        
        public AstServerInstanceTxt(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstServerInstanceTxt(Position p, AstStringtext stringtext) : 
                base(p)
        {
            this._stringtext = stringtext;
        }
        
        public AstServerInstanceTxt(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerInstanceTxt(this);
        }
        
        /// <summary>
        /// server_instance_txt : 
        ///    stringtext 
        /// </summary>
        public static AstServerInstanceTxt ServerInstanceTxt(AstStringtext stringtext)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(stringtext);
            return new AstServerInstanceTxt(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_or_alter_broker_priority
    /// 	 : create_alter  BROKER  PRIORITY  ConversationPriorityName = id_  FOR  CONVERSATION  SET  LR_BRACKET  broker_contract_name?  broker_local_service_name?  broker_remote_service_name?  broker_priority_level?  RR_BRACKET
    /// </summary>
    public partial class AstCreateOrAlterBrokerPriority : AstDdlClause
    {
        
        private AstCreateAlter _createAlter;
        
        private AstId _id;
        
        private AstBrokerContractName _brokerContractName;
        
        private AstBrokerLocalServiceName _brokerLocalServiceName;
        
        private AstBrokerRemoteServiceName _brokerRemoteServiceName;
        
        private AstBrokerPriorityLevel _brokerPriorityLevel;
        
        public AstCreateOrAlterBrokerPriority(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateAlter>())
                {
                    this._createAlter = ((AstCreateAlter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerContractName>())
                {
                    this._brokerContractName = ((AstBrokerContractName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerLocalServiceName>())
                {
                    this._brokerLocalServiceName = ((AstBrokerLocalServiceName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerRemoteServiceName>())
                {
                    this._brokerRemoteServiceName = ((AstBrokerRemoteServiceName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerPriorityLevel>())
                {
                    this._brokerPriorityLevel = ((AstBrokerPriorityLevel)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterBrokerPriority(Position p, AstCreateAlter createAlter, AstId id, AstBrokerContractName brokerContractName, AstBrokerLocalServiceName brokerLocalServiceName, AstBrokerRemoteServiceName brokerRemoteServiceName, AstBrokerPriorityLevel brokerPriorityLevel) : 
                base(p)
        {
            this._createAlter = createAlter;
            this._id = id;
            this._brokerContractName = brokerContractName;
            this._brokerLocalServiceName = brokerLocalServiceName;
            this._brokerRemoteServiceName = brokerRemoteServiceName;
            this._brokerPriorityLevel = brokerPriorityLevel;
        }
        
        public AstCreateOrAlterBrokerPriority(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateAlter>())
                {
                    this._createAlter = ((AstCreateAlter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerContractName>())
                {
                    this._brokerContractName = ((AstBrokerContractName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerLocalServiceName>())
                {
                    this._brokerLocalServiceName = ((AstBrokerLocalServiceName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerRemoteServiceName>())
                {
                    this._brokerRemoteServiceName = ((AstBrokerRemoteServiceName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerPriorityLevel>())
                {
                    this._brokerPriorityLevel = ((AstBrokerPriorityLevel)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCreateAlter CreateAlter
        {
            get
            {
                return this._createAlter;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstBrokerContractName BrokerContractName
        {
            get
            {
                return this._brokerContractName;
            }
        }
        
        public virtual AstBrokerLocalServiceName BrokerLocalServiceName
        {
            get
            {
                return this._brokerLocalServiceName;
            }
        }
        
        public virtual AstBrokerRemoteServiceName BrokerRemoteServiceName
        {
            get
            {
                return this._brokerRemoteServiceName;
            }
        }
        
        public virtual AstBrokerPriorityLevel BrokerPriorityLevel
        {
            get
            {
                return this._brokerPriorityLevel;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterBrokerPriority(this);
        }
        
        /// <summary>
        /// create_or_alter_broker_priority : 
        ///    create_alter BROKER PRIORITY ConversationPriorityName=id_ FOR CONVERSATION SET ( broker_contract_name? broker_local_service_name? broker_remote_service_name? broker_priority_level? ) 
        /// </summary>
        public static AstCreateOrAlterBrokerPriority CreateOrAlterBrokerPriority(AstCreateAlter createAlter, AstId conversationPriorityName, AstBrokerContractName? brokerContractName, AstBrokerLocalServiceName? brokerLocalServiceName, AstBrokerRemoteServiceName? brokerRemoteServiceName, AstBrokerPriorityLevel? brokerPriorityLevel)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(createAlter);
            list.Add(conversationPriorityName);
            list.Add(brokerContractName);
            list.Add(brokerLocalServiceName);
            list.Add(brokerRemoteServiceName);
            list.Add(brokerPriorityLevel);
            return new AstCreateOrAlterBrokerPriority(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_certificate
    /// 	 : ALTER  CERTIFICATE  certificate_id  (REMOVE  PRIVATE_KEY | WITH  PRIVATE  KEY  LR_BRACKET  private_keys  RR_BRACKET | WITH  ACTIVE  FOR  BEGIN_DIALOG  EQUAL  on_off)
    /// </summary>
    public partial class AstAlterCertificate : AstDdlClause
    {
        
        private AstCertificateId _certificateId;
        
        private AstPrivateKeys _privateKeys;
        
        private AstOnOff _onOff;
        
        public AstAlterCertificate(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPrivateKeys>())
                {
                    this._privateKeys = ((AstPrivateKeys)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstAlterCertificate(Position p, AstCertificateId certificateId, AstPrivateKeys privateKeys, AstOnOff onOff) : 
                base(p)
        {
            this._certificateId = certificateId;
            this._privateKeys = privateKeys;
            this._onOff = onOff;
        }
        
        public AstAlterCertificate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPrivateKeys>())
                {
                    this._privateKeys = ((AstPrivateKeys)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateId CertificateId
        {
            get
            {
                return this._certificateId;
            }
        }
        
        public virtual AstPrivateKeys PrivateKeys
        {
            get
            {
                return this._privateKeys;
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterCertificate(this);
        }
        
        /// <summary>
        /// alter_certificate : 
        ///    ALTER CERTIFICATE certificate_id REMOVE PRIVATE_KEY 
        /// </summary>
        public static AstAlterCertificate AlterCertificate(AstCertificateId certificateId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(certificateId);
            return new AstAlterCertificate(Position.Default, list);
        }
        
        /// <summary>
        /// alter_certificate : 
        ///    ALTER CERTIFICATE certificate_id WITH PRIVATE KEY ( private_keys ) 
        /// </summary>
        public static AstAlterCertificate AlterCertificate(AstCertificateId certificateId, AstPrivateKeys privateKeys)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(certificateId);
            list.Add(privateKeys);
            return new AstAlterCertificate(Position.Default, list);
        }
        
        /// <summary>
        /// alter_certificate : 
        ///    ALTER CERTIFICATE certificate_id WITH ACTIVE FOR BEGIN_DIALOG EQUAL on_off 
        /// </summary>
        public static AstAlterCertificate AlterCertificate(AstCertificateId certificateId, AstOnOff onOff)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(certificateId);
            list.Add(onOff);
            return new AstAlterCertificate(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_column_encryption_key
    /// 	 : ALTER  COLUMN  ENCRYPTION  KEY  column_encryption_key_id  add_drop  VALUE  LR_BRACKET  COLUMN_MASTER_KEY  EQUAL  column_master_key_name = id_  (COMMA  ALGORITHM  EQUAL  algorithm_name = stringtext  COMMA  ENCRYPTED_VALUE  EQUAL  binary_)?  RR_BRACKET
    /// </summary>
    public partial class AstAlterColumnEncryptionKey : AstDdlClause
    {
        
        private AstColumnEncryptionKeyId _columnEncryptionKeyId;
        
        private AstAddDrop _addDrop;
        
        private AstId _id;
        
        private AstStringtext _stringtext;
        
        private AstBinary _binary;
        
        public AstAlterColumnEncryptionKey(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKeyId>())
                {
                    this._columnEncryptionKeyId = ((AstColumnEncryptionKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinary>())
                {
                    this._binary = ((AstBinary)(enumerator.Current));
                }
            }
        }
        
        public AstAlterColumnEncryptionKey(Position p, AstColumnEncryptionKeyId columnEncryptionKeyId, AstAddDrop addDrop, AstId id, AstStringtext stringtext, AstBinary binary) : 
                base(p)
        {
            this._columnEncryptionKeyId = columnEncryptionKeyId;
            this._addDrop = addDrop;
            this._id = id;
            this._stringtext = stringtext;
            this._binary = binary;
        }
        
        public AstAlterColumnEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKeyId>())
                {
                    this._columnEncryptionKeyId = ((AstColumnEncryptionKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinary>())
                {
                    this._binary = ((AstBinary)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnEncryptionKeyId ColumnEncryptionKeyId
        {
            get
            {
                return this._columnEncryptionKeyId;
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstBinary Binary
        {
            get
            {
                return this._binary;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterColumnEncryptionKey(this);
        }
        
        /// <summary>
        /// alter_column_encryption_key : 
        ///    ALTER COLUMN ENCRYPTION KEY column_encryption_key_id add_drop VALUE ( COLUMN_MASTER_KEY EQUAL column_master_key_name=id_ , ALGORITHM EQUAL algorithm_name=stringtext , ENCRYPTED_VALUE EQUAL binary_ ) 
        /// </summary>
        public static AstAlterColumnEncryptionKey AlterColumnEncryptionKey(AstColumnEncryptionKeyId columnEncryptionKeyId, AstAddDrop addDrop, AstId columnMasterKeyName, AstStringtext algorithmName, AstBinary binary)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(columnEncryptionKeyId);
            list.Add(addDrop);
            list.Add(columnMasterKeyName);
            list.Add(algorithmName);
            list.Add(binary);
            return new AstAlterColumnEncryptionKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_column_encryption_key
    /// 	 : CREATE  COLUMN  ENCRYPTION  KEY  column_encryption_key_id  WITH  VALUES  (LR_BRACKET  COMMA?  COLUMN_MASTER_KEY  EQUAL  column_master_key_name = id_  COMMA  ALGORITHM  EQUAL  algorithm_name = stringtext  COMMA  ENCRYPTED_VALUE  EQUAL  encrypted_value = binary_  RR_BRACKET  COMMA?)+
    /// </summary>
    public partial class AstCreateColumnEncryptionKey : AstDdlClause
    {
        
        private AstColumnEncryptionKeyId _columnEncryptionKeyId;
        
        private AstId _id;
        
        private AstStringtext _stringtext;
        
        private AstBinary _binary;
        
        public AstCreateColumnEncryptionKey(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKeyId>())
                {
                    this._columnEncryptionKeyId = ((AstColumnEncryptionKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinary>())
                {
                    this._binary = ((AstBinary)(enumerator.Current));
                }
            }
        }
        
        public AstCreateColumnEncryptionKey(Position p, AstColumnEncryptionKeyId columnEncryptionKeyId, AstId id, AstStringtext stringtext, AstBinary binary) : 
                base(p)
        {
            this._columnEncryptionKeyId = columnEncryptionKeyId;
            this._id = id;
            this._stringtext = stringtext;
            this._binary = binary;
        }
        
        public AstCreateColumnEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKeyId>())
                {
                    this._columnEncryptionKeyId = ((AstColumnEncryptionKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinary>())
                {
                    this._binary = ((AstBinary)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnEncryptionKeyId ColumnEncryptionKeyId
        {
            get
            {
                return this._columnEncryptionKeyId;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstBinary Binary
        {
            get
            {
                return this._binary;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnEncryptionKey(this);
        }
        
        /// <summary>
        /// create_column_encryption_key : 
        ///    CREATE COLUMN ENCRYPTION KEY column_encryption_key_id WITH VALUES ( ,? COLUMN_MASTER_KEY EQUAL column_master_key_name=id_ , ALGORITHM EQUAL algorithm_name=stringtext , ENCRYPTED_VALUE EQUAL encrypted_value=binary_ ) ,? 
        /// </summary>
        public static AstCreateColumnEncryptionKey CreateColumnEncryptionKey(AstColumnEncryptionKeyId columnEncryptionKeyId, AstId columnMasterKeyName, AstStringtext algorithmName, AstBinary encryptedValue)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(columnEncryptionKeyId);
            list.Add(columnMasterKeyName);
            list.Add(algorithmName);
            list.Add(encryptedValue);
            return new AstCreateColumnEncryptionKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_certificate
    /// 	 : DROP  CERTIFICATE  certificate_id
    /// </summary>
    public partial class AstDropCertificate : AstDdlClause
    {
        
        private AstCertificateId _certificateId;
        
        public AstDropCertificate(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
            }
        }
        
        public AstDropCertificate(Position p, AstCertificateId certificateId) : 
                base(p)
        {
            this._certificateId = certificateId;
        }
        
        public AstDropCertificate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateId CertificateId
        {
            get
            {
                return this._certificateId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropCertificate(this);
        }
        
        /// <summary>
        /// drop_certificate : 
        ///    DROP CERTIFICATE certificate_id 
        /// </summary>
        public static AstDropCertificate DropCertificate(AstCertificateId certificateId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(certificateId);
            return new AstDropCertificate(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_column_encryption_key
    /// 	 : DROP  COLUMN  ENCRYPTION  KEY  encryptor_id
    /// </summary>
    public partial class AstDropColumnEncryptionKey : AstDdlClause
    {
        
        private AstEncryptorId _encryptorId;
        
        public AstDropColumnEncryptionKey(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptorId>())
                {
                    this._encryptorId = ((AstEncryptorId)(enumerator.Current));
                }
            }
        }
        
        public AstDropColumnEncryptionKey(Position p, AstEncryptorId encryptorId) : 
                base(p)
        {
            this._encryptorId = encryptorId;
        }
        
        public AstDropColumnEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptorId>())
                {
                    this._encryptorId = ((AstEncryptorId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEncryptorId EncryptorId
        {
            get
            {
                return this._encryptorId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropColumnEncryptionKey(this);
        }
        
        /// <summary>
        /// drop_column_encryption_key : 
        ///    DROP COLUMN ENCRYPTION KEY encryptor_id 
        /// </summary>
        public static AstDropColumnEncryptionKey DropColumnEncryptionKey(AstEncryptorId encryptorId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(encryptorId);
            return new AstDropColumnEncryptionKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_column_master_key
    /// 	 : DROP  COLUMN  MASTER  KEY  master_key
    /// </summary>
    public partial class AstDropColumnMasterKey : AstDdlClause
    {
        
        private AstMasterKey _masterKey;
        
        public AstDropColumnMasterKey(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMasterKey>())
                {
                    this._masterKey = ((AstMasterKey)(enumerator.Current));
                }
            }
        }
        
        public AstDropColumnMasterKey(Position p, AstMasterKey masterKey) : 
                base(p)
        {
            this._masterKey = masterKey;
        }
        
        public AstDropColumnMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMasterKey>())
                {
                    this._masterKey = ((AstMasterKey)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMasterKey MasterKey
        {
            get
            {
                return this._masterKey;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropColumnMasterKey(this);
        }
        
        /// <summary>
        /// drop_column_master_key : 
        ///    DROP COLUMN MASTER KEY master_key 
        /// </summary>
        public static AstDropColumnMasterKey DropColumnMasterKey(AstMasterKey masterKey)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(masterKey);
            return new AstDropColumnMasterKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_credential
    /// 	 : DROP  CREDENTIAL  credential_id
    /// </summary>
    public partial class AstDropCredential : AstDdlClause
    {
        
        private AstCredentialId _credentialId;
        
        public AstDropCredential(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public AstDropCredential(Position p, AstCredentialId credentialId) : 
                base(p)
        {
            this._credentialId = credentialId;
        }
        
        public AstDropCredential(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialId CredentialId
        {
            get
            {
                return this._credentialId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropCredential(this);
        }
        
        /// <summary>
        /// drop_credential : 
        ///    DROP CREDENTIAL credential_id 
        /// </summary>
        public static AstDropCredential DropCredential(AstCredentialId credentialId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(credentialId);
            return new AstDropCredential(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_cryptograhic_provider
    /// 	 : DROP  CRYPTOGRAPHIC  PROVIDER  provider_id
    /// </summary>
    public partial class AstDropCryptograhicProvider : AstDdlClause
    {
        
        private AstProviderId _providerId;
        
        public AstDropCryptograhicProvider(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderId>())
                {
                    this._providerId = ((AstProviderId)(enumerator.Current));
                }
            }
        }
        
        public AstDropCryptograhicProvider(Position p, AstProviderId providerId) : 
                base(p)
        {
            this._providerId = providerId;
        }
        
        public AstDropCryptograhicProvider(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderId>())
                {
                    this._providerId = ((AstProviderId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProviderId ProviderId
        {
            get
            {
                return this._providerId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropCryptograhicProvider(this);
        }
        
        /// <summary>
        /// drop_cryptograhic_provider : 
        ///    DROP CRYPTOGRAPHIC PROVIDER provider_id 
        /// </summary>
        public static AstDropCryptograhicProvider DropCryptograhicProvider(AstProviderId providerId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(providerId);
            return new AstDropCryptograhicProvider(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_database_audit_specification
    /// 	 : DROP  DATABASE  AUDIT  SPECIFICATION  audit_id
    /// </summary>
    public partial class AstDropDatabaseAuditSpecification : AstDdlClause
    {
        
        private AstAuditId _auditId;
        
        public AstDropDatabaseAuditSpecification(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public AstDropDatabaseAuditSpecification(Position p, AstAuditId auditId) : 
                base(p)
        {
            this._auditId = auditId;
        }
        
        public AstDropDatabaseAuditSpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabaseAuditSpecification(this);
        }
        
        /// <summary>
        /// drop_database_audit_specification : 
        ///    DROP DATABASE AUDIT SPECIFICATION audit_id 
        /// </summary>
        public static AstDropDatabaseAuditSpecification DropDatabaseAuditSpecification(AstAuditId auditId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(auditId);
            return new AstDropDatabaseAuditSpecification(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_database_scoped_credential
    /// 	 : DROP  DATABASE  SCOPED  CREDENTIAL  credential_id
    /// </summary>
    public partial class AstDropDatabaseScopedCredential : AstDdlClause
    {
        
        private AstCredentialId _credentialId;
        
        public AstDropDatabaseScopedCredential(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public AstDropDatabaseScopedCredential(Position p, AstCredentialId credentialId) : 
                base(p)
        {
            this._credentialId = credentialId;
        }
        
        public AstDropDatabaseScopedCredential(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialId CredentialId
        {
            get
            {
                return this._credentialId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabaseScopedCredential(this);
        }
        
        /// <summary>
        /// drop_database_scoped_credential : 
        ///    DROP DATABASE SCOPED CREDENTIAL credential_id 
        /// </summary>
        public static AstDropDatabaseScopedCredential DropDatabaseScopedCredential(AstCredentialId credentialId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(credentialId);
            return new AstDropDatabaseScopedCredential(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_endpoint
    /// 	 : DROP  ENDPOINT  endpoint_id
    /// </summary>
    public partial class AstDropEndpoint : AstDdlClause
    {
        
        private AstEndpointId _endpointId;
        
        public AstDropEndpoint(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointId>())
                {
                    this._endpointId = ((AstEndpointId)(enumerator.Current));
                }
            }
        }
        
        public AstDropEndpoint(Position p, AstEndpointId endpointId) : 
                base(p)
        {
            this._endpointId = endpointId;
        }
        
        public AstDropEndpoint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointId>())
                {
                    this._endpointId = ((AstEndpointId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEndpointId EndpointId
        {
            get
            {
                return this._endpointId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropEndpoint(this);
        }
        
        /// <summary>
        /// drop_endpoint : 
        ///    DROP ENDPOINT endpoint_id 
        /// </summary>
        public static AstDropEndpoint DropEndpoint(AstEndpointId endpointId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(endpointId);
            return new AstDropEndpoint(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_external_data_source
    /// 	 : DROP  EXTERNAL  DATA  SOURCE  external_data_source_id
    /// </summary>
    public partial class AstDropExternalDataSource : AstDdlClause
    {
        
        private AstExternalDataSourceId _externalDataSourceId;
        
        public AstDropExternalDataSource(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalDataSourceId>())
                {
                    this._externalDataSourceId = ((AstExternalDataSourceId)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalDataSource(Position p, AstExternalDataSourceId externalDataSourceId) : 
                base(p)
        {
            this._externalDataSourceId = externalDataSourceId;
        }
        
        public AstDropExternalDataSource(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalDataSourceId>())
                {
                    this._externalDataSourceId = ((AstExternalDataSourceId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExternalDataSourceId ExternalDataSourceId
        {
            get
            {
                return this._externalDataSourceId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalDataSource(this);
        }
        
        /// <summary>
        /// drop_external_data_source : 
        ///    DROP EXTERNAL DATA SOURCE external_data_source_id 
        /// </summary>
        public static AstDropExternalDataSource DropExternalDataSource(AstExternalDataSourceId externalDataSourceId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(externalDataSourceId);
            return new AstDropExternalDataSource(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_external_file_format
    /// 	 : DROP  EXTERNAL  FILE  FORMAT  external_file_format_id
    /// </summary>
    public partial class AstDropExternalFileFormat : AstDdlClause
    {
        
        private AstExternalFileFormatId _externalFileFormatId;
        
        public AstDropExternalFileFormat(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalFileFormatId>())
                {
                    this._externalFileFormatId = ((AstExternalFileFormatId)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalFileFormat(Position p, AstExternalFileFormatId externalFileFormatId) : 
                base(p)
        {
            this._externalFileFormatId = externalFileFormatId;
        }
        
        public AstDropExternalFileFormat(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalFileFormatId>())
                {
                    this._externalFileFormatId = ((AstExternalFileFormatId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExternalFileFormatId ExternalFileFormatId
        {
            get
            {
                return this._externalFileFormatId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalFileFormat(this);
        }
        
        /// <summary>
        /// drop_external_file_format : 
        ///    DROP EXTERNAL FILE FORMAT external_file_format_id 
        /// </summary>
        public static AstDropExternalFileFormat DropExternalFileFormat(AstExternalFileFormatId externalFileFormatId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(externalFileFormatId);
            return new AstDropExternalFileFormat(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_external_library
    /// 	 : DROP  EXTERNAL  LIBRARY  library_id  (AUTHORIZATION  owner_id)?
    /// </summary>
    public partial class AstDropExternalLibrary : AstDdlClause
    {
        
        private AstLibraryId _libraryId;
        
        private AstOwnerId _ownerId;
        
        public AstDropExternalLibrary(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryId>())
                {
                    this._libraryId = ((AstLibraryId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalLibrary(Position p, AstLibraryId libraryId, AstOwnerId ownerId) : 
                base(p)
        {
            this._libraryId = libraryId;
            this._ownerId = ownerId;
        }
        
        public AstDropExternalLibrary(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryId>())
                {
                    this._libraryId = ((AstLibraryId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLibraryId LibraryId
        {
            get
            {
                return this._libraryId;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalLibrary(this);
        }
        
        /// <summary>
        /// drop_external_library : 
        ///    DROP EXTERNAL LIBRARY library_id AUTHORIZATION owner_id 
        /// </summary>
        public static AstDropExternalLibrary DropExternalLibrary(AstLibraryId libraryId, AstOwnerId ownerId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(libraryId);
            list.Add(ownerId);
            return new AstDropExternalLibrary(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_external_resource_pool
    /// 	 : DROP  EXTERNAL  RESOURCE  POOL  pool_id
    /// </summary>
    public partial class AstDropExternalResourcePool : AstDdlClause
    {
        
        private AstPoolId _poolId;
        
        public AstDropExternalResourcePool(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalResourcePool(Position p, AstPoolId poolId) : 
                base(p)
        {
            this._poolId = poolId;
        }
        
        public AstDropExternalResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolId PoolId
        {
            get
            {
                return this._poolId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalResourcePool(this);
        }
        
        /// <summary>
        /// drop_external_resource_pool : 
        ///    DROP EXTERNAL RESOURCE POOL pool_id 
        /// </summary>
        public static AstDropExternalResourcePool DropExternalResourcePool(AstPoolId poolId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(poolId);
            return new AstDropExternalResourcePool(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_external_table
    /// 	 : DROP  EXTERNAL  TABLE  database_schema_table_ref
    /// </summary>
    public partial class AstDropExternalTable : AstDdlClause
    {
        
        private AstDatabaseSchemaTableRef _databaseSchemaTableRef;
        
        public AstDropExternalTable(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalTable(Position p, AstDatabaseSchemaTableRef databaseSchemaTableRef) : 
                base(p)
        {
            this._databaseSchemaTableRef = databaseSchemaTableRef;
        }
        
        public AstDropExternalTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseSchemaTableRef DatabaseSchemaTableRef
        {
            get
            {
                return this._databaseSchemaTableRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalTable(this);
        }
        
        /// <summary>
        /// drop_external_table : 
        ///    DROP EXTERNAL TABLE database_schema_table_ref 
        /// </summary>
        public static AstDropExternalTable DropExternalTable(AstDatabaseSchemaTableRef databaseSchemaTableRef)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(databaseSchemaTableRef);
            return new AstDropExternalTable(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_event_notifications
    /// 	 : DROP  EVENT  NOTIFICATION  notification_ids  ON  event_notification_on
    /// </summary>
    public partial class AstDropEventNotifications : AstDdlClause
    {
        
        private AstNotificationIds _notificationIds;
        
        private AstEventNotificationOn _eventNotificationOn;
        
        public AstDropEventNotifications(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNotificationIds>())
                {
                    this._notificationIds = ((AstNotificationIds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventNotificationOn>())
                {
                    this._eventNotificationOn = ((AstEventNotificationOn)(enumerator.Current));
                }
            }
        }
        
        public AstDropEventNotifications(Position p, AstNotificationIds notificationIds, AstEventNotificationOn eventNotificationOn) : 
                base(p)
        {
            this._notificationIds = notificationIds;
            this._eventNotificationOn = eventNotificationOn;
        }
        
        public AstDropEventNotifications(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNotificationIds>())
                {
                    this._notificationIds = ((AstNotificationIds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventNotificationOn>())
                {
                    this._eventNotificationOn = ((AstEventNotificationOn)(enumerator.Current));
                }
            }
        }
        
        public virtual AstNotificationIds NotificationIds
        {
            get
            {
                return this._notificationIds;
            }
        }
        
        public virtual AstEventNotificationOn EventNotificationOn
        {
            get
            {
                return this._eventNotificationOn;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropEventNotifications(this);
        }
        
        /// <summary>
        /// drop_event_notifications : 
        ///    DROP EVENT NOTIFICATION notification_ids ON event_notification_on 
        /// </summary>
        public static AstDropEventNotifications DropEventNotifications(AstNotificationIds notificationIds, AstEventNotificationOn eventNotificationOn)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(notificationIds);
            list.Add(eventNotificationOn);
            return new AstDropEventNotifications(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_event_session
    /// 	 : DROP  EVENT  SESSION  event_session_id  ON  SERVER
    /// </summary>
    public partial class AstDropEventSession : AstDdlClause
    {
        
        private AstEventSessionId _eventSessionId;
        
        public AstDropEventSession(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionId>())
                {
                    this._eventSessionId = ((AstEventSessionId)(enumerator.Current));
                }
            }
        }
        
        public AstDropEventSession(Position p, AstEventSessionId eventSessionId) : 
                base(p)
        {
            this._eventSessionId = eventSessionId;
        }
        
        public AstDropEventSession(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionId>())
                {
                    this._eventSessionId = ((AstEventSessionId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventSessionId EventSessionId
        {
            get
            {
                return this._eventSessionId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropEventSession(this);
        }
        
        /// <summary>
        /// drop_event_session : 
        ///    DROP EVENT SESSION event_session_id ON SERVER 
        /// </summary>
        public static AstDropEventSession DropEventSession(AstEventSessionId eventSessionId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(eventSessionId);
            return new AstDropEventSession(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_fulltext_catalog
    /// 	 : DROP  FULLTEXT  CATALOG  catalog_id
    /// </summary>
    public partial class AstDropFulltextCatalog : AstDdlClause
    {
        
        private AstCatalogId _catalogId;
        
        public AstDropFulltextCatalog(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogId>())
                {
                    this._catalogId = ((AstCatalogId)(enumerator.Current));
                }
            }
        }
        
        public AstDropFulltextCatalog(Position p, AstCatalogId catalogId) : 
                base(p)
        {
            this._catalogId = catalogId;
        }
        
        public AstDropFulltextCatalog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogId>())
                {
                    this._catalogId = ((AstCatalogId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCatalogId CatalogId
        {
            get
            {
                return this._catalogId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFulltextCatalog(this);
        }
        
        /// <summary>
        /// drop_fulltext_catalog : 
        ///    DROP FULLTEXT CATALOG catalog_id 
        /// </summary>
        public static AstDropFulltextCatalog DropFulltextCatalog(AstCatalogId catalogId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(catalogId);
            return new AstDropFulltextCatalog(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_fulltext_index
    /// 	 : DROP  FULLTEXT  INDEX  ON  database_schema_table_ref
    /// </summary>
    public partial class AstDropFulltextIndex : AstDdlClause
    {
        
        private AstDatabaseSchemaTableRef _databaseSchemaTableRef;
        
        public AstDropFulltextIndex(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropFulltextIndex(Position p, AstDatabaseSchemaTableRef databaseSchemaTableRef) : 
                base(p)
        {
            this._databaseSchemaTableRef = databaseSchemaTableRef;
        }
        
        public AstDropFulltextIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseSchemaTableRef DatabaseSchemaTableRef
        {
            get
            {
                return this._databaseSchemaTableRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFulltextIndex(this);
        }
        
        /// <summary>
        /// drop_fulltext_index : 
        ///    DROP FULLTEXT INDEX ON database_schema_table_ref 
        /// </summary>
        public static AstDropFulltextIndex DropFulltextIndex(AstDatabaseSchemaTableRef databaseSchemaTableRef)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(databaseSchemaTableRef);
            return new AstDropFulltextIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_fulltext_stoplist
    /// 	 : DROP  FULLTEXT  STOPLIST  stoplist_id
    /// </summary>
    public partial class AstDropFulltextStoplist : AstDdlClause
    {
        
        private AstStoplistId _stoplistId;
        
        public AstDropFulltextStoplist(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
            }
        }
        
        public AstDropFulltextStoplist(Position p, AstStoplistId stoplistId) : 
                base(p)
        {
            this._stoplistId = stoplistId;
        }
        
        public AstDropFulltextStoplist(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStoplistId StoplistId
        {
            get
            {
                return this._stoplistId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFulltextStoplist(this);
        }
        
        /// <summary>
        /// drop_fulltext_stoplist : 
        ///    DROP FULLTEXT STOPLIST stoplist_id 
        /// </summary>
        public static AstDropFulltextStoplist DropFulltextStoplist(AstStoplistId stoplistId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(stoplistId);
            return new AstDropFulltextStoplist(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_login
    /// 	 : DROP  LOGIN  login_id
    /// </summary>
    public partial class AstDropLogin : AstDdlClause
    {
        
        private AstLoginId _loginId;
        
        public AstDropLogin(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
            }
        }
        
        public AstDropLogin(Position p, AstLoginId loginId) : 
                base(p)
        {
            this._loginId = loginId;
        }
        
        public AstDropLogin(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropLogin(this);
        }
        
        /// <summary>
        /// drop_login : 
        ///    DROP LOGIN login_id 
        /// </summary>
        public static AstDropLogin DropLogin(AstLoginId loginId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(loginId);
            return new AstDropLogin(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_message_type
    /// 	 : DROP  MESSAGE  TYPE  message_type_id
    /// </summary>
    public partial class AstDropMessageType : AstDdlClause
    {
        
        private AstMessageTypeId _messageTypeId;
        
        public AstDropMessageType(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeId>())
                {
                    this._messageTypeId = ((AstMessageTypeId)(enumerator.Current));
                }
            }
        }
        
        public AstDropMessageType(Position p, AstMessageTypeId messageTypeId) : 
                base(p)
        {
            this._messageTypeId = messageTypeId;
        }
        
        public AstDropMessageType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeId>())
                {
                    this._messageTypeId = ((AstMessageTypeId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMessageTypeId MessageTypeId
        {
            get
            {
                return this._messageTypeId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropMessageType(this);
        }
        
        /// <summary>
        /// drop_message_type : 
        ///    DROP MESSAGE TYPE message_type_id 
        /// </summary>
        public static AstDropMessageType DropMessageType(AstMessageTypeId messageTypeId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(messageTypeId);
            return new AstDropMessageType(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_partition_function
    /// 	 : DROP  PARTITION  FUNCTION  partition_function_id
    /// </summary>
    public partial class AstDropPartitionFunction : AstDdlClause
    {
        
        private AstPartitionFunctionId _partitionFunctionId;
        
        public AstDropPartitionFunction(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
            }
        }
        
        public AstDropPartitionFunction(Position p, AstPartitionFunctionId partitionFunctionId) : 
                base(p)
        {
            this._partitionFunctionId = partitionFunctionId;
        }
        
        public AstDropPartitionFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionFunctionId PartitionFunctionId
        {
            get
            {
                return this._partitionFunctionId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropPartitionFunction(this);
        }
        
        /// <summary>
        /// drop_partition_function : 
        ///    DROP PARTITION FUNCTION partition_function_id 
        /// </summary>
        public static AstDropPartitionFunction DropPartitionFunction(AstPartitionFunctionId partitionFunctionId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(partitionFunctionId);
            return new AstDropPartitionFunction(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_partition_scheme
    /// 	 : DROP  PARTITION  SCHEME  partition_scheme_id
    /// </summary>
    public partial class AstDropPartitionScheme : AstDdlClause
    {
        
        private AstPartitionSchemeId _partitionSchemeId;
        
        public AstDropPartitionScheme(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeId>())
                {
                    this._partitionSchemeId = ((AstPartitionSchemeId)(enumerator.Current));
                }
            }
        }
        
        public AstDropPartitionScheme(Position p, AstPartitionSchemeId partitionSchemeId) : 
                base(p)
        {
            this._partitionSchemeId = partitionSchemeId;
        }
        
        public AstDropPartitionScheme(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeId>())
                {
                    this._partitionSchemeId = ((AstPartitionSchemeId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionSchemeId PartitionSchemeId
        {
            get
            {
                return this._partitionSchemeId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropPartitionScheme(this);
        }
        
        /// <summary>
        /// drop_partition_scheme : 
        ///    DROP PARTITION SCHEME partition_scheme_id 
        /// </summary>
        public static AstDropPartitionScheme DropPartitionScheme(AstPartitionSchemeId partitionSchemeId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(partitionSchemeId);
            return new AstDropPartitionScheme(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_queue
    /// 	 : DROP  QUEUE  database_schema_queue_ref
    /// </summary>
    public partial class AstDropQueue : AstDdlClause
    {
        
        private AstDatabaseSchemaQueueRef _databaseSchemaQueueRef;
        
        public AstDropQueue(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaQueueRef>())
                {
                    this._databaseSchemaQueueRef = ((AstDatabaseSchemaQueueRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropQueue(Position p, AstDatabaseSchemaQueueRef databaseSchemaQueueRef) : 
                base(p)
        {
            this._databaseSchemaQueueRef = databaseSchemaQueueRef;
        }
        
        public AstDropQueue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaQueueRef>())
                {
                    this._databaseSchemaQueueRef = ((AstDatabaseSchemaQueueRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseSchemaQueueRef DatabaseSchemaQueueRef
        {
            get
            {
                return this._databaseSchemaQueueRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropQueue(this);
        }
        
        /// <summary>
        /// drop_queue : 
        ///    DROP QUEUE database_schema_queue_ref 
        /// </summary>
        public static AstDropQueue DropQueue(AstDatabaseSchemaQueueRef databaseSchemaQueueRef)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(databaseSchemaQueueRef);
            return new AstDropQueue(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_remote_service_binding
    /// 	 : DROP  REMOTE  SERVICE  BINDING  binding_id
    /// </summary>
    public partial class AstDropRemoteServiceBinding : AstDdlClause
    {
        
        private AstBindingId _bindingId;
        
        public AstDropRemoteServiceBinding(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingId>())
                {
                    this._bindingId = ((AstBindingId)(enumerator.Current));
                }
            }
        }
        
        public AstDropRemoteServiceBinding(Position p, AstBindingId bindingId) : 
                base(p)
        {
            this._bindingId = bindingId;
        }
        
        public AstDropRemoteServiceBinding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingId>())
                {
                    this._bindingId = ((AstBindingId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBindingId BindingId
        {
            get
            {
                return this._bindingId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRemoteServiceBinding(this);
        }
        
        /// <summary>
        /// drop_remote_service_binding : 
        ///    DROP REMOTE SERVICE BINDING binding_id 
        /// </summary>
        public static AstDropRemoteServiceBinding DropRemoteServiceBinding(AstBindingId bindingId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(bindingId);
            return new AstDropRemoteServiceBinding(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_resource_pool
    /// 	 : DROP  RESOURCE  POOL  pool_id
    /// </summary>
    public partial class AstDropResourcePool : AstDdlClause
    {
        
        private AstPoolId _poolId;
        
        public AstDropResourcePool(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
            }
        }
        
        public AstDropResourcePool(Position p, AstPoolId poolId) : 
                base(p)
        {
            this._poolId = poolId;
        }
        
        public AstDropResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolId PoolId
        {
            get
            {
                return this._poolId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropResourcePool(this);
        }
        
        /// <summary>
        /// drop_resource_pool : 
        ///    DROP RESOURCE POOL pool_id 
        /// </summary>
        public static AstDropResourcePool DropResourcePool(AstPoolId poolId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(poolId);
            return new AstDropResourcePool(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_db_role
    /// 	 : DROP  ROLE  (IF  EXISTS)?  role_id
    /// </summary>
    public partial class AstDropDbRole : AstDdlClause
    {
        
        private AstRoleId _roleId;
        
        public AstDropDbRole(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public AstDropDbRole(Position p, AstRoleId roleId) : 
                base(p)
        {
            this._roleId = roleId;
        }
        
        public AstDropDbRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleId RoleId
        {
            get
            {
                return this._roleId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDbRole(this);
        }
        
        /// <summary>
        /// drop_db_role : 
        ///    DROP ROLE IF EXISTS role_id 
        /// </summary>
        public static AstDropDbRole DropDbRole(AstRoleId roleId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(roleId);
            return new AstDropDbRole(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_route
    /// 	 : DROP  ROUTE  route_id
    /// </summary>
    public partial class AstDropRoute : AstDdlClause
    {
        
        private AstRouteId _routeId;
        
        public AstDropRoute(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteId>())
                {
                    this._routeId = ((AstRouteId)(enumerator.Current));
                }
            }
        }
        
        public AstDropRoute(Position p, AstRouteId routeId) : 
                base(p)
        {
            this._routeId = routeId;
        }
        
        public AstDropRoute(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteId>())
                {
                    this._routeId = ((AstRouteId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRouteId RouteId
        {
            get
            {
                return this._routeId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRoute(this);
        }
        
        /// <summary>
        /// drop_route : 
        ///    DROP ROUTE route_id 
        /// </summary>
        public static AstDropRoute DropRoute(AstRouteId routeId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(routeId);
            return new AstDropRoute(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_schema
    /// 	 : DROP  SCHEMA  (IF  EXISTS)?  schema_id
    /// </summary>
    public partial class AstDropSchema : AstDdlClause
    {
        
        private AstSchemaId _schemaId;
        
        public AstDropSchema(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
            }
        }
        
        public AstDropSchema(Position p, AstSchemaId schemaId) : 
                base(p)
        {
            this._schemaId = schemaId;
        }
        
        public AstDropSchema(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaId SchemaId
        {
            get
            {
                return this._schemaId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSchema(this);
        }
        
        /// <summary>
        /// drop_schema : 
        ///    DROP SCHEMA IF EXISTS schema_id 
        /// </summary>
        public static AstDropSchema DropSchema(AstSchemaId schemaId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(schemaId);
            return new AstDropSchema(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_search_property_list
    /// 	 : DROP  SEARCH  PROPERTY  LIST  property_list_id
    /// </summary>
    public partial class AstDropSearchPropertyList : AstDdlClause
    {
        
        private AstPropertyListId _propertyListId;
        
        public AstDropSearchPropertyList(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPropertyListId>())
                {
                    this._propertyListId = ((AstPropertyListId)(enumerator.Current));
                }
            }
        }
        
        public AstDropSearchPropertyList(Position p, AstPropertyListId propertyListId) : 
                base(p)
        {
            this._propertyListId = propertyListId;
        }
        
        public AstDropSearchPropertyList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPropertyListId>())
                {
                    this._propertyListId = ((AstPropertyListId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPropertyListId PropertyListId
        {
            get
            {
                return this._propertyListId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSearchPropertyList(this);
        }
        
        /// <summary>
        /// drop_search_property_list : 
        ///    DROP SEARCH PROPERTY LIST property_list_id 
        /// </summary>
        public static AstDropSearchPropertyList DropSearchPropertyList(AstPropertyListId propertyListId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(propertyListId);
            return new AstDropSearchPropertyList(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_security_policy
    /// 	 : DROP  SECURITY  POLICY  (IF  EXISTS)?  schema_security_policy_ref
    /// </summary>
    public partial class AstDropSecurityPolicy : AstDdlClause
    {
        
        private AstSchemaSecurityPolicyRef _schemaSecurityPolicyRef;
        
        public AstDropSecurityPolicy(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSecurityPolicyRef>())
                {
                    this._schemaSecurityPolicyRef = ((AstSchemaSecurityPolicyRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropSecurityPolicy(Position p, AstSchemaSecurityPolicyRef schemaSecurityPolicyRef) : 
                base(p)
        {
            this._schemaSecurityPolicyRef = schemaSecurityPolicyRef;
        }
        
        public AstDropSecurityPolicy(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSecurityPolicyRef>())
                {
                    this._schemaSecurityPolicyRef = ((AstSchemaSecurityPolicyRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSecurityPolicyRef SchemaSecurityPolicyRef
        {
            get
            {
                return this._schemaSecurityPolicyRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSecurityPolicy(this);
        }
        
        /// <summary>
        /// drop_security_policy : 
        ///    DROP SECURITY POLICY IF EXISTS schema_security_policy_ref 
        /// </summary>
        public static AstDropSecurityPolicy DropSecurityPolicy(AstSchemaSecurityPolicyRef schemaSecurityPolicyRef)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(schemaSecurityPolicyRef);
            return new AstDropSecurityPolicy(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_server_audit
    /// 	 : DROP  SERVER  AUDIT  audit_id
    /// </summary>
    public partial class AstDropServerAudit : AstDdlClause
    {
        
        private AstAuditId _auditId;
        
        public AstDropServerAudit(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public AstDropServerAudit(Position p, AstAuditId auditId) : 
                base(p)
        {
            this._auditId = auditId;
        }
        
        public AstDropServerAudit(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropServerAudit(this);
        }
        
        /// <summary>
        /// drop_server_audit : 
        ///    DROP SERVER AUDIT audit_id 
        /// </summary>
        public static AstDropServerAudit DropServerAudit(AstAuditId auditId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(auditId);
            return new AstDropServerAudit(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_server_audit_specification
    /// 	 : DROP  SERVER  AUDIT  SPECIFICATION  audit_id
    /// </summary>
    public partial class AstDropServerAuditSpecification : AstDdlClause
    {
        
        private AstAuditId _auditId;
        
        public AstDropServerAuditSpecification(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public AstDropServerAuditSpecification(Position p, AstAuditId auditId) : 
                base(p)
        {
            this._auditId = auditId;
        }
        
        public AstDropServerAuditSpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropServerAuditSpecification(this);
        }
        
        /// <summary>
        /// drop_server_audit_specification : 
        ///    DROP SERVER AUDIT SPECIFICATION audit_id 
        /// </summary>
        public static AstDropServerAuditSpecification DropServerAuditSpecification(AstAuditId auditId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(auditId);
            return new AstDropServerAuditSpecification(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_server_role
    /// 	 : DROP  SERVER  ROLE  role_id
    /// </summary>
    public partial class AstDropServerRole : AstDdlClause
    {
        
        private AstRoleId _roleId;
        
        public AstDropServerRole(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public AstDropServerRole(Position p, AstRoleId roleId) : 
                base(p)
        {
            this._roleId = roleId;
        }
        
        public AstDropServerRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleId RoleId
        {
            get
            {
                return this._roleId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropServerRole(this);
        }
        
        /// <summary>
        /// drop_server_role : 
        ///    DROP SERVER ROLE role_id 
        /// </summary>
        public static AstDropServerRole DropServerRole(AstRoleId roleId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(roleId);
            return new AstDropServerRole(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_service
    /// 	 : DROP  SERVICE  service_id
    /// </summary>
    public partial class AstDropService : AstDdlClause
    {
        
        private AstServiceId _serviceId;
        
        public AstDropService(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServiceId>())
                {
                    this._serviceId = ((AstServiceId)(enumerator.Current));
                }
            }
        }
        
        public AstDropService(Position p, AstServiceId serviceId) : 
                base(p)
        {
            this._serviceId = serviceId;
        }
        
        public AstDropService(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServiceId>())
                {
                    this._serviceId = ((AstServiceId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServiceId ServiceId
        {
            get
            {
                return this._serviceId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropService(this);
        }
        
        /// <summary>
        /// drop_service : 
        ///    DROP SERVICE service_id 
        /// </summary>
        public static AstDropService DropService(AstServiceId serviceId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(serviceId);
            return new AstDropService(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_signature
    /// 	 : DROP  (COUNTER)?  SIGNATURE  FROM  schema_module_ref  BY  (COMMA?  CERTIFICATE  certificate_id | COMMA?  ASYMMETRIC  KEY  asym_key_id)+
    /// </summary>
    public partial class AstDropSignature : AstDdlClause
    {
        
        private AstSchemaModuleRef _schemaModuleRef;
        
        private AstCertificateId _certificateId;
        
        private AstAsymKeyId _asymKeyId;
        
        public AstDropSignature(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaModuleRef>())
                {
                    this._schemaModuleRef = ((AstSchemaModuleRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymKeyId>())
                {
                    this._asymKeyId = ((AstAsymKeyId)(enumerator.Current));
                }
            }
        }
        
        public AstDropSignature(Position p, AstSchemaModuleRef schemaModuleRef, AstCertificateId certificateId, AstAsymKeyId asymKeyId) : 
                base(p)
        {
            this._schemaModuleRef = schemaModuleRef;
            this._certificateId = certificateId;
            this._asymKeyId = asymKeyId;
        }
        
        public AstDropSignature(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaModuleRef>())
                {
                    this._schemaModuleRef = ((AstSchemaModuleRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymKeyId>())
                {
                    this._asymKeyId = ((AstAsymKeyId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaModuleRef SchemaModuleRef
        {
            get
            {
                return this._schemaModuleRef;
            }
        }
        
        public virtual AstCertificateId CertificateId
        {
            get
            {
                return this._certificateId;
            }
        }
        
        public virtual AstAsymKeyId AsymKeyId
        {
            get
            {
                return this._asymKeyId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSignature(this);
        }
        
        /// <summary>
        /// drop_signature : 
        ///    DROP COUNTER()? SIGNATURE FROM schema_module_ref BY COMMA? CERTIFICATE certificate_id 
        /// </summary>
        public static AstDropSignature DropSignature(AstSchemaModuleRef schemaModuleRef, AstCertificateId certificateId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(schemaModuleRef);
            list.Add(certificateId);
            return new AstDropSignature(Position.Default, list);
        }
        
        /// <summary>
        /// drop_signature : 
        ///    DROP COUNTER()? SIGNATURE FROM schema_module_ref BY COMMA? ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public static AstDropSignature DropSignature(AstSchemaModuleRef schemaModuleRef, AstAsymKeyId asymKeyId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(schemaModuleRef);
            list.Add(asymKeyId);
            return new AstDropSignature(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_statistics_id_azure_dw_and_pdw
    /// 	 : DROP  STATISTICS  schema_object_statistics_ref
    /// </summary>
    public partial class AstDropStatisticsIdAzureDwAndPdw : AstDdlClause
    {
        
        private AstSchemaObjectStatisticsRef _schemaObjectStatisticsRef;
        
        public AstDropStatisticsIdAzureDwAndPdw(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaObjectStatisticsRef>())
                {
                    this._schemaObjectStatisticsRef = ((AstSchemaObjectStatisticsRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropStatisticsIdAzureDwAndPdw(Position p, AstSchemaObjectStatisticsRef schemaObjectStatisticsRef) : 
                base(p)
        {
            this._schemaObjectStatisticsRef = schemaObjectStatisticsRef;
        }
        
        public AstDropStatisticsIdAzureDwAndPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaObjectStatisticsRef>())
                {
                    this._schemaObjectStatisticsRef = ((AstSchemaObjectStatisticsRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaObjectStatisticsRef SchemaObjectStatisticsRef
        {
            get
            {
                return this._schemaObjectStatisticsRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropStatisticsIdAzureDwAndPdw(this);
        }
        
        /// <summary>
        /// drop_statistics_id_azure_dw_and_pdw : 
        ///    DROP STATISTICS schema_object_statistics_ref 
        /// </summary>
        public static AstDropStatisticsIdAzureDwAndPdw DropStatisticsIdAzureDwAndPdw(AstSchemaObjectStatisticsRef schemaObjectStatisticsRef)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(schemaObjectStatisticsRef);
            return new AstDropStatisticsIdAzureDwAndPdw(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_symmetric_key
    /// 	 : DROP  SYMMETRIC  KEY  symmetric_key_id  (REMOVE  PROVIDER  KEY)?
    /// </summary>
    public partial class AstDropSymmetricKey : AstDdlClause
    {
        
        private AstSymmetricKeyId _symmetricKeyId;
        
        public AstDropSymmetricKey(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyId>())
                {
                    this._symmetricKeyId = ((AstSymmetricKeyId)(enumerator.Current));
                }
            }
        }
        
        public AstDropSymmetricKey(Position p, AstSymmetricKeyId symmetricKeyId) : 
                base(p)
        {
            this._symmetricKeyId = symmetricKeyId;
        }
        
        public AstDropSymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyId>())
                {
                    this._symmetricKeyId = ((AstSymmetricKeyId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSymmetricKeyId SymmetricKeyId
        {
            get
            {
                return this._symmetricKeyId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSymmetricKey(this);
        }
        
        /// <summary>
        /// drop_symmetric_key : 
        ///    DROP SYMMETRIC KEY symmetric_key_id REMOVE PROVIDER KEY 
        /// </summary>
        public static AstDropSymmetricKey DropSymmetricKey(AstSymmetricKeyId symmetricKeyId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(symmetricKeyId);
            return new AstDropSymmetricKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_synonym
    /// 	 : DROP  SYNONYM  (IF  EXISTS)?  schema_synonym_ref
    /// </summary>
    public partial class AstDropSynonym : AstDdlClause
    {
        
        private AstSchemaSynonymRef _schemaSynonymRef;
        
        public AstDropSynonym(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSynonymRef>())
                {
                    this._schemaSynonymRef = ((AstSchemaSynonymRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropSynonym(Position p, AstSchemaSynonymRef schemaSynonymRef) : 
                base(p)
        {
            this._schemaSynonymRef = schemaSynonymRef;
        }
        
        public AstDropSynonym(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSynonymRef>())
                {
                    this._schemaSynonymRef = ((AstSchemaSynonymRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSynonymRef SchemaSynonymRef
        {
            get
            {
                return this._schemaSynonymRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSynonym(this);
        }
        
        /// <summary>
        /// drop_synonym : 
        ///    DROP SYNONYM IF EXISTS schema_synonym_ref 
        /// </summary>
        public static AstDropSynonym DropSynonym(AstSchemaSynonymRef schemaSynonymRef)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(schemaSynonymRef);
            return new AstDropSynonym(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_user
    /// 	 : DROP  USER  (IF  EXISTS)?  user_id
    /// </summary>
    public partial class AstDropUser : AstDdlClause
    {
        
        private AstUserId _userId;
        
        public AstDropUser(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
            }
        }
        
        public AstDropUser(Position p, AstUserId userId) : 
                base(p)
        {
            this._userId = userId;
        }
        
        public AstDropUser(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUserId UserId
        {
            get
            {
                return this._userId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropUser(this);
        }
        
        /// <summary>
        /// drop_user : 
        ///    DROP USER IF EXISTS user_id 
        /// </summary>
        public static AstDropUser DropUser(AstUserId userId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(userId);
            return new AstDropUser(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_workload_group
    /// 	 : DROP  WORKLOAD  GROUP  group_id
    /// </summary>
    public partial class AstDropWorkloadGroup : AstDdlClause
    {
        
        private AstGroupId _groupId;
        
        public AstDropWorkloadGroup(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstDropWorkloadGroup(Position p, AstGroupId groupId) : 
                base(p)
        {
            this._groupId = groupId;
        }
        
        public AstDropWorkloadGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGroupId GroupId
        {
            get
            {
                return this._groupId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropWorkloadGroup(this);
        }
        
        /// <summary>
        /// drop_workload_group : 
        ///    DROP WORKLOAD GROUP group_id 
        /// </summary>
        public static AstDropWorkloadGroup DropWorkloadGroup(AstGroupId groupId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(groupId);
            return new AstDropWorkloadGroup(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_xml_schema_collection
    /// 	 : DROP  XML  SCHEMA  COLLECTION  schema_sql_identifier_id
    /// </summary>
    public partial class AstDropXmlSchemaCollection : AstDdlClause
    {
        
        private AstSchemaSqlIdentifierId _schemaSqlIdentifierId;
        
        public AstDropXmlSchemaCollection(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSqlIdentifierId>())
                {
                    this._schemaSqlIdentifierId = ((AstSchemaSqlIdentifierId)(enumerator.Current));
                }
            }
        }
        
        public AstDropXmlSchemaCollection(Position p, AstSchemaSqlIdentifierId schemaSqlIdentifierId) : 
                base(p)
        {
            this._schemaSqlIdentifierId = schemaSqlIdentifierId;
        }
        
        public AstDropXmlSchemaCollection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSqlIdentifierId>())
                {
                    this._schemaSqlIdentifierId = ((AstSchemaSqlIdentifierId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSqlIdentifierId SchemaSqlIdentifierId
        {
            get
            {
                return this._schemaSqlIdentifierId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropXmlSchemaCollection(this);
        }
        
        /// <summary>
        /// drop_xml_schema_collection : 
        ///    DROP XML SCHEMA COLLECTION schema_sql_identifier_id 
        /// </summary>
        public static AstDropXmlSchemaCollection DropXmlSchemaCollection(AstSchemaSqlIdentifierId schemaSqlIdentifierId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(schemaSqlIdentifierId);
            return new AstDropXmlSchemaCollection(Position.Default, list);
        }
    }
    
    /// <summary>
    /// disable_trigger
    /// 	 : DISABLE  trigger_setting
    /// </summary>
    public partial class AstDisableTrigger : AstDdlClause
    {
        
        private AstTriggerSetting _triggerSetting;
        
        public AstDisableTrigger(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTriggerSetting>())
                {
                    this._triggerSetting = ((AstTriggerSetting)(enumerator.Current));
                }
            }
        }
        
        public AstDisableTrigger(Position p, AstTriggerSetting triggerSetting) : 
                base(p)
        {
            this._triggerSetting = triggerSetting;
        }
        
        public AstDisableTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTriggerSetting>())
                {
                    this._triggerSetting = ((AstTriggerSetting)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTriggerSetting TriggerSetting
        {
            get
            {
                return this._triggerSetting;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDisableTrigger(this);
        }
        
        /// <summary>
        /// disable_trigger : 
        ///    DISABLE trigger_setting 
        /// </summary>
        public static AstDisableTrigger DisableTrigger(AstTriggerSetting triggerSetting)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(triggerSetting);
            return new AstDisableTrigger(Position.Default, list);
        }
    }
    
    /// <summary>
    /// enable_trigger
    /// 	 : ENABLE  trigger_setting
    /// </summary>
    public partial class AstEnableTrigger : AstDdlClause
    {
        
        private AstTriggerSetting _triggerSetting;
        
        public AstEnableTrigger(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTriggerSetting>())
                {
                    this._triggerSetting = ((AstTriggerSetting)(enumerator.Current));
                }
            }
        }
        
        public AstEnableTrigger(Position p, AstTriggerSetting triggerSetting) : 
                base(p)
        {
            this._triggerSetting = triggerSetting;
        }
        
        public AstEnableTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTriggerSetting>())
                {
                    this._triggerSetting = ((AstTriggerSetting)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTriggerSetting TriggerSetting
        {
            get
            {
                return this._triggerSetting;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEnableTrigger(this);
        }
        
        /// <summary>
        /// enable_trigger : 
        ///    ENABLE trigger_setting 
        /// </summary>
        public static AstEnableTrigger EnableTrigger(AstTriggerSetting triggerSetting)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(triggerSetting);
            return new AstEnableTrigger(Position.Default, list);
        }
    }
    
    /// <summary>
    /// trigger_setting
    /// 	 : TRIGGER  trigger_name  ON  trigger_target
    /// </summary>
    public partial class AstTriggerSetting : AstRule
    {
        
        private AstTriggerName _triggerName;
        
        private AstTriggerTarget _triggerTarget;
        
        public AstTriggerSetting(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTriggerName>())
                {
                    this._triggerName = ((AstTriggerName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTriggerTarget>())
                {
                    this._triggerTarget = ((AstTriggerTarget)(enumerator.Current));
                }
            }
        }
        
        public AstTriggerSetting(Position p, AstTriggerName triggerName, AstTriggerTarget triggerTarget) : 
                base(p)
        {
            this._triggerName = triggerName;
            this._triggerTarget = triggerTarget;
        }
        
        public AstTriggerSetting(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTriggerName>())
                {
                    this._triggerName = ((AstTriggerName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTriggerTarget>())
                {
                    this._triggerTarget = ((AstTriggerTarget)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTriggerName TriggerName
        {
            get
            {
                return this._triggerName;
            }
        }
        
        public virtual AstTriggerTarget TriggerTarget
        {
            get
            {
                return this._triggerTarget;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTriggerSetting(this);
        }
        
        /// <summary>
        /// trigger_setting : 
        ///    TRIGGER trigger_name ON trigger_target 
        /// </summary>
        public static AstTriggerSetting TriggerSetting(AstTriggerName triggerName, AstTriggerTarget triggerTarget)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(triggerName);
            list.Add(triggerTarget);
            return new AstTriggerSetting(Position.Default, list);
        }
    }
    
    /// <summary>
    /// lock_table
    /// 	 : LOCK  TABLE  full_table_ref  IN  share_exclusive  MODE  (WAIT  seconds = decimal | NOWAIT)?  SEMI?
    /// </summary>
    public partial class AstLockTable : AstDdlClause
    {
        
        private AstFullTableRef _fullTableRef;
        
        private AstShareExclusive _shareExclusive;
        
        private AstDecimal _decimal;
        
        public AstLockTable(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstShareExclusive>())
                {
                    this._shareExclusive = ((AstShareExclusive)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstLockTable(Position p, AstFullTableRef fullTableRef, AstShareExclusive shareExclusive, AstDecimal @decimal) : 
                base(p)
        {
            this._fullTableRef = fullTableRef;
            this._shareExclusive = shareExclusive;
            this._decimal = @decimal;
        }
        
        public AstLockTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstShareExclusive>())
                {
                    this._shareExclusive = ((AstShareExclusive)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstShareExclusive ShareExclusive
        {
            get
            {
                return this._shareExclusive;
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLockTable(this);
        }
        
        /// <summary>
        /// lock_table : 
        ///    LOCK TABLE full_table_ref IN share_exclusive MODE WAIT seconds=decimal SEMI? 
        /// </summary>
        public static AstLockTable LockTable(AstFullTableRef fullTableRef, AstShareExclusive shareExclusive, AstDecimal seconds)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            list.Add(shareExclusive);
            list.Add(seconds);
            return new AstLockTable(Position.Default, list);
        }
        
        /// <summary>
        /// lock_table : 
        ///    LOCK TABLE full_table_ref IN share_exclusive MODE NOWAIT SEMI? 
        /// </summary>
        public static AstLockTable LockTable(AstFullTableRef fullTableRef, AstShareExclusive shareExclusive)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            list.Add(shareExclusive);
            return new AstLockTable(Position.Default, list);
        }
    }
    
    /// <summary>
    /// truncate_table
    /// 	 : TRUNCATE  TABLE  full_table_ref  (WITH  LR_BRACKET  PARTITIONS  LR_BRACKET  decimal_range  RR_BRACKET  decimals?)?
    /// </summary>
    public partial class AstTruncateTable : AstDdlClause
    {
        
        private AstFullTableRef _fullTableRef;
        
        private AstDecimalRange _decimalRange;
        
        private AstDecimals _decimals;
        
        public AstTruncateTable(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalRange>())
                {
                    this._decimalRange = ((AstDecimalRange)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimals>())
                {
                    this._decimals = ((AstDecimals)(enumerator.Current));
                }
            }
        }
        
        public AstTruncateTable(Position p, AstFullTableRef fullTableRef, AstDecimalRange decimalRange, AstDecimals decimals) : 
                base(p)
        {
            this._fullTableRef = fullTableRef;
            this._decimalRange = decimalRange;
            this._decimals = decimals;
        }
        
        public AstTruncateTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalRange>())
                {
                    this._decimalRange = ((AstDecimalRange)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimals>())
                {
                    this._decimals = ((AstDecimals)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstDecimalRange DecimalRange
        {
            get
            {
                return this._decimalRange;
            }
        }
        
        public virtual AstDecimals Decimals
        {
            get
            {
                return this._decimals;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTruncateTable(this);
        }
        
        /// <summary>
        /// truncate_table : 
        ///    TRUNCATE TABLE full_table_ref WITH ( PARTITIONS ( decimal_range ) decimals? 
        /// </summary>
        public static AstTruncateTable TruncateTable(AstFullTableRef fullTableRef, AstDecimalRange decimalRange, AstDecimals? decimals)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            list.Add(decimalRange);
            list.Add(decimals);
            return new AstTruncateTable(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_credential
    /// 	 : ALTER  CREDENTIAL  credential_id  WITH  IDENTITY  EQUAL  identity_name = stringtext  (COMMA  SECRET  EQUAL  secret = stringtext)?
    /// </summary>
    public partial class AstAlterCredential : AstDdlClause
    {
        
        private AstCredentialId _credentialId;
        
        private AstStringtext _stringtext;
        
        public AstAlterCredential(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstAlterCredential(Position p, AstCredentialId credentialId, AstStringtext stringtext) : 
                base(p)
        {
            this._credentialId = credentialId;
            this._stringtext = stringtext;
        }
        
        public AstAlterCredential(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialId CredentialId
        {
            get
            {
                return this._credentialId;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterCredential(this);
        }
        
        /// <summary>
        /// alter_credential : 
        ///    ALTER CREDENTIAL credential_id WITH IDENTITY EQUAL identity_name=stringtext , SECRET EQUAL secret=stringtext 
        /// </summary>
        public static AstAlterCredential AlterCredential(AstCredentialId credentialId, AstStringtext identityName, AstStringtext secret)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(credentialId);
            list.Add(identityName);
            list.Add(secret);
            return new AstAlterCredential(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_credential
    /// 	 : CREATE  CREDENTIAL  credential_id  WITH  IDENTITY  EQUAL  identity_name = stringtext  (COMMA  SECRET  EQUAL  secret = stringtext)?  (FOR  CRYPTOGRAPHIC  PROVIDER  cryptographic_provider_id)?
    /// </summary>
    public partial class AstCreateCredential : AstDdlClause
    {
        
        private AstCredentialId _credentialId;
        
        private AstStringtext _stringtext;
        
        private AstCryptographicProviderId _cryptographicProviderId;
        
        public AstCreateCredential(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCryptographicProviderId>())
                {
                    this._cryptographicProviderId = ((AstCryptographicProviderId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateCredential(Position p, AstCredentialId credentialId, AstStringtext stringtext, AstCryptographicProviderId cryptographicProviderId) : 
                base(p)
        {
            this._credentialId = credentialId;
            this._stringtext = stringtext;
            this._cryptographicProviderId = cryptographicProviderId;
        }
        
        public AstCreateCredential(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCryptographicProviderId>())
                {
                    this._cryptographicProviderId = ((AstCryptographicProviderId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialId CredentialId
        {
            get
            {
                return this._credentialId;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstCryptographicProviderId CryptographicProviderId
        {
            get
            {
                return this._cryptographicProviderId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateCredential(this);
        }
        
        /// <summary>
        /// create_credential : 
        ///    CREATE CREDENTIAL credential_id WITH IDENTITY EQUAL identity_name=stringtext , SECRET EQUAL secret=stringtext FOR CRYPTOGRAPHIC PROVIDER cryptographic_provider_id 
        /// </summary>
        public static AstCreateCredential CreateCredential(AstCredentialId credentialId, AstStringtext identityName, AstStringtext secret, AstCryptographicProviderId cryptographicProviderId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(credentialId);
            list.Add(identityName);
            list.Add(secret);
            list.Add(cryptographicProviderId);
            return new AstCreateCredential(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_cryptographic_provider
    /// 	 : ALTER  CRYPTOGRAPHIC  PROVIDER  provider_id  (FROM  FILE  EQUAL  crypto_provider_ddl_file = stringtext)?  enable_disable?
    /// </summary>
    public partial class AstAlterCryptographicProvider : AstDdlClause
    {
        
        private AstProviderId _providerId;
        
        private AstStringtext _stringtext;
        
        private AstEnableDisable _enableDisable;
        
        public AstAlterCryptographicProvider(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderId>())
                {
                    this._providerId = ((AstProviderId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEnableDisable>())
                {
                    this._enableDisable = ((AstEnableDisable)(enumerator.Current));
                }
            }
        }
        
        public AstAlterCryptographicProvider(Position p, AstProviderId providerId, AstStringtext stringtext, AstEnableDisable enableDisable) : 
                base(p)
        {
            this._providerId = providerId;
            this._stringtext = stringtext;
            this._enableDisable = enableDisable;
        }
        
        public AstAlterCryptographicProvider(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderId>())
                {
                    this._providerId = ((AstProviderId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEnableDisable>())
                {
                    this._enableDisable = ((AstEnableDisable)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProviderId ProviderId
        {
            get
            {
                return this._providerId;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstEnableDisable EnableDisable
        {
            get
            {
                return this._enableDisable;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterCryptographicProvider(this);
        }
        
        /// <summary>
        /// alter_cryptographic_provider : 
        ///    ALTER CRYPTOGRAPHIC PROVIDER provider_id FROM FILE EQUAL crypto_provider_ddl_file=stringtext enable_disable? 
        /// </summary>
        public static AstAlterCryptographicProvider AlterCryptographicProvider(AstProviderId providerId, AstStringtext cryptoProviderDdlFile, AstEnableDisable? enableDisable)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(providerId);
            list.Add(cryptoProviderDdlFile);
            list.Add(enableDisable);
            return new AstAlterCryptographicProvider(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_cryptographic_provider
    /// 	 : CREATE  CRYPTOGRAPHIC  PROVIDER  provider_id  FROM  FILE  EQUAL  path_of_DLL = stringtext
    /// </summary>
    public partial class AstCreateCryptographicProvider : AstDdlClause
    {
        
        private AstProviderId _providerId;
        
        private AstStringtext _stringtext;
        
        public AstCreateCryptographicProvider(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderId>())
                {
                    this._providerId = ((AstProviderId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstCreateCryptographicProvider(Position p, AstProviderId providerId, AstStringtext stringtext) : 
                base(p)
        {
            this._providerId = providerId;
            this._stringtext = stringtext;
        }
        
        public AstCreateCryptographicProvider(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderId>())
                {
                    this._providerId = ((AstProviderId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProviderId ProviderId
        {
            get
            {
                return this._providerId;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateCryptographicProvider(this);
        }
        
        /// <summary>
        /// create_cryptographic_provider : 
        ///    CREATE CRYPTOGRAPHIC PROVIDER provider_id FROM FILE EQUAL path_of_DLL=stringtext 
        /// </summary>
        public static AstCreateCryptographicProvider CreateCryptographicProvider(AstProviderId providerId, AstStringtext pathOfDLL)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(providerId);
            list.Add(pathOfDLL);
            return new AstCreateCryptographicProvider(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_event_notification
    /// 	 : CREATE  EVENT  NOTIFICATION  event_notification_id  ON  event_notification_on  (WITH  FAN_IN)?  FOR  (COMMA?  event_type_or_group_id)+  TO  SERVICE  broker_service = stringtext  COMMA  broker_service_specifier_or_current_database = stringtext
    /// </summary>
    public partial class AstCreateEventNotification : AstDdlClause
    {
        
        private AstEventNotificationId _eventNotificationId;
        
        private AstEventNotificationOn _eventNotificationOn;
        
        private AstEventTypeOrGroupId _eventTypeOrGroupId;
        
        private AstStringtext _stringtext;
        
        public AstCreateEventNotification(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventNotificationId>())
                {
                    this._eventNotificationId = ((AstEventNotificationId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventNotificationOn>())
                {
                    this._eventNotificationOn = ((AstEventNotificationOn)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventTypeOrGroupId>())
                {
                    this._eventTypeOrGroupId = ((AstEventTypeOrGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstCreateEventNotification(Position p, AstEventNotificationId eventNotificationId, AstEventNotificationOn eventNotificationOn, AstEventTypeOrGroupId eventTypeOrGroupId, AstStringtext stringtext) : 
                base(p)
        {
            this._eventNotificationId = eventNotificationId;
            this._eventNotificationOn = eventNotificationOn;
            this._eventTypeOrGroupId = eventTypeOrGroupId;
            this._stringtext = stringtext;
        }
        
        public AstCreateEventNotification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventNotificationId>())
                {
                    this._eventNotificationId = ((AstEventNotificationId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventNotificationOn>())
                {
                    this._eventNotificationOn = ((AstEventNotificationOn)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventTypeOrGroupId>())
                {
                    this._eventTypeOrGroupId = ((AstEventTypeOrGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventNotificationId EventNotificationId
        {
            get
            {
                return this._eventNotificationId;
            }
        }
        
        public virtual AstEventNotificationOn EventNotificationOn
        {
            get
            {
                return this._eventNotificationOn;
            }
        }
        
        public virtual AstEventTypeOrGroupId EventTypeOrGroupId
        {
            get
            {
                return this._eventTypeOrGroupId;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateEventNotification(this);
        }
        
        /// <summary>
        /// create_event_notification : 
        ///    CREATE EVENT NOTIFICATION event_notification_id ON event_notification_on WITH FAN_IN FOR ,? event_type_or_group_id TO SERVICE broker_service=stringtext , broker_service_specifier_or_current_database=stringtext 
        /// </summary>
        public static AstCreateEventNotification CreateEventNotification(AstEventNotificationId eventNotificationId, AstEventNotificationOn eventNotificationOn, AstEventTypeOrGroupId eventTypeOrGroupId, AstStringtext brokerService, AstStringtext brokerServiceSpecifierOrCurrentDatabase)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(eventNotificationId);
            list.Add(eventNotificationOn);
            list.Add(eventTypeOrGroupId);
            list.Add(brokerService);
            list.Add(brokerServiceSpecifierOrCurrentDatabase);
            return new AstCreateEventNotification(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session
    /// 	 : create_alter  EVENT  SESSION  event_session_id  ON  SERVER  create_or_alter_event_session_add_events?  create_or_alter_event_session_del_events?  create_or_alter_event_session_add_targets?  create_or_alter_event_session_del_targets?  create_or_alter_event_session_with?  (STATE  EQUAL  start_stop)?
    /// </summary>
    public partial class AstCreateOrAlterEventSession : AstDdlClause
    {
        
        private AstCreateAlter _createAlter;
        
        private AstEventSessionId _eventSessionId;
        
        private AstCreateOrAlterEventSessionAddEvents _createOrAlterEventSessionAddEvents;
        
        private AstCreateOrAlterEventSessionDelEvents _createOrAlterEventSessionDelEvents;
        
        private AstCreateOrAlterEventSessionAddTargets _createOrAlterEventSessionAddTargets;
        
        private AstCreateOrAlterEventSessionDelTargets _createOrAlterEventSessionDelTargets;
        
        private AstCreateOrAlterEventSessionWith _createOrAlterEventSessionWith;
        
        private AstStartStop _startStop;
        
        public AstCreateOrAlterEventSession(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateAlter>())
                {
                    this._createAlter = ((AstCreateAlter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventSessionId>())
                {
                    this._eventSessionId = ((AstEventSessionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionAddEvents>())
                {
                    this._createOrAlterEventSessionAddEvents = ((AstCreateOrAlterEventSessionAddEvents)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionDelEvents>())
                {
                    this._createOrAlterEventSessionDelEvents = ((AstCreateOrAlterEventSessionDelEvents)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionAddTargets>())
                {
                    this._createOrAlterEventSessionAddTargets = ((AstCreateOrAlterEventSessionAddTargets)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionDelTargets>())
                {
                    this._createOrAlterEventSessionDelTargets = ((AstCreateOrAlterEventSessionDelTargets)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionWith>())
                {
                    this._createOrAlterEventSessionWith = ((AstCreateOrAlterEventSessionWith)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStartStop>())
                {
                    this._startStop = ((AstStartStop)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterEventSession(Position p, AstCreateAlter createAlter, AstEventSessionId eventSessionId, AstCreateOrAlterEventSessionAddEvents createOrAlterEventSessionAddEvents, AstCreateOrAlterEventSessionDelEvents createOrAlterEventSessionDelEvents, AstCreateOrAlterEventSessionAddTargets createOrAlterEventSessionAddTargets, AstCreateOrAlterEventSessionDelTargets createOrAlterEventSessionDelTargets, AstCreateOrAlterEventSessionWith createOrAlterEventSessionWith, AstStartStop startStop) : 
                base(p)
        {
            this._createAlter = createAlter;
            this._eventSessionId = eventSessionId;
            this._createOrAlterEventSessionAddEvents = createOrAlterEventSessionAddEvents;
            this._createOrAlterEventSessionDelEvents = createOrAlterEventSessionDelEvents;
            this._createOrAlterEventSessionAddTargets = createOrAlterEventSessionAddTargets;
            this._createOrAlterEventSessionDelTargets = createOrAlterEventSessionDelTargets;
            this._createOrAlterEventSessionWith = createOrAlterEventSessionWith;
            this._startStop = startStop;
        }
        
        public AstCreateOrAlterEventSession(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateAlter>())
                {
                    this._createAlter = ((AstCreateAlter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventSessionId>())
                {
                    this._eventSessionId = ((AstEventSessionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionAddEvents>())
                {
                    this._createOrAlterEventSessionAddEvents = ((AstCreateOrAlterEventSessionAddEvents)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionDelEvents>())
                {
                    this._createOrAlterEventSessionDelEvents = ((AstCreateOrAlterEventSessionDelEvents)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionAddTargets>())
                {
                    this._createOrAlterEventSessionAddTargets = ((AstCreateOrAlterEventSessionAddTargets)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionDelTargets>())
                {
                    this._createOrAlterEventSessionDelTargets = ((AstCreateOrAlterEventSessionDelTargets)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionWith>())
                {
                    this._createOrAlterEventSessionWith = ((AstCreateOrAlterEventSessionWith)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStartStop>())
                {
                    this._startStop = ((AstStartStop)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCreateAlter CreateAlter
        {
            get
            {
                return this._createAlter;
            }
        }
        
        public virtual AstEventSessionId EventSessionId
        {
            get
            {
                return this._eventSessionId;
            }
        }
        
        public virtual AstCreateOrAlterEventSessionAddEvents CreateOrAlterEventSessionAddEvents
        {
            get
            {
                return this._createOrAlterEventSessionAddEvents;
            }
        }
        
        public virtual AstCreateOrAlterEventSessionDelEvents CreateOrAlterEventSessionDelEvents
        {
            get
            {
                return this._createOrAlterEventSessionDelEvents;
            }
        }
        
        public virtual AstCreateOrAlterEventSessionAddTargets CreateOrAlterEventSessionAddTargets
        {
            get
            {
                return this._createOrAlterEventSessionAddTargets;
            }
        }
        
        public virtual AstCreateOrAlterEventSessionDelTargets CreateOrAlterEventSessionDelTargets
        {
            get
            {
                return this._createOrAlterEventSessionDelTargets;
            }
        }
        
        public virtual AstCreateOrAlterEventSessionWith CreateOrAlterEventSessionWith
        {
            get
            {
                return this._createOrAlterEventSessionWith;
            }
        }
        
        public virtual AstStartStop StartStop
        {
            get
            {
                return this._startStop;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSession(this);
        }
        
        /// <summary>
        /// create_or_alter_event_session : 
        ///    create_alter EVENT SESSION event_session_id ON SERVER create_or_alter_event_session_add_events? create_or_alter_event_session_del_events? create_or_alter_event_session_add_targets? create_or_alter_event_session_del_targets? create_or_alter_event_session_with? STATE EQUAL start_stop 
        /// </summary>
        public static AstCreateOrAlterEventSession CreateOrAlterEventSession(AstCreateAlter createAlter, AstEventSessionId eventSessionId, AstCreateOrAlterEventSessionAddEvents? createOrAlterEventSessionAddEvents, AstCreateOrAlterEventSessionDelEvents? createOrAlterEventSessionDelEvents, AstCreateOrAlterEventSessionAddTargets? createOrAlterEventSessionAddTargets, AstCreateOrAlterEventSessionDelTargets? createOrAlterEventSessionDelTargets, AstCreateOrAlterEventSessionWith? createOrAlterEventSessionWith, AstStartStop startStop)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(createAlter);
            list.Add(eventSessionId);
            list.Add(createOrAlterEventSessionAddEvents);
            list.Add(createOrAlterEventSessionDelEvents);
            list.Add(createOrAlterEventSessionAddTargets);
            list.Add(createOrAlterEventSessionDelTargets);
            list.Add(createOrAlterEventSessionWith);
            list.Add(startStop);
            return new AstCreateOrAlterEventSession(Position.Default, list);
        }
    }
    
    /// <summary>
    /// session_arg_max_memory
    /// 	 : MAX_MEMORY  EQUAL  decimal  memory_size_unity
    /// </summary>
    public partial class AstSessionArgMaxMemory : AstRule
    {
        
        private AstDecimal _decimal;
        
        private AstMemorySizeUnity _memorySizeUnity;
        
        public AstSessionArgMaxMemory(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMemorySizeUnity>())
                {
                    this._memorySizeUnity = ((AstMemorySizeUnity)(enumerator.Current));
                }
            }
        }
        
        public AstSessionArgMaxMemory(Position p, AstDecimal @decimal, AstMemorySizeUnity memorySizeUnity) : 
                base(p)
        {
            this._decimal = @decimal;
            this._memorySizeUnity = memorySizeUnity;
        }
        
        public AstSessionArgMaxMemory(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMemorySizeUnity>())
                {
                    this._memorySizeUnity = ((AstMemorySizeUnity)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstMemorySizeUnity MemorySizeUnity
        {
            get
            {
                return this._memorySizeUnity;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSessionArgMaxMemory(this);
        }
        
        /// <summary>
        /// session_arg_max_memory : 
        ///    MAX_MEMORY EQUAL decimal memory_size_unity 
        /// </summary>
        public static AstSessionArgMaxMemory SessionArgMaxMemory(AstDecimal @decimal, AstMemorySizeUnity memorySizeUnity)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(@decimal);
            list.Add(memorySizeUnity);
            return new AstSessionArgMaxMemory(Position.Default, list);
        }
    }
    
    /// <summary>
    /// session_arg_event_retention_mode
    /// 	 : EVENT_RETENTION_MODE  EQUAL  session_mode
    /// </summary>
    public partial class AstSessionArgEventRetentionMode : AstRule
    {
        
        private AstSessionMode _sessionMode;
        
        public AstSessionArgEventRetentionMode(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSessionMode>())
                {
                    this._sessionMode = ((AstSessionMode)(enumerator.Current));
                }
            }
        }
        
        public AstSessionArgEventRetentionMode(Position p, AstSessionMode sessionMode) : 
                base(p)
        {
            this._sessionMode = sessionMode;
        }
        
        public AstSessionArgEventRetentionMode(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSessionMode>())
                {
                    this._sessionMode = ((AstSessionMode)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSessionMode SessionMode
        {
            get
            {
                return this._sessionMode;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSessionArgEventRetentionMode(this);
        }
        
        /// <summary>
        /// session_arg_event_retention_mode : 
        ///    EVENT_RETENTION_MODE EQUAL session_mode 
        /// </summary>
        public static AstSessionArgEventRetentionMode SessionArgEventRetentionMode(AstSessionMode sessionMode)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(sessionMode);
            return new AstSessionArgEventRetentionMode(Position.Default, list);
        }
    }
    
    /// <summary>
    /// session_arg_max_event_size
    /// 	 : MAX_EVENT_SIZE  EQUAL  decimal  memory_size_unity
    /// </summary>
    public partial class AstSessionArgMaxEventSize : AstRule
    {
        
        private AstDecimal _decimal;
        
        private AstMemorySizeUnity _memorySizeUnity;
        
        public AstSessionArgMaxEventSize(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMemorySizeUnity>())
                {
                    this._memorySizeUnity = ((AstMemorySizeUnity)(enumerator.Current));
                }
            }
        }
        
        public AstSessionArgMaxEventSize(Position p, AstDecimal @decimal, AstMemorySizeUnity memorySizeUnity) : 
                base(p)
        {
            this._decimal = @decimal;
            this._memorySizeUnity = memorySizeUnity;
        }
        
        public AstSessionArgMaxEventSize(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMemorySizeUnity>())
                {
                    this._memorySizeUnity = ((AstMemorySizeUnity)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstMemorySizeUnity MemorySizeUnity
        {
            get
            {
                return this._memorySizeUnity;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSessionArgMaxEventSize(this);
        }
        
        /// <summary>
        /// session_arg_max_event_size : 
        ///    MAX_EVENT_SIZE EQUAL decimal memory_size_unity 
        /// </summary>
        public static AstSessionArgMaxEventSize SessionArgMaxEventSize(AstDecimal @decimal, AstMemorySizeUnity memorySizeUnity)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(@decimal);
            list.Add(memorySizeUnity);
            return new AstSessionArgMaxEventSize(Position.Default, list);
        }
    }
    
    /// <summary>
    /// session_arg_memory_partition
    /// 	 : MEMORY_PARTITION_MODE  EQUAL  partition_mode
    /// </summary>
    public partial class AstSessionArgMemoryPartition : AstRule
    {
        
        private AstPartitionMode _partitionMode;
        
        public AstSessionArgMemoryPartition(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionMode>())
                {
                    this._partitionMode = ((AstPartitionMode)(enumerator.Current));
                }
            }
        }
        
        public AstSessionArgMemoryPartition(Position p, AstPartitionMode partitionMode) : 
                base(p)
        {
            this._partitionMode = partitionMode;
        }
        
        public AstSessionArgMemoryPartition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionMode>())
                {
                    this._partitionMode = ((AstPartitionMode)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionMode PartitionMode
        {
            get
            {
                return this._partitionMode;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSessionArgMemoryPartition(this);
        }
        
        /// <summary>
        /// session_arg_memory_partition : 
        ///    MEMORY_PARTITION_MODE EQUAL partition_mode 
        /// </summary>
        public static AstSessionArgMemoryPartition SessionArgMemoryPartition(AstPartitionMode partitionMode)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(partitionMode);
            return new AstSessionArgMemoryPartition(Position.Default, list);
        }
    }
    
    /// <summary>
    /// session_arg_track_causality
    /// 	 : TRACK_CAUSALITY  EQUAL  on_off
    /// </summary>
    public partial class AstSessionArgTrackCausality : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstSessionArgTrackCausality(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstSessionArgTrackCausality(Position p, AstOnOff onOff) : 
                base(p)
        {
            this._onOff = onOff;
        }
        
        public AstSessionArgTrackCausality(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSessionArgTrackCausality(this);
        }
        
        /// <summary>
        /// session_arg_track_causality : 
        ///    TRACK_CAUSALITY EQUAL on_off 
        /// </summary>
        public static AstSessionArgTrackCausality SessionArgTrackCausality(AstOnOff onOff)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(onOff);
            return new AstSessionArgTrackCausality(Position.Default, list);
        }
    }
    
    /// <summary>
    /// session_arg_startup_state
    /// 	 : STARTUP_STATE  EQUAL  on_off
    /// </summary>
    public partial class AstSessionArgStartupState : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstSessionArgStartupState(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstSessionArgStartupState(Position p, AstOnOff onOff) : 
                base(p)
        {
            this._onOff = onOff;
        }
        
        public AstSessionArgStartupState(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSessionArgStartupState(this);
        }
        
        /// <summary>
        /// session_arg_startup_state : 
        ///    STARTUP_STATE EQUAL on_off 
        /// </summary>
        public static AstSessionArgStartupState SessionArgStartupState(AstOnOff onOff)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(onOff);
            return new AstSessionArgStartupState(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session_add_event
    /// 	 : ADD  EVENT  module_package_event_ref  (LR_BRACKET  (SET  set_attributes)?  event_session_actions  where_session_condition?  RR_BRACKET)
    /// </summary>
    public partial class AstCreateOrAlterEventSessionAddEvent : AstRule
    {
        
        private AstModulePackageEventRef _modulePackageEventRef;
        
        private AstSetAttributes _setAttributes;
        
        private AstEventSessionActions _eventSessionActions;
        
        private AstWhereSessionCondition _whereSessionCondition;
        
        public AstCreateOrAlterEventSessionAddEvent(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModulePackageEventRef>())
                {
                    this._modulePackageEventRef = ((AstModulePackageEventRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSetAttributes>())
                {
                    this._setAttributes = ((AstSetAttributes)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventSessionActions>())
                {
                    this._eventSessionActions = ((AstEventSessionActions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhereSessionCondition>())
                {
                    this._whereSessionCondition = ((AstWhereSessionCondition)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterEventSessionAddEvent(Position p, AstModulePackageEventRef modulePackageEventRef, AstSetAttributes setAttributes, AstEventSessionActions eventSessionActions, AstWhereSessionCondition whereSessionCondition) : 
                base(p)
        {
            this._modulePackageEventRef = modulePackageEventRef;
            this._setAttributes = setAttributes;
            this._eventSessionActions = eventSessionActions;
            this._whereSessionCondition = whereSessionCondition;
        }
        
        public AstCreateOrAlterEventSessionAddEvent(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModulePackageEventRef>())
                {
                    this._modulePackageEventRef = ((AstModulePackageEventRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSetAttributes>())
                {
                    this._setAttributes = ((AstSetAttributes)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventSessionActions>())
                {
                    this._eventSessionActions = ((AstEventSessionActions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhereSessionCondition>())
                {
                    this._whereSessionCondition = ((AstWhereSessionCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstModulePackageEventRef ModulePackageEventRef
        {
            get
            {
                return this._modulePackageEventRef;
            }
        }
        
        public virtual AstSetAttributes SetAttributes
        {
            get
            {
                return this._setAttributes;
            }
        }
        
        public virtual AstEventSessionActions EventSessionActions
        {
            get
            {
                return this._eventSessionActions;
            }
        }
        
        public virtual AstWhereSessionCondition WhereSessionCondition
        {
            get
            {
                return this._whereSessionCondition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSessionAddEvent(this);
        }
        
        /// <summary>
        /// create_or_alter_event_session_add_event : 
        ///    ADD EVENT module_package_event_ref ( SET set_attributes event_session_actions where_session_condition? ) 
        /// </summary>
        public static AstCreateOrAlterEventSessionAddEvent CreateOrAlterEventSessionAddEvent(AstModulePackageEventRef modulePackageEventRef, AstSetAttributes setAttributes, AstEventSessionActions eventSessionActions, AstWhereSessionCondition? whereSessionCondition)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(modulePackageEventRef);
            list.Add(setAttributes);
            list.Add(eventSessionActions);
            list.Add(whereSessionCondition);
            return new AstCreateOrAlterEventSessionAddEvent(Position.Default, list);
        }
    }
    
    /// <summary>
    /// set_attribute
    /// 	 : event_customizable_attribute_id  EQUAL  decimal_string
    /// </summary>
    public partial class AstSetAttribute : AstRule
    {
        
        private AstEventCustomizableAttributeId _eventCustomizableAttributeId;
        
        private AstDecimalString _decimalString;
        
        public AstSetAttribute(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventCustomizableAttributeId>())
                {
                    this._eventCustomizableAttributeId = ((AstEventCustomizableAttributeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalString>())
                {
                    this._decimalString = ((AstDecimalString)(enumerator.Current));
                }
            }
        }
        
        public AstSetAttribute(Position p, AstEventCustomizableAttributeId eventCustomizableAttributeId, AstDecimalString decimalString) : 
                base(p)
        {
            this._eventCustomizableAttributeId = eventCustomizableAttributeId;
            this._decimalString = decimalString;
        }
        
        public AstSetAttribute(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventCustomizableAttributeId>())
                {
                    this._eventCustomizableAttributeId = ((AstEventCustomizableAttributeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalString>())
                {
                    this._decimalString = ((AstDecimalString)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventCustomizableAttributeId EventCustomizableAttributeId
        {
            get
            {
                return this._eventCustomizableAttributeId;
            }
        }
        
        public virtual AstDecimalString DecimalString
        {
            get
            {
                return this._decimalString;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetAttribute(this);
        }
        
        /// <summary>
        /// set_attribute : 
        ///    event_customizable_attribute_id EQUAL decimal_string 
        /// </summary>
        public static AstSetAttribute SetAttribute(AstEventCustomizableAttributeId eventCustomizableAttributeId, AstDecimalString decimalString)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(eventCustomizableAttributeId);
            list.Add(decimalString);
            return new AstSetAttribute(Position.Default, list);
        }
    }
    
    /// <summary>
    /// event_session_action
    /// 	 : ACTION  LR_BRACKET  event_module_package_action_refs  RR_BRACKET
    /// </summary>
    public partial class AstEventSessionAction : AstRule
    {
        
        private AstEventModulePackageActionRefs _eventModulePackageActionRefs;
        
        public AstEventSessionAction(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventModulePackageActionRefs>())
                {
                    this._eventModulePackageActionRefs = ((AstEventModulePackageActionRefs)(enumerator.Current));
                }
            }
        }
        
        public AstEventSessionAction(Position p, AstEventModulePackageActionRefs eventModulePackageActionRefs) : 
                base(p)
        {
            this._eventModulePackageActionRefs = eventModulePackageActionRefs;
        }
        
        public AstEventSessionAction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventModulePackageActionRefs>())
                {
                    this._eventModulePackageActionRefs = ((AstEventModulePackageActionRefs)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventModulePackageActionRefs EventModulePackageActionRefs
        {
            get
            {
                return this._eventModulePackageActionRefs;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionAction(this);
        }
        
        /// <summary>
        /// event_session_action : 
        ///    ACTION ( event_module_package_action_refs ) 
        /// </summary>
        public static AstEventSessionAction EventSessionAction(AstEventModulePackageActionRefs eventModulePackageActionRefs)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(eventModulePackageActionRefs);
            return new AstEventSessionAction(Position.Default, list);
        }
    }
    
    /// <summary>
    /// where_session_condition
    /// 	 : WHERE  event_session_predicate_expression
    /// </summary>
    public partial class AstWhereSessionCondition : AstRule
    {
        
        private AstEventSessionPredicateExpression _eventSessionPredicateExpression;
        
        public AstWhereSessionCondition(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionPredicateExpression>())
                {
                    this._eventSessionPredicateExpression = ((AstEventSessionPredicateExpression)(enumerator.Current));
                }
            }
        }
        
        public AstWhereSessionCondition(Position p, AstEventSessionPredicateExpression eventSessionPredicateExpression) : 
                base(p)
        {
            this._eventSessionPredicateExpression = eventSessionPredicateExpression;
        }
        
        public AstWhereSessionCondition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionPredicateExpression>())
                {
                    this._eventSessionPredicateExpression = ((AstEventSessionPredicateExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventSessionPredicateExpression EventSessionPredicateExpression
        {
            get
            {
                return this._eventSessionPredicateExpression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWhereSessionCondition(this);
        }
        
        /// <summary>
        /// where_session_condition : 
        ///    WHERE event_session_predicate_expression 
        /// </summary>
        public static AstWhereSessionCondition WhereSessionCondition(AstEventSessionPredicateExpression eventSessionPredicateExpression)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(eventSessionPredicateExpression);
            return new AstWhereSessionCondition(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session_add_target
    /// 	 : ADD  TARGET  module_package_event_ref  target_parameter_blocks
    /// </summary>
    public partial class AstCreateOrAlterEventSessionAddTarget : AstRule
    {
        
        private AstModulePackageEventRef _modulePackageEventRef;
        
        private AstTargetParameterBlocks _targetParameterBlocks;
        
        public AstCreateOrAlterEventSessionAddTarget(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModulePackageEventRef>())
                {
                    this._modulePackageEventRef = ((AstModulePackageEventRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTargetParameterBlocks>())
                {
                    this._targetParameterBlocks = ((AstTargetParameterBlocks)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterEventSessionAddTarget(Position p, AstModulePackageEventRef modulePackageEventRef, AstTargetParameterBlocks targetParameterBlocks) : 
                base(p)
        {
            this._modulePackageEventRef = modulePackageEventRef;
            this._targetParameterBlocks = targetParameterBlocks;
        }
        
        public AstCreateOrAlterEventSessionAddTarget(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModulePackageEventRef>())
                {
                    this._modulePackageEventRef = ((AstModulePackageEventRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTargetParameterBlocks>())
                {
                    this._targetParameterBlocks = ((AstTargetParameterBlocks)(enumerator.Current));
                }
            }
        }
        
        public virtual AstModulePackageEventRef ModulePackageEventRef
        {
            get
            {
                return this._modulePackageEventRef;
            }
        }
        
        public virtual AstTargetParameterBlocks TargetParameterBlocks
        {
            get
            {
                return this._targetParameterBlocks;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSessionAddTarget(this);
        }
        
        /// <summary>
        /// create_or_alter_event_session_add_target : 
        ///    ADD TARGET module_package_event_ref target_parameter_blocks 
        /// </summary>
        public static AstCreateOrAlterEventSessionAddTarget CreateOrAlterEventSessionAddTarget(AstModulePackageEventRef modulePackageEventRef, AstTargetParameterBlocks targetParameterBlocks)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(modulePackageEventRef);
            list.Add(targetParameterBlocks);
            return new AstCreateOrAlterEventSessionAddTarget(Position.Default, list);
        }
    }
    
    /// <summary>
    /// target_parameter_block
    /// 	 : LR_BRACKET  SET  target_parameter_sets  RR_BRACKET
    /// </summary>
    public partial class AstTargetParameterBlock : AstRule
    {
        
        private AstTargetParameterSets _targetParameterSets;
        
        public AstTargetParameterBlock(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTargetParameterSets>())
                {
                    this._targetParameterSets = ((AstTargetParameterSets)(enumerator.Current));
                }
            }
        }
        
        public AstTargetParameterBlock(Position p, AstTargetParameterSets targetParameterSets) : 
                base(p)
        {
            this._targetParameterSets = targetParameterSets;
        }
        
        public AstTargetParameterBlock(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTargetParameterSets>())
                {
                    this._targetParameterSets = ((AstTargetParameterSets)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTargetParameterSets TargetParameterSets
        {
            get
            {
                return this._targetParameterSets;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetParameterBlock(this);
        }
        
        /// <summary>
        /// target_parameter_block : 
        ///    ( SET target_parameter_sets ) 
        /// </summary>
        public static AstTargetParameterBlock TargetParameterBlock(AstTargetParameterSets targetParameterSets)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(targetParameterSets);
            return new AstTargetParameterBlock(Position.Default, list);
        }
    }
    
    /// <summary>
    /// target_parameter_sets
    /// 	 : target_parameter_value  target_parameter_ids?
    /// </summary>
    public partial class AstTargetParameterSets : AstRule
    {
        
        private AstTargetParameterValue _targetParameterValue;
        
        private AstTargetParameterIds _targetParameterIds;
        
        public AstTargetParameterSets(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTargetParameterValue>())
                {
                    this._targetParameterValue = ((AstTargetParameterValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTargetParameterIds>())
                {
                    this._targetParameterIds = ((AstTargetParameterIds)(enumerator.Current));
                }
            }
        }
        
        public AstTargetParameterSets(Position p, AstTargetParameterValue targetParameterValue, AstTargetParameterIds targetParameterIds) : 
                base(p)
        {
            this._targetParameterValue = targetParameterValue;
            this._targetParameterIds = targetParameterIds;
        }
        
        public AstTargetParameterSets(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTargetParameterValue>())
                {
                    this._targetParameterValue = ((AstTargetParameterValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTargetParameterIds>())
                {
                    this._targetParameterIds = ((AstTargetParameterIds)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTargetParameterValue TargetParameterValue
        {
            get
            {
                return this._targetParameterValue;
            }
        }
        
        public virtual AstTargetParameterIds TargetParameterIds
        {
            get
            {
                return this._targetParameterIds;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetParameterSets(this);
        }
        
        /// <summary>
        /// target_parameter_sets : 
        ///    target_parameter_value target_parameter_ids? 
        /// </summary>
        public static AstTargetParameterSets TargetParameterSets(AstTargetParameterValue targetParameterValue, AstTargetParameterIds? targetParameterIds)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(targetParameterValue);
            list.Add(targetParameterIds);
            return new AstTargetParameterSets(Position.Default, list);
        }
    }
    
    /// <summary>
    /// target_parameter_set
    /// 	 : target_parameter_id  EQUAL  target_parameter_value
    /// </summary>
    public partial class AstTargetParameterSet : AstRule
    {
        
        private AstTargetParameterId _targetParameterId;
        
        private AstTargetParameterValue _targetParameterValue;
        
        public AstTargetParameterSet(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTargetParameterId>())
                {
                    this._targetParameterId = ((AstTargetParameterId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTargetParameterValue>())
                {
                    this._targetParameterValue = ((AstTargetParameterValue)(enumerator.Current));
                }
            }
        }
        
        public AstTargetParameterSet(Position p, AstTargetParameterId targetParameterId, AstTargetParameterValue targetParameterValue) : 
                base(p)
        {
            this._targetParameterId = targetParameterId;
            this._targetParameterValue = targetParameterValue;
        }
        
        public AstTargetParameterSet(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTargetParameterId>())
                {
                    this._targetParameterId = ((AstTargetParameterId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTargetParameterValue>())
                {
                    this._targetParameterValue = ((AstTargetParameterValue)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTargetParameterId TargetParameterId
        {
            get
            {
                return this._targetParameterId;
            }
        }
        
        public virtual AstTargetParameterValue TargetParameterValue
        {
            get
            {
                return this._targetParameterValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetParameterSet(this);
        }
        
        /// <summary>
        /// target_parameter_set : 
        ///    target_parameter_id EQUAL target_parameter_value 
        /// </summary>
        public static AstTargetParameterSet TargetParameterSet(AstTargetParameterId targetParameterId, AstTargetParameterValue targetParameterValue)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(targetParameterId);
            list.Add(targetParameterValue);
            return new AstTargetParameterSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session_del_target
    /// 	 : DROP  TARGET  module_package_event_ref
    /// </summary>
    public partial class AstCreateOrAlterEventSessionDelTarget : AstRule
    {
        
        private AstModulePackageEventRef _modulePackageEventRef;
        
        public AstCreateOrAlterEventSessionDelTarget(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModulePackageEventRef>())
                {
                    this._modulePackageEventRef = ((AstModulePackageEventRef)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterEventSessionDelTarget(Position p, AstModulePackageEventRef modulePackageEventRef) : 
                base(p)
        {
            this._modulePackageEventRef = modulePackageEventRef;
        }
        
        public AstCreateOrAlterEventSessionDelTarget(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModulePackageEventRef>())
                {
                    this._modulePackageEventRef = ((AstModulePackageEventRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstModulePackageEventRef ModulePackageEventRef
        {
            get
            {
                return this._modulePackageEventRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSessionDelTarget(this);
        }
        
        /// <summary>
        /// create_or_alter_event_session_del_target : 
        ///    DROP TARGET module_package_event_ref 
        /// </summary>
        public static AstCreateOrAlterEventSessionDelTarget CreateOrAlterEventSessionDelTarget(AstModulePackageEventRef modulePackageEventRef)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(modulePackageEventRef);
            return new AstCreateOrAlterEventSessionDelTarget(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session_del_event
    /// 	 : DROP  EVENT  module_package_event_ref
    /// </summary>
    public partial class AstCreateOrAlterEventSessionDelEvent : AstRule
    {
        
        private AstModulePackageEventRef _modulePackageEventRef;
        
        public AstCreateOrAlterEventSessionDelEvent(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModulePackageEventRef>())
                {
                    this._modulePackageEventRef = ((AstModulePackageEventRef)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterEventSessionDelEvent(Position p, AstModulePackageEventRef modulePackageEventRef) : 
                base(p)
        {
            this._modulePackageEventRef = modulePackageEventRef;
        }
        
        public AstCreateOrAlterEventSessionDelEvent(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModulePackageEventRef>())
                {
                    this._modulePackageEventRef = ((AstModulePackageEventRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstModulePackageEventRef ModulePackageEventRef
        {
            get
            {
                return this._modulePackageEventRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSessionDelEvent(this);
        }
        
        /// <summary>
        /// create_or_alter_event_session_del_event : 
        ///    DROP EVENT module_package_event_ref 
        /// </summary>
        public static AstCreateOrAlterEventSessionDelEvent CreateOrAlterEventSessionDelEvent(AstModulePackageEventRef modulePackageEventRef)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(modulePackageEventRef);
            return new AstCreateOrAlterEventSessionDelEvent(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_external_library
    /// 	 : ALTER  EXTERNAL  LIBRARY  library_id  (AUTHORIZATION  owner_id)?  set_add  file_spec2  WITH  LR_BRACKET  (COMMA?  LANGUAGE  EQUAL  code_language | DATA_SOURCE  EQUAL  external_data_source_id)+  RR_BRACKET
    /// </summary>
    public partial class AstAlterExternalLibrary : AstDdlClause
    {
        
        private AstLibraryId _libraryId;
        
        private AstOwnerId _ownerId;
        
        private AstSetAdd _setAdd;
        
        private AstFileSpec2 _fileSpec2;
        
        private AstCodeLanguage _codeLanguage;
        
        private AstExternalDataSourceId _externalDataSourceId;
        
        public AstAlterExternalLibrary(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryId>())
                {
                    this._libraryId = ((AstLibraryId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSetAdd>())
                {
                    this._setAdd = ((AstSetAdd)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpec2>())
                {
                    this._fileSpec2 = ((AstFileSpec2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCodeLanguage>())
                {
                    this._codeLanguage = ((AstCodeLanguage)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExternalDataSourceId>())
                {
                    this._externalDataSourceId = ((AstExternalDataSourceId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterExternalLibrary(Position p, AstLibraryId libraryId, AstOwnerId ownerId, AstSetAdd setAdd, AstFileSpec2 fileSpec2, AstCodeLanguage codeLanguage, AstExternalDataSourceId externalDataSourceId) : 
                base(p)
        {
            this._libraryId = libraryId;
            this._ownerId = ownerId;
            this._setAdd = setAdd;
            this._fileSpec2 = fileSpec2;
            this._codeLanguage = codeLanguage;
            this._externalDataSourceId = externalDataSourceId;
        }
        
        public AstAlterExternalLibrary(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryId>())
                {
                    this._libraryId = ((AstLibraryId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSetAdd>())
                {
                    this._setAdd = ((AstSetAdd)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpec2>())
                {
                    this._fileSpec2 = ((AstFileSpec2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCodeLanguage>())
                {
                    this._codeLanguage = ((AstCodeLanguage)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExternalDataSourceId>())
                {
                    this._externalDataSourceId = ((AstExternalDataSourceId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLibraryId LibraryId
        {
            get
            {
                return this._libraryId;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public virtual AstSetAdd SetAdd
        {
            get
            {
                return this._setAdd;
            }
        }
        
        public virtual AstFileSpec2 FileSpec2
        {
            get
            {
                return this._fileSpec2;
            }
        }
        
        public virtual AstCodeLanguage CodeLanguage
        {
            get
            {
                return this._codeLanguage;
            }
        }
        
        public virtual AstExternalDataSourceId ExternalDataSourceId
        {
            get
            {
                return this._externalDataSourceId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterExternalLibrary(this);
        }
        
        /// <summary>
        /// alter_external_library : 
        ///    ALTER EXTERNAL LIBRARY library_id AUTHORIZATION owner_id set_add file_spec2 WITH ( COMMA? LANGUAGE EQUAL code_language ) 
        /// </summary>
        public static AstAlterExternalLibrary AlterExternalLibrary(AstLibraryId libraryId, AstOwnerId ownerId, AstSetAdd setAdd, AstFileSpec2 fileSpec2, AstCodeLanguage codeLanguage)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(libraryId);
            list.Add(ownerId);
            list.Add(setAdd);
            list.Add(fileSpec2);
            list.Add(codeLanguage);
            return new AstAlterExternalLibrary(Position.Default, list);
        }
        
        /// <summary>
        /// alter_external_library : 
        ///    ALTER EXTERNAL LIBRARY library_id AUTHORIZATION owner_id set_add file_spec2 WITH ( DATA_SOURCE EQUAL external_data_source_id ) 
        /// </summary>
        public static AstAlterExternalLibrary AlterExternalLibrary(AstLibraryId libraryId, AstOwnerId ownerId, AstSetAdd setAdd, AstFileSpec2 fileSpec2, AstExternalDataSourceId externalDataSourceId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(libraryId);
            list.Add(ownerId);
            list.Add(setAdd);
            list.Add(fileSpec2);
            list.Add(externalDataSourceId);
            return new AstAlterExternalLibrary(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_external_library
    /// 	 : CREATE  EXTERNAL  LIBRARY  library_id  (AUTHORIZATION  owner_id)?  FROM  file_spec2  (WITH  LR_BRACKET  (COMMA?  LANGUAGE  EQUAL  code_language | DATA_SOURCE  EQUAL  external_data_source_id)+  RR_BRACKET)?
    /// </summary>
    public partial class AstCreateExternalLibrary : AstDdlClause
    {
        
        private AstLibraryId _libraryId;
        
        private AstOwnerId _ownerId;
        
        private AstFileSpec2 _fileSpec2;
        
        private AstCodeLanguage _codeLanguage;
        
        private AstExternalDataSourceId _externalDataSourceId;
        
        public AstCreateExternalLibrary(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryId>())
                {
                    this._libraryId = ((AstLibraryId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpec2>())
                {
                    this._fileSpec2 = ((AstFileSpec2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCodeLanguage>())
                {
                    this._codeLanguage = ((AstCodeLanguage)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExternalDataSourceId>())
                {
                    this._externalDataSourceId = ((AstExternalDataSourceId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateExternalLibrary(Position p, AstLibraryId libraryId, AstOwnerId ownerId, AstFileSpec2 fileSpec2, AstCodeLanguage codeLanguage, AstExternalDataSourceId externalDataSourceId) : 
                base(p)
        {
            this._libraryId = libraryId;
            this._ownerId = ownerId;
            this._fileSpec2 = fileSpec2;
            this._codeLanguage = codeLanguage;
            this._externalDataSourceId = externalDataSourceId;
        }
        
        public AstCreateExternalLibrary(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryId>())
                {
                    this._libraryId = ((AstLibraryId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpec2>())
                {
                    this._fileSpec2 = ((AstFileSpec2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCodeLanguage>())
                {
                    this._codeLanguage = ((AstCodeLanguage)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExternalDataSourceId>())
                {
                    this._externalDataSourceId = ((AstExternalDataSourceId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLibraryId LibraryId
        {
            get
            {
                return this._libraryId;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public virtual AstFileSpec2 FileSpec2
        {
            get
            {
                return this._fileSpec2;
            }
        }
        
        public virtual AstCodeLanguage CodeLanguage
        {
            get
            {
                return this._codeLanguage;
            }
        }
        
        public virtual AstExternalDataSourceId ExternalDataSourceId
        {
            get
            {
                return this._externalDataSourceId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateExternalLibrary(this);
        }
        
        /// <summary>
        /// create_external_library : 
        ///    CREATE EXTERNAL LIBRARY library_id AUTHORIZATION owner_id FROM file_spec2 WITH ( COMMA? LANGUAGE EQUAL code_language ) 
        /// </summary>
        public static AstCreateExternalLibrary CreateExternalLibrary(AstLibraryId libraryId, AstOwnerId ownerId, AstFileSpec2 fileSpec2, AstCodeLanguage codeLanguage)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(libraryId);
            list.Add(ownerId);
            list.Add(fileSpec2);
            list.Add(codeLanguage);
            return new AstCreateExternalLibrary(Position.Default, list);
        }
        
        /// <summary>
        /// create_external_library : 
        ///    CREATE EXTERNAL LIBRARY library_id AUTHORIZATION owner_id FROM file_spec2 WITH ( DATA_SOURCE EQUAL external_data_source_id ) 
        /// </summary>
        public static AstCreateExternalLibrary CreateExternalLibrary(AstLibraryId libraryId, AstOwnerId ownerId, AstFileSpec2 fileSpec2, AstExternalDataSourceId externalDataSourceId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(libraryId);
            list.Add(ownerId);
            list.Add(fileSpec2);
            list.Add(externalDataSourceId);
            return new AstCreateExternalLibrary(Position.Default, list);
        }
    }
    
    /// <summary>
    /// file_spec2
    /// 	 : LR_BRACKET  CONTENT  EQUAL  code_content  (COMMA  PLATFORM  EQUAL  platform)?  RR_BRACKET
    /// </summary>
    public partial class AstFileSpec2 : AstRule
    {
        
        private AstCodeContent _codeContent;
        
        private AstPlatform _platform;
        
        public AstFileSpec2(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCodeContent>())
                {
                    this._codeContent = ((AstCodeContent)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPlatform>())
                {
                    this._platform = ((AstPlatform)(enumerator.Current));
                }
            }
        }
        
        public AstFileSpec2(Position p, AstCodeContent codeContent, AstPlatform platform) : 
                base(p)
        {
            this._codeContent = codeContent;
            this._platform = platform;
        }
        
        public AstFileSpec2(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCodeContent>())
                {
                    this._codeContent = ((AstCodeContent)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPlatform>())
                {
                    this._platform = ((AstPlatform)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCodeContent CodeContent
        {
            get
            {
                return this._codeContent;
            }
        }
        
        public virtual AstPlatform Platform
        {
            get
            {
                return this._platform;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileSpec2(this);
        }
        
        /// <summary>
        /// file_spec2 : 
        ///    ( CONTENT EQUAL code_content , PLATFORM EQUAL platform ) 
        /// </summary>
        public static AstFileSpec2 FileSpec2(AstCodeContent codeContent, AstPlatform platform)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(codeContent);
            list.Add(platform);
            return new AstFileSpec2(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_external_resource_pool
    /// 	 : ALTER  EXTERNAL  RESOURCE  POOL  (pool_id | DEFAULT_DOUBLE_QUOTE)  WITH  external_resource_with
    /// </summary>
    public partial class AstAlterExternalResourcePool : AstDdlClause
    {
        
        private AstPoolId _poolId;
        
        private AstExternalResourceWith _externalResourceWith;
        
        public AstAlterExternalResourcePool(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExternalResourceWith>())
                {
                    this._externalResourceWith = ((AstExternalResourceWith)(enumerator.Current));
                }
            }
        }
        
        public AstAlterExternalResourcePool(Position p, AstPoolId poolId, AstExternalResourceWith externalResourceWith) : 
                base(p)
        {
            this._poolId = poolId;
            this._externalResourceWith = externalResourceWith;
        }
        
        public AstAlterExternalResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExternalResourceWith>())
                {
                    this._externalResourceWith = ((AstExternalResourceWith)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolId PoolId
        {
            get
            {
                return this._poolId;
            }
        }
        
        public virtual AstExternalResourceWith ExternalResourceWith
        {
            get
            {
                return this._externalResourceWith;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterExternalResourcePool(this);
        }
        
        /// <summary>
        /// alter_external_resource_pool : 
        ///    ALTER EXTERNAL RESOURCE POOL pool_id WITH external_resource_with 
        /// </summary>
        public static AstAlterExternalResourcePool AlterExternalResourcePool(AstPoolId poolId, AstExternalResourceWith externalResourceWith)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(poolId);
            list.Add(externalResourceWith);
            return new AstAlterExternalResourcePool(Position.Default, list);
        }
        
        /// <summary>
        /// alter_external_resource_pool : 
        ///    ALTER EXTERNAL RESOURCE POOL DEFAULT_DOUBLE_QUOTE WITH external_resource_with 
        /// </summary>
        public static AstAlterExternalResourcePool AlterExternalResourcePool(AstExternalResourceWith externalResourceWith)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(externalResourceWith);
            return new AstAlterExternalResourcePool(Position.Default, list);
        }
    }
    
    /// <summary>
    /// external_resource_with
    /// 	 : LR_BRACKET  max_cpu  (COMMA?  AFFINITY  CPU  EQUAL  (AUTO | decimal_ranges) | NUMANODE  EQUAL  decimal_ranges)  (COMMA?  max_memory)?  (COMMA?  maw_process)?  RR_BRACKET
    /// </summary>
    public partial class AstExternalResourceWith : AstRule
    {
        
        private AstMaxCpu _maxCpu;
        
        private AstDecimalRanges _decimalRanges;
        
        private AstMaxMemory _maxMemory;
        
        private AstMawProcess _mawProcess;
        
        public AstExternalResourceWith(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMaxCpu>())
                {
                    this._maxCpu = ((AstMaxCpu)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalRanges>())
                {
                    this._decimalRanges = ((AstDecimalRanges)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMaxMemory>())
                {
                    this._maxMemory = ((AstMaxMemory)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMawProcess>())
                {
                    this._mawProcess = ((AstMawProcess)(enumerator.Current));
                }
            }
        }
        
        public AstExternalResourceWith(Position p, AstMaxCpu maxCpu, AstDecimalRanges decimalRanges, AstMaxMemory maxMemory, AstMawProcess mawProcess) : 
                base(p)
        {
            this._maxCpu = maxCpu;
            this._decimalRanges = decimalRanges;
            this._maxMemory = maxMemory;
            this._mawProcess = mawProcess;
        }
        
        public AstExternalResourceWith(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMaxCpu>())
                {
                    this._maxCpu = ((AstMaxCpu)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalRanges>())
                {
                    this._decimalRanges = ((AstDecimalRanges)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMaxMemory>())
                {
                    this._maxMemory = ((AstMaxMemory)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMawProcess>())
                {
                    this._mawProcess = ((AstMawProcess)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMaxCpu MaxCpu
        {
            get
            {
                return this._maxCpu;
            }
        }
        
        public virtual AstDecimalRanges DecimalRanges
        {
            get
            {
                return this._decimalRanges;
            }
        }
        
        public virtual AstMaxMemory MaxMemory
        {
            get
            {
                return this._maxMemory;
            }
        }
        
        public virtual AstMawProcess MawProcess
        {
            get
            {
                return this._mawProcess;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalResourceWith(this);
        }
        
        /// <summary>
        /// external_resource_with : 
        ///    ( max_cpu COMMA? AFFINITY CPU EQUAL AUTO COMMA? max_memory COMMA? maw_process ) 
        /// </summary>
        public static AstExternalResourceWith ExternalResourceWith(AstMaxCpu maxCpu, AstMaxMemory maxMemory, AstMawProcess mawProcess)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(maxCpu);
            list.Add(maxMemory);
            list.Add(mawProcess);
            return new AstExternalResourceWith(Position.Default, list);
        }
        
        /// <summary>
        /// external_resource_with : 
        ///    ( max_cpu COMMA? AFFINITY CPU EQUAL decimal_ranges COMMA? max_memory COMMA? maw_process ) 
        /// </summary>
        public static AstExternalResourceWith ExternalResourceWith(AstMaxCpu maxCpu, AstDecimalRanges decimalRanges, AstMaxMemory maxMemory, AstMawProcess mawProcess)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(maxCpu);
            list.Add(decimalRanges);
            list.Add(maxMemory);
            list.Add(mawProcess);
            return new AstExternalResourceWith(Position.Default, list);
        }
    }
    
    /// <summary>
    /// maw_process
    /// 	 : MAX_PROCESSES  EQUAL  decimal
    /// </summary>
    public partial class AstMawProcess : AstRule
    {
        
        private AstDecimal _decimal;
        
        public AstMawProcess(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstMawProcess(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstMawProcess(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMawProcess(this);
        }
        
        /// <summary>
        /// maw_process : 
        ///    MAX_PROCESSES EQUAL decimal 
        /// </summary>
        public static AstMawProcess MawProcess(AstDecimal @decimal)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(@decimal);
            return new AstMawProcess(Position.Default, list);
        }
    }
    
    /// <summary>
    /// max_memory
    /// 	 : MAX_MEMORY_PERCENT  EQUAL  decimal
    /// </summary>
    public partial class AstMaxMemory : AstRule
    {
        
        private AstDecimal _decimal;
        
        public AstMaxMemory(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstMaxMemory(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstMaxMemory(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMaxMemory(this);
        }
        
        /// <summary>
        /// max_memory : 
        ///    MAX_MEMORY_PERCENT EQUAL decimal 
        /// </summary>
        public static AstMaxMemory MaxMemory(AstDecimal @decimal)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(@decimal);
            return new AstMaxMemory(Position.Default, list);
        }
    }
    
    /// <summary>
    /// max_cpu
    /// 	 : MAX_CPU_PERCENT  EQUAL  decimal
    /// </summary>
    public partial class AstMaxCpu : AstRule
    {
        
        private AstDecimal _decimal;
        
        public AstMaxCpu(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstMaxCpu(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstMaxCpu(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMaxCpu(this);
        }
        
        /// <summary>
        /// max_cpu : 
        ///    MAX_CPU_PERCENT EQUAL decimal 
        /// </summary>
        public static AstMaxCpu MaxCpu(AstDecimal @decimal)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(@decimal);
            return new AstMaxCpu(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_fulltext_catalog
    /// 	 : ALTER  FULLTEXT  CATALOG  catalog_id  (REBUILD  (WITH  ACCENT_SENSITIVITY  EQUAL  on_off)? | REORGANIZE | AS  DEFAULT)
    /// </summary>
    public partial class AstAlterFulltextCatalog : AstDdlClause
    {
        
        private AstCatalogId _catalogId;
        
        private AstOnOff _onOff;
        
        public AstAlterFulltextCatalog(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogId>())
                {
                    this._catalogId = ((AstCatalogId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstAlterFulltextCatalog(Position p, AstCatalogId catalogId, AstOnOff onOff) : 
                base(p)
        {
            this._catalogId = catalogId;
            this._onOff = onOff;
        }
        
        public AstAlterFulltextCatalog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogId>())
                {
                    this._catalogId = ((AstCatalogId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCatalogId CatalogId
        {
            get
            {
                return this._catalogId;
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterFulltextCatalog(this);
        }
        
        /// <summary>
        /// alter_fulltext_catalog : 
        ///    ALTER FULLTEXT CATALOG catalog_id REBUILD WITH ACCENT_SENSITIVITY EQUAL on_off 
        /// </summary>
        public static AstAlterFulltextCatalog AlterFulltextCatalog(AstCatalogId catalogId, AstOnOff onOff)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(catalogId);
            list.Add(onOff);
            return new AstAlterFulltextCatalog(Position.Default, list);
        }
        
        /// <summary>
        /// alter_fulltext_catalog : 
        ///    ALTER FULLTEXT CATALOG catalog_id REORGANIZE 
        /// </summary>
        public static AstAlterFulltextCatalog AlterFulltextCatalog(AstCatalogId catalogId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(catalogId);
            return new AstAlterFulltextCatalog(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_fulltext_catalog
    /// 	 : CREATE  FULLTEXT  CATALOG  catalog_id  (ON  FILEGROUP  file_group_id)?  (IN  PATH  rootpath = stringtext)?  (WITH  ACCENT_SENSITIVITY  EQUAL  on_off)?  (AS  DEFAULT)?  (AUTHORIZATION  owner_id)?
    /// </summary>
    public partial class AstCreateFulltextCatalog : AstDdlClause
    {
        
        private AstCatalogId _catalogId;
        
        private AstFileGroupId _fileGroupId;
        
        private AstStringtext _stringtext;
        
        private AstOnOff _onOff;
        
        private AstOwnerId _ownerId;
        
        public AstCreateFulltextCatalog(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogId>())
                {
                    this._catalogId = ((AstCatalogId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateFulltextCatalog(Position p, AstCatalogId catalogId, AstFileGroupId fileGroupId, AstStringtext stringtext, AstOnOff onOff, AstOwnerId ownerId) : 
                base(p)
        {
            this._catalogId = catalogId;
            this._fileGroupId = fileGroupId;
            this._stringtext = stringtext;
            this._onOff = onOff;
            this._ownerId = ownerId;
        }
        
        public AstCreateFulltextCatalog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogId>())
                {
                    this._catalogId = ((AstCatalogId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCatalogId CatalogId
        {
            get
            {
                return this._catalogId;
            }
        }
        
        public virtual AstFileGroupId FileGroupId
        {
            get
            {
                return this._fileGroupId;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateFulltextCatalog(this);
        }
        
        /// <summary>
        /// create_fulltext_catalog : 
        ///    CREATE FULLTEXT CATALOG catalog_id ON FILEGROUP file_group_id IN PATH rootpath=stringtext WITH ACCENT_SENSITIVITY EQUAL on_off AS DEFAULT AUTHORIZATION owner_id 
        /// </summary>
        public static AstCreateFulltextCatalog CreateFulltextCatalog(AstCatalogId catalogId, AstFileGroupId fileGroupId, AstStringtext rootpath, AstOnOff onOff, AstOwnerId ownerId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(catalogId);
            list.Add(fileGroupId);
            list.Add(rootpath);
            list.Add(onOff);
            list.Add(ownerId);
            return new AstCreateFulltextCatalog(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_fulltext_stoplist
    /// 	 : ALTER  FULLTEXT  STOPLIST  stoplist_id  (ADD  stopword = stringtext  LANGUAGE  fulltext_languageList | DROP  (stopword = stringtext  LANGUAGE  fulltext_languageList | ALL  fulltext_languageList | ALL))
    /// </summary>
    public partial class AstAlterFulltextStoplist : AstDdlClause
    {
        
        private AstStoplistId _stoplistId;
        
        private AstStringtext _stringtext;
        
        private AstFulltextLanguageList _fulltextLanguageList;
        
        public AstAlterFulltextStoplist(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFulltextLanguageList>())
                {
                    this._fulltextLanguageList = ((AstFulltextLanguageList)(enumerator.Current));
                }
            }
        }
        
        public AstAlterFulltextStoplist(Position p, AstStoplistId stoplistId, AstStringtext stringtext, AstFulltextLanguageList fulltextLanguageList) : 
                base(p)
        {
            this._stoplistId = stoplistId;
            this._stringtext = stringtext;
            this._fulltextLanguageList = fulltextLanguageList;
        }
        
        public AstAlterFulltextStoplist(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFulltextLanguageList>())
                {
                    this._fulltextLanguageList = ((AstFulltextLanguageList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStoplistId StoplistId
        {
            get
            {
                return this._stoplistId;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstFulltextLanguageList FulltextLanguageList
        {
            get
            {
                return this._fulltextLanguageList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterFulltextStoplist(this);
        }
        
        /// <summary>
        /// alter_fulltext_stoplist : 
        ///    ALTER FULLTEXT STOPLIST stoplist_id ADD stopword=stringtext LANGUAGE fulltext_languageList 
        /// </summary>
        public static AstAlterFulltextStoplist AlterFulltextStoplist(AstStoplistId stoplistId, AstStringtext stopword, AstFulltextLanguageList fulltextLanguageList)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(stoplistId);
            list.Add(stopword);
            list.Add(fulltextLanguageList);
            return new AstAlterFulltextStoplist(Position.Default, list);
        }
        
        /// <summary>
        /// alter_fulltext_stoplist : 
        ///    ALTER FULLTEXT STOPLIST stoplist_id DROP ALL fulltext_languageList 
        /// </summary>
        public static AstAlterFulltextStoplist AlterFulltextStoplist(AstStoplistId stoplistId, AstFulltextLanguageList fulltextLanguageList)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(stoplistId);
            list.Add(fulltextLanguageList);
            return new AstAlterFulltextStoplist(Position.Default, list);
        }
        
        /// <summary>
        /// alter_fulltext_stoplist : 
        ///    ALTER FULLTEXT STOPLIST stoplist_id DROP ALL 
        /// </summary>
        public static AstAlterFulltextStoplist AlterFulltextStoplist(AstStoplistId stoplistId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(stoplistId);
            return new AstAlterFulltextStoplist(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_fulltext_stoplist
    /// 	 : CREATE  FULLTEXT  STOPLIST  stoplist_id  (FROM  (database_stoplist_ref | SYSTEM  STOPLIST))?  (AUTHORIZATION  owner_id)?
    /// </summary>
    public partial class AstCreateFulltextStoplist : AstDdlClause
    {
        
        private AstStoplistId _stoplistId;
        
        private AstDatabaseStoplistRef _databaseStoplistRef;
        
        private AstOwnerId _ownerId;
        
        public AstCreateFulltextStoplist(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseStoplistRef>())
                {
                    this._databaseStoplistRef = ((AstDatabaseStoplistRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateFulltextStoplist(Position p, AstStoplistId stoplistId, AstDatabaseStoplistRef databaseStoplistRef, AstOwnerId ownerId) : 
                base(p)
        {
            this._stoplistId = stoplistId;
            this._databaseStoplistRef = databaseStoplistRef;
            this._ownerId = ownerId;
        }
        
        public AstCreateFulltextStoplist(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseStoplistRef>())
                {
                    this._databaseStoplistRef = ((AstDatabaseStoplistRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStoplistId StoplistId
        {
            get
            {
                return this._stoplistId;
            }
        }
        
        public virtual AstDatabaseStoplistRef DatabaseStoplistRef
        {
            get
            {
                return this._databaseStoplistRef;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateFulltextStoplist(this);
        }
        
        /// <summary>
        /// create_fulltext_stoplist : 
        ///    CREATE FULLTEXT STOPLIST stoplist_id FROM database_stoplist_ref AUTHORIZATION owner_id 
        /// </summary>
        public static AstCreateFulltextStoplist CreateFulltextStoplist(AstStoplistId stoplistId, AstDatabaseStoplistRef databaseStoplistRef, AstOwnerId ownerId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(stoplistId);
            list.Add(databaseStoplistRef);
            list.Add(ownerId);
            return new AstCreateFulltextStoplist(Position.Default, list);
        }
        
        /// <summary>
        /// create_fulltext_stoplist : 
        ///    CREATE FULLTEXT STOPLIST stoplist_id FROM SYSTEM STOPLIST AUTHORIZATION owner_id 
        /// </summary>
        public static AstCreateFulltextStoplist CreateFulltextStoplist(AstStoplistId stoplistId, AstOwnerId ownerId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(stoplistId);
            list.Add(ownerId);
            return new AstCreateFulltextStoplist(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_login_sql_server
    /// 	 : ALTER  LOGIN  login_id  alter_login_sql_server_infos
    /// </summary>
    public partial class AstAlterLoginSqlServer : AstDdlClause
    {
        
        private AstLoginId _loginId;
        
        private AstAlterLoginSqlServerInfos _alterLoginSqlServerInfos;
        
        public AstAlterLoginSqlServer(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterLoginSqlServerInfos>())
                {
                    this._alterLoginSqlServerInfos = ((AstAlterLoginSqlServerInfos)(enumerator.Current));
                }
            }
        }
        
        public AstAlterLoginSqlServer(Position p, AstLoginId loginId, AstAlterLoginSqlServerInfos alterLoginSqlServerInfos) : 
                base(p)
        {
            this._loginId = loginId;
            this._alterLoginSqlServerInfos = alterLoginSqlServerInfos;
        }
        
        public AstAlterLoginSqlServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterLoginSqlServerInfos>())
                {
                    this._alterLoginSqlServerInfos = ((AstAlterLoginSqlServerInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public virtual AstAlterLoginSqlServerInfos AlterLoginSqlServerInfos
        {
            get
            {
                return this._alterLoginSqlServerInfos;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginSqlServer(this);
        }
        
        /// <summary>
        /// alter_login_sql_server : 
        ///    ALTER LOGIN login_id alter_login_sql_server_infos 
        /// </summary>
        public static AstAlterLoginSqlServer AlterLoginSqlServer(AstLoginId loginId, AstAlterLoginSqlServerInfos alterLoginSqlServerInfos)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(loginId);
            list.Add(alterLoginSqlServerInfos);
            return new AstAlterLoginSqlServer(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_login_sql_server_settings
    /// 	 : login_settings_pwd?  login_settings_old_pwd?  (DEFAULT_DATABASE  EQUAL  database_id)?  (DEFAULT_LANGUAGE  EQUAL  language)?  (NAME  EQUAL  login_id)?  (CHECK_POLICY  EQUAL  check_policy = on_off)?  (CHECK_EXPIRATION  EQUAL  check_expiration = on_off)?  (CREDENTIAL  EQUAL  credential_id)?  (NO  CREDENTIAL)?
    /// </summary>
    public partial class AstAlterLoginSqlServerSettings : AstRule
    {
        
        private AstLoginSettingsPwd _loginSettingsPwd;
        
        private AstLoginSettingsOldPwd _loginSettingsOldPwd;
        
        private AstDatabaseId _databaseId;
        
        private AstLanguage _language;
        
        private AstLoginId _loginId;
        
        private AstOnOff _onOff;
        
        private AstCredentialId _credentialId;
        
        public AstAlterLoginSqlServerSettings(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginSettingsPwd>())
                {
                    this._loginSettingsPwd = ((AstLoginSettingsPwd)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginSettingsOldPwd>())
                {
                    this._loginSettingsOldPwd = ((AstLoginSettingsOldPwd)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLanguage>())
                {
                    this._language = ((AstLanguage)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterLoginSqlServerSettings(Position p, AstLoginSettingsPwd loginSettingsPwd, AstLoginSettingsOldPwd loginSettingsOldPwd, AstDatabaseId databaseId, AstLanguage language, AstLoginId loginId, AstOnOff onOff, AstCredentialId credentialId) : 
                base(p)
        {
            this._loginSettingsPwd = loginSettingsPwd;
            this._loginSettingsOldPwd = loginSettingsOldPwd;
            this._databaseId = databaseId;
            this._language = language;
            this._loginId = loginId;
            this._onOff = onOff;
            this._credentialId = credentialId;
        }
        
        public AstAlterLoginSqlServerSettings(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginSettingsPwd>())
                {
                    this._loginSettingsPwd = ((AstLoginSettingsPwd)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginSettingsOldPwd>())
                {
                    this._loginSettingsOldPwd = ((AstLoginSettingsOldPwd)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLanguage>())
                {
                    this._language = ((AstLanguage)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginSettingsPwd LoginSettingsPwd
        {
            get
            {
                return this._loginSettingsPwd;
            }
        }
        
        public virtual AstLoginSettingsOldPwd LoginSettingsOldPwd
        {
            get
            {
                return this._loginSettingsOldPwd;
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstLanguage Language
        {
            get
            {
                return this._language;
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public virtual AstCredentialId CredentialId
        {
            get
            {
                return this._credentialId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginSqlServerSettings(this);
        }
        
        /// <summary>
        /// alter_login_sql_server_settings : 
        ///    login_settings_pwd? login_settings_old_pwd? DEFAULT_DATABASE EQUAL database_id DEFAULT_LANGUAGE EQUAL language NAME EQUAL login_id CHECK_POLICY EQUAL check_policy=on_off CHECK_EXPIRATION EQUAL check_expiration=on_off CREDENTIAL EQUAL credential_id NO CREDENTIAL 
        /// </summary>
        public static AstAlterLoginSqlServerSettings AlterLoginSqlServerSettings(AstLoginSettingsPwd? loginSettingsPwd, AstLoginSettingsOldPwd? loginSettingsOldPwd, AstDatabaseId databaseId, AstLanguage language, AstLoginId loginId, AstOnOff checkPolicy, AstOnOff checkExpiration, AstCredentialId credentialId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(loginSettingsPwd);
            list.Add(loginSettingsOldPwd);
            list.Add(databaseId);
            list.Add(language);
            list.Add(loginId);
            list.Add(checkPolicy);
            list.Add(checkExpiration);
            list.Add(credentialId);
            return new AstAlterLoginSqlServerSettings(Position.Default, list);
        }
    }
    
    /// <summary>
    /// login_settings_old_pwd
    /// 	 : OLD_PASSWORD  EQUAL  old_password = stringtext  pwd_strategies?
    /// </summary>
    public partial class AstLoginSettingsOldPwd : AstRule
    {
        
        private AstStringtext _stringtext;
        
        private AstPwdStrategies _pwdStrategies;
        
        public AstLoginSettingsOldPwd(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPwdStrategies>())
                {
                    this._pwdStrategies = ((AstPwdStrategies)(enumerator.Current));
                }
            }
        }
        
        public AstLoginSettingsOldPwd(Position p, AstStringtext stringtext, AstPwdStrategies pwdStrategies) : 
                base(p)
        {
            this._stringtext = stringtext;
            this._pwdStrategies = pwdStrategies;
        }
        
        public AstLoginSettingsOldPwd(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPwdStrategies>())
                {
                    this._pwdStrategies = ((AstPwdStrategies)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstPwdStrategies PwdStrategies
        {
            get
            {
                return this._pwdStrategies;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLoginSettingsOldPwd(this);
        }
        
        /// <summary>
        /// login_settings_old_pwd : 
        ///    OLD_PASSWORD EQUAL old_password=stringtext pwd_strategies? 
        /// </summary>
        public static AstLoginSettingsOldPwd LoginSettingsOldPwd(AstStringtext oldPassword, AstPwdStrategies? pwdStrategies)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(oldPassword);
            list.Add(pwdStrategies);
            return new AstLoginSettingsOldPwd(Position.Default, list);
        }
    }
    
    /// <summary>
    /// login_settings_pwd
    /// 	 : PASSWORD  EQUAL  pwd_value  pwd_strategies?
    /// </summary>
    public partial class AstLoginSettingsPwd : AstRule
    {
        
        private AstPwdValue _pwdValue;
        
        private AstPwdStrategies _pwdStrategies;
        
        public AstLoginSettingsPwd(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPwdValue>())
                {
                    this._pwdValue = ((AstPwdValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPwdStrategies>())
                {
                    this._pwdStrategies = ((AstPwdStrategies)(enumerator.Current));
                }
            }
        }
        
        public AstLoginSettingsPwd(Position p, AstPwdValue pwdValue, AstPwdStrategies pwdStrategies) : 
                base(p)
        {
            this._pwdValue = pwdValue;
            this._pwdStrategies = pwdStrategies;
        }
        
        public AstLoginSettingsPwd(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPwdValue>())
                {
                    this._pwdValue = ((AstPwdValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPwdStrategies>())
                {
                    this._pwdStrategies = ((AstPwdStrategies)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPwdValue PwdValue
        {
            get
            {
                return this._pwdValue;
            }
        }
        
        public virtual AstPwdStrategies PwdStrategies
        {
            get
            {
                return this._pwdStrategies;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLoginSettingsPwd(this);
        }
        
        /// <summary>
        /// login_settings_pwd : 
        ///    PASSWORD EQUAL pwd_value pwd_strategies? 
        /// </summary>
        public static AstLoginSettingsPwd LoginSettingsPwd(AstPwdValue pwdValue, AstPwdStrategies? pwdStrategies)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(pwdValue);
            list.Add(pwdStrategies);
            return new AstLoginSettingsPwd(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_login_sql_server
    /// 	 : CREATE  LOGIN  login_id  (WITH  create_login_sql_server_settings | FROM  create_login_sql_server_from)
    /// </summary>
    public partial class AstCreateLoginSqlServer : AstDdlClause
    {
        
        private AstLoginId _loginId;
        
        private AstCreateLoginSqlServerSettings _createLoginSqlServerSettings;
        
        private AstCreateLoginSqlServerFrom _createLoginSqlServerFrom;
        
        public AstCreateLoginSqlServer(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateLoginSqlServerSettings>())
                {
                    this._createLoginSqlServerSettings = ((AstCreateLoginSqlServerSettings)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateLoginSqlServerFrom>())
                {
                    this._createLoginSqlServerFrom = ((AstCreateLoginSqlServerFrom)(enumerator.Current));
                }
            }
        }
        
        public AstCreateLoginSqlServer(Position p, AstLoginId loginId, AstCreateLoginSqlServerSettings createLoginSqlServerSettings, AstCreateLoginSqlServerFrom createLoginSqlServerFrom) : 
                base(p)
        {
            this._loginId = loginId;
            this._createLoginSqlServerSettings = createLoginSqlServerSettings;
            this._createLoginSqlServerFrom = createLoginSqlServerFrom;
        }
        
        public AstCreateLoginSqlServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateLoginSqlServerSettings>())
                {
                    this._createLoginSqlServerSettings = ((AstCreateLoginSqlServerSettings)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateLoginSqlServerFrom>())
                {
                    this._createLoginSqlServerFrom = ((AstCreateLoginSqlServerFrom)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public virtual AstCreateLoginSqlServerSettings CreateLoginSqlServerSettings
        {
            get
            {
                return this._createLoginSqlServerSettings;
            }
        }
        
        public virtual AstCreateLoginSqlServerFrom CreateLoginSqlServerFrom
        {
            get
            {
                return this._createLoginSqlServerFrom;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginSqlServer(this);
        }
        
        /// <summary>
        /// create_login_sql_server : 
        ///    CREATE LOGIN login_id WITH create_login_sql_server_settings 
        /// </summary>
        public static AstCreateLoginSqlServer CreateLoginSqlServer(AstLoginId loginId, AstCreateLoginSqlServerSettings createLoginSqlServerSettings)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(loginId);
            list.Add(createLoginSqlServerSettings);
            return new AstCreateLoginSqlServer(Position.Default, list);
        }
        
        /// <summary>
        /// create_login_sql_server : 
        ///    CREATE LOGIN login_id FROM create_login_sql_server_from 
        /// </summary>
        public static AstCreateLoginSqlServer CreateLoginSqlServer(AstLoginId loginId, AstCreateLoginSqlServerFrom createLoginSqlServerFrom)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(loginId);
            list.Add(createLoginSqlServerFrom);
            return new AstCreateLoginSqlServer(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_login_azure_sql
    /// 	 : ALTER  LOGIN  login_id  alter_login_azure_sql_infos
    /// </summary>
    public partial class AstAlterLoginAzureSql : AstDdlClause
    {
        
        private AstLoginId _loginId;
        
        private AstAlterLoginAzureSqlInfos _alterLoginAzureSqlInfos;
        
        public AstAlterLoginAzureSql(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterLoginAzureSqlInfos>())
                {
                    this._alterLoginAzureSqlInfos = ((AstAlterLoginAzureSqlInfos)(enumerator.Current));
                }
            }
        }
        
        public AstAlterLoginAzureSql(Position p, AstLoginId loginId, AstAlterLoginAzureSqlInfos alterLoginAzureSqlInfos) : 
                base(p)
        {
            this._loginId = loginId;
            this._alterLoginAzureSqlInfos = alterLoginAzureSqlInfos;
        }
        
        public AstAlterLoginAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterLoginAzureSqlInfos>())
                {
                    this._alterLoginAzureSqlInfos = ((AstAlterLoginAzureSqlInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public virtual AstAlterLoginAzureSqlInfos AlterLoginAzureSqlInfos
        {
            get
            {
                return this._alterLoginAzureSqlInfos;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginAzureSql(this);
        }
        
        /// <summary>
        /// alter_login_azure_sql : 
        ///    ALTER LOGIN login_id alter_login_azure_sql_infos 
        /// </summary>
        public static AstAlterLoginAzureSql AlterLoginAzureSql(AstLoginId loginId, AstAlterLoginAzureSqlInfos alterLoginAzureSqlInfos)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(loginId);
            list.Add(alterLoginAzureSqlInfos);
            return new AstAlterLoginAzureSql(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_login_azure_sql
    /// 	 : CREATE  LOGIN  login_id  WITH  PASSWORD  EQUAL  stringtext  (SID  EQUAL  sid = binary_)?
    /// </summary>
    public partial class AstCreateLoginAzureSql : AstDdlClause
    {
        
        private AstLoginId _loginId;
        
        private AstStringtext _stringtext;
        
        private AstBinary _binary;
        
        public AstCreateLoginAzureSql(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinary>())
                {
                    this._binary = ((AstBinary)(enumerator.Current));
                }
            }
        }
        
        public AstCreateLoginAzureSql(Position p, AstLoginId loginId, AstStringtext stringtext, AstBinary binary) : 
                base(p)
        {
            this._loginId = loginId;
            this._stringtext = stringtext;
            this._binary = binary;
        }
        
        public AstCreateLoginAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinary>())
                {
                    this._binary = ((AstBinary)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstBinary Binary
        {
            get
            {
                return this._binary;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginAzureSql(this);
        }
        
        /// <summary>
        /// create_login_azure_sql : 
        ///    CREATE LOGIN login_id WITH PASSWORD EQUAL stringtext SID EQUAL sid=binary_ 
        /// </summary>
        public static AstCreateLoginAzureSql CreateLoginAzureSql(AstLoginId loginId, AstStringtext stringtext, AstBinary sid)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(loginId);
            list.Add(stringtext);
            list.Add(sid);
            return new AstCreateLoginAzureSql(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_login_azure_sql_dw_and_pdw
    /// 	 : ALTER  LOGIN  login_id  (enable_disable? | WITH  (PASSWORD  EQUAL  password = stringtext  (OLD_PASSWORD  EQUAL  old_password = stringtext  pwd_strategies?)? | NAME  EQUAL  new_name = login_id))
    /// </summary>
    public partial class AstAlterLoginAzureSqlDwAndPdw : AstDdlClause
    {
        
        private AstLoginId _loginId;
        
        private AstEnableDisable _enableDisable;
        
        private AstStringtext _stringtext;
        
        private AstPwdStrategies _pwdStrategies;
        
        public AstAlterLoginAzureSqlDwAndPdw(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEnableDisable>())
                {
                    this._enableDisable = ((AstEnableDisable)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPwdStrategies>())
                {
                    this._pwdStrategies = ((AstPwdStrategies)(enumerator.Current));
                }
            }
        }
        
        public AstAlterLoginAzureSqlDwAndPdw(Position p, AstLoginId loginId, AstEnableDisable enableDisable, AstStringtext stringtext, AstPwdStrategies pwdStrategies) : 
                base(p)
        {
            this._loginId = loginId;
            this._enableDisable = enableDisable;
            this._stringtext = stringtext;
            this._pwdStrategies = pwdStrategies;
        }
        
        public AstAlterLoginAzureSqlDwAndPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEnableDisable>())
                {
                    this._enableDisable = ((AstEnableDisable)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPwdStrategies>())
                {
                    this._pwdStrategies = ((AstPwdStrategies)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public virtual AstEnableDisable EnableDisable
        {
            get
            {
                return this._enableDisable;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstPwdStrategies PwdStrategies
        {
            get
            {
                return this._pwdStrategies;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginAzureSqlDwAndPdw(this);
        }
        
        /// <summary>
        /// alter_login_azure_sql_dw_and_pdw : 
        ///    ALTER LOGIN login_id enable_disable? 
        /// </summary>
        public static AstAlterLoginAzureSqlDwAndPdw AlterLoginAzureSqlDwAndPdw(AstLoginId loginId, AstEnableDisable? enableDisable)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(loginId);
            list.Add(enableDisable);
            return new AstAlterLoginAzureSqlDwAndPdw(Position.Default, list);
        }
        
        /// <summary>
        /// alter_login_azure_sql_dw_and_pdw : 
        ///    ALTER LOGIN login_id WITH PASSWORD EQUAL password=stringtext OLD_PASSWORD EQUAL old_password=stringtext pwd_strategies? 
        /// </summary>
        public static AstAlterLoginAzureSqlDwAndPdw AlterLoginAzureSqlDwAndPdw(AstLoginId loginId, AstStringtext password, AstStringtext oldPassword, AstPwdStrategies? pwdStrategies)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(loginId);
            list.Add(password);
            list.Add(oldPassword);
            list.Add(pwdStrategies);
            return new AstAlterLoginAzureSqlDwAndPdw(Position.Default, list);
        }
        
        /// <summary>
        /// alter_login_azure_sql_dw_and_pdw : 
        ///    ALTER LOGIN login_id WITH NAME EQUAL new_name=login_id 
        /// </summary>
        public static AstAlterLoginAzureSqlDwAndPdw AlterLoginAzureSqlDwAndPdw(AstLoginId loginId, AstLoginId newName)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(loginId);
            list.Add(newName);
            return new AstAlterLoginAzureSqlDwAndPdw(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_login_pdw
    /// 	 : CREATE  LOGIN  login_id  (WITH  (PASSWORD  EQUAL  password = stringtext  MUST_CHANGE?  (CHECK_POLICY  EQUAL  on_off?)?) | FROM  WINDOWS)
    /// </summary>
    public partial class AstCreateLoginPdw : AstDdlClause
    {
        
        private AstLoginId _loginId;
        
        private AstStringtext _stringtext;
        
        private AstOnOff _onOff;
        
        public AstCreateLoginPdw(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstCreateLoginPdw(Position p, AstLoginId loginId, AstStringtext stringtext, AstOnOff onOff) : 
                base(p)
        {
            this._loginId = loginId;
            this._stringtext = stringtext;
            this._onOff = onOff;
        }
        
        public AstCreateLoginPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginPdw(this);
        }
        
        /// <summary>
        /// create_login_pdw : 
        ///    CREATE LOGIN login_id WITH PASSWORD EQUAL password=stringtext MUST_CHANGE? CHECK_POLICY EQUAL on_off? 
        /// </summary>
        public static AstCreateLoginPdw CreateLoginPdw(AstLoginId loginId, AstStringtext password, AstOnOff? onOff)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(loginId);
            list.Add(password);
            list.Add(onOff);
            return new AstCreateLoginPdw(Position.Default, list);
        }
        
        /// <summary>
        /// create_login_pdw : 
        ///    CREATE LOGIN login_id FROM WINDOWS 
        /// </summary>
        public static AstCreateLoginPdw CreateLoginPdw(AstLoginId loginId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(loginId);
            return new AstCreateLoginPdw(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_master_key_sql_server
    /// 	 : CREATE  MASTER  KEY  encryption_by_pwd
    /// </summary>
    public partial class AstCreateMasterKeySqlServer : AstDdlClause
    {
        
        private AstEncryptionByPwd _encryptionByPwd;
        
        public AstCreateMasterKeySqlServer(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
            }
        }
        
        public AstCreateMasterKeySqlServer(Position p, AstEncryptionByPwd encryptionByPwd) : 
                base(p)
        {
            this._encryptionByPwd = encryptionByPwd;
        }
        
        public AstCreateMasterKeySqlServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEncryptionByPwd EncryptionByPwd
        {
            get
            {
                return this._encryptionByPwd;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateMasterKeySqlServer(this);
        }
        
        /// <summary>
        /// create_master_key_sql_server : 
        ///    CREATE MASTER KEY encryption_by_pwd 
        /// </summary>
        public static AstCreateMasterKeySqlServer CreateMasterKeySqlServer(AstEncryptionByPwd encryptionByPwd)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(encryptionByPwd);
            return new AstCreateMasterKeySqlServer(Position.Default, list);
        }
    }
    
    /// <summary>
    /// regenerate_mater_key
    /// 	 : (FORCE)?  REGENERATE  WITH  encryption_by_pwd
    /// </summary>
    public partial class AstRegenerateMaterKey : AstRule
    {
        
        private AstEncryptionByPwd _encryptionByPwd;
        
        public AstRegenerateMaterKey(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
            }
        }
        
        public AstRegenerateMaterKey(Position p, AstEncryptionByPwd encryptionByPwd) : 
                base(p)
        {
            this._encryptionByPwd = encryptionByPwd;
        }
        
        public AstRegenerateMaterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEncryptionByPwd EncryptionByPwd
        {
            get
            {
                return this._encryptionByPwd;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRegenerateMaterKey(this);
        }
        
        /// <summary>
        /// regenerate_mater_key : 
        ///    FORCE()? REGENERATE WITH encryption_by_pwd 
        /// </summary>
        public static AstRegenerateMaterKey RegenerateMaterKey(AstEncryptionByPwd encryptionByPwd)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(encryptionByPwd);
            return new AstRegenerateMaterKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_master_key_azure_sql
    /// 	 : CREATE  MASTER  KEY  encryption_by_pwd?
    /// </summary>
    public partial class AstCreateMasterKeyAzureSql : AstDdlClause
    {
        
        private AstEncryptionByPwd _encryptionByPwd;
        
        public AstCreateMasterKeyAzureSql(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
            }
        }
        
        public AstCreateMasterKeyAzureSql(Position p, AstEncryptionByPwd encryptionByPwd) : 
                base(p)
        {
            this._encryptionByPwd = encryptionByPwd;
        }
        
        public AstCreateMasterKeyAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEncryptionByPwd EncryptionByPwd
        {
            get
            {
                return this._encryptionByPwd;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateMasterKeyAzureSql(this);
        }
        
        /// <summary>
        /// create_master_key_azure_sql : 
        ///    CREATE MASTER KEY encryption_by_pwd? 
        /// </summary>
        public static AstCreateMasterKeyAzureSql CreateMasterKeyAzureSql(AstEncryptionByPwd? encryptionByPwd)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(encryptionByPwd);
            return new AstCreateMasterKeyAzureSql(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_message_type
    /// 	 : ALTER  MESSAGE  TYPE  message_type_id  VALIDATION  EQUAL  message_validation_value
    /// </summary>
    public partial class AstAlterMessageType : AstDdlClause
    {
        
        private AstMessageTypeId _messageTypeId;
        
        private AstMessageValidationValue _messageValidationValue;
        
        public AstAlterMessageType(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeId>())
                {
                    this._messageTypeId = ((AstMessageTypeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMessageValidationValue>())
                {
                    this._messageValidationValue = ((AstMessageValidationValue)(enumerator.Current));
                }
            }
        }
        
        public AstAlterMessageType(Position p, AstMessageTypeId messageTypeId, AstMessageValidationValue messageValidationValue) : 
                base(p)
        {
            this._messageTypeId = messageTypeId;
            this._messageValidationValue = messageValidationValue;
        }
        
        public AstAlterMessageType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeId>())
                {
                    this._messageTypeId = ((AstMessageTypeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMessageValidationValue>())
                {
                    this._messageValidationValue = ((AstMessageValidationValue)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMessageTypeId MessageTypeId
        {
            get
            {
                return this._messageTypeId;
            }
        }
        
        public virtual AstMessageValidationValue MessageValidationValue
        {
            get
            {
                return this._messageValidationValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterMessageType(this);
        }
        
        /// <summary>
        /// alter_message_type : 
        ///    ALTER MESSAGE TYPE message_type_id VALIDATION EQUAL message_validation_value 
        /// </summary>
        public static AstAlterMessageType AlterMessageType(AstMessageTypeId messageTypeId, AstMessageValidationValue messageValidationValue)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(messageTypeId);
            list.Add(messageValidationValue);
            return new AstAlterMessageType(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_partition_function
    /// 	 : ALTER  PARTITION  FUNCTION  partition_function_id  LR_BRACKET  RR_BRACKET  split_or_merge  RANGE  LR_BRACKET  decimal  RR_BRACKET
    /// </summary>
    public partial class AstAlterPartitionFunction : AstDdlClause
    {
        
        private AstPartitionFunctionId _partitionFunctionId;
        
        private AstSplitOrMerge _splitOrMerge;
        
        private AstDecimal _decimal;
        
        public AstAlterPartitionFunction(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSplitOrMerge>())
                {
                    this._splitOrMerge = ((AstSplitOrMerge)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstAlterPartitionFunction(Position p, AstPartitionFunctionId partitionFunctionId, AstSplitOrMerge splitOrMerge, AstDecimal @decimal) : 
                base(p)
        {
            this._partitionFunctionId = partitionFunctionId;
            this._splitOrMerge = splitOrMerge;
            this._decimal = @decimal;
        }
        
        public AstAlterPartitionFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSplitOrMerge>())
                {
                    this._splitOrMerge = ((AstSplitOrMerge)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionFunctionId PartitionFunctionId
        {
            get
            {
                return this._partitionFunctionId;
            }
        }
        
        public virtual AstSplitOrMerge SplitOrMerge
        {
            get
            {
                return this._splitOrMerge;
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterPartitionFunction(this);
        }
        
        /// <summary>
        /// alter_partition_function : 
        ///    ALTER PARTITION FUNCTION partition_function_id ( ) split_or_merge RANGE ( decimal ) 
        /// </summary>
        public static AstAlterPartitionFunction AlterPartitionFunction(AstPartitionFunctionId partitionFunctionId, AstSplitOrMerge splitOrMerge, AstDecimal @decimal)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(partitionFunctionId);
            list.Add(splitOrMerge);
            list.Add(@decimal);
            return new AstAlterPartitionFunction(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_partition_scheme
    /// 	 : ALTER  PARTITION  SCHEME  partition_scheme_id  NEXT  USED  (file_group_id)?
    /// </summary>
    public partial class AstAlterPartitionScheme : AstDdlClause
    {
        
        private AstPartitionSchemeId _partitionSchemeId;
        
        private AstFileGroupId _fileGroupId;
        
        public AstAlterPartitionScheme(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeId>())
                {
                    this._partitionSchemeId = ((AstPartitionSchemeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterPartitionScheme(Position p, AstPartitionSchemeId partitionSchemeId, AstFileGroupId fileGroupId) : 
                base(p)
        {
            this._partitionSchemeId = partitionSchemeId;
            this._fileGroupId = fileGroupId;
        }
        
        public AstAlterPartitionScheme(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeId>())
                {
                    this._partitionSchemeId = ((AstPartitionSchemeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionSchemeId PartitionSchemeId
        {
            get
            {
                return this._partitionSchemeId;
            }
        }
        
        public virtual AstFileGroupId FileGroupId
        {
            get
            {
                return this._fileGroupId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterPartitionScheme(this);
        }
        
        /// <summary>
        /// alter_partition_scheme : 
        ///    ALTER PARTITION SCHEME partition_scheme_id NEXT USED file_group_id()? 
        /// </summary>
        public static AstAlterPartitionScheme AlterPartitionScheme(AstPartitionSchemeId partitionSchemeId, AstFileGroupId? fileGroupId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(partitionSchemeId);
            list.Add(fileGroupId);
            return new AstAlterPartitionScheme(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_remote_service_binding
    /// 	 : ALTER  REMOTE  SERVICE  BINDING  binding_id  WITH  (USER  EQUAL  user_id)?  (COMMA  ANONYMOUS  EQUAL  on_off)?
    /// </summary>
    public partial class AstAlterRemoteServiceBinding : AstDdlClause
    {
        
        private AstBindingId _bindingId;
        
        private AstUserId _userId;
        
        private AstOnOff _onOff;
        
        public AstAlterRemoteServiceBinding(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingId>())
                {
                    this._bindingId = ((AstBindingId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstAlterRemoteServiceBinding(Position p, AstBindingId bindingId, AstUserId userId, AstOnOff onOff) : 
                base(p)
        {
            this._bindingId = bindingId;
            this._userId = userId;
            this._onOff = onOff;
        }
        
        public AstAlterRemoteServiceBinding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingId>())
                {
                    this._bindingId = ((AstBindingId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBindingId BindingId
        {
            get
            {
                return this._bindingId;
            }
        }
        
        public virtual AstUserId UserId
        {
            get
            {
                return this._userId;
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterRemoteServiceBinding(this);
        }
        
        /// <summary>
        /// alter_remote_service_binding : 
        ///    ALTER REMOTE SERVICE BINDING binding_id WITH USER EQUAL user_id , ANONYMOUS EQUAL on_off 
        /// </summary>
        public static AstAlterRemoteServiceBinding AlterRemoteServiceBinding(AstBindingId bindingId, AstUserId userId, AstOnOff onOff)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(bindingId);
            list.Add(userId);
            list.Add(onOff);
            return new AstAlterRemoteServiceBinding(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_remote_service_binding
    /// 	 : CREATE  REMOTE  SERVICE  BINDING  binding_id  (AUTHORIZATION  owner_id)?  TO  SERVICE  remote_service_name = stringtext  WITH  (USER  EQUAL  user_id)?  (COMMA  ANONYMOUS  EQUAL  on_off)?
    /// </summary>
    public partial class AstCreateRemoteServiceBinding : AstDdlClause
    {
        
        private AstBindingId _bindingId;
        
        private AstOwnerId _ownerId;
        
        private AstStringtext _stringtext;
        
        private AstUserId _userId;
        
        private AstOnOff _onOff;
        
        public AstCreateRemoteServiceBinding(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingId>())
                {
                    this._bindingId = ((AstBindingId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstCreateRemoteServiceBinding(Position p, AstBindingId bindingId, AstOwnerId ownerId, AstStringtext stringtext, AstUserId userId, AstOnOff onOff) : 
                base(p)
        {
            this._bindingId = bindingId;
            this._ownerId = ownerId;
            this._stringtext = stringtext;
            this._userId = userId;
            this._onOff = onOff;
        }
        
        public AstCreateRemoteServiceBinding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingId>())
                {
                    this._bindingId = ((AstBindingId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBindingId BindingId
        {
            get
            {
                return this._bindingId;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstUserId UserId
        {
            get
            {
                return this._userId;
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateRemoteServiceBinding(this);
        }
        
        /// <summary>
        /// create_remote_service_binding : 
        ///    CREATE REMOTE SERVICE BINDING binding_id AUTHORIZATION owner_id TO SERVICE remote_service_name=stringtext WITH USER EQUAL user_id , ANONYMOUS EQUAL on_off 
        /// </summary>
        public static AstCreateRemoteServiceBinding CreateRemoteServiceBinding(AstBindingId bindingId, AstOwnerId ownerId, AstStringtext remoteServiceName, AstUserId userId, AstOnOff onOff)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(bindingId);
            list.Add(ownerId);
            list.Add(remoteServiceName);
            list.Add(userId);
            list.Add(onOff);
            return new AstCreateRemoteServiceBinding(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_resource_pool
    /// 	 : CREATE  RESOURCE  POOL  pool_id  (WITH  LR_BRACKET  (COMMA?  MIN_CPU_PERCENT  EQUAL  min_cpu_percent = decimal)?  (COMMA?  MAX_CPU_PERCENT  EQUAL  max_cpu_percent = decimal)?  (COMMA?  CAP_CPU_PERCENT  EQUAL  cap_cpu_percent = decimal)?  (COMMA?  AFFINITY  SCHEDULER  EQUAL  (AUTO | LR_BRACKET  decimal_ranges  RR_BRACKET | NUMANODE  EQUAL  LR_BRACKET  decimal_ranges  RR_BRACKET))?  (COMMA?  MIN_MEMORY_PERCENT  EQUAL  min_memory_percent = decimal)?  (COMMA?  MAX_MEMORY_PERCENT  EQUAL  max_memory_percent = decimal)?  (COMMA?  MIN_IOPS_PER_VOLUME  EQUAL  min_tops_percent = decimal)?  (COMMA?  MAX_IOPS_PER_VOLUME  EQUAL  max_tops_percent = decimal)?  RR_BRACKET)?
    /// </summary>
    public partial class AstCreateResourcePool : AstDdlClause
    {
        
        private AstPoolId _poolId;
        
        private AstDecimal _decimal;
        
        private AstDecimalRanges _decimalRanges;
        
        public AstCreateResourcePool(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalRanges>())
                {
                    this._decimalRanges = ((AstDecimalRanges)(enumerator.Current));
                }
            }
        }
        
        public AstCreateResourcePool(Position p, AstPoolId poolId, AstDecimal @decimal, AstDecimalRanges decimalRanges) : 
                base(p)
        {
            this._poolId = poolId;
            this._decimal = @decimal;
            this._decimalRanges = decimalRanges;
        }
        
        public AstCreateResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalRanges>())
                {
                    this._decimalRanges = ((AstDecimalRanges)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolId PoolId
        {
            get
            {
                return this._poolId;
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstDecimalRanges DecimalRanges
        {
            get
            {
                return this._decimalRanges;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateResourcePool(this);
        }
        
        /// <summary>
        /// create_resource_pool : 
        ///    CREATE RESOURCE POOL pool_id WITH ( COMMA? MIN_CPU_PERCENT EQUAL min_cpu_percent=decimal COMMA? MAX_CPU_PERCENT EQUAL max_cpu_percent=decimal COMMA? CAP_CPU_PERCENT EQUAL cap_cpu_percent=decimal COMMA? AFFINITY SCHEDULER EQUAL AUTO COMMA? MIN_MEMORY_PERCENT EQUAL min_memory_percent=decimal COMMA? MAX_MEMORY_PERCENT EQUAL max_memory_percent=decimal COMMA? MIN_IOPS_PER_VOLUME EQUAL min_tops_percent=decimal COMMA? MAX_IOPS_PER_VOLUME EQUAL max_tops_percent=decimal ) 
        /// </summary>
        public static AstCreateResourcePool CreateResourcePool(AstPoolId poolId, AstDecimal minCpuPercent, AstDecimal maxCpuPercent, AstDecimal capCpuPercent, AstDecimal minMemoryPercent, AstDecimal maxMemoryPercent, AstDecimal minTopsPercent, AstDecimal maxTopsPercent)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(poolId);
            list.Add(minCpuPercent);
            list.Add(maxCpuPercent);
            list.Add(capCpuPercent);
            list.Add(minMemoryPercent);
            list.Add(maxMemoryPercent);
            list.Add(minTopsPercent);
            list.Add(maxTopsPercent);
            return new AstCreateResourcePool(Position.Default, list);
        }
        
        /// <summary>
        /// create_resource_pool : 
        ///    CREATE RESOURCE POOL pool_id WITH ( COMMA? MIN_CPU_PERCENT EQUAL min_cpu_percent=decimal COMMA? MAX_CPU_PERCENT EQUAL max_cpu_percent=decimal COMMA? CAP_CPU_PERCENT EQUAL cap_cpu_percent=decimal COMMA? AFFINITY SCHEDULER EQUAL ( decimal_ranges ) COMMA? MIN_MEMORY_PERCENT EQUAL min_memory_percent=decimal COMMA? MAX_MEMORY_PERCENT EQUAL max_memory_percent=decimal COMMA? MIN_IOPS_PER_VOLUME EQUAL min_tops_percent=decimal COMMA? MAX_IOPS_PER_VOLUME EQUAL max_tops_percent=decimal ) 
        /// </summary>
        public static AstCreateResourcePool CreateResourcePool(AstPoolId poolId, AstDecimal minCpuPercent, AstDecimal maxCpuPercent, AstDecimal capCpuPercent, AstDecimalRanges decimalRanges, AstDecimal minMemoryPercent, AstDecimal maxMemoryPercent, AstDecimal minTopsPercent, AstDecimal maxTopsPercent)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(poolId);
            list.Add(minCpuPercent);
            list.Add(maxCpuPercent);
            list.Add(capCpuPercent);
            list.Add(decimalRanges);
            list.Add(minMemoryPercent);
            list.Add(maxMemoryPercent);
            list.Add(minTopsPercent);
            list.Add(maxTopsPercent);
            return new AstCreateResourcePool(Position.Default, list);
        }
    }
    
    /// <summary>
    /// decimal_range
    /// 	 : dec_start = decimal
    /// 	 | dec_start = decimal  TO  dec_end = decimal
    /// </summary>
    public partial class AstDecimalRange : AstRule
    {
        
        private AstDecimal _decimal;
        
        public AstDecimalRange(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstDecimalRange(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstDecimalRange(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecimalRange(this);
        }
        
        /// <summary>
        /// decimal_range : 
        ///    dec_start=decimal 
        /// </summary>
        public static AstDecimalRange DecimalRange(AstDecimal decStart)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(decStart);
            return new AstDecimalRange(Position.Default, list);
        }
        
        /// <summary>
        /// decimal_range : 
        ///    dec_start=decimal TO dec_end=decimal 
        /// </summary>
        public static AstDecimalRange DecimalRange(AstDecimal decStart, AstDecimal decEnd)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(decStart);
            list.Add(decEnd);
            return new AstDecimalRange(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_db_role
    /// 	 : CREATE  ROLE  role_id  (AUTHORIZATION  owner_id)?
    /// </summary>
    public partial class AstCreateDbRole : AstDdlClause
    {
        
        private AstRoleId _roleId;
        
        private AstOwnerId _ownerId;
        
        public AstCreateDbRole(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateDbRole(Position p, AstRoleId roleId, AstOwnerId ownerId) : 
                base(p)
        {
            this._roleId = roleId;
            this._ownerId = ownerId;
        }
        
        public AstCreateDbRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleId RoleId
        {
            get
            {
                return this._roleId;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateDbRole(this);
        }
        
        /// <summary>
        /// create_db_role : 
        ///    CREATE ROLE role_id AUTHORIZATION owner_id 
        /// </summary>
        public static AstCreateDbRole CreateDbRole(AstRoleId roleId, AstOwnerId ownerId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(roleId);
            list.Add(ownerId);
            return new AstCreateDbRole(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_route
    /// 	 : CREATE  ROUTE  route_id  (AUTHORIZATION  owner_id)?  WITH  (COMMA?  SERVICE_NAME  EQUAL  route_service_name = stringtext)?  (COMMA?  BROKER_INSTANCE  EQUAL  broker_instance_identifier = stringtext)?  (COMMA?  LIFETIME  EQUAL  lifetime = decimal)?  COMMA?  ADDRESS  EQUAL  address = stringtext  (COMMA  MIRROR_ADDRESS  EQUAL  mirror_address = stringtext)?
    /// </summary>
    public partial class AstCreateRoute : AstDdlClause
    {
        
        private AstRouteId _routeId;
        
        private AstOwnerId _ownerId;
        
        private AstStringtext _stringtext;
        
        private AstDecimal _decimal;
        
        public AstCreateRoute(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteId>())
                {
                    this._routeId = ((AstRouteId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstCreateRoute(Position p, AstRouteId routeId, AstOwnerId ownerId, AstStringtext stringtext, AstDecimal @decimal) : 
                base(p)
        {
            this._routeId = routeId;
            this._ownerId = ownerId;
            this._stringtext = stringtext;
            this._decimal = @decimal;
        }
        
        public AstCreateRoute(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteId>())
                {
                    this._routeId = ((AstRouteId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRouteId RouteId
        {
            get
            {
                return this._routeId;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateRoute(this);
        }
        
        /// <summary>
        /// create_route : 
        ///    CREATE ROUTE route_id AUTHORIZATION owner_id WITH ,? SERVICE_NAME EQUAL route_service_name=stringtext ,? BROKER_INSTANCE EQUAL broker_instance_identifier=stringtext ,? LIFETIME EQUAL lifetime=decimal ,? ADDRESS EQUAL address=stringtext , MIRROR_ADDRESS EQUAL mirror_address=stringtext 
        /// </summary>
        public static AstCreateRoute CreateRoute(AstRouteId routeId, AstOwnerId ownerId, AstStringtext routeServiceName, AstStringtext brokerInstanceIdentifier, AstDecimal lifetime, AstStringtext address, AstStringtext mirrorAddress)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(routeId);
            list.Add(ownerId);
            list.Add(routeServiceName);
            list.Add(brokerInstanceIdentifier);
            list.Add(lifetime);
            list.Add(address);
            list.Add(mirrorAddress);
            return new AstCreateRoute(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_rule
    /// 	 : CREATE  RULE  schema_rule_ref  AS  search_condition
    /// </summary>
    public partial class AstCreateRule : AstDdlClause
    {
        
        private AstSchemaRuleRef _schemaRuleRef;
        
        private AstSearchCondition _searchCondition;
        
        public AstCreateRule(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaRuleRef>())
                {
                    this._schemaRuleRef = ((AstSchemaRuleRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstCreateRule(Position p, AstSchemaRuleRef schemaRuleRef, AstSearchCondition searchCondition) : 
                base(p)
        {
            this._schemaRuleRef = schemaRuleRef;
            this._searchCondition = searchCondition;
        }
        
        public AstCreateRule(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaRuleRef>())
                {
                    this._schemaRuleRef = ((AstSchemaRuleRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaRuleRef SchemaRuleRef
        {
            get
            {
                return this._schemaRuleRef;
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateRule(this);
        }
        
        /// <summary>
        /// create_rule : 
        ///    CREATE RULE schema_rule_ref AS search_condition 
        /// </summary>
        public static AstCreateRule CreateRule(AstSchemaRuleRef schemaRuleRef, AstSearchCondition searchCondition)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(schemaRuleRef);
            list.Add(searchCondition);
            return new AstCreateRule(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_schema_sql
    /// 	 : ALTER  SCHEMA  schema_id  TRANSFER  transfert_target?  id_dot_id
    /// </summary>
    public partial class AstAlterSchemaSql : AstDdlClause
    {
        
        private AstSchemaId _schemaId;
        
        private AstTransfertTarget _transfertTarget;
        
        private AstIdDotId _idDotId;
        
        public AstAlterSchemaSql(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTransfertTarget>())
                {
                    this._transfertTarget = ((AstTransfertTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIdDotId>())
                {
                    this._idDotId = ((AstIdDotId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterSchemaSql(Position p, AstSchemaId schemaId, AstTransfertTarget transfertTarget, AstIdDotId idDotId) : 
                base(p)
        {
            this._schemaId = schemaId;
            this._transfertTarget = transfertTarget;
            this._idDotId = idDotId;
        }
        
        public AstAlterSchemaSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTransfertTarget>())
                {
                    this._transfertTarget = ((AstTransfertTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIdDotId>())
                {
                    this._idDotId = ((AstIdDotId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaId SchemaId
        {
            get
            {
                return this._schemaId;
            }
        }
        
        public virtual AstTransfertTarget TransfertTarget
        {
            get
            {
                return this._transfertTarget;
            }
        }
        
        public virtual AstIdDotId IdDotId
        {
            get
            {
                return this._idDotId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSchemaSql(this);
        }
        
        /// <summary>
        /// alter_schema_sql : 
        ///    ALTER SCHEMA schema_id TRANSFER transfert_target? id_dot_id 
        /// </summary>
        public static AstAlterSchemaSql AlterSchemaSql(AstSchemaId schemaId, AstTransfertTarget? transfertTarget, AstIdDotId idDotId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(schemaId);
            list.Add(transfertTarget);
            list.Add(idDotId);
            return new AstAlterSchemaSql(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_schema
    /// 	 : CREATE  SCHEMA  create_schema_name  create_schema_targets?
    /// </summary>
    public partial class AstCreateSchema : AstDdlClause
    {
        
        private AstCreateSchemaName _createSchemaName;
        
        private AstCreateSchemaTargets _createSchemaTargets;
        
        public AstCreateSchema(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateSchemaName>())
                {
                    this._createSchemaName = ((AstCreateSchemaName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSchemaTargets>())
                {
                    this._createSchemaTargets = ((AstCreateSchemaTargets)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSchema(Position p, AstCreateSchemaName createSchemaName, AstCreateSchemaTargets createSchemaTargets) : 
                base(p)
        {
            this._createSchemaName = createSchemaName;
            this._createSchemaTargets = createSchemaTargets;
        }
        
        public AstCreateSchema(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateSchemaName>())
                {
                    this._createSchemaName = ((AstCreateSchemaName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSchemaTargets>())
                {
                    this._createSchemaTargets = ((AstCreateSchemaTargets)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCreateSchemaName CreateSchemaName
        {
            get
            {
                return this._createSchemaName;
            }
        }
        
        public virtual AstCreateSchemaTargets CreateSchemaTargets
        {
            get
            {
                return this._createSchemaTargets;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSchema(this);
        }
        
        /// <summary>
        /// create_schema : 
        ///    CREATE SCHEMA create_schema_name create_schema_targets? 
        /// </summary>
        public static AstCreateSchema CreateSchema(AstCreateSchemaName createSchemaName, AstCreateSchemaTargets? createSchemaTargets)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(createSchemaName);
            list.Add(createSchemaTargets);
            return new AstCreateSchema(Position.Default, list);
        }
    }
    
    /// <summary>
    /// schema_authorization
    /// 	 : AUTHORIZATION  owner_id
    /// </summary>
    public partial class AstSchemaAuthorization : AstRule
    {
        
        private AstOwnerId _ownerId;
        
        public AstSchemaAuthorization(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaAuthorization(Position p, AstOwnerId ownerId) : 
                base(p)
        {
            this._ownerId = ownerId;
        }
        
        public AstSchemaAuthorization(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaAuthorization(this);
        }
        
        /// <summary>
        /// schema_authorization : 
        ///    AUTHORIZATION owner_id 
        /// </summary>
        public static AstSchemaAuthorization SchemaAuthorization(AstOwnerId ownerId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(ownerId);
            return new AstSchemaAuthorization(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_schema_azure_sql_dw_and_pdw
    /// 	 : CREATE  SCHEMA  schema_id  (AUTHORIZATION  owner_id)?
    /// </summary>
    public partial class AstCreateSchemaAzureSqlDwAndPdw : AstDdlClause
    {
        
        private AstSchemaId _schemaId;
        
        private AstOwnerId _ownerId;
        
        public AstCreateSchemaAzureSqlDwAndPdw(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSchemaAzureSqlDwAndPdw(Position p, AstSchemaId schemaId, AstOwnerId ownerId) : 
                base(p)
        {
            this._schemaId = schemaId;
            this._ownerId = ownerId;
        }
        
        public AstCreateSchemaAzureSqlDwAndPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaId SchemaId
        {
            get
            {
                return this._schemaId;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSchemaAzureSqlDwAndPdw(this);
        }
        
        /// <summary>
        /// create_schema_azure_sql_dw_and_pdw : 
        ///    CREATE SCHEMA schema_id AUTHORIZATION owner_id 
        /// </summary>
        public static AstCreateSchemaAzureSqlDwAndPdw CreateSchemaAzureSqlDwAndPdw(AstSchemaId schemaId, AstOwnerId ownerId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(schemaId);
            list.Add(ownerId);
            return new AstCreateSchemaAzureSqlDwAndPdw(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_schema_azure_sql_dw_and_pdw
    /// 	 : ALTER  SCHEMA  schema_id  TRANSFER  (OBJECT  DOUBLE_COLON)?  id_dot_id
    /// </summary>
    public partial class AstAlterSchemaAzureSqlDwAndPdw : AstDdlClause
    {
        
        private AstSchemaId _schemaId;
        
        private AstIdDotId _idDotId;
        
        public AstAlterSchemaAzureSqlDwAndPdw(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIdDotId>())
                {
                    this._idDotId = ((AstIdDotId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterSchemaAzureSqlDwAndPdw(Position p, AstSchemaId schemaId, AstIdDotId idDotId) : 
                base(p)
        {
            this._schemaId = schemaId;
            this._idDotId = idDotId;
        }
        
        public AstAlterSchemaAzureSqlDwAndPdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIdDotId>())
                {
                    this._idDotId = ((AstIdDotId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaId SchemaId
        {
            get
            {
                return this._schemaId;
            }
        }
        
        public virtual AstIdDotId IdDotId
        {
            get
            {
                return this._idDotId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSchemaAzureSqlDwAndPdw(this);
        }
        
        /// <summary>
        /// alter_schema_azure_sql_dw_and_pdw : 
        ///    ALTER SCHEMA schema_id TRANSFER OBJECT :: id_dot_id 
        /// </summary>
        public static AstAlterSchemaAzureSqlDwAndPdw AlterSchemaAzureSqlDwAndPdw(AstSchemaId schemaId, AstIdDotId idDotId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(schemaId);
            list.Add(idDotId);
            return new AstAlterSchemaAzureSqlDwAndPdw(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_search_property_list
    /// 	 : CREATE  SEARCH  PROPERTY  LIST  source_list_id  (FROM  database_source_list_ref)?  (AUTHORIZATION  owner_id)?
    /// </summary>
    public partial class AstCreateSearchPropertyList : AstDdlClause
    {
        
        private AstSourceListId _sourceListId;
        
        private AstDatabaseSourceListRef _databaseSourceListRef;
        
        private AstOwnerId _ownerId;
        
        public AstCreateSearchPropertyList(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSourceListId>())
                {
                    this._sourceListId = ((AstSourceListId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseSourceListRef>())
                {
                    this._databaseSourceListRef = ((AstDatabaseSourceListRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSearchPropertyList(Position p, AstSourceListId sourceListId, AstDatabaseSourceListRef databaseSourceListRef, AstOwnerId ownerId) : 
                base(p)
        {
            this._sourceListId = sourceListId;
            this._databaseSourceListRef = databaseSourceListRef;
            this._ownerId = ownerId;
        }
        
        public AstCreateSearchPropertyList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSourceListId>())
                {
                    this._sourceListId = ((AstSourceListId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseSourceListRef>())
                {
                    this._databaseSourceListRef = ((AstDatabaseSourceListRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSourceListId SourceListId
        {
            get
            {
                return this._sourceListId;
            }
        }
        
        public virtual AstDatabaseSourceListRef DatabaseSourceListRef
        {
            get
            {
                return this._databaseSourceListRef;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSearchPropertyList(this);
        }
        
        /// <summary>
        /// create_search_property_list : 
        ///    CREATE SEARCH PROPERTY LIST source_list_id FROM database_source_list_ref AUTHORIZATION owner_id 
        /// </summary>
        public static AstCreateSearchPropertyList CreateSearchPropertyList(AstSourceListId sourceListId, AstDatabaseSourceListRef databaseSourceListRef, AstOwnerId ownerId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(sourceListId);
            list.Add(databaseSourceListRef);
            list.Add(ownerId);
            return new AstCreateSearchPropertyList(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_security_policy
    /// 	 : CREATE  SECURITY  POLICY  schema_security_policy_ref  create_security_policy_adds  (WITH  LR_BRACKET  STATE  EQUAL  on_off  schema_binding?  RR_BRACKET)?  (NOT  FOR  REPLICATION)?
    /// </summary>
    public partial class AstCreateSecurityPolicy : AstDdlClause
    {
        
        private AstSchemaSecurityPolicyRef _schemaSecurityPolicyRef;
        
        private AstCreateSecurityPolicyAdds _createSecurityPolicyAdds;
        
        private AstOnOff _onOff;
        
        private AstSchemaBinding _schemaBinding;
        
        public AstCreateSecurityPolicy(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSecurityPolicyRef>())
                {
                    this._schemaSecurityPolicyRef = ((AstSchemaSecurityPolicyRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSecurityPolicyAdds>())
                {
                    this._createSecurityPolicyAdds = ((AstCreateSecurityPolicyAdds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaBinding>())
                {
                    this._schemaBinding = ((AstSchemaBinding)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSecurityPolicy(Position p, AstSchemaSecurityPolicyRef schemaSecurityPolicyRef, AstCreateSecurityPolicyAdds createSecurityPolicyAdds, AstOnOff onOff, AstSchemaBinding schemaBinding) : 
                base(p)
        {
            this._schemaSecurityPolicyRef = schemaSecurityPolicyRef;
            this._createSecurityPolicyAdds = createSecurityPolicyAdds;
            this._onOff = onOff;
            this._schemaBinding = schemaBinding;
        }
        
        public AstCreateSecurityPolicy(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSecurityPolicyRef>())
                {
                    this._schemaSecurityPolicyRef = ((AstSchemaSecurityPolicyRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSecurityPolicyAdds>())
                {
                    this._createSecurityPolicyAdds = ((AstCreateSecurityPolicyAdds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaBinding>())
                {
                    this._schemaBinding = ((AstSchemaBinding)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSecurityPolicyRef SchemaSecurityPolicyRef
        {
            get
            {
                return this._schemaSecurityPolicyRef;
            }
        }
        
        public virtual AstCreateSecurityPolicyAdds CreateSecurityPolicyAdds
        {
            get
            {
                return this._createSecurityPolicyAdds;
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public virtual AstSchemaBinding SchemaBinding
        {
            get
            {
                return this._schemaBinding;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSecurityPolicy(this);
        }
        
        /// <summary>
        /// create_security_policy : 
        ///    CREATE SECURITY POLICY schema_security_policy_ref create_security_policy_adds WITH ( STATE EQUAL on_off schema_binding? ) NOT FOR REPLICATION 
        /// </summary>
        public static AstCreateSecurityPolicy CreateSecurityPolicy(AstSchemaSecurityPolicyRef schemaSecurityPolicyRef, AstCreateSecurityPolicyAdds createSecurityPolicyAdds, AstOnOff onOff, AstSchemaBinding? schemaBinding)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(schemaSecurityPolicyRef);
            list.Add(createSecurityPolicyAdds);
            list.Add(onOff);
            list.Add(schemaBinding);
            return new AstCreateSecurityPolicy(Position.Default, list);
        }
    }
    
    /// <summary>
    /// schema_binding
    /// 	 : SCHEMABINDING  on_off
    /// </summary>
    public partial class AstSchemaBinding : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstSchemaBinding(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaBinding(Position p, AstOnOff onOff) : 
                base(p)
        {
            this._onOff = onOff;
        }
        
        public AstSchemaBinding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaBinding(this);
        }
        
        /// <summary>
        /// schema_binding : 
        ///    SCHEMABINDING on_off 
        /// </summary>
        public static AstSchemaBinding SchemaBinding(AstOnOff onOff)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(onOff);
            return new AstSchemaBinding(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_security_policy_add
    /// 	 : ADD  filter_block?  PREDICATE  schema_security_predicate_function_id  LR_BRACKET  column_or_argument_ids  RR_BRACKET  ON  database_schema_table_ref  schema_table_ref_impacts?
    /// </summary>
    public partial class AstCreateSecurityPolicyAdd : AstRule
    {
        
        private AstFilterBlock _filterBlock;
        
        private AstSchemaSecurityPredicateFunctionId _schemaSecurityPredicateFunctionId;
        
        private AstColumnOrArgumentIds _columnOrArgumentIds;
        
        private AstDatabaseSchemaTableRef _databaseSchemaTableRef;
        
        private AstSchemaTableRefImpacts _schemaTableRefImpacts;
        
        public AstCreateSecurityPolicyAdd(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFilterBlock>())
                {
                    this._filterBlock = ((AstFilterBlock)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaSecurityPredicateFunctionId>())
                {
                    this._schemaSecurityPredicateFunctionId = ((AstSchemaSecurityPredicateFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnOrArgumentIds>())
                {
                    this._columnOrArgumentIds = ((AstColumnOrArgumentIds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaTableRefImpacts>())
                {
                    this._schemaTableRefImpacts = ((AstSchemaTableRefImpacts)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSecurityPolicyAdd(Position p, AstFilterBlock filterBlock, AstSchemaSecurityPredicateFunctionId schemaSecurityPredicateFunctionId, AstColumnOrArgumentIds columnOrArgumentIds, AstDatabaseSchemaTableRef databaseSchemaTableRef, AstSchemaTableRefImpacts schemaTableRefImpacts) : 
                base(p)
        {
            this._filterBlock = filterBlock;
            this._schemaSecurityPredicateFunctionId = schemaSecurityPredicateFunctionId;
            this._columnOrArgumentIds = columnOrArgumentIds;
            this._databaseSchemaTableRef = databaseSchemaTableRef;
            this._schemaTableRefImpacts = schemaTableRefImpacts;
        }
        
        public AstCreateSecurityPolicyAdd(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFilterBlock>())
                {
                    this._filterBlock = ((AstFilterBlock)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaSecurityPredicateFunctionId>())
                {
                    this._schemaSecurityPredicateFunctionId = ((AstSchemaSecurityPredicateFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnOrArgumentIds>())
                {
                    this._columnOrArgumentIds = ((AstColumnOrArgumentIds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaTableRefImpacts>())
                {
                    this._schemaTableRefImpacts = ((AstSchemaTableRefImpacts)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFilterBlock FilterBlock
        {
            get
            {
                return this._filterBlock;
            }
        }
        
        public virtual AstSchemaSecurityPredicateFunctionId SchemaSecurityPredicateFunctionId
        {
            get
            {
                return this._schemaSecurityPredicateFunctionId;
            }
        }
        
        public virtual AstColumnOrArgumentIds ColumnOrArgumentIds
        {
            get
            {
                return this._columnOrArgumentIds;
            }
        }
        
        public virtual AstDatabaseSchemaTableRef DatabaseSchemaTableRef
        {
            get
            {
                return this._databaseSchemaTableRef;
            }
        }
        
        public virtual AstSchemaTableRefImpacts SchemaTableRefImpacts
        {
            get
            {
                return this._schemaTableRefImpacts;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSecurityPolicyAdd(this);
        }
        
        /// <summary>
        /// create_security_policy_add : 
        ///    ADD filter_block? PREDICATE schema_security_predicate_function_id ( column_or_argument_ids ) ON database_schema_table_ref schema_table_ref_impacts? 
        /// </summary>
        public static AstCreateSecurityPolicyAdd CreateSecurityPolicyAdd(AstFilterBlock? filterBlock, AstSchemaSecurityPredicateFunctionId schemaSecurityPredicateFunctionId, AstColumnOrArgumentIds columnOrArgumentIds, AstDatabaseSchemaTableRef databaseSchemaTableRef, AstSchemaTableRefImpacts? schemaTableRefImpacts)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(filterBlock);
            list.Add(schemaSecurityPredicateFunctionId);
            list.Add(columnOrArgumentIds);
            list.Add(databaseSchemaTableRef);
            list.Add(schemaTableRefImpacts);
            return new AstCreateSecurityPolicyAdd(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_sequence
    /// 	 : ALTER  SEQUENCE  schema_sequence_ref  alter_sequence_restart?  alter_sequence_increment?  alter_sequence_min_value?  alter_sequence_max_value  cycle?  sequence_cache?
    /// </summary>
    public partial class AstAlterSequence : AstDdlClause
    {
        
        private AstSchemaSequenceRef _schemaSequenceRef;
        
        private AstAlterSequenceRestart _alterSequenceRestart;
        
        private AstAlterSequenceIncrement _alterSequenceIncrement;
        
        private AstAlterSequenceMinValue _alterSequenceMinValue;
        
        private AstAlterSequenceMaxValue _alterSequenceMaxValue;
        
        private AstCycle _cycle;
        
        private AstSequenceCache _sequenceCache;
        
        public AstAlterSequence(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSequenceRef>())
                {
                    this._schemaSequenceRef = ((AstSchemaSequenceRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceRestart>())
                {
                    this._alterSequenceRestart = ((AstAlterSequenceRestart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceIncrement>())
                {
                    this._alterSequenceIncrement = ((AstAlterSequenceIncrement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceMinValue>())
                {
                    this._alterSequenceMinValue = ((AstAlterSequenceMinValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceMaxValue>())
                {
                    this._alterSequenceMaxValue = ((AstAlterSequenceMaxValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCycle>())
                {
                    this._cycle = ((AstCycle)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSequenceCache>())
                {
                    this._sequenceCache = ((AstSequenceCache)(enumerator.Current));
                }
            }
        }
        
        public AstAlterSequence(Position p, AstSchemaSequenceRef schemaSequenceRef, AstAlterSequenceRestart alterSequenceRestart, AstAlterSequenceIncrement alterSequenceIncrement, AstAlterSequenceMinValue alterSequenceMinValue, AstAlterSequenceMaxValue alterSequenceMaxValue, AstCycle cycle, AstSequenceCache sequenceCache) : 
                base(p)
        {
            this._schemaSequenceRef = schemaSequenceRef;
            this._alterSequenceRestart = alterSequenceRestart;
            this._alterSequenceIncrement = alterSequenceIncrement;
            this._alterSequenceMinValue = alterSequenceMinValue;
            this._alterSequenceMaxValue = alterSequenceMaxValue;
            this._cycle = cycle;
            this._sequenceCache = sequenceCache;
        }
        
        public AstAlterSequence(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSequenceRef>())
                {
                    this._schemaSequenceRef = ((AstSchemaSequenceRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceRestart>())
                {
                    this._alterSequenceRestart = ((AstAlterSequenceRestart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceIncrement>())
                {
                    this._alterSequenceIncrement = ((AstAlterSequenceIncrement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceMinValue>())
                {
                    this._alterSequenceMinValue = ((AstAlterSequenceMinValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceMaxValue>())
                {
                    this._alterSequenceMaxValue = ((AstAlterSequenceMaxValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCycle>())
                {
                    this._cycle = ((AstCycle)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSequenceCache>())
                {
                    this._sequenceCache = ((AstSequenceCache)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSequenceRef SchemaSequenceRef
        {
            get
            {
                return this._schemaSequenceRef;
            }
        }
        
        public virtual AstAlterSequenceRestart AlterSequenceRestart
        {
            get
            {
                return this._alterSequenceRestart;
            }
        }
        
        public virtual AstAlterSequenceIncrement AlterSequenceIncrement
        {
            get
            {
                return this._alterSequenceIncrement;
            }
        }
        
        public virtual AstAlterSequenceMinValue AlterSequenceMinValue
        {
            get
            {
                return this._alterSequenceMinValue;
            }
        }
        
        public virtual AstAlterSequenceMaxValue AlterSequenceMaxValue
        {
            get
            {
                return this._alterSequenceMaxValue;
            }
        }
        
        public virtual AstCycle Cycle
        {
            get
            {
                return this._cycle;
            }
        }
        
        public virtual AstSequenceCache SequenceCache
        {
            get
            {
                return this._sequenceCache;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSequence(this);
        }
        
        /// <summary>
        /// alter_sequence : 
        ///    ALTER SEQUENCE schema_sequence_ref alter_sequence_restart? alter_sequence_increment? alter_sequence_min_value? alter_sequence_max_value cycle? sequence_cache? 
        /// </summary>
        public static AstAlterSequence AlterSequence(AstSchemaSequenceRef schemaSequenceRef, AstAlterSequenceRestart? alterSequenceRestart, AstAlterSequenceIncrement? alterSequenceIncrement, AstAlterSequenceMinValue? alterSequenceMinValue, AstAlterSequenceMaxValue alterSequenceMaxValue, AstCycle? cycle, AstSequenceCache? sequenceCache)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(schemaSequenceRef);
            list.Add(alterSequenceRestart);
            list.Add(alterSequenceIncrement);
            list.Add(alterSequenceMinValue);
            list.Add(alterSequenceMaxValue);
            list.Add(cycle);
            list.Add(sequenceCache);
            return new AstAlterSequence(Position.Default, list);
        }
    }
    
    /// <summary>
    /// max_value_decimal
    /// 	 : MAXVALUE  decimal
    /// </summary>
    public partial class AstMaxValueDecimal : AstRule
    {
        
        private AstDecimal _decimal;
        
        public AstMaxValueDecimal(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstMaxValueDecimal(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstMaxValueDecimal(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMaxValueDecimal(this);
        }
        
        /// <summary>
        /// max_value_decimal : 
        ///    MAXVALUE decimal 
        /// </summary>
        public static AstMaxValueDecimal MaxValueDecimal(AstDecimal @decimal)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(@decimal);
            return new AstMaxValueDecimal(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_sequence
    /// 	 : CREATE  SEQUENCE  schema_sequence_ref  (AS  data_type)?  create_sequence_start?  create_sequence_increment?  create_sequence_min_value?  create_sequence_max_value?  cycle?  sequence_cache?
    /// </summary>
    public partial class AstCreateSequence : AstDdlClause
    {
        
        private AstSchemaSequenceRef _schemaSequenceRef;
        
        private AstDataType _dataType;
        
        private AstCreateSequenceStart _createSequenceStart;
        
        private AstCreateSequenceIncrement _createSequenceIncrement;
        
        private AstCreateSequenceMinValue _createSequenceMinValue;
        
        private AstCreateSequenceMaxValue _createSequenceMaxValue;
        
        private AstCycle _cycle;
        
        private AstSequenceCache _sequenceCache;
        
        public AstCreateSequence(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSequenceRef>())
                {
                    this._schemaSequenceRef = ((AstSchemaSequenceRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceStart>())
                {
                    this._createSequenceStart = ((AstCreateSequenceStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceIncrement>())
                {
                    this._createSequenceIncrement = ((AstCreateSequenceIncrement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceMinValue>())
                {
                    this._createSequenceMinValue = ((AstCreateSequenceMinValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceMaxValue>())
                {
                    this._createSequenceMaxValue = ((AstCreateSequenceMaxValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCycle>())
                {
                    this._cycle = ((AstCycle)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSequenceCache>())
                {
                    this._sequenceCache = ((AstSequenceCache)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSequence(Position p, AstSchemaSequenceRef schemaSequenceRef, AstDataType dataType, AstCreateSequenceStart createSequenceStart, AstCreateSequenceIncrement createSequenceIncrement, AstCreateSequenceMinValue createSequenceMinValue, AstCreateSequenceMaxValue createSequenceMaxValue, AstCycle cycle, AstSequenceCache sequenceCache) : 
                base(p)
        {
            this._schemaSequenceRef = schemaSequenceRef;
            this._dataType = dataType;
            this._createSequenceStart = createSequenceStart;
            this._createSequenceIncrement = createSequenceIncrement;
            this._createSequenceMinValue = createSequenceMinValue;
            this._createSequenceMaxValue = createSequenceMaxValue;
            this._cycle = cycle;
            this._sequenceCache = sequenceCache;
        }
        
        public AstCreateSequence(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSequenceRef>())
                {
                    this._schemaSequenceRef = ((AstSchemaSequenceRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceStart>())
                {
                    this._createSequenceStart = ((AstCreateSequenceStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceIncrement>())
                {
                    this._createSequenceIncrement = ((AstCreateSequenceIncrement)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceMinValue>())
                {
                    this._createSequenceMinValue = ((AstCreateSequenceMinValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceMaxValue>())
                {
                    this._createSequenceMaxValue = ((AstCreateSequenceMaxValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCycle>())
                {
                    this._cycle = ((AstCycle)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSequenceCache>())
                {
                    this._sequenceCache = ((AstSequenceCache)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSequenceRef SchemaSequenceRef
        {
            get
            {
                return this._schemaSequenceRef;
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public virtual AstCreateSequenceStart CreateSequenceStart
        {
            get
            {
                return this._createSequenceStart;
            }
        }
        
        public virtual AstCreateSequenceIncrement CreateSequenceIncrement
        {
            get
            {
                return this._createSequenceIncrement;
            }
        }
        
        public virtual AstCreateSequenceMinValue CreateSequenceMinValue
        {
            get
            {
                return this._createSequenceMinValue;
            }
        }
        
        public virtual AstCreateSequenceMaxValue CreateSequenceMaxValue
        {
            get
            {
                return this._createSequenceMaxValue;
            }
        }
        
        public virtual AstCycle Cycle
        {
            get
            {
                return this._cycle;
            }
        }
        
        public virtual AstSequenceCache SequenceCache
        {
            get
            {
                return this._sequenceCache;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSequence(this);
        }
        
        /// <summary>
        /// create_sequence : 
        ///    CREATE SEQUENCE schema_sequence_ref AS data_type create_sequence_start? create_sequence_increment? create_sequence_min_value? create_sequence_max_value? cycle? sequence_cache? 
        /// </summary>
        public static AstCreateSequence CreateSequence(AstSchemaSequenceRef schemaSequenceRef, AstDataType dataType, AstCreateSequenceStart? createSequenceStart, AstCreateSequenceIncrement? createSequenceIncrement, AstCreateSequenceMinValue? createSequenceMinValue, AstCreateSequenceMaxValue? createSequenceMaxValue, AstCycle? cycle, AstSequenceCache? sequenceCache)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(schemaSequenceRef);
            list.Add(dataType);
            list.Add(createSequenceStart);
            list.Add(createSequenceIncrement);
            list.Add(createSequenceMinValue);
            list.Add(createSequenceMaxValue);
            list.Add(cycle);
            list.Add(sequenceCache);
            return new AstCreateSequence(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_sequence_increment
    /// 	 : INCREMENT  BY  real
    /// </summary>
    public partial class AstCreateSequenceIncrement : AstRule
    {
        
        private AstReal _real;
        
        public AstCreateSequenceIncrement(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReal>())
                {
                    this._real = ((AstReal)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSequenceIncrement(Position p, AstReal real) : 
                base(p)
        {
            this._real = real;
        }
        
        public AstCreateSequenceIncrement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReal>())
                {
                    this._real = ((AstReal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstReal Real
        {
            get
            {
                return this._real;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSequenceIncrement(this);
        }
        
        /// <summary>
        /// create_sequence_increment : 
        ///    INCREMENT BY real 
        /// </summary>
        public static AstCreateSequenceIncrement CreateSequenceIncrement(AstReal real)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(real);
            return new AstCreateSequenceIncrement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// real
    /// 	 : MINUS?  decimal
    /// </summary>
    public partial class AstReal : AstRule
    {
        
        private AstDecimal _decimal;
        
        public AstReal(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstReal(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstReal(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReal(this);
        }
        
        /// <summary>
        /// real : 
        ///    MINUS? decimal 
        /// </summary>
        public static AstReal Real(AstDecimal @decimal)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(@decimal);
            return new AstReal(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_sequence_start
    /// 	 : START  WITH  decimal
    /// </summary>
    public partial class AstCreateSequenceStart : AstRule
    {
        
        private AstDecimal _decimal;
        
        public AstCreateSequenceStart(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSequenceStart(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstCreateSequenceStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSequenceStart(this);
        }
        
        /// <summary>
        /// create_sequence_start : 
        ///    START WITH decimal 
        /// </summary>
        public static AstCreateSequenceStart CreateSequenceStart(AstDecimal @decimal)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(@decimal);
            return new AstCreateSequenceStart(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_server_audit
    /// 	 : ALTER  SERVER  AUDIT  audit_id  alter_server_audit_infos
    /// </summary>
    public partial class AstAlterServerAudit : AstDdlClause
    {
        
        private AstAuditId _auditId;
        
        private AstAlterServerAuditInfos _alterServerAuditInfos;
        
        public AstAlterServerAudit(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerAuditInfos>())
                {
                    this._alterServerAuditInfos = ((AstAlterServerAuditInfos)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerAudit(Position p, AstAuditId auditId, AstAlterServerAuditInfos alterServerAuditInfos) : 
                base(p)
        {
            this._auditId = auditId;
            this._alterServerAuditInfos = alterServerAuditInfos;
        }
        
        public AstAlterServerAudit(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerAuditInfos>())
                {
                    this._alterServerAuditInfos = ((AstAlterServerAuditInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public virtual AstAlterServerAuditInfos AlterServerAuditInfos
        {
            get
            {
                return this._alterServerAuditInfos;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerAudit(this);
        }
        
        /// <summary>
        /// alter_server_audit : 
        ///    ALTER SERVER AUDIT audit_id alter_server_audit_infos 
        /// </summary>
        public static AstAlterServerAudit AlterServerAudit(AstAuditId auditId, AstAlterServerAuditInfos alterServerAuditInfos)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(auditId);
            list.Add(alterServerAuditInfos);
            return new AstAlterServerAudit(Position.Default, list);
        }
    }
    
    /// <summary>
    /// with_server_audit_file
    /// 	 : WITH  LR_BRACKET  server_audit_file_infos?  RR_BRACKET
    /// </summary>
    public partial class AstWithServerAuditFile : AstRule
    {
        
        private AstServerAuditFileInfos _serverAuditFileInfos;
        
        public AstWithServerAuditFile(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerAuditFileInfos>())
                {
                    this._serverAuditFileInfos = ((AstServerAuditFileInfos)(enumerator.Current));
                }
            }
        }
        
        public AstWithServerAuditFile(Position p, AstServerAuditFileInfos serverAuditFileInfos) : 
                base(p)
        {
            this._serverAuditFileInfos = serverAuditFileInfos;
        }
        
        public AstWithServerAuditFile(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerAuditFileInfos>())
                {
                    this._serverAuditFileInfos = ((AstServerAuditFileInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerAuditFileInfos ServerAuditFileInfos
        {
            get
            {
                return this._serverAuditFileInfos;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWithServerAuditFile(this);
        }
        
        /// <summary>
        /// with_server_audit_file : 
        ///    WITH ( server_audit_file_infos? ) 
        /// </summary>
        public static AstWithServerAuditFile WithServerAuditFile(AstServerAuditFileInfos? serverAuditFileInfos)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(serverAuditFileInfos);
            return new AstWithServerAuditFile(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_server_audit
    /// 	 : CREATE  SERVER  AUDIT  audit_id  create_server_audit_to_infos
    /// </summary>
    public partial class AstCreateServerAudit : AstDdlClause
    {
        
        private AstAuditId _auditId;
        
        private AstCreateServerAuditToInfos _createServerAuditToInfos;
        
        public AstCreateServerAudit(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateServerAuditToInfos>())
                {
                    this._createServerAuditToInfos = ((AstCreateServerAuditToInfos)(enumerator.Current));
                }
            }
        }
        
        public AstCreateServerAudit(Position p, AstAuditId auditId, AstCreateServerAuditToInfos createServerAuditToInfos) : 
                base(p)
        {
            this._auditId = auditId;
            this._createServerAuditToInfos = createServerAuditToInfos;
        }
        
        public AstCreateServerAudit(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateServerAuditToInfos>())
                {
                    this._createServerAuditToInfos = ((AstCreateServerAuditToInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public virtual AstCreateServerAuditToInfos CreateServerAuditToInfos
        {
            get
            {
                return this._createServerAuditToInfos;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerAudit(this);
        }
        
        /// <summary>
        /// create_server_audit : 
        ///    CREATE SERVER AUDIT audit_id create_server_audit_to_infos 
        /// </summary>
        public static AstCreateServerAudit CreateServerAudit(AstAuditId auditId, AstCreateServerAuditToInfos createServerAuditToInfos)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(auditId);
            list.Add(createServerAuditToInfos);
            return new AstCreateServerAudit(Position.Default, list);
        }
    }
    
    /// <summary>
    /// where_server_audit_condition
    /// 	 : WHERE  alter_server_audit_condition?
    /// </summary>
    public partial class AstWhereServerAuditCondition : AstRule
    {
        
        private AstAlterServerAuditCondition _alterServerAuditCondition;
        
        public AstWhereServerAuditCondition(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterServerAuditCondition>())
                {
                    this._alterServerAuditCondition = ((AstAlterServerAuditCondition)(enumerator.Current));
                }
            }
        }
        
        public AstWhereServerAuditCondition(Position p, AstAlterServerAuditCondition alterServerAuditCondition) : 
                base(p)
        {
            this._alterServerAuditCondition = alterServerAuditCondition;
        }
        
        public AstWhereServerAuditCondition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterServerAuditCondition>())
                {
                    this._alterServerAuditCondition = ((AstAlterServerAuditCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterServerAuditCondition AlterServerAuditCondition
        {
            get
            {
                return this._alterServerAuditCondition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWhereServerAuditCondition(this);
        }
        
        /// <summary>
        /// where_server_audit_condition : 
        ///    WHERE alter_server_audit_condition? 
        /// </summary>
        public static AstWhereServerAuditCondition WhereServerAuditCondition(AstAlterServerAuditCondition? alterServerAuditCondition)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(alterServerAuditCondition);
            return new AstWhereServerAuditCondition(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_server_audit_specification
    /// 	 : ALTER  SERVER  AUDIT  SPECIFICATION  audit_id  alter_server_audit_specification_server?  add_drop_audit_action_groups?  server_audit_state?
    /// </summary>
    public partial class AstAlterServerAuditSpecification : AstDdlClause
    {
        
        private AstAuditId _auditId;
        
        private AstAlterServerAuditSpecificationServer _alterServerAuditSpecificationServer;
        
        private AstAddDropAuditActionGroups _addDropAuditActionGroups;
        
        private AstServerAuditState _serverAuditState;
        
        public AstAlterServerAuditSpecification(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerAuditSpecificationServer>())
                {
                    this._alterServerAuditSpecificationServer = ((AstAlterServerAuditSpecificationServer)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDropAuditActionGroups>())
                {
                    this._addDropAuditActionGroups = ((AstAddDropAuditActionGroups)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerAuditState>())
                {
                    this._serverAuditState = ((AstServerAuditState)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerAuditSpecification(Position p, AstAuditId auditId, AstAlterServerAuditSpecificationServer alterServerAuditSpecificationServer, AstAddDropAuditActionGroups addDropAuditActionGroups, AstServerAuditState serverAuditState) : 
                base(p)
        {
            this._auditId = auditId;
            this._alterServerAuditSpecificationServer = alterServerAuditSpecificationServer;
            this._addDropAuditActionGroups = addDropAuditActionGroups;
            this._serverAuditState = serverAuditState;
        }
        
        public AstAlterServerAuditSpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerAuditSpecificationServer>())
                {
                    this._alterServerAuditSpecificationServer = ((AstAlterServerAuditSpecificationServer)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDropAuditActionGroups>())
                {
                    this._addDropAuditActionGroups = ((AstAddDropAuditActionGroups)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerAuditState>())
                {
                    this._serverAuditState = ((AstServerAuditState)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public virtual AstAlterServerAuditSpecificationServer AlterServerAuditSpecificationServer
        {
            get
            {
                return this._alterServerAuditSpecificationServer;
            }
        }
        
        public virtual AstAddDropAuditActionGroups AddDropAuditActionGroups
        {
            get
            {
                return this._addDropAuditActionGroups;
            }
        }
        
        public virtual AstServerAuditState ServerAuditState
        {
            get
            {
                return this._serverAuditState;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerAuditSpecification(this);
        }
        
        /// <summary>
        /// alter_server_audit_specification : 
        ///    ALTER SERVER AUDIT SPECIFICATION audit_id alter_server_audit_specification_server? add_drop_audit_action_groups? server_audit_state? 
        /// </summary>
        public static AstAlterServerAuditSpecification AlterServerAuditSpecification(AstAuditId auditId, AstAlterServerAuditSpecificationServer? alterServerAuditSpecificationServer, AstAddDropAuditActionGroups? addDropAuditActionGroups, AstServerAuditState? serverAuditState)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(auditId);
            list.Add(alterServerAuditSpecificationServer);
            list.Add(addDropAuditActionGroups);
            list.Add(serverAuditState);
            return new AstAlterServerAuditSpecification(Position.Default, list);
        }
    }
    
    /// <summary>
    /// server_audit_state
    /// 	 : WITH  LR_BRACKET  STATE  EQUAL  on_off  RR_BRACKET
    /// </summary>
    public partial class AstServerAuditState : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstServerAuditState(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstServerAuditState(Position p, AstOnOff onOff) : 
                base(p)
        {
            this._onOff = onOff;
        }
        
        public AstServerAuditState(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerAuditState(this);
        }
        
        /// <summary>
        /// server_audit_state : 
        ///    WITH ( STATE EQUAL on_off ) 
        /// </summary>
        public static AstServerAuditState ServerAuditState(AstOnOff onOff)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(onOff);
            return new AstServerAuditState(Position.Default, list);
        }
    }
    
    /// <summary>
    /// add_drop_audit_action_group
    /// 	 : add_drop  LR_BRACKET  audit_action_group_id  RR_BRACKET
    /// </summary>
    public partial class AstAddDropAuditActionGroup : AstRule
    {
        
        private AstAddDrop _addDrop;
        
        private AstAuditActionGroupId _auditActionGroupId;
        
        public AstAddDropAuditActionGroup(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuditActionGroupId>())
                {
                    this._auditActionGroupId = ((AstAuditActionGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstAddDropAuditActionGroup(Position p, AstAddDrop addDrop, AstAuditActionGroupId auditActionGroupId) : 
                base(p)
        {
            this._addDrop = addDrop;
            this._auditActionGroupId = auditActionGroupId;
        }
        
        public AstAddDropAuditActionGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuditActionGroupId>())
                {
                    this._auditActionGroupId = ((AstAuditActionGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
        }
        
        public virtual AstAuditActionGroupId AuditActionGroupId
        {
            get
            {
                return this._auditActionGroupId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAddDropAuditActionGroup(this);
        }
        
        /// <summary>
        /// add_drop_audit_action_group : 
        ///    add_drop ( audit_action_group_id ) 
        /// </summary>
        public static AstAddDropAuditActionGroup AddDropAuditActionGroup(AstAddDrop addDrop, AstAuditActionGroupId auditActionGroupId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(addDrop);
            list.Add(auditActionGroupId);
            return new AstAddDropAuditActionGroup(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_server_audit_specification_server
    /// 	 : FOR  SERVER  AUDIT  audit_id
    /// </summary>
    public partial class AstAlterServerAuditSpecificationServer : AstRule
    {
        
        private AstAuditId _auditId;
        
        public AstAlterServerAuditSpecificationServer(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerAuditSpecificationServer(Position p, AstAuditId auditId) : 
                base(p)
        {
            this._auditId = auditId;
        }
        
        public AstAlterServerAuditSpecificationServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerAuditSpecificationServer(this);
        }
        
        /// <summary>
        /// alter_server_audit_specification_server : 
        ///    FOR SERVER AUDIT audit_id 
        /// </summary>
        public static AstAlterServerAuditSpecificationServer AlterServerAuditSpecificationServer(AstAuditId auditId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(auditId);
            return new AstAlterServerAuditSpecificationServer(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_server_audit_specification
    /// 	 : CREATE  SERVER  AUDIT  SPECIFICATION  audit_id  alter_server_audit_specification_server?  server_audit_specification_add_groups?  server_audit_state?
    /// </summary>
    public partial class AstCreateServerAuditSpecification : AstDdlClause
    {
        
        private AstAuditId _auditId;
        
        private AstAlterServerAuditSpecificationServer _alterServerAuditSpecificationServer;
        
        private AstServerAuditSpecificationAddGroups _serverAuditSpecificationAddGroups;
        
        private AstServerAuditState _serverAuditState;
        
        public AstCreateServerAuditSpecification(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerAuditSpecificationServer>())
                {
                    this._alterServerAuditSpecificationServer = ((AstAlterServerAuditSpecificationServer)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerAuditSpecificationAddGroups>())
                {
                    this._serverAuditSpecificationAddGroups = ((AstServerAuditSpecificationAddGroups)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerAuditState>())
                {
                    this._serverAuditState = ((AstServerAuditState)(enumerator.Current));
                }
            }
        }
        
        public AstCreateServerAuditSpecification(Position p, AstAuditId auditId, AstAlterServerAuditSpecificationServer alterServerAuditSpecificationServer, AstServerAuditSpecificationAddGroups serverAuditSpecificationAddGroups, AstServerAuditState serverAuditState) : 
                base(p)
        {
            this._auditId = auditId;
            this._alterServerAuditSpecificationServer = alterServerAuditSpecificationServer;
            this._serverAuditSpecificationAddGroups = serverAuditSpecificationAddGroups;
            this._serverAuditState = serverAuditState;
        }
        
        public AstCreateServerAuditSpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerAuditSpecificationServer>())
                {
                    this._alterServerAuditSpecificationServer = ((AstAlterServerAuditSpecificationServer)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerAuditSpecificationAddGroups>())
                {
                    this._serverAuditSpecificationAddGroups = ((AstServerAuditSpecificationAddGroups)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerAuditState>())
                {
                    this._serverAuditState = ((AstServerAuditState)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public virtual AstAlterServerAuditSpecificationServer AlterServerAuditSpecificationServer
        {
            get
            {
                return this._alterServerAuditSpecificationServer;
            }
        }
        
        public virtual AstServerAuditSpecificationAddGroups ServerAuditSpecificationAddGroups
        {
            get
            {
                return this._serverAuditSpecificationAddGroups;
            }
        }
        
        public virtual AstServerAuditState ServerAuditState
        {
            get
            {
                return this._serverAuditState;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerAuditSpecification(this);
        }
        
        /// <summary>
        /// create_server_audit_specification : 
        ///    CREATE SERVER AUDIT SPECIFICATION audit_id alter_server_audit_specification_server? server_audit_specification_add_groups? server_audit_state? 
        /// </summary>
        public static AstCreateServerAuditSpecification CreateServerAuditSpecification(AstAuditId auditId, AstAlterServerAuditSpecificationServer? alterServerAuditSpecificationServer, AstServerAuditSpecificationAddGroups? serverAuditSpecificationAddGroups, AstServerAuditState? serverAuditState)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(auditId);
            list.Add(alterServerAuditSpecificationServer);
            list.Add(serverAuditSpecificationAddGroups);
            list.Add(serverAuditState);
            return new AstCreateServerAuditSpecification(Position.Default, list);
        }
    }
    
    /// <summary>
    /// server_audit_specification_add_group
    /// 	 : ADD  LR_BRACKET  audit_action_group_id  RR_BRACKET
    /// </summary>
    public partial class AstServerAuditSpecificationAddGroup : AstRule
    {
        
        private AstAuditActionGroupId _auditActionGroupId;
        
        public AstServerAuditSpecificationAddGroup(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditActionGroupId>())
                {
                    this._auditActionGroupId = ((AstAuditActionGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstServerAuditSpecificationAddGroup(Position p, AstAuditActionGroupId auditActionGroupId) : 
                base(p)
        {
            this._auditActionGroupId = auditActionGroupId;
        }
        
        public AstServerAuditSpecificationAddGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditActionGroupId>())
                {
                    this._auditActionGroupId = ((AstAuditActionGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditActionGroupId AuditActionGroupId
        {
            get
            {
                return this._auditActionGroupId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerAuditSpecificationAddGroup(this);
        }
        
        /// <summary>
        /// server_audit_specification_add_group : 
        ///    ADD ( audit_action_group_id ) 
        /// </summary>
        public static AstServerAuditSpecificationAddGroup ServerAuditSpecificationAddGroup(AstAuditActionGroupId auditActionGroupId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(auditActionGroupId);
            return new AstServerAuditSpecificationAddGroup(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_server_role
    /// 	 : ALTER  SERVER  ROLE  server_role_id  (add_drop  MEMBER  server_id | alter_server_role_new_name)
    /// </summary>
    public partial class AstAlterServerRole : AstDdlClause
    {
        
        private AstServerRoleId _serverRoleId;
        
        private AstAddDrop _addDrop;
        
        private AstServerId _serverId;
        
        private AstAlterServerRoleNewName _alterServerRoleNewName;
        
        public AstAlterServerRole(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerRoleNewName>())
                {
                    this._alterServerRoleNewName = ((AstAlterServerRoleNewName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerRole(Position p, AstServerRoleId serverRoleId, AstAddDrop addDrop, AstServerId serverId, AstAlterServerRoleNewName alterServerRoleNewName) : 
                base(p)
        {
            this._serverRoleId = serverRoleId;
            this._addDrop = addDrop;
            this._serverId = serverId;
            this._alterServerRoleNewName = alterServerRoleNewName;
        }
        
        public AstAlterServerRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerRoleNewName>())
                {
                    this._alterServerRoleNewName = ((AstAlterServerRoleNewName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleId ServerRoleId
        {
            get
            {
                return this._serverRoleId;
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
        }
        
        public virtual AstServerId ServerId
        {
            get
            {
                return this._serverId;
            }
        }
        
        public virtual AstAlterServerRoleNewName AlterServerRoleNewName
        {
            get
            {
                return this._alterServerRoleNewName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerRole(this);
        }
        
        /// <summary>
        /// alter_server_role : 
        ///    ALTER SERVER ROLE server_role_id add_drop MEMBER server_id 
        /// </summary>
        public static AstAlterServerRole AlterServerRole(AstServerRoleId serverRoleId, AstAddDrop addDrop, AstServerId serverId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(serverRoleId);
            list.Add(addDrop);
            list.Add(serverId);
            return new AstAlterServerRole(Position.Default, list);
        }
        
        /// <summary>
        /// alter_server_role : 
        ///    ALTER SERVER ROLE server_role_id alter_server_role_new_name 
        /// </summary>
        public static AstAlterServerRole AlterServerRole(AstServerRoleId serverRoleId, AstAlterServerRoleNewName alterServerRoleNewName)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(serverRoleId);
            list.Add(alterServerRoleNewName);
            return new AstAlterServerRole(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_server_role_new_name
    /// 	 : WITH  NAME  EQUAL  server_role_id
    /// </summary>
    public partial class AstAlterServerRoleNewName : AstRule
    {
        
        private AstServerRoleId _serverRoleId;
        
        public AstAlterServerRoleNewName(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerRoleNewName(Position p, AstServerRoleId serverRoleId) : 
                base(p)
        {
            this._serverRoleId = serverRoleId;
        }
        
        public AstAlterServerRoleNewName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleId ServerRoleId
        {
            get
            {
                return this._serverRoleId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerRoleNewName(this);
        }
        
        /// <summary>
        /// alter_server_role_new_name : 
        ///    WITH NAME EQUAL server_role_id 
        /// </summary>
        public static AstAlterServerRoleNewName AlterServerRoleNewName(AstServerRoleId serverRoleId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(serverRoleId);
            return new AstAlterServerRoleNewName(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_server_role
    /// 	 : CREATE  SERVER  ROLE  server_role_id  (AUTHORIZATION  server_id)?
    /// </summary>
    public partial class AstCreateServerRole : AstDdlClause
    {
        
        private AstServerRoleId _serverRoleId;
        
        private AstServerId _serverId;
        
        public AstCreateServerRole(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateServerRole(Position p, AstServerRoleId serverRoleId, AstServerId serverId) : 
                base(p)
        {
            this._serverRoleId = serverRoleId;
            this._serverId = serverId;
        }
        
        public AstCreateServerRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleId ServerRoleId
        {
            get
            {
                return this._serverRoleId;
            }
        }
        
        public virtual AstServerId ServerId
        {
            get
            {
                return this._serverId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerRole(this);
        }
        
        /// <summary>
        /// create_server_role : 
        ///    CREATE SERVER ROLE server_role_id AUTHORIZATION server_id 
        /// </summary>
        public static AstCreateServerRole CreateServerRole(AstServerRoleId serverRoleId, AstServerId serverId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(serverRoleId);
            list.Add(serverId);
            return new AstCreateServerRole(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_server_role_pdw
    /// 	 : ALTER  SERVER  ROLE  server_role_id  add_drop  MEMBER  login_id
    /// </summary>
    public partial class AstAlterServerRolePdw : AstDdlClause
    {
        
        private AstServerRoleId _serverRoleId;
        
        private AstAddDrop _addDrop;
        
        private AstLoginId _loginId;
        
        public AstAlterServerRolePdw(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerRolePdw(Position p, AstServerRoleId serverRoleId, AstAddDrop addDrop, AstLoginId loginId) : 
                base(p)
        {
            this._serverRoleId = serverRoleId;
            this._addDrop = addDrop;
            this._loginId = loginId;
        }
        
        public AstAlterServerRolePdw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleId ServerRoleId
        {
            get
            {
                return this._serverRoleId;
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerRolePdw(this);
        }
        
        /// <summary>
        /// alter_server_role_pdw : 
        ///    ALTER SERVER ROLE server_role_id add_drop MEMBER login_id 
        /// </summary>
        public static AstAlterServerRolePdw AlterServerRolePdw(AstServerRoleId serverRoleId, AstAddDrop addDrop, AstLoginId loginId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(serverRoleId);
            list.Add(addDrop);
            list.Add(loginId);
            return new AstAlterServerRolePdw(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_service
    /// 	 : ALTER  SERVICE  service_id  (ON  QUEUE  schema_queue_ref)?  alter_service_contracts?
    /// </summary>
    public partial class AstAlterService : AstDdlClause
    {
        
        private AstServiceId _serviceId;
        
        private AstSchemaQueueRef _schemaQueueRef;
        
        private AstAlterServiceContracts _alterServiceContracts;
        
        public AstAlterService(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServiceId>())
                {
                    this._serviceId = ((AstServiceId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaQueueRef>())
                {
                    this._schemaQueueRef = ((AstSchemaQueueRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServiceContracts>())
                {
                    this._alterServiceContracts = ((AstAlterServiceContracts)(enumerator.Current));
                }
            }
        }
        
        public AstAlterService(Position p, AstServiceId serviceId, AstSchemaQueueRef schemaQueueRef, AstAlterServiceContracts alterServiceContracts) : 
                base(p)
        {
            this._serviceId = serviceId;
            this._schemaQueueRef = schemaQueueRef;
            this._alterServiceContracts = alterServiceContracts;
        }
        
        public AstAlterService(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServiceId>())
                {
                    this._serviceId = ((AstServiceId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaQueueRef>())
                {
                    this._schemaQueueRef = ((AstSchemaQueueRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServiceContracts>())
                {
                    this._alterServiceContracts = ((AstAlterServiceContracts)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServiceId ServiceId
        {
            get
            {
                return this._serviceId;
            }
        }
        
        public virtual AstSchemaQueueRef SchemaQueueRef
        {
            get
            {
                return this._schemaQueueRef;
            }
        }
        
        public virtual AstAlterServiceContracts AlterServiceContracts
        {
            get
            {
                return this._alterServiceContracts;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterService(this);
        }
        
        /// <summary>
        /// alter_service : 
        ///    ALTER SERVICE service_id ON QUEUE schema_queue_ref alter_service_contracts? 
        /// </summary>
        public static AstAlterService AlterService(AstServiceId serviceId, AstSchemaQueueRef schemaQueueRef, AstAlterServiceContracts? alterServiceContracts)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(serviceId);
            list.Add(schemaQueueRef);
            list.Add(alterServiceContracts);
            return new AstAlterService(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_service_contract
    /// 	 : add_drop  modified_contract_id
    /// </summary>
    public partial class AstAlterServiceContract : AstRule
    {
        
        private AstAddDrop _addDrop;
        
        private AstModifiedContractId _modifiedContractId;
        
        public AstAlterServiceContract(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstModifiedContractId>())
                {
                    this._modifiedContractId = ((AstModifiedContractId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServiceContract(Position p, AstAddDrop addDrop, AstModifiedContractId modifiedContractId) : 
                base(p)
        {
            this._addDrop = addDrop;
            this._modifiedContractId = modifiedContractId;
        }
        
        public AstAlterServiceContract(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstModifiedContractId>())
                {
                    this._modifiedContractId = ((AstModifiedContractId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
        }
        
        public virtual AstModifiedContractId ModifiedContractId
        {
            get
            {
                return this._modifiedContractId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServiceContract(this);
        }
        
        /// <summary>
        /// alter_service_contract : 
        ///    add_drop modified_contract_id 
        /// </summary>
        public static AstAlterServiceContract AlterServiceContract(AstAddDrop addDrop, AstModifiedContractId modifiedContractId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(addDrop);
            list.Add(modifiedContractId);
            return new AstAlterServiceContract(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_service
    /// 	 : CREATE  SERVICE  service_id  (AUTHORIZATION  owner_id)?  ON  QUEUE  schema_queue_ref  (LR_BRACKET  contracts  RR_BRACKET)?
    /// </summary>
    public partial class AstCreateService : AstDdlClause
    {
        
        private AstServiceId _serviceId;
        
        private AstOwnerId _ownerId;
        
        private AstSchemaQueueRef _schemaQueueRef;
        
        private AstContracts _contracts;
        
        public AstCreateService(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServiceId>())
                {
                    this._serviceId = ((AstServiceId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaQueueRef>())
                {
                    this._schemaQueueRef = ((AstSchemaQueueRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstContracts>())
                {
                    this._contracts = ((AstContracts)(enumerator.Current));
                }
            }
        }
        
        public AstCreateService(Position p, AstServiceId serviceId, AstOwnerId ownerId, AstSchemaQueueRef schemaQueueRef, AstContracts contracts) : 
                base(p)
        {
            this._serviceId = serviceId;
            this._ownerId = ownerId;
            this._schemaQueueRef = schemaQueueRef;
            this._contracts = contracts;
        }
        
        public AstCreateService(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServiceId>())
                {
                    this._serviceId = ((AstServiceId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaQueueRef>())
                {
                    this._schemaQueueRef = ((AstSchemaQueueRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstContracts>())
                {
                    this._contracts = ((AstContracts)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServiceId ServiceId
        {
            get
            {
                return this._serviceId;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public virtual AstSchemaQueueRef SchemaQueueRef
        {
            get
            {
                return this._schemaQueueRef;
            }
        }
        
        public virtual AstContracts Contracts
        {
            get
            {
                return this._contracts;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateService(this);
        }
        
        /// <summary>
        /// create_service : 
        ///    CREATE SERVICE service_id AUTHORIZATION owner_id ON QUEUE schema_queue_ref ( contracts ) 
        /// </summary>
        public static AstCreateService CreateService(AstServiceId serviceId, AstOwnerId ownerId, AstSchemaQueueRef schemaQueueRef, AstContracts contracts)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(serviceId);
            list.Add(ownerId);
            list.Add(schemaQueueRef);
            list.Add(contracts);
            return new AstCreateService(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_symmetric_key
    /// 	 : ALTER  SYMMETRIC  KEY  symmetric_key_id  (add_drop  ENCRYPTION  BY  (CERTIFICATE  certificate_id | PASSWORD  EQUAL  password = stringtext | SYMMETRIC  KEY  newkey = symmetric_key_id | ASYMMETRIC  KEY  asym_key_id))
    /// </summary>
    public partial class AstAlterSymmetricKey : AstDdlClause
    {
        
        private AstSymmetricKeyId _symmetricKeyId;
        
        private AstAddDrop _addDrop;
        
        private AstCertificateId _certificateId;
        
        private AstStringtext _stringtext;
        
        private AstAsymKeyId _asymKeyId;
        
        public AstAlterSymmetricKey(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyId>())
                {
                    this._symmetricKeyId = ((AstSymmetricKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymKeyId>())
                {
                    this._asymKeyId = ((AstAsymKeyId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterSymmetricKey(Position p, AstSymmetricKeyId symmetricKeyId, AstAddDrop addDrop, AstCertificateId certificateId, AstStringtext stringtext, AstAsymKeyId asymKeyId) : 
                base(p)
        {
            this._symmetricKeyId = symmetricKeyId;
            this._addDrop = addDrop;
            this._certificateId = certificateId;
            this._stringtext = stringtext;
            this._asymKeyId = asymKeyId;
        }
        
        public AstAlterSymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyId>())
                {
                    this._symmetricKeyId = ((AstSymmetricKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymKeyId>())
                {
                    this._asymKeyId = ((AstAsymKeyId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSymmetricKeyId SymmetricKeyId
        {
            get
            {
                return this._symmetricKeyId;
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
        }
        
        public virtual AstCertificateId CertificateId
        {
            get
            {
                return this._certificateId;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstAsymKeyId AsymKeyId
        {
            get
            {
                return this._asymKeyId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSymmetricKey(this);
        }
        
        /// <summary>
        /// alter_symmetric_key : 
        ///    ALTER SYMMETRIC KEY symmetric_key_id add_drop ENCRYPTION BY CERTIFICATE certificate_id 
        /// </summary>
        public static AstAlterSymmetricKey AlterSymmetricKey(AstSymmetricKeyId symmetricKeyId, AstAddDrop addDrop, AstCertificateId certificateId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(symmetricKeyId);
            list.Add(addDrop);
            list.Add(certificateId);
            return new AstAlterSymmetricKey(Position.Default, list);
        }
        
        /// <summary>
        /// alter_symmetric_key : 
        ///    ALTER SYMMETRIC KEY symmetric_key_id add_drop ENCRYPTION BY PASSWORD EQUAL password=stringtext 
        /// </summary>
        public static AstAlterSymmetricKey AlterSymmetricKey(AstSymmetricKeyId symmetricKeyId, AstAddDrop addDrop, AstStringtext password)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(symmetricKeyId);
            list.Add(addDrop);
            list.Add(password);
            return new AstAlterSymmetricKey(Position.Default, list);
        }
        
        /// <summary>
        /// alter_symmetric_key : 
        ///    ALTER SYMMETRIC KEY symmetric_key_id add_drop ENCRYPTION BY SYMMETRIC KEY newkey=symmetric_key_id 
        /// </summary>
        public static AstAlterSymmetricKey AlterSymmetricKey(AstSymmetricKeyId symmetricKeyId, AstAddDrop addDrop, AstSymmetricKeyId newkey)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(symmetricKeyId);
            list.Add(addDrop);
            list.Add(newkey);
            return new AstAlterSymmetricKey(Position.Default, list);
        }
        
        /// <summary>
        /// alter_symmetric_key : 
        ///    ALTER SYMMETRIC KEY symmetric_key_id add_drop ENCRYPTION BY ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public static AstAlterSymmetricKey AlterSymmetricKey(AstSymmetricKeyId symmetricKeyId, AstAddDrop addDrop, AstAsymKeyId asymKeyId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(symmetricKeyId);
            list.Add(addDrop);
            list.Add(asymKeyId);
            return new AstAlterSymmetricKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_synonym
    /// 	 : CREATE  SYNONYM  schema_synonym_ref  FOR  server_database_schema_object_ref
    /// </summary>
    public partial class AstCreateSynonym : AstDdlClause
    {
        
        private AstSchemaSynonymRef _schemaSynonymRef;
        
        private AstServerDatabaseSchemaObjectRef _serverDatabaseSchemaObjectRef;
        
        public AstCreateSynonym(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSynonymRef>())
                {
                    this._schemaSynonymRef = ((AstSchemaSynonymRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerDatabaseSchemaObjectRef>())
                {
                    this._serverDatabaseSchemaObjectRef = ((AstServerDatabaseSchemaObjectRef)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSynonym(Position p, AstSchemaSynonymRef schemaSynonymRef, AstServerDatabaseSchemaObjectRef serverDatabaseSchemaObjectRef) : 
                base(p)
        {
            this._schemaSynonymRef = schemaSynonymRef;
            this._serverDatabaseSchemaObjectRef = serverDatabaseSchemaObjectRef;
        }
        
        public AstCreateSynonym(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSynonymRef>())
                {
                    this._schemaSynonymRef = ((AstSchemaSynonymRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerDatabaseSchemaObjectRef>())
                {
                    this._serverDatabaseSchemaObjectRef = ((AstServerDatabaseSchemaObjectRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSynonymRef SchemaSynonymRef
        {
            get
            {
                return this._schemaSynonymRef;
            }
        }
        
        public virtual AstServerDatabaseSchemaObjectRef ServerDatabaseSchemaObjectRef
        {
            get
            {
                return this._serverDatabaseSchemaObjectRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSynonym(this);
        }
        
        /// <summary>
        /// create_synonym : 
        ///    CREATE SYNONYM schema_synonym_ref FOR server_database_schema_object_ref 
        /// </summary>
        public static AstCreateSynonym CreateSynonym(AstSchemaSynonymRef schemaSynonymRef, AstServerDatabaseSchemaObjectRef serverDatabaseSchemaObjectRef)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(schemaSynonymRef);
            list.Add(serverDatabaseSchemaObjectRef);
            return new AstCreateSynonym(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_user
    /// 	 : ALTER  USER  user_id  WITH  alter_user_items
    /// </summary>
    public partial class AstAlterUser : AstDdlClause
    {
        
        private AstUserId _userId;
        
        private AstAlterUserItems _alterUserItems;
        
        public AstAlterUser(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterUserItems>())
                {
                    this._alterUserItems = ((AstAlterUserItems)(enumerator.Current));
                }
            }
        }
        
        public AstAlterUser(Position p, AstUserId userId, AstAlterUserItems alterUserItems) : 
                base(p)
        {
            this._userId = userId;
            this._alterUserItems = alterUserItems;
        }
        
        public AstAlterUser(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterUserItems>())
                {
                    this._alterUserItems = ((AstAlterUserItems)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUserId UserId
        {
            get
            {
                return this._userId;
            }
        }
        
        public virtual AstAlterUserItems AlterUserItems
        {
            get
            {
                return this._alterUserItems;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterUser(this);
        }
        
        /// <summary>
        /// alter_user : 
        ///    ALTER USER user_id WITH alter_user_items 
        /// </summary>
        public static AstAlterUser AlterUser(AstUserId userId, AstAlterUserItems alterUserItems)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(userId);
            list.Add(alterUserItems);
            return new AstAlterUser(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_user_azure_sql
    /// 	 : ALTER  USER  user_id  WITH  alter_user_azure_sql_infos
    /// </summary>
    public partial class AstAlterUserAzureSql : AstDdlClause
    {
        
        private AstUserId _userId;
        
        private AstAlterUserAzureSqlInfos _alterUserAzureSqlInfos;
        
        public AstAlterUserAzureSql(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterUserAzureSqlInfos>())
                {
                    this._alterUserAzureSqlInfos = ((AstAlterUserAzureSqlInfos)(enumerator.Current));
                }
            }
        }
        
        public AstAlterUserAzureSql(Position p, AstUserId userId, AstAlterUserAzureSqlInfos alterUserAzureSqlInfos) : 
                base(p)
        {
            this._userId = userId;
            this._alterUserAzureSqlInfos = alterUserAzureSqlInfos;
        }
        
        public AstAlterUserAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterUserAzureSqlInfos>())
                {
                    this._alterUserAzureSqlInfos = ((AstAlterUserAzureSqlInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUserId UserId
        {
            get
            {
                return this._userId;
            }
        }
        
        public virtual AstAlterUserAzureSqlInfos AlterUserAzureSqlInfos
        {
            get
            {
                return this._alterUserAzureSqlInfos;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterUserAzureSql(this);
        }
        
        /// <summary>
        /// alter_user_azure_sql : 
        ///    ALTER USER user_id WITH alter_user_azure_sql_infos 
        /// </summary>
        public static AstAlterUserAzureSql AlterUserAzureSql(AstUserId userId, AstAlterUserAzureSqlInfos alterUserAzureSqlInfos)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(userId);
            list.Add(alterUserAzureSqlInfos);
            return new AstAlterUserAzureSql(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_workload_group
    /// 	 : ALTER  WORKLOAD  GROUP  (workload_group_group_id | DEFAULT_DOUBLE_QUOTE)  (WITH  LR_BRACKET  (IMPORTANCE  EQUAL  importance_level | COMMA?  REQUEST_MAX_MEMORY_GRANT_PERCENT  EQUAL  request_max_memory_grant = decimal | COMMA?  REQUEST_MAX_CPU_TIME_SEC  EQUAL  request_max_cpu_time_sec = decimal | REQUEST_MEMORY_GRANT_TIMEOUT_SEC  EQUAL  request_memory_grant_timeout_sec = decimal | MAX_DOP  EQUAL  max_dop = decimal | GROUP_MAX_REQUESTS  EQUAL  group_max_requests = decimal)+  RR_BRACKET)?  alter_workload_group_using?
    /// </summary>
    public partial class AstAlterWorkloadGroup : AstDdlClause
    {
        
        private AstWorkloadGroupGroupId _workloadGroupGroupId;
        
        private AstImportanceLevel _importanceLevel;
        
        private AstDecimal _decimal;
        
        private AstAlterWorkloadGroupUsing _alterWorkloadGroupUsing;
        
        public AstAlterWorkloadGroup(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWorkloadGroupGroupId>())
                {
                    this._workloadGroupGroupId = ((AstWorkloadGroupGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstImportanceLevel>())
                {
                    this._importanceLevel = ((AstImportanceLevel)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterWorkloadGroupUsing>())
                {
                    this._alterWorkloadGroupUsing = ((AstAlterWorkloadGroupUsing)(enumerator.Current));
                }
            }
        }
        
        public AstAlterWorkloadGroup(Position p, AstWorkloadGroupGroupId workloadGroupGroupId, AstImportanceLevel importanceLevel, AstDecimal @decimal, AstAlterWorkloadGroupUsing alterWorkloadGroupUsing) : 
                base(p)
        {
            this._workloadGroupGroupId = workloadGroupGroupId;
            this._importanceLevel = importanceLevel;
            this._decimal = @decimal;
            this._alterWorkloadGroupUsing = alterWorkloadGroupUsing;
        }
        
        public AstAlterWorkloadGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWorkloadGroupGroupId>())
                {
                    this._workloadGroupGroupId = ((AstWorkloadGroupGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstImportanceLevel>())
                {
                    this._importanceLevel = ((AstImportanceLevel)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterWorkloadGroupUsing>())
                {
                    this._alterWorkloadGroupUsing = ((AstAlterWorkloadGroupUsing)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWorkloadGroupGroupId WorkloadGroupGroupId
        {
            get
            {
                return this._workloadGroupGroupId;
            }
        }
        
        public virtual AstImportanceLevel ImportanceLevel
        {
            get
            {
                return this._importanceLevel;
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstAlterWorkloadGroupUsing AlterWorkloadGroupUsing
        {
            get
            {
                return this._alterWorkloadGroupUsing;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterWorkloadGroup(this);
        }
        
        /// <summary>
        /// alter_workload_group : 
        ///    ALTER WORKLOAD GROUP workload_group_group_id WITH ( IMPORTANCE EQUAL importance_level ) alter_workload_group_using? 
        /// </summary>
        public static AstAlterWorkloadGroup AlterWorkloadGroup(AstWorkloadGroupGroupId workloadGroupGroupId, AstImportanceLevel importanceLevel, AstAlterWorkloadGroupUsing? alterWorkloadGroupUsing)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(workloadGroupGroupId);
            list.Add(importanceLevel);
            list.Add(alterWorkloadGroupUsing);
            return new AstAlterWorkloadGroup(Position.Default, list);
        }
        
        /// <summary>
        /// alter_workload_group : 
        ///    ALTER WORKLOAD GROUP DEFAULT_DOUBLE_QUOTE WITH ( IMPORTANCE EQUAL importance_level ) alter_workload_group_using? 
        /// </summary>
        public static AstAlterWorkloadGroup AlterWorkloadGroup(AstImportanceLevel importanceLevel, AstAlterWorkloadGroupUsing? alterWorkloadGroupUsing)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(importanceLevel);
            list.Add(alterWorkloadGroupUsing);
            return new AstAlterWorkloadGroup(Position.Default, list);
        }
        
        /// <summary>
        /// alter_workload_group : 
        ///    ALTER WORKLOAD GROUP workload_group_group_id WITH ( COMMA? REQUEST_MAX_MEMORY_GRANT_PERCENT EQUAL request_max_memory_grant=decimal ) alter_workload_group_using? 
        /// </summary>
        public static AstAlterWorkloadGroup AlterWorkloadGroup(AstWorkloadGroupGroupId workloadGroupGroupId, AstDecimal requestMaxMemoryGrant, AstAlterWorkloadGroupUsing? alterWorkloadGroupUsing)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(workloadGroupGroupId);
            list.Add(requestMaxMemoryGrant);
            list.Add(alterWorkloadGroupUsing);
            return new AstAlterWorkloadGroup(Position.Default, list);
        }
        
        /// <summary>
        /// alter_workload_group : 
        ///    ALTER WORKLOAD GROUP DEFAULT_DOUBLE_QUOTE WITH ( COMMA? REQUEST_MAX_MEMORY_GRANT_PERCENT EQUAL request_max_memory_grant=decimal ) alter_workload_group_using? 
        /// </summary>
        public static AstAlterWorkloadGroup AlterWorkloadGroup(AstDecimal requestMaxMemoryGrant, AstAlterWorkloadGroupUsing? alterWorkloadGroupUsing)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(requestMaxMemoryGrant);
            list.Add(alterWorkloadGroupUsing);
            return new AstAlterWorkloadGroup(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_workload_group
    /// 	 : CREATE  WORKLOAD  GROUP  workload_group_group_id  (WITH  LR_BRACKET  (IMPORTANCE  EQUAL  importance_level | COMMA?  REQUEST_MAX_MEMORY_GRANT_PERCENT  EQUAL  request_max_memory_grant = decimal | COMMA?  REQUEST_MAX_CPU_TIME_SEC  EQUAL  request_max_cpu_time_sec = decimal | REQUEST_MEMORY_GRANT_TIMEOUT_SEC  EQUAL  request_memory_grant_timeout_sec = decimal | MAX_DOP  EQUAL  max_dop = decimal | GROUP_MAX_REQUESTS  EQUAL  group_max_requests = decimal)+  RR_BRACKET)?  (USING  (workload_group_pool_id | DEFAULT_DOUBLE_QUOTE)?  (COMMA?  EXTERNAL  external_pool_id | DEFAULT_DOUBLE_QUOTE)?)?
    /// </summary>
    public partial class AstCreateWorkloadGroup : AstDdlClause
    {
        
        private AstWorkloadGroupGroupId _workloadGroupGroupId;
        
        private AstImportanceLevel _importanceLevel;
        
        private AstDecimal _decimal;
        
        private AstWorkloadGroupPoolId _workloadGroupPoolId;
        
        private AstExternalPoolId _externalPoolId;
        
        public AstCreateWorkloadGroup(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWorkloadGroupGroupId>())
                {
                    this._workloadGroupGroupId = ((AstWorkloadGroupGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstImportanceLevel>())
                {
                    this._importanceLevel = ((AstImportanceLevel)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWorkloadGroupPoolId>())
                {
                    this._workloadGroupPoolId = ((AstWorkloadGroupPoolId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExternalPoolId>())
                {
                    this._externalPoolId = ((AstExternalPoolId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateWorkloadGroup(Position p, AstWorkloadGroupGroupId workloadGroupGroupId, AstImportanceLevel importanceLevel, AstDecimal @decimal, AstWorkloadGroupPoolId workloadGroupPoolId, AstExternalPoolId externalPoolId) : 
                base(p)
        {
            this._workloadGroupGroupId = workloadGroupGroupId;
            this._importanceLevel = importanceLevel;
            this._decimal = @decimal;
            this._workloadGroupPoolId = workloadGroupPoolId;
            this._externalPoolId = externalPoolId;
        }
        
        public AstCreateWorkloadGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWorkloadGroupGroupId>())
                {
                    this._workloadGroupGroupId = ((AstWorkloadGroupGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstImportanceLevel>())
                {
                    this._importanceLevel = ((AstImportanceLevel)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWorkloadGroupPoolId>())
                {
                    this._workloadGroupPoolId = ((AstWorkloadGroupPoolId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExternalPoolId>())
                {
                    this._externalPoolId = ((AstExternalPoolId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWorkloadGroupGroupId WorkloadGroupGroupId
        {
            get
            {
                return this._workloadGroupGroupId;
            }
        }
        
        public virtual AstImportanceLevel ImportanceLevel
        {
            get
            {
                return this._importanceLevel;
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstWorkloadGroupPoolId WorkloadGroupPoolId
        {
            get
            {
                return this._workloadGroupPoolId;
            }
        }
        
        public virtual AstExternalPoolId ExternalPoolId
        {
            get
            {
                return this._externalPoolId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateWorkloadGroup(this);
        }
        
        /// <summary>
        /// create_workload_group : 
        ///    CREATE WORKLOAD GROUP workload_group_group_id WITH ( IMPORTANCE EQUAL importance_level ) USING workload_group_pool_id COMMA? EXTERNAL external_pool_id 
        /// </summary>
        public static AstCreateWorkloadGroup CreateWorkloadGroup(AstWorkloadGroupGroupId workloadGroupGroupId, AstImportanceLevel importanceLevel, AstWorkloadGroupPoolId workloadGroupPoolId, AstExternalPoolId externalPoolId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(workloadGroupGroupId);
            list.Add(importanceLevel);
            list.Add(workloadGroupPoolId);
            list.Add(externalPoolId);
            return new AstCreateWorkloadGroup(Position.Default, list);
        }
        
        /// <summary>
        /// create_workload_group : 
        ///    CREATE WORKLOAD GROUP workload_group_group_id WITH ( COMMA? REQUEST_MAX_MEMORY_GRANT_PERCENT EQUAL request_max_memory_grant=decimal ) USING workload_group_pool_id COMMA? EXTERNAL external_pool_id 
        /// </summary>
        public static AstCreateWorkloadGroup CreateWorkloadGroup(AstWorkloadGroupGroupId workloadGroupGroupId, AstDecimal requestMaxMemoryGrant, AstWorkloadGroupPoolId workloadGroupPoolId, AstExternalPoolId externalPoolId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(workloadGroupGroupId);
            list.Add(requestMaxMemoryGrant);
            list.Add(workloadGroupPoolId);
            list.Add(externalPoolId);
            return new AstCreateWorkloadGroup(Position.Default, list);
        }
        
        /// <summary>
        /// create_workload_group : 
        ///    CREATE WORKLOAD GROUP workload_group_group_id WITH ( IMPORTANCE EQUAL importance_level ) USING DEFAULT_DOUBLE_QUOTE COMMA? EXTERNAL external_pool_id 
        /// </summary>
        public static AstCreateWorkloadGroup CreateWorkloadGroup(AstWorkloadGroupGroupId workloadGroupGroupId, AstImportanceLevel importanceLevel, AstExternalPoolId externalPoolId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(workloadGroupGroupId);
            list.Add(importanceLevel);
            list.Add(externalPoolId);
            return new AstCreateWorkloadGroup(Position.Default, list);
        }
        
        /// <summary>
        /// create_workload_group : 
        ///    CREATE WORKLOAD GROUP workload_group_group_id WITH ( COMMA? REQUEST_MAX_MEMORY_GRANT_PERCENT EQUAL request_max_memory_grant=decimal ) USING DEFAULT_DOUBLE_QUOTE COMMA? EXTERNAL external_pool_id 
        /// </summary>
        public static AstCreateWorkloadGroup CreateWorkloadGroup(AstWorkloadGroupGroupId workloadGroupGroupId, AstDecimal requestMaxMemoryGrant, AstExternalPoolId externalPoolId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(workloadGroupGroupId);
            list.Add(requestMaxMemoryGrant);
            list.Add(externalPoolId);
            return new AstCreateWorkloadGroup(Position.Default, list);
        }
        
        /// <summary>
        /// create_workload_group : 
        ///    CREATE WORKLOAD GROUP workload_group_group_id WITH ( IMPORTANCE EQUAL importance_level ) USING workload_group_pool_id DEFAULT_DOUBLE_QUOTE 
        /// </summary>
        public static AstCreateWorkloadGroup CreateWorkloadGroup(AstWorkloadGroupGroupId workloadGroupGroupId, AstImportanceLevel importanceLevel, AstWorkloadGroupPoolId workloadGroupPoolId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(workloadGroupGroupId);
            list.Add(importanceLevel);
            list.Add(workloadGroupPoolId);
            return new AstCreateWorkloadGroup(Position.Default, list);
        }
        
        /// <summary>
        /// create_workload_group : 
        ///    CREATE WORKLOAD GROUP workload_group_group_id WITH ( COMMA? REQUEST_MAX_MEMORY_GRANT_PERCENT EQUAL request_max_memory_grant=decimal ) USING workload_group_pool_id DEFAULT_DOUBLE_QUOTE 
        /// </summary>
        public static AstCreateWorkloadGroup CreateWorkloadGroup(AstWorkloadGroupGroupId workloadGroupGroupId, AstDecimal requestMaxMemoryGrant, AstWorkloadGroupPoolId workloadGroupPoolId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(workloadGroupGroupId);
            list.Add(requestMaxMemoryGrant);
            list.Add(workloadGroupPoolId);
            return new AstCreateWorkloadGroup(Position.Default, list);
        }
        
        /// <summary>
        /// create_workload_group : 
        ///    CREATE WORKLOAD GROUP workload_group_group_id WITH ( IMPORTANCE EQUAL importance_level ) USING DEFAULT_DOUBLE_QUOTE DEFAULT_DOUBLE_QUOTE 
        /// </summary>
        public static AstCreateWorkloadGroup CreateWorkloadGroup(AstWorkloadGroupGroupId workloadGroupGroupId, AstImportanceLevel importanceLevel)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(workloadGroupGroupId);
            list.Add(importanceLevel);
            return new AstCreateWorkloadGroup(Position.Default, list);
        }
        
        /// <summary>
        /// create_workload_group : 
        ///    CREATE WORKLOAD GROUP workload_group_group_id WITH ( COMMA? REQUEST_MAX_MEMORY_GRANT_PERCENT EQUAL request_max_memory_grant=decimal ) USING DEFAULT_DOUBLE_QUOTE DEFAULT_DOUBLE_QUOTE 
        /// </summary>
        public static AstCreateWorkloadGroup CreateWorkloadGroup(AstWorkloadGroupGroupId workloadGroupGroupId, AstDecimal requestMaxMemoryGrant)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(workloadGroupGroupId);
            list.Add(requestMaxMemoryGrant);
            return new AstCreateWorkloadGroup(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_xml_schema_collection
    /// 	 : CREATE  XML  SCHEMA  COLLECTION  schema_sql_identifier_id  AS  string_id2
    /// </summary>
    public partial class AstCreateXmlSchemaCollection : AstDdlClause
    {
        
        private AstSchemaSqlIdentifierId _schemaSqlIdentifierId;
        
        private AstStringId2 _stringId2;
        
        public AstCreateXmlSchemaCollection(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSqlIdentifierId>())
                {
                    this._schemaSqlIdentifierId = ((AstSchemaSqlIdentifierId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringId2>())
                {
                    this._stringId2 = ((AstStringId2)(enumerator.Current));
                }
            }
        }
        
        public AstCreateXmlSchemaCollection(Position p, AstSchemaSqlIdentifierId schemaSqlIdentifierId, AstStringId2 stringId2) : 
                base(p)
        {
            this._schemaSqlIdentifierId = schemaSqlIdentifierId;
            this._stringId2 = stringId2;
        }
        
        public AstCreateXmlSchemaCollection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSqlIdentifierId>())
                {
                    this._schemaSqlIdentifierId = ((AstSchemaSqlIdentifierId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringId2>())
                {
                    this._stringId2 = ((AstStringId2)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSqlIdentifierId SchemaSqlIdentifierId
        {
            get
            {
                return this._schemaSqlIdentifierId;
            }
        }
        
        public virtual AstStringId2 StringId2
        {
            get
            {
                return this._stringId2;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateXmlSchemaCollection(this);
        }
        
        /// <summary>
        /// create_xml_schema_collection : 
        ///    CREATE XML SCHEMA COLLECTION schema_sql_identifier_id AS string_id2 
        /// </summary>
        public static AstCreateXmlSchemaCollection CreateXmlSchemaCollection(AstSchemaSqlIdentifierId schemaSqlIdentifierId, AstStringId2 stringId2)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(schemaSqlIdentifierId);
            list.Add(stringId2);
            return new AstCreateXmlSchemaCollection(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_partition_function
    /// 	 : CREATE  PARTITION  FUNCTION  partition_function_id  LR_BRACKET  input_parameter_type = data_type  RR_BRACKET  AS  RANGE  left_right?  FOR  VALUES  LR_BRACKET  boundary_values = expression_list  RR_BRACKET
    /// </summary>
    public partial class AstCreatePartitionFunction : AstDdlClause
    {
        
        private AstPartitionFunctionId _partitionFunctionId;
        
        private AstDataType _dataType;
        
        private AstLeftRight _leftRight;
        
        private AstExpressionList _expressionList;
        
        public AstCreatePartitionFunction(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLeftRight>())
                {
                    this._leftRight = ((AstLeftRight)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpressionList>())
                {
                    this._expressionList = ((AstExpressionList)(enumerator.Current));
                }
            }
        }
        
        public AstCreatePartitionFunction(Position p, AstPartitionFunctionId partitionFunctionId, AstDataType dataType, AstLeftRight leftRight, AstExpressionList expressionList) : 
                base(p)
        {
            this._partitionFunctionId = partitionFunctionId;
            this._dataType = dataType;
            this._leftRight = leftRight;
            this._expressionList = expressionList;
        }
        
        public AstCreatePartitionFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLeftRight>())
                {
                    this._leftRight = ((AstLeftRight)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpressionList>())
                {
                    this._expressionList = ((AstExpressionList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionFunctionId PartitionFunctionId
        {
            get
            {
                return this._partitionFunctionId;
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public virtual AstLeftRight LeftRight
        {
            get
            {
                return this._leftRight;
            }
        }
        
        public virtual AstExpressionList ExpressionList
        {
            get
            {
                return this._expressionList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreatePartitionFunction(this);
        }
        
        /// <summary>
        /// create_partition_function : 
        ///    CREATE PARTITION FUNCTION partition_function_id ( input_parameter_type=data_type ) AS RANGE left_right? FOR VALUES ( boundary_values=expression_list ) 
        /// </summary>
        public static AstCreatePartitionFunction CreatePartitionFunction(AstPartitionFunctionId partitionFunctionId, AstDataType inputParameterType, AstLeftRight? leftRight, AstExpressionList boundaryValues)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(partitionFunctionId);
            list.Add(inputParameterType);
            list.Add(leftRight);
            list.Add(boundaryValues);
            return new AstCreatePartitionFunction(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_partition_scheme
    /// 	 : CREATE  PARTITION  SCHEME  partition_scheme_id  AS  PARTITION  partition_function_id  ALL?  TO  LR_BRACKET  file_group_ids  RR_BRACKET
    /// </summary>
    public partial class AstCreatePartitionScheme : AstDdlClause
    {
        
        private AstPartitionSchemeId _partitionSchemeId;
        
        private AstPartitionFunctionId _partitionFunctionId;
        
        private AstFileGroupIds _fileGroupIds;
        
        public AstCreatePartitionScheme(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeId>())
                {
                    this._partitionSchemeId = ((AstPartitionSchemeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupIds>())
                {
                    this._fileGroupIds = ((AstFileGroupIds)(enumerator.Current));
                }
            }
        }
        
        public AstCreatePartitionScheme(Position p, AstPartitionSchemeId partitionSchemeId, AstPartitionFunctionId partitionFunctionId, AstFileGroupIds fileGroupIds) : 
                base(p)
        {
            this._partitionSchemeId = partitionSchemeId;
            this._partitionFunctionId = partitionFunctionId;
            this._fileGroupIds = fileGroupIds;
        }
        
        public AstCreatePartitionScheme(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeId>())
                {
                    this._partitionSchemeId = ((AstPartitionSchemeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupIds>())
                {
                    this._fileGroupIds = ((AstFileGroupIds)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionSchemeId PartitionSchemeId
        {
            get
            {
                return this._partitionSchemeId;
            }
        }
        
        public virtual AstPartitionFunctionId PartitionFunctionId
        {
            get
            {
                return this._partitionFunctionId;
            }
        }
        
        public virtual AstFileGroupIds FileGroupIds
        {
            get
            {
                return this._fileGroupIds;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreatePartitionScheme(this);
        }
        
        /// <summary>
        /// create_partition_scheme : 
        ///    CREATE PARTITION SCHEME partition_scheme_id AS PARTITION partition_function_id ALL? TO ( file_group_ids ) 
        /// </summary>
        public static AstCreatePartitionScheme CreatePartitionScheme(AstPartitionSchemeId partitionSchemeId, AstPartitionFunctionId partitionFunctionId, AstFileGroupIds fileGroupIds)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(partitionSchemeId);
            list.Add(partitionFunctionId);
            list.Add(fileGroupIds);
            return new AstCreatePartitionScheme(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_queue
    /// 	 : CREATE  QUEUE  (complete_table_ref | queue_id)  queue_settings?  (ON  file_group_id | DEFAULT)?
    /// </summary>
    public partial class AstCreateQueue : AstAnotherStatement
    {
        
        private AstCompleteTableRef _completeTableRef;
        
        private AstQueueId _queueId;
        
        private AstQueueSettings _queueSettings;
        
        private AstFileGroupId _fileGroupId;
        
        public AstCreateQueue(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCompleteTableRef>())
                {
                    this._completeTableRef = ((AstCompleteTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueueId>())
                {
                    this._queueId = ((AstQueueId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueueSettings>())
                {
                    this._queueSettings = ((AstQueueSettings)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateQueue(Position p, AstCompleteTableRef completeTableRef, AstQueueId queueId, AstQueueSettings queueSettings, AstFileGroupId fileGroupId) : 
                base(p)
        {
            this._completeTableRef = completeTableRef;
            this._queueId = queueId;
            this._queueSettings = queueSettings;
            this._fileGroupId = fileGroupId;
        }
        
        public AstCreateQueue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCompleteTableRef>())
                {
                    this._completeTableRef = ((AstCompleteTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueueId>())
                {
                    this._queueId = ((AstQueueId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueueSettings>())
                {
                    this._queueSettings = ((AstQueueSettings)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCompleteTableRef CompleteTableRef
        {
            get
            {
                return this._completeTableRef;
            }
        }
        
        public virtual AstQueueId QueueId
        {
            get
            {
                return this._queueId;
            }
        }
        
        public virtual AstQueueSettings QueueSettings
        {
            get
            {
                return this._queueSettings;
            }
        }
        
        public virtual AstFileGroupId FileGroupId
        {
            get
            {
                return this._fileGroupId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateQueue(this);
        }
        
        /// <summary>
        /// create_queue : 
        ///    CREATE QUEUE complete_table_ref queue_settings? ON file_group_id 
        /// </summary>
        public static AstCreateQueue CreateQueue(AstCompleteTableRef completeTableRef, AstQueueSettings? queueSettings, AstFileGroupId fileGroupId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(completeTableRef);
            list.Add(queueSettings);
            list.Add(fileGroupId);
            return new AstCreateQueue(Position.Default, list);
        }
        
        /// <summary>
        /// create_queue : 
        ///    CREATE QUEUE queue_id queue_settings? ON file_group_id 
        /// </summary>
        public static AstCreateQueue CreateQueue(AstQueueId queueId, AstQueueSettings? queueSettings, AstFileGroupId fileGroupId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(queueId);
            list.Add(queueSettings);
            list.Add(fileGroupId);
            return new AstCreateQueue(Position.Default, list);
        }
        
        /// <summary>
        /// create_queue : 
        ///    CREATE QUEUE complete_table_ref queue_settings? DEFAULT 
        /// </summary>
        public static AstCreateQueue CreateQueue(AstCompleteTableRef completeTableRef, AstQueueSettings? queueSettings)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(completeTableRef);
            list.Add(queueSettings);
            return new AstCreateQueue(Position.Default, list);
        }
        
        /// <summary>
        /// create_queue : 
        ///    CREATE QUEUE queue_id queue_settings? DEFAULT 
        /// </summary>
        public static AstCreateQueue CreateQueue(AstQueueId queueId, AstQueueSettings? queueSettings)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(queueId);
            list.Add(queueSettings);
            return new AstCreateQueue(Position.Default, list);
        }
    }
    
    /// <summary>
    /// queue_rebuild_options
    /// 	 : MAXDOP  EQUAL  decimal
    /// </summary>
    public partial class AstQueueRebuildOptions : AstRule
    {
        
        private AstDecimal _decimal;
        
        public AstQueueRebuildOptions(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstQueueRebuildOptions(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstQueueRebuildOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueRebuildOptions(this);
        }
        
        /// <summary>
        /// queue_rebuild_options : 
        ///    MAXDOP EQUAL decimal 
        /// </summary>
        public static AstQueueRebuildOptions QueueRebuildOptions(AstDecimal @decimal)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(@decimal);
            return new AstQueueRebuildOptions(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_contract
    /// 	 : CREATE  CONTRACT  contract_name_expression  (AUTHORIZATION  owner_id)?  LR_BRACKET  contract_items  RR_BRACKET
    /// </summary>
    public partial class AstCreateContract : AstAnotherStatement
    {
        
        private AstContractNameExpression _contractNameExpression;
        
        private AstOwnerId _ownerId;
        
        private AstContractItems _contractItems;
        
        public AstCreateContract(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContractNameExpression>())
                {
                    this._contractNameExpression = ((AstContractNameExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstContractItems>())
                {
                    this._contractItems = ((AstContractItems)(enumerator.Current));
                }
            }
        }
        
        public AstCreateContract(Position p, AstContractNameExpression contractNameExpression, AstOwnerId ownerId, AstContractItems contractItems) : 
                base(p)
        {
            this._contractNameExpression = contractNameExpression;
            this._ownerId = ownerId;
            this._contractItems = contractItems;
        }
        
        public AstCreateContract(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContractNameExpression>())
                {
                    this._contractNameExpression = ((AstContractNameExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstContractItems>())
                {
                    this._contractItems = ((AstContractItems)(enumerator.Current));
                }
            }
        }
        
        public virtual AstContractNameExpression ContractNameExpression
        {
            get
            {
                return this._contractNameExpression;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public virtual AstContractItems ContractItems
        {
            get
            {
                return this._contractItems;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateContract(this);
        }
        
        /// <summary>
        /// create_contract : 
        ///    CREATE CONTRACT contract_name_expression AUTHORIZATION owner_id ( contract_items ) 
        /// </summary>
        public static AstCreateContract CreateContract(AstContractNameExpression contractNameExpression, AstOwnerId ownerId, AstContractItems contractItems)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(contractNameExpression);
            list.Add(ownerId);
            list.Add(contractItems);
            return new AstCreateContract(Position.Default, list);
        }
    }
    
    /// <summary>
    /// contract_item
    /// 	 : (message_type_id | DEFAULT)  SENT  BY  init_target_any
    /// </summary>
    public partial class AstContractItem : AstRule
    {
        
        private AstMessageTypeId _messageTypeId;
        
        private AstInitTargetAny _initTargetAny;
        
        public AstContractItem(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeId>())
                {
                    this._messageTypeId = ((AstMessageTypeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstInitTargetAny>())
                {
                    this._initTargetAny = ((AstInitTargetAny)(enumerator.Current));
                }
            }
        }
        
        public AstContractItem(Position p, AstMessageTypeId messageTypeId, AstInitTargetAny initTargetAny) : 
                base(p)
        {
            this._messageTypeId = messageTypeId;
            this._initTargetAny = initTargetAny;
        }
        
        public AstContractItem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeId>())
                {
                    this._messageTypeId = ((AstMessageTypeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstInitTargetAny>())
                {
                    this._initTargetAny = ((AstInitTargetAny)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMessageTypeId MessageTypeId
        {
            get
            {
                return this._messageTypeId;
            }
        }
        
        public virtual AstInitTargetAny InitTargetAny
        {
            get
            {
                return this._initTargetAny;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContractItem(this);
        }
        
        /// <summary>
        /// contract_item : 
        ///    message_type_id SENT BY init_target_any 
        /// </summary>
        public static AstContractItem ContractItem(AstMessageTypeId messageTypeId, AstInitTargetAny initTargetAny)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(messageTypeId);
            list.Add(initTargetAny);
            return new AstContractItem(Position.Default, list);
        }
        
        /// <summary>
        /// contract_item : 
        ///    DEFAULT SENT BY init_target_any 
        /// </summary>
        public static AstContractItem ContractItem(AstInitTargetAny initTargetAny)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(initTargetAny);
            return new AstContractItem(Position.Default, list);
        }
    }
    
    /// <summary>
    /// message_statement
    /// 	 : CREATE  MESSAGE  TYPE  message_type_id  (AUTHORIZATION  owner_id)?  (VALIDATION  EQUAL  (NONE | EMPTY | WELL_FORMED_XML | VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_id))
    /// </summary>
    public partial class AstMessageStatement : AstAnotherStatement
    {
        
        private AstMessageTypeId _messageTypeId;
        
        private AstOwnerId _ownerId;
        
        private AstSchemaCollectionId _schemaCollectionId;
        
        public AstMessageStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeId>())
                {
                    this._messageTypeId = ((AstMessageTypeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaCollectionId>())
                {
                    this._schemaCollectionId = ((AstSchemaCollectionId)(enumerator.Current));
                }
            }
        }
        
        public AstMessageStatement(Position p, AstMessageTypeId messageTypeId, AstOwnerId ownerId, AstSchemaCollectionId schemaCollectionId) : 
                base(p)
        {
            this._messageTypeId = messageTypeId;
            this._ownerId = ownerId;
            this._schemaCollectionId = schemaCollectionId;
        }
        
        public AstMessageStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeId>())
                {
                    this._messageTypeId = ((AstMessageTypeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaCollectionId>())
                {
                    this._schemaCollectionId = ((AstSchemaCollectionId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMessageTypeId MessageTypeId
        {
            get
            {
                return this._messageTypeId;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public virtual AstSchemaCollectionId SchemaCollectionId
        {
            get
            {
                return this._schemaCollectionId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMessageStatement(this);
        }
        
        /// <summary>
        /// message_statement : 
        ///    CREATE MESSAGE TYPE message_type_id AUTHORIZATION owner_id VALIDATION EQUAL NONE 
        /// </summary>
        public static AstMessageStatement MessageStatement(AstMessageTypeId messageTypeId, AstOwnerId ownerId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(messageTypeId);
            list.Add(ownerId);
            return new AstMessageStatement(Position.Default, list);
        }
        
        /// <summary>
        /// message_statement : 
        ///    CREATE MESSAGE TYPE message_type_id AUTHORIZATION owner_id VALIDATION EQUAL VALID_XML WITH SCHEMA COLLECTION schema_collection_id 
        /// </summary>
        public static AstMessageStatement MessageStatement(AstMessageTypeId messageTypeId, AstOwnerId ownerId, AstSchemaCollectionId schemaCollectionId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(messageTypeId);
            list.Add(ownerId);
            list.Add(schemaCollectionId);
            return new AstMessageStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// merge_statement
    /// 	 : with_expression?  MERGE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  INTO?  ddl_object  with_table_hints?  as_table_alias?  USING  table_sources  ON  search_condition  when_matches  output_clause?  update_option_clause?  SEMI
    /// </summary>
    public partial class AstMergeStatement : AstDmlClause
    {
        
        private AstWithExpression _withExpression;
        
        private AstExpression _expression;
        
        private AstDdlObject _ddlObject;
        
        private AstWithTableHints _withTableHints;
        
        private AstAsTableAlias _asTableAlias;
        
        private AstTableSources _tableSources;
        
        private AstSearchCondition _searchCondition;
        
        private AstWhenMatches _whenMatches;
        
        private AstOutputClause _outputClause;
        
        private AstUpdateOptionClause _updateOptionClause;
        
        public AstMergeStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDdlObject>())
                {
                    this._ddlObject = ((AstDdlObject)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._tableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhenMatches>())
                {
                    this._whenMatches = ((AstWhenMatches)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOptionClause>())
                {
                    this._updateOptionClause = ((AstUpdateOptionClause)(enumerator.Current));
                }
            }
        }
        
        public AstMergeStatement(Position p, AstWithExpression withExpression, AstExpression expression, AstDdlObject ddlObject, AstWithTableHints withTableHints, AstAsTableAlias asTableAlias, AstTableSources tableSources, AstSearchCondition searchCondition, AstWhenMatches whenMatches, AstOutputClause outputClause, AstUpdateOptionClause updateOptionClause) : 
                base(p)
        {
            this._withExpression = withExpression;
            this._expression = expression;
            this._ddlObject = ddlObject;
            this._withTableHints = withTableHints;
            this._asTableAlias = asTableAlias;
            this._tableSources = tableSources;
            this._searchCondition = searchCondition;
            this._whenMatches = whenMatches;
            this._outputClause = outputClause;
            this._updateOptionClause = updateOptionClause;
        }
        
        public AstMergeStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDdlObject>())
                {
                    this._ddlObject = ((AstDdlObject)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._tableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhenMatches>())
                {
                    this._whenMatches = ((AstWhenMatches)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOptionClause>())
                {
                    this._updateOptionClause = ((AstUpdateOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstDdlObject DdlObject
        {
            get
            {
                return this._ddlObject;
            }
        }
        
        public virtual AstWithTableHints WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public virtual AstTableSources TableSources
        {
            get
            {
                return this._tableSources;
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public virtual AstWhenMatches WhenMatches
        {
            get
            {
                return this._whenMatches;
            }
        }
        
        public virtual AstOutputClause OutputClause
        {
            get
            {
                return this._outputClause;
            }
        }
        
        public virtual AstUpdateOptionClause UpdateOptionClause
        {
            get
            {
                return this._updateOptionClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMergeStatement(this);
        }
        
        /// <summary>
        /// merge_statement : 
        ///    with_expression? MERGE TOP ( expression ) PERCENT? INTO? ddl_object with_table_hints? as_table_alias? USING table_sources ON search_condition when_matches output_clause? update_option_clause? ; 
        /// </summary>
        public static AstMergeStatement MergeStatement(AstWithExpression? withExpression, AstExpression expression, AstDdlObject ddlObject, AstWithTableHints? withTableHints, AstAsTableAlias? asTableAlias, AstTableSources tableSources, AstSearchCondition searchCondition, AstWhenMatches whenMatches, AstOutputClause? outputClause, AstUpdateOptionClause? updateOptionClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(ddlObject);
            list.Add(withTableHints);
            list.Add(asTableAlias);
            list.Add(tableSources);
            list.Add(searchCondition);
            list.Add(whenMatches);
            list.Add(outputClause);
            list.Add(updateOptionClause);
            return new AstMergeStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// delete_statement
    /// 	 : with_expression?  DELETE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT? | TOP  decimal)?  FROM?  delete_statement_from  with_table_hints?  output_clause?  (FROM  table_sources)?  (WHERE  (search_condition | CURRENT  OF  (GLOBAL?  cursor_name | cursor_var = local_id)))?  for_clause?  update_option_clause?  SEMI?
    /// </summary>
    public partial class AstDeleteStatement : AstDmlClause
    {
        
        private AstWithExpression _withExpression;
        
        private AstExpression _expression;
        
        private AstDecimal _decimal;
        
        private AstDeleteStatementFrom _deleteStatementFrom;
        
        private AstWithTableHints _withTableHints;
        
        private AstOutputClause _outputClause;
        
        private AstTableSources _tableSources;
        
        private AstSearchCondition _searchCondition;
        
        private AstCursorName _cursorName;
        
        private AstLocalId _localId;
        
        private AstForClause _forClause;
        
        private AstUpdateOptionClause _updateOptionClause;
        
        public AstDeleteStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDeleteStatementFrom>())
                {
                    this._deleteStatementFrom = ((AstDeleteStatementFrom)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._tableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOptionClause>())
                {
                    this._updateOptionClause = ((AstUpdateOptionClause)(enumerator.Current));
                }
            }
        }
        
        public AstDeleteStatement(Position p, AstWithExpression withExpression, AstExpression expression, AstDecimal @decimal, AstDeleteStatementFrom deleteStatementFrom, AstWithTableHints withTableHints, AstOutputClause outputClause, AstTableSources tableSources, AstSearchCondition searchCondition, AstCursorName cursorName, AstLocalId localId, AstForClause forClause, AstUpdateOptionClause updateOptionClause) : 
                base(p)
        {
            this._withExpression = withExpression;
            this._expression = expression;
            this._decimal = @decimal;
            this._deleteStatementFrom = deleteStatementFrom;
            this._withTableHints = withTableHints;
            this._outputClause = outputClause;
            this._tableSources = tableSources;
            this._searchCondition = searchCondition;
            this._cursorName = cursorName;
            this._localId = localId;
            this._forClause = forClause;
            this._updateOptionClause = updateOptionClause;
        }
        
        public AstDeleteStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDeleteStatementFrom>())
                {
                    this._deleteStatementFrom = ((AstDeleteStatementFrom)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._tableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOptionClause>())
                {
                    this._updateOptionClause = ((AstUpdateOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstDeleteStatementFrom DeleteStatementFrom
        {
            get
            {
                return this._deleteStatementFrom;
            }
        }
        
        public virtual AstWithTableHints WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
        }
        
        public virtual AstOutputClause OutputClause
        {
            get
            {
                return this._outputClause;
            }
        }
        
        public virtual AstTableSources TableSources
        {
            get
            {
                return this._tableSources;
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public virtual AstCursorName CursorName
        {
            get
            {
                return this._cursorName;
            }
        }
        
        public virtual AstLocalId LocalId
        {
            get
            {
                return this._localId;
            }
        }
        
        public virtual AstForClause ForClause
        {
            get
            {
                return this._forClause;
            }
        }
        
        public virtual AstUpdateOptionClause UpdateOptionClause
        {
            get
            {
                return this._updateOptionClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeleteStatement(this);
        }
        
        /// <summary>
        /// delete_statement : 
        ///    with_expression? DELETE TOP ( expression ) PERCENT? FROM? delete_statement_from with_table_hints? output_clause? FROM table_sources WHERE search_condition for_clause? update_option_clause? SEMI? 
        /// </summary>
        public static AstDeleteStatement DeleteStatement(AstWithExpression? withExpression, AstExpression expression, AstDeleteStatementFrom deleteStatementFrom, AstWithTableHints? withTableHints, AstOutputClause? outputClause, AstTableSources tableSources, AstSearchCondition searchCondition, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(deleteStatementFrom);
            list.Add(withTableHints);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(searchCondition);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstDeleteStatement(Position.Default, list);
        }
        
        /// <summary>
        /// delete_statement : 
        ///    with_expression? DELETE TOP decimal FROM? delete_statement_from with_table_hints? output_clause? FROM table_sources WHERE search_condition for_clause? update_option_clause? SEMI? 
        /// </summary>
        public static AstDeleteStatement DeleteStatement(AstWithExpression? withExpression, AstDecimal @decimal, AstDeleteStatementFrom deleteStatementFrom, AstWithTableHints? withTableHints, AstOutputClause? outputClause, AstTableSources tableSources, AstSearchCondition searchCondition, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(withExpression);
            list.Add(@decimal);
            list.Add(deleteStatementFrom);
            list.Add(withTableHints);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(searchCondition);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstDeleteStatement(Position.Default, list);
        }
        
        /// <summary>
        /// delete_statement : 
        ///    with_expression? DELETE TOP ( expression ) PERCENT? FROM? delete_statement_from with_table_hints? output_clause? FROM table_sources WHERE CURRENT OF GLOBAL? cursor_name for_clause? update_option_clause? SEMI? 
        /// </summary>
        public static AstDeleteStatement DeleteStatement(AstWithExpression? withExpression, AstExpression expression, AstDeleteStatementFrom deleteStatementFrom, AstWithTableHints? withTableHints, AstOutputClause? outputClause, AstTableSources tableSources, AstCursorName cursorName, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(deleteStatementFrom);
            list.Add(withTableHints);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(cursorName);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstDeleteStatement(Position.Default, list);
        }
        
        /// <summary>
        /// delete_statement : 
        ///    with_expression? DELETE TOP decimal FROM? delete_statement_from with_table_hints? output_clause? FROM table_sources WHERE CURRENT OF GLOBAL? cursor_name for_clause? update_option_clause? SEMI? 
        /// </summary>
        public static AstDeleteStatement DeleteStatement(AstWithExpression? withExpression, AstDecimal @decimal, AstDeleteStatementFrom deleteStatementFrom, AstWithTableHints? withTableHints, AstOutputClause? outputClause, AstTableSources tableSources, AstCursorName cursorName, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(withExpression);
            list.Add(@decimal);
            list.Add(deleteStatementFrom);
            list.Add(withTableHints);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(cursorName);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstDeleteStatement(Position.Default, list);
        }
        
        /// <summary>
        /// delete_statement : 
        ///    with_expression? DELETE TOP ( expression ) PERCENT? FROM? delete_statement_from with_table_hints? output_clause? FROM table_sources WHERE CURRENT OF cursor_var=local_id for_clause? update_option_clause? SEMI? 
        /// </summary>
        public static AstDeleteStatement DeleteStatement(AstWithExpression? withExpression, AstExpression expression, AstDeleteStatementFrom deleteStatementFrom, AstWithTableHints? withTableHints, AstOutputClause? outputClause, AstTableSources tableSources, AstLocalId cursorVar, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(deleteStatementFrom);
            list.Add(withTableHints);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(cursorVar);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstDeleteStatement(Position.Default, list);
        }
        
        /// <summary>
        /// delete_statement : 
        ///    with_expression? DELETE TOP decimal FROM? delete_statement_from with_table_hints? output_clause? FROM table_sources WHERE CURRENT OF cursor_var=local_id for_clause? update_option_clause? SEMI? 
        /// </summary>
        public static AstDeleteStatement DeleteStatement(AstWithExpression? withExpression, AstDecimal @decimal, AstDeleteStatementFrom deleteStatementFrom, AstWithTableHints? withTableHints, AstOutputClause? outputClause, AstTableSources tableSources, AstLocalId cursorVar, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(withExpression);
            list.Add(@decimal);
            list.Add(deleteStatementFrom);
            list.Add(withTableHints);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(cursorVar);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstDeleteStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// insert_statement
    /// 	 : with_expression?  INSERT  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  INTO?  (ddl_object | rowset_function_limited)  with_table_hints?  (LR_BRACKET  insert_column_name_list  RR_BRACKET)?  output_clause?  insert_statement_value  for_clause?  update_option_clause?  SEMI?
    /// </summary>
    public partial class AstInsertStatement : AstDmlClause
    {
        
        private AstWithExpression _withExpression;
        
        private AstExpression _expression;
        
        private AstDdlObject _ddlObject;
        
        private AstRowsetFunctionLimited _rowsetFunctionLimited;
        
        private AstWithTableHints _withTableHints;
        
        private AstInsertColumnNameList _insertColumnNameList;
        
        private AstOutputClause _outputClause;
        
        private AstInsertStatementValue _insertStatementValue;
        
        private AstForClause _forClause;
        
        private AstUpdateOptionClause _updateOptionClause;
        
        public AstInsertStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDdlObject>())
                {
                    this._ddlObject = ((AstDdlObject)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowsetFunctionLimited>())
                {
                    this._rowsetFunctionLimited = ((AstRowsetFunctionLimited)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstInsertColumnNameList>())
                {
                    this._insertColumnNameList = ((AstInsertColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstInsertStatementValue>())
                {
                    this._insertStatementValue = ((AstInsertStatementValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOptionClause>())
                {
                    this._updateOptionClause = ((AstUpdateOptionClause)(enumerator.Current));
                }
            }
        }
        
        public AstInsertStatement(Position p, AstWithExpression withExpression, AstExpression expression, AstDdlObject ddlObject, AstRowsetFunctionLimited rowsetFunctionLimited, AstWithTableHints withTableHints, AstInsertColumnNameList insertColumnNameList, AstOutputClause outputClause, AstInsertStatementValue insertStatementValue, AstForClause forClause, AstUpdateOptionClause updateOptionClause) : 
                base(p)
        {
            this._withExpression = withExpression;
            this._expression = expression;
            this._ddlObject = ddlObject;
            this._rowsetFunctionLimited = rowsetFunctionLimited;
            this._withTableHints = withTableHints;
            this._insertColumnNameList = insertColumnNameList;
            this._outputClause = outputClause;
            this._insertStatementValue = insertStatementValue;
            this._forClause = forClause;
            this._updateOptionClause = updateOptionClause;
        }
        
        public AstInsertStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDdlObject>())
                {
                    this._ddlObject = ((AstDdlObject)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowsetFunctionLimited>())
                {
                    this._rowsetFunctionLimited = ((AstRowsetFunctionLimited)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstInsertColumnNameList>())
                {
                    this._insertColumnNameList = ((AstInsertColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstInsertStatementValue>())
                {
                    this._insertStatementValue = ((AstInsertStatementValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOptionClause>())
                {
                    this._updateOptionClause = ((AstUpdateOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstDdlObject DdlObject
        {
            get
            {
                return this._ddlObject;
            }
        }
        
        public virtual AstRowsetFunctionLimited RowsetFunctionLimited
        {
            get
            {
                return this._rowsetFunctionLimited;
            }
        }
        
        public virtual AstWithTableHints WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
        }
        
        public virtual AstInsertColumnNameList InsertColumnNameList
        {
            get
            {
                return this._insertColumnNameList;
            }
        }
        
        public virtual AstOutputClause OutputClause
        {
            get
            {
                return this._outputClause;
            }
        }
        
        public virtual AstInsertStatementValue InsertStatementValue
        {
            get
            {
                return this._insertStatementValue;
            }
        }
        
        public virtual AstForClause ForClause
        {
            get
            {
                return this._forClause;
            }
        }
        
        public virtual AstUpdateOptionClause UpdateOptionClause
        {
            get
            {
                return this._updateOptionClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitInsertStatement(this);
        }
        
        /// <summary>
        /// insert_statement : 
        ///    with_expression? INSERT TOP ( expression ) PERCENT? INTO? ddl_object with_table_hints? ( insert_column_name_list ) output_clause? insert_statement_value for_clause? update_option_clause? SEMI? 
        /// </summary>
        public static AstInsertStatement InsertStatement(AstWithExpression? withExpression, AstExpression expression, AstDdlObject ddlObject, AstWithTableHints? withTableHints, AstInsertColumnNameList insertColumnNameList, AstOutputClause? outputClause, AstInsertStatementValue insertStatementValue, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(ddlObject);
            list.Add(withTableHints);
            list.Add(insertColumnNameList);
            list.Add(outputClause);
            list.Add(insertStatementValue);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstInsertStatement(Position.Default, list);
        }
        
        /// <summary>
        /// insert_statement : 
        ///    with_expression? INSERT TOP ( expression ) PERCENT? INTO? rowset_function_limited with_table_hints? ( insert_column_name_list ) output_clause? insert_statement_value for_clause? update_option_clause? SEMI? 
        /// </summary>
        public static AstInsertStatement InsertStatement(AstWithExpression? withExpression, AstExpression expression, AstRowsetFunctionLimited rowsetFunctionLimited, AstWithTableHints? withTableHints, AstInsertColumnNameList insertColumnNameList, AstOutputClause? outputClause, AstInsertStatementValue insertStatementValue, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(rowsetFunctionLimited);
            list.Add(withTableHints);
            list.Add(insertColumnNameList);
            list.Add(outputClause);
            list.Add(insertStatementValue);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstInsertStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// receive_statement
    /// 	 : LR_BRACKET?  RECEIVE  receive_mode  receive_ids?  FROM  complete_table_ref  receive_into?  RR_BRACKET?
    /// </summary>
    public partial class AstReceiveStatement : AstRule
    {
        
        private AstReceiveMode _receiveMode;
        
        private AstReceiveIds _receiveIds;
        
        private AstCompleteTableRef _completeTableRef;
        
        private AstReceiveInto _receiveInto;
        
        public AstReceiveStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReceiveMode>())
                {
                    this._receiveMode = ((AstReceiveMode)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstReceiveIds>())
                {
                    this._receiveIds = ((AstReceiveIds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCompleteTableRef>())
                {
                    this._completeTableRef = ((AstCompleteTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstReceiveInto>())
                {
                    this._receiveInto = ((AstReceiveInto)(enumerator.Current));
                }
            }
        }
        
        public AstReceiveStatement(Position p, AstReceiveMode receiveMode, AstReceiveIds receiveIds, AstCompleteTableRef completeTableRef, AstReceiveInto receiveInto) : 
                base(p)
        {
            this._receiveMode = receiveMode;
            this._receiveIds = receiveIds;
            this._completeTableRef = completeTableRef;
            this._receiveInto = receiveInto;
        }
        
        public AstReceiveStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReceiveMode>())
                {
                    this._receiveMode = ((AstReceiveMode)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstReceiveIds>())
                {
                    this._receiveIds = ((AstReceiveIds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCompleteTableRef>())
                {
                    this._completeTableRef = ((AstCompleteTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstReceiveInto>())
                {
                    this._receiveInto = ((AstReceiveInto)(enumerator.Current));
                }
            }
        }
        
        public virtual AstReceiveMode ReceiveMode
        {
            get
            {
                return this._receiveMode;
            }
        }
        
        public virtual AstReceiveIds ReceiveIds
        {
            get
            {
                return this._receiveIds;
            }
        }
        
        public virtual AstCompleteTableRef CompleteTableRef
        {
            get
            {
                return this._completeTableRef;
            }
        }
        
        public virtual AstReceiveInto ReceiveInto
        {
            get
            {
                return this._receiveInto;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReceiveStatement(this);
        }
        
        /// <summary>
        /// receive_statement : 
        ///    LR_BRACKET? RECEIVE receive_mode receive_ids? FROM complete_table_ref receive_into? RR_BRACKET? 
        /// </summary>
        public static AstReceiveStatement ReceiveStatement(AstReceiveMode receiveMode, AstReceiveIds? receiveIds, AstCompleteTableRef completeTableRef, AstReceiveInto? receiveInto)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(receiveMode);
            list.Add(receiveIds);
            list.Add(completeTableRef);
            list.Add(receiveInto);
            return new AstReceiveStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// receive_into
    /// 	 : INTO  table_id  where_condition
    /// </summary>
    public partial class AstReceiveInto : AstRule
    {
        
        private AstTableId _tableId;
        
        private AstWhereCondition _whereCondition;
        
        public AstReceiveInto(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhereCondition>())
                {
                    this._whereCondition = ((AstWhereCondition)(enumerator.Current));
                }
            }
        }
        
        public AstReceiveInto(Position p, AstTableId tableId, AstWhereCondition whereCondition) : 
                base(p)
        {
            this._tableId = tableId;
            this._whereCondition = whereCondition;
        }
        
        public AstReceiveInto(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhereCondition>())
                {
                    this._whereCondition = ((AstWhereCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableId TableId
        {
            get
            {
                return this._tableId;
            }
        }
        
        public virtual AstWhereCondition WhereCondition
        {
            get
            {
                return this._whereCondition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReceiveInto(this);
        }
        
        /// <summary>
        /// receive_into : 
        ///    INTO table_id where_condition 
        /// </summary>
        public static AstReceiveInto ReceiveInto(AstTableId tableId, AstWhereCondition whereCondition)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(tableId);
            list.Add(whereCondition);
            return new AstReceiveInto(Position.Default, list);
        }
    }
    
    /// <summary>
    /// where_condition
    /// 	 : WHERE  search_condition
    /// </summary>
    public partial class AstWhereCondition : AstRule
    {
        
        private AstSearchCondition _searchCondition;
        
        public AstWhereCondition(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstWhereCondition(Position p, AstSearchCondition searchCondition) : 
                base(p)
        {
            this._searchCondition = searchCondition;
        }
        
        public AstWhereCondition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWhereCondition(this);
        }
        
        /// <summary>
        /// where_condition : 
        ///    WHERE search_condition 
        /// </summary>
        public static AstWhereCondition WhereCondition(AstSearchCondition searchCondition)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(searchCondition);
            return new AstWhereCondition(Position.Default, list);
        }
    }
    
    /// <summary>
    /// receive_id
    /// 	 : local_id  EQUAL  expression
    /// </summary>
    public partial class AstReceiveId : AstRule
    {
        
        private AstLocalId _localId;
        
        private AstExpression _expression;
        
        public AstReceiveId(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstReceiveId(Position p, AstLocalId localId, AstExpression expression) : 
                base(p)
        {
            this._localId = localId;
            this._expression = expression;
        }
        
        public AstReceiveId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalId LocalId
        {
            get
            {
                return this._localId;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReceiveId(this);
        }
        
        /// <summary>
        /// receive_id : 
        ///    local_id EQUAL expression 
        /// </summary>
        public static AstReceiveId ReceiveId(AstLocalId localId, AstExpression expression)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(localId);
            list.Add(expression);
            return new AstReceiveId(Position.Default, list);
        }
    }
    
    /// <summary>
    /// select_statement_standalone
    /// 	 : with_expression?  select_statement
    /// </summary>
    public partial class AstSelectStatementStandalone : AstDmlClause
    {
        
        private AstWithExpression _withExpression;
        
        private AstSelectStatement _selectStatement;
        
        public AstSelectStatementStandalone(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatement>())
                {
                    this._selectStatement = ((AstSelectStatement)(enumerator.Current));
                }
            }
        }
        
        public AstSelectStatementStandalone(Position p, AstWithExpression withExpression, AstSelectStatement selectStatement) : 
                base(p)
        {
            this._withExpression = withExpression;
            this._selectStatement = selectStatement;
        }
        
        public AstSelectStatementStandalone(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatement>())
                {
                    this._selectStatement = ((AstSelectStatement)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstSelectStatement SelectStatement
        {
            get
            {
                return this._selectStatement;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectStatementStandalone(this);
        }
        
        /// <summary>
        /// select_statement_standalone : 
        ///    with_expression? select_statement 
        /// </summary>
        public static AstSelectStatementStandalone SelectStatementStandalone(AstWithExpression? withExpression, AstSelectStatement selectStatement)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(withExpression);
            list.Add(selectStatement);
            return new AstSelectStatementStandalone(Position.Default, list);
        }
    }
    
    /// <summary>
    /// select_statement
    /// 	 : query_expression  select_order_by_clause?  for_clause?  update_option_clause?  SEMI?
    /// </summary>
    public partial class AstSelectStatement : AstRule
    {
        
        private AstQueryExpression _queryExpression;
        
        private AstSelectOrderByClause _selectOrderByClause;
        
        private AstForClause _forClause;
        
        private AstUpdateOptionClause _updateOptionClause;
        
        public AstSelectStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueryExpression>())
                {
                    this._queryExpression = ((AstQueryExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectOrderByClause>())
                {
                    this._selectOrderByClause = ((AstSelectOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOptionClause>())
                {
                    this._updateOptionClause = ((AstUpdateOptionClause)(enumerator.Current));
                }
            }
        }
        
        public AstSelectStatement(Position p, AstQueryExpression queryExpression, AstSelectOrderByClause selectOrderByClause, AstForClause forClause, AstUpdateOptionClause updateOptionClause) : 
                base(p)
        {
            this._queryExpression = queryExpression;
            this._selectOrderByClause = selectOrderByClause;
            this._forClause = forClause;
            this._updateOptionClause = updateOptionClause;
        }
        
        public AstSelectStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueryExpression>())
                {
                    this._queryExpression = ((AstQueryExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectOrderByClause>())
                {
                    this._selectOrderByClause = ((AstSelectOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOptionClause>())
                {
                    this._updateOptionClause = ((AstUpdateOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstQueryExpression QueryExpression
        {
            get
            {
                return this._queryExpression;
            }
        }
        
        public virtual AstSelectOrderByClause SelectOrderByClause
        {
            get
            {
                return this._selectOrderByClause;
            }
        }
        
        public virtual AstForClause ForClause
        {
            get
            {
                return this._forClause;
            }
        }
        
        public virtual AstUpdateOptionClause UpdateOptionClause
        {
            get
            {
                return this._updateOptionClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectStatement(this);
        }
        
        /// <summary>
        /// select_statement : 
        ///    query_expression select_order_by_clause? for_clause? update_option_clause? SEMI? 
        /// </summary>
        public static AstSelectStatement SelectStatement(AstQueryExpression queryExpression, AstSelectOrderByClause? selectOrderByClause, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(queryExpression);
            list.Add(selectOrderByClause);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstSelectStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// update_statement
    /// 	 : with_expression?  UPDATE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  (ddl_object | rowset_function_limited)  with_table_hints?  SET  update_elems  output_clause?  (FROM  table_sources)?  (WHERE  (search_condition | CURRENT  OF  (GLOBAL?  cursor_name | cursor_var = local_id)))?  for_clause?  update_option_clause?  SEMI?
    /// </summary>
    public partial class AstUpdateStatement : AstDmlClause
    {
        
        private AstWithExpression _withExpression;
        
        private AstExpression _expression;
        
        private AstDdlObject _ddlObject;
        
        private AstRowsetFunctionLimited _rowsetFunctionLimited;
        
        private AstWithTableHints _withTableHints;
        
        private AstUpdateElems _updateElems;
        
        private AstOutputClause _outputClause;
        
        private AstTableSources _tableSources;
        
        private AstSearchCondition _searchCondition;
        
        private AstCursorName _cursorName;
        
        private AstLocalId _localId;
        
        private AstForClause _forClause;
        
        private AstUpdateOptionClause _updateOptionClause;
        
        public AstUpdateStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDdlObject>())
                {
                    this._ddlObject = ((AstDdlObject)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowsetFunctionLimited>())
                {
                    this._rowsetFunctionLimited = ((AstRowsetFunctionLimited)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateElems>())
                {
                    this._updateElems = ((AstUpdateElems)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._tableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOptionClause>())
                {
                    this._updateOptionClause = ((AstUpdateOptionClause)(enumerator.Current));
                }
            }
        }
        
        public AstUpdateStatement(Position p, AstWithExpression withExpression, AstExpression expression, AstDdlObject ddlObject, AstRowsetFunctionLimited rowsetFunctionLimited, AstWithTableHints withTableHints, AstUpdateElems updateElems, AstOutputClause outputClause, AstTableSources tableSources, AstSearchCondition searchCondition, AstCursorName cursorName, AstLocalId localId, AstForClause forClause, AstUpdateOptionClause updateOptionClause) : 
                base(p)
        {
            this._withExpression = withExpression;
            this._expression = expression;
            this._ddlObject = ddlObject;
            this._rowsetFunctionLimited = rowsetFunctionLimited;
            this._withTableHints = withTableHints;
            this._updateElems = updateElems;
            this._outputClause = outputClause;
            this._tableSources = tableSources;
            this._searchCondition = searchCondition;
            this._cursorName = cursorName;
            this._localId = localId;
            this._forClause = forClause;
            this._updateOptionClause = updateOptionClause;
        }
        
        public AstUpdateStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression>())
                {
                    this._withExpression = ((AstWithExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDdlObject>())
                {
                    this._ddlObject = ((AstDdlObject)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowsetFunctionLimited>())
                {
                    this._rowsetFunctionLimited = ((AstRowsetFunctionLimited)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints>())
                {
                    this._withTableHints = ((AstWithTableHints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateElems>())
                {
                    this._updateElems = ((AstUpdateElems)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause>())
                {
                    this._outputClause = ((AstOutputClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._tableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause>())
                {
                    this._forClause = ((AstForClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOptionClause>())
                {
                    this._updateOptionClause = ((AstUpdateOptionClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstDdlObject DdlObject
        {
            get
            {
                return this._ddlObject;
            }
        }
        
        public virtual AstRowsetFunctionLimited RowsetFunctionLimited
        {
            get
            {
                return this._rowsetFunctionLimited;
            }
        }
        
        public virtual AstWithTableHints WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
        }
        
        public virtual AstUpdateElems UpdateElems
        {
            get
            {
                return this._updateElems;
            }
        }
        
        public virtual AstOutputClause OutputClause
        {
            get
            {
                return this._outputClause;
            }
        }
        
        public virtual AstTableSources TableSources
        {
            get
            {
                return this._tableSources;
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public virtual AstCursorName CursorName
        {
            get
            {
                return this._cursorName;
            }
        }
        
        public virtual AstLocalId LocalId
        {
            get
            {
                return this._localId;
            }
        }
        
        public virtual AstForClause ForClause
        {
            get
            {
                return this._forClause;
            }
        }
        
        public virtual AstUpdateOptionClause UpdateOptionClause
        {
            get
            {
                return this._updateOptionClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateStatement(this);
        }
        
        /// <summary>
        /// update_statement : 
        ///    with_expression? UPDATE TOP ( expression ) PERCENT? ddl_object with_table_hints? SET update_elems output_clause? FROM table_sources WHERE search_condition for_clause? update_option_clause? SEMI? 
        /// </summary>
        public static AstUpdateStatement UpdateStatement(AstWithExpression? withExpression, AstExpression expression, AstDdlObject ddlObject, AstWithTableHints? withTableHints, AstUpdateElems updateElems, AstOutputClause? outputClause, AstTableSources tableSources, AstSearchCondition searchCondition, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(ddlObject);
            list.Add(withTableHints);
            list.Add(updateElems);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(searchCondition);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstUpdateStatement(Position.Default, list);
        }
        
        /// <summary>
        /// update_statement : 
        ///    with_expression? UPDATE TOP ( expression ) PERCENT? rowset_function_limited with_table_hints? SET update_elems output_clause? FROM table_sources WHERE search_condition for_clause? update_option_clause? SEMI? 
        /// </summary>
        public static AstUpdateStatement UpdateStatement(AstWithExpression? withExpression, AstExpression expression, AstRowsetFunctionLimited rowsetFunctionLimited, AstWithTableHints? withTableHints, AstUpdateElems updateElems, AstOutputClause? outputClause, AstTableSources tableSources, AstSearchCondition searchCondition, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(rowsetFunctionLimited);
            list.Add(withTableHints);
            list.Add(updateElems);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(searchCondition);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstUpdateStatement(Position.Default, list);
        }
        
        /// <summary>
        /// update_statement : 
        ///    with_expression? UPDATE TOP ( expression ) PERCENT? ddl_object with_table_hints? SET update_elems output_clause? FROM table_sources WHERE CURRENT OF GLOBAL? cursor_name for_clause? update_option_clause? SEMI? 
        /// </summary>
        public static AstUpdateStatement UpdateStatement(AstWithExpression? withExpression, AstExpression expression, AstDdlObject ddlObject, AstWithTableHints? withTableHints, AstUpdateElems updateElems, AstOutputClause? outputClause, AstTableSources tableSources, AstCursorName cursorName, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(ddlObject);
            list.Add(withTableHints);
            list.Add(updateElems);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(cursorName);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstUpdateStatement(Position.Default, list);
        }
        
        /// <summary>
        /// update_statement : 
        ///    with_expression? UPDATE TOP ( expression ) PERCENT? rowset_function_limited with_table_hints? SET update_elems output_clause? FROM table_sources WHERE CURRENT OF GLOBAL? cursor_name for_clause? update_option_clause? SEMI? 
        /// </summary>
        public static AstUpdateStatement UpdateStatement(AstWithExpression? withExpression, AstExpression expression, AstRowsetFunctionLimited rowsetFunctionLimited, AstWithTableHints? withTableHints, AstUpdateElems updateElems, AstOutputClause? outputClause, AstTableSources tableSources, AstCursorName cursorName, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(rowsetFunctionLimited);
            list.Add(withTableHints);
            list.Add(updateElems);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(cursorName);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstUpdateStatement(Position.Default, list);
        }
        
        /// <summary>
        /// update_statement : 
        ///    with_expression? UPDATE TOP ( expression ) PERCENT? ddl_object with_table_hints? SET update_elems output_clause? FROM table_sources WHERE CURRENT OF cursor_var=local_id for_clause? update_option_clause? SEMI? 
        /// </summary>
        public static AstUpdateStatement UpdateStatement(AstWithExpression? withExpression, AstExpression expression, AstDdlObject ddlObject, AstWithTableHints? withTableHints, AstUpdateElems updateElems, AstOutputClause? outputClause, AstTableSources tableSources, AstLocalId cursorVar, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(ddlObject);
            list.Add(withTableHints);
            list.Add(updateElems);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(cursorVar);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstUpdateStatement(Position.Default, list);
        }
        
        /// <summary>
        /// update_statement : 
        ///    with_expression? UPDATE TOP ( expression ) PERCENT? rowset_function_limited with_table_hints? SET update_elems output_clause? FROM table_sources WHERE CURRENT OF cursor_var=local_id for_clause? update_option_clause? SEMI? 
        /// </summary>
        public static AstUpdateStatement UpdateStatement(AstWithExpression? withExpression, AstExpression expression, AstRowsetFunctionLimited rowsetFunctionLimited, AstWithTableHints? withTableHints, AstUpdateElems updateElems, AstOutputClause? outputClause, AstTableSources tableSources, AstLocalId cursorVar, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(rowsetFunctionLimited);
            list.Add(withTableHints);
            list.Add(updateElems);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(cursorVar);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstUpdateStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// output_clause
    /// 	 : OUTPUT  output_dml_list_elems  (INTO  (local_id | full_table_ref)  (LR_BRACKET  column_name_list  RR_BRACKET)?)?
    /// </summary>
    public partial class AstOutputClause : AstRule
    {
        
        private AstOutputDmlListElems _outputDmlListElems;
        
        private AstLocalId _localId;
        
        private AstFullTableRef _fullTableRef;
        
        private AstColumnNameList _columnNameList;
        
        public AstOutputClause(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOutputDmlListElems>())
                {
                    this._outputDmlListElems = ((AstOutputDmlListElems)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public AstOutputClause(Position p, AstOutputDmlListElems outputDmlListElems, AstLocalId localId, AstFullTableRef fullTableRef, AstColumnNameList columnNameList) : 
                base(p)
        {
            this._outputDmlListElems = outputDmlListElems;
            this._localId = localId;
            this._fullTableRef = fullTableRef;
            this._columnNameList = columnNameList;
        }
        
        public AstOutputClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOutputDmlListElems>())
                {
                    this._outputDmlListElems = ((AstOutputDmlListElems)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOutputDmlListElems OutputDmlListElems
        {
            get
            {
                return this._outputDmlListElems;
            }
        }
        
        public virtual AstLocalId LocalId
        {
            get
            {
                return this._localId;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstColumnNameList ColumnNameList
        {
            get
            {
                return this._columnNameList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOutputClause(this);
        }
        
        /// <summary>
        /// output_clause : 
        ///    OUTPUT output_dml_list_elems INTO local_id ( column_name_list ) 
        /// </summary>
        public static AstOutputClause OutputClause(AstOutputDmlListElems outputDmlListElems, AstLocalId localId, AstColumnNameList columnNameList)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(outputDmlListElems);
            list.Add(localId);
            list.Add(columnNameList);
            return new AstOutputClause(Position.Default, list);
        }
        
        /// <summary>
        /// output_clause : 
        ///    OUTPUT output_dml_list_elems INTO full_table_ref ( column_name_list ) 
        /// </summary>
        public static AstOutputClause OutputClause(AstOutputDmlListElems outputDmlListElems, AstFullTableRef fullTableRef, AstColumnNameList columnNameList)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(outputDmlListElems);
            list.Add(fullTableRef);
            list.Add(columnNameList);
            return new AstOutputClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// output_dml_list_elem
    /// 	 : (expression | asterisk)  as_column_alias?
    /// </summary>
    public partial class AstOutputDmlListElem : AstRule
    {
        
        private AstExpression _expression;
        
        private AstAsterisk _asterisk;
        
        private AstAsColumnAlias _asColumnAlias;
        
        public AstOutputDmlListElem(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsterisk>())
                {
                    this._asterisk = ((AstAsterisk)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsColumnAlias>())
                {
                    this._asColumnAlias = ((AstAsColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public AstOutputDmlListElem(Position p, AstExpression expression, AstAsterisk asterisk, AstAsColumnAlias asColumnAlias) : 
                base(p)
        {
            this._expression = expression;
            this._asterisk = asterisk;
            this._asColumnAlias = asColumnAlias;
        }
        
        public AstOutputDmlListElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsterisk>())
                {
                    this._asterisk = ((AstAsterisk)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsColumnAlias>())
                {
                    this._asColumnAlias = ((AstAsColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstAsterisk Asterisk
        {
            get
            {
                return this._asterisk;
            }
        }
        
        public virtual AstAsColumnAlias AsColumnAlias
        {
            get
            {
                return this._asColumnAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOutputDmlListElem(this);
        }
        
        /// <summary>
        /// output_dml_list_elem : 
        ///    expression as_column_alias? 
        /// </summary>
        public static AstOutputDmlListElem OutputDmlListElem(AstExpression expression, AstAsColumnAlias? asColumnAlias)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(expression);
            list.Add(asColumnAlias);
            return new AstOutputDmlListElem(Position.Default, list);
        }
        
        /// <summary>
        /// output_dml_list_elem : 
        ///    asterisk as_column_alias? 
        /// </summary>
        public static AstOutputDmlListElem OutputDmlListElem(AstAsterisk asterisk, AstAsColumnAlias? asColumnAlias)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(asterisk);
            list.Add(asColumnAlias);
            return new AstOutputDmlListElem(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_database
    /// 	 : CREATE  DATABASE  database_id  database_containment?  database_on_primary?  database_on_log?  database_collate?  database_create_with?
    /// </summary>
    public partial class AstCreateDatabase : AstDdlClause
    {
        
        private AstDatabaseId _databaseId;
        
        private AstDatabaseContainment _databaseContainment;
        
        private AstDatabaseOnPrimary _databaseOnPrimary;
        
        private AstDatabaseOnLog _databaseOnLog;
        
        private AstDatabaseCollate _databaseCollate;
        
        private AstDatabaseCreateWith _databaseCreateWith;
        
        public AstCreateDatabase(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseContainment>())
                {
                    this._databaseContainment = ((AstDatabaseContainment)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseOnPrimary>())
                {
                    this._databaseOnPrimary = ((AstDatabaseOnPrimary)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseOnLog>())
                {
                    this._databaseOnLog = ((AstDatabaseOnLog)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseCollate>())
                {
                    this._databaseCollate = ((AstDatabaseCollate)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseCreateWith>())
                {
                    this._databaseCreateWith = ((AstDatabaseCreateWith)(enumerator.Current));
                }
            }
        }
        
        public AstCreateDatabase(Position p, AstDatabaseId databaseId, AstDatabaseContainment databaseContainment, AstDatabaseOnPrimary databaseOnPrimary, AstDatabaseOnLog databaseOnLog, AstDatabaseCollate databaseCollate, AstDatabaseCreateWith databaseCreateWith) : 
                base(p)
        {
            this._databaseId = databaseId;
            this._databaseContainment = databaseContainment;
            this._databaseOnPrimary = databaseOnPrimary;
            this._databaseOnLog = databaseOnLog;
            this._databaseCollate = databaseCollate;
            this._databaseCreateWith = databaseCreateWith;
        }
        
        public AstCreateDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseContainment>())
                {
                    this._databaseContainment = ((AstDatabaseContainment)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseOnPrimary>())
                {
                    this._databaseOnPrimary = ((AstDatabaseOnPrimary)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseOnLog>())
                {
                    this._databaseOnLog = ((AstDatabaseOnLog)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseCollate>())
                {
                    this._databaseCollate = ((AstDatabaseCollate)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseCreateWith>())
                {
                    this._databaseCreateWith = ((AstDatabaseCreateWith)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstDatabaseContainment DatabaseContainment
        {
            get
            {
                return this._databaseContainment;
            }
        }
        
        public virtual AstDatabaseOnPrimary DatabaseOnPrimary
        {
            get
            {
                return this._databaseOnPrimary;
            }
        }
        
        public virtual AstDatabaseOnLog DatabaseOnLog
        {
            get
            {
                return this._databaseOnLog;
            }
        }
        
        public virtual AstDatabaseCollate DatabaseCollate
        {
            get
            {
                return this._databaseCollate;
            }
        }
        
        public virtual AstDatabaseCreateWith DatabaseCreateWith
        {
            get
            {
                return this._databaseCreateWith;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateDatabase(this);
        }
        
        /// <summary>
        /// create_database : 
        ///    CREATE DATABASE database_id database_containment? database_on_primary? database_on_log? database_collate? database_create_with? 
        /// </summary>
        public static AstCreateDatabase CreateDatabase(AstDatabaseId databaseId, AstDatabaseContainment? databaseContainment, AstDatabaseOnPrimary? databaseOnPrimary, AstDatabaseOnLog? databaseOnLog, AstDatabaseCollate? databaseCollate, AstDatabaseCreateWith? databaseCreateWith)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(databaseId);
            list.Add(databaseContainment);
            list.Add(databaseOnPrimary);
            list.Add(databaseOnLog);
            list.Add(databaseCollate);
            list.Add(databaseCreateWith);
            return new AstCreateDatabase(Position.Default, list);
        }
    }
    
    /// <summary>
    /// database_containment
    /// 	 : CONTAINMENT  EQUAL  none_partial
    /// </summary>
    public partial class AstDatabaseContainment : AstRule
    {
        
        private AstNonePartial _nonePartial;
        
        public AstDatabaseContainment(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNonePartial>())
                {
                    this._nonePartial = ((AstNonePartial)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseContainment(Position p, AstNonePartial nonePartial) : 
                base(p)
        {
            this._nonePartial = nonePartial;
        }
        
        public AstDatabaseContainment(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNonePartial>())
                {
                    this._nonePartial = ((AstNonePartial)(enumerator.Current));
                }
            }
        }
        
        public virtual AstNonePartial NonePartial
        {
            get
            {
                return this._nonePartial;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseContainment(this);
        }
        
        /// <summary>
        /// database_containment : 
        ///    CONTAINMENT EQUAL none_partial 
        /// </summary>
        public static AstDatabaseContainment DatabaseContainment(AstNonePartial nonePartial)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(nonePartial);
            return new AstDatabaseContainment(Position.Default, list);
        }
    }
    
    /// <summary>
    /// database_on_primary
    /// 	 : ON  PRIMARY?  database_file_spec_list
    /// </summary>
    public partial class AstDatabaseOnPrimary : AstRule
    {
        
        private AstDatabaseFileSpecList _databaseFileSpecList;
        
        public AstDatabaseOnPrimary(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseFileSpecList>())
                {
                    this._databaseFileSpecList = ((AstDatabaseFileSpecList)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseOnPrimary(Position p, AstDatabaseFileSpecList databaseFileSpecList) : 
                base(p)
        {
            this._databaseFileSpecList = databaseFileSpecList;
        }
        
        public AstDatabaseOnPrimary(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseFileSpecList>())
                {
                    this._databaseFileSpecList = ((AstDatabaseFileSpecList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseFileSpecList DatabaseFileSpecList
        {
            get
            {
                return this._databaseFileSpecList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseOnPrimary(this);
        }
        
        /// <summary>
        /// database_on_primary : 
        ///    ON PRIMARY? database_file_spec_list 
        /// </summary>
        public static AstDatabaseOnPrimary DatabaseOnPrimary(AstDatabaseFileSpecList databaseFileSpecList)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(databaseFileSpecList);
            return new AstDatabaseOnPrimary(Position.Default, list);
        }
    }
    
    /// <summary>
    /// database_on_log
    /// 	 : ON  PRIMARY?  database_file_spec_list
    /// </summary>
    public partial class AstDatabaseOnLog : AstRule
    {
        
        private AstDatabaseFileSpecList _databaseFileSpecList;
        
        public AstDatabaseOnLog(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseFileSpecList>())
                {
                    this._databaseFileSpecList = ((AstDatabaseFileSpecList)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseOnLog(Position p, AstDatabaseFileSpecList databaseFileSpecList) : 
                base(p)
        {
            this._databaseFileSpecList = databaseFileSpecList;
        }
        
        public AstDatabaseOnLog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseFileSpecList>())
                {
                    this._databaseFileSpecList = ((AstDatabaseFileSpecList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseFileSpecList DatabaseFileSpecList
        {
            get
            {
                return this._databaseFileSpecList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseOnLog(this);
        }
        
        /// <summary>
        /// database_on_log : 
        ///    ON PRIMARY? database_file_spec_list 
        /// </summary>
        public static AstDatabaseOnLog DatabaseOnLog(AstDatabaseFileSpecList databaseFileSpecList)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(databaseFileSpecList);
            return new AstDatabaseOnLog(Position.Default, list);
        }
    }
    
    /// <summary>
    /// database_collate
    /// 	 : COLLATE  collation_id
    /// </summary>
    public partial class AstDatabaseCollate : AstRule
    {
        
        private AstCollationId _collationId;
        
        public AstDatabaseCollate(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCollationId>())
                {
                    this._collationId = ((AstCollationId)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseCollate(Position p, AstCollationId collationId) : 
                base(p)
        {
            this._collationId = collationId;
        }
        
        public AstDatabaseCollate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCollationId>())
                {
                    this._collationId = ((AstCollationId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCollationId CollationId
        {
            get
            {
                return this._collationId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseCollate(this);
        }
        
        /// <summary>
        /// database_collate : 
        ///    COLLATE collation_id 
        /// </summary>
        public static AstDatabaseCollate DatabaseCollate(AstCollationId collationId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(collationId);
            return new AstDatabaseCollate(Position.Default, list);
        }
    }
    
    /// <summary>
    /// database_create_with
    /// 	 : WITH  create_database_option_list
    /// </summary>
    public partial class AstDatabaseCreateWith : AstRule
    {
        
        private AstCreateDatabaseOptionList _createDatabaseOptionList;
        
        public AstDatabaseCreateWith(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateDatabaseOptionList>())
                {
                    this._createDatabaseOptionList = ((AstCreateDatabaseOptionList)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseCreateWith(Position p, AstCreateDatabaseOptionList createDatabaseOptionList) : 
                base(p)
        {
            this._createDatabaseOptionList = createDatabaseOptionList;
        }
        
        public AstDatabaseCreateWith(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateDatabaseOptionList>())
                {
                    this._createDatabaseOptionList = ((AstCreateDatabaseOptionList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCreateDatabaseOptionList CreateDatabaseOptionList
        {
            get
            {
                return this._createDatabaseOptionList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseCreateWith(this);
        }
        
        /// <summary>
        /// database_create_with : 
        ///    WITH create_database_option_list 
        /// </summary>
        public static AstDatabaseCreateWith DatabaseCreateWith(AstCreateDatabaseOptionList createDatabaseOptionList)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(createDatabaseOptionList);
            return new AstDatabaseCreateWith(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_index
    /// 	 : CREATE  UNIQUE?  clustered?  INDEX  index_id  ON  full_table_ref  LR_BRACKET  column_name_list_with_order  RR_BRACKET  (INCLUDE  LR_BRACKET  column_name_list  RR_BRACKET)?  where_condition?  (create_index_options)?  (ON  file_group_id)?  SEMI?
    /// </summary>
    public partial class AstCreateIndex : AstDdlClause
    {
        
        private AstClustered _clustered;
        
        private AstIndexId _indexId;
        
        private AstFullTableRef _fullTableRef;
        
        private AstColumnNameListWithOrder _columnNameListWithOrder;
        
        private AstColumnNameList _columnNameList;
        
        private AstWhereCondition _whereCondition;
        
        private AstCreateIndexOptions _createIndexOptions;
        
        private AstFileGroupId _fileGroupId;
        
        public AstCreateIndex(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClustered>())
                {
                    this._clustered = ((AstClustered)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this._columnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhereCondition>())
                {
                    this._whereCondition = ((AstWhereCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateIndexOptions>())
                {
                    this._createIndexOptions = ((AstCreateIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateIndex(Position p, AstClustered clustered, AstIndexId indexId, AstFullTableRef fullTableRef, AstColumnNameListWithOrder columnNameListWithOrder, AstColumnNameList columnNameList, AstWhereCondition whereCondition, AstCreateIndexOptions createIndexOptions, AstFileGroupId fileGroupId) : 
                base(p)
        {
            this._clustered = clustered;
            this._indexId = indexId;
            this._fullTableRef = fullTableRef;
            this._columnNameListWithOrder = columnNameListWithOrder;
            this._columnNameList = columnNameList;
            this._whereCondition = whereCondition;
            this._createIndexOptions = createIndexOptions;
            this._fileGroupId = fileGroupId;
        }
        
        public AstCreateIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClustered>())
                {
                    this._clustered = ((AstClustered)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this._columnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhereCondition>())
                {
                    this._whereCondition = ((AstWhereCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateIndexOptions>())
                {
                    this._createIndexOptions = ((AstCreateIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstClustered Clustered
        {
            get
            {
                return this._clustered;
            }
        }
        
        public virtual AstIndexId IndexId
        {
            get
            {
                return this._indexId;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstColumnNameListWithOrder ColumnNameListWithOrder
        {
            get
            {
                return this._columnNameListWithOrder;
            }
        }
        
        public virtual AstColumnNameList ColumnNameList
        {
            get
            {
                return this._columnNameList;
            }
        }
        
        public virtual AstWhereCondition WhereCondition
        {
            get
            {
                return this._whereCondition;
            }
        }
        
        public virtual AstCreateIndexOptions CreateIndexOptions
        {
            get
            {
                return this._createIndexOptions;
            }
        }
        
        public virtual AstFileGroupId FileGroupId
        {
            get
            {
                return this._fileGroupId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateIndex(this);
        }
        
        /// <summary>
        /// create_index : 
        ///    CREATE UNIQUE? clustered? INDEX index_id ON full_table_ref ( column_name_list_with_order ) INCLUDE ( column_name_list ) where_condition? create_index_options()? ON file_group_id SEMI? 
        /// </summary>
        public static AstCreateIndex CreateIndex(AstClustered? clustered, AstIndexId indexId, AstFullTableRef fullTableRef, AstColumnNameListWithOrder columnNameListWithOrder, AstColumnNameList columnNameList, AstWhereCondition? whereCondition, AstCreateIndexOptions? createIndexOptions, AstFileGroupId fileGroupId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(clustered);
            list.Add(indexId);
            list.Add(fullTableRef);
            list.Add(columnNameListWithOrder);
            list.Add(columnNameList);
            list.Add(whereCondition);
            list.Add(createIndexOptions);
            list.Add(fileGroupId);
            return new AstCreateIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_index
    /// 	 : ALTER  INDEX  index_name  ON  full_table_ref  index_status
    /// </summary>
    public partial class AstAlterIndex : AstDdlClause
    {
        
        private AstIndexName _indexName;
        
        private AstFullTableRef _fullTableRef;
        
        private AstIndexStatus _indexStatus;
        
        public AstAlterIndex(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexName>())
                {
                    this._indexName = ((AstIndexName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexStatus>())
                {
                    this._indexStatus = ((AstIndexStatus)(enumerator.Current));
                }
            }
        }
        
        public AstAlterIndex(Position p, AstIndexName indexName, AstFullTableRef fullTableRef, AstIndexStatus indexStatus) : 
                base(p)
        {
            this._indexName = indexName;
            this._fullTableRef = fullTableRef;
            this._indexStatus = indexStatus;
        }
        
        public AstAlterIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexName>())
                {
                    this._indexName = ((AstIndexName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexStatus>())
                {
                    this._indexStatus = ((AstIndexStatus)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexName IndexName
        {
            get
            {
                return this._indexName;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstIndexStatus IndexStatus
        {
            get
            {
                return this._indexStatus;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterIndex(this);
        }
        
        /// <summary>
        /// alter_index : 
        ///    ALTER INDEX index_name ON full_table_ref index_status 
        /// </summary>
        public static AstAlterIndex AlterIndex(AstIndexName indexName, AstFullTableRef fullTableRef, AstIndexStatus indexStatus)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(indexName);
            list.Add(fullTableRef);
            list.Add(indexStatus);
            return new AstAlterIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// reorganize_partition
    /// 	 : REORGANIZE  (PARTITION  EQUAL  decimal)?  reorganize_options?
    /// </summary>
    public partial class AstReorganizePartition : AstRule
    {
        
        private AstDecimal _decimal;
        
        private AstReorganizeOptions _reorganizeOptions;
        
        public AstReorganizePartition(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstReorganizeOptions>())
                {
                    this._reorganizeOptions = ((AstReorganizeOptions)(enumerator.Current));
                }
            }
        }
        
        public AstReorganizePartition(Position p, AstDecimal @decimal, AstReorganizeOptions reorganizeOptions) : 
                base(p)
        {
            this._decimal = @decimal;
            this._reorganizeOptions = reorganizeOptions;
        }
        
        public AstReorganizePartition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstReorganizeOptions>())
                {
                    this._reorganizeOptions = ((AstReorganizeOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstReorganizeOptions ReorganizeOptions
        {
            get
            {
                return this._reorganizeOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReorganizePartition(this);
        }
        
        /// <summary>
        /// reorganize_partition : 
        ///    REORGANIZE PARTITION EQUAL decimal reorganize_options? 
        /// </summary>
        public static AstReorganizePartition ReorganizePartition(AstDecimal @decimal, AstReorganizeOptions? reorganizeOptions)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(@decimal);
            list.Add(reorganizeOptions);
            return new AstReorganizePartition(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_columnstore_index
    /// 	 : CREATE  CLUSTERED  COLUMNSTORE  INDEX  id_  ON  full_table_ref  create_columnstore_index_options?  (ON  table_id)?  SEMI?
    /// </summary>
    public partial class AstCreateColumnstoreIndex : AstDdlClause
    {
        
        private AstId _id;
        
        private AstFullTableRef _fullTableRef;
        
        private AstCreateColumnstoreIndexOptions _createColumnstoreIndexOptions;
        
        private AstTableId _tableId;
        
        public AstCreateColumnstoreIndex(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions>())
                {
                    this._createColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateColumnstoreIndex(Position p, AstId id, AstFullTableRef fullTableRef, AstCreateColumnstoreIndexOptions createColumnstoreIndexOptions, AstTableId tableId) : 
                base(p)
        {
            this._id = id;
            this._fullTableRef = fullTableRef;
            this._createColumnstoreIndexOptions = createColumnstoreIndexOptions;
            this._tableId = tableId;
        }
        
        public AstCreateColumnstoreIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions>())
                {
                    this._createColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstCreateColumnstoreIndexOptions CreateColumnstoreIndexOptions
        {
            get
            {
                return this._createColumnstoreIndexOptions;
            }
        }
        
        public virtual AstTableId TableId
        {
            get
            {
                return this._tableId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnstoreIndex(this);
        }
        
        /// <summary>
        /// create_columnstore_index : 
        ///    CREATE CLUSTERED COLUMNSTORE INDEX id_ ON full_table_ref create_columnstore_index_options? ON table_id SEMI? 
        /// </summary>
        public static AstCreateColumnstoreIndex CreateColumnstoreIndex(AstId id, AstFullTableRef fullTableRef, AstCreateColumnstoreIndexOptions? createColumnstoreIndexOptions, AstTableId tableId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(id);
            list.Add(fullTableRef);
            list.Add(createColumnstoreIndexOptions);
            list.Add(tableId);
            return new AstCreateColumnstoreIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_nonclustered_columnstore_index
    /// 	 : CREATE  NONCLUSTERED?  COLUMNSTORE  INDEX  id_  ON  full_table_ref  LR_BRACKET  column_name_list_with_order  RR_BRACKET  where_condition?  create_columnstore_index_options?  (ON  group_id)?  SEMI?
    /// </summary>
    public partial class AstCreateNonclusteredColumnstoreIndex : AstDdlClause
    {
        
        private AstId _id;
        
        private AstFullTableRef _fullTableRef;
        
        private AstColumnNameListWithOrder _columnNameListWithOrder;
        
        private AstWhereCondition _whereCondition;
        
        private AstCreateColumnstoreIndexOptions _createColumnstoreIndexOptions;
        
        private AstGroupId _groupId;
        
        public AstCreateNonclusteredColumnstoreIndex(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this._columnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhereCondition>())
                {
                    this._whereCondition = ((AstWhereCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions>())
                {
                    this._createColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateNonclusteredColumnstoreIndex(Position p, AstId id, AstFullTableRef fullTableRef, AstColumnNameListWithOrder columnNameListWithOrder, AstWhereCondition whereCondition, AstCreateColumnstoreIndexOptions createColumnstoreIndexOptions, AstGroupId groupId) : 
                base(p)
        {
            this._id = id;
            this._fullTableRef = fullTableRef;
            this._columnNameListWithOrder = columnNameListWithOrder;
            this._whereCondition = whereCondition;
            this._createColumnstoreIndexOptions = createColumnstoreIndexOptions;
            this._groupId = groupId;
        }
        
        public AstCreateNonclusteredColumnstoreIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this._columnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhereCondition>())
                {
                    this._whereCondition = ((AstWhereCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions>())
                {
                    this._createColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstColumnNameListWithOrder ColumnNameListWithOrder
        {
            get
            {
                return this._columnNameListWithOrder;
            }
        }
        
        public virtual AstWhereCondition WhereCondition
        {
            get
            {
                return this._whereCondition;
            }
        }
        
        public virtual AstCreateColumnstoreIndexOptions CreateColumnstoreIndexOptions
        {
            get
            {
                return this._createColumnstoreIndexOptions;
            }
        }
        
        public virtual AstGroupId GroupId
        {
            get
            {
                return this._groupId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateNonclusteredColumnstoreIndex(this);
        }
        
        /// <summary>
        /// create_nonclustered_columnstore_index : 
        ///    CREATE NONCLUSTERED? COLUMNSTORE INDEX id_ ON full_table_ref ( column_name_list_with_order ) where_condition? create_columnstore_index_options? ON group_id SEMI? 
        /// </summary>
        public static AstCreateNonclusteredColumnstoreIndex CreateNonclusteredColumnstoreIndex(AstId id, AstFullTableRef fullTableRef, AstColumnNameListWithOrder columnNameListWithOrder, AstWhereCondition? whereCondition, AstCreateColumnstoreIndexOptions? createColumnstoreIndexOptions, AstGroupId groupId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(id);
            list.Add(fullTableRef);
            list.Add(columnNameListWithOrder);
            list.Add(whereCondition);
            list.Add(createColumnstoreIndexOptions);
            list.Add(groupId);
            return new AstCreateNonclusteredColumnstoreIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_xml_index
    /// 	 : CREATE  PRIMARY?  XML  INDEX  index_id  ON  full_table_ref  LR_BRACKET  column_id  RR_BRACKET  using_xml_index?  xml_index_options?  SEMI?
    /// </summary>
    public partial class AstCreateXmlIndex : AstDdlClause
    {
        
        private AstIndexId _indexId;
        
        private AstFullTableRef _fullTableRef;
        
        private AstColumnId _columnId;
        
        private AstUsingXmlIndex _usingXmlIndex;
        
        private AstXmlIndexOptions _xmlIndexOptions;
        
        public AstCreateXmlIndex(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUsingXmlIndex>())
                {
                    this._usingXmlIndex = ((AstUsingXmlIndex)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstXmlIndexOptions>())
                {
                    this._xmlIndexOptions = ((AstXmlIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateXmlIndex(Position p, AstIndexId indexId, AstFullTableRef fullTableRef, AstColumnId columnId, AstUsingXmlIndex usingXmlIndex, AstXmlIndexOptions xmlIndexOptions) : 
                base(p)
        {
            this._indexId = indexId;
            this._fullTableRef = fullTableRef;
            this._columnId = columnId;
            this._usingXmlIndex = usingXmlIndex;
            this._xmlIndexOptions = xmlIndexOptions;
        }
        
        public AstCreateXmlIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUsingXmlIndex>())
                {
                    this._usingXmlIndex = ((AstUsingXmlIndex)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstXmlIndexOptions>())
                {
                    this._xmlIndexOptions = ((AstXmlIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexId IndexId
        {
            get
            {
                return this._indexId;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstColumnId ColumnId
        {
            get
            {
                return this._columnId;
            }
        }
        
        public virtual AstUsingXmlIndex UsingXmlIndex
        {
            get
            {
                return this._usingXmlIndex;
            }
        }
        
        public virtual AstXmlIndexOptions XmlIndexOptions
        {
            get
            {
                return this._xmlIndexOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateXmlIndex(this);
        }
        
        /// <summary>
        /// create_xml_index : 
        ///    CREATE PRIMARY? XML INDEX index_id ON full_table_ref ( column_id ) using_xml_index? xml_index_options? SEMI? 
        /// </summary>
        public static AstCreateXmlIndex CreateXmlIndex(AstIndexId indexId, AstFullTableRef fullTableRef, AstColumnId columnId, AstUsingXmlIndex? usingXmlIndex, AstXmlIndexOptions? xmlIndexOptions)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(indexId);
            list.Add(fullTableRef);
            list.Add(columnId);
            list.Add(usingXmlIndex);
            list.Add(xmlIndexOptions);
            return new AstCreateXmlIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// using_xml_index
    /// 	 : USING  XML  INDEX  index_id  index_using_xml_mode?
    /// </summary>
    public partial class AstUsingXmlIndex : AstRule
    {
        
        private AstIndexId _indexId;
        
        private AstIndexUsingXmlMode _indexUsingXmlMode;
        
        public AstUsingXmlIndex(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexUsingXmlMode>())
                {
                    this._indexUsingXmlMode = ((AstIndexUsingXmlMode)(enumerator.Current));
                }
            }
        }
        
        public AstUsingXmlIndex(Position p, AstIndexId indexId, AstIndexUsingXmlMode indexUsingXmlMode) : 
                base(p)
        {
            this._indexId = indexId;
            this._indexUsingXmlMode = indexUsingXmlMode;
        }
        
        public AstUsingXmlIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexUsingXmlMode>())
                {
                    this._indexUsingXmlMode = ((AstIndexUsingXmlMode)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexId IndexId
        {
            get
            {
                return this._indexId;
            }
        }
        
        public virtual AstIndexUsingXmlMode IndexUsingXmlMode
        {
            get
            {
                return this._indexUsingXmlMode;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUsingXmlIndex(this);
        }
        
        /// <summary>
        /// using_xml_index : 
        ///    USING XML INDEX index_id index_using_xml_mode? 
        /// </summary>
        public static AstUsingXmlIndex UsingXmlIndex(AstIndexId indexId, AstIndexUsingXmlMode? indexUsingXmlMode)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(indexId);
            list.Add(indexUsingXmlMode);
            return new AstUsingXmlIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_or_alter_procedure
    /// 	 : ((CREATE  (OR  alter_replace)?) | ALTER)  proc_keyword  procName = schema_func_proc_ref  (SEMI  decimal)?  (LR_BRACKET?  procedure_params  RR_BRACKET?)?  procedure_options?  (FOR  REPLICATION)?  AS  (as_external_name | sql_clause)
    /// </summary>
    public partial class AstCreateOrAlterProcedure : AstBatchLevelStatement
    {
        
        private AstAlterReplace _alterReplace;
        
        private AstProcKeyword _procKeyword;
        
        private AstSchemaFuncProcRef _schemaFuncProcRef;
        
        private AstDecimal _decimal;
        
        private AstProcedureParams _procedureParams;
        
        private AstProcedureOptions _procedureOptions;
        
        private AstAsExternalName _asExternalName;
        
        private AstSqlClause _sqlClause;
        
        public AstCreateOrAlterProcedure(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterReplace>())
                {
                    this._alterReplace = ((AstAlterReplace)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstProcKeyword>())
                {
                    this._procKeyword = ((AstProcKeyword)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaFuncProcRef>())
                {
                    this._schemaFuncProcRef = ((AstSchemaFuncProcRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstProcedureParams>())
                {
                    this._procedureParams = ((AstProcedureParams)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstProcedureOptions>())
                {
                    this._procedureOptions = ((AstProcedureOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsExternalName>())
                {
                    this._asExternalName = ((AstAsExternalName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClause>())
                {
                    this._sqlClause = ((AstSqlClause)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterProcedure(Position p, AstAlterReplace alterReplace, AstProcKeyword procKeyword, AstSchemaFuncProcRef schemaFuncProcRef, AstDecimal @decimal, AstProcedureParams procedureParams, AstProcedureOptions procedureOptions, AstAsExternalName asExternalName, AstSqlClause sqlClause) : 
                base(p)
        {
            this._alterReplace = alterReplace;
            this._procKeyword = procKeyword;
            this._schemaFuncProcRef = schemaFuncProcRef;
            this._decimal = @decimal;
            this._procedureParams = procedureParams;
            this._procedureOptions = procedureOptions;
            this._asExternalName = asExternalName;
            this._sqlClause = sqlClause;
        }
        
        public AstCreateOrAlterProcedure(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterReplace>())
                {
                    this._alterReplace = ((AstAlterReplace)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstProcKeyword>())
                {
                    this._procKeyword = ((AstProcKeyword)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaFuncProcRef>())
                {
                    this._schemaFuncProcRef = ((AstSchemaFuncProcRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstProcedureParams>())
                {
                    this._procedureParams = ((AstProcedureParams)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstProcedureOptions>())
                {
                    this._procedureOptions = ((AstProcedureOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsExternalName>())
                {
                    this._asExternalName = ((AstAsExternalName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClause>())
                {
                    this._sqlClause = ((AstSqlClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterReplace AlterReplace
        {
            get
            {
                return this._alterReplace;
            }
        }
        
        public virtual AstProcKeyword ProcKeyword
        {
            get
            {
                return this._procKeyword;
            }
        }
        
        public virtual AstSchemaFuncProcRef SchemaFuncProcRef
        {
            get
            {
                return this._schemaFuncProcRef;
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstProcedureParams ProcedureParams
        {
            get
            {
                return this._procedureParams;
            }
        }
        
        public virtual AstProcedureOptions ProcedureOptions
        {
            get
            {
                return this._procedureOptions;
            }
        }
        
        public virtual AstAsExternalName AsExternalName
        {
            get
            {
                return this._asExternalName;
            }
        }
        
        public virtual AstSqlClause SqlClause
        {
            get
            {
                return this._sqlClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterProcedure(this);
        }
        
        /// <summary>
        /// create_or_alter_procedure : 
        ///    CREATE OR alter_replace proc_keyword procName=schema_func_proc_ref ; decimal LR_BRACKET? procedure_params RR_BRACKET? procedure_options? FOR REPLICATION AS as_external_name 
        /// </summary>
        public static AstCreateOrAlterProcedure CreateOrAlterProcedure(AstAlterReplace alterReplace, AstProcKeyword procKeyword, AstSchemaFuncProcRef procName, AstDecimal @decimal, AstProcedureParams procedureParams, AstProcedureOptions? procedureOptions, AstAsExternalName asExternalName)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(alterReplace);
            list.Add(procKeyword);
            list.Add(procName);
            list.Add(@decimal);
            list.Add(procedureParams);
            list.Add(procedureOptions);
            list.Add(asExternalName);
            return new AstCreateOrAlterProcedure(Position.Default, list);
        }
        
        /// <summary>
        /// create_or_alter_procedure : 
        ///    ALTER proc_keyword procName=schema_func_proc_ref ; decimal LR_BRACKET? procedure_params RR_BRACKET? procedure_options? FOR REPLICATION AS as_external_name 
        /// </summary>
        public static AstCreateOrAlterProcedure CreateOrAlterProcedure(AstProcKeyword procKeyword, AstSchemaFuncProcRef procName, AstDecimal @decimal, AstProcedureParams procedureParams, AstProcedureOptions? procedureOptions, AstAsExternalName asExternalName)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(procKeyword);
            list.Add(procName);
            list.Add(@decimal);
            list.Add(procedureParams);
            list.Add(procedureOptions);
            list.Add(asExternalName);
            return new AstCreateOrAlterProcedure(Position.Default, list);
        }
        
        /// <summary>
        /// create_or_alter_procedure : 
        ///    CREATE OR alter_replace proc_keyword procName=schema_func_proc_ref ; decimal LR_BRACKET? procedure_params RR_BRACKET? procedure_options? FOR REPLICATION AS sql_clause 
        /// </summary>
        public static AstCreateOrAlterProcedure CreateOrAlterProcedure(AstAlterReplace alterReplace, AstProcKeyword procKeyword, AstSchemaFuncProcRef procName, AstDecimal @decimal, AstProcedureParams procedureParams, AstProcedureOptions? procedureOptions, AstSqlClause sqlClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(alterReplace);
            list.Add(procKeyword);
            list.Add(procName);
            list.Add(@decimal);
            list.Add(procedureParams);
            list.Add(procedureOptions);
            list.Add(sqlClause);
            return new AstCreateOrAlterProcedure(Position.Default, list);
        }
        
        /// <summary>
        /// create_or_alter_procedure : 
        ///    ALTER proc_keyword procName=schema_func_proc_ref ; decimal LR_BRACKET? procedure_params RR_BRACKET? procedure_options? FOR REPLICATION AS sql_clause 
        /// </summary>
        public static AstCreateOrAlterProcedure CreateOrAlterProcedure(AstProcKeyword procKeyword, AstSchemaFuncProcRef procName, AstDecimal @decimal, AstProcedureParams procedureParams, AstProcedureOptions? procedureOptions, AstSqlClause sqlClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(procKeyword);
            list.Add(procName);
            list.Add(@decimal);
            list.Add(procedureParams);
            list.Add(procedureOptions);
            list.Add(sqlClause);
            return new AstCreateOrAlterProcedure(Position.Default, list);
        }
    }
    
    /// <summary>
    /// as_external_name
    /// 	 : EXTERNAL  NAME  assembly_id  DOT  class_id  DOT  method_id
    /// </summary>
    public partial class AstAsExternalName : AstRule
    {
        
        private AstAssemblyId _assemblyId;
        
        private AstClassId _classId;
        
        private AstMethodId _methodId;
        
        public AstAsExternalName(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClassId>())
                {
                    this._classId = ((AstClassId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMethodId>())
                {
                    this._methodId = ((AstMethodId)(enumerator.Current));
                }
            }
        }
        
        public AstAsExternalName(Position p, AstAssemblyId assemblyId, AstClassId classId, AstMethodId methodId) : 
                base(p)
        {
            this._assemblyId = assemblyId;
            this._classId = classId;
            this._methodId = methodId;
        }
        
        public AstAsExternalName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClassId>())
                {
                    this._classId = ((AstClassId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMethodId>())
                {
                    this._methodId = ((AstMethodId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblyId AssemblyId
        {
            get
            {
                return this._assemblyId;
            }
        }
        
        public virtual AstClassId ClassId
        {
            get
            {
                return this._classId;
            }
        }
        
        public virtual AstMethodId MethodId
        {
            get
            {
                return this._methodId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsExternalName(this);
        }
        
        /// <summary>
        /// as_external_name : 
        ///    EXTERNAL NAME assembly_id . class_id . method_id 
        /// </summary>
        public static AstAsExternalName AsExternalName(AstAssemblyId assemblyId, AstClassId classId, AstMethodId methodId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(assemblyId);
            list.Add(classId);
            list.Add(methodId);
            return new AstAsExternalName(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_or_alter_dml_trigger
    /// 	 : ((CREATE  (OR  ALTER)?) | ALTER)  TRIGGER  schema_trigger_ref  ON  full_table_ref  dml_trigger_options?  for_after_instead  dml_trigger_operations  (WITH  APPEND)?  (NOT  FOR  REPLICATION)?  AS  sql_clauses
    /// </summary>
    public partial class AstCreateOrAlterDmlTrigger : AstCreateOrAlterTrigger
    {
        
        private AstSchemaTriggerRef _schemaTriggerRef;
        
        private AstFullTableRef _fullTableRef;
        
        private AstDmlTriggerOptions _dmlTriggerOptions;
        
        private AstForAfterInstead _forAfterInstead;
        
        private AstDmlTriggerOperations _dmlTriggerOperations;
        
        private AstSqlClauses _sqlClauses;
        
        public AstCreateOrAlterDmlTrigger(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaTriggerRef>())
                {
                    this._schemaTriggerRef = ((AstSchemaTriggerRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions>())
                {
                    this._dmlTriggerOptions = ((AstDmlTriggerOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForAfterInstead>())
                {
                    this._forAfterInstead = ((AstForAfterInstead)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this._dmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterDmlTrigger(Position p, AstSchemaTriggerRef schemaTriggerRef, AstFullTableRef fullTableRef, AstDmlTriggerOptions dmlTriggerOptions, AstForAfterInstead forAfterInstead, AstDmlTriggerOperations dmlTriggerOperations, AstSqlClauses sqlClauses) : 
                base(p)
        {
            this._schemaTriggerRef = schemaTriggerRef;
            this._fullTableRef = fullTableRef;
            this._dmlTriggerOptions = dmlTriggerOptions;
            this._forAfterInstead = forAfterInstead;
            this._dmlTriggerOperations = dmlTriggerOperations;
            this._sqlClauses = sqlClauses;
        }
        
        public AstCreateOrAlterDmlTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaTriggerRef>())
                {
                    this._schemaTriggerRef = ((AstSchemaTriggerRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions>())
                {
                    this._dmlTriggerOptions = ((AstDmlTriggerOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForAfterInstead>())
                {
                    this._forAfterInstead = ((AstForAfterInstead)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this._dmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaTriggerRef SchemaTriggerRef
        {
            get
            {
                return this._schemaTriggerRef;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstDmlTriggerOptions DmlTriggerOptions
        {
            get
            {
                return this._dmlTriggerOptions;
            }
        }
        
        public virtual AstForAfterInstead ForAfterInstead
        {
            get
            {
                return this._forAfterInstead;
            }
        }
        
        public virtual AstDmlTriggerOperations DmlTriggerOperations
        {
            get
            {
                return this._dmlTriggerOperations;
            }
        }
        
        public virtual AstSqlClauses SqlClauses
        {
            get
            {
                return this._sqlClauses;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterDmlTrigger(this);
        }
        
        /// <summary>
        /// create_or_alter_dml_trigger : 
        ///    CREATE OR ALTER TRIGGER schema_trigger_ref ON full_table_ref dml_trigger_options? for_after_instead dml_trigger_operations WITH APPEND NOT FOR REPLICATION AS sql_clauses 
        /// </summary>
        public static AstCreateOrAlterDmlTrigger CreateOrAlterDmlTrigger(AstSchemaTriggerRef schemaTriggerRef, AstFullTableRef fullTableRef, AstDmlTriggerOptions? dmlTriggerOptions, AstForAfterInstead forAfterInstead, AstDmlTriggerOperations dmlTriggerOperations, AstSqlClauses sqlClauses)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(schemaTriggerRef);
            list.Add(fullTableRef);
            list.Add(dmlTriggerOptions);
            list.Add(forAfterInstead);
            list.Add(dmlTriggerOperations);
            list.Add(sqlClauses);
            return new AstCreateOrAlterDmlTrigger(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_or_alter_ddl_trigger
    /// 	 : ((CREATE  (OR  ALTER)?) | ALTER)  TRIGGER  schema_trigger_ref  ON  all_server_database  dml_trigger_options?  for_after  dml_trigger_operations  AS  sql_clauses
    /// </summary>
    public partial class AstCreateOrAlterDdlTrigger : AstCreateOrAlterTrigger
    {
        
        private AstSchemaTriggerRef _schemaTriggerRef;
        
        private AstAllServerDatabase _allServerDatabase;
        
        private AstDmlTriggerOptions _dmlTriggerOptions;
        
        private AstForAfter _forAfter;
        
        private AstDmlTriggerOperations _dmlTriggerOperations;
        
        private AstSqlClauses _sqlClauses;
        
        public AstCreateOrAlterDdlTrigger(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaTriggerRef>())
                {
                    this._schemaTriggerRef = ((AstSchemaTriggerRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAllServerDatabase>())
                {
                    this._allServerDatabase = ((AstAllServerDatabase)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions>())
                {
                    this._dmlTriggerOptions = ((AstDmlTriggerOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForAfter>())
                {
                    this._forAfter = ((AstForAfter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this._dmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterDdlTrigger(Position p, AstSchemaTriggerRef schemaTriggerRef, AstAllServerDatabase allServerDatabase, AstDmlTriggerOptions dmlTriggerOptions, AstForAfter forAfter, AstDmlTriggerOperations dmlTriggerOperations, AstSqlClauses sqlClauses) : 
                base(p)
        {
            this._schemaTriggerRef = schemaTriggerRef;
            this._allServerDatabase = allServerDatabase;
            this._dmlTriggerOptions = dmlTriggerOptions;
            this._forAfter = forAfter;
            this._dmlTriggerOperations = dmlTriggerOperations;
            this._sqlClauses = sqlClauses;
        }
        
        public AstCreateOrAlterDdlTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaTriggerRef>())
                {
                    this._schemaTriggerRef = ((AstSchemaTriggerRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAllServerDatabase>())
                {
                    this._allServerDatabase = ((AstAllServerDatabase)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions>())
                {
                    this._dmlTriggerOptions = ((AstDmlTriggerOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForAfter>())
                {
                    this._forAfter = ((AstForAfter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this._dmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaTriggerRef SchemaTriggerRef
        {
            get
            {
                return this._schemaTriggerRef;
            }
        }
        
        public virtual AstAllServerDatabase AllServerDatabase
        {
            get
            {
                return this._allServerDatabase;
            }
        }
        
        public virtual AstDmlTriggerOptions DmlTriggerOptions
        {
            get
            {
                return this._dmlTriggerOptions;
            }
        }
        
        public virtual AstForAfter ForAfter
        {
            get
            {
                return this._forAfter;
            }
        }
        
        public virtual AstDmlTriggerOperations DmlTriggerOperations
        {
            get
            {
                return this._dmlTriggerOperations;
            }
        }
        
        public virtual AstSqlClauses SqlClauses
        {
            get
            {
                return this._sqlClauses;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterDdlTrigger(this);
        }
        
        /// <summary>
        /// create_or_alter_ddl_trigger : 
        ///    CREATE OR ALTER TRIGGER schema_trigger_ref ON all_server_database dml_trigger_options? for_after dml_trigger_operations AS sql_clauses 
        /// </summary>
        public static AstCreateOrAlterDdlTrigger CreateOrAlterDdlTrigger(AstSchemaTriggerRef schemaTriggerRef, AstAllServerDatabase allServerDatabase, AstDmlTriggerOptions? dmlTriggerOptions, AstForAfter forAfter, AstDmlTriggerOperations dmlTriggerOperations, AstSqlClauses sqlClauses)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(schemaTriggerRef);
            list.Add(allServerDatabase);
            list.Add(dmlTriggerOptions);
            list.Add(forAfter);
            list.Add(dmlTriggerOperations);
            list.Add(sqlClauses);
            return new AstCreateOrAlterDdlTrigger(Position.Default, list);
        }
    }
    
    /// <summary>
    /// func_body_returns_select
    /// 	 : RETURNS  TABLE  function_options?  AS?  (as_external_name | RETURN  (LR_BRACKET  select_statement_standalone  RR_BRACKET | select_statement_standalone))
    /// </summary>
    public partial class AstFuncBodyReturnsSelect : AstRule
    {
        
        private AstFunctionOptions _functionOptions;
        
        private AstAsExternalName _asExternalName;
        
        private AstSelectStatementStandalone _selectStatementStandalone;
        
        public AstFuncBodyReturnsSelect(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsExternalName>())
                {
                    this._asExternalName = ((AstAsExternalName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public AstFuncBodyReturnsSelect(Position p, AstFunctionOptions functionOptions, AstAsExternalName asExternalName, AstSelectStatementStandalone selectStatementStandalone) : 
                base(p)
        {
            this._functionOptions = functionOptions;
            this._asExternalName = asExternalName;
            this._selectStatementStandalone = selectStatementStandalone;
        }
        
        public AstFuncBodyReturnsSelect(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsExternalName>())
                {
                    this._asExternalName = ((AstAsExternalName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFunctionOptions FunctionOptions
        {
            get
            {
                return this._functionOptions;
            }
        }
        
        public virtual AstAsExternalName AsExternalName
        {
            get
            {
                return this._asExternalName;
            }
        }
        
        public virtual AstSelectStatementStandalone SelectStatementStandalone
        {
            get
            {
                return this._selectStatementStandalone;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncBodyReturnsSelect(this);
        }
        
        /// <summary>
        /// func_body_returns_select : 
        ///    RETURNS TABLE function_options? AS? as_external_name 
        /// </summary>
        public static AstFuncBodyReturnsSelect FuncBodyReturnsSelect(AstFunctionOptions? functionOptions, AstAsExternalName asExternalName)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(functionOptions);
            list.Add(asExternalName);
            return new AstFuncBodyReturnsSelect(Position.Default, list);
        }
        
        /// <summary>
        /// func_body_returns_select : 
        ///    RETURNS TABLE function_options? AS? RETURN ( select_statement_standalone ) 
        /// </summary>
        public static AstFuncBodyReturnsSelect FuncBodyReturnsSelect(AstFunctionOptions? functionOptions, AstSelectStatementStandalone selectStatementStandalone)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(functionOptions);
            list.Add(selectStatementStandalone);
            return new AstFuncBodyReturnsSelect(Position.Default, list);
        }
    }
    
    /// <summary>
    /// func_body_returns_table
    /// 	 : RETURNS  local_id  table_type_definition  function_options?  AS?  (as_external_name | BEGIN  sql_clauses?  RETURN  SEMI?  END  SEMI?)
    /// </summary>
    public partial class AstFuncBodyReturnsTable : AstRule
    {
        
        private AstLocalId _localId;
        
        private AstTableTypeDefinition _tableTypeDefinition;
        
        private AstFunctionOptions _functionOptions;
        
        private AstAsExternalName _asExternalName;
        
        private AstSqlClauses _sqlClauses;
        
        public AstFuncBodyReturnsTable(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableTypeDefinition>())
                {
                    this._tableTypeDefinition = ((AstTableTypeDefinition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsExternalName>())
                {
                    this._asExternalName = ((AstAsExternalName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public AstFuncBodyReturnsTable(Position p, AstLocalId localId, AstTableTypeDefinition tableTypeDefinition, AstFunctionOptions functionOptions, AstAsExternalName asExternalName, AstSqlClauses sqlClauses) : 
                base(p)
        {
            this._localId = localId;
            this._tableTypeDefinition = tableTypeDefinition;
            this._functionOptions = functionOptions;
            this._asExternalName = asExternalName;
            this._sqlClauses = sqlClauses;
        }
        
        public AstFuncBodyReturnsTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableTypeDefinition>())
                {
                    this._tableTypeDefinition = ((AstTableTypeDefinition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsExternalName>())
                {
                    this._asExternalName = ((AstAsExternalName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalId LocalId
        {
            get
            {
                return this._localId;
            }
        }
        
        public virtual AstTableTypeDefinition TableTypeDefinition
        {
            get
            {
                return this._tableTypeDefinition;
            }
        }
        
        public virtual AstFunctionOptions FunctionOptions
        {
            get
            {
                return this._functionOptions;
            }
        }
        
        public virtual AstAsExternalName AsExternalName
        {
            get
            {
                return this._asExternalName;
            }
        }
        
        public virtual AstSqlClauses SqlClauses
        {
            get
            {
                return this._sqlClauses;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncBodyReturnsTable(this);
        }
        
        /// <summary>
        /// func_body_returns_table : 
        ///    RETURNS local_id table_type_definition function_options? AS? as_external_name 
        /// </summary>
        public static AstFuncBodyReturnsTable FuncBodyReturnsTable(AstLocalId localId, AstTableTypeDefinition tableTypeDefinition, AstFunctionOptions? functionOptions, AstAsExternalName asExternalName)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(localId);
            list.Add(tableTypeDefinition);
            list.Add(functionOptions);
            list.Add(asExternalName);
            return new AstFuncBodyReturnsTable(Position.Default, list);
        }
        
        /// <summary>
        /// func_body_returns_table : 
        ///    RETURNS local_id table_type_definition function_options? AS? BEGIN sql_clauses? RETURN SEMI? END SEMI? 
        /// </summary>
        public static AstFuncBodyReturnsTable FuncBodyReturnsTable(AstLocalId localId, AstTableTypeDefinition tableTypeDefinition, AstFunctionOptions? functionOptions, AstSqlClauses? sqlClauses)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(localId);
            list.Add(tableTypeDefinition);
            list.Add(functionOptions);
            list.Add(sqlClauses);
            return new AstFuncBodyReturnsTable(Position.Default, list);
        }
    }
    
    /// <summary>
    /// func_body_returns_scalar
    /// 	 : RETURNS  data_type  function_options?  AS?  (as_external_name | BEGIN  sql_clause?  RETURN  ret = expression  SEMI?  END)
    /// </summary>
    public partial class AstFuncBodyReturnsScalar : AstRule
    {
        
        private AstDataType _dataType;
        
        private AstFunctionOptions _functionOptions;
        
        private AstAsExternalName _asExternalName;
        
        private AstSqlClause _sqlClause;
        
        private AstExpression _expression;
        
        public AstFuncBodyReturnsScalar(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsExternalName>())
                {
                    this._asExternalName = ((AstAsExternalName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClause>())
                {
                    this._sqlClause = ((AstSqlClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstFuncBodyReturnsScalar(Position p, AstDataType dataType, AstFunctionOptions functionOptions, AstAsExternalName asExternalName, AstSqlClause sqlClause, AstExpression expression) : 
                base(p)
        {
            this._dataType = dataType;
            this._functionOptions = functionOptions;
            this._asExternalName = asExternalName;
            this._sqlClause = sqlClause;
            this._expression = expression;
        }
        
        public AstFuncBodyReturnsScalar(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions>())
                {
                    this._functionOptions = ((AstFunctionOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsExternalName>())
                {
                    this._asExternalName = ((AstAsExternalName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClause>())
                {
                    this._sqlClause = ((AstSqlClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public virtual AstFunctionOptions FunctionOptions
        {
            get
            {
                return this._functionOptions;
            }
        }
        
        public virtual AstAsExternalName AsExternalName
        {
            get
            {
                return this._asExternalName;
            }
        }
        
        public virtual AstSqlClause SqlClause
        {
            get
            {
                return this._sqlClause;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncBodyReturnsScalar(this);
        }
        
        /// <summary>
        /// func_body_returns_scalar : 
        ///    RETURNS data_type function_options? AS? as_external_name 
        /// </summary>
        public static AstFuncBodyReturnsScalar FuncBodyReturnsScalar(AstDataType dataType, AstFunctionOptions? functionOptions, AstAsExternalName asExternalName)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(dataType);
            list.Add(functionOptions);
            list.Add(asExternalName);
            return new AstFuncBodyReturnsScalar(Position.Default, list);
        }
        
        /// <summary>
        /// func_body_returns_scalar : 
        ///    RETURNS data_type function_options? AS? BEGIN sql_clause? RETURN ret=expression SEMI? END 
        /// </summary>
        public static AstFuncBodyReturnsScalar FuncBodyReturnsScalar(AstDataType dataType, AstFunctionOptions? functionOptions, AstSqlClause? sqlClause, AstExpression ret)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(dataType);
            list.Add(functionOptions);
            list.Add(sqlClause);
            list.Add(ret);
            return new AstFuncBodyReturnsScalar(Position.Default, list);
        }
    }
    
    /// <summary>
    /// procedure_param
    /// 	 : arg_name = local_id  AS?  schema_type_ref  VARYING?  (EQUAL  default_val = default_value)?  param_way?
    /// </summary>
    public partial class AstProcedureParam : AstRule
    {
        
        private AstLocalId _localId;
        
        private AstSchemaTypeRef _schemaTypeRef;
        
        private AstDefaultValue _defaultValue;
        
        private AstParamWay _paramWay;
        
        public AstProcedureParam(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaTypeRef>())
                {
                    this._schemaTypeRef = ((AstSchemaTypeRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDefaultValue>())
                {
                    this._defaultValue = ((AstDefaultValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstParamWay>())
                {
                    this._paramWay = ((AstParamWay)(enumerator.Current));
                }
            }
        }
        
        public AstProcedureParam(Position p, AstLocalId localId, AstSchemaTypeRef schemaTypeRef, AstDefaultValue defaultValue, AstParamWay paramWay) : 
                base(p)
        {
            this._localId = localId;
            this._schemaTypeRef = schemaTypeRef;
            this._defaultValue = defaultValue;
            this._paramWay = paramWay;
        }
        
        public AstProcedureParam(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaTypeRef>())
                {
                    this._schemaTypeRef = ((AstSchemaTypeRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDefaultValue>())
                {
                    this._defaultValue = ((AstDefaultValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstParamWay>())
                {
                    this._paramWay = ((AstParamWay)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalId LocalId
        {
            get
            {
                return this._localId;
            }
        }
        
        public virtual AstSchemaTypeRef SchemaTypeRef
        {
            get
            {
                return this._schemaTypeRef;
            }
        }
        
        public virtual AstDefaultValue DefaultValue
        {
            get
            {
                return this._defaultValue;
            }
        }
        
        public virtual AstParamWay ParamWay
        {
            get
            {
                return this._paramWay;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcedureParam(this);
        }
        
        /// <summary>
        /// procedure_param : 
        ///    arg_name=local_id AS? schema_type_ref VARYING? EQUAL default_val=default_value param_way? 
        /// </summary>
        public static AstProcedureParam ProcedureParam(AstLocalId argName, AstSchemaTypeRef schemaTypeRef, AstDefaultValue defaultVal, AstParamWay? paramWay)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(argName);
            list.Add(schemaTypeRef);
            list.Add(defaultVal);
            list.Add(paramWay);
            return new AstProcedureParam(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_statistics
    /// 	 : CREATE  STATISTICS  id_  ON  full_table_ref  LR_BRACKET  column_name_list  RR_BRACKET  (WITH  statistics_with  (COMMA  NORECOMPUTE)?  (COMMA  INCREMENTAL  EQUAL  on_off)?)?  SEMI?
    /// </summary>
    public partial class AstCreateStatistics : AstDdlClause
    {
        
        private AstId _id;
        
        private AstFullTableRef _fullTableRef;
        
        private AstColumnNameList _columnNameList;
        
        private AstStatisticsWith _statisticsWith;
        
        private AstOnOff _onOff;
        
        public AstCreateStatistics(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStatisticsWith>())
                {
                    this._statisticsWith = ((AstStatisticsWith)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstCreateStatistics(Position p, AstId id, AstFullTableRef fullTableRef, AstColumnNameList columnNameList, AstStatisticsWith statisticsWith, AstOnOff onOff) : 
                base(p)
        {
            this._id = id;
            this._fullTableRef = fullTableRef;
            this._columnNameList = columnNameList;
            this._statisticsWith = statisticsWith;
            this._onOff = onOff;
        }
        
        public AstCreateStatistics(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStatisticsWith>())
                {
                    this._statisticsWith = ((AstStatisticsWith)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstColumnNameList ColumnNameList
        {
            get
            {
                return this._columnNameList;
            }
        }
        
        public virtual AstStatisticsWith StatisticsWith
        {
            get
            {
                return this._statisticsWith;
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateStatistics(this);
        }
        
        /// <summary>
        /// create_statistics : 
        ///    CREATE STATISTICS id_ ON full_table_ref ( column_name_list ) WITH statistics_with , NORECOMPUTE , INCREMENTAL EQUAL on_off SEMI? 
        /// </summary>
        public static AstCreateStatistics CreateStatistics(AstId id, AstFullTableRef fullTableRef, AstColumnNameList columnNameList, AstStatisticsWith statisticsWith, AstOnOff onOff)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(id);
            list.Add(fullTableRef);
            list.Add(columnNameList);
            list.Add(statisticsWith);
            list.Add(onOff);
            return new AstCreateStatistics(Position.Default, list);
        }
    }
    
    /// <summary>
    /// update_statistics
    /// 	 : UPDATE  STATISTICS  complete_table_ref  (id_ | LR_BRACKET  ids  RR_BRACKET)?  update_statistics_options?
    /// </summary>
    public partial class AstUpdateStatistics : AstDdlClause
    {
        
        private AstCompleteTableRef _completeTableRef;
        
        private AstId _id;
        
        private AstIds _ids;
        
        private AstUpdateStatisticsOptions _updateStatisticsOptions;
        
        public AstUpdateStatistics(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCompleteTableRef>())
                {
                    this._completeTableRef = ((AstCompleteTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIds>())
                {
                    this._ids = ((AstIds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateStatisticsOptions>())
                {
                    this._updateStatisticsOptions = ((AstUpdateStatisticsOptions)(enumerator.Current));
                }
            }
        }
        
        public AstUpdateStatistics(Position p, AstCompleteTableRef completeTableRef, AstId id, AstIds ids, AstUpdateStatisticsOptions updateStatisticsOptions) : 
                base(p)
        {
            this._completeTableRef = completeTableRef;
            this._id = id;
            this._ids = ids;
            this._updateStatisticsOptions = updateStatisticsOptions;
        }
        
        public AstUpdateStatistics(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCompleteTableRef>())
                {
                    this._completeTableRef = ((AstCompleteTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIds>())
                {
                    this._ids = ((AstIds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateStatisticsOptions>())
                {
                    this._updateStatisticsOptions = ((AstUpdateStatisticsOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCompleteTableRef CompleteTableRef
        {
            get
            {
                return this._completeTableRef;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstIds Ids
        {
            get
            {
                return this._ids;
            }
        }
        
        public virtual AstUpdateStatisticsOptions UpdateStatisticsOptions
        {
            get
            {
                return this._updateStatisticsOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateStatistics(this);
        }
        
        /// <summary>
        /// update_statistics : 
        ///    UPDATE STATISTICS complete_table_ref id_ update_statistics_options? 
        /// </summary>
        public static AstUpdateStatistics UpdateStatistics(AstCompleteTableRef completeTableRef, AstId id, AstUpdateStatisticsOptions? updateStatisticsOptions)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(completeTableRef);
            list.Add(id);
            list.Add(updateStatisticsOptions);
            return new AstUpdateStatistics(Position.Default, list);
        }
        
        /// <summary>
        /// update_statistics : 
        ///    UPDATE STATISTICS complete_table_ref ( ids ) update_statistics_options? 
        /// </summary>
        public static AstUpdateStatistics UpdateStatistics(AstCompleteTableRef completeTableRef, AstIds ids, AstUpdateStatisticsOptions? updateStatisticsOptions)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(completeTableRef);
            list.Add(ids);
            list.Add(updateStatisticsOptions);
            return new AstUpdateStatistics(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_table
    /// 	 : CREATE  TABLE  full_table_ref  LR_BRACKET  column_def_table_constraints  table_indices_list?  RR_BRACKET  (LOCK  simple_id)?  table_options?  (ON  on = group_id | DEFAULT)?  (TEXTIMAGE_ON  text_image = group_id | DEFAULT)?  SEMI?
    /// </summary>
    public partial class AstCreateTable : AstDdlClause
    {
        
        private AstFullTableRef _fullTableRef;
        
        private AstColumnDefTableConstraints _columnDefTableConstraints;
        
        private AstTableIndicesList _tableIndicesList;
        
        private AstSimpleId _simpleId;
        
        private AstTableOptions _tableOptions;
        
        private AstGroupId _groupId;
        
        public AstCreateTable(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableIndicesList>())
                {
                    this._tableIndicesList = ((AstTableIndicesList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSimpleId>())
                {
                    this._simpleId = ((AstSimpleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableOptions>())
                {
                    this._tableOptions = ((AstTableOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateTable(Position p, AstFullTableRef fullTableRef, AstColumnDefTableConstraints columnDefTableConstraints, AstTableIndicesList tableIndicesList, AstSimpleId simpleId, AstTableOptions tableOptions, AstGroupId groupId) : 
                base(p)
        {
            this._fullTableRef = fullTableRef;
            this._columnDefTableConstraints = columnDefTableConstraints;
            this._tableIndicesList = tableIndicesList;
            this._simpleId = simpleId;
            this._tableOptions = tableOptions;
            this._groupId = groupId;
        }
        
        public AstCreateTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableIndicesList>())
                {
                    this._tableIndicesList = ((AstTableIndicesList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSimpleId>())
                {
                    this._simpleId = ((AstSimpleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableOptions>())
                {
                    this._tableOptions = ((AstTableOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstColumnDefTableConstraints ColumnDefTableConstraints
        {
            get
            {
                return this._columnDefTableConstraints;
            }
        }
        
        public virtual AstTableIndicesList TableIndicesList
        {
            get
            {
                return this._tableIndicesList;
            }
        }
        
        public virtual AstSimpleId SimpleId
        {
            get
            {
                return this._simpleId;
            }
        }
        
        public virtual AstTableOptions TableOptions
        {
            get
            {
                return this._tableOptions;
            }
        }
        
        public virtual AstGroupId GroupId
        {
            get
            {
                return this._groupId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateTable(this);
        }
        
        /// <summary>
        /// create_table : 
        ///    CREATE TABLE full_table_ref ( column_def_table_constraints table_indices_list? ) LOCK simple_id table_options? ON on=group_id TEXTIMAGE_ON text_image=group_id SEMI? 
        /// </summary>
        public static AstCreateTable CreateTable(AstFullTableRef fullTableRef, AstColumnDefTableConstraints columnDefTableConstraints, AstTableIndicesList? tableIndicesList, AstSimpleId simpleId, AstTableOptions? tableOptions, AstGroupId on, AstGroupId textImage)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            list.Add(columnDefTableConstraints);
            list.Add(tableIndicesList);
            list.Add(simpleId);
            list.Add(tableOptions);
            list.Add(on);
            list.Add(textImage);
            return new AstCreateTable(Position.Default, list);
        }
        
        /// <summary>
        /// create_table : 
        ///    CREATE TABLE full_table_ref ( column_def_table_constraints table_indices_list? ) LOCK simple_id table_options? DEFAULT TEXTIMAGE_ON text_image=group_id SEMI? 
        /// </summary>
        public static AstCreateTable CreateTable(AstFullTableRef fullTableRef, AstColumnDefTableConstraints columnDefTableConstraints, AstTableIndicesList? tableIndicesList, AstSimpleId simpleId, AstTableOptions? tableOptions, AstGroupId textImage)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            list.Add(columnDefTableConstraints);
            list.Add(tableIndicesList);
            list.Add(simpleId);
            list.Add(tableOptions);
            list.Add(textImage);
            return new AstCreateTable(Position.Default, list);
        }
        
        /// <summary>
        /// create_table : 
        ///    CREATE TABLE full_table_ref ( column_def_table_constraints table_indices_list? ) LOCK simple_id table_options? DEFAULT DEFAULT SEMI? 
        /// </summary>
        public static AstCreateTable CreateTable(AstFullTableRef fullTableRef, AstColumnDefTableConstraints columnDefTableConstraints, AstTableIndicesList? tableIndicesList, AstSimpleId simpleId, AstTableOptions? tableOptions)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            list.Add(columnDefTableConstraints);
            list.Add(tableIndicesList);
            list.Add(simpleId);
            list.Add(tableOptions);
            return new AstCreateTable(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_table_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  decimal
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | STATISTICS_INCREMENTAL  EQUAL  on_off
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// 	 | DATA_COMPRESSION  EQUAL  index_strategy  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// </summary>
    public partial class AstCreateTableIndexOption : AstRule
    {
        
        private AstOnOff _onOff;
        
        private AstDecimal _decimal;
        
        private AstIndexStrategy _indexStrategy;
        
        private AstOnPartitions _onPartitions;
        
        public AstCreateTableIndexOption(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexStrategy>())
                {
                    this._indexStrategy = ((AstIndexStrategy)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitions>())
                {
                    this._onPartitions = ((AstOnPartitions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateTableIndexOption(Position p, AstOnOff onOff, AstDecimal @decimal, AstIndexStrategy indexStrategy, AstOnPartitions onPartitions) : 
                base(p)
        {
            this._onOff = onOff;
            this._decimal = @decimal;
            this._indexStrategy = indexStrategy;
            this._onPartitions = onPartitions;
        }
        
        public AstCreateTableIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexStrategy>())
                {
                    this._indexStrategy = ((AstIndexStrategy)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitions>())
                {
                    this._onPartitions = ((AstOnPartitions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstIndexStrategy IndexStrategy
        {
            get
            {
                return this._indexStrategy;
            }
        }
        
        public virtual AstOnPartitions OnPartitions
        {
            get
            {
                return this._onPartitions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateTableIndexOption(this);
        }
        
        /// <summary>
        /// create_table_index_option : 
        ///    PAD_INDEX EQUAL on_off 
        /// </summary>
        public static AstCreateTableIndexOption CreateTableIndexOption(AstOnOff onOff)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(onOff);
            return new AstCreateTableIndexOption(Position.Default, list);
        }
        
        /// <summary>
        /// create_table_index_option : 
        ///    FILLFACTOR EQUAL decimal 
        /// </summary>
        public static AstCreateTableIndexOption CreateTableIndexOption(AstDecimal @decimal)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(@decimal);
            return new AstCreateTableIndexOption(Position.Default, list);
        }
        
        /// <summary>
        /// create_table_index_option : 
        ///    DATA_COMPRESSION EQUAL index_strategy on_partitions? 
        /// </summary>
        public static AstCreateTableIndexOption CreateTableIndexOption(AstIndexStrategy indexStrategy, AstOnPartitions? onPartitions)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(indexStrategy);
            list.Add(onPartitions);
            return new AstCreateTableIndexOption(Position.Default, list);
        }
        
        /// <summary>
        /// create_table_index_option : 
        ///    XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public static AstCreateTableIndexOption CreateTableIndexOption(AstOnOff onOff, AstOnPartitions? onPartitions)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(onOff);
            list.Add(onPartitions);
            return new AstCreateTableIndexOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_view
    /// 	 : CREATE  VIEW  schema_view_ref  (LR_BRACKET  column_name_list  RR_BRACKET)?  view_attributes?  AS  select_statement_standalone  (WITH  CHECK  OPTION)?  SEMI?
    /// </summary>
    public partial class AstCreateView : AstBatchLevelStatement
    {
        
        private AstSchemaViewRef _schemaViewRef;
        
        private AstColumnNameList _columnNameList;
        
        private AstViewAttributes _viewAttributes;
        
        private AstSelectStatementStandalone _selectStatementStandalone;
        
        public AstCreateView(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaViewRef>())
                {
                    this._schemaViewRef = ((AstSchemaViewRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstViewAttributes>())
                {
                    this._viewAttributes = ((AstViewAttributes)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public AstCreateView(Position p, AstSchemaViewRef schemaViewRef, AstColumnNameList columnNameList, AstViewAttributes viewAttributes, AstSelectStatementStandalone selectStatementStandalone) : 
                base(p)
        {
            this._schemaViewRef = schemaViewRef;
            this._columnNameList = columnNameList;
            this._viewAttributes = viewAttributes;
            this._selectStatementStandalone = selectStatementStandalone;
        }
        
        public AstCreateView(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaViewRef>())
                {
                    this._schemaViewRef = ((AstSchemaViewRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstViewAttributes>())
                {
                    this._viewAttributes = ((AstViewAttributes)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaViewRef SchemaViewRef
        {
            get
            {
                return this._schemaViewRef;
            }
        }
        
        public virtual AstColumnNameList ColumnNameList
        {
            get
            {
                return this._columnNameList;
            }
        }
        
        public virtual AstViewAttributes ViewAttributes
        {
            get
            {
                return this._viewAttributes;
            }
        }
        
        public virtual AstSelectStatementStandalone SelectStatementStandalone
        {
            get
            {
                return this._selectStatementStandalone;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateView(this);
        }
        
        /// <summary>
        /// create_view : 
        ///    CREATE VIEW schema_view_ref ( column_name_list ) view_attributes? AS select_statement_standalone WITH CHECK OPTION SEMI? 
        /// </summary>
        public static AstCreateView CreateView(AstSchemaViewRef schemaViewRef, AstColumnNameList columnNameList, AstViewAttributes? viewAttributes, AstSelectStatementStandalone selectStatementStandalone)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(schemaViewRef);
            list.Add(columnNameList);
            list.Add(viewAttributes);
            list.Add(selectStatementStandalone);
            return new AstCreateView(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_table
    /// 	 : ALTER  TABLE  full_table_ref  (SET  LR_BRACKET  LOCK_ESCALATION  EQUAL  lock_mode  RR_BRACKET | ADD  column_def_table_constraints | ALTER  COLUMN  (column_definition | column_modifier) | DROP  COLUMN  ids | DROP  CONSTRAINT  constraint_id | WITH  check_nocheck  ADD  alter_table_constraint | check_nocheck  CONSTRAINT  constraint_id | enable_disable  TRIGGER  id_? | REBUILD  table_options | SWITCH  switch_partition)  SEMI?
    /// </summary>
    public partial class AstAlterTable : AstDdlClause
    {
        
        private AstFullTableRef _fullTableRef;
        
        private AstLockMode _lockMode;
        
        private AstColumnDefTableConstraints _columnDefTableConstraints;
        
        private AstColumnDefinition _columnDefinition;
        
        private AstColumnModifier _columnModifier;
        
        private AstIds _ids;
        
        private AstConstraintId _constraintId;
        
        private AstCheckNocheck _checkNocheck;
        
        private AstAlterTableConstraint _alterTableConstraint;
        
        private AstEnableDisable _enableDisable;
        
        private AstId _id;
        
        private AstTableOptions _tableOptions;
        
        private AstSwitchPartition _switchPartition;
        
        public AstAlterTable(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLockMode>())
                {
                    this._lockMode = ((AstLockMode)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefinition>())
                {
                    this._columnDefinition = ((AstColumnDefinition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnModifier>())
                {
                    this._columnModifier = ((AstColumnModifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIds>())
                {
                    this._ids = ((AstIds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstConstraintId>())
                {
                    this._constraintId = ((AstConstraintId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCheckNocheck>())
                {
                    this._checkNocheck = ((AstCheckNocheck)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterTableConstraint>())
                {
                    this._alterTableConstraint = ((AstAlterTableConstraint)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEnableDisable>())
                {
                    this._enableDisable = ((AstEnableDisable)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableOptions>())
                {
                    this._tableOptions = ((AstTableOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSwitchPartition>())
                {
                    this._switchPartition = ((AstSwitchPartition)(enumerator.Current));
                }
            }
        }
        
        public AstAlterTable(Position p, AstFullTableRef fullTableRef, AstLockMode lockMode, AstColumnDefTableConstraints columnDefTableConstraints, AstColumnDefinition columnDefinition, AstColumnModifier columnModifier, AstIds ids, AstConstraintId constraintId, AstCheckNocheck checkNocheck, AstAlterTableConstraint alterTableConstraint, AstEnableDisable enableDisable, AstId id, AstTableOptions tableOptions, AstSwitchPartition switchPartition) : 
                base(p)
        {
            this._fullTableRef = fullTableRef;
            this._lockMode = lockMode;
            this._columnDefTableConstraints = columnDefTableConstraints;
            this._columnDefinition = columnDefinition;
            this._columnModifier = columnModifier;
            this._ids = ids;
            this._constraintId = constraintId;
            this._checkNocheck = checkNocheck;
            this._alterTableConstraint = alterTableConstraint;
            this._enableDisable = enableDisable;
            this._id = id;
            this._tableOptions = tableOptions;
            this._switchPartition = switchPartition;
        }
        
        public AstAlterTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLockMode>())
                {
                    this._lockMode = ((AstLockMode)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefinition>())
                {
                    this._columnDefinition = ((AstColumnDefinition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnModifier>())
                {
                    this._columnModifier = ((AstColumnModifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIds>())
                {
                    this._ids = ((AstIds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstConstraintId>())
                {
                    this._constraintId = ((AstConstraintId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCheckNocheck>())
                {
                    this._checkNocheck = ((AstCheckNocheck)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterTableConstraint>())
                {
                    this._alterTableConstraint = ((AstAlterTableConstraint)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEnableDisable>())
                {
                    this._enableDisable = ((AstEnableDisable)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableOptions>())
                {
                    this._tableOptions = ((AstTableOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSwitchPartition>())
                {
                    this._switchPartition = ((AstSwitchPartition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstLockMode LockMode
        {
            get
            {
                return this._lockMode;
            }
        }
        
        public virtual AstColumnDefTableConstraints ColumnDefTableConstraints
        {
            get
            {
                return this._columnDefTableConstraints;
            }
        }
        
        public virtual AstColumnDefinition ColumnDefinition
        {
            get
            {
                return this._columnDefinition;
            }
        }
        
        public virtual AstColumnModifier ColumnModifier
        {
            get
            {
                return this._columnModifier;
            }
        }
        
        public virtual AstIds Ids
        {
            get
            {
                return this._ids;
            }
        }
        
        public virtual AstConstraintId ConstraintId
        {
            get
            {
                return this._constraintId;
            }
        }
        
        public virtual AstCheckNocheck CheckNocheck
        {
            get
            {
                return this._checkNocheck;
            }
        }
        
        public virtual AstAlterTableConstraint AlterTableConstraint
        {
            get
            {
                return this._alterTableConstraint;
            }
        }
        
        public virtual AstEnableDisable EnableDisable
        {
            get
            {
                return this._enableDisable;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstTableOptions TableOptions
        {
            get
            {
                return this._tableOptions;
            }
        }
        
        public virtual AstSwitchPartition SwitchPartition
        {
            get
            {
                return this._switchPartition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterTable(this);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref SET ( LOCK_ESCALATION EQUAL lock_mode ) SEMI? 
        /// </summary>
        public static AstAlterTable AlterTable(AstFullTableRef fullTableRef, AstLockMode lockMode)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            list.Add(lockMode);
            return new AstAlterTable(Position.Default, list);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref ADD column_def_table_constraints SEMI? 
        /// </summary>
        public static AstAlterTable AlterTable(AstFullTableRef fullTableRef, AstColumnDefTableConstraints columnDefTableConstraints)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            list.Add(columnDefTableConstraints);
            return new AstAlterTable(Position.Default, list);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref ALTER COLUMN column_definition SEMI? 
        /// </summary>
        public static AstAlterTable AlterTable(AstFullTableRef fullTableRef, AstColumnDefinition columnDefinition)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            list.Add(columnDefinition);
            return new AstAlterTable(Position.Default, list);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref ALTER COLUMN column_modifier SEMI? 
        /// </summary>
        public static AstAlterTable AlterTable(AstFullTableRef fullTableRef, AstColumnModifier columnModifier)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            list.Add(columnModifier);
            return new AstAlterTable(Position.Default, list);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref DROP COLUMN ids SEMI? 
        /// </summary>
        public static AstAlterTable AlterTable(AstFullTableRef fullTableRef, AstIds ids)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            list.Add(ids);
            return new AstAlterTable(Position.Default, list);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref DROP CONSTRAINT constraint_id SEMI? 
        /// </summary>
        public static AstAlterTable AlterTable(AstFullTableRef fullTableRef, AstConstraintId constraintId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            list.Add(constraintId);
            return new AstAlterTable(Position.Default, list);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref WITH check_nocheck ADD alter_table_constraint SEMI? 
        /// </summary>
        public static AstAlterTable AlterTable(AstFullTableRef fullTableRef, AstCheckNocheck checkNocheck, AstAlterTableConstraint alterTableConstraint)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            list.Add(checkNocheck);
            list.Add(alterTableConstraint);
            return new AstAlterTable(Position.Default, list);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref check_nocheck CONSTRAINT constraint_id SEMI? 
        /// </summary>
        public static AstAlterTable AlterTable(AstFullTableRef fullTableRef, AstCheckNocheck checkNocheck, AstConstraintId constraintId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            list.Add(checkNocheck);
            list.Add(constraintId);
            return new AstAlterTable(Position.Default, list);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref enable_disable TRIGGER id_? SEMI? 
        /// </summary>
        public static AstAlterTable AlterTable(AstFullTableRef fullTableRef, AstEnableDisable enableDisable, AstId? id)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            list.Add(enableDisable);
            list.Add(id);
            return new AstAlterTable(Position.Default, list);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref REBUILD table_options SEMI? 
        /// </summary>
        public static AstAlterTable AlterTable(AstFullTableRef fullTableRef, AstTableOptions tableOptions)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            list.Add(tableOptions);
            return new AstAlterTable(Position.Default, list);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref SWITCH switch_partition SEMI? 
        /// </summary>
        public static AstAlterTable AlterTable(AstFullTableRef fullTableRef, AstSwitchPartition switchPartition)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            list.Add(switchPartition);
            return new AstAlterTable(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_table_constraint_foreign
    /// 	 : FOREIGN  KEY  LR_BRACKET  fk = column_name_list  RR_BRACKET  REFERENCES  full_table_ref  (LR_BRACKET  pk = column_name_list  RR_BRACKET)?  on1 = constraint_delete_or_update  on2 = constraint_delete_or_update
    /// </summary>
    public partial class AstAlterTableConstraintForeign : AstRule
    {
        
        private AstColumnNameList _columnNameList;
        
        private AstFullTableRef _fullTableRef;
        
        private AstConstraintDeleteOrUpdate _constraintDeleteOrUpdate;
        
        public AstAlterTableConstraintForeign(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstConstraintDeleteOrUpdate>())
                {
                    this._constraintDeleteOrUpdate = ((AstConstraintDeleteOrUpdate)(enumerator.Current));
                }
            }
        }
        
        public AstAlterTableConstraintForeign(Position p, AstColumnNameList columnNameList, AstFullTableRef fullTableRef, AstConstraintDeleteOrUpdate constraintDeleteOrUpdate) : 
                base(p)
        {
            this._columnNameList = columnNameList;
            this._fullTableRef = fullTableRef;
            this._constraintDeleteOrUpdate = constraintDeleteOrUpdate;
        }
        
        public AstAlterTableConstraintForeign(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstConstraintDeleteOrUpdate>())
                {
                    this._constraintDeleteOrUpdate = ((AstConstraintDeleteOrUpdate)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnNameList ColumnNameList
        {
            get
            {
                return this._columnNameList;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstConstraintDeleteOrUpdate ConstraintDeleteOrUpdate
        {
            get
            {
                return this._constraintDeleteOrUpdate;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterTableConstraintForeign(this);
        }
        
        /// <summary>
        /// alter_table_constraint_foreign : 
        ///    FOREIGN KEY ( fk=column_name_list ) REFERENCES full_table_ref ( pk=column_name_list ) on1=constraint_delete_or_update on2=constraint_delete_or_update 
        /// </summary>
        public static AstAlterTableConstraintForeign AlterTableConstraintForeign(AstColumnNameList fk, AstFullTableRef fullTableRef, AstColumnNameList pk, AstConstraintDeleteOrUpdate on1, AstConstraintDeleteOrUpdate on2)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fk);
            list.Add(fullTableRef);
            list.Add(pk);
            list.Add(on1);
            list.Add(on2);
            return new AstAlterTableConstraintForeign(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_database
    /// 	 : ALTER  DATABASE  (database_id | CURRENT)  alter_database_new_infos  SEMI?
    /// </summary>
    public partial class AstAlterDatabase : AstDdlClause
    {
        
        private AstDatabaseId _databaseId;
        
        private AstAlterDatabaseNewInfos _alterDatabaseNewInfos;
        
        public AstAlterDatabase(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterDatabaseNewInfos>())
                {
                    this._alterDatabaseNewInfos = ((AstAlterDatabaseNewInfos)(enumerator.Current));
                }
            }
        }
        
        public AstAlterDatabase(Position p, AstDatabaseId databaseId, AstAlterDatabaseNewInfos alterDatabaseNewInfos) : 
                base(p)
        {
            this._databaseId = databaseId;
            this._alterDatabaseNewInfos = alterDatabaseNewInfos;
        }
        
        public AstAlterDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterDatabaseNewInfos>())
                {
                    this._alterDatabaseNewInfos = ((AstAlterDatabaseNewInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstAlterDatabaseNewInfos AlterDatabaseNewInfos
        {
            get
            {
                return this._alterDatabaseNewInfos;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterDatabase(this);
        }
        
        /// <summary>
        /// alter_database : 
        ///    ALTER DATABASE database_id alter_database_new_infos SEMI? 
        /// </summary>
        public static AstAlterDatabase AlterDatabase(AstDatabaseId databaseId, AstAlterDatabaseNewInfos alterDatabaseNewInfos)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(databaseId);
            list.Add(alterDatabaseNewInfos);
            return new AstAlterDatabase(Position.Default, list);
        }
        
        /// <summary>
        /// alter_database : 
        ///    ALTER DATABASE CURRENT alter_database_new_infos SEMI? 
        /// </summary>
        public static AstAlterDatabase AlterDatabase(AstAlterDatabaseNewInfos alterDatabaseNewInfos)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(alterDatabaseNewInfos);
            return new AstAlterDatabase(Position.Default, list);
        }
    }
    
    /// <summary>
    /// change_tracking_option_item
    /// 	 : change_tracking_option_list  change_tracking_option_lists
    /// </summary>
    public partial class AstChangeTrackingOptionItem : AstRule
    {
        
        private AstChangeTrackingOptionList _changeTrackingOptionList;
        
        private AstChangeTrackingOptionLists _changeTrackingOptionLists;
        
        public AstChangeTrackingOptionItem(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstChangeTrackingOptionList>())
                {
                    this._changeTrackingOptionList = ((AstChangeTrackingOptionList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstChangeTrackingOptionLists>())
                {
                    this._changeTrackingOptionLists = ((AstChangeTrackingOptionLists)(enumerator.Current));
                }
            }
        }
        
        public AstChangeTrackingOptionItem(Position p, AstChangeTrackingOptionList changeTrackingOptionList, AstChangeTrackingOptionLists changeTrackingOptionLists) : 
                base(p)
        {
            this._changeTrackingOptionList = changeTrackingOptionList;
            this._changeTrackingOptionLists = changeTrackingOptionLists;
        }
        
        public AstChangeTrackingOptionItem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstChangeTrackingOptionList>())
                {
                    this._changeTrackingOptionList = ((AstChangeTrackingOptionList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstChangeTrackingOptionLists>())
                {
                    this._changeTrackingOptionLists = ((AstChangeTrackingOptionLists)(enumerator.Current));
                }
            }
        }
        
        public virtual AstChangeTrackingOptionList ChangeTrackingOptionList
        {
            get
            {
                return this._changeTrackingOptionList;
            }
        }
        
        public virtual AstChangeTrackingOptionLists ChangeTrackingOptionLists
        {
            get
            {
                return this._changeTrackingOptionLists;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTrackingOptionItem(this);
        }
        
        /// <summary>
        /// change_tracking_option_item : 
        ///    change_tracking_option_list change_tracking_option_lists 
        /// </summary>
        public static AstChangeTrackingOptionItem ChangeTrackingOptionItem(AstChangeTrackingOptionList changeTrackingOptionList, AstChangeTrackingOptionLists changeTrackingOptionLists)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(changeTrackingOptionList);
            list.Add(changeTrackingOptionLists);
            return new AstChangeTrackingOptionItem(Position.Default, list);
        }
    }
    
    /// <summary>
    /// containment_option
    /// 	 : CONTAINMENT  EQUAL  none_partial
    /// </summary>
    public partial class AstContainmentOption : AstRule
    {
        
        private AstNonePartial _nonePartial;
        
        public AstContainmentOption(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNonePartial>())
                {
                    this._nonePartial = ((AstNonePartial)(enumerator.Current));
                }
            }
        }
        
        public AstContainmentOption(Position p, AstNonePartial nonePartial) : 
                base(p)
        {
            this._nonePartial = nonePartial;
        }
        
        public AstContainmentOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNonePartial>())
                {
                    this._nonePartial = ((AstNonePartial)(enumerator.Current));
                }
            }
        }
        
        public virtual AstNonePartial NonePartial
        {
            get
            {
                return this._nonePartial;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContainmentOption(this);
        }
        
        /// <summary>
        /// containment_option : 
        ///    CONTAINMENT EQUAL none_partial 
        /// </summary>
        public static AstContainmentOption ContainmentOption(AstNonePartial nonePartial)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(nonePartial);
            return new AstContainmentOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_endpoint
    /// 	 : ALTER  ENDPOINT  endpoint_id  (AUTHORIZATION  login_id)?  (STATE  EQUAL  state_enum)?  AS  TCP  LR_BRACKET  LISTENER_PORT  EQUAL  decimal  (COMMA  listener_ip)?  RR_BRACKET  (TSQL | alter_endpoint_service_broker | alter_endpoint_database_mirroring)
    /// </summary>
    public partial class AstAlterEndpoint : AstDdlClause
    {
        
        private AstEndpointId _endpointId;
        
        private AstLoginId _loginId;
        
        private AstStateEnum _stateEnum;
        
        private AstDecimal _decimal;
        
        private AstListenerIp _listenerIp;
        
        private AstAlterEndpointServiceBroker _alterEndpointServiceBroker;
        
        private AstAlterEndpointDatabaseMirroring _alterEndpointDatabaseMirroring;
        
        public AstAlterEndpoint(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointId>())
                {
                    this._endpointId = ((AstEndpointId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStateEnum>())
                {
                    this._stateEnum = ((AstStateEnum)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstListenerIp>())
                {
                    this._listenerIp = ((AstListenerIp)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterEndpointServiceBroker>())
                {
                    this._alterEndpointServiceBroker = ((AstAlterEndpointServiceBroker)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterEndpointDatabaseMirroring>())
                {
                    this._alterEndpointDatabaseMirroring = ((AstAlterEndpointDatabaseMirroring)(enumerator.Current));
                }
            }
        }
        
        public AstAlterEndpoint(Position p, AstEndpointId endpointId, AstLoginId loginId, AstStateEnum stateEnum, AstDecimal @decimal, AstListenerIp listenerIp, AstAlterEndpointServiceBroker alterEndpointServiceBroker, AstAlterEndpointDatabaseMirroring alterEndpointDatabaseMirroring) : 
                base(p)
        {
            this._endpointId = endpointId;
            this._loginId = loginId;
            this._stateEnum = stateEnum;
            this._decimal = @decimal;
            this._listenerIp = listenerIp;
            this._alterEndpointServiceBroker = alterEndpointServiceBroker;
            this._alterEndpointDatabaseMirroring = alterEndpointDatabaseMirroring;
        }
        
        public AstAlterEndpoint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointId>())
                {
                    this._endpointId = ((AstEndpointId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStateEnum>())
                {
                    this._stateEnum = ((AstStateEnum)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstListenerIp>())
                {
                    this._listenerIp = ((AstListenerIp)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterEndpointServiceBroker>())
                {
                    this._alterEndpointServiceBroker = ((AstAlterEndpointServiceBroker)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterEndpointDatabaseMirroring>())
                {
                    this._alterEndpointDatabaseMirroring = ((AstAlterEndpointDatabaseMirroring)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEndpointId EndpointId
        {
            get
            {
                return this._endpointId;
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public virtual AstStateEnum StateEnum
        {
            get
            {
                return this._stateEnum;
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstListenerIp ListenerIp
        {
            get
            {
                return this._listenerIp;
            }
        }
        
        public virtual AstAlterEndpointServiceBroker AlterEndpointServiceBroker
        {
            get
            {
                return this._alterEndpointServiceBroker;
            }
        }
        
        public virtual AstAlterEndpointDatabaseMirroring AlterEndpointDatabaseMirroring
        {
            get
            {
                return this._alterEndpointDatabaseMirroring;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterEndpoint(this);
        }
        
        /// <summary>
        /// alter_endpoint : 
        ///    ALTER ENDPOINT endpoint_id AUTHORIZATION login_id STATE EQUAL state_enum AS TCP ( LISTENER_PORT EQUAL decimal , listener_ip ) TSQL 
        /// </summary>
        public static AstAlterEndpoint AlterEndpoint(AstEndpointId endpointId, AstLoginId loginId, AstStateEnum stateEnum, AstDecimal @decimal, AstListenerIp listenerIp)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(endpointId);
            list.Add(loginId);
            list.Add(stateEnum);
            list.Add(@decimal);
            list.Add(listenerIp);
            return new AstAlterEndpoint(Position.Default, list);
        }
        
        /// <summary>
        /// alter_endpoint : 
        ///    ALTER ENDPOINT endpoint_id AUTHORIZATION login_id STATE EQUAL state_enum AS TCP ( LISTENER_PORT EQUAL decimal , listener_ip ) alter_endpoint_service_broker 
        /// </summary>
        public static AstAlterEndpoint AlterEndpoint(AstEndpointId endpointId, AstLoginId loginId, AstStateEnum stateEnum, AstDecimal @decimal, AstListenerIp listenerIp, AstAlterEndpointServiceBroker alterEndpointServiceBroker)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(endpointId);
            list.Add(loginId);
            list.Add(stateEnum);
            list.Add(@decimal);
            list.Add(listenerIp);
            list.Add(alterEndpointServiceBroker);
            return new AstAlterEndpoint(Position.Default, list);
        }
        
        /// <summary>
        /// alter_endpoint : 
        ///    ALTER ENDPOINT endpoint_id AUTHORIZATION login_id STATE EQUAL state_enum AS TCP ( LISTENER_PORT EQUAL decimal , listener_ip ) alter_endpoint_database_mirroring 
        /// </summary>
        public static AstAlterEndpoint AlterEndpoint(AstEndpointId endpointId, AstLoginId loginId, AstStateEnum stateEnum, AstDecimal @decimal, AstListenerIp listenerIp, AstAlterEndpointDatabaseMirroring alterEndpointDatabaseMirroring)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(endpointId);
            list.Add(loginId);
            list.Add(stateEnum);
            list.Add(@decimal);
            list.Add(listenerIp);
            list.Add(alterEndpointDatabaseMirroring);
            return new AstAlterEndpoint(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_endpoint_database_mirroring
    /// 	 : FOR  DATABASE_MIRRORING  LR_BRACKET  authentication_configuration  (COMMA?  encryption_state  encryption_algorithm?)?  COMMA?  ROLE  EQUAL  role_mirroring  RR_BRACKET
    /// </summary>
    public partial class AstAlterEndpointDatabaseMirroring : AstRule
    {
        
        private AstAuthenticationConfiguration _authenticationConfiguration;
        
        private AstEncryptionState _encryptionState;
        
        private AstEncryptionAlgorithm _encryptionAlgorithm;
        
        private AstRoleMirroring _roleMirroring;
        
        public AstAlterEndpointDatabaseMirroring(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuthenticationConfiguration>())
                {
                    this._authenticationConfiguration = ((AstAuthenticationConfiguration)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionState>())
                {
                    this._encryptionState = ((AstEncryptionState)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionAlgorithm>())
                {
                    this._encryptionAlgorithm = ((AstEncryptionAlgorithm)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRoleMirroring>())
                {
                    this._roleMirroring = ((AstRoleMirroring)(enumerator.Current));
                }
            }
        }
        
        public AstAlterEndpointDatabaseMirroring(Position p, AstAuthenticationConfiguration authenticationConfiguration, AstEncryptionState encryptionState, AstEncryptionAlgorithm encryptionAlgorithm, AstRoleMirroring roleMirroring) : 
                base(p)
        {
            this._authenticationConfiguration = authenticationConfiguration;
            this._encryptionState = encryptionState;
            this._encryptionAlgorithm = encryptionAlgorithm;
            this._roleMirroring = roleMirroring;
        }
        
        public AstAlterEndpointDatabaseMirroring(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuthenticationConfiguration>())
                {
                    this._authenticationConfiguration = ((AstAuthenticationConfiguration)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionState>())
                {
                    this._encryptionState = ((AstEncryptionState)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionAlgorithm>())
                {
                    this._encryptionAlgorithm = ((AstEncryptionAlgorithm)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRoleMirroring>())
                {
                    this._roleMirroring = ((AstRoleMirroring)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuthenticationConfiguration AuthenticationConfiguration
        {
            get
            {
                return this._authenticationConfiguration;
            }
        }
        
        public virtual AstEncryptionState EncryptionState
        {
            get
            {
                return this._encryptionState;
            }
        }
        
        public virtual AstEncryptionAlgorithm EncryptionAlgorithm
        {
            get
            {
                return this._encryptionAlgorithm;
            }
        }
        
        public virtual AstRoleMirroring RoleMirroring
        {
            get
            {
                return this._roleMirroring;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterEndpointDatabaseMirroring(this);
        }
        
        /// <summary>
        /// alter_endpoint_database_mirroring : 
        ///    FOR DATABASE_MIRRORING ( authentication_configuration COMMA? encryption_state encryption_algorithm? COMMA? ROLE EQUAL role_mirroring ) 
        /// </summary>
        public static AstAlterEndpointDatabaseMirroring AlterEndpointDatabaseMirroring(AstAuthenticationConfiguration authenticationConfiguration, AstEncryptionState encryptionState, AstEncryptionAlgorithm? encryptionAlgorithm, AstRoleMirroring roleMirroring)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(authenticationConfiguration);
            list.Add(encryptionState);
            list.Add(encryptionAlgorithm);
            list.Add(roleMirroring);
            return new AstAlterEndpointDatabaseMirroring(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_endpoint_service_broker
    /// 	 : FOR  SERVICE_BROKER  LR_BRACKET  authentication_configuration  (COMMA?  encryption_state  encryption_algorithm?)?  (COMMA?  MESSAGE_FORWARDING  EQUAL  enable_disable)?  (COMMA?  MESSAGE_FORWARD_SIZE  EQUAL  decimal)?  RR_BRACKET
    /// </summary>
    public partial class AstAlterEndpointServiceBroker : AstRule
    {
        
        private AstAuthenticationConfiguration _authenticationConfiguration;
        
        private AstEncryptionState _encryptionState;
        
        private AstEncryptionAlgorithm _encryptionAlgorithm;
        
        private AstEnableDisable _enableDisable;
        
        private AstDecimal _decimal;
        
        public AstAlterEndpointServiceBroker(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuthenticationConfiguration>())
                {
                    this._authenticationConfiguration = ((AstAuthenticationConfiguration)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionState>())
                {
                    this._encryptionState = ((AstEncryptionState)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionAlgorithm>())
                {
                    this._encryptionAlgorithm = ((AstEncryptionAlgorithm)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEnableDisable>())
                {
                    this._enableDisable = ((AstEnableDisable)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstAlterEndpointServiceBroker(Position p, AstAuthenticationConfiguration authenticationConfiguration, AstEncryptionState encryptionState, AstEncryptionAlgorithm encryptionAlgorithm, AstEnableDisable enableDisable, AstDecimal @decimal) : 
                base(p)
        {
            this._authenticationConfiguration = authenticationConfiguration;
            this._encryptionState = encryptionState;
            this._encryptionAlgorithm = encryptionAlgorithm;
            this._enableDisable = enableDisable;
            this._decimal = @decimal;
        }
        
        public AstAlterEndpointServiceBroker(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuthenticationConfiguration>())
                {
                    this._authenticationConfiguration = ((AstAuthenticationConfiguration)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionState>())
                {
                    this._encryptionState = ((AstEncryptionState)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionAlgorithm>())
                {
                    this._encryptionAlgorithm = ((AstEncryptionAlgorithm)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEnableDisable>())
                {
                    this._enableDisable = ((AstEnableDisable)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuthenticationConfiguration AuthenticationConfiguration
        {
            get
            {
                return this._authenticationConfiguration;
            }
        }
        
        public virtual AstEncryptionState EncryptionState
        {
            get
            {
                return this._encryptionState;
            }
        }
        
        public virtual AstEncryptionAlgorithm EncryptionAlgorithm
        {
            get
            {
                return this._encryptionAlgorithm;
            }
        }
        
        public virtual AstEnableDisable EnableDisable
        {
            get
            {
                return this._enableDisable;
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterEndpointServiceBroker(this);
        }
        
        /// <summary>
        /// alter_endpoint_service_broker : 
        ///    FOR SERVICE_BROKER ( authentication_configuration COMMA? encryption_state encryption_algorithm? COMMA? MESSAGE_FORWARDING EQUAL enable_disable COMMA? MESSAGE_FORWARD_SIZE EQUAL decimal ) 
        /// </summary>
        public static AstAlterEndpointServiceBroker AlterEndpointServiceBroker(AstAuthenticationConfiguration authenticationConfiguration, AstEncryptionState encryptionState, AstEncryptionAlgorithm? encryptionAlgorithm, AstEnableDisable enableDisable, AstDecimal @decimal)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(authenticationConfiguration);
            list.Add(encryptionState);
            list.Add(encryptionAlgorithm);
            list.Add(enableDisable);
            list.Add(@decimal);
            return new AstAlterEndpointServiceBroker(Position.Default, list);
        }
    }
    
    /// <summary>
    /// database_mirroring_option
    /// 	 : mirroring_set_option
    /// </summary>
    public partial class AstDatabaseMirroringOption : AstRule
    {
        
        private AstMirroringSetOption _mirroringSetOption;
        
        public AstDatabaseMirroringOption(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMirroringSetOption>())
                {
                    this._mirroringSetOption = ((AstMirroringSetOption)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseMirroringOption(Position p, AstMirroringSetOption mirroringSetOption) : 
                base(p)
        {
            this._mirroringSetOption = mirroringSetOption;
        }
        
        public AstDatabaseMirroringOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMirroringSetOption>())
                {
                    this._mirroringSetOption = ((AstMirroringSetOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMirroringSetOption MirroringSetOption
        {
            get
            {
                return this._mirroringSetOption;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseMirroringOption(this);
        }
        
        /// <summary>
        /// database_mirroring_option : 
        ///    mirroring_set_option 
        /// </summary>
        public static AstDatabaseMirroringOption DatabaseMirroringOption(AstMirroringSetOption mirroringSetOption)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(mirroringSetOption);
            return new AstDatabaseMirroringOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// witness_server
    /// 	 : partner_server
    /// </summary>
    public partial class AstWitnessServer : AstRule
    {
        
        private AstPartnerServer _partnerServer;
        
        public AstWitnessServer(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartnerServer>())
                {
                    this._partnerServer = ((AstPartnerServer)(enumerator.Current));
                }
            }
        }
        
        public AstWitnessServer(Position p, AstPartnerServer partnerServer) : 
                base(p)
        {
            this._partnerServer = partnerServer;
        }
        
        public AstWitnessServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartnerServer>())
                {
                    this._partnerServer = ((AstPartnerServer)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartnerServer PartnerServer
        {
            get
            {
                return this._partnerServer;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWitnessServer(this);
        }
        
        /// <summary>
        /// witness_server : 
        ///    partner_server 
        /// </summary>
        public static AstWitnessServer WitnessServer(AstPartnerServer partnerServer)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(partnerServer);
            return new AstWitnessServer(Position.Default, list);
        }
    }
    
    /// <summary>
    /// partner_server
    /// 	 : partner_server_tcp_prefix  host  COLON  port_number
    /// </summary>
    public partial class AstPartnerServer : AstRule
    {
        
        private AstPartnerServerTcpPrefix _partnerServerTcpPrefix;
        
        private AstHost _host;
        
        private AstPortNumber _portNumber;
        
        public AstPartnerServer(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartnerServerTcpPrefix>())
                {
                    this._partnerServerTcpPrefix = ((AstPartnerServerTcpPrefix)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstHost>())
                {
                    this._host = ((AstHost)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPortNumber>())
                {
                    this._portNumber = ((AstPortNumber)(enumerator.Current));
                }
            }
        }
        
        public AstPartnerServer(Position p, AstPartnerServerTcpPrefix partnerServerTcpPrefix, AstHost host, AstPortNumber portNumber) : 
                base(p)
        {
            this._partnerServerTcpPrefix = partnerServerTcpPrefix;
            this._host = host;
            this._portNumber = portNumber;
        }
        
        public AstPartnerServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartnerServerTcpPrefix>())
                {
                    this._partnerServerTcpPrefix = ((AstPartnerServerTcpPrefix)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstHost>())
                {
                    this._host = ((AstHost)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPortNumber>())
                {
                    this._portNumber = ((AstPortNumber)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartnerServerTcpPrefix PartnerServerTcpPrefix
        {
            get
            {
                return this._partnerServerTcpPrefix;
            }
        }
        
        public virtual AstHost Host
        {
            get
            {
                return this._host;
            }
        }
        
        public virtual AstPortNumber PortNumber
        {
            get
            {
                return this._portNumber;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartnerServer(this);
        }
        
        /// <summary>
        /// partner_server : 
        ///    partner_server_tcp_prefix host : port_number 
        /// </summary>
        public static AstPartnerServer PartnerServer(AstPartnerServerTcpPrefix partnerServerTcpPrefix, AstHost host, AstPortNumber portNumber)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(partnerServerTcpPrefix);
            list.Add(host);
            list.Add(portNumber);
            return new AstPartnerServer(Position.Default, list);
        }
    }
    
    /// <summary>
    /// port_number
    /// 	 : decimal
    /// </summary>
    public partial class AstPortNumber : AstRule
    {
        
        private AstDecimal _decimal;
        
        public AstPortNumber(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstPortNumber(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstPortNumber(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPortNumber(this);
        }
        
        /// <summary>
        /// port_number : 
        ///    decimal 
        /// </summary>
        public static AstPortNumber PortNumber(AstDecimal @decimal)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(@decimal);
            return new AstPortNumber(Position.Default, list);
        }
    }
    
    /// <summary>
    /// date_correlation_optimization_option
    /// 	 : DATE_CORRELATION_OPTIMIZATION  on_off
    /// </summary>
    public partial class AstDateCorrelationOptimizationOption : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstDateCorrelationOptimizationOption(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstDateCorrelationOptimizationOption(Position p, AstOnOff onOff) : 
                base(p)
        {
            this._onOff = onOff;
        }
        
        public AstDateCorrelationOptimizationOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDateCorrelationOptimizationOption(this);
        }
        
        /// <summary>
        /// date_correlation_optimization_option : 
        ///    DATE_CORRELATION_OPTIMIZATION on_off 
        /// </summary>
        public static AstDateCorrelationOptimizationOption DateCorrelationOptimizationOption(AstOnOff onOff)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(onOff);
            return new AstDateCorrelationOptimizationOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// db_encryption_option
    /// 	 : ENCRYPTION  on_off
    /// </summary>
    public partial class AstDbEncryptionOption : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstDbEncryptionOption(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstDbEncryptionOption(Position p, AstOnOff onOff) : 
                base(p)
        {
            this._onOff = onOff;
        }
        
        public AstDbEncryptionOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbEncryptionOption(this);
        }
        
        /// <summary>
        /// db_encryption_option : 
        ///    ENCRYPTION on_off 
        /// </summary>
        public static AstDbEncryptionOption DbEncryptionOption(AstOnOff onOff)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(onOff);
            return new AstDbEncryptionOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// delayed_durability_option
    /// 	 : DELAYED_DURABILITY  EQUAL  delayed_durability
    /// </summary>
    public partial class AstDelayedDurabilityOption : AstRule
    {
        
        private AstDelayedDurability _delayedDurability;
        
        public AstDelayedDurabilityOption(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDelayedDurability>())
                {
                    this._delayedDurability = ((AstDelayedDurability)(enumerator.Current));
                }
            }
        }
        
        public AstDelayedDurabilityOption(Position p, AstDelayedDurability delayedDurability) : 
                base(p)
        {
            this._delayedDurability = delayedDurability;
        }
        
        public AstDelayedDurabilityOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDelayedDurability>())
                {
                    this._delayedDurability = ((AstDelayedDurability)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDelayedDurability DelayedDurability
        {
            get
            {
                return this._delayedDurability;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDelayedDurabilityOption(this);
        }
        
        /// <summary>
        /// delayed_durability_option : 
        ///    DELAYED_DURABILITY EQUAL delayed_durability 
        /// </summary>
        public static AstDelayedDurabilityOption DelayedDurabilityOption(AstDelayedDurability delayedDurability)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(delayedDurability);
            return new AstDelayedDurabilityOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// mixed_page_allocation_option
    /// 	 : MIXED_PAGE_ALLOCATION  on_off
    /// </summary>
    public partial class AstMixedPageAllocationOption : AstRule
    {
        
        private AstOnOff _onOff;
        
        public AstMixedPageAllocationOption(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstMixedPageAllocationOption(Position p, AstOnOff onOff) : 
                base(p)
        {
            this._onOff = onOff;
        }
        
        public AstMixedPageAllocationOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMixedPageAllocationOption(this);
        }
        
        /// <summary>
        /// mixed_page_allocation_option : 
        ///    MIXED_PAGE_ALLOCATION on_off 
        /// </summary>
        public static AstMixedPageAllocationOption MixedPageAllocationOption(AstOnOff onOff)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(onOff);
            return new AstMixedPageAllocationOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// target_recovery_time_option
    /// 	 : TARGET_RECOVERY_TIME  EQUAL  decimal  seconds_minutes
    /// </summary>
    public partial class AstTargetRecoveryTimeOption : AstRule
    {
        
        private AstDecimal _decimal;
        
        private AstSecondsMinutes _secondsMinutes;
        
        public AstTargetRecoveryTimeOption(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSecondsMinutes>())
                {
                    this._secondsMinutes = ((AstSecondsMinutes)(enumerator.Current));
                }
            }
        }
        
        public AstTargetRecoveryTimeOption(Position p, AstDecimal @decimal, AstSecondsMinutes secondsMinutes) : 
                base(p)
        {
            this._decimal = @decimal;
            this._secondsMinutes = secondsMinutes;
        }
        
        public AstTargetRecoveryTimeOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSecondsMinutes>())
                {
                    this._secondsMinutes = ((AstSecondsMinutes)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstSecondsMinutes SecondsMinutes
        {
            get
            {
                return this._secondsMinutes;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetRecoveryTimeOption(this);
        }
        
        /// <summary>
        /// target_recovery_time_option : 
        ///    TARGET_RECOVERY_TIME EQUAL decimal seconds_minutes 
        /// </summary>
        public static AstTargetRecoveryTimeOption TargetRecoveryTimeOption(AstDecimal @decimal, AstSecondsMinutes secondsMinutes)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(@decimal);
            list.Add(secondsMinutes);
            return new AstTargetRecoveryTimeOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_index
    /// 	 : DROP  INDEX  if_exists?  (drop_relational_or_xml_or_spatial_indexs | drop_backward_compatible_indexs)  SEMI?
    /// </summary>
    public partial class AstDropIndex : AstDdlClause
    {
        
        private AstIfExists _ifExists;
        
        private AstDropRelationalOrXmlOrSpatialIndexs _dropRelationalOrXmlOrSpatialIndexs;
        
        private AstDropBackwardCompatibleIndexs _dropBackwardCompatibleIndexs;
        
        public AstDropIndex(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists>())
                {
                    this._ifExists = ((AstIfExists)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDropRelationalOrXmlOrSpatialIndexs>())
                {
                    this._dropRelationalOrXmlOrSpatialIndexs = ((AstDropRelationalOrXmlOrSpatialIndexs)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDropBackwardCompatibleIndexs>())
                {
                    this._dropBackwardCompatibleIndexs = ((AstDropBackwardCompatibleIndexs)(enumerator.Current));
                }
            }
        }
        
        public AstDropIndex(Position p, AstIfExists ifExists, AstDropRelationalOrXmlOrSpatialIndexs dropRelationalOrXmlOrSpatialIndexs, AstDropBackwardCompatibleIndexs dropBackwardCompatibleIndexs) : 
                base(p)
        {
            this._ifExists = ifExists;
            this._dropRelationalOrXmlOrSpatialIndexs = dropRelationalOrXmlOrSpatialIndexs;
            this._dropBackwardCompatibleIndexs = dropBackwardCompatibleIndexs;
        }
        
        public AstDropIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists>())
                {
                    this._ifExists = ((AstIfExists)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDropRelationalOrXmlOrSpatialIndexs>())
                {
                    this._dropRelationalOrXmlOrSpatialIndexs = ((AstDropRelationalOrXmlOrSpatialIndexs)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDropBackwardCompatibleIndexs>())
                {
                    this._dropBackwardCompatibleIndexs = ((AstDropBackwardCompatibleIndexs)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIfExists IfExists
        {
            get
            {
                return this._ifExists;
            }
        }
        
        public virtual AstDropRelationalOrXmlOrSpatialIndexs DropRelationalOrXmlOrSpatialIndexs
        {
            get
            {
                return this._dropRelationalOrXmlOrSpatialIndexs;
            }
        }
        
        public virtual AstDropBackwardCompatibleIndexs DropBackwardCompatibleIndexs
        {
            get
            {
                return this._dropBackwardCompatibleIndexs;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropIndex(this);
        }
        
        /// <summary>
        /// drop_index : 
        ///    DROP INDEX if_exists? drop_relational_or_xml_or_spatial_indexs SEMI? 
        /// </summary>
        public static AstDropIndex DropIndex(AstIfExists? ifExists, AstDropRelationalOrXmlOrSpatialIndexs dropRelationalOrXmlOrSpatialIndexs)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(ifExists);
            list.Add(dropRelationalOrXmlOrSpatialIndexs);
            return new AstDropIndex(Position.Default, list);
        }
        
        /// <summary>
        /// drop_index : 
        ///    DROP INDEX if_exists? drop_backward_compatible_indexs SEMI? 
        /// </summary>
        public static AstDropIndex DropIndex(AstIfExists? ifExists, AstDropBackwardCompatibleIndexs dropBackwardCompatibleIndexs)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(ifExists);
            list.Add(dropBackwardCompatibleIndexs);
            return new AstDropIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_relational_or_xml_or_spatial_index
    /// 	 : index_id  ON  complete_table_ref
    /// </summary>
    public partial class AstDropRelationalOrXmlOrSpatialIndex : AstRule
    {
        
        private AstIndexId _indexId;
        
        private AstCompleteTableRef _completeTableRef;
        
        public AstDropRelationalOrXmlOrSpatialIndex(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCompleteTableRef>())
                {
                    this._completeTableRef = ((AstCompleteTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropRelationalOrXmlOrSpatialIndex(Position p, AstIndexId indexId, AstCompleteTableRef completeTableRef) : 
                base(p)
        {
            this._indexId = indexId;
            this._completeTableRef = completeTableRef;
        }
        
        public AstDropRelationalOrXmlOrSpatialIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCompleteTableRef>())
                {
                    this._completeTableRef = ((AstCompleteTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexId IndexId
        {
            get
            {
                return this._indexId;
            }
        }
        
        public virtual AstCompleteTableRef CompleteTableRef
        {
            get
            {
                return this._completeTableRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRelationalOrXmlOrSpatialIndex(this);
        }
        
        /// <summary>
        /// drop_relational_or_xml_or_spatial_index : 
        ///    index_id ON complete_table_ref 
        /// </summary>
        public static AstDropRelationalOrXmlOrSpatialIndex DropRelationalOrXmlOrSpatialIndex(AstIndexId indexId, AstCompleteTableRef completeTableRef)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(indexId);
            list.Add(completeTableRef);
            return new AstDropRelationalOrXmlOrSpatialIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_procedure
    /// 	 : DROP  proc_keyword  if_exists?  func_proc_name_schemas  SEMI?
    /// </summary>
    public partial class AstDropProcedure : AstDdlClause
    {
        
        private AstProcKeyword _procKeyword;
        
        private AstIfExists _ifExists;
        
        private AstFuncProcNameSchemas _funcProcNameSchemas;
        
        public AstDropProcedure(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcKeyword>())
                {
                    this._procKeyword = ((AstProcKeyword)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIfExists>())
                {
                    this._ifExists = ((AstIfExists)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this._funcProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public AstDropProcedure(Position p, AstProcKeyword procKeyword, AstIfExists ifExists, AstFuncProcNameSchemas funcProcNameSchemas) : 
                base(p)
        {
            this._procKeyword = procKeyword;
            this._ifExists = ifExists;
            this._funcProcNameSchemas = funcProcNameSchemas;
        }
        
        public AstDropProcedure(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcKeyword>())
                {
                    this._procKeyword = ((AstProcKeyword)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIfExists>())
                {
                    this._ifExists = ((AstIfExists)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this._funcProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProcKeyword ProcKeyword
        {
            get
            {
                return this._procKeyword;
            }
        }
        
        public virtual AstIfExists IfExists
        {
            get
            {
                return this._ifExists;
            }
        }
        
        public virtual AstFuncProcNameSchemas FuncProcNameSchemas
        {
            get
            {
                return this._funcProcNameSchemas;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropProcedure(this);
        }
        
        /// <summary>
        /// drop_procedure : 
        ///    DROP proc_keyword if_exists? func_proc_name_schemas SEMI? 
        /// </summary>
        public static AstDropProcedure DropProcedure(AstProcKeyword procKeyword, AstIfExists? ifExists, AstFuncProcNameSchemas funcProcNameSchemas)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(procKeyword);
            list.Add(ifExists);
            list.Add(funcProcNameSchemas);
            return new AstDropProcedure(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_dml_trigger
    /// 	 : DROP  TRIGGER  if_exists?  schema_trigger_refs  SEMI?
    /// </summary>
    public partial class AstDropDmlTrigger : AstDropTrigger
    {
        
        private AstIfExists _ifExists;
        
        private AstSchemaTriggerRefs _schemaTriggerRefs;
        
        public AstDropDmlTrigger(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists>())
                {
                    this._ifExists = ((AstIfExists)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaTriggerRefs>())
                {
                    this._schemaTriggerRefs = ((AstSchemaTriggerRefs)(enumerator.Current));
                }
            }
        }
        
        public AstDropDmlTrigger(Position p, AstIfExists ifExists, AstSchemaTriggerRefs schemaTriggerRefs) : 
                base(p)
        {
            this._ifExists = ifExists;
            this._schemaTriggerRefs = schemaTriggerRefs;
        }
        
        public AstDropDmlTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists>())
                {
                    this._ifExists = ((AstIfExists)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaTriggerRefs>())
                {
                    this._schemaTriggerRefs = ((AstSchemaTriggerRefs)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIfExists IfExists
        {
            get
            {
                return this._ifExists;
            }
        }
        
        public virtual AstSchemaTriggerRefs SchemaTriggerRefs
        {
            get
            {
                return this._schemaTriggerRefs;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDmlTrigger(this);
        }
        
        /// <summary>
        /// drop_dml_trigger : 
        ///    DROP TRIGGER if_exists? schema_trigger_refs SEMI? 
        /// </summary>
        public static AstDropDmlTrigger DropDmlTrigger(AstIfExists? ifExists, AstSchemaTriggerRefs schemaTriggerRefs)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(ifExists);
            list.Add(schemaTriggerRefs);
            return new AstDropDmlTrigger(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_ddl_trigger
    /// 	 : DROP  TRIGGER  if_exists?  schema_view_refs  ON  all_server_database  SEMI?
    /// </summary>
    public partial class AstDropDdlTrigger : AstDropTrigger
    {
        
        private AstIfExists _ifExists;
        
        private AstSchemaViewRefs _schemaViewRefs;
        
        private AstAllServerDatabase _allServerDatabase;
        
        public AstDropDdlTrigger(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists>())
                {
                    this._ifExists = ((AstIfExists)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaViewRefs>())
                {
                    this._schemaViewRefs = ((AstSchemaViewRefs)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAllServerDatabase>())
                {
                    this._allServerDatabase = ((AstAllServerDatabase)(enumerator.Current));
                }
            }
        }
        
        public AstDropDdlTrigger(Position p, AstIfExists ifExists, AstSchemaViewRefs schemaViewRefs, AstAllServerDatabase allServerDatabase) : 
                base(p)
        {
            this._ifExists = ifExists;
            this._schemaViewRefs = schemaViewRefs;
            this._allServerDatabase = allServerDatabase;
        }
        
        public AstDropDdlTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists>())
                {
                    this._ifExists = ((AstIfExists)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaViewRefs>())
                {
                    this._schemaViewRefs = ((AstSchemaViewRefs)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAllServerDatabase>())
                {
                    this._allServerDatabase = ((AstAllServerDatabase)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIfExists IfExists
        {
            get
            {
                return this._ifExists;
            }
        }
        
        public virtual AstSchemaViewRefs SchemaViewRefs
        {
            get
            {
                return this._schemaViewRefs;
            }
        }
        
        public virtual AstAllServerDatabase AllServerDatabase
        {
            get
            {
                return this._allServerDatabase;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDdlTrigger(this);
        }
        
        /// <summary>
        /// drop_ddl_trigger : 
        ///    DROP TRIGGER if_exists? schema_view_refs ON all_server_database SEMI? 
        /// </summary>
        public static AstDropDdlTrigger DropDdlTrigger(AstIfExists? ifExists, AstSchemaViewRefs schemaViewRefs, AstAllServerDatabase allServerDatabase)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(ifExists);
            list.Add(schemaViewRefs);
            list.Add(allServerDatabase);
            return new AstDropDdlTrigger(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_function
    /// 	 : DROP  FUNCTION  if_exists?  func_proc_name_schemas  SEMI?
    /// </summary>
    public partial class AstDropFunction : AstDdlClause
    {
        
        private AstIfExists _ifExists;
        
        private AstFuncProcNameSchemas _funcProcNameSchemas;
        
        public AstDropFunction(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists>())
                {
                    this._ifExists = ((AstIfExists)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this._funcProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public AstDropFunction(Position p, AstIfExists ifExists, AstFuncProcNameSchemas funcProcNameSchemas) : 
                base(p)
        {
            this._ifExists = ifExists;
            this._funcProcNameSchemas = funcProcNameSchemas;
        }
        
        public AstDropFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists>())
                {
                    this._ifExists = ((AstIfExists)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this._funcProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIfExists IfExists
        {
            get
            {
                return this._ifExists;
            }
        }
        
        public virtual AstFuncProcNameSchemas FuncProcNameSchemas
        {
            get
            {
                return this._funcProcNameSchemas;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFunction(this);
        }
        
        /// <summary>
        /// drop_function : 
        ///    DROP FUNCTION if_exists? func_proc_name_schemas SEMI? 
        /// </summary>
        public static AstDropFunction DropFunction(AstIfExists? ifExists, AstFuncProcNameSchemas funcProcNameSchemas)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(ifExists);
            list.Add(funcProcNameSchemas);
            return new AstDropFunction(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_table
    /// 	 : DROP  TABLE  if_exists?  table_names  SEMI?
    /// </summary>
    public partial class AstDropTable : AstDdlClause
    {
        
        private AstIfExists _ifExists;
        
        private AstTableNames _tableNames;
        
        public AstDropTable(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists>())
                {
                    this._ifExists = ((AstIfExists)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableNames>())
                {
                    this._tableNames = ((AstTableNames)(enumerator.Current));
                }
            }
        }
        
        public AstDropTable(Position p, AstIfExists ifExists, AstTableNames tableNames) : 
                base(p)
        {
            this._ifExists = ifExists;
            this._tableNames = tableNames;
        }
        
        public AstDropTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists>())
                {
                    this._ifExists = ((AstIfExists)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableNames>())
                {
                    this._tableNames = ((AstTableNames)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIfExists IfExists
        {
            get
            {
                return this._ifExists;
            }
        }
        
        public virtual AstTableNames TableNames
        {
            get
            {
                return this._tableNames;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropTable(this);
        }
        
        /// <summary>
        /// drop_table : 
        ///    DROP TABLE if_exists? table_names SEMI? 
        /// </summary>
        public static AstDropTable DropTable(AstIfExists? ifExists, AstTableNames tableNames)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(ifExists);
            list.Add(tableNames);
            return new AstDropTable(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_view
    /// 	 : DROP  VIEW  if_exists?  schema_view_refs  SEMI?
    /// </summary>
    public partial class AstDropView : AstDdlClause
    {
        
        private AstIfExists _ifExists;
        
        private AstSchemaViewRefs _schemaViewRefs;
        
        public AstDropView(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists>())
                {
                    this._ifExists = ((AstIfExists)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaViewRefs>())
                {
                    this._schemaViewRefs = ((AstSchemaViewRefs)(enumerator.Current));
                }
            }
        }
        
        public AstDropView(Position p, AstIfExists ifExists, AstSchemaViewRefs schemaViewRefs) : 
                base(p)
        {
            this._ifExists = ifExists;
            this._schemaViewRefs = schemaViewRefs;
        }
        
        public AstDropView(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists>())
                {
                    this._ifExists = ((AstIfExists)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaViewRefs>())
                {
                    this._schemaViewRefs = ((AstSchemaViewRefs)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIfExists IfExists
        {
            get
            {
                return this._ifExists;
            }
        }
        
        public virtual AstSchemaViewRefs SchemaViewRefs
        {
            get
            {
                return this._schemaViewRefs;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropView(this);
        }
        
        /// <summary>
        /// drop_view : 
        ///    DROP VIEW if_exists? schema_view_refs SEMI? 
        /// </summary>
        public static AstDropView DropView(AstIfExists? ifExists, AstSchemaViewRefs schemaViewRefs)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(ifExists);
            list.Add(schemaViewRefs);
            return new AstDropView(Position.Default, list);
        }
    }
    
    /// <summary>
    /// openquery
    /// 	 : OPENQUERY  LR_BRACKET  server_id  COMMA  query = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstOpenquery : AstRowsetFunctionLimited
    {
        
        private AstServerId _serverId;
        
        private AstStringtext _stringtext;
        
        public AstOpenquery(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstOpenquery(Position p, AstServerId serverId, AstStringtext stringtext) : 
                base(p)
        {
            this._serverId = serverId;
            this._stringtext = stringtext;
        }
        
        public AstOpenquery(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerId ServerId
        {
            get
            {
                return this._serverId;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenquery(this);
        }
        
        /// <summary>
        /// openquery : 
        ///    OPENQUERY ( server_id , query=stringtext ) 
        /// </summary>
        public static AstOpenquery Openquery(AstServerId serverId, AstStringtext query)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(serverId);
            list.Add(query);
            return new AstOpenquery(Position.Default, list);
        }
    }
    
    /// <summary>
    /// opendatasource
    /// 	 : OPENDATASOURCE  LR_BRACKET  provider = stringtext  COMMA  init = stringtext  RR_BRACKET  DOT  database_schema_table_ref
    /// </summary>
    public partial class AstOpendatasource : AstRowsetFunctionLimited
    {
        
        private AstStringtext _stringtext;
        
        private AstDatabaseSchemaTableRef _databaseSchemaTableRef;
        
        public AstOpendatasource(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstOpendatasource(Position p, AstStringtext stringtext, AstDatabaseSchemaTableRef databaseSchemaTableRef) : 
                base(p)
        {
            this._stringtext = stringtext;
            this._databaseSchemaTableRef = databaseSchemaTableRef;
        }
        
        public AstOpendatasource(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstDatabaseSchemaTableRef DatabaseSchemaTableRef
        {
            get
            {
                return this._databaseSchemaTableRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpendatasource(this);
        }
        
        /// <summary>
        /// opendatasource : 
        ///    OPENDATASOURCE ( provider=stringtext , init=stringtext ) . database_schema_table_ref 
        /// </summary>
        public static AstOpendatasource Opendatasource(AstStringtext provider, AstStringtext init, AstDatabaseSchemaTableRef databaseSchemaTableRef)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(provider);
            list.Add(init);
            list.Add(databaseSchemaTableRef);
            return new AstOpendatasource(Position.Default, list);
        }
    }
    
    /// <summary>
    /// backup_database
    /// 	 : BACKUP  DATABASE  (database_id)  (READ_WRITE_FILEGROUPS  group1 = file_group_list)?  group2 = file_group_list  backup_target?  backup_settings?
    /// </summary>
    public partial class AstBackupDatabase : AstBackupStatement
    {
        
        private AstDatabaseId _databaseId;
        
        private AstFileGroupList _fileGroupList;
        
        private AstBackupTarget _backupTarget;
        
        private AstBackupSettings _backupSettings;
        
        public AstBackupDatabase(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupList>())
                {
                    this._fileGroupList = ((AstFileGroupList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupTarget>())
                {
                    this._backupTarget = ((AstBackupTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupSettings>())
                {
                    this._backupSettings = ((AstBackupSettings)(enumerator.Current));
                }
            }
        }
        
        public AstBackupDatabase(Position p, AstDatabaseId databaseId, AstFileGroupList fileGroupList, AstBackupTarget backupTarget, AstBackupSettings backupSettings) : 
                base(p)
        {
            this._databaseId = databaseId;
            this._fileGroupList = fileGroupList;
            this._backupTarget = backupTarget;
            this._backupSettings = backupSettings;
        }
        
        public AstBackupDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupList>())
                {
                    this._fileGroupList = ((AstFileGroupList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupTarget>())
                {
                    this._backupTarget = ((AstBackupTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupSettings>())
                {
                    this._backupSettings = ((AstBackupSettings)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstFileGroupList FileGroupList
        {
            get
            {
                return this._fileGroupList;
            }
        }
        
        public virtual AstBackupTarget BackupTarget
        {
            get
            {
                return this._backupTarget;
            }
        }
        
        public virtual AstBackupSettings BackupSettings
        {
            get
            {
                return this._backupSettings;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupDatabase(this);
        }
        
        /// <summary>
        /// backup_database : 
        ///    BACKUP DATABASE database_id() READ_WRITE_FILEGROUPS group1=file_group_list group2=file_group_list backup_target? backup_settings? 
        /// </summary>
        public static AstBackupDatabase BackupDatabase(AstDatabaseId databaseId, AstFileGroupList group1, AstFileGroupList group2, AstBackupTarget? backupTarget, AstBackupSettings? backupSettings)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(databaseId);
            list.Add(group1);
            list.Add(group2);
            list.Add(backupTarget);
            list.Add(backupSettings);
            return new AstBackupDatabase(Position.Default, list);
        }
    }
    
    /// <summary>
    /// file_group_assign
    /// 	 : file_file_group  EQUAL  file_or_filegroup = stringtext
    /// </summary>
    public partial class AstFileGroupAssign : AstRule
    {
        
        private AstFileFileGroup _fileFileGroup;
        
        private AstStringtext _stringtext;
        
        public AstFileGroupAssign(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileFileGroup>())
                {
                    this._fileFileGroup = ((AstFileFileGroup)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstFileGroupAssign(Position p, AstFileFileGroup fileFileGroup, AstStringtext stringtext) : 
                base(p)
        {
            this._fileFileGroup = fileFileGroup;
            this._stringtext = stringtext;
        }
        
        public AstFileGroupAssign(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileFileGroup>())
                {
                    this._fileFileGroup = ((AstFileFileGroup)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFileFileGroup FileFileGroup
        {
            get
            {
                return this._fileFileGroup;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileGroupAssign(this);
        }
        
        /// <summary>
        /// file_group_assign : 
        ///    file_file_group EQUAL file_or_filegroup=stringtext 
        /// </summary>
        public static AstFileGroupAssign FileGroupAssign(AstFileFileGroup fileFileGroup, AstStringtext fileOrFilegroup)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fileFileGroup);
            list.Add(fileOrFilegroup);
            return new AstFileGroupAssign(Position.Default, list);
        }
    }
    
    /// <summary>
    /// backup_log
    /// 	 : BACKUP  LOG  database_id  backup_target?  backup_settings?
    /// </summary>
    public partial class AstBackupLog : AstBackupStatement
    {
        
        private AstDatabaseId _databaseId;
        
        private AstBackupTarget _backupTarget;
        
        private AstBackupSettings _backupSettings;
        
        public AstBackupLog(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupTarget>())
                {
                    this._backupTarget = ((AstBackupTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupSettings>())
                {
                    this._backupSettings = ((AstBackupSettings)(enumerator.Current));
                }
            }
        }
        
        public AstBackupLog(Position p, AstDatabaseId databaseId, AstBackupTarget backupTarget, AstBackupSettings backupSettings) : 
                base(p)
        {
            this._databaseId = databaseId;
            this._backupTarget = backupTarget;
            this._backupSettings = backupSettings;
        }
        
        public AstBackupLog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupTarget>())
                {
                    this._backupTarget = ((AstBackupTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupSettings>())
                {
                    this._backupSettings = ((AstBackupSettings)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstBackupTarget BackupTarget
        {
            get
            {
                return this._backupTarget;
            }
        }
        
        public virtual AstBackupSettings BackupSettings
        {
            get
            {
                return this._backupSettings;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupLog(this);
        }
        
        /// <summary>
        /// backup_log : 
        ///    BACKUP LOG database_id backup_target? backup_settings? 
        /// </summary>
        public static AstBackupLog BackupLog(AstDatabaseId databaseId, AstBackupTarget? backupTarget, AstBackupSettings? backupSettings)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(databaseId);
            list.Add(backupTarget);
            list.Add(backupSettings);
            return new AstBackupLog(Position.Default, list);
        }
    }
    
    /// <summary>
    /// backup_target
    /// 	 : backup_to  backup_to_mirror
    /// </summary>
    public partial class AstBackupTarget : AstRule
    {
        
        private AstBackupTo _backupTo;
        
        private AstBackupToMirror _backupToMirror;
        
        public AstBackupTarget(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBackupTo>())
                {
                    this._backupTo = ((AstBackupTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupToMirror>())
                {
                    this._backupToMirror = ((AstBackupToMirror)(enumerator.Current));
                }
            }
        }
        
        public AstBackupTarget(Position p, AstBackupTo backupTo, AstBackupToMirror backupToMirror) : 
                base(p)
        {
            this._backupTo = backupTo;
            this._backupToMirror = backupToMirror;
        }
        
        public AstBackupTarget(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBackupTo>())
                {
                    this._backupTo = ((AstBackupTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupToMirror>())
                {
                    this._backupToMirror = ((AstBackupToMirror)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBackupTo BackupTo
        {
            get
            {
                return this._backupTo;
            }
        }
        
        public virtual AstBackupToMirror BackupToMirror
        {
            get
            {
                return this._backupToMirror;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupTarget(this);
        }
        
        /// <summary>
        /// backup_target : 
        ///    backup_to backup_to_mirror 
        /// </summary>
        public static AstBackupTarget BackupTarget(AstBackupTo backupTo, AstBackupToMirror backupToMirror)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(backupTo);
            list.Add(backupToMirror);
            return new AstBackupTarget(Position.Default, list);
        }
    }
    
    /// <summary>
    /// disk_tape_url_value
    /// 	 : disk_tape_url  EQUAL  string_id
    /// </summary>
    public partial class AstDiskTapeUrlValue : AstRule
    {
        
        private AstDiskTapeUrl _diskTapeUrl;
        
        private AstStringId _stringId;
        
        public AstDiskTapeUrlValue(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDiskTapeUrl>())
                {
                    this._diskTapeUrl = ((AstDiskTapeUrl)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringId>())
                {
                    this._stringId = ((AstStringId)(enumerator.Current));
                }
            }
        }
        
        public AstDiskTapeUrlValue(Position p, AstDiskTapeUrl diskTapeUrl, AstStringId stringId) : 
                base(p)
        {
            this._diskTapeUrl = diskTapeUrl;
            this._stringId = stringId;
        }
        
        public AstDiskTapeUrlValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDiskTapeUrl>())
                {
                    this._diskTapeUrl = ((AstDiskTapeUrl)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringId>())
                {
                    this._stringId = ((AstStringId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDiskTapeUrl DiskTapeUrl
        {
            get
            {
                return this._diskTapeUrl;
            }
        }
        
        public virtual AstStringId StringId
        {
            get
            {
                return this._stringId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDiskTapeUrlValue(this);
        }
        
        /// <summary>
        /// disk_tape_url_value : 
        ///    disk_tape_url EQUAL string_id 
        /// </summary>
        public static AstDiskTapeUrlValue DiskTapeUrlValue(AstDiskTapeUrl diskTapeUrl, AstStringId stringId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(diskTapeUrl);
            list.Add(stringId);
            return new AstDiskTapeUrlValue(Position.Default, list);
        }
    }
    
    /// <summary>
    /// backup_certificate
    /// 	 : BACKUP  CERTIFICATE  certificate_id  TO  FILE  EQUAL  cert_file = stringtext  (WITH  PRIVATE  KEY  LR_BRACKET  backup_certificate_private_keys  RR_BRACKET)?
    /// </summary>
    public partial class AstBackupCertificate : AstBackupStatement
    {
        
        private AstCertificateId _certificateId;
        
        private AstStringtext _stringtext;
        
        private AstBackupCertificatePrivateKeys _backupCertificatePrivateKeys;
        
        public AstBackupCertificate(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupCertificatePrivateKeys>())
                {
                    this._backupCertificatePrivateKeys = ((AstBackupCertificatePrivateKeys)(enumerator.Current));
                }
            }
        }
        
        public AstBackupCertificate(Position p, AstCertificateId certificateId, AstStringtext stringtext, AstBackupCertificatePrivateKeys backupCertificatePrivateKeys) : 
                base(p)
        {
            this._certificateId = certificateId;
            this._stringtext = stringtext;
            this._backupCertificatePrivateKeys = backupCertificatePrivateKeys;
        }
        
        public AstBackupCertificate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupCertificatePrivateKeys>())
                {
                    this._backupCertificatePrivateKeys = ((AstBackupCertificatePrivateKeys)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateId CertificateId
        {
            get
            {
                return this._certificateId;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstBackupCertificatePrivateKeys BackupCertificatePrivateKeys
        {
            get
            {
                return this._backupCertificatePrivateKeys;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupCertificate(this);
        }
        
        /// <summary>
        /// backup_certificate : 
        ///    BACKUP CERTIFICATE certificate_id TO FILE EQUAL cert_file=stringtext WITH PRIVATE KEY ( backup_certificate_private_keys ) 
        /// </summary>
        public static AstBackupCertificate BackupCertificate(AstCertificateId certificateId, AstStringtext certFile, AstBackupCertificatePrivateKeys backupCertificatePrivateKeys)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(certificateId);
            list.Add(certFile);
            list.Add(backupCertificatePrivateKeys);
            return new AstBackupCertificate(Position.Default, list);
        }
    }
    
    /// <summary>
    /// backup_master_key
    /// 	 : BACKUP  MASTER  KEY  TO  FILE  EQUAL  master_key_backup_file = stringtext  encryption_by_pwd
    /// </summary>
    public partial class AstBackupMasterKey : AstBackupStatement
    {
        
        private AstStringtext _stringtext;
        
        private AstEncryptionByPwd _encryptionByPwd;
        
        public AstBackupMasterKey(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
            }
        }
        
        public AstBackupMasterKey(Position p, AstStringtext stringtext, AstEncryptionByPwd encryptionByPwd) : 
                base(p)
        {
            this._stringtext = stringtext;
            this._encryptionByPwd = encryptionByPwd;
        }
        
        public AstBackupMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstEncryptionByPwd EncryptionByPwd
        {
            get
            {
                return this._encryptionByPwd;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupMasterKey(this);
        }
        
        /// <summary>
        /// backup_master_key : 
        ///    BACKUP MASTER KEY TO FILE EQUAL master_key_backup_file=stringtext encryption_by_pwd 
        /// </summary>
        public static AstBackupMasterKey BackupMasterKey(AstStringtext masterKeyBackupFile, AstEncryptionByPwd encryptionByPwd)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(masterKeyBackupFile);
            list.Add(encryptionByPwd);
            return new AstBackupMasterKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// backup_service_master_key
    /// 	 : BACKUP  SERVICE  MASTER  KEY  TO  FILE  EQUAL  service_master_key_backup_file = stringtext  encryption_by_pwd
    /// </summary>
    public partial class AstBackupServiceMasterKey : AstBackupStatement
    {
        
        private AstStringtext _stringtext;
        
        private AstEncryptionByPwd _encryptionByPwd;
        
        public AstBackupServiceMasterKey(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
            }
        }
        
        public AstBackupServiceMasterKey(Position p, AstStringtext stringtext, AstEncryptionByPwd encryptionByPwd) : 
                base(p)
        {
            this._stringtext = stringtext;
            this._encryptionByPwd = encryptionByPwd;
        }
        
        public AstBackupServiceMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstEncryptionByPwd EncryptionByPwd
        {
            get
            {
                return this._encryptionByPwd;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupServiceMasterKey(this);
        }
        
        /// <summary>
        /// backup_service_master_key : 
        ///    BACKUP SERVICE MASTER KEY TO FILE EQUAL service_master_key_backup_file=stringtext encryption_by_pwd 
        /// </summary>
        public static AstBackupServiceMasterKey BackupServiceMasterKey(AstStringtext serviceMasterKeyBackupFile, AstEncryptionByPwd encryptionByPwd)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(serviceMasterKeyBackupFile);
            list.Add(encryptionByPwd);
            return new AstBackupServiceMasterKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// execute_statement
    /// 	 : EXECUTE  execute_body  SEMI?
    /// </summary>
    public partial class AstExecuteStatement : AstAnotherStatement
    {
        
        private AstExecuteBody _executeBody;
        
        public AstExecuteStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteBody>())
                {
                    this._executeBody = ((AstExecuteBody)(enumerator.Current));
                }
            }
        }
        
        public AstExecuteStatement(Position p, AstExecuteBody executeBody) : 
                base(p)
        {
            this._executeBody = executeBody;
        }
        
        public AstExecuteStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteBody>())
                {
                    this._executeBody = ((AstExecuteBody)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExecuteBody ExecuteBody
        {
            get
            {
                return this._executeBody;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatement(this);
        }
        
        /// <summary>
        /// execute_statement : 
        ///    EXECUTE execute_body SEMI? 
        /// </summary>
        public static AstExecuteStatement ExecuteStatement(AstExecuteBody executeBody)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(executeBody);
            return new AstExecuteStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// execute_body_batch
    /// 	 : func_proc_name_server_database_schema  execute_statement_args?  SEMI?
    /// </summary>
    public partial class AstExecuteBodyBatch : AstRule
    {
        
        private AstFuncProcNameServerDatabaseSchema _funcProcNameServerDatabaseSchema;
        
        private AstExecuteStatementArgs _executeStatementArgs;
        
        public AstExecuteBodyBatch(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameServerDatabaseSchema>())
                {
                    this._funcProcNameServerDatabaseSchema = ((AstFuncProcNameServerDatabaseSchema)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExecuteStatementArgs>())
                {
                    this._executeStatementArgs = ((AstExecuteStatementArgs)(enumerator.Current));
                }
            }
        }
        
        public AstExecuteBodyBatch(Position p, AstFuncProcNameServerDatabaseSchema funcProcNameServerDatabaseSchema, AstExecuteStatementArgs executeStatementArgs) : 
                base(p)
        {
            this._funcProcNameServerDatabaseSchema = funcProcNameServerDatabaseSchema;
            this._executeStatementArgs = executeStatementArgs;
        }
        
        public AstExecuteBodyBatch(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameServerDatabaseSchema>())
                {
                    this._funcProcNameServerDatabaseSchema = ((AstFuncProcNameServerDatabaseSchema)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExecuteStatementArgs>())
                {
                    this._executeStatementArgs = ((AstExecuteStatementArgs)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFuncProcNameServerDatabaseSchema FuncProcNameServerDatabaseSchema
        {
            get
            {
                return this._funcProcNameServerDatabaseSchema;
            }
        }
        
        public virtual AstExecuteStatementArgs ExecuteStatementArgs
        {
            get
            {
                return this._executeStatementArgs;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteBodyBatch(this);
        }
        
        /// <summary>
        /// execute_body_batch : 
        ///    func_proc_name_server_database_schema execute_statement_args? SEMI? 
        /// </summary>
        public static AstExecuteBodyBatch ExecuteBodyBatch(AstFuncProcNameServerDatabaseSchema funcProcNameServerDatabaseSchema, AstExecuteStatementArgs? executeStatementArgs)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(funcProcNameServerDatabaseSchema);
            list.Add(executeStatementArgs);
            return new AstExecuteBodyBatch(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_certificate
    /// 	 : CREATE  CERTIFICATE  certificate_id  (AUTHORIZATION  user_id)?  (FROM  existing_keys | generate_new_keys)  (ACTIVE  FOR  BEGIN  DIALOG  EQUAL  on_off)?
    /// </summary>
    public partial class AstCreateCertificate : AstRule
    {
        
        private AstCertificateId _certificateId;
        
        private AstUserId _userId;
        
        private AstExistingKeys _existingKeys;
        
        private AstGenerateNewKeys _generateNewKeys;
        
        private AstOnOff _onOff;
        
        public AstCreateCertificate(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExistingKeys>())
                {
                    this._existingKeys = ((AstExistingKeys)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGenerateNewKeys>())
                {
                    this._generateNewKeys = ((AstGenerateNewKeys)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstCreateCertificate(Position p, AstCertificateId certificateId, AstUserId userId, AstExistingKeys existingKeys, AstGenerateNewKeys generateNewKeys, AstOnOff onOff) : 
                base(p)
        {
            this._certificateId = certificateId;
            this._userId = userId;
            this._existingKeys = existingKeys;
            this._generateNewKeys = generateNewKeys;
            this._onOff = onOff;
        }
        
        public AstCreateCertificate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExistingKeys>())
                {
                    this._existingKeys = ((AstExistingKeys)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGenerateNewKeys>())
                {
                    this._generateNewKeys = ((AstGenerateNewKeys)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateId CertificateId
        {
            get
            {
                return this._certificateId;
            }
        }
        
        public virtual AstUserId UserId
        {
            get
            {
                return this._userId;
            }
        }
        
        public virtual AstExistingKeys ExistingKeys
        {
            get
            {
                return this._existingKeys;
            }
        }
        
        public virtual AstGenerateNewKeys GenerateNewKeys
        {
            get
            {
                return this._generateNewKeys;
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateCertificate(this);
        }
        
        /// <summary>
        /// create_certificate : 
        ///    CREATE CERTIFICATE certificate_id AUTHORIZATION user_id FROM existing_keys ACTIVE FOR BEGIN DIALOG EQUAL on_off 
        /// </summary>
        public static AstCreateCertificate CreateCertificate(AstCertificateId certificateId, AstUserId userId, AstExistingKeys existingKeys, AstOnOff onOff)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(certificateId);
            list.Add(userId);
            list.Add(existingKeys);
            list.Add(onOff);
            return new AstCreateCertificate(Position.Default, list);
        }
        
        /// <summary>
        /// create_certificate : 
        ///    CREATE CERTIFICATE certificate_id AUTHORIZATION user_id generate_new_keys ACTIVE FOR BEGIN DIALOG EQUAL on_off 
        /// </summary>
        public static AstCreateCertificate CreateCertificate(AstCertificateId certificateId, AstUserId userId, AstGenerateNewKeys generateNewKeys, AstOnOff onOff)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(certificateId);
            list.Add(userId);
            list.Add(generateNewKeys);
            list.Add(onOff);
            return new AstCreateCertificate(Position.Default, list);
        }
    }
    
    /// <summary>
    /// generate_new_keys
    /// 	 : encryption_by_pwd?  WITH  SUBJECT  EQUAL  certificate_subject_name = stringtext  (COMMA  date_options)?
    /// </summary>
    public partial class AstGenerateNewKeys : AstRule
    {
        
        private AstEncryptionByPwd _encryptionByPwd;
        
        private AstStringtext _stringtext;
        
        private AstDateOptions _dateOptions;
        
        public AstGenerateNewKeys(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDateOptions>())
                {
                    this._dateOptions = ((AstDateOptions)(enumerator.Current));
                }
            }
        }
        
        public AstGenerateNewKeys(Position p, AstEncryptionByPwd encryptionByPwd, AstStringtext stringtext, AstDateOptions dateOptions) : 
                base(p)
        {
            this._encryptionByPwd = encryptionByPwd;
            this._stringtext = stringtext;
            this._dateOptions = dateOptions;
        }
        
        public AstGenerateNewKeys(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDateOptions>())
                {
                    this._dateOptions = ((AstDateOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEncryptionByPwd EncryptionByPwd
        {
            get
            {
                return this._encryptionByPwd;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstDateOptions DateOptions
        {
            get
            {
                return this._dateOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGenerateNewKeys(this);
        }
        
        /// <summary>
        /// generate_new_keys : 
        ///    encryption_by_pwd? WITH SUBJECT EQUAL certificate_subject_name=stringtext , date_options 
        /// </summary>
        public static AstGenerateNewKeys GenerateNewKeys(AstEncryptionByPwd? encryptionByPwd, AstStringtext certificateSubjectName, AstDateOptions dateOptions)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(encryptionByPwd);
            list.Add(certificateSubjectName);
            list.Add(dateOptions);
            return new AstGenerateNewKeys(Position.Default, list);
        }
    }
    
    /// <summary>
    /// date_option
    /// 	 : start_date_expiry_date  EQUAL  stringtext
    /// </summary>
    public partial class AstDateOption : AstRule
    {
        
        private AstStartDateExpiryDate _startDateExpiryDate;
        
        private AstStringtext _stringtext;
        
        public AstDateOption(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStartDateExpiryDate>())
                {
                    this._startDateExpiryDate = ((AstStartDateExpiryDate)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstDateOption(Position p, AstStartDateExpiryDate startDateExpiryDate, AstStringtext stringtext) : 
                base(p)
        {
            this._startDateExpiryDate = startDateExpiryDate;
            this._stringtext = stringtext;
        }
        
        public AstDateOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStartDateExpiryDate>())
                {
                    this._startDateExpiryDate = ((AstStartDateExpiryDate)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStartDateExpiryDate StartDateExpiryDate
        {
            get
            {
                return this._startDateExpiryDate;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDateOption(this);
        }
        
        /// <summary>
        /// date_option : 
        ///    start_date_expiry_date EQUAL stringtext 
        /// </summary>
        public static AstDateOption DateOption(AstStartDateExpiryDate startDateExpiryDate, AstStringtext stringtext)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(startDateExpiryDate);
            list.Add(stringtext);
            return new AstDateOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// use_statement
    /// 	 : USE  database_id  SEMI?
    /// </summary>
    public partial class AstUseStatement : AstAnotherStatement
    {
        
        private AstDatabaseId _databaseId;
        
        public AstUseStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
            }
        }
        
        public AstUseStatement(Position p, AstDatabaseId databaseId) : 
                base(p)
        {
            this._databaseId = databaseId;
        }
        
        public AstUseStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUseStatement(this);
        }
        
        /// <summary>
        /// use_statement : 
        ///    USE database_id SEMI? 
        /// </summary>
        public static AstUseStatement UseStatement(AstDatabaseId databaseId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(databaseId);
            return new AstUseStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// execute_clause
    /// 	 : EXECUTE  AS  execute_clause_mode
    /// </summary>
    public partial class AstExecuteClause : AstRule
    {
        
        private AstExecuteClauseMode _executeClauseMode;
        
        public AstExecuteClause(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteClauseMode>())
                {
                    this._executeClauseMode = ((AstExecuteClauseMode)(enumerator.Current));
                }
            }
        }
        
        public AstExecuteClause(Position p, AstExecuteClauseMode executeClauseMode) : 
                base(p)
        {
            this._executeClauseMode = executeClauseMode;
        }
        
        public AstExecuteClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteClauseMode>())
                {
                    this._executeClauseMode = ((AstExecuteClauseMode)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExecuteClauseMode ExecuteClauseMode
        {
            get
            {
                return this._executeClauseMode;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteClause(this);
        }
        
        /// <summary>
        /// execute_clause : 
        ///    EXECUTE AS execute_clause_mode 
        /// </summary>
        public static AstExecuteClause ExecuteClause(AstExecuteClauseMode executeClauseMode)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(executeClauseMode);
            return new AstExecuteClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// declare_local
    /// 	 : local_id  AS?  data_type  (EQUAL  expression)?
    /// </summary>
    public partial class AstDeclareLocal : AstRule
    {
        
        private AstLocalId _localId;
        
        private AstDataType _dataType;
        
        private AstExpression _expression;
        
        public AstDeclareLocal(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstDeclareLocal(Position p, AstLocalId localId, AstDataType dataType, AstExpression expression) : 
                base(p)
        {
            this._localId = localId;
            this._dataType = dataType;
            this._expression = expression;
        }
        
        public AstDeclareLocal(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalId LocalId
        {
            get
            {
                return this._localId;
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareLocal(this);
        }
        
        /// <summary>
        /// declare_local : 
        ///    local_id AS? data_type EQUAL expression 
        /// </summary>
        public static AstDeclareLocal DeclareLocal(AstLocalId localId, AstDataType dataType, AstExpression expression)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(localId);
            list.Add(dataType);
            list.Add(expression);
            return new AstDeclareLocal(Position.Default, list);
        }
    }
    
    /// <summary>
    /// table_type_definition
    /// 	 : TABLE  LR_BRACKET  column_def_table_constraints  table_type_indices?  RR_BRACKET
    /// </summary>
    public partial class AstTableTypeDefinition : AstRule
    {
        
        private AstColumnDefTableConstraints _columnDefTableConstraints;
        
        private AstTableTypeIndices _tableTypeIndices;
        
        public AstTableTypeDefinition(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableTypeIndices>())
                {
                    this._tableTypeIndices = ((AstTableTypeIndices)(enumerator.Current));
                }
            }
        }
        
        public AstTableTypeDefinition(Position p, AstColumnDefTableConstraints columnDefTableConstraints, AstTableTypeIndices tableTypeIndices) : 
                base(p)
        {
            this._columnDefTableConstraints = columnDefTableConstraints;
            this._tableTypeIndices = tableTypeIndices;
        }
        
        public AstTableTypeDefinition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableTypeIndices>())
                {
                    this._tableTypeIndices = ((AstTableTypeIndices)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnDefTableConstraints ColumnDefTableConstraints
        {
            get
            {
                return this._columnDefTableConstraints;
            }
        }
        
        public virtual AstTableTypeIndices TableTypeIndices
        {
            get
            {
                return this._tableTypeIndices;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableTypeDefinition(this);
        }
        
        /// <summary>
        /// table_type_definition : 
        ///    TABLE ( column_def_table_constraints table_type_indices? ) 
        /// </summary>
        public static AstTableTypeDefinition TableTypeDefinition(AstColumnDefTableConstraints columnDefTableConstraints, AstTableTypeIndices? tableTypeIndices)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(columnDefTableConstraints);
            list.Add(tableTypeIndices);
            return new AstTableTypeDefinition(Position.Default, list);
        }
    }
    
    /// <summary>
    /// xml_type_definition
    /// 	 : XML  LR_BRACKET  content_document?  xml_schema_collection  RR_BRACKET
    /// </summary>
    public partial class AstXmlTypeDefinition : AstRule
    {
        
        private AstContentDocument _contentDocument;
        
        private AstXmlSchemaCollection _xmlSchemaCollection;
        
        public AstXmlTypeDefinition(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContentDocument>())
                {
                    this._contentDocument = ((AstContentDocument)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstXmlSchemaCollection>())
                {
                    this._xmlSchemaCollection = ((AstXmlSchemaCollection)(enumerator.Current));
                }
            }
        }
        
        public AstXmlTypeDefinition(Position p, AstContentDocument contentDocument, AstXmlSchemaCollection xmlSchemaCollection) : 
                base(p)
        {
            this._contentDocument = contentDocument;
            this._xmlSchemaCollection = xmlSchemaCollection;
        }
        
        public AstXmlTypeDefinition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContentDocument>())
                {
                    this._contentDocument = ((AstContentDocument)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstXmlSchemaCollection>())
                {
                    this._xmlSchemaCollection = ((AstXmlSchemaCollection)(enumerator.Current));
                }
            }
        }
        
        public virtual AstContentDocument ContentDocument
        {
            get
            {
                return this._contentDocument;
            }
        }
        
        public virtual AstXmlSchemaCollection XmlSchemaCollection
        {
            get
            {
                return this._xmlSchemaCollection;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlTypeDefinition(this);
        }
        
        /// <summary>
        /// xml_type_definition : 
        ///    XML ( content_document? xml_schema_collection ) 
        /// </summary>
        public static AstXmlTypeDefinition XmlTypeDefinition(AstContentDocument? contentDocument, AstXmlSchemaCollection xmlSchemaCollection)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(contentDocument);
            list.Add(xmlSchemaCollection);
            return new AstXmlTypeDefinition(Position.Default, list);
        }
    }
    
    /// <summary>
    /// column_definition
    /// 	 : column_id  (data_type | AS  expression  PERSISTED?)  column_definition_elements?  column_index?
    /// </summary>
    public partial class AstColumnDefinition : AstRule
    {
        
        private AstColumnId _columnId;
        
        private AstDataType _dataType;
        
        private AstExpression _expression;
        
        private AstColumnDefinitionElements _columnDefinitionElements;
        
        private AstColumnIndex _columnIndex;
        
        public AstColumnDefinition(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefinitionElements>())
                {
                    this._columnDefinitionElements = ((AstColumnDefinitionElements)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnIndex>())
                {
                    this._columnIndex = ((AstColumnIndex)(enumerator.Current));
                }
            }
        }
        
        public AstColumnDefinition(Position p, AstColumnId columnId, AstDataType dataType, AstExpression expression, AstColumnDefinitionElements columnDefinitionElements, AstColumnIndex columnIndex) : 
                base(p)
        {
            this._columnId = columnId;
            this._dataType = dataType;
            this._expression = expression;
            this._columnDefinitionElements = columnDefinitionElements;
            this._columnIndex = columnIndex;
        }
        
        public AstColumnDefinition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefinitionElements>())
                {
                    this._columnDefinitionElements = ((AstColumnDefinitionElements)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnIndex>())
                {
                    this._columnIndex = ((AstColumnIndex)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnId ColumnId
        {
            get
            {
                return this._columnId;
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstColumnDefinitionElements ColumnDefinitionElements
        {
            get
            {
                return this._columnDefinitionElements;
            }
        }
        
        public virtual AstColumnIndex ColumnIndex
        {
            get
            {
                return this._columnIndex;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDefinition(this);
        }
        
        /// <summary>
        /// column_definition : 
        ///    column_id data_type column_definition_elements? column_index? 
        /// </summary>
        public static AstColumnDefinition ColumnDefinition(AstColumnId columnId, AstDataType dataType, AstColumnDefinitionElements? columnDefinitionElements, AstColumnIndex? columnIndex)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(columnId);
            list.Add(dataType);
            list.Add(columnDefinitionElements);
            list.Add(columnIndex);
            return new AstColumnDefinition(Position.Default, list);
        }
        
        /// <summary>
        /// column_definition : 
        ///    column_id AS expression PERSISTED? column_definition_elements? column_index? 
        /// </summary>
        public static AstColumnDefinition ColumnDefinition(AstColumnId columnId, AstExpression expression, AstColumnDefinitionElements? columnDefinitionElements, AstColumnIndex? columnIndex)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(columnId);
            list.Add(expression);
            list.Add(columnDefinitionElements);
            list.Add(columnIndex);
            return new AstColumnDefinition(Position.Default, list);
        }
    }
    
    /// <summary>
    /// column_modifier
    /// 	 : id_  add_drop  (column_modifier_enum | MASKED  (WITH  (FUNCTION  EQUAL  stringtext | LR_BRACKET  FUNCTION  EQUAL  stringtext  RR_BRACKET))?)
    /// </summary>
    public partial class AstColumnModifier : AstRule
    {
        
        private AstId _id;
        
        private AstAddDrop _addDrop;
        
        private AstColumnModifierEnum _columnModifierEnum;
        
        private AstStringtext _stringtext;
        
        public AstColumnModifier(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnModifierEnum>())
                {
                    this._columnModifierEnum = ((AstColumnModifierEnum)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstColumnModifier(Position p, AstId id, AstAddDrop addDrop, AstColumnModifierEnum columnModifierEnum, AstStringtext stringtext) : 
                base(p)
        {
            this._id = id;
            this._addDrop = addDrop;
            this._columnModifierEnum = columnModifierEnum;
            this._stringtext = stringtext;
        }
        
        public AstColumnModifier(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnModifierEnum>())
                {
                    this._columnModifierEnum = ((AstColumnModifierEnum)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
        }
        
        public virtual AstColumnModifierEnum ColumnModifierEnum
        {
            get
            {
                return this._columnModifierEnum;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnModifier(this);
        }
        
        /// <summary>
        /// column_modifier : 
        ///    id_ add_drop column_modifier_enum 
        /// </summary>
        public static AstColumnModifier ColumnModifier(AstId id, AstAddDrop addDrop, AstColumnModifierEnum columnModifierEnum)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(id);
            list.Add(addDrop);
            list.Add(columnModifierEnum);
            return new AstColumnModifier(Position.Default, list);
        }
        
        /// <summary>
        /// column_modifier : 
        ///    id_ add_drop MASKED WITH FUNCTION EQUAL stringtext 
        /// </summary>
        public static AstColumnModifier ColumnModifier(AstId id, AstAddDrop addDrop, AstStringtext stringtext)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(id);
            list.Add(addDrop);
            list.Add(stringtext);
            return new AstColumnModifier(Position.Default, list);
        }
    }
    
    /// <summary>
    /// materialized_column_definition
    /// 	 : id_  compute_as  expression  materialized_mode?
    /// </summary>
    public partial class AstMaterializedColumnDefinition : AstRule
    {
        
        private AstId _id;
        
        private AstComputeAs _computeAs;
        
        private AstExpression _expression;
        
        private AstMaterializedMode _materializedMode;
        
        public AstMaterializedColumnDefinition(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstComputeAs>())
                {
                    this._computeAs = ((AstComputeAs)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMaterializedMode>())
                {
                    this._materializedMode = ((AstMaterializedMode)(enumerator.Current));
                }
            }
        }
        
        public AstMaterializedColumnDefinition(Position p, AstId id, AstComputeAs computeAs, AstExpression expression, AstMaterializedMode materializedMode) : 
                base(p)
        {
            this._id = id;
            this._computeAs = computeAs;
            this._expression = expression;
            this._materializedMode = materializedMode;
        }
        
        public AstMaterializedColumnDefinition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstComputeAs>())
                {
                    this._computeAs = ((AstComputeAs)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMaterializedMode>())
                {
                    this._materializedMode = ((AstMaterializedMode)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstComputeAs ComputeAs
        {
            get
            {
                return this._computeAs;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstMaterializedMode MaterializedMode
        {
            get
            {
                return this._materializedMode;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMaterializedColumnDefinition(this);
        }
        
        /// <summary>
        /// materialized_column_definition : 
        ///    id_ compute_as expression materialized_mode? 
        /// </summary>
        public static AstMaterializedColumnDefinition MaterializedColumnDefinition(AstId id, AstComputeAs computeAs, AstExpression expression, AstMaterializedMode? materializedMode)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(id);
            list.Add(computeAs);
            list.Add(expression);
            list.Add(materializedMode);
            return new AstMaterializedColumnDefinition(Position.Default, list);
        }
    }
    
    /// <summary>
    /// column_index
    /// 	 : INDEX  index_id?  create_table_index_options?  on_partition_or_filegroup?  (FILESTREAM_ON  (filestream_filegroup_or_partition_schema_id | NULL_DOUBLE_QUOTE))?
    /// </summary>
    public partial class AstColumnIndex : AstRule
    {
        
        private AstIndexId _indexId;
        
        private AstCreateTableIndexOptions _createTableIndexOptions;
        
        private AstOnPartitionOrFilegroup _onPartitionOrFilegroup;
        
        private AstFilestreamFilegroupOrPartitionSchemaId _filestreamFilegroupOrPartitionSchemaId;
        
        public AstColumnIndex(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateTableIndexOptions>())
                {
                    this._createTableIndexOptions = ((AstCreateTableIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup>())
                {
                    this._onPartitionOrFilegroup = ((AstOnPartitionOrFilegroup)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilestreamFilegroupOrPartitionSchemaId>())
                {
                    this._filestreamFilegroupOrPartitionSchemaId = ((AstFilestreamFilegroupOrPartitionSchemaId)(enumerator.Current));
                }
            }
        }
        
        public AstColumnIndex(Position p, AstIndexId indexId, AstCreateTableIndexOptions createTableIndexOptions, AstOnPartitionOrFilegroup onPartitionOrFilegroup, AstFilestreamFilegroupOrPartitionSchemaId filestreamFilegroupOrPartitionSchemaId) : 
                base(p)
        {
            this._indexId = indexId;
            this._createTableIndexOptions = createTableIndexOptions;
            this._onPartitionOrFilegroup = onPartitionOrFilegroup;
            this._filestreamFilegroupOrPartitionSchemaId = filestreamFilegroupOrPartitionSchemaId;
        }
        
        public AstColumnIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateTableIndexOptions>())
                {
                    this._createTableIndexOptions = ((AstCreateTableIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup>())
                {
                    this._onPartitionOrFilegroup = ((AstOnPartitionOrFilegroup)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilestreamFilegroupOrPartitionSchemaId>())
                {
                    this._filestreamFilegroupOrPartitionSchemaId = ((AstFilestreamFilegroupOrPartitionSchemaId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexId IndexId
        {
            get
            {
                return this._indexId;
            }
        }
        
        public virtual AstCreateTableIndexOptions CreateTableIndexOptions
        {
            get
            {
                return this._createTableIndexOptions;
            }
        }
        
        public virtual AstOnPartitionOrFilegroup OnPartitionOrFilegroup
        {
            get
            {
                return this._onPartitionOrFilegroup;
            }
        }
        
        public virtual AstFilestreamFilegroupOrPartitionSchemaId FilestreamFilegroupOrPartitionSchemaId
        {
            get
            {
                return this._filestreamFilegroupOrPartitionSchemaId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnIndex(this);
        }
        
        /// <summary>
        /// column_index : 
        ///    INDEX index_id? create_table_index_options? on_partition_or_filegroup? FILESTREAM_ON filestream_filegroup_or_partition_schema_id 
        /// </summary>
        public static AstColumnIndex ColumnIndex(AstIndexId? indexId, AstCreateTableIndexOptions? createTableIndexOptions, AstOnPartitionOrFilegroup? onPartitionOrFilegroup, AstFilestreamFilegroupOrPartitionSchemaId filestreamFilegroupOrPartitionSchemaId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(indexId);
            list.Add(createTableIndexOptions);
            list.Add(onPartitionOrFilegroup);
            list.Add(filestreamFilegroupOrPartitionSchemaId);
            return new AstColumnIndex(Position.Default, list);
        }
        
        /// <summary>
        /// column_index : 
        ///    INDEX index_id? create_table_index_options? on_partition_or_filegroup? FILESTREAM_ON NULL_DOUBLE_QUOTE 
        /// </summary>
        public static AstColumnIndex ColumnIndex(AstIndexId? indexId, AstCreateTableIndexOptions? createTableIndexOptions, AstOnPartitionOrFilegroup? onPartitionOrFilegroup)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(indexId);
            list.Add(createTableIndexOptions);
            list.Add(onPartitionOrFilegroup);
            return new AstColumnIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// primary_key_options
    /// 	 : (WITH  FILLFACTOR  EQUAL  decimal)?  alter_table_index_options?  on_partition_or_filegroup?
    /// </summary>
    public partial class AstPrimaryKeyOptions : AstRule
    {
        
        private AstDecimal _decimal;
        
        private AstAlterTableIndexOptions _alterTableIndexOptions;
        
        private AstOnPartitionOrFilegroup _onPartitionOrFilegroup;
        
        public AstPrimaryKeyOptions(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterTableIndexOptions>())
                {
                    this._alterTableIndexOptions = ((AstAlterTableIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup>())
                {
                    this._onPartitionOrFilegroup = ((AstOnPartitionOrFilegroup)(enumerator.Current));
                }
            }
        }
        
        public AstPrimaryKeyOptions(Position p, AstDecimal @decimal, AstAlterTableIndexOptions alterTableIndexOptions, AstOnPartitionOrFilegroup onPartitionOrFilegroup) : 
                base(p)
        {
            this._decimal = @decimal;
            this._alterTableIndexOptions = alterTableIndexOptions;
            this._onPartitionOrFilegroup = onPartitionOrFilegroup;
        }
        
        public AstPrimaryKeyOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterTableIndexOptions>())
                {
                    this._alterTableIndexOptions = ((AstAlterTableIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup>())
                {
                    this._onPartitionOrFilegroup = ((AstOnPartitionOrFilegroup)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstAlterTableIndexOptions AlterTableIndexOptions
        {
            get
            {
                return this._alterTableIndexOptions;
            }
        }
        
        public virtual AstOnPartitionOrFilegroup OnPartitionOrFilegroup
        {
            get
            {
                return this._onPartitionOrFilegroup;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrimaryKeyOptions(this);
        }
        
        /// <summary>
        /// primary_key_options : 
        ///    WITH FILLFACTOR EQUAL decimal alter_table_index_options? on_partition_or_filegroup? 
        /// </summary>
        public static AstPrimaryKeyOptions PrimaryKeyOptions(AstDecimal @decimal, AstAlterTableIndexOptions? alterTableIndexOptions, AstOnPartitionOrFilegroup? onPartitionOrFilegroup)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(@decimal);
            list.Add(alterTableIndexOptions);
            list.Add(onPartitionOrFilegroup);
            return new AstPrimaryKeyOptions(Position.Default, list);
        }
    }
    
    /// <summary>
    /// foreign_key_options
    /// 	 : REFERENCES  full_table_ref  LR_BRACKET  pk = column_name_list  RR_BRACKET  on_delete?  on_update?  (NOT  FOR  REPLICATION)?
    /// </summary>
    public partial class AstForeignKeyOptions : AstRule
    {
        
        private AstFullTableRef _fullTableRef;
        
        private AstColumnNameList _columnNameList;
        
        private AstOnDelete _onDelete;
        
        private AstOnUpdate _onUpdate;
        
        public AstForeignKeyOptions(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnDelete>())
                {
                    this._onDelete = ((AstOnDelete)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnUpdate>())
                {
                    this._onUpdate = ((AstOnUpdate)(enumerator.Current));
                }
            }
        }
        
        public AstForeignKeyOptions(Position p, AstFullTableRef fullTableRef, AstColumnNameList columnNameList, AstOnDelete onDelete, AstOnUpdate onUpdate) : 
                base(p)
        {
            this._fullTableRef = fullTableRef;
            this._columnNameList = columnNameList;
            this._onDelete = onDelete;
            this._onUpdate = onUpdate;
        }
        
        public AstForeignKeyOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnDelete>())
                {
                    this._onDelete = ((AstOnDelete)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnUpdate>())
                {
                    this._onUpdate = ((AstOnUpdate)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstColumnNameList ColumnNameList
        {
            get
            {
                return this._columnNameList;
            }
        }
        
        public virtual AstOnDelete OnDelete
        {
            get
            {
                return this._onDelete;
            }
        }
        
        public virtual AstOnUpdate OnUpdate
        {
            get
            {
                return this._onUpdate;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitForeignKeyOptions(this);
        }
        
        /// <summary>
        /// foreign_key_options : 
        ///    REFERENCES full_table_ref ( pk=column_name_list ) on_delete? on_update? NOT FOR REPLICATION 
        /// </summary>
        public static AstForeignKeyOptions ForeignKeyOptions(AstFullTableRef fullTableRef, AstColumnNameList pk, AstOnDelete? onDelete, AstOnUpdate? onUpdate)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            list.Add(pk);
            list.Add(onDelete);
            list.Add(onUpdate);
            return new AstForeignKeyOptions(Position.Default, list);
        }
    }
    
    /// <summary>
    /// check_constraint
    /// 	 : CHECK  (NOT  FOR  REPLICATION)?  LR_BRACKET  search_condition  RR_BRACKET
    /// </summary>
    public partial class AstCheckConstraint : AstRule
    {
        
        private AstSearchCondition _searchCondition;
        
        public AstCheckConstraint(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstCheckConstraint(Position p, AstSearchCondition searchCondition) : 
                base(p)
        {
            this._searchCondition = searchCondition;
        }
        
        public AstCheckConstraint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCheckConstraint(this);
        }
        
        /// <summary>
        /// check_constraint : 
        ///    CHECK NOT FOR REPLICATION ( search_condition ) 
        /// </summary>
        public static AstCheckConstraint CheckConstraint(AstSearchCondition searchCondition)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(searchCondition);
            return new AstCheckConstraint(Position.Default, list);
        }
    }
    
    /// <summary>
    /// declare_cursor
    /// 	 : DECLARE  cursor_name  (CURSOR  (declare_set_cursor_common  (FOR  UPDATE  (OF  column_name_list)?)?)? | sensitive?  SCROLL?  CURSOR  FOR  select_statement_standalone  (FOR  (READ  ONLY | UPDATE | (OF  column_name_list)))?)  SEMI?
    /// </summary>
    public partial class AstDeclareCursor : AstRule
    {
        
        private AstCursorName _cursorName;
        
        private AstDeclareSetCursorCommon _declareSetCursorCommon;
        
        private AstColumnNameList _columnNameList;
        
        private AstSensitive _sensitive;
        
        private AstSelectStatementStandalone _selectStatementStandalone;
        
        public AstDeclareCursor(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDeclareSetCursorCommon>())
                {
                    this._declareSetCursorCommon = ((AstDeclareSetCursorCommon)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSensitive>())
                {
                    this._sensitive = ((AstSensitive)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public AstDeclareCursor(Position p, AstCursorName cursorName, AstDeclareSetCursorCommon declareSetCursorCommon, AstColumnNameList columnNameList, AstSensitive sensitive, AstSelectStatementStandalone selectStatementStandalone) : 
                base(p)
        {
            this._cursorName = cursorName;
            this._declareSetCursorCommon = declareSetCursorCommon;
            this._columnNameList = columnNameList;
            this._sensitive = sensitive;
            this._selectStatementStandalone = selectStatementStandalone;
        }
        
        public AstDeclareCursor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDeclareSetCursorCommon>())
                {
                    this._declareSetCursorCommon = ((AstDeclareSetCursorCommon)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSensitive>())
                {
                    this._sensitive = ((AstSensitive)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCursorName CursorName
        {
            get
            {
                return this._cursorName;
            }
        }
        
        public virtual AstDeclareSetCursorCommon DeclareSetCursorCommon
        {
            get
            {
                return this._declareSetCursorCommon;
            }
        }
        
        public virtual AstColumnNameList ColumnNameList
        {
            get
            {
                return this._columnNameList;
            }
        }
        
        public virtual AstSensitive Sensitive
        {
            get
            {
                return this._sensitive;
            }
        }
        
        public virtual AstSelectStatementStandalone SelectStatementStandalone
        {
            get
            {
                return this._selectStatementStandalone;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareCursor(this);
        }
        
        /// <summary>
        /// declare_cursor : 
        ///    DECLARE cursor_name CURSOR declare_set_cursor_common FOR UPDATE OF column_name_list SEMI? 
        /// </summary>
        public static AstDeclareCursor DeclareCursor(AstCursorName cursorName, AstDeclareSetCursorCommon declareSetCursorCommon, AstColumnNameList columnNameList)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(cursorName);
            list.Add(declareSetCursorCommon);
            list.Add(columnNameList);
            return new AstDeclareCursor(Position.Default, list);
        }
        
        /// <summary>
        /// declare_cursor : 
        ///    DECLARE cursor_name sensitive? SCROLL? CURSOR FOR select_statement_standalone FOR READ ONLY SEMI? 
        /// </summary>
        public static AstDeclareCursor DeclareCursor(AstCursorName cursorName, AstSensitive? sensitive, AstSelectStatementStandalone selectStatementStandalone)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(cursorName);
            list.Add(sensitive);
            list.Add(selectStatementStandalone);
            return new AstDeclareCursor(Position.Default, list);
        }
        
        /// <summary>
        /// declare_cursor : 
        ///    DECLARE cursor_name sensitive? SCROLL? CURSOR FOR select_statement_standalone FOR OF column_name_list SEMI? 
        /// </summary>
        public static AstDeclareCursor DeclareCursor(AstCursorName cursorName, AstSensitive? sensitive, AstSelectStatementStandalone selectStatementStandalone, AstColumnNameList columnNameList)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(cursorName);
            list.Add(sensitive);
            list.Add(selectStatementStandalone);
            list.Add(columnNameList);
            return new AstDeclareCursor(Position.Default, list);
        }
    }
    
    /// <summary>
    /// declare_set_cursor_common
    /// 	 : declare_set_cursor_common_partials?  FOR  select_statement_standalone
    /// </summary>
    public partial class AstDeclareSetCursorCommon : AstRule
    {
        
        private AstDeclareSetCursorCommonPartials _declareSetCursorCommonPartials;
        
        private AstSelectStatementStandalone _selectStatementStandalone;
        
        public AstDeclareSetCursorCommon(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDeclareSetCursorCommonPartials>())
                {
                    this._declareSetCursorCommonPartials = ((AstDeclareSetCursorCommonPartials)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public AstDeclareSetCursorCommon(Position p, AstDeclareSetCursorCommonPartials declareSetCursorCommonPartials, AstSelectStatementStandalone selectStatementStandalone) : 
                base(p)
        {
            this._declareSetCursorCommonPartials = declareSetCursorCommonPartials;
            this._selectStatementStandalone = selectStatementStandalone;
        }
        
        public AstDeclareSetCursorCommon(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDeclareSetCursorCommonPartials>())
                {
                    this._declareSetCursorCommonPartials = ((AstDeclareSetCursorCommonPartials)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDeclareSetCursorCommonPartials DeclareSetCursorCommonPartials
        {
            get
            {
                return this._declareSetCursorCommonPartials;
            }
        }
        
        public virtual AstSelectStatementStandalone SelectStatementStandalone
        {
            get
            {
                return this._selectStatementStandalone;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareSetCursorCommon(this);
        }
        
        /// <summary>
        /// declare_set_cursor_common : 
        ///    declare_set_cursor_common_partials? FOR select_statement_standalone 
        /// </summary>
        public static AstDeclareSetCursorCommon DeclareSetCursorCommon(AstDeclareSetCursorCommonPartials? declareSetCursorCommonPartials, AstSelectStatementStandalone selectStatementStandalone)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(declareSetCursorCommonPartials);
            list.Add(selectStatementStandalone);
            return new AstDeclareSetCursorCommon(Position.Default, list);
        }
    }
    
    /// <summary>
    /// fetch_cursor
    /// 	 : FETCH  ((fetch_cursor_strategy | absolute_relative  expression)?  FROM)?  GLOBAL?  cursor_name  (INTO  local_ids)?  SEMI?
    /// </summary>
    public partial class AstFetchCursor : AstRule
    {
        
        private AstFetchCursorStrategy _fetchCursorStrategy;
        
        private AstAbsoluteRelative _absoluteRelative;
        
        private AstExpression _expression;
        
        private AstCursorName _cursorName;
        
        private AstLocalIds _localIds;
        
        public AstFetchCursor(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFetchCursorStrategy>())
                {
                    this._fetchCursorStrategy = ((AstFetchCursorStrategy)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAbsoluteRelative>())
                {
                    this._absoluteRelative = ((AstAbsoluteRelative)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalIds>())
                {
                    this._localIds = ((AstLocalIds)(enumerator.Current));
                }
            }
        }
        
        public AstFetchCursor(Position p, AstFetchCursorStrategy fetchCursorStrategy, AstAbsoluteRelative absoluteRelative, AstExpression expression, AstCursorName cursorName, AstLocalIds localIds) : 
                base(p)
        {
            this._fetchCursorStrategy = fetchCursorStrategy;
            this._absoluteRelative = absoluteRelative;
            this._expression = expression;
            this._cursorName = cursorName;
            this._localIds = localIds;
        }
        
        public AstFetchCursor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFetchCursorStrategy>())
                {
                    this._fetchCursorStrategy = ((AstFetchCursorStrategy)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAbsoluteRelative>())
                {
                    this._absoluteRelative = ((AstAbsoluteRelative)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalIds>())
                {
                    this._localIds = ((AstLocalIds)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFetchCursorStrategy FetchCursorStrategy
        {
            get
            {
                return this._fetchCursorStrategy;
            }
        }
        
        public virtual AstAbsoluteRelative AbsoluteRelative
        {
            get
            {
                return this._absoluteRelative;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstCursorName CursorName
        {
            get
            {
                return this._cursorName;
            }
        }
        
        public virtual AstLocalIds LocalIds
        {
            get
            {
                return this._localIds;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFetchCursor(this);
        }
        
        /// <summary>
        /// fetch_cursor : 
        ///    FETCH fetch_cursor_strategy FROM GLOBAL? cursor_name INTO local_ids SEMI? 
        /// </summary>
        public static AstFetchCursor FetchCursor(AstFetchCursorStrategy fetchCursorStrategy, AstCursorName cursorName, AstLocalIds localIds)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fetchCursorStrategy);
            list.Add(cursorName);
            list.Add(localIds);
            return new AstFetchCursor(Position.Default, list);
        }
        
        /// <summary>
        /// fetch_cursor : 
        ///    FETCH absolute_relative expression FROM GLOBAL? cursor_name INTO local_ids SEMI? 
        /// </summary>
        public static AstFetchCursor FetchCursor(AstAbsoluteRelative absoluteRelative, AstExpression expression, AstCursorName cursorName, AstLocalIds localIds)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(absoluteRelative);
            list.Add(expression);
            list.Add(cursorName);
            list.Add(localIds);
            return new AstFetchCursor(Position.Default, list);
        }
    }
    
    /// <summary>
    /// time_zone
    /// 	 : AT_KEYWORD  TIME  ZONE  expression
    /// </summary>
    public partial class AstTimeZone : AstRule
    {
        
        private AstExpression _expression;
        
        public AstTimeZone(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstTimeZone(Position p, AstExpression expression) : 
                base(p)
        {
            this._expression = expression;
        }
        
        public AstTimeZone(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTimeZone(this);
        }
        
        /// <summary>
        /// time_zone : 
        ///    AT_KEYWORD TIME ZONE expression 
        /// </summary>
        public static AstTimeZone TimeZone(AstExpression expression)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(expression);
            return new AstTimeZone(Position.Default, list);
        }
    }
    
    /// <summary>
    /// subquery
    /// 	 : select_statement
    /// </summary>
    public partial class AstSubquery : AstRule
    {
        
        private AstSelectStatement _selectStatement;
        
        public AstSubquery(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSelectStatement>())
                {
                    this._selectStatement = ((AstSelectStatement)(enumerator.Current));
                }
            }
        }
        
        public AstSubquery(Position p, AstSelectStatement selectStatement) : 
                base(p)
        {
            this._selectStatement = selectStatement;
        }
        
        public AstSubquery(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSelectStatement>())
                {
                    this._selectStatement = ((AstSelectStatement)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSelectStatement SelectStatement
        {
            get
            {
                return this._selectStatement;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSubquery(this);
        }
        
        /// <summary>
        /// subquery : 
        ///    select_statement 
        /// </summary>
        public static AstSubquery Subquery(AstSelectStatement selectStatement)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(selectStatement);
            return new AstSubquery(Position.Default, list);
        }
    }
    
    /// <summary>
    /// predicate_multi_assign
    /// 	 : left = expression  MULT_ASSIGN  right = expression
    /// </summary>
    public partial class AstPredicateMultiAssign : AstRule
    {
        
        private AstExpression _expression;
        
        public AstPredicateMultiAssign(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstPredicateMultiAssign(Position p, AstExpression expression) : 
                base(p)
        {
            this._expression = expression;
        }
        
        public AstPredicateMultiAssign(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateMultiAssign(this);
        }
        
        /// <summary>
        /// predicate_multi_assign : 
        ///    left=expression MULT_ASSIGN right=expression 
        /// </summary>
        public static AstPredicateMultiAssign PredicateMultiAssign(AstExpression left, AstExpression right)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(left);
            list.Add(right);
            return new AstPredicateMultiAssign(Position.Default, list);
        }
    }
    
    /// <summary>
    /// predicate_binary
    /// 	 : left = expression  comparison_operator  right = expression
    /// </summary>
    public partial class AstPredicateBinary : AstRule
    {
        
        private AstExpression _expression;
        
        private AstComparisonOperator _comparisonOperator;
        
        public AstPredicateBinary(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstComparisonOperator>())
                {
                    this._comparisonOperator = ((AstComparisonOperator)(enumerator.Current));
                }
            }
        }
        
        public AstPredicateBinary(Position p, AstExpression expression, AstComparisonOperator comparisonOperator) : 
                base(p)
        {
            this._expression = expression;
            this._comparisonOperator = comparisonOperator;
        }
        
        public AstPredicateBinary(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstComparisonOperator>())
                {
                    this._comparisonOperator = ((AstComparisonOperator)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstComparisonOperator ComparisonOperator
        {
            get
            {
                return this._comparisonOperator;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateBinary(this);
        }
        
        /// <summary>
        /// predicate_binary : 
        ///    left=expression comparison_operator right=expression 
        /// </summary>
        public static AstPredicateBinary PredicateBinary(AstExpression left, AstComparisonOperator comparisonOperator, AstExpression right)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(left);
            list.Add(comparisonOperator);
            list.Add(right);
            return new AstPredicateBinary(Position.Default, list);
        }
    }
    
    /// <summary>
    /// predicate_tier
    /// 	 : init = expression  NOT*  BETWEEN  left = expression  AND  right = expression
    /// </summary>
    public partial class AstPredicateTier : AstRule
    {
        
        private AstExpression _expression;
        
        public AstPredicateTier(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstPredicateTier(Position p, AstExpression expression) : 
                base(p)
        {
            this._expression = expression;
        }
        
        public AstPredicateTier(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateTier(this);
        }
        
        /// <summary>
        /// predicate_tier : 
        ///    init=expression NOT* BETWEEN left=expression AND right=expression 
        /// </summary>
        public static AstPredicateTier PredicateTier(AstExpression init, AstExpression left, AstExpression right)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(init);
            list.Add(left);
            list.Add(right);
            return new AstPredicateTier(Position.Default, list);
        }
    }
    
    /// <summary>
    /// predicate_not_like
    /// 	 : left = expression  NOT*  LIKE  right = expression  (ESCAPE  escape = expression)?
    /// </summary>
    public partial class AstPredicateNotLike : AstRule
    {
        
        private AstExpression _expression;
        
        public AstPredicateNotLike(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstPredicateNotLike(Position p, AstExpression expression) : 
                base(p)
        {
            this._expression = expression;
        }
        
        public AstPredicateNotLike(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateNotLike(this);
        }
        
        /// <summary>
        /// predicate_not_like : 
        ///    left=expression NOT* LIKE right=expression ESCAPE escape=expression 
        /// </summary>
        public static AstPredicateNotLike PredicateNotLike(AstExpression left, AstExpression right, AstExpression escape)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(left);
            list.Add(right);
            list.Add(escape);
            return new AstPredicateNotLike(Position.Default, list);
        }
    }
    
    /// <summary>
    /// predicate_not_in
    /// 	 : left = expression  NOT*  IN  LR_BRACKET  (subquery | expression_list)  RR_BRACKET
    /// </summary>
    public partial class AstPredicateNotIn : AstRule
    {
        
        private AstExpression _expression;
        
        private AstSubquery _subquery;
        
        private AstExpressionList _expressionList;
        
        public AstPredicateNotIn(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSubquery>())
                {
                    this._subquery = ((AstSubquery)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpressionList>())
                {
                    this._expressionList = ((AstExpressionList)(enumerator.Current));
                }
            }
        }
        
        public AstPredicateNotIn(Position p, AstExpression expression, AstSubquery subquery, AstExpressionList expressionList) : 
                base(p)
        {
            this._expression = expression;
            this._subquery = subquery;
            this._expressionList = expressionList;
        }
        
        public AstPredicateNotIn(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSubquery>())
                {
                    this._subquery = ((AstSubquery)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpressionList>())
                {
                    this._expressionList = ((AstExpressionList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstSubquery Subquery
        {
            get
            {
                return this._subquery;
            }
        }
        
        public virtual AstExpressionList ExpressionList
        {
            get
            {
                return this._expressionList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateNotIn(this);
        }
        
        /// <summary>
        /// predicate_not_in : 
        ///    left=expression NOT* IN ( subquery ) 
        /// </summary>
        public static AstPredicateNotIn PredicateNotIn(AstExpression left, AstSubquery subquery)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(left);
            list.Add(subquery);
            return new AstPredicateNotIn(Position.Default, list);
        }
        
        /// <summary>
        /// predicate_not_in : 
        ///    left=expression NOT* IN ( expression_list ) 
        /// </summary>
        public static AstPredicateNotIn PredicateNotIn(AstExpression left, AstExpressionList expressionList)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(left);
            list.Add(expressionList);
            return new AstPredicateNotIn(Position.Default, list);
        }
    }
    
    /// <summary>
    /// sql_union
    /// 	 : join_mode  (spec = query_specification | (LR_BRACKET  op = query_expression  RR_BRACKET))
    /// </summary>
    public partial class AstSqlUnion : AstRule
    {
        
        private AstJoinMode _joinMode;
        
        private AstQuerySpecification _querySpecification;
        
        private AstQueryExpression _queryExpression;
        
        public AstSqlUnion(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstJoinMode>())
                {
                    this._joinMode = ((AstJoinMode)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQuerySpecification>())
                {
                    this._querySpecification = ((AstQuerySpecification)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueryExpression>())
                {
                    this._queryExpression = ((AstQueryExpression)(enumerator.Current));
                }
            }
        }
        
        public AstSqlUnion(Position p, AstJoinMode joinMode, AstQuerySpecification querySpecification, AstQueryExpression queryExpression) : 
                base(p)
        {
            this._joinMode = joinMode;
            this._querySpecification = querySpecification;
            this._queryExpression = queryExpression;
        }
        
        public AstSqlUnion(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstJoinMode>())
                {
                    this._joinMode = ((AstJoinMode)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQuerySpecification>())
                {
                    this._querySpecification = ((AstQuerySpecification)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueryExpression>())
                {
                    this._queryExpression = ((AstQueryExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstJoinMode JoinMode
        {
            get
            {
                return this._joinMode;
            }
        }
        
        public virtual AstQuerySpecification QuerySpecification
        {
            get
            {
                return this._querySpecification;
            }
        }
        
        public virtual AstQueryExpression QueryExpression
        {
            get
            {
                return this._queryExpression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlUnion(this);
        }
        
        /// <summary>
        /// sql_union : 
        ///    join_mode spec=query_specification 
        /// </summary>
        public static AstSqlUnion SqlUnion(AstJoinMode joinMode, AstQuerySpecification spec)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(joinMode);
            list.Add(spec);
            return new AstSqlUnion(Position.Default, list);
        }
        
        /// <summary>
        /// sql_union : 
        ///    join_mode ( op=query_expression ) 
        /// </summary>
        public static AstSqlUnion SqlUnion(AstJoinMode joinMode, AstQueryExpression op)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(joinMode);
            list.Add(op);
            return new AstSqlUnion(Position.Default, list);
        }
    }
    
    /// <summary>
    /// query_specification
    /// 	 : SELECT  allOrDistinct = all_distinct  top = top_clause  columns = select_list  (INTO  into = full_table_ref)?  (FROM  from = table_sources)?  where_condition?  (GROUP  BY  ((groupByAll = ALL  groupBys_list) | GROUPING  SETS  LR_BRACKET  groupSet_list  RR_BRACKET))?  (HAVING  having = search_condition)?
    /// </summary>
    public partial class AstQuerySpecification : AstRule
    {
        
        private AstAllDistinct _allDistinct;
        
        private AstTopClause _topClause;
        
        private AstSelectList _selectList;
        
        private AstFullTableRef _fullTableRef;
        
        private AstTableSources _tableSources;
        
        private AstWhereCondition _whereCondition;
        
        private AstGroupBysList _groupBysList;
        
        private AstGroupSetList _groupSetList;
        
        private AstSearchCondition _searchCondition;
        
        public AstQuerySpecification(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAllDistinct>())
                {
                    this._allDistinct = ((AstAllDistinct)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTopClause>())
                {
                    this._topClause = ((AstTopClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectList>())
                {
                    this._selectList = ((AstSelectList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._tableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhereCondition>())
                {
                    this._whereCondition = ((AstWhereCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGroupBysList>())
                {
                    this._groupBysList = ((AstGroupBysList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGroupSetList>())
                {
                    this._groupSetList = ((AstGroupSetList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstQuerySpecification(Position p, AstAllDistinct allDistinct, AstTopClause topClause, AstSelectList selectList, AstFullTableRef fullTableRef, AstTableSources tableSources, AstWhereCondition whereCondition, AstGroupBysList groupBysList, AstGroupSetList groupSetList, AstSearchCondition searchCondition) : 
                base(p)
        {
            this._allDistinct = allDistinct;
            this._topClause = topClause;
            this._selectList = selectList;
            this._fullTableRef = fullTableRef;
            this._tableSources = tableSources;
            this._whereCondition = whereCondition;
            this._groupBysList = groupBysList;
            this._groupSetList = groupSetList;
            this._searchCondition = searchCondition;
        }
        
        public AstQuerySpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAllDistinct>())
                {
                    this._allDistinct = ((AstAllDistinct)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTopClause>())
                {
                    this._topClause = ((AstTopClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectList>())
                {
                    this._selectList = ((AstSelectList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._tableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhereCondition>())
                {
                    this._whereCondition = ((AstWhereCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGroupBysList>())
                {
                    this._groupBysList = ((AstGroupBysList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGroupSetList>())
                {
                    this._groupSetList = ((AstGroupSetList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAllDistinct AllDistinct
        {
            get
            {
                return this._allDistinct;
            }
        }
        
        public virtual AstTopClause TopClause
        {
            get
            {
                return this._topClause;
            }
        }
        
        public virtual AstSelectList SelectList
        {
            get
            {
                return this._selectList;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstTableSources TableSources
        {
            get
            {
                return this._tableSources;
            }
        }
        
        public virtual AstWhereCondition WhereCondition
        {
            get
            {
                return this._whereCondition;
            }
        }
        
        public virtual AstGroupBysList GroupBysList
        {
            get
            {
                return this._groupBysList;
            }
        }
        
        public virtual AstGroupSetList GroupSetList
        {
            get
            {
                return this._groupSetList;
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQuerySpecification(this);
        }
        
        /// <summary>
        /// query_specification : 
        ///    SELECT allOrDistinct=all_distinct top=top_clause columns=select_list INTO into=full_table_ref FROM from=table_sources where_condition? GROUP BY groupByAll=ALL groupBys_list HAVING having=search_condition 
        /// </summary>
        public static AstQuerySpecification QuerySpecification(AstAllDistinct allOrDistinct, AstTopClause top, AstSelectList columns, AstFullTableRef into, AstTableSources from, AstWhereCondition? whereCondition, AstGroupBysList groupBysList, AstSearchCondition having)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(allOrDistinct);
            list.Add(top);
            list.Add(columns);
            list.Add(into);
            list.Add(from);
            list.Add(whereCondition);
            list.Add(groupBysList);
            list.Add(having);
            return new AstQuerySpecification(Position.Default, list);
        }
        
        /// <summary>
        /// query_specification : 
        ///    SELECT allOrDistinct=all_distinct top=top_clause columns=select_list INTO into=full_table_ref FROM from=table_sources where_condition? GROUP BY GROUPING SETS ( groupSet_list ) HAVING having=search_condition 
        /// </summary>
        public static AstQuerySpecification QuerySpecification(AstAllDistinct allOrDistinct, AstTopClause top, AstSelectList columns, AstFullTableRef into, AstTableSources from, AstWhereCondition? whereCondition, AstGroupSetList groupSetList, AstSearchCondition having)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(allOrDistinct);
            list.Add(top);
            list.Add(columns);
            list.Add(into);
            list.Add(from);
            list.Add(whereCondition);
            list.Add(groupSetList);
            list.Add(having);
            return new AstQuerySpecification(Position.Default, list);
        }
    }
    
    /// <summary>
    /// select_order_by_clause
    /// 	 : order_by_clause  (OFFSET  offset_exp = expression  offset_rows = row_rows  (FETCH  fetch_offset = first_next  fetch_exp = expression  fetch_rows = row_rows  ONLY)?)?
    /// </summary>
    public partial class AstSelectOrderByClause : AstRule
    {
        
        private AstOrderByClause _orderByClause;
        
        private AstExpression _expression;
        
        private AstRowRows _rowRows;
        
        private AstFirstNext _firstNext;
        
        public AstSelectOrderByClause(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOrderByClause>())
                {
                    this._orderByClause = ((AstOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowRows>())
                {
                    this._rowRows = ((AstRowRows)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFirstNext>())
                {
                    this._firstNext = ((AstFirstNext)(enumerator.Current));
                }
            }
        }
        
        public AstSelectOrderByClause(Position p, AstOrderByClause orderByClause, AstExpression expression, AstRowRows rowRows, AstFirstNext firstNext) : 
                base(p)
        {
            this._orderByClause = orderByClause;
            this._expression = expression;
            this._rowRows = rowRows;
            this._firstNext = firstNext;
        }
        
        public AstSelectOrderByClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOrderByClause>())
                {
                    this._orderByClause = ((AstOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowRows>())
                {
                    this._rowRows = ((AstRowRows)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFirstNext>())
                {
                    this._firstNext = ((AstFirstNext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOrderByClause OrderByClause
        {
            get
            {
                return this._orderByClause;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstRowRows RowRows
        {
            get
            {
                return this._rowRows;
            }
        }
        
        public virtual AstFirstNext FirstNext
        {
            get
            {
                return this._firstNext;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectOrderByClause(this);
        }
        
        /// <summary>
        /// select_order_by_clause : 
        ///    order_by_clause OFFSET offset_exp=expression offset_rows=row_rows FETCH fetch_offset=first_next fetch_exp=expression fetch_rows=row_rows ONLY 
        /// </summary>
        public static AstSelectOrderByClause SelectOrderByClause(AstOrderByClause orderByClause, AstExpression offsetExp, AstRowRows offsetRows, AstFirstNext fetchOffset, AstExpression fetchExp, AstRowRows fetchRows)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(orderByClause);
            list.Add(offsetExp);
            list.Add(offsetRows);
            list.Add(fetchOffset);
            list.Add(fetchExp);
            list.Add(fetchRows);
            return new AstSelectOrderByClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// for_clause_xml_raw
    /// 	 : FOR  XML  (RAW  (LR_BRACKET  xmlraw = stringtext  RR_BRACKET)? | AUTO)  xml_common_directives?  (COMMA  (XMLDATA | XMLSCHEMA  (LR_BRACKET  xml_schema = stringtext  RR_BRACKET)?))?  (COMMA  ELEMENTS  absent_xsinil?)?
    /// </summary>
    public partial class AstForClauseXmlRaw : AstRule
    {
        
        private AstStringtext _stringtext;
        
        private AstXmlCommonDirectives _xmlCommonDirectives;
        
        private AstAbsentXsinil _absentXsinil;
        
        public AstForClauseXmlRaw(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstXmlCommonDirectives>())
                {
                    this._xmlCommonDirectives = ((AstXmlCommonDirectives)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAbsentXsinil>())
                {
                    this._absentXsinil = ((AstAbsentXsinil)(enumerator.Current));
                }
            }
        }
        
        public AstForClauseXmlRaw(Position p, AstStringtext stringtext, AstXmlCommonDirectives xmlCommonDirectives, AstAbsentXsinil absentXsinil) : 
                base(p)
        {
            this._stringtext = stringtext;
            this._xmlCommonDirectives = xmlCommonDirectives;
            this._absentXsinil = absentXsinil;
        }
        
        public AstForClauseXmlRaw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstXmlCommonDirectives>())
                {
                    this._xmlCommonDirectives = ((AstXmlCommonDirectives)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAbsentXsinil>())
                {
                    this._absentXsinil = ((AstAbsentXsinil)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstXmlCommonDirectives XmlCommonDirectives
        {
            get
            {
                return this._xmlCommonDirectives;
            }
        }
        
        public virtual AstAbsentXsinil AbsentXsinil
        {
            get
            {
                return this._absentXsinil;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitForClauseXmlRaw(this);
        }
        
        /// <summary>
        /// for_clause_xml_raw : 
        ///    FOR XML RAW ( xmlraw=stringtext ) xml_common_directives? , XMLDATA , ELEMENTS absent_xsinil? 
        /// </summary>
        public static AstForClauseXmlRaw ForClauseXmlRaw(AstStringtext xmlraw, AstXmlCommonDirectives? xmlCommonDirectives, AstAbsentXsinil? absentXsinil)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(xmlraw);
            list.Add(xmlCommonDirectives);
            list.Add(absentXsinil);
            return new AstForClauseXmlRaw(Position.Default, list);
        }
        
        /// <summary>
        /// for_clause_xml_raw : 
        ///    FOR XML AUTO xml_common_directives? , XMLDATA , ELEMENTS absent_xsinil? 
        /// </summary>
        public static AstForClauseXmlRaw ForClauseXmlRaw(AstXmlCommonDirectives? xmlCommonDirectives, AstAbsentXsinil? absentXsinil)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(xmlCommonDirectives);
            list.Add(absentXsinil);
            return new AstForClauseXmlRaw(Position.Default, list);
        }
        
        /// <summary>
        /// for_clause_xml_raw : 
        ///    FOR XML RAW ( xmlraw=stringtext ) xml_common_directives? , XMLSCHEMA ( xml_schema=stringtext ) , ELEMENTS absent_xsinil? 
        /// </summary>
        public static AstForClauseXmlRaw ForClauseXmlRaw(AstStringtext xmlraw, AstXmlCommonDirectives? xmlCommonDirectives, AstStringtext xmlSchema, AstAbsentXsinil? absentXsinil)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(xmlraw);
            list.Add(xmlCommonDirectives);
            list.Add(xmlSchema);
            list.Add(absentXsinil);
            return new AstForClauseXmlRaw(Position.Default, list);
        }
        
        /// <summary>
        /// for_clause_xml_raw : 
        ///    FOR XML AUTO xml_common_directives? , XMLSCHEMA ( xml_schema=stringtext ) , ELEMENTS absent_xsinil? 
        /// </summary>
        public static AstForClauseXmlRaw ForClauseXmlRaw(AstXmlCommonDirectives? xmlCommonDirectives, AstStringtext xmlSchema, AstAbsentXsinil? absentXsinil)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(xmlCommonDirectives);
            list.Add(xmlSchema);
            list.Add(absentXsinil);
            return new AstForClauseXmlRaw(Position.Default, list);
        }
    }
    
    /// <summary>
    /// for_clause_json
    /// 	 : FOR  JSON  auto_path  clause_json_infos?
    /// </summary>
    public partial class AstForClauseJson : AstRule
    {
        
        private AstAutoPath _autoPath;
        
        private AstClauseJsonInfos _clauseJsonInfos;
        
        public AstForClauseJson(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAutoPath>())
                {
                    this._autoPath = ((AstAutoPath)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClauseJsonInfos>())
                {
                    this._clauseJsonInfos = ((AstClauseJsonInfos)(enumerator.Current));
                }
            }
        }
        
        public AstForClauseJson(Position p, AstAutoPath autoPath, AstClauseJsonInfos clauseJsonInfos) : 
                base(p)
        {
            this._autoPath = autoPath;
            this._clauseJsonInfos = clauseJsonInfos;
        }
        
        public AstForClauseJson(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAutoPath>())
                {
                    this._autoPath = ((AstAutoPath)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClauseJsonInfos>())
                {
                    this._clauseJsonInfos = ((AstClauseJsonInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAutoPath AutoPath
        {
            get
            {
                return this._autoPath;
            }
        }
        
        public virtual AstClauseJsonInfos ClauseJsonInfos
        {
            get
            {
                return this._clauseJsonInfos;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitForClauseJson(this);
        }
        
        /// <summary>
        /// for_clause_json : 
        ///    FOR JSON auto_path clause_json_infos? 
        /// </summary>
        public static AstForClauseJson ForClauseJson(AstAutoPath autoPath, AstClauseJsonInfos? clauseJsonInfos)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(autoPath);
            list.Add(clauseJsonInfos);
            return new AstForClauseJson(Position.Default, list);
        }
    }
    
    /// <summary>
    /// group_by_item
    /// 	 : expression
    /// </summary>
    public partial class AstGroupByItem : AstRule
    {
        
        private AstExpression _expression;
        
        public AstGroupByItem(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstGroupByItem(Position p, AstExpression expression) : 
                base(p)
        {
            this._expression = expression;
        }
        
        public AstGroupByItem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupByItem(this);
        }
        
        /// <summary>
        /// group_by_item : 
        ///    expression 
        /// </summary>
        public static AstGroupByItem GroupByItem(AstExpression expression)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(expression);
            return new AstGroupByItem(Position.Default, list);
        }
    }
    
    /// <summary>
    /// optimize_for_arg
    /// 	 : local_id  (UNKNOWN | EQUAL  (constant | NULL_))
    /// </summary>
    public partial class AstOptimizeForArg : AstRule
    {
        
        private AstLocalId _localId;
        
        private AstConstant _constant;
        
        public AstOptimizeForArg(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstConstant>())
                {
                    this._constant = ((AstConstant)(enumerator.Current));
                }
            }
        }
        
        public AstOptimizeForArg(Position p, AstLocalId localId, AstConstant constant) : 
                base(p)
        {
            this._localId = localId;
            this._constant = constant;
        }
        
        public AstOptimizeForArg(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstConstant>())
                {
                    this._constant = ((AstConstant)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalId LocalId
        {
            get
            {
                return this._localId;
            }
        }
        
        public virtual AstConstant Constant
        {
            get
            {
                return this._constant;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOptimizeForArg(this);
        }
        
        /// <summary>
        /// optimize_for_arg : 
        ///    local_id UNKNOWN 
        /// </summary>
        public static AstOptimizeForArg OptimizeForArg(AstLocalId localId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(localId);
            return new AstOptimizeForArg(Position.Default, list);
        }
        
        /// <summary>
        /// optimize_for_arg : 
        ///    local_id EQUAL constant 
        /// </summary>
        public static AstOptimizeForArg OptimizeForArg(AstLocalId localId, AstConstant constant)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(localId);
            list.Add(constant);
            return new AstOptimizeForArg(Position.Default, list);
        }
    }
    
    /// <summary>
    /// table_asterisk
    /// 	 : full_table_ref  DOT  STAR
    /// </summary>
    public partial class AstTableAsterisk : AstRule
    {
        
        private AstFullTableRef _fullTableRef;
        
        public AstTableAsterisk(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstTableAsterisk(Position p, AstFullTableRef fullTableRef) : 
                base(p)
        {
            this._fullTableRef = fullTableRef;
        }
        
        public AstTableAsterisk(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableAsterisk(this);
        }
        
        /// <summary>
        /// table_asterisk : 
        ///    full_table_ref . STAR 
        /// </summary>
        public static AstTableAsterisk TableAsterisk(AstFullTableRef fullTableRef)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            return new AstTableAsterisk(Position.Default, list);
        }
    }
    
    /// <summary>
    /// column_elem
    /// 	 : column_elem_target  as_column_alias?
    /// </summary>
    public partial class AstColumnElem : AstRule
    {
        
        private AstColumnElemTarget _columnElemTarget;
        
        private AstAsColumnAlias _asColumnAlias;
        
        public AstColumnElem(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnElemTarget>())
                {
                    this._columnElemTarget = ((AstColumnElemTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsColumnAlias>())
                {
                    this._asColumnAlias = ((AstAsColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public AstColumnElem(Position p, AstColumnElemTarget columnElemTarget, AstAsColumnAlias asColumnAlias) : 
                base(p)
        {
            this._columnElemTarget = columnElemTarget;
            this._asColumnAlias = asColumnAlias;
        }
        
        public AstColumnElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnElemTarget>())
                {
                    this._columnElemTarget = ((AstColumnElemTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsColumnAlias>())
                {
                    this._asColumnAlias = ((AstAsColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnElemTarget ColumnElemTarget
        {
            get
            {
                return this._columnElemTarget;
            }
        }
        
        public virtual AstAsColumnAlias AsColumnAlias
        {
            get
            {
                return this._asColumnAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnElem(this);
        }
        
        /// <summary>
        /// column_elem : 
        ///    column_elem_target as_column_alias? 
        /// </summary>
        public static AstColumnElem ColumnElem(AstColumnElemTarget columnElemTarget, AstAsColumnAlias? asColumnAlias)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(columnElemTarget);
            list.Add(asColumnAlias);
            return new AstColumnElem(Position.Default, list);
        }
    }
    
    /// <summary>
    /// expression_assign_elem
    /// 	 : local_id  (assignment_operator | EQUAL)  expression
    /// </summary>
    public partial class AstExpressionAssignElem : AstRule
    {
        
        private AstLocalId _localId;
        
        private AstAssignmentOperator _assignmentOperator;
        
        private AstExpression _expression;
        
        public AstExpressionAssignElem(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssignmentOperator>())
                {
                    this._assignmentOperator = ((AstAssignmentOperator)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstExpressionAssignElem(Position p, AstLocalId localId, AstAssignmentOperator assignmentOperator, AstExpression expression) : 
                base(p)
        {
            this._localId = localId;
            this._assignmentOperator = assignmentOperator;
            this._expression = expression;
        }
        
        public AstExpressionAssignElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssignmentOperator>())
                {
                    this._assignmentOperator = ((AstAssignmentOperator)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalId LocalId
        {
            get
            {
                return this._localId;
            }
        }
        
        public virtual AstAssignmentOperator AssignmentOperator
        {
            get
            {
                return this._assignmentOperator;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressionAssignElem(this);
        }
        
        /// <summary>
        /// expression_assign_elem : 
        ///    local_id assignment_operator expression 
        /// </summary>
        public static AstExpressionAssignElem ExpressionAssignElem(AstLocalId localId, AstAssignmentOperator assignmentOperator, AstExpression expression)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(localId);
            list.Add(assignmentOperator);
            list.Add(expression);
            return new AstExpressionAssignElem(Position.Default, list);
        }
        
        /// <summary>
        /// expression_assign_elem : 
        ///    local_id EQUAL expression 
        /// </summary>
        public static AstExpressionAssignElem ExpressionAssignElem(AstLocalId localId, AstExpression expression)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(localId);
            list.Add(expression);
            return new AstExpressionAssignElem(Position.Default, list);
        }
    }
    
    /// <summary>
    /// open_xml
    /// 	 : OPENXML  LR_BRACKET  expression  COMMA  expression2  RR_BRACKET  (WITH  LR_BRACKET  schema_declaration  RR_BRACKET)?  as_table_alias?
    /// </summary>
    public partial class AstOpenXml : AstRule
    {
        
        private AstExpression _expression;
        
        private AstExpression2 _expression2;
        
        private AstSchemaDeclaration _schemaDeclaration;
        
        private AstAsTableAlias _asTableAlias;
        
        public AstOpenXml(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this._expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaDeclaration>())
                {
                    this._schemaDeclaration = ((AstSchemaDeclaration)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstOpenXml(Position p, AstExpression expression, AstExpression2 expression2, AstSchemaDeclaration schemaDeclaration, AstAsTableAlias asTableAlias) : 
                base(p)
        {
            this._expression = expression;
            this._expression2 = expression2;
            this._schemaDeclaration = schemaDeclaration;
            this._asTableAlias = asTableAlias;
        }
        
        public AstOpenXml(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this._expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaDeclaration>())
                {
                    this._schemaDeclaration = ((AstSchemaDeclaration)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstExpression2 Expression2
        {
            get
            {
                return this._expression2;
            }
        }
        
        public virtual AstSchemaDeclaration SchemaDeclaration
        {
            get
            {
                return this._schemaDeclaration;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenXml(this);
        }
        
        /// <summary>
        /// open_xml : 
        ///    OPENXML ( expression , expression2 ) WITH ( schema_declaration ) as_table_alias? 
        /// </summary>
        public static AstOpenXml OpenXml(AstExpression expression, AstExpression2 expression2, AstSchemaDeclaration schemaDeclaration, AstAsTableAlias? asTableAlias)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(expression);
            list.Add(expression2);
            list.Add(schemaDeclaration);
            list.Add(asTableAlias);
            return new AstOpenXml(Position.Default, list);
        }
    }
    
    /// <summary>
    /// open_json
    /// 	 : OPENJSON  LR_BRACKET  expression2  RR_BRACKET  (WITH  LR_BRACKET  json_declaration  RR_BRACKET)?  as_table_alias?
    /// </summary>
    public partial class AstOpenJson : AstRule
    {
        
        private AstExpression2 _expression2;
        
        private AstJsonDeclaration _jsonDeclaration;
        
        private AstAsTableAlias _asTableAlias;
        
        public AstOpenJson(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this._expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstJsonDeclaration>())
                {
                    this._jsonDeclaration = ((AstJsonDeclaration)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstOpenJson(Position p, AstExpression2 expression2, AstJsonDeclaration jsonDeclaration, AstAsTableAlias asTableAlias) : 
                base(p)
        {
            this._expression2 = expression2;
            this._jsonDeclaration = jsonDeclaration;
            this._asTableAlias = asTableAlias;
        }
        
        public AstOpenJson(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this._expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstJsonDeclaration>())
                {
                    this._jsonDeclaration = ((AstJsonDeclaration)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression2 Expression2
        {
            get
            {
                return this._expression2;
            }
        }
        
        public virtual AstJsonDeclaration JsonDeclaration
        {
            get
            {
                return this._jsonDeclaration;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenJson(this);
        }
        
        /// <summary>
        /// open_json : 
        ///    OPENJSON ( expression2 ) WITH ( json_declaration ) as_table_alias? 
        /// </summary>
        public static AstOpenJson OpenJson(AstExpression2 expression2, AstJsonDeclaration jsonDeclaration, AstAsTableAlias? asTableAlias)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(expression2);
            list.Add(jsonDeclaration);
            list.Add(asTableAlias);
            return new AstOpenJson(Position.Default, list);
        }
    }
    
    /// <summary>
    /// json_column_declaration
    /// 	 : column_declaration  (AS  JSON)?
    /// </summary>
    public partial class AstJsonColumnDeclaration : AstRule
    {
        
        private AstColumnDeclaration _columnDeclaration;
        
        public AstJsonColumnDeclaration(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDeclaration>())
                {
                    this._columnDeclaration = ((AstColumnDeclaration)(enumerator.Current));
                }
            }
        }
        
        public AstJsonColumnDeclaration(Position p, AstColumnDeclaration columnDeclaration) : 
                base(p)
        {
            this._columnDeclaration = columnDeclaration;
        }
        
        public AstJsonColumnDeclaration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDeclaration>())
                {
                    this._columnDeclaration = ((AstColumnDeclaration)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnDeclaration ColumnDeclaration
        {
            get
            {
                return this._columnDeclaration;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitJsonColumnDeclaration(this);
        }
        
        /// <summary>
        /// json_column_declaration : 
        ///    column_declaration AS JSON 
        /// </summary>
        public static AstJsonColumnDeclaration JsonColumnDeclaration(AstColumnDeclaration columnDeclaration)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(columnDeclaration);
            return new AstJsonColumnDeclaration(Position.Default, list);
        }
    }
    
    /// <summary>
    /// column_declaration
    /// 	 : id_  data_type  stringtext?
    /// </summary>
    public partial class AstColumnDeclaration : AstRule
    {
        
        private AstId _id;
        
        private AstDataType _dataType;
        
        private AstStringtext _stringtext;
        
        public AstColumnDeclaration(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstColumnDeclaration(Position p, AstId id, AstDataType dataType, AstStringtext stringtext) : 
                base(p)
        {
            this._id = id;
            this._dataType = dataType;
            this._stringtext = stringtext;
        }
        
        public AstColumnDeclaration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDeclaration(this);
        }
        
        /// <summary>
        /// column_declaration : 
        ///    id_ data_type stringtext? 
        /// </summary>
        public static AstColumnDeclaration ColumnDeclaration(AstId id, AstDataType dataType, AstStringtext? stringtext)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(id);
            list.Add(dataType);
            list.Add(stringtext);
            return new AstColumnDeclaration(Position.Default, list);
        }
    }
    
    /// <summary>
    /// join_on
    /// 	 : (inner = INNER | join_type  outer = OUTER)  join_hint?  JOIN  source = table_source  ON  cond = search_condition
    /// </summary>
    public partial class AstJoinOn : AstJoinPart
    {
        
        private AstJoinType _joinType;
        
        private AstJoinHint _joinHint;
        
        private AstTableSource _tableSource;
        
        private AstSearchCondition _searchCondition;
        
        public AstJoinOn(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstJoinType>())
                {
                    this._joinType = ((AstJoinType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstJoinHint>())
                {
                    this._joinHint = ((AstJoinHint)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSource>())
                {
                    this._tableSource = ((AstTableSource)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstJoinOn(Position p, AstJoinType joinType, AstJoinHint joinHint, AstTableSource tableSource, AstSearchCondition searchCondition) : 
                base(p)
        {
            this._joinType = joinType;
            this._joinHint = joinHint;
            this._tableSource = tableSource;
            this._searchCondition = searchCondition;
        }
        
        public AstJoinOn(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstJoinType>())
                {
                    this._joinType = ((AstJoinType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstJoinHint>())
                {
                    this._joinHint = ((AstJoinHint)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSource>())
                {
                    this._tableSource = ((AstTableSource)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstJoinType JoinType
        {
            get
            {
                return this._joinType;
            }
        }
        
        public virtual AstJoinHint JoinHint
        {
            get
            {
                return this._joinHint;
            }
        }
        
        public virtual AstTableSource TableSource
        {
            get
            {
                return this._tableSource;
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitJoinOn(this);
        }
        
        /// <summary>
        /// join_on : 
        ///    inner=INNER join_hint? JOIN source=table_source ON cond=search_condition 
        /// </summary>
        public static AstJoinOn JoinOn(AstJoinHint? joinHint, AstTableSource source, AstSearchCondition cond)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(joinHint);
            list.Add(source);
            list.Add(cond);
            return new AstJoinOn(Position.Default, list);
        }
        
        /// <summary>
        /// join_on : 
        ///    join_type outer=OUTER join_hint? JOIN source=table_source ON cond=search_condition 
        /// </summary>
        public static AstJoinOn JoinOn(AstJoinType joinType, AstJoinHint? joinHint, AstTableSource source, AstSearchCondition cond)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(joinType);
            list.Add(joinHint);
            list.Add(source);
            list.Add(cond);
            return new AstJoinOn(Position.Default, list);
        }
    }
    
    /// <summary>
    /// cross_join
    /// 	 : CROSS  JOIN  table_source
    /// </summary>
    public partial class AstCrossJoin : AstJoinPart
    {
        
        private AstTableSource _tableSource;
        
        public AstCrossJoin(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableSource>())
                {
                    this._tableSource = ((AstTableSource)(enumerator.Current));
                }
            }
        }
        
        public AstCrossJoin(Position p, AstTableSource tableSource) : 
                base(p)
        {
            this._tableSource = tableSource;
        }
        
        public AstCrossJoin(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableSource>())
                {
                    this._tableSource = ((AstTableSource)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableSource TableSource
        {
            get
            {
                return this._tableSource;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCrossJoin(this);
        }
        
        /// <summary>
        /// cross_join : 
        ///    CROSS JOIN table_source 
        /// </summary>
        public static AstCrossJoin CrossJoin(AstTableSource tableSource)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(tableSource);
            return new AstCrossJoin(Position.Default, list);
        }
    }
    
    /// <summary>
    /// apply_enum
    /// 	 : apply_style  APPLY  source = table_source
    /// </summary>
    public partial class AstApplyEnum : AstJoinPart
    {
        
        private AstApplyStyle _applyStyle;
        
        private AstTableSource _tableSource;
        
        public AstApplyEnum(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstApplyStyle>())
                {
                    this._applyStyle = ((AstApplyStyle)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSource>())
                {
                    this._tableSource = ((AstTableSource)(enumerator.Current));
                }
            }
        }
        
        public AstApplyEnum(Position p, AstApplyStyle applyStyle, AstTableSource tableSource) : 
                base(p)
        {
            this._applyStyle = applyStyle;
            this._tableSource = tableSource;
        }
        
        public AstApplyEnum(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstApplyStyle>())
                {
                    this._applyStyle = ((AstApplyStyle)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSource>())
                {
                    this._tableSource = ((AstTableSource)(enumerator.Current));
                }
            }
        }
        
        public virtual AstApplyStyle ApplyStyle
        {
            get
            {
                return this._applyStyle;
            }
        }
        
        public virtual AstTableSource TableSource
        {
            get
            {
                return this._tableSource;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitApplyEnum(this);
        }
        
        /// <summary>
        /// apply_enum : 
        ///    apply_style APPLY source=table_source 
        /// </summary>
        public static AstApplyEnum ApplyEnum(AstApplyStyle applyStyle, AstTableSource source)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(applyStyle);
            list.Add(source);
            return new AstApplyEnum(Position.Default, list);
        }
    }
    
    /// <summary>
    /// pivot
    /// 	 : PIVOT  pivot_clause  as_table_alias
    /// </summary>
    public partial class AstPivot : AstJoinPart
    {
        
        private AstPivotClause _pivotClause;
        
        private AstAsTableAlias _asTableAlias;
        
        public AstPivot(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPivotClause>())
                {
                    this._pivotClause = ((AstPivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstPivot(Position p, AstPivotClause pivotClause, AstAsTableAlias asTableAlias) : 
                base(p)
        {
            this._pivotClause = pivotClause;
            this._asTableAlias = asTableAlias;
        }
        
        public AstPivot(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPivotClause>())
                {
                    this._pivotClause = ((AstPivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPivotClause PivotClause
        {
            get
            {
                return this._pivotClause;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPivot(this);
        }
        
        /// <summary>
        /// pivot : 
        ///    PIVOT pivot_clause as_table_alias 
        /// </summary>
        public static AstPivot Pivot(AstPivotClause pivotClause, AstAsTableAlias asTableAlias)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(pivotClause);
            list.Add(asTableAlias);
            return new AstPivot(Position.Default, list);
        }
    }
    
    /// <summary>
    /// unpivot
    /// 	 : UNPIVOT  unpivot_clause  as_table_alias
    /// </summary>
    public partial class AstUnpivot : AstJoinPart
    {
        
        private AstUnpivotClause _unpivotClause;
        
        private AstAsTableAlias _asTableAlias;
        
        public AstUnpivot(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUnpivotClause>())
                {
                    this._unpivotClause = ((AstUnpivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstUnpivot(Position p, AstUnpivotClause unpivotClause, AstAsTableAlias asTableAlias) : 
                base(p)
        {
            this._unpivotClause = unpivotClause;
            this._asTableAlias = asTableAlias;
        }
        
        public AstUnpivot(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUnpivotClause>())
                {
                    this._unpivotClause = ((AstUnpivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUnpivotClause UnpivotClause
        {
            get
            {
                return this._unpivotClause;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnpivot(this);
        }
        
        /// <summary>
        /// unpivot : 
        ///    UNPIVOT unpivot_clause as_table_alias 
        /// </summary>
        public static AstUnpivot Unpivot(AstUnpivotClause unpivotClause, AstAsTableAlias asTableAlias)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(unpivotClause);
            list.Add(asTableAlias);
            return new AstUnpivot(Position.Default, list);
        }
    }
    
    /// <summary>
    /// pivot_clause
    /// 	 : LR_BRACKET  aggregate_windowed_function  FOR  full_column_name  IN  column_alias_list  RR_BRACKET
    /// </summary>
    public partial class AstPivotClause : AstRule
    {
        
        private AstAggregateWindowedFunction _aggregateWindowedFunction;
        
        private AstFullColumnName _fullColumnName;
        
        private AstColumnAliasList _columnAliasList;
        
        public AstPivotClause(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAggregateWindowedFunction>())
                {
                    this._aggregateWindowedFunction = ((AstAggregateWindowedFunction)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnAliasList>())
                {
                    this._columnAliasList = ((AstColumnAliasList)(enumerator.Current));
                }
            }
        }
        
        public AstPivotClause(Position p, AstAggregateWindowedFunction aggregateWindowedFunction, AstFullColumnName fullColumnName, AstColumnAliasList columnAliasList) : 
                base(p)
        {
            this._aggregateWindowedFunction = aggregateWindowedFunction;
            this._fullColumnName = fullColumnName;
            this._columnAliasList = columnAliasList;
        }
        
        public AstPivotClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAggregateWindowedFunction>())
                {
                    this._aggregateWindowedFunction = ((AstAggregateWindowedFunction)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnAliasList>())
                {
                    this._columnAliasList = ((AstColumnAliasList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAggregateWindowedFunction AggregateWindowedFunction
        {
            get
            {
                return this._aggregateWindowedFunction;
            }
        }
        
        public virtual AstFullColumnName FullColumnName
        {
            get
            {
                return this._fullColumnName;
            }
        }
        
        public virtual AstColumnAliasList ColumnAliasList
        {
            get
            {
                return this._columnAliasList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPivotClause(this);
        }
        
        /// <summary>
        /// pivot_clause : 
        ///    ( aggregate_windowed_function FOR full_column_name IN column_alias_list ) 
        /// </summary>
        public static AstPivotClause PivotClause(AstAggregateWindowedFunction aggregateWindowedFunction, AstFullColumnName fullColumnName, AstColumnAliasList columnAliasList)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(aggregateWindowedFunction);
            list.Add(fullColumnName);
            list.Add(columnAliasList);
            return new AstPivotClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// unpivot_clause
    /// 	 : LR_BRACKET  unpivot_exp = expression  FOR  full_column_name  IN  LR_BRACKET  full_column_name_list  RR_BRACKET  RR_BRACKET
    /// </summary>
    public partial class AstUnpivotClause : AstRule
    {
        
        private AstExpression _expression;
        
        private AstFullColumnName _fullColumnName;
        
        private AstFullColumnNameList _fullColumnNameList;
        
        public AstUnpivotClause(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnNameList>())
                {
                    this._fullColumnNameList = ((AstFullColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public AstUnpivotClause(Position p, AstExpression expression, AstFullColumnName fullColumnName, AstFullColumnNameList fullColumnNameList) : 
                base(p)
        {
            this._expression = expression;
            this._fullColumnName = fullColumnName;
            this._fullColumnNameList = fullColumnNameList;
        }
        
        public AstUnpivotClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnNameList>())
                {
                    this._fullColumnNameList = ((AstFullColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstFullColumnName FullColumnName
        {
            get
            {
                return this._fullColumnName;
            }
        }
        
        public virtual AstFullColumnNameList FullColumnNameList
        {
            get
            {
                return this._fullColumnNameList;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnpivotClause(this);
        }
        
        /// <summary>
        /// unpivot_clause : 
        ///    ( unpivot_exp=expression FOR full_column_name IN ( full_column_name_list ) ) 
        /// </summary>
        public static AstUnpivotClause UnpivotClause(AstExpression unpivotExp, AstFullColumnName fullColumnName, AstFullColumnNameList fullColumnNameList)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(unpivotExp);
            list.Add(fullColumnName);
            list.Add(fullColumnNameList);
            return new AstUnpivotClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// bulk_option
    /// 	 : id_  EQUAL  bulk_option_value = decimal_string
    /// </summary>
    public partial class AstBulkOption : AstRule
    {
        
        private AstId _id;
        
        private AstDecimalString _decimalString;
        
        public AstBulkOption(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalString>())
                {
                    this._decimalString = ((AstDecimalString)(enumerator.Current));
                }
            }
        }
        
        public AstBulkOption(Position p, AstId id, AstDecimalString decimalString) : 
                base(p)
        {
            this._id = id;
            this._decimalString = decimalString;
        }
        
        public AstBulkOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalString>())
                {
                    this._decimalString = ((AstDecimalString)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstDecimalString DecimalString
        {
            get
            {
                return this._decimalString;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBulkOption(this);
        }
        
        /// <summary>
        /// bulk_option : 
        ///    id_ EQUAL bulk_option_value=decimal_string 
        /// </summary>
        public static AstBulkOption BulkOption(AstId id, AstDecimalString bulkOptionValue)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(id);
            list.Add(bulkOptionValue);
            return new AstBulkOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// freetext_table_andcolumn_names
    /// 	 : full_table_ref  COMMA  (full_column_name | full_column_names | STAR)
    /// </summary>
    public partial class AstFreetextTableAndcolumnNames : AstRule
    {
        
        private AstFullTableRef _fullTableRef;
        
        private AstFullColumnName _fullColumnName;
        
        private AstFullColumnNames _fullColumnNames;
        
        public AstFreetextTableAndcolumnNames(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnNames>())
                {
                    this._fullColumnNames = ((AstFullColumnNames)(enumerator.Current));
                }
            }
        }
        
        public AstFreetextTableAndcolumnNames(Position p, AstFullTableRef fullTableRef, AstFullColumnName fullColumnName, AstFullColumnNames fullColumnNames) : 
                base(p)
        {
            this._fullTableRef = fullTableRef;
            this._fullColumnName = fullColumnName;
            this._fullColumnNames = fullColumnNames;
        }
        
        public AstFreetextTableAndcolumnNames(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnNames>())
                {
                    this._fullColumnNames = ((AstFullColumnNames)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstFullColumnName FullColumnName
        {
            get
            {
                return this._fullColumnName;
            }
        }
        
        public virtual AstFullColumnNames FullColumnNames
        {
            get
            {
                return this._fullColumnNames;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFreetextTableAndcolumnNames(this);
        }
        
        /// <summary>
        /// freetext_table_andcolumn_names : 
        ///    full_table_ref , full_column_name 
        /// </summary>
        public static AstFreetextTableAndcolumnNames FreetextTableAndcolumnNames(AstFullTableRef fullTableRef, AstFullColumnName fullColumnName)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            list.Add(fullColumnName);
            return new AstFreetextTableAndcolumnNames(Position.Default, list);
        }
        
        /// <summary>
        /// freetext_table_andcolumn_names : 
        ///    full_table_ref , full_column_names 
        /// </summary>
        public static AstFreetextTableAndcolumnNames FreetextTableAndcolumnNames(AstFullTableRef fullTableRef, AstFullColumnNames fullColumnNames)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            list.Add(fullColumnNames);
            return new AstFreetextTableAndcolumnNames(Position.Default, list);
        }
        
        /// <summary>
        /// freetext_table_andcolumn_names : 
        ///    full_table_ref , STAR 
        /// </summary>
        public static AstFreetextTableAndcolumnNames FreetextTableAndcolumnNames(AstFullTableRef fullTableRef)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fullTableRef);
            return new AstFreetextTableAndcolumnNames(Position.Default, list);
        }
    }
    
    /// <summary>
    /// switch_section
    /// 	 : WHEN  when_expr = expression  THEN  then_expr = expression
    /// </summary>
    public partial class AstSwitchSection : AstRule
    {
        
        private AstExpression _expression;
        
        public AstSwitchSection(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstSwitchSection(Position p, AstExpression expression) : 
                base(p)
        {
            this._expression = expression;
        }
        
        public AstSwitchSection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSwitchSection(this);
        }
        
        /// <summary>
        /// switch_section : 
        ///    WHEN when_expr=expression THEN then_expr=expression 
        /// </summary>
        public static AstSwitchSection SwitchSection(AstExpression whenExpr, AstExpression thenExpr)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(whenExpr);
            list.Add(thenExpr);
            return new AstSwitchSection(Position.Default, list);
        }
    }
    
    /// <summary>
    /// switch_search_condition_section
    /// 	 : WHEN  search_condition  THEN  expression
    /// </summary>
    public partial class AstSwitchSearchConditionSection : AstRule
    {
        
        private AstSearchCondition _searchCondition;
        
        private AstExpression _expression;
        
        public AstSwitchSearchConditionSection(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstSwitchSearchConditionSection(Position p, AstSearchCondition searchCondition, AstExpression expression) : 
                base(p)
        {
            this._searchCondition = searchCondition;
            this._expression = expression;
        }
        
        public AstSwitchSearchConditionSection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSwitchSearchConditionSection(this);
        }
        
        /// <summary>
        /// switch_search_condition_section : 
        ///    WHEN search_condition THEN expression 
        /// </summary>
        public static AstSwitchSearchConditionSection SwitchSearchConditionSection(AstSearchCondition searchCondition, AstExpression expression)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(searchCondition);
            list.Add(expression);
            return new AstSwitchSearchConditionSection(Position.Default, list);
        }
    }
    
    /// <summary>
    /// as_column_alias
    /// 	 : AS?  column_alias
    /// </summary>
    public partial class AstAsColumnAlias : AstRule
    {
        
        private AstColumnAlias _columnAlias;
        
        public AstAsColumnAlias(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnAlias>())
                {
                    this._columnAlias = ((AstColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public AstAsColumnAlias(Position p, AstColumnAlias columnAlias) : 
                base(p)
        {
            this._columnAlias = columnAlias;
        }
        
        public AstAsColumnAlias(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnAlias>())
                {
                    this._columnAlias = ((AstColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnAlias ColumnAlias
        {
            get
            {
                return this._columnAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsColumnAlias(this);
        }
        
        /// <summary>
        /// as_column_alias : 
        ///    AS? column_alias 
        /// </summary>
        public static AstAsColumnAlias AsColumnAlias(AstColumnAlias columnAlias)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(columnAlias);
            return new AstAsColumnAlias(Position.Default, list);
        }
    }
    
    /// <summary>
    /// as_table_alias
    /// 	 : AS?  table_alias
    /// </summary>
    public partial class AstAsTableAlias : AstRule
    {
        
        private AstTableAlias _tableAlias;
        
        public AstAsTableAlias(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableAlias>())
                {
                    this._tableAlias = ((AstTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstAsTableAlias(Position p, AstTableAlias tableAlias) : 
                base(p)
        {
            this._tableAlias = tableAlias;
        }
        
        public AstAsTableAlias(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableAlias>())
                {
                    this._tableAlias = ((AstTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableAlias TableAlias
        {
            get
            {
                return this._tableAlias;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsTableAlias(this);
        }
        
        /// <summary>
        /// as_table_alias : 
        ///    AS? table_alias 
        /// </summary>
        public static AstAsTableAlias AsTableAlias(AstTableAlias tableAlias)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(tableAlias);
            return new AstAsTableAlias(Position.Default, list);
        }
    }
    
    /// <summary>
    /// deprecated_table_hint
    /// 	 : LR_BRACKET  table_hint  RR_BRACKET
    /// </summary>
    public partial class AstDeprecatedTableHint : AstRule
    {
        
        private AstTableHint _tableHint;
        
        public AstDeprecatedTableHint(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableHint>())
                {
                    this._tableHint = ((AstTableHint)(enumerator.Current));
                }
            }
        }
        
        public AstDeprecatedTableHint(Position p, AstTableHint tableHint) : 
                base(p)
        {
            this._tableHint = tableHint;
        }
        
        public AstDeprecatedTableHint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableHint>())
                {
                    this._tableHint = ((AstTableHint)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableHint TableHint
        {
            get
            {
                return this._tableHint;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeprecatedTableHint(this);
        }
        
        /// <summary>
        /// deprecated_table_hint : 
        ///    ( table_hint ) 
        /// </summary>
        public static AstDeprecatedTableHint DeprecatedTableHint(AstTableHint tableHint)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(tableHint);
            return new AstDeprecatedTableHint(Position.Default, list);
        }
    }
    
    /// <summary>
    /// all_distinct_expression
    /// 	 : all_distinct?  expression
    /// </summary>
    public partial class AstAllDistinctExpression : AstRule
    {
        
        private AstAllDistinct _allDistinct;
        
        private AstExpression _expression;
        
        public AstAllDistinctExpression(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAllDistinct>())
                {
                    this._allDistinct = ((AstAllDistinct)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstAllDistinctExpression(Position p, AstAllDistinct allDistinct, AstExpression expression) : 
                base(p)
        {
            this._allDistinct = allDistinct;
            this._expression = expression;
        }
        
        public AstAllDistinctExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAllDistinct>())
                {
                    this._allDistinct = ((AstAllDistinct)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAllDistinct AllDistinct
        {
            get
            {
                return this._allDistinct;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAllDistinctExpression(this);
        }
        
        /// <summary>
        /// all_distinct_expression : 
        ///    all_distinct? expression 
        /// </summary>
        public static AstAllDistinctExpression AllDistinctExpression(AstAllDistinct? allDistinct, AstExpression expression)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(allDistinct);
            list.Add(expression);
            return new AstAllDistinctExpression(Position.Default, list);
        }
    }
    
    /// <summary>
    /// over_clause
    /// 	 : OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  order_by_clause?  row_or_range_clause?  RR_BRACKET
    /// </summary>
    public partial class AstOverClause : AstRule
    {
        
        private AstExpressionList _expressionList;
        
        private AstOrderByClause _orderByClause;
        
        private AstRowOrRangeClause _rowOrRangeClause;
        
        public AstOverClause(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpressionList>())
                {
                    this._expressionList = ((AstExpressionList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOrderByClause>())
                {
                    this._orderByClause = ((AstOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowOrRangeClause>())
                {
                    this._rowOrRangeClause = ((AstRowOrRangeClause)(enumerator.Current));
                }
            }
        }
        
        public AstOverClause(Position p, AstExpressionList expressionList, AstOrderByClause orderByClause, AstRowOrRangeClause rowOrRangeClause) : 
                base(p)
        {
            this._expressionList = expressionList;
            this._orderByClause = orderByClause;
            this._rowOrRangeClause = rowOrRangeClause;
        }
        
        public AstOverClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpressionList>())
                {
                    this._expressionList = ((AstExpressionList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOrderByClause>())
                {
                    this._orderByClause = ((AstOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowOrRangeClause>())
                {
                    this._rowOrRangeClause = ((AstRowOrRangeClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpressionList ExpressionList
        {
            get
            {
                return this._expressionList;
            }
        }
        
        public virtual AstOrderByClause OrderByClause
        {
            get
            {
                return this._orderByClause;
            }
        }
        
        public virtual AstRowOrRangeClause RowOrRangeClause
        {
            get
            {
                return this._rowOrRangeClause;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOverClause(this);
        }
        
        /// <summary>
        /// over_clause : 
        ///    OVER ( PARTITION BY expression_list order_by_clause? row_or_range_clause? ) 
        /// </summary>
        public static AstOverClause OverClause(AstExpressionList expressionList, AstOrderByClause? orderByClause, AstRowOrRangeClause? rowOrRangeClause)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(expressionList);
            list.Add(orderByClause);
            list.Add(rowOrRangeClause);
            return new AstOverClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// row_or_range_clause
    /// 	 : row_range  window_frame_extent
    /// </summary>
    public partial class AstRowOrRangeClause : AstRule
    {
        
        private AstRowRange _rowRange;
        
        private AstWindowFrameExtent _windowFrameExtent;
        
        public AstRowOrRangeClause(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRowRange>())
                {
                    this._rowRange = ((AstRowRange)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWindowFrameExtent>())
                {
                    this._windowFrameExtent = ((AstWindowFrameExtent)(enumerator.Current));
                }
            }
        }
        
        public AstRowOrRangeClause(Position p, AstRowRange rowRange, AstWindowFrameExtent windowFrameExtent) : 
                base(p)
        {
            this._rowRange = rowRange;
            this._windowFrameExtent = windowFrameExtent;
        }
        
        public AstRowOrRangeClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRowRange>())
                {
                    this._rowRange = ((AstRowRange)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWindowFrameExtent>())
                {
                    this._windowFrameExtent = ((AstWindowFrameExtent)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRowRange RowRange
        {
            get
            {
                return this._rowRange;
            }
        }
        
        public virtual AstWindowFrameExtent WindowFrameExtent
        {
            get
            {
                return this._windowFrameExtent;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRowOrRangeClause(this);
        }
        
        /// <summary>
        /// row_or_range_clause : 
        ///    row_range window_frame_extent 
        /// </summary>
        public static AstRowOrRangeClause RowOrRangeClause(AstRowRange rowRange, AstWindowFrameExtent windowFrameExtent)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(rowRange);
            list.Add(windowFrameExtent);
            return new AstRowOrRangeClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// file_group
    /// 	 : FILEGROUP  file_group_id  (CONTAINS  FILESTREAM)?  (DEFAULT)?  (CONTAINS  MEMORY_OPTIMIZED_DATA)?  file_specs
    /// </summary>
    public partial class AstFileGroup : AstDatabaseFileSpec
    {
        
        private AstFileGroupId _fileGroupId;
        
        private AstFileSpecs _fileSpecs;
        
        public AstFileGroup(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpecs>())
                {
                    this._fileSpecs = ((AstFileSpecs)(enumerator.Current));
                }
            }
        }
        
        public AstFileGroup(Position p, AstFileGroupId fileGroupId, AstFileSpecs fileSpecs) : 
                base(p)
        {
            this._fileGroupId = fileGroupId;
            this._fileSpecs = fileSpecs;
        }
        
        public AstFileGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpecs>())
                {
                    this._fileSpecs = ((AstFileSpecs)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFileGroupId FileGroupId
        {
            get
            {
                return this._fileGroupId;
            }
        }
        
        public virtual AstFileSpecs FileSpecs
        {
            get
            {
                return this._fileSpecs;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileGroup(this);
        }
        
        /// <summary>
        /// file_group : 
        ///    FILEGROUP file_group_id CONTAINS FILESTREAM DEFAULT()? CONTAINS MEMORY_OPTIMIZED_DATA file_specs 
        /// </summary>
        public static AstFileGroup FileGroup(AstFileGroupId fileGroupId, AstFileSpecs fileSpecs)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(fileGroupId);
            list.Add(fileSpecs);
            return new AstFileGroup(Position.Default, list);
        }
    }
    
    /// <summary>
    /// file_spec
    /// 	 : LR_BRACKET  NAME  EQUAL  id_or_string  COMMA?  FILENAME  EQUAL  file = stringtext  COMMA?  (SIZE  EQUAL  size = file_size  COMMA?)?  (MAXSIZE  EQUAL  max_size  COMMA?)?  (FILEGROWTH  EQUAL  filegrowth = file_size  COMMA?)?  RR_BRACKET
    /// </summary>
    public partial class AstFileSpec : AstDatabaseFileSpec
    {
        
        private AstIdOrString _idOrString;
        
        private AstStringtext _stringtext;
        
        private AstFileSize _fileSize;
        
        private AstMaxSize _maxSize;
        
        public AstFileSpec(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIdOrString>())
                {
                    this._idOrString = ((AstIdOrString)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSize>())
                {
                    this._fileSize = ((AstFileSize)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMaxSize>())
                {
                    this._maxSize = ((AstMaxSize)(enumerator.Current));
                }
            }
        }
        
        public AstFileSpec(Position p, AstIdOrString idOrString, AstStringtext stringtext, AstFileSize fileSize, AstMaxSize maxSize) : 
                base(p)
        {
            this._idOrString = idOrString;
            this._stringtext = stringtext;
            this._fileSize = fileSize;
            this._maxSize = maxSize;
        }
        
        public AstFileSpec(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIdOrString>())
                {
                    this._idOrString = ((AstIdOrString)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSize>())
                {
                    this._fileSize = ((AstFileSize)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMaxSize>())
                {
                    this._maxSize = ((AstMaxSize)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIdOrString IdOrString
        {
            get
            {
                return this._idOrString;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstFileSize FileSize
        {
            get
            {
                return this._fileSize;
            }
        }
        
        public virtual AstMaxSize MaxSize
        {
            get
            {
                return this._maxSize;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileSpec(this);
        }
        
        /// <summary>
        /// file_spec : 
        ///    ( NAME EQUAL id_or_string COMMA? FILENAME EQUAL file=stringtext COMMA? SIZE EQUAL size=file_size COMMA? MAXSIZE EQUAL max_size COMMA? FILEGROWTH EQUAL filegrowth=file_size COMMA? ) 
        /// </summary>
        public static AstFileSpec FileSpec(AstIdOrString idOrString, AstStringtext file, AstFileSize size, AstMaxSize maxSize, AstFileSize filegrowth)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(idOrString);
            list.Add(file);
            list.Add(size);
            list.Add(maxSize);
            list.Add(filegrowth);
            return new AstFileSpec(Position.Default, list);
        }
    }
    
    /// <summary>
    /// begin_conversation_timer
    /// 	 : BEGIN  CONVERSATION  TIMER  LR_BRACKET  conversation = local_id  RR_BRACKET  TIMEOUT  EQUAL  time  SEMI?
    /// </summary>
    public partial class AstBeginConversationTimer : AstConversationStatement
    {
        
        private AstLocalId _localId;
        
        private AstTime _time;
        
        public AstBeginConversationTimer(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTime>())
                {
                    this._time = ((AstTime)(enumerator.Current));
                }
            }
        }
        
        public AstBeginConversationTimer(Position p, AstLocalId localId, AstTime time) : 
                base(p)
        {
            this._localId = localId;
            this._time = time;
        }
        
        public AstBeginConversationTimer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTime>())
                {
                    this._time = ((AstTime)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalId LocalId
        {
            get
            {
                return this._localId;
            }
        }
        
        public virtual AstTime Time
        {
            get
            {
                return this._time;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBeginConversationTimer(this);
        }
        
        /// <summary>
        /// begin_conversation_timer : 
        ///    BEGIN CONVERSATION TIMER ( conversation=local_id ) TIMEOUT EQUAL time SEMI? 
        /// </summary>
        public static AstBeginConversationTimer BeginConversationTimer(AstLocalId conversation, AstTime time)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(conversation);
            list.Add(time);
            return new AstBeginConversationTimer(Position.Default, list);
        }
    }
    
    /// <summary>
    /// begin_conversation_dialog
    /// 	 : BEGIN  DIALOG  (CONVERSATION)?  dialog_handle = local_id  FROM  SERVICE  initiator_service_name = service_name  TO  SERVICE  target_service_name = service_name  (COMMA  service_broker_guid = stringtext)?  ON  CONTRACT  contract_name_expression  (WITH  (relayed_conversation  EQUAL  group = local_id  COMMA?)?  (LIFETIME  EQUAL  decimal_local_id  COMMA?)?  (ENCRYPTION  EQUAL  on_off)?)?  SEMI?
    /// </summary>
    public partial class AstBeginConversationDialog : AstConversationStatement
    {
        
        private AstLocalId _localId;
        
        private AstServiceName _serviceName;
        
        private AstStringtext _stringtext;
        
        private AstContractNameExpression _contractNameExpression;
        
        private AstRelayedConversation _relayedConversation;
        
        private AstDecimalLocalId _decimalLocalId;
        
        private AstOnOff _onOff;
        
        public AstBeginConversationDialog(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServiceName>())
                {
                    this._serviceName = ((AstServiceName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstContractNameExpression>())
                {
                    this._contractNameExpression = ((AstContractNameExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRelayedConversation>())
                {
                    this._relayedConversation = ((AstRelayedConversation)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalLocalId>())
                {
                    this._decimalLocalId = ((AstDecimalLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstBeginConversationDialog(Position p, AstLocalId localId, AstServiceName serviceName, AstStringtext stringtext, AstContractNameExpression contractNameExpression, AstRelayedConversation relayedConversation, AstDecimalLocalId decimalLocalId, AstOnOff onOff) : 
                base(p)
        {
            this._localId = localId;
            this._serviceName = serviceName;
            this._stringtext = stringtext;
            this._contractNameExpression = contractNameExpression;
            this._relayedConversation = relayedConversation;
            this._decimalLocalId = decimalLocalId;
            this._onOff = onOff;
        }
        
        public AstBeginConversationDialog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServiceName>())
                {
                    this._serviceName = ((AstServiceName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstContractNameExpression>())
                {
                    this._contractNameExpression = ((AstContractNameExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRelayedConversation>())
                {
                    this._relayedConversation = ((AstRelayedConversation)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalLocalId>())
                {
                    this._decimalLocalId = ((AstDecimalLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalId LocalId
        {
            get
            {
                return this._localId;
            }
        }
        
        public virtual AstServiceName ServiceName
        {
            get
            {
                return this._serviceName;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstContractNameExpression ContractNameExpression
        {
            get
            {
                return this._contractNameExpression;
            }
        }
        
        public virtual AstRelayedConversation RelayedConversation
        {
            get
            {
                return this._relayedConversation;
            }
        }
        
        public virtual AstDecimalLocalId DecimalLocalId
        {
            get
            {
                return this._decimalLocalId;
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBeginConversationDialog(this);
        }
        
        /// <summary>
        /// begin_conversation_dialog : 
        ///    BEGIN DIALOG CONVERSATION()? dialog_handle=local_id FROM SERVICE initiator_service_name=service_name TO SERVICE target_service_name=service_name , service_broker_guid=stringtext ON CONTRACT contract_name_expression WITH relayed_conversation EQUAL group=local_id ,? LIFETIME EQUAL decimal_local_id ,? ENCRYPTION EQUAL on_off SEMI? 
        /// </summary>
        public static AstBeginConversationDialog BeginConversationDialog(AstLocalId dialogHandle, AstServiceName initiatorServiceName, AstServiceName targetServiceName, AstStringtext serviceBrokerGuid, AstContractNameExpression contractNameExpression, AstRelayedConversation relayedConversation, AstLocalId group, AstDecimalLocalId decimalLocalId, AstOnOff onOff)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(dialogHandle);
            list.Add(initiatorServiceName);
            list.Add(targetServiceName);
            list.Add(serviceBrokerGuid);
            list.Add(contractNameExpression);
            list.Add(relayedConversation);
            list.Add(group);
            list.Add(decimalLocalId);
            list.Add(onOff);
            return new AstBeginConversationDialog(Position.Default, list);
        }
    }
    
    /// <summary>
    /// waitfor_conversation
    /// 	 : WAITFOR?  LR_BRACKET  get_conversation  RR_BRACKET  (COMMA?  TIMEOUT  timeout = time)?  SEMI?
    /// </summary>
    public partial class AstWaitforConversation : AstConversationStatement
    {
        
        private AstGetConversation _getConversation;
        
        private AstTime _time;
        
        public AstWaitforConversation(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGetConversation>())
                {
                    this._getConversation = ((AstGetConversation)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTime>())
                {
                    this._time = ((AstTime)(enumerator.Current));
                }
            }
        }
        
        public AstWaitforConversation(Position p, AstGetConversation getConversation, AstTime time) : 
                base(p)
        {
            this._getConversation = getConversation;
            this._time = time;
        }
        
        public AstWaitforConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGetConversation>())
                {
                    this._getConversation = ((AstGetConversation)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTime>())
                {
                    this._time = ((AstTime)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGetConversation GetConversation
        {
            get
            {
                return this._getConversation;
            }
        }
        
        public virtual AstTime Time
        {
            get
            {
                return this._time;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWaitforConversation(this);
        }
        
        /// <summary>
        /// waitfor_conversation : 
        ///    WAITFOR? ( get_conversation ) COMMA? TIMEOUT timeout=time SEMI? 
        /// </summary>
        public static AstWaitforConversation WaitforConversation(AstGetConversation getConversation, AstTime timeout)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(getConversation);
            list.Add(timeout);
            return new AstWaitforConversation(Position.Default, list);
        }
    }
    
    /// <summary>
    /// decimal_scale_prec
    /// 	 : scale = decimal  COMMA  prec = decimal
    /// </summary>
    public partial class AstDecimalScalePrec : AstRule
    {
        
        private AstDecimal _decimal;
        
        public AstDecimalScalePrec(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstDecimalScalePrec(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstDecimalScalePrec(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecimalScalePrec(this);
        }
        
        /// <summary>
        /// decimal_scale_prec : 
        ///    scale=decimal , prec=decimal 
        /// </summary>
        public static AstDecimalScalePrec DecimalScalePrec(AstDecimal scale, AstDecimal prec)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(scale);
            list.Add(prec);
            return new AstDecimalScalePrec(Position.Default, list);
        }
    }
    
    /// <summary>
    /// identity_seed
    /// 	 : seed = decimal  COMMA  inc = decimal
    /// </summary>
    public partial class AstIdentitySeed : AstRule
    {
        
        private AstDecimal _decimal;
        
        public AstIdentitySeed(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstIdentitySeed(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstIdentitySeed(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIdentitySeed(this);
        }
        
        /// <summary>
        /// identity_seed : 
        ///    seed=decimal , inc=decimal 
        /// </summary>
        public static AstIdentitySeed IdentitySeed(AstDecimal seed, AstDecimal inc)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(seed);
            list.Add(inc);
            return new AstIdentitySeed(Position.Default, list);
        }
    }
    
    /// <summary>
    /// file_size
    /// 	 : decimal  file_size_unity?
    /// </summary>
    public partial class AstFileSize : AstRule
    {
        
        private AstDecimal _decimal;
        
        private AstFileSizeUnity _fileSizeUnity;
        
        public AstFileSize(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSizeUnity>())
                {
                    this._fileSizeUnity = ((AstFileSizeUnity)(enumerator.Current));
                }
            }
        }
        
        public AstFileSize(Position p, AstDecimal @decimal, AstFileSizeUnity fileSizeUnity) : 
                base(p)
        {
            this._decimal = @decimal;
            this._fileSizeUnity = fileSizeUnity;
        }
        
        public AstFileSize(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSizeUnity>())
                {
                    this._fileSizeUnity = ((AstFileSizeUnity)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstFileSizeUnity FileSizeUnity
        {
            get
            {
                return this._fileSizeUnity;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileSize(this);
        }
        
        /// <summary>
        /// file_size : 
        ///    decimal file_size_unity? 
        /// </summary>
        public static AstFileSize FileSize(AstDecimal @decimal, AstFileSizeUnity? fileSizeUnity)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(@decimal);
            list.Add(fileSizeUnity);
            return new AstFileSize(Position.Default, list);
        }
    }
    
    /// <summary>
    /// schema_security_predicate_function_id
    /// 	 : tvf_schema_id  DOT  security_predicate_function_id
    /// </summary>
    public partial class AstSchemaSecurityPredicateFunctionId : AstRule
    {
        
        private AstTvfSchemaId _tvfSchemaId;
        
        private AstSecurityPredicateFunctionId _securityPredicateFunctionId;
        
        public AstSchemaSecurityPredicateFunctionId(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTvfSchemaId>())
                {
                    this._tvfSchemaId = ((AstTvfSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSecurityPredicateFunctionId>())
                {
                    this._securityPredicateFunctionId = ((AstSecurityPredicateFunctionId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaSecurityPredicateFunctionId(Position p, AstTvfSchemaId tvfSchemaId, AstSecurityPredicateFunctionId securityPredicateFunctionId) : 
                base(p)
        {
            this._tvfSchemaId = tvfSchemaId;
            this._securityPredicateFunctionId = securityPredicateFunctionId;
        }
        
        public AstSchemaSecurityPredicateFunctionId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTvfSchemaId>())
                {
                    this._tvfSchemaId = ((AstTvfSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSecurityPredicateFunctionId>())
                {
                    this._securityPredicateFunctionId = ((AstSecurityPredicateFunctionId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTvfSchemaId TvfSchemaId
        {
            get
            {
                return this._tvfSchemaId;
            }
        }
        
        public virtual AstSecurityPredicateFunctionId SecurityPredicateFunctionId
        {
            get
            {
                return this._securityPredicateFunctionId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaSecurityPredicateFunctionId(this);
        }
        
        /// <summary>
        /// schema_security_predicate_function_id : 
        ///    tvf_schema_id . security_predicate_function_id 
        /// </summary>
        public static AstSchemaSecurityPredicateFunctionId SchemaSecurityPredicateFunctionId(AstTvfSchemaId tvfSchemaId, AstSecurityPredicateFunctionId securityPredicateFunctionId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(tvfSchemaId);
            list.Add(securityPredicateFunctionId);
            return new AstSchemaSecurityPredicateFunctionId(Position.Default, list);
        }
    }
    
    /// <summary>
    /// server_database_schema_function_ref
    /// 	 : server_id?  DOT  database_id?  DOT  schema_id?  DOT  function_id
    /// </summary>
    public partial class AstServerDatabaseSchemaFunctionRef : AstRule
    {
        
        private AstServerId _serverId;
        
        private AstDatabaseId _databaseId;
        
        private AstSchemaId _schemaId;
        
        private AstFunctionId _functionId;
        
        public AstServerDatabaseSchemaFunctionRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionId>())
                {
                    this._functionId = ((AstFunctionId)(enumerator.Current));
                }
            }
        }
        
        public AstServerDatabaseSchemaFunctionRef(Position p, AstServerId serverId, AstDatabaseId databaseId, AstSchemaId schemaId, AstFunctionId functionId) : 
                base(p)
        {
            this._serverId = serverId;
            this._databaseId = databaseId;
            this._schemaId = schemaId;
            this._functionId = functionId;
        }
        
        public AstServerDatabaseSchemaFunctionRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionId>())
                {
                    this._functionId = ((AstFunctionId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerId ServerId
        {
            get
            {
                return this._serverId;
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstSchemaId SchemaId
        {
            get
            {
                return this._schemaId;
            }
        }
        
        public virtual AstFunctionId FunctionId
        {
            get
            {
                return this._functionId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerDatabaseSchemaFunctionRef(this);
        }
        
        /// <summary>
        /// server_database_schema_function_ref : 
        ///    server_id? . database_id? . schema_id? . function_id 
        /// </summary>
        public static AstServerDatabaseSchemaFunctionRef ServerDatabaseSchemaFunctionRef(AstServerId? serverId, AstDatabaseId? databaseId, AstSchemaId? schemaId, AstFunctionId functionId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(serverId);
            list.Add(databaseId);
            list.Add(schemaId);
            list.Add(functionId);
            return new AstServerDatabaseSchemaFunctionRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// deleteed_inserted_column_id
    /// 	 : deleteed_inserted  DOT  column_id
    /// </summary>
    public partial class AstDeleteedInsertedColumnId : AstRule
    {
        
        private AstDeleteedInserted _deleteedInserted;
        
        private AstColumnId _columnId;
        
        public AstDeleteedInsertedColumnId(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDeleteedInserted>())
                {
                    this._deleteedInserted = ((AstDeleteedInserted)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
            }
        }
        
        public AstDeleteedInsertedColumnId(Position p, AstDeleteedInserted deleteedInserted, AstColumnId columnId) : 
                base(p)
        {
            this._deleteedInserted = deleteedInserted;
            this._columnId = columnId;
        }
        
        public AstDeleteedInsertedColumnId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDeleteedInserted>())
                {
                    this._deleteedInserted = ((AstDeleteedInserted)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDeleteedInserted DeleteedInserted
        {
            get
            {
                return this._deleteedInserted;
            }
        }
        
        public virtual AstColumnId ColumnId
        {
            get
            {
                return this._columnId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeleteedInsertedColumnId(this);
        }
        
        /// <summary>
        /// deleteed_inserted_column_id : 
        ///    deleteed_inserted . column_id 
        /// </summary>
        public static AstDeleteedInsertedColumnId DeleteedInsertedColumnId(AstDeleteedInserted deleteedInserted, AstColumnId columnId)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(deleteedInserted);
            list.Add(columnId);
            return new AstDeleteedInsertedColumnId(Position.Default, list);
        }
    }
    
    /// <summary>
    /// column_ordered
    /// 	 : column_id  asc_desc?
    /// </summary>
    public partial class AstColumnOrdered : AstRule
    {
        
        private AstColumnId _columnId;
        
        private AstAscDesc _ascDesc;
        
        public AstColumnOrdered(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAscDesc>())
                {
                    this._ascDesc = ((AstAscDesc)(enumerator.Current));
                }
            }
        }
        
        public AstColumnOrdered(Position p, AstColumnId columnId, AstAscDesc ascDesc) : 
                base(p)
        {
            this._columnId = columnId;
            this._ascDesc = ascDesc;
        }
        
        public AstColumnOrdered(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAscDesc>())
                {
                    this._ascDesc = ((AstAscDesc)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnId ColumnId
        {
            get
            {
                return this._columnId;
            }
        }
        
        public virtual AstAscDesc AscDesc
        {
            get
            {
                return this._ascDesc;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnOrdered(this);
        }
        
        /// <summary>
        /// column_ordered : 
        ///    column_id asc_desc? 
        /// </summary>
        public static AstColumnOrdered ColumnOrdered(AstColumnId columnId, AstAscDesc? ascDesc)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(columnId);
            list.Add(ascDesc);
            return new AstColumnOrdered(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_index_options
    /// 	 : WITH  LR_BRACKET  relational_index_options  RR_BRACKET
    /// </summary>
    public partial class AstCreateIndexOptions : AstRule
    {
        
        private AstRelationalIndexOptions _relationalIndexOptions;
        
        public AstCreateIndexOptions(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRelationalIndexOptions>())
                {
                    this._relationalIndexOptions = ((AstRelationalIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateIndexOptions(Position p, AstRelationalIndexOptions relationalIndexOptions) : 
                base(p)
        {
            this._relationalIndexOptions = relationalIndexOptions;
        }
        
        public AstCreateIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRelationalIndexOptions>())
                {
                    this._relationalIndexOptions = ((AstRelationalIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRelationalIndexOptions RelationalIndexOptions
        {
            get
            {
                return this._relationalIndexOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateIndexOptions(this);
        }
        
        /// <summary>
        /// create_index_options : 
        ///    WITH ( relational_index_options ) 
        /// </summary>
        public static AstCreateIndexOptions CreateIndexOptions(AstRelationalIndexOptions relationalIndexOptions)
        {
            List<AstRoot> list = new List<AstRoot>();
            list.Add(relationalIndexOptions);
            return new AstCreateIndexOptions(Position.Default, list);
        }
    }
}
