//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Asts.TSql
{
    using System;
    using Bb.Parsers;
    using Antlr4.Runtime;
    using Antlr4.Runtime.Tree;
    
    
    /// <summary>
    /// message_type_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstMessageTypeName : AstTerminalIdentifier
    {
        
        public AstMessageTypeName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstMessageTypeName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstMessageTypeName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMessageTypeName(this);
        }
    }
    
    /// <summary>
    /// partition_function_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstPartitionFunctionName : AstTerminalIdentifier
    {
        
        public AstPartitionFunctionName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstPartitionFunctionName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstPartitionFunctionName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionFunctionName(this);
        }
    }
    
    /// <summary>
    /// partition_scheme_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstPartitionSchemeName : AstTerminalIdentifier
    {
        
        public AstPartitionSchemeName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstPartitionSchemeName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstPartitionSchemeName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionSchemeName(this);
        }
    }
    
    /// <summary>
    /// ids_
    /// 	 : id_  COMMA  id_*
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstIds : AstTerminalIdentifier
    {
        
        public AstIds(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstIds(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstIds(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIds(this);
        }
    }
    
    /// <summary>
    /// host
    /// 	 : id_  DOT  host
    /// 	 | id_  DOT id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstHost : AstTerminalIdentifier
    {
        
        public AstHost(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstHost(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstHost(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitHost(this);
        }
    }
    
    /// <summary>
    /// id_or_string
    /// 	 : id_
    /// 	 | STRING
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstIdOrString : AstTerminalIdentifier
    {
        
        public AstIdOrString(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstIdOrString(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstIdOrString(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIdOrString(this);
        }
    }
    
    /// <summary>
    /// principal_id
    /// 	 : 
    /// 	 | id_
    /// 	 | PUBLIC
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstPrincipalId : AstTerminalIdentifier
    {
        
        public AstPrincipalId(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstPrincipalId(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstPrincipalId(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrincipalId(this);
        }
    }
    
    /// <summary>
    /// table_alias
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstTableAlias : AstTerminalIdentifier
    {
        
        public AstTableAlias(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstTableAlias(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstTableAlias(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableAlias(this);
        }
    }
    
    /// <summary>
    /// column_alias
    /// 	 : id_
    /// 	 | STRING
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstColumnAlias : AstTerminalIdentifier
    {
        
        public AstColumnAlias(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstColumnAlias(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstColumnAlias(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnAlias(this);
        }
    }
    
    /// <summary>
    /// complete_table_name
    /// 	 : linked_server  DOT  DOT  schema_name  DOT server_name  DOT  database_name  DOT  schema_name  DOT database_name  DOT  schema_name?  DOT schema_name  DOT?  tableName
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstCompleteTableName : AstTerminalIdentifier
    {
        
        public AstCompleteTableName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstCompleteTableName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstCompleteTableName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCompleteTableName(this);
        }
    }
    
    /// <summary>
    /// full_table_name
    /// 	 : full_schema_name?  tableName
    /// 	 | full_schema_name?  
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstFullTableName : AstTerminalIdentifier
    {
        
        public AstFullTableName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstFullTableName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstFullTableName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullTableName(this);
        }
    }
    
    /// <summary>
    /// full_schema_name
    /// 	 : database_name  DOT?  schema_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstFullSchemaName : AstTerminalIdentifier
    {
        
        public AstFullSchemaName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstFullSchemaName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstFullSchemaName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullSchemaName(this);
        }
    }
    
    /// <summary>
    /// simple_name
    /// 	 : schema_name  DOT?  
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstSimpleName : AstTerminalIdentifier
    {
        
        public AstSimpleName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstSimpleName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstSimpleName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSimpleName(this);
        }
    }
    
    /// <summary>
    /// func_proc_name_schema
    /// 	 : schema_name  DOT?  function_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstFuncProcNameSchema : AstTerminalIdentifier
    {
        
        public AstFuncProcNameSchema(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstFuncProcNameSchema(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstFuncProcNameSchema(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncProcNameSchema(this);
        }
    }
    
    /// <summary>
    /// func_proc_name_database_schema
    /// 	 : database_name?  DOT  schema_name?  DOT  function_name
    /// 	 | func_proc_name_schema
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstFuncProcNameDatabaseSchema : AstTerminalIdentifier
    {
        
        public AstFuncProcNameDatabaseSchema(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstFuncProcNameDatabaseSchema(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstFuncProcNameDatabaseSchema(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncProcNameDatabaseSchema(this);
        }
    }
    
    /// <summary>
    /// func_proc_name_server_database_schema
    /// 	 : server_name?  DOT  database_name?  DOT  schema_name?  DOT  function_name
    /// 	 | func_proc_name_database_schema
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstFuncProcNameServerDatabaseSchema : AstTerminalIdentifier
    {
        
        public AstFuncProcNameServerDatabaseSchema(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstFuncProcNameServerDatabaseSchema(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstFuncProcNameServerDatabaseSchema(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncProcNameServerDatabaseSchema(this);
        }
    }
    
    /// <summary>
    /// ddl_object
    /// 	 : complete_table_name
    /// 	 | LOCAL_ID
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstDdlObject : AstTerminalIdentifier
    {
        
        public AstDdlObject(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstDdlObject(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstDdlObject(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDdlObject(this);
        }
    }
    
    /// <summary>
    /// full_column_name
    /// 	 : DELETED INSERTED  DOT  column_name
    /// 	 | server_name?  DOT  schema_name?  DOT  tableName?  DOT  column_name
    /// 	 | schema_name?  DOT  tableName?  DOT  column_name
    /// 	 | tableName?  DOT  column_name
    /// 	 | column_name
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstFullColumnName : AstTerminalIdentifier
    {
        
        public AstFullColumnName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstFullColumnName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstFullColumnName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullColumnName(this);
        }
    }
    
    /// <summary>
    /// insert_column_id
    /// 	 :   DOT*  id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstInsertColumnId : AstTerminalIdentifier
    {
        
        public AstInsertColumnId(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstInsertColumnId(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstInsertColumnId(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitInsertColumnId(this);
        }
    }
    
    /// <summary>
    /// cursor_name
    /// 	 : id_
    /// 	 | LOCAL_ID
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstCursorName : AstTerminalIdentifier
    {
        
        public AstCursorName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstCursorName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstCursorName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCursorName(this);
        }
    }
    
    /// <summary>
    /// filestream_filegroup_or_partition_schema_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstFilestreamFilegroupOrPartitionSchemaName : AstTerminalIdentifier
    {
        
        public AstFilestreamFilegroupOrPartitionSchemaName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstFilestreamFilegroupOrPartitionSchemaName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstFilestreamFilegroupOrPartitionSchemaName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilestreamFilegroupOrPartitionSchemaName(this);
        }
    }
    
    /// <summary>
    /// action_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstActionName : AstTerminalIdentifier
    {
        
        public AstActionName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstActionName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstActionName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitActionName(this);
        }
    }
    
    /// <summary>
    /// aggregate_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstAggregateName : AstTerminalIdentifier
    {
        
        public AstAggregateName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstAggregateName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstAggregateName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAggregateName(this);
        }
    }
    
    /// <summary>
    /// app_role_schema
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstAppRoleSchema : AstTerminalIdentifier
    {
        
        public AstAppRoleSchema(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstAppRoleSchema(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstAppRoleSchema(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAppRoleSchema(this);
        }
    }
    
    /// <summary>
    /// application_role
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstApplicationRole : AstTerminalIdentifier
    {
        
        public AstApplicationRole(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstApplicationRole(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstApplicationRole(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitApplicationRole(this);
        }
    }
    
    /// <summary>
    /// assembly_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstAssemblyName : AstTerminalIdentifier
    {
        
        public AstAssemblyName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstAssemblyName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstAssemblyName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAssemblyName(this);
        }
    }
    
    /// <summary>
    /// asym_key_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstAsymKeyName : AstTerminalIdentifier
    {
        
        public AstAsymKeyName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstAsymKeyName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstAsymKeyName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsymKeyName(this);
        }
    }
    
    /// <summary>
    /// audit_action_group_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstAuditActionGroupName : AstTerminalIdentifier
    {
        
        public AstAuditActionGroupName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstAuditActionGroupName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstAuditActionGroupName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditActionGroupName(this);
        }
    }
    
    /// <summary>
    /// audit_guid
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstAuditGuid : AstTerminalIdentifier
    {
        
        public AstAuditGuid(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstAuditGuid(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstAuditGuid(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditGuid(this);
        }
    }
    
    /// <summary>
    /// audit_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstAuditName : AstTerminalIdentifier
    {
        
        public AstAuditName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstAuditName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstAuditName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditName(this);
        }
    }
    
    /// <summary>
    /// audit_specification_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstAuditSpecificationName : AstTerminalIdentifier
    {
        
        public AstAuditSpecificationName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstAuditSpecificationName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstAuditSpecificationName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditSpecificationName(this);
        }
    }
    
    /// <summary>
    /// azure_active_directory_principal
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstAzureActiveDirectoryPrincipal : AstTerminalIdentifier
    {
        
        public AstAzureActiveDirectoryPrincipal(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstAzureActiveDirectoryPrincipal(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstAzureActiveDirectoryPrincipal(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAzureActiveDirectoryPrincipal(this);
        }
    }
    
    /// <summary>
    /// backup_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstBackupName : AstTerminalIdentifier
    {
        
        public AstBackupName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstBackupName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstBackupName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupName(this);
        }
    }
    
    /// <summary>
    /// binding_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstBindingName : AstTerminalIdentifier
    {
        
        public AstBindingName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstBindingName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstBindingName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBindingName(this);
        }
    }
    
    /// <summary>
    /// catalog_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstCatalogName : AstTerminalIdentifier
    {
        
        public AstCatalogName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstCatalogName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstCatalogName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCatalogName(this);
        }
    }
    
    /// <summary>
    /// cert_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstCertName : AstTerminalIdentifier
    {
        
        public AstCertName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstCertName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstCertName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCertName(this);
        }
    }
    
    /// <summary>
    /// certificate_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstCertificateName : AstTerminalIdentifier
    {
        
        public AstCertificateName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstCertificateName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstCertificateName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCertificateName(this);
        }
    }
    
    /// <summary>
    /// class_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstClassName : AstTerminalIdentifier
    {
        
        public AstClassName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstClassName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstClassName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassName(this);
        }
    }
    
    /// <summary>
    /// collation_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstCollationName : AstTerminalIdentifier
    {
        
        public AstCollationName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstCollationName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstCollationName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCollationName(this);
        }
    }
    
    /// <summary>
    /// column_encryption_key
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstColumnEncryptionKey : AstTerminalIdentifier
    {
        
        public AstColumnEncryptionKey(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstColumnEncryptionKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstColumnEncryptionKey(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnEncryptionKey(this);
        }
    }
    
    /// <summary>
    /// column_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstColumnName : AstTerminalIdentifier
    {
        
        public AstColumnName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstColumnName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstColumnName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnName(this);
        }
    }
    
    /// <summary>
    /// column_name_or_arguments
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstColumnNameOrArguments : AstTerminalIdentifier
    {
        
        public AstColumnNameOrArguments(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstColumnNameOrArguments(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstColumnNameOrArguments(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnNameOrArguments(this);
        }
    }
    
    /// <summary>
    /// constraint_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstConstraintName : AstTerminalIdentifier
    {
        
        public AstConstraintName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstConstraintName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstConstraintName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConstraintName(this);
        }
    }
    
    /// <summary>
    /// create_service_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstCreateServiceName : AstTerminalIdentifier
    {
        
        public AstCreateServiceName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstCreateServiceName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstCreateServiceName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServiceName(this);
        }
    }
    
    /// <summary>
    /// credential_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstCredentialName : AstTerminalIdentifier
    {
        
        public AstCredentialName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstCredentialName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstCredentialName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCredentialName(this);
        }
    }
    
    /// <summary>
    /// cryptographic_provider_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstCryptographicProviderName : AstTerminalIdentifier
    {
        
        public AstCryptographicProviderName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstCryptographicProviderName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstCryptographicProviderName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCryptographicProviderName(this);
        }
    }
    
    /// <summary>
    /// data_source_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstDataSourceName : AstTerminalIdentifier
    {
        
        public AstDataSourceName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstDataSourceName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstDataSourceName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDataSourceName(this);
        }
    }
    
    /// <summary>
    /// database_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstDatabaseName : AstTerminalIdentifier
    {
        
        public AstDatabaseName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstDatabaseName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstDatabaseName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseName(this);
        }
    }
    
    /// <summary>
    /// dropped_service_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstDroppedServiceName : AstTerminalIdentifier
    {
        
        public AstDroppedServiceName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstDroppedServiceName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstDroppedServiceName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDroppedServiceName(this);
        }
    }
    
    /// <summary>
    /// encryptor_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstEncryptorName : AstTerminalIdentifier
    {
        
        public AstEncryptorName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstEncryptorName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstEncryptorName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEncryptorName(this);
        }
    }
    
    /// <summary>
    /// endpoint_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstEndpointName : AstTerminalIdentifier
    {
        
        public AstEndpointName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstEndpointName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstEndpointName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEndpointName(this);
        }
    }
    
    /// <summary>
    /// event_customizable_attributue
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstEventCustomizableAttributue : AstTerminalIdentifier
    {
        
        public AstEventCustomizableAttributue(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstEventCustomizableAttributue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstEventCustomizableAttributue(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventCustomizableAttributue(this);
        }
    }
    
    /// <summary>
    /// event_field_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstEventFieldName : AstTerminalIdentifier
    {
        
        public AstEventFieldName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstEventFieldName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstEventFieldName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventFieldName(this);
        }
    }
    
    /// <summary>
    /// event_module_guid
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstEventModuleGuid : AstTerminalIdentifier
    {
        
        public AstEventModuleGuid(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstEventModuleGuid(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstEventModuleGuid(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventModuleGuid(this);
        }
    }
    
    /// <summary>
    /// event_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstEventName : AstTerminalIdentifier
    {
        
        public AstEventName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstEventName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstEventName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventName(this);
        }
    }
    
    /// <summary>
    /// event_notification_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstEventNotificationName : AstTerminalIdentifier
    {
        
        public AstEventNotificationName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstEventNotificationName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstEventNotificationName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventNotificationName(this);
        }
    }
    
    /// <summary>
    /// event_package_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstEventPackageName : AstTerminalIdentifier
    {
        
        public AstEventPackageName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstEventPackageName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstEventPackageName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventPackageName(this);
        }
    }
    
    /// <summary>
    /// event_session_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstEventSessionName : AstTerminalIdentifier
    {
        
        public AstEventSessionName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstEventSessionName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstEventSessionName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionName(this);
        }
    }
    
    /// <summary>
    /// event_type_or_group
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstEventTypeOrGroup : AstTerminalIdentifier
    {
        
        public AstEventTypeOrGroup(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstEventTypeOrGroup(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstEventTypeOrGroup(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventTypeOrGroup(this);
        }
    }
    
    /// <summary>
    /// ext_type
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstExtType : AstTerminalIdentifier
    {
        
        public AstExtType(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstExtType(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstExtType(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExtType(this);
        }
    }
    
    /// <summary>
    /// external_data_source_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstExternalDataSourceName : AstTerminalIdentifier
    {
        
        public AstExternalDataSourceName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstExternalDataSourceName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstExternalDataSourceName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalDataSourceName(this);
        }
    }
    
    /// <summary>
    /// external_file_format_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstExternalFileFormatName : AstTerminalIdentifier
    {
        
        public AstExternalFileFormatName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstExternalFileFormatName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstExternalFileFormatName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalFileFormatName(this);
        }
    }
    
    /// <summary>
    /// external_pool_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstExternalPoolName : AstTerminalIdentifier
    {
        
        public AstExternalPoolName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstExternalPoolName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstExternalPoolName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalPoolName(this);
        }
    }
    
    /// <summary>
    /// file_group_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstFileGroupName : AstTerminalIdentifier
    {
        
        public AstFileGroupName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstFileGroupName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstFileGroupName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileGroupName(this);
        }
    }
    
    /// <summary>
    /// function_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstFunctionName : AstTerminalIdentifier
    {
        
        public AstFunctionName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstFunctionName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstFunctionName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFunctionName(this);
        }
    }
    
    /// <summary>
    /// group_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstGroupName : AstTerminalIdentifier
    {
        
        public AstGroupName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstGroupName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstGroupName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupName(this);
        }
    }
    
    /// <summary>
    /// index_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstIndexName : AstTerminalIdentifier
    {
        
        public AstIndexName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstIndexName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstIndexName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIndexName(this);
        }
    }
    
    /// <summary>
    /// language
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstLanguage : AstTerminalIdentifier
    {
        
        public AstLanguage(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstLanguage(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstLanguage(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLanguage(this);
        }
    }
    
    /// <summary>
    /// library_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstLibraryName : AstTerminalIdentifier
    {
        
        public AstLibraryName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstLibraryName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstLibraryName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLibraryName(this);
        }
    }
    
    /// <summary>
    /// linked_server
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstLinkedServer : AstTerminalIdentifier
    {
        
        public AstLinkedServer(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstLinkedServer(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstLinkedServer(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLinkedServer(this);
        }
    }
    
    /// <summary>
    /// logical_device_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstLogicalDeviceName : AstTerminalIdentifier
    {
        
        public AstLogicalDeviceName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstLogicalDeviceName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstLogicalDeviceName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLogicalDeviceName(this);
        }
    }
    
    /// <summary>
    /// login_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstLoginName : AstTerminalIdentifier
    {
        
        public AstLoginName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstLoginName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstLoginName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLoginName(this);
        }
    }
    
    /// <summary>
    /// master_key
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstMasterKey : AstTerminalIdentifier
    {
        
        public AstMasterKey(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstMasterKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstMasterKey(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMasterKey(this);
        }
    }
    
    /// <summary>
    /// method_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstMethodName : AstTerminalIdentifier
    {
        
        public AstMethodName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstMethodName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstMethodName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMethodName(this);
        }
    }
    
    /// <summary>
    /// modified_contract_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstModifiedContractName : AstTerminalIdentifier
    {
        
        public AstModifiedContractName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstModifiedContractName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstModifiedContractName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModifiedContractName(this);
        }
    }
    
    /// <summary>
    /// modified_service_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstModifiedServiceName : AstTerminalIdentifier
    {
        
        public AstModifiedServiceName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstModifiedServiceName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstModifiedServiceName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModifiedServiceName(this);
        }
    }
    
    /// <summary>
    /// module_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstModuleName : AstTerminalIdentifier
    {
        
        public AstModuleName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstModuleName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstModuleName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModuleName(this);
        }
    }
    
    /// <summary>
    /// network_computer
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstNetworkComputer : AstTerminalIdentifier
    {
        
        public AstNetworkComputer(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstNetworkComputer(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstNetworkComputer(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNetworkComputer(this);
        }
    }
    
    /// <summary>
    /// new_application_role_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstNewApplicationRoleName : AstTerminalIdentifier
    {
        
        public AstNewApplicationRoleName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstNewApplicationRoleName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstNewApplicationRoleName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNewApplicationRoleName(this);
        }
    }
    
    /// <summary>
    /// new_file_group_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstNewFileGroupName : AstTerminalIdentifier
    {
        
        public AstNewFileGroupName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstNewFileGroupName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstNewFileGroupName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNewFileGroupName(this);
        }
    }
    
    /// <summary>
    /// non_static_attr
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstNonStaticAttr : AstTerminalIdentifier
    {
        
        public AstNonStaticAttr(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstNonStaticAttr(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstNonStaticAttr(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNonStaticAttr(this);
        }
    }
    
    /// <summary>
    /// notification_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstNotificationName : AstTerminalIdentifier
    {
        
        public AstNotificationName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstNotificationName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstNotificationName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNotificationName(this);
        }
    }
    
    /// <summary>
    /// object_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstObjectName : AstTerminalIdentifier
    {
        
        public AstObjectName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstObjectName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstObjectName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitObjectName(this);
        }
    }
    
    /// <summary>
    /// owner_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstOwnerName : AstTerminalIdentifier
    {
        
        public AstOwnerName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstOwnerName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstOwnerName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOwnerName(this);
        }
    }
    
    /// <summary>
    /// partition_column_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstPartitionColumnName : AstTerminalIdentifier
    {
        
        public AstPartitionColumnName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstPartitionColumnName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstPartitionColumnName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionColumnName(this);
        }
    }
    
    /// <summary>
    /// pool_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstPoolName : AstTerminalIdentifier
    {
        
        public AstPoolName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstPoolName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstPoolName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPoolName(this);
        }
    }
    
    /// <summary>
    /// predicate_compare_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstPredicateCompareName : AstTerminalIdentifier
    {
        
        public AstPredicateCompareName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstPredicateCompareName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstPredicateCompareName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateCompareName(this);
        }
    }
    
    /// <summary>
    /// predicate_source_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstPredicateSourceName : AstTerminalIdentifier
    {
        
        public AstPredicateSourceName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstPredicateSourceName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstPredicateSourceName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateSourceName(this);
        }
    }
    
    /// <summary>
    /// property_list_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstPropertyListName : AstTerminalIdentifier
    {
        
        public AstPropertyListName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstPropertyListName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstPropertyListName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPropertyListName(this);
        }
    }
    
    /// <summary>
    /// provider_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstProviderName : AstTerminalIdentifier
    {
        
        public AstProviderName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstProviderName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstProviderName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProviderName(this);
        }
    }
    
    /// <summary>
    /// queue_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstQueueName : AstTerminalIdentifier
    {
        
        public AstQueueName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstQueueName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstQueueName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueName(this);
        }
    }
    
    /// <summary>
    /// relational_schema
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstRelationalSchema : AstTerminalIdentifier
    {
        
        public AstRelationalSchema(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstRelationalSchema(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstRelationalSchema(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRelationalSchema(this);
        }
    }
    
    /// <summary>
    /// role_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstRoleName : AstTerminalIdentifier
    {
        
        public AstRoleName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstRoleName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstRoleName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRoleName(this);
        }
    }
    
    /// <summary>
    /// route_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstRouteName : AstTerminalIdentifier
    {
        
        public AstRouteName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstRouteName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstRouteName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRouteName(this);
        }
    }
    
    /// <summary>
    /// rule_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstRuleName : AstTerminalIdentifier
    {
        
        public AstRuleName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstRuleName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstRuleName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRuleName(this);
        }
    }
    
    /// <summary>
    /// schema_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstSchemaName : AstTerminalIdentifier
    {
        
        public AstSchemaName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstSchemaName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstSchemaName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaName(this);
        }
    }
    
    /// <summary>
    /// schema_collection_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstSchemaCollectionName : AstTerminalIdentifier
    {
        
        public AstSchemaCollectionName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstSchemaCollectionName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstSchemaCollectionName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaCollectionName(this);
        }
    }
    
    /// <summary>
    /// security_policy_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstSecurityPolicyName : AstTerminalIdentifier
    {
        
        public AstSecurityPolicyName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstSecurityPolicyName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstSecurityPolicyName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSecurityPolicyName(this);
        }
    }
    
    /// <summary>
    /// security_predicate_function_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstSecurityPredicateFunctionName : AstTerminalIdentifier
    {
        
        public AstSecurityPredicateFunctionName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstSecurityPredicateFunctionName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstSecurityPredicateFunctionName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSecurityPredicateFunctionName(this);
        }
    }
    
    /// <summary>
    /// sequence_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstSequenceName : AstTerminalIdentifier
    {
        
        public AstSequenceName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstSequenceName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstSequenceName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSequenceName(this);
        }
    }
    
    /// <summary>
    /// server_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstServerName : AstTerminalIdentifier
    {
        
        public AstServerName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstServerName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstServerName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerName(this);
        }
    }
    
    /// <summary>
    /// server_role_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstServerRoleName : AstTerminalIdentifier
    {
        
        public AstServerRoleName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstServerRoleName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstServerRoleName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerRoleName(this);
        }
    }
    
    /// <summary>
    /// source_list_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstSourceListName : AstTerminalIdentifier
    {
        
        public AstSourceListName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstSourceListName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstSourceListName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSourceListName(this);
        }
    }
    
    /// <summary>
    /// sql_identifier
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstSqlIdentifier : AstTerminalIdentifier
    {
        
        public AstSqlIdentifier(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstSqlIdentifier(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstSqlIdentifier(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlIdentifier(this);
        }
    }
    
    /// <summary>
    /// static_attr
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstStaticAttr : AstTerminalIdentifier
    {
        
        public AstStaticAttr(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstStaticAttr(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstStaticAttr(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStaticAttr(this);
        }
    }
    
    /// <summary>
    /// statistics_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstStatisticsName : AstTerminalIdentifier
    {
        
        public AstStatisticsName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstStatisticsName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstStatisticsName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStatisticsName(this);
        }
    }
    
    /// <summary>
    /// stoplist_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstStoplistName : AstTerminalIdentifier
    {
        
        public AstStoplistName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstStoplistName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstStoplistName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStoplistName(this);
        }
    }
    
    /// <summary>
    /// symmetric_key_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstSymmetricKeyName : AstTerminalIdentifier
    {
        
        public AstSymmetricKeyName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstSymmetricKeyName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstSymmetricKeyName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSymmetricKeyName(this);
        }
    }
    
    /// <summary>
    /// synonym_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstSynonymName : AstTerminalIdentifier
    {
        
        public AstSynonymName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstSynonymName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstSynonymName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSynonymName(this);
        }
    }
    
    /// <summary>
    /// table_or_view_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstTableOrViewName : AstTerminalIdentifier
    {
        
        public AstTableOrViewName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstTableOrViewName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstTableOrViewName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableOrViewName(this);
        }
    }
    
    /// <summary>
    /// table_variable
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstTableVariable : AstTerminalIdentifier
    {
        
        public AstTableVariable(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstTableVariable(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstTableVariable(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableVariable(this);
        }
    }
    
    /// <summary>
    /// tableName
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstTableName : AstTerminalIdentifier
    {
        
        public AstTableName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstTableName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstTableName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableName(this);
        }
    }
    
    /// <summary>
    /// target_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstTargetName : AstTerminalIdentifier
    {
        
        public AstTargetName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstTargetName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstTargetName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetName(this);
        }
    }
    
    /// <summary>
    /// target_parameter_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstTargetParameterName : AstTerminalIdentifier
    {
        
        public AstTargetParameterName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstTargetParameterName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstTargetParameterName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetParameterName(this);
        }
    }
    
    /// <summary>
    /// trigger_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstTriggerName : AstTerminalIdentifier
    {
        
        public AstTriggerName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstTriggerName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstTriggerName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTriggerName(this);
        }
    }
    
    /// <summary>
    /// tvf_schema_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstTvfSchemaName : AstTerminalIdentifier
    {
        
        public AstTvfSchemaName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstTvfSchemaName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstTvfSchemaName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTvfSchemaName(this);
        }
    }
    
    /// <summary>
    /// type_schema
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstTypeSchema : AstTerminalIdentifier
    {
        
        public AstTypeSchema(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstTypeSchema(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstTypeSchema(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTypeSchema(this);
        }
    }
    
    /// <summary>
    /// udt_column_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstUdtColumnName : AstTerminalIdentifier
    {
        
        public AstUdtColumnName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstUdtColumnName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstUdtColumnName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUdtColumnName(this);
        }
    }
    
    /// <summary>
    /// unscaled_type
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstUnscaledType : AstTerminalIdentifier
    {
        
        public AstUnscaledType(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstUnscaledType(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstUnscaledType(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnscaledType(this);
        }
    }
    
    /// <summary>
    /// user_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstUserName : AstTerminalIdentifier
    {
        
        public AstUserName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstUserName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstUserName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUserName(this);
        }
    }
    
    /// <summary>
    /// windows_principal
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstWindowsPrincipal : AstTerminalIdentifier
    {
        
        public AstWindowsPrincipal(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstWindowsPrincipal(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstWindowsPrincipal(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWindowsPrincipal(this);
        }
    }
    
    /// <summary>
    /// workload_group_group_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstWorkloadGroupGroupName : AstTerminalIdentifier
    {
        
        public AstWorkloadGroupGroupName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstWorkloadGroupGroupName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstWorkloadGroupGroupName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWorkloadGroupGroupName(this);
        }
    }
    
    /// <summary>
    /// workload_group_pool_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassIdentifiers
    /// </remarks>
    public partial class AstWorkloadGroupPoolName : AstTerminalIdentifier
    {
        
        public AstWorkloadGroupPoolName(ITerminalNode t) : 
                base(t)
        {
        }
        
        public AstWorkloadGroupPoolName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public AstWorkloadGroupPoolName(Position position) : 
                base(position)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWorkloadGroupPoolName(this);
        }
    }
}
