//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Parsers.TSql
{
    using System;
    using Bb.Parsers;
    using Bb.Asts.TSql;
    using Bb.Asts;
    using Bb.Parsers.TSql.Antlr;
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using System.Collections;
    
    
    public partial class ScriptTSqlVisitor
    {
        
        /// <summary>
        /// block_statement
        /// 	 : BEGIN  SEMI?  sql_clause*  END  SEMI?
        /// </summary>
        public override AstRoot VisitBlock_statement(TSqlParser.Block_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBlockStatement(context, list);
        }
        
        /// <summary>
        /// return_statement
        /// 	 : RETURN  expression?  SEMI?
        /// </summary>
        public override AstRoot VisitReturn_statement(TSqlParser.Return_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstReturnStatement(context, list);
        }
        
        /// <summary>
        /// if_statement
        /// 	 : IF  search_condition  sql_clause_true = sql_clause  (ELSE  sql_clause_false = sql_clause)?  SEMI?
        /// </summary>
        public override AstRoot VisitIf_statement(TSqlParser.If_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstIfStatement(context, list);
        }
        
        /// <summary>
        /// waitfor_statement
        /// 	 : WAITFOR  receive_statement?  COMMA?  ((DELAY TIME TIMEOUT)  time)?  expression?  SEMI?
        /// </summary>
        public override AstRoot VisitWaitfor_statement(TSqlParser.Waitfor_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWaitforStatement(context, list);
        }
        
        /// <summary>
        /// while_statement
        /// 	 : WHILE  search_condition  (sql_clause BREAK  SEMI? CONTINUE  SEMI?)
        /// </summary>
        public override AstRoot VisitWhile_statement(TSqlParser.While_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWhileStatement(context, list);
        }
        
        /// <summary>
        /// alter_application_role
        /// 	 : ALTER  APPLICATION  ROLE  application_role  WITH  (COMMA?  NAME  EQUAL  new_application_role_name)?  (COMMA?  PASSWORD  EQUAL  application_role_password = STRING)?  (COMMA?  DEFAULT_SCHEMA  EQUAL  app_role_schema)?
        /// </summary>
        public override AstRoot VisitAlter_application_role(TSqlParser.Alter_application_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterApplicationRole(context, list);
        }
        
        /// <summary>
        /// create_application_role
        /// 	 : CREATE  APPLICATION  ROLE  application_role  WITH  (COMMA?  PASSWORD  EQUAL  application_role_password = STRING)?  (COMMA?  DEFAULT_SCHEMA  EQUAL  app_role_schema)?
        /// </summary>
        public override AstRoot VisitCreate_application_role(TSqlParser.Create_application_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateApplicationRole(context, list);
        }
        
        /// <summary>
        /// drop_aggregate
        /// 	 : DROP  AGGREGATE  (IF  EXISTS)?  (schema_name  DOT)?  aggregate_name
        /// </summary>
        public override AstRoot VisitDrop_aggregate(TSqlParser.Drop_aggregateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropAggregate(context, list);
        }
        
        /// <summary>
        /// drop_application_role
        /// 	 : DROP  APPLICATION  ROLE  role_name
        /// </summary>
        public override AstRoot VisitDrop_application_role(TSqlParser.Drop_application_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropApplicationRole(context, list);
        }
        
        /// <summary>
        /// alter_assembly
        /// 	 : alter_assembly_start  assembly_name  alter_assembly_clause
        /// </summary>
        public override AstRoot VisitAlter_assembly(TSqlParser.Alter_assemblyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssembly(context, list);
        }
        
        /// <summary>
        /// alter_assembly_clause
        /// 	 : alter_assembly_from_clause?  alter_assembly_with_clause?  alter_assembly_drop_clause?  alter_assembly_add_clause?
        /// </summary>
        public override AstRoot VisitAlter_assembly_clause(TSqlParser.Alter_assembly_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyClause(context, list);
        }
        
        /// <summary>
        /// alter_assembly_from_clause
        /// 	 : alter_assembly_from_clause_start  (client_assembly_specifier alter_assembly_file_bits)
        /// </summary>
        public override AstRoot VisitAlter_assembly_from_clause(TSqlParser.Alter_assembly_from_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyFromClause(context, list);
        }
        
        /// <summary>
        /// alter_assembly_drop_clause
        /// 	 : alter_assembly_drop  alter_assembly_drop_multiple_files
        /// </summary>
        public override AstRoot VisitAlter_assembly_drop_clause(TSqlParser.Alter_assembly_drop_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyDropClause(context, list);
        }
        
        /// <summary>
        /// alter_assembly_add_clause
        /// 	 : alter_asssembly_add_clause_start  alter_assembly_client_file_clause
        /// </summary>
        public override AstRoot VisitAlter_assembly_add_clause(TSqlParser.Alter_assembly_add_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyAddClause(context, list);
        }
        
        /// <summary>
        /// alter_assembly_client_file_clause
        /// 	 : alter_assembly_file_name  (alter_assembly_as  id_)?
        /// </summary>
        public override AstRoot VisitAlter_assembly_client_file_clause(TSqlParser.Alter_assembly_client_file_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyClientFileClause(context, list);
        }
        
        /// <summary>
        /// alter_assembly_file_bits
        /// 	 : alter_assembly_as  id_
        /// </summary>
        public override AstRoot VisitAlter_assembly_file_bits(TSqlParser.Alter_assembly_file_bitsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyFileBits(context, list);
        }
        
        /// <summary>
        /// alter_assembly_with_clause
        /// 	 : alter_assembly_with  assembly_option
        /// </summary>
        public override AstRoot VisitAlter_assembly_with_clause(TSqlParser.Alter_assembly_with_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyWithClause(context, list);
        }
        
        /// <summary>
        /// network_file_share
        /// 	 : network_file_start  network_computer  file_path
        /// </summary>
        public override AstRoot VisitNetwork_file_share(TSqlParser.Network_file_shareContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstNetworkFileShare(context, list);
        }
        
        /// <summary>
        /// local_file
        /// 	 : local_drive  file_path
        /// </summary>
        public override AstRoot VisitLocal_file(TSqlParser.Local_fileContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstLocalFile(context, list);
        }
        
        /// <summary>
        /// create_assembly
        /// 	 : CREATE  ASSEMBLY  assembly_name  (AUTHORIZATION  owner_name)?  FROM  binary_content_nexts  (WITH  PERMISSION_SET  EQUAL  (SAFE EXTERNAL_ACCESS UNSAFE))?
        /// </summary>
        public override AstRoot VisitCreate_assembly(TSqlParser.Create_assemblyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateAssembly(context, list);
        }
        
        /// <summary>
        /// binary_content_next
        /// 	 : COMMA?  binary_content
        /// </summary>
        public override AstRoot VisitBinary_content_next(TSqlParser.Binary_content_nextContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBinaryContentNext(context, list);
        }
        
        /// <summary>
        /// alter_asymmetric_key
        /// 	 : alter_asymmetric_key_start  asym_key_name  (asymmetric_key_option REMOVE  PRIVATE  KEY)
        /// </summary>
        public override AstRoot VisitAlter_asymmetric_key(TSqlParser.Alter_asymmetric_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAsymmetricKey(context, list);
        }
        
        /// <summary>
        /// asymmetric_key_option
        /// 	 : asymmetric_key_option_start  asymmetric_key_password_change_option  (COMMA  asymmetric_key_password_change_option)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAsymmetric_key_option(TSqlParser.Asymmetric_key_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAsymmetricKeyOption(context, list);
        }
        
        /// <summary>
        /// create_asymmetric_key
        /// 	 : CREATE  ASYMMETRIC  KEY  asym_key_name  (AUTHORIZATION  database_name)?  (FROM  (FILE  EQUAL  STRING EXECUTABLE_FILE  EQUAL  STRING ASSEMBLY  assembly_name PROVIDER  provider_name))?  (WITH  (ALGORITHM  EQUAL  (RSA_4096 RSA_3072 RSA_2048 RSA_1024 RSA_512) PROVIDER_KEY_NAME  EQUAL  provider_key_name = STRING CREATION_DISPOSITION  EQUAL  (CREATE_NEW OPEN_EXISTING)))?  (ENCRYPTION  BY  PASSWORD  EQUAL  asymmetric_key_password = STRING)?
        /// </summary>
        public override AstRoot VisitCreate_asymmetric_key(TSqlParser.Create_asymmetric_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateAsymmetricKey(context, list);
        }
        
        /// <summary>
        /// alter_authorization
        /// 	 : alter_authorization_start  (class_type  colon_colon)?  entity = entity_name  entity_to  authorization_grantee
        /// </summary>
        public override AstRoot VisitAlter_authorization(TSqlParser.Alter_authorizationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAuthorization(context, list);
        }
        
        /// <summary>
        /// alter_authorization_for_sql_database
        /// 	 : alter_authorization_start  (class_type_for_sql_database  colon_colon)?  entity = entity_name  entity_to  authorization_grantee
        /// </summary>
        public override AstRoot VisitAlter_authorization_for_sql_database(TSqlParser.Alter_authorization_for_sql_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAuthorizationForSqlDatabase(context, list);
        }
        
        /// <summary>
        /// alter_authorization_for_azure_dw
        /// 	 : alter_authorization_start  (class_type_for_azure_dw  colon_colon)?  entity = entity_name_for_azure_dw  entity_to  authorization_grantee
        /// </summary>
        public override AstRoot VisitAlter_authorization_for_azure_dw(TSqlParser.Alter_authorization_for_azure_dwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAuthorizationForAzureDw(context, list);
        }
        
        /// <summary>
        /// alter_authorization_for_parallel_dw
        /// 	 : alter_authorization_start  (class_type_for_parallel_dw  colon_colon)?  entity = entity_name_for_parallel_dw  entity_to  authorization_grantee
        /// </summary>
        public override AstRoot VisitAlter_authorization_for_parallel_dw(TSqlParser.Alter_authorization_for_parallel_dwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAuthorizationForParallelDw(context, list);
        }
        
        /// <summary>
        /// drop_availability_group
        /// 	 : DROP  AVAILABILITY  GROUP  group_name
        /// </summary>
        public override AstRoot VisitDrop_availability_group(TSqlParser.Drop_availability_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropAvailabilityGroup(context, list);
        }
        
        /// <summary>
        /// alter_availability_group
        /// 	 : alter_availability_group_start  alter_availability_group_options
        /// </summary>
        public override AstRoot VisitAlter_availability_group(TSqlParser.Alter_availability_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAvailabilityGroup(context, list);
        }
        
        /// <summary>
        /// alter_availability_group_start
        /// 	 : ALTER  AVAILABILITY  GROUP  group_name
        /// </summary>
        public override AstRoot VisitAlter_availability_group_start(TSqlParser.Alter_availability_group_startContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAvailabilityGroupStart(context, list);
        }
        
        /// <summary>
        /// alter_certificate
        /// 	 : ALTER  CERTIFICATE  certificate_name  (REMOVE  PRIVATE_KEY WITH  PRIVATE  KEY  LR_BRACKET  (FILE  EQUAL  STRING  COMMA? DECRYPTION  BY  PASSWORD  EQUAL  STRING  COMMA? ENCRYPTION  BY  PASSWORD  EQUAL  STRING  COMMA?)+  RR_BRACKET WITH  ACTIVE  FOR  BEGIN_DIALOG  EQUAL  on_off)
        /// </summary>
        public override AstRoot VisitAlter_certificate(TSqlParser.Alter_certificateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterCertificate(context, list);
        }
        
        /// <summary>
        /// alter_column_encryption_key
        /// 	 : ALTER  COLUMN  ENCRYPTION  KEY  column_encryption_key  (ADD DROP)  VALUE  LR_BRACKET  COLUMN_MASTER_KEY  EQUAL  column_master_key_name = id_  (COMMA  ALGORITHM  EQUAL  algorithm_name = STRING  COMMA  ENCRYPTED_VALUE  EQUAL  BINARY)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_column_encryption_key(TSqlParser.Alter_column_encryption_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterColumnEncryptionKey(context, list);
        }
        
        /// <summary>
        /// create_column_encryption_key
        /// 	 : CREATE  COLUMN  ENCRYPTION  KEY  column_encryption_key  WITH  VALUES  (LR_BRACKET  COMMA?  COLUMN_MASTER_KEY  EQUAL  column_master_key_name = id_  COMMA  ALGORITHM  EQUAL  algorithm_name = STRING  COMMA  ENCRYPTED_VALUE  EQUAL  encrypted_value = BINARY  RR_BRACKET  COMMA?)+
        /// </summary>
        public override AstRoot VisitCreate_column_encryption_key(TSqlParser.Create_column_encryption_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateColumnEncryptionKey(context, list);
        }
        
        /// <summary>
        /// drop_certificate
        /// 	 : DROP  CERTIFICATE  certificate_name
        /// </summary>
        public override AstRoot VisitDrop_certificate(TSqlParser.Drop_certificateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropCertificate(context, list);
        }
        
        /// <summary>
        /// drop_column_encryption_key
        /// 	 : DROP  COLUMN  ENCRYPTION  KEY  encryptor_name
        /// </summary>
        public override AstRoot VisitDrop_column_encryption_key(TSqlParser.Drop_column_encryption_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropColumnEncryptionKey(context, list);
        }
        
        /// <summary>
        /// drop_column_master_key
        /// 	 : DROP  COLUMN  MASTER  KEY  master_key
        /// </summary>
        public override AstRoot VisitDrop_column_master_key(TSqlParser.Drop_column_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropColumnMasterKey(context, list);
        }
        
        /// <summary>
        /// drop_credential
        /// 	 : DROP  CREDENTIAL  credential_name
        /// </summary>
        public override AstRoot VisitDrop_credential(TSqlParser.Drop_credentialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropCredential(context, list);
        }
        
        /// <summary>
        /// drop_cryptograhic_provider
        /// 	 : DROP  CRYPTOGRAPHIC  PROVIDER  provider_name
        /// </summary>
        public override AstRoot VisitDrop_cryptograhic_provider(TSqlParser.Drop_cryptograhic_providerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropCryptograhicProvider(context, list);
        }
        
        /// <summary>
        /// drop_database_audit_specification
        /// 	 : DROP  DATABASE  AUDIT  SPECIFICATION  audit_name
        /// </summary>
        public override AstRoot VisitDrop_database_audit_specification(TSqlParser.Drop_database_audit_specificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDatabaseAuditSpecification(context, list);
        }
        
        /// <summary>
        /// drop_database_scoped_credential
        /// 	 : DROP  DATABASE  SCOPED  CREDENTIAL  credential_name
        /// </summary>
        public override AstRoot VisitDrop_database_scoped_credential(TSqlParser.Drop_database_scoped_credentialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDatabaseScopedCredential(context, list);
        }
        
        /// <summary>
        /// drop_endpoint
        /// 	 : DROP  ENDPOINT  endpoint_name
        /// </summary>
        public override AstRoot VisitDrop_endpoint(TSqlParser.Drop_endpointContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropEndpoint(context, list);
        }
        
        /// <summary>
        /// drop_external_data_source
        /// 	 : DROP  EXTERNAL  DATA  SOURCE  external_data_source_name
        /// </summary>
        public override AstRoot VisitDrop_external_data_source(TSqlParser.Drop_external_data_sourceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropExternalDataSource(context, list);
        }
        
        /// <summary>
        /// drop_external_file_format
        /// 	 : DROP  EXTERNAL  FILE  FORMAT  external_file_format_name
        /// </summary>
        public override AstRoot VisitDrop_external_file_format(TSqlParser.Drop_external_file_formatContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropExternalFileFormat(context, list);
        }
        
        /// <summary>
        /// drop_external_library
        /// 	 : DROP  EXTERNAL  LIBRARY  library_name  (AUTHORIZATION  owner_name)?
        /// </summary>
        public override AstRoot VisitDrop_external_library(TSqlParser.Drop_external_libraryContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropExternalLibrary(context, list);
        }
        
        /// <summary>
        /// drop_external_resource_pool
        /// 	 : DROP  EXTERNAL  RESOURCE  POOL  pool_name
        /// </summary>
        public override AstRoot VisitDrop_external_resource_pool(TSqlParser.Drop_external_resource_poolContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropExternalResourcePool(context, list);
        }
        
        /// <summary>
        /// drop_external_table
        /// 	 : DROP  EXTERNAL  TABLE  (database_name  DOT)?  (schema_name  DOT)?  tableName
        /// </summary>
        public override AstRoot VisitDrop_external_table(TSqlParser.Drop_external_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropExternalTable(context, list);
        }
        
        /// <summary>
        /// drop_event_session
        /// 	 : DROP  EVENT  SESSION  event_session_name  ON  SERVER
        /// </summary>
        public override AstRoot VisitDrop_event_session(TSqlParser.Drop_event_sessionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropEventSession(context, list);
        }
        
        /// <summary>
        /// drop_fulltext_catalog
        /// 	 : DROP  FULLTEXT  CATALOG  catalog_name
        /// </summary>
        public override AstRoot VisitDrop_fulltext_catalog(TSqlParser.Drop_fulltext_catalogContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropFulltextCatalog(context, list);
        }
        
        /// <summary>
        /// drop_fulltext_index
        /// 	 : DROP  FULLTEXT  INDEX  ON  (schema_name  DOT)?  tableName
        /// </summary>
        public override AstRoot VisitDrop_fulltext_index(TSqlParser.Drop_fulltext_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropFulltextIndex(context, list);
        }
        
        /// <summary>
        /// drop_fulltext_stoplist
        /// 	 : DROP  FULLTEXT  STOPLIST  stoplist_name
        /// </summary>
        public override AstRoot VisitDrop_fulltext_stoplist(TSqlParser.Drop_fulltext_stoplistContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropFulltextStoplist(context, list);
        }
        
        /// <summary>
        /// drop_login
        /// 	 : DROP  LOGIN  login_name
        /// </summary>
        public override AstRoot VisitDrop_login(TSqlParser.Drop_loginContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropLogin(context, list);
        }
        
        /// <summary>
        /// drop_message_type
        /// 	 : DROP  MESSAGE  TYPE  message_type_name
        /// </summary>
        public override AstRoot VisitDrop_message_type(TSqlParser.Drop_message_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropMessageType(context, list);
        }
        
        /// <summary>
        /// drop_partition_function
        /// 	 : DROP  PARTITION  FUNCTION  partition_function_name
        /// </summary>
        public override AstRoot VisitDrop_partition_function(TSqlParser.Drop_partition_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropPartitionFunction(context, list);
        }
        
        /// <summary>
        /// drop_partition_scheme
        /// 	 : DROP  PARTITION  SCHEME  partition_scheme_name
        /// </summary>
        public override AstRoot VisitDrop_partition_scheme(TSqlParser.Drop_partition_schemeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropPartitionScheme(context, list);
        }
        
        /// <summary>
        /// drop_queue
        /// 	 : DROP  QUEUE  (database_name  DOT)?  (schema_name  DOT)?  queue_name
        /// </summary>
        public override AstRoot VisitDrop_queue(TSqlParser.Drop_queueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropQueue(context, list);
        }
        
        /// <summary>
        /// drop_remote_service_binding
        /// 	 : DROP  REMOTE  SERVICE  BINDING  binding_name
        /// </summary>
        public override AstRoot VisitDrop_remote_service_binding(TSqlParser.Drop_remote_service_bindingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropRemoteServiceBinding(context, list);
        }
        
        /// <summary>
        /// drop_resource_pool
        /// 	 : DROP  RESOURCE  POOL  pool_name
        /// </summary>
        public override AstRoot VisitDrop_resource_pool(TSqlParser.Drop_resource_poolContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropResourcePool(context, list);
        }
        
        /// <summary>
        /// drop_db_role
        /// 	 : DROP  ROLE  (IF  EXISTS)?  role_name
        /// </summary>
        public override AstRoot VisitDrop_db_role(TSqlParser.Drop_db_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDbRole(context, list);
        }
        
        /// <summary>
        /// drop_route
        /// 	 : DROP  ROUTE  route_name
        /// </summary>
        public override AstRoot VisitDrop_route(TSqlParser.Drop_routeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropRoute(context, list);
        }
        
        /// <summary>
        /// drop_schema
        /// 	 : DROP  SCHEMA  (IF  EXISTS)?  schema_name
        /// </summary>
        public override AstRoot VisitDrop_schema(TSqlParser.Drop_schemaContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSchema(context, list);
        }
        
        /// <summary>
        /// drop_search_property_list
        /// 	 : DROP  SEARCH  PROPERTY  LIST  property_list_name
        /// </summary>
        public override AstRoot VisitDrop_search_property_list(TSqlParser.Drop_search_property_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSearchPropertyList(context, list);
        }
        
        /// <summary>
        /// drop_security_policy
        /// 	 : DROP  SECURITY  POLICY  (IF  EXISTS)?  (schema_name  DOT)?  security_policy_name
        /// </summary>
        public override AstRoot VisitDrop_security_policy(TSqlParser.Drop_security_policyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSecurityPolicy(context, list);
        }
        
        /// <summary>
        /// drop_server_audit
        /// 	 : DROP  SERVER  AUDIT  audit_name
        /// </summary>
        public override AstRoot VisitDrop_server_audit(TSqlParser.Drop_server_auditContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropServerAudit(context, list);
        }
        
        /// <summary>
        /// drop_server_audit_specification
        /// 	 : DROP  SERVER  AUDIT  SPECIFICATION  audit_name
        /// </summary>
        public override AstRoot VisitDrop_server_audit_specification(TSqlParser.Drop_server_audit_specificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropServerAuditSpecification(context, list);
        }
        
        /// <summary>
        /// drop_server_role
        /// 	 : DROP  SERVER  ROLE  role_name
        /// </summary>
        public override AstRoot VisitDrop_server_role(TSqlParser.Drop_server_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropServerRole(context, list);
        }
        
        /// <summary>
        /// drop_service
        /// 	 : DROP  SERVICE  dropped_service_name
        /// </summary>
        public override AstRoot VisitDrop_service(TSqlParser.Drop_serviceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropService(context, list);
        }
        
        /// <summary>
        /// drop_signature
        /// 	 : DROP  (COUNTER)?  SIGNATURE  FROM  (schema_name  DOT)?  module_name  BY  (COMMA?  CERTIFICATE  certificate_name COMMA?  ASYMMETRIC  KEY  asym_key_name)+
        /// </summary>
        public override AstRoot VisitDrop_signature(TSqlParser.Drop_signatureContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSignature(context, list);
        }
        
        /// <summary>
        /// drop_statistics_name_azure_dw_and_pdw
        /// 	 : DROP  STATISTICS  (schema_name  DOT)?  object_name  DOT  statistics_name
        /// </summary>
        public override AstRoot VisitDrop_statistics_name_azure_dw_and_pdw(TSqlParser.Drop_statistics_name_azure_dw_and_pdwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropStatisticsNameAzureDwAndPdw(context, list);
        }
        
        /// <summary>
        /// drop_symmetric_key
        /// 	 : DROP  SYMMETRIC  KEY  symmetric_key_name  (REMOVE  PROVIDER  KEY)?
        /// </summary>
        public override AstRoot VisitDrop_symmetric_key(TSqlParser.Drop_symmetric_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSymmetricKey(context, list);
        }
        
        /// <summary>
        /// drop_synonym
        /// 	 : DROP  SYNONYM  (IF  EXISTS)?  (schema_name  DOT)?  synonym_name
        /// </summary>
        public override AstRoot VisitDrop_synonym(TSqlParser.Drop_synonymContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSynonym(context, list);
        }
        
        /// <summary>
        /// drop_user
        /// 	 : DROP  USER  (IF  EXISTS)?  user_name
        /// </summary>
        public override AstRoot VisitDrop_user(TSqlParser.Drop_userContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropUser(context, list);
        }
        
        /// <summary>
        /// drop_workload_group
        /// 	 : DROP  WORKLOAD  GROUP  group_name
        /// </summary>
        public override AstRoot VisitDrop_workload_group(TSqlParser.Drop_workload_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropWorkloadGroup(context, list);
        }
        
        /// <summary>
        /// drop_xml_schema_collection
        /// 	 : DROP  XML  SCHEMA  COLLECTION  (relational_schema  DOT)?  sql_identifier
        /// </summary>
        public override AstRoot VisitDrop_xml_schema_collection(TSqlParser.Drop_xml_schema_collectionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropXmlSchemaCollection(context, list);
        }
        
        /// <summary>
        /// lock_table
        /// 	 : LOCK  TABLE  full_table_name  IN  (SHARE EXCLUSIVE)  MODE  (WAIT  seconds = DECIMAL NOWAIT)?  SEMI?
        /// </summary>
        public override AstRoot VisitLock_table(TSqlParser.Lock_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstLockTable(context, list);
        }
        
        /// <summary>
        /// truncate_table
        /// 	 : TRUNCATE  TABLE  full_table_name  (WITH  LR_BRACKET  PARTITIONS  LR_BRACKET  (COMMA?  (DECIMAL DECIMAL  TO  DECIMAL))+  RR_BRACKET  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitTruncate_table(TSqlParser.Truncate_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTruncateTable(context, list);
        }
        
        /// <summary>
        /// alter_credential
        /// 	 : ALTER  CREDENTIAL  credential_name  WITH  IDENTITY  EQUAL  identity_name = STRING  (COMMA  SECRET  EQUAL  secret = STRING)?
        /// </summary>
        public override AstRoot VisitAlter_credential(TSqlParser.Alter_credentialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterCredential(context, list);
        }
        
        /// <summary>
        /// create_credential
        /// 	 : CREATE  CREDENTIAL  credential_name  WITH  IDENTITY  EQUAL  identity_name = STRING  (COMMA  SECRET  EQUAL  secret = STRING)?  (FOR  CRYPTOGRAPHIC  PROVIDER  cryptographic_provider_name)?
        /// </summary>
        public override AstRoot VisitCreate_credential(TSqlParser.Create_credentialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateCredential(context, list);
        }
        
        /// <summary>
        /// alter_cryptographic_provider
        /// 	 : ALTER  CRYPTOGRAPHIC  PROVIDER  provider_name  (FROM  FILE  EQUAL  crypto_provider_ddl_file = STRING)?  (ENABLE DISABLE)?
        /// </summary>
        public override AstRoot VisitAlter_cryptographic_provider(TSqlParser.Alter_cryptographic_providerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterCryptographicProvider(context, list);
        }
        
        /// <summary>
        /// create_cryptographic_provider
        /// 	 : CREATE  CRYPTOGRAPHIC  PROVIDER  provider_name  FROM  FILE  EQUAL  path_of_DLL = STRING
        /// </summary>
        public override AstRoot VisitCreate_cryptographic_provider(TSqlParser.Create_cryptographic_providerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateCryptographicProvider(context, list);
        }
        
        /// <summary>
        /// create_event_notification
        /// 	 : CREATE  EVENT  NOTIFICATION  event_notification_name  ON  (SERVER DATABASE QUEUE  queue_name)  (WITH  FAN_IN)?  FOR  (COMMA?  event_type_or_group)+  TO  SERVICE  broker_service = STRING  COMMA  broker_service_specifier_or_current_database = STRING
        /// </summary>
        public override AstRoot VisitCreate_event_notification(TSqlParser.Create_event_notificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateEventNotification(context, list);
        }
        
        /// <summary>
        /// create_or_alter_event_session
        /// 	 : (CREATE ALTER)  EVENT  SESSION  event_session_name  ON  SERVER  (COMMA?  ADD  EVENT  ((event_module_guid  DOT)?  event_package_name  DOT  event_name)  (LR_BRACKET  (SET  (COMMA?  event_customizable_attributue  EQUAL  (DECIMAL STRING))*)?  (ACTION  LR_BRACKET  (COMMA?  (event_module_guid  DOT)?  event_package_name  DOT  action_name)+  RR_BRACKET)+  (WHERE  event_session_predicate_expression)?  RR_BRACKET)*)*  (COMMA?  DROP  EVENT  (event_module_guid  DOT)?  event_package_name  DOT  event_name)*  ((ADD  TARGET  (event_module_guid  DOT)?  event_package_name  DOT  target_name)  (LR_BRACKET  SET  (COMMA?  target_parameter_name  EQUAL  (LR_BRACKET?  DECIMAL  RR_BRACKET? STRING))+  RR_BRACKET)*)*  (DROP  TARGET  (event_module_guid  DOT)?  event_package_name  DOT  target_name)*  (WITH  LR_BRACKET  (COMMA?  MAX_MEMORY  EQUAL  max_memory = DECIMAL  (KB MB))?  (COMMA?  EVENT_RETENTION_MODE  EQUAL  (ALLOW_SINGLE_EVENT_LOSS ALLOW_MULTIPLE_EVENT_LOSS NO_EVENT_LOSS))?  (COMMA?  MAX_DISPATCH_LATENCY  EQUAL  (max_dispatch_latency_seconds = DECIMAL  SECONDS INFINITE))?  (COMMA?  MAX_EVENT_SIZE  EQUAL  max_event_size = DECIMAL  (KB MB))?  (COMMA?  MEMORY_PARTITION_MODE  EQUAL  (NONE PER_NODE PER_CPU))?  (COMMA?  TRACK_CAUSALITY  EQUAL  on_off)?  (COMMA?  STARTUP_STATE  EQUAL  on_off)?  RR_BRACKET)?  (STATE  EQUAL  (START STOP))?
        /// </summary>
        public override AstRoot VisitCreate_or_alter_event_session(TSqlParser.Create_or_alter_event_sessionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterEventSession(context, list);
        }
        
        /// <summary>
        /// alter_external_library
        /// 	 : ALTER  EXTERNAL  LIBRARY  library_name  (AUTHORIZATION  owner_name)?  (SET ADD)  (LR_BRACKET  CONTENT  EQUAL  (client_library = STRING BINARY NONE)  (COMMA  PLATFORM  EQUAL  (WINDOWS LINUX)?  RR_BRACKET)  WITH  (COMMA?  LANGUAGE  EQUAL  (R PYTHON) DATA_SOURCE  EQUAL  external_data_source_name)+  RR_BRACKET)
        /// </summary>
        public override AstRoot VisitAlter_external_library(TSqlParser.Alter_external_libraryContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterExternalLibrary(context, list);
        }
        
        /// <summary>
        /// create_external_library
        /// 	 : CREATE  EXTERNAL  LIBRARY  library_name  (AUTHORIZATION  owner_name)?  FROM  (COMMA?  LR_BRACKET?  (CONTENT  EQUAL)?  (client_library = STRING BINARY NONE)  (COMMA  PLATFORM  EQUAL  (WINDOWS LINUX)?  RR_BRACKET)?)  (WITH  (COMMA?  LANGUAGE  EQUAL  (R PYTHON) DATA_SOURCE  EQUAL  external_data_source_name)+  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitCreate_external_library(TSqlParser.Create_external_libraryContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateExternalLibrary(context, list);
        }
        
        /// <summary>
        /// create_external_resource_pool
        /// 	 : CREATE  EXTERNAL  RESOURCE  POOL  pool_name  WITH  LR_BRACKET  MAX_CPU_PERCENT  EQUAL  max_cpu_percent = DECIMAL  (COMMA?  AFFINITY  CPU  EQUAL  (AUTO (COMMA?  DECIMAL  TO  DECIMAL COMMA  DECIMAL)+) NUMANODE  EQUAL  (COMMA?  DECIMAL  TO  DECIMAL COMMA?  DECIMAL)+)  (COMMA?  MAX_MEMORY_PERCENT  EQUAL  max_memory_percent = DECIMAL)?  (COMMA?  MAX_PROCESSES  EQUAL  max_processes = DECIMAL)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCreate_external_resource_pool(TSqlParser.Create_external_resource_poolContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateExternalResourcePool(context, list);
        }
        
        /// <summary>
        /// alter_fulltext_catalog
        /// 	 : ALTER  FULLTEXT  CATALOG  catalog_name  (REBUILD  (WITH  ACCENT_SENSITIVITY  EQUAL  on_off)? REORGANIZE AS  DEFAULT)
        /// </summary>
        public override AstRoot VisitAlter_fulltext_catalog(TSqlParser.Alter_fulltext_catalogContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterFulltextCatalog(context, list);
        }
        
        /// <summary>
        /// create_fulltext_catalog
        /// 	 : CREATE  FULLTEXT  CATALOG  catalog_name  (ON  FILEGROUP  file_group_name)?  (IN  PATH  rootpath = STRING)?  (WITH  ACCENT_SENSITIVITY  EQUAL  on_off)?  (AS  DEFAULT)?  (AUTHORIZATION  owner_name)?
        /// </summary>
        public override AstRoot VisitCreate_fulltext_catalog(TSqlParser.Create_fulltext_catalogContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateFulltextCatalog(context, list);
        }
        
        /// <summary>
        /// alter_fulltext_stoplist
        /// 	 : ALTER  FULLTEXT  STOPLIST  stoplist_name  (ADD  stopword = STRING  LANGUAGE  (STRING DECIMAL BINARY) DROP  (stopword = STRING  LANGUAGE  (STRING DECIMAL BINARY) ALL  (STRING DECIMAL BINARY) ALL))
        /// </summary>
        public override AstRoot VisitAlter_fulltext_stoplist(TSqlParser.Alter_fulltext_stoplistContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterFulltextStoplist(context, list);
        }
        
        /// <summary>
        /// create_fulltext_stoplist
        /// 	 : CREATE  FULLTEXT  STOPLIST  stoplist_name  (FROM  ((database_name  DOT)?  stoplist_name SYSTEM  STOPLIST))?  (AUTHORIZATION  owner_name)?
        /// </summary>
        public override AstRoot VisitCreate_fulltext_stoplist(TSqlParser.Create_fulltext_stoplistContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateFulltextStoplist(context, list);
        }
        
        /// <summary>
        /// alter_login_sql_server
        /// 	 : ALTER  LOGIN  login_name  ((ENABLE DISABLE)? WITH  ((PASSWORD  EQUAL  (password = STRING password_hash = BINARY  HASHED))  (MUST_CHANGE UNLOCK)*)?  (OLD_PASSWORD  EQUAL  old_password = STRING  (MUST_CHANGE UNLOCK)*)?  (DEFAULT_DATABASE  EQUAL  database_name)?  (DEFAULT_LANGUAGE  EQUAL  language)?  (NAME  EQUAL  login_name)?  (CHECK_POLICY  EQUAL  on_off)?  (CHECK_EXPIRATION  EQUAL  on_off)?  (CREDENTIAL  EQUAL  credential_name)?  (NO  CREDENTIAL)? (ADD DROP)  CREDENTIAL  credential_name)
        /// </summary>
        public override AstRoot VisitAlter_login_sql_server(TSqlParser.Alter_login_sql_serverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterLoginSqlServer(context, list);
        }
        
        /// <summary>
        /// create_login_sql_server
        /// 	 : CREATE  LOGIN  login_name  (WITH  ((PASSWORD  EQUAL  (password = STRING password_hash = BINARY  HASHED))  (MUST_CHANGE UNLOCK)*)?  (COMMA?  SID  EQUAL  sid = BINARY)?  (COMMA?  DEFAULT_DATABASE  EQUAL  database_name)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  language)?  (COMMA?  CHECK_EXPIRATION  EQUAL  on_off)?  (COMMA?  CHECK_POLICY  EQUAL  on_off)?  (COMMA?  CREDENTIAL  EQUAL  credential_name)? (FROM  (WINDOWS  (WITH  (COMMA?  DEFAULT_DATABASE  EQUAL  database_name)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  default_language = STRING)?) CERTIFICATE  certificate_name ASYMMETRIC  KEY  asym_key_name)))
        /// </summary>
        public override AstRoot VisitCreate_login_sql_server(TSqlParser.Create_login_sql_serverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateLoginSqlServer(context, list);
        }
        
        /// <summary>
        /// alter_login_azure_sql
        /// 	 : ALTER  LOGIN  login_name  ((ENABLE DISABLE)? WITH  (PASSWORD  EQUAL  password = STRING  (OLD_PASSWORD  EQUAL  old_password = STRING)? NAME  EQUAL  login_name))
        /// </summary>
        public override AstRoot VisitAlter_login_azure_sql(TSqlParser.Alter_login_azure_sqlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterLoginAzureSql(context, list);
        }
        
        /// <summary>
        /// create_login_azure_sql
        /// 	 : CREATE  LOGIN  login_name  WITH  PASSWORD  EQUAL  STRING  (SID  EQUAL  sid = BINARY)?
        /// </summary>
        public override AstRoot VisitCreate_login_azure_sql(TSqlParser.Create_login_azure_sqlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateLoginAzureSql(context, list);
        }
        
        /// <summary>
        /// alter_login_azure_sql_dw_and_pdw
        /// 	 : ALTER  LOGIN  login_name  (enable_disable? WITH  (PASSWORD  EQUAL  password = STRING  (OLD_PASSWORD  EQUAL  old_password = STRING  (MUST_CHANGE UNLOCK)*)? NAME  EQUAL  login_name))
        /// </summary>
        public override AstRoot VisitAlter_login_azure_sql_dw_and_pdw(TSqlParser.Alter_login_azure_sql_dw_and_pdwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterLoginAzureSqlDwAndPdw(context, list);
        }
        
        /// <summary>
        /// create_login_pdw
        /// 	 : CREATE  LOGIN  login_name  (WITH  (PASSWORD  EQUAL  password = STRING  (MUST_CHANGE)?  (CHECK_POLICY  EQUAL  on_off?)?) FROM  WINDOWS)
        /// </summary>
        public override AstRoot VisitCreate_login_pdw(TSqlParser.Create_login_pdwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateLoginPdw(context, list);
        }
        
        /// <summary>
        /// alter_message_type
        /// 	 : ALTER  MESSAGE  TYPE  message_type_name  VALIDATION  EQUAL  (NONE EMPTY WELL_FORMED_XML VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_name)
        /// </summary>
        public override AstRoot VisitAlter_message_type(TSqlParser.Alter_message_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterMessageType(context, list);
        }
        
        /// <summary>
        /// alter_partition_function
        /// 	 : ALTER  PARTITION  FUNCTION  partition_function_name  LR_BRACKET  RR_BRACKET  split_or_merge  RANGE  LR_BRACKET  DECIMAL  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_partition_function(TSqlParser.Alter_partition_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterPartitionFunction(context, list);
        }
        
        /// <summary>
        /// alter_partition_scheme
        /// 	 : ALTER  PARTITION  SCHEME  partition_scheme_name  NEXT  USED  (file_group_name)?
        /// </summary>
        public override AstRoot VisitAlter_partition_scheme(TSqlParser.Alter_partition_schemeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterPartitionScheme(context, list);
        }
        
        /// <summary>
        /// alter_remote_service_binding
        /// 	 : ALTER  REMOTE  SERVICE  BINDING  binding_name  WITH  (USER  EQUAL  user_name)?  (COMMA  ANONYMOUS  EQUAL  on_off)?
        /// </summary>
        public override AstRoot VisitAlter_remote_service_binding(TSqlParser.Alter_remote_service_bindingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterRemoteServiceBinding(context, list);
        }
        
        /// <summary>
        /// create_remote_service_binding
        /// 	 : CREATE  REMOTE  SERVICE  BINDING  binding_name  (AUTHORIZATION  owner_name)?  TO  SERVICE  remote_service_name = STRING  WITH  (USER  EQUAL  user_name)?  (COMMA  ANONYMOUS  EQUAL  on_off)?
        /// </summary>
        public override AstRoot VisitCreate_remote_service_binding(TSqlParser.Create_remote_service_bindingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateRemoteServiceBinding(context, list);
        }
        
        /// <summary>
        /// create_resource_pool
        /// 	 : CREATE  RESOURCE  POOL  pool_name  (WITH  LR_BRACKET  (COMMA?  MIN_CPU_PERCENT  EQUAL  DECIMAL)?  (COMMA?  MAX_CPU_PERCENT  EQUAL  DECIMAL)?  (COMMA?  CAP_CPU_PERCENT  EQUAL  DECIMAL)?  (COMMA?  AFFINITY  SCHEDULER  EQUAL  (AUTO LR_BRACKET  (COMMA?  (DECIMAL DECIMAL  TO  DECIMAL))+  RR_BRACKET NUMANODE  EQUAL  LR_BRACKET  (COMMA?  (DECIMAL DECIMAL  TO  DECIMAL))+  RR_BRACKET))?  (COMMA?  MIN_MEMORY_PERCENT  EQUAL  DECIMAL)?  (COMMA?  MAX_MEMORY_PERCENT  EQUAL  DECIMAL)?  (COMMA?  MIN_IOPS_PER_VOLUME  EQUAL  DECIMAL)?  (COMMA?  MAX_IOPS_PER_VOLUME  EQUAL  DECIMAL)?  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitCreate_resource_pool(TSqlParser.Create_resource_poolContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateResourcePool(context, list);
        }
        
        /// <summary>
        /// alter_db_role
        /// 	 : ALTER  ROLE  role_name  (add_drop  MEMBER  database_name WITH  NAME  EQUAL  role_name)
        /// </summary>
        public override AstRoot VisitAlter_db_role(TSqlParser.Alter_db_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterDbRole(context, list);
        }
        
        /// <summary>
        /// create_db_role
        /// 	 : CREATE  ROLE  role_name  (AUTHORIZATION  owner_name)?
        /// </summary>
        public override AstRoot VisitCreate_db_role(TSqlParser.Create_db_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateDbRole(context, list);
        }
        
        /// <summary>
        /// create_route
        /// 	 : CREATE  ROUTE  route_name  (AUTHORIZATION  owner_name)?  WITH  (COMMA?  SERVICE_NAME  EQUAL  route_service_name = STRING)?  (COMMA?  BROKER_INSTANCE  EQUAL  broker_instance_identifier = STRING)?  (COMMA?  LIFETIME  EQUAL  DECIMAL)?  COMMA?  ADDRESS  EQUAL  STRING  (COMMA  MIRROR_ADDRESS  EQUAL  STRING)?
        /// </summary>
        public override AstRoot VisitCreate_route(TSqlParser.Create_routeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateRoute(context, list);
        }
        
        /// <summary>
        /// create_rule
        /// 	 : CREATE  RULE  (schema_name  DOT)?  rule_name  AS  search_condition
        /// </summary>
        public override AstRoot VisitCreate_rule(TSqlParser.Create_ruleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateRule(context, list);
        }
        
        /// <summary>
        /// alter_schema_sql
        /// 	 : ALTER  SCHEMA  schema_name  TRANSFER  ((OBJECT TYPE XML  SCHEMA  COLLECTION)  DOUBLE_COLON)?  id_  (DOT  id_)?
        /// </summary>
        public override AstRoot VisitAlter_schema_sql(TSqlParser.Alter_schema_sqlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterSchemaSql(context, list);
        }
        
        /// <summary>
        /// create_schema_azure_sql_dw_and_pdw
        /// 	 : CREATE  SCHEMA  schema_name  (AUTHORIZATION  owner_name)?
        /// </summary>
        public override AstRoot VisitCreate_schema_azure_sql_dw_and_pdw(TSqlParser.Create_schema_azure_sql_dw_and_pdwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateSchemaAzureSqlDwAndPdw(context, list);
        }
        
        /// <summary>
        /// alter_schema_azure_sql_dw_and_pdw
        /// 	 : ALTER  SCHEMA  schema_name  TRANSFER  (OBJECT  DOUBLE_COLON)?  id_  (DOT  ID)?
        /// </summary>
        public override AstRoot VisitAlter_schema_azure_sql_dw_and_pdw(TSqlParser.Alter_schema_azure_sql_dw_and_pdwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterSchemaAzureSqlDwAndPdw(context, list);
        }
        
        /// <summary>
        /// create_search_property_list
        /// 	 : CREATE  SEARCH  PROPERTY  LIST  source_list_name  (FROM  (database_name  DOT)?  source_list_name)?  (AUTHORIZATION  owner_name)?
        /// </summary>
        public override AstRoot VisitCreate_search_property_list(TSqlParser.Create_search_property_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateSearchPropertyList(context, list);
        }
        
        /// <summary>
        /// create_security_policy
        /// 	 : CREATE  SECURITY  POLICY  (schema_name  DOT)?  security_policy_name  (COMMA?  ADD  (FILTER BLOCK)?  PREDICATE  tvf_schema_name  DOT  security_predicate_function_name  LR_BRACKET  (COMMA?  column_name_or_arguments)+  RR_BRACKET  ON  schema_name  DOT  tableName  (COMMA?  AFTER  (INSERT UPDATE) COMMA?  BEFORE  (UPDATE DELETE))*)+  (WITH  LR_BRACKET  STATE  EQUAL  on_off  (SCHEMABINDING  on_off)?  RR_BRACKET)?  (NOT  FOR  REPLICATION)?
        /// </summary>
        public override AstRoot VisitCreate_security_policy(TSqlParser.Create_security_policyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateSecurityPolicy(context, list);
        }
        
        /// <summary>
        /// alter_sequence
        /// 	 : ALTER  SEQUENCE  (schema_name  DOT)?  sequence_name  (RESTART  (WITH  DECIMAL)?)?  (INCREMENT  BY  sequnce_increment = DECIMAL)?  (MINVALUE  DECIMAL NO  MINVALUE)?  (MAXVALUE  DECIMAL NO  MAXVALUE)?  (CYCLE NO  CYCLE)?  (CACHE  DECIMAL NO  CACHE)?
        /// </summary>
        public override AstRoot VisitAlter_sequence(TSqlParser.Alter_sequenceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterSequence(context, list);
        }
        
        /// <summary>
        /// create_sequence
        /// 	 : CREATE  SEQUENCE  (schema_name  DOT)?  sequence_name  (AS  data_type)?  (START  WITH  DECIMAL)?  (INCREMENT  BY  MINUS?  DECIMAL)?  (MINVALUE  (MINUS?  DECIMAL)? NO  MINVALUE)?  (MAXVALUE  (MINUS?  DECIMAL)? NO  MAXVALUE)?  (CYCLE NO  CYCLE)?  (CACHE  DECIMAL? NO  CACHE)?
        /// </summary>
        public override AstRoot VisitCreate_sequence(TSqlParser.Create_sequenceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateSequence(context, list);
        }
        
        /// <summary>
        /// alter_server_audit
        /// 	 : ALTER  SERVER  AUDIT  audit_name  ((TO  (FILE  (LR_BRACKET  (COMMA?  FILEPATH  EQUAL  filepath = STRING COMMA?  MAXSIZE  EQUAL  (DECIMAL  (MB GB TB) UNLIMITED) COMMA?  MAX_ROLLOVER_FILES  EQUAL  max_rollover_files = (DECIMAL UNLIMITED) COMMA?  MAX_FILES  EQUAL  max_files = DECIMAL COMMA?  RESERVE_DISK_SPACE  EQUAL  on_off)*  RR_BRACKET) APPLICATION_LOG SECURITY_LOG))?  (WITH  LR_BRACKET  (COMMA?  QUEUE_DELAY  EQUAL  queue_delay = DECIMAL COMMA?  ON_FAILURE  EQUAL  (CONTINUE SHUTDOWN FAIL_OPERATION) COMMA?  STATE  EQUAL  on_off)*  RR_BRACKET)?  (WHERE  (COMMA?  (NOT?)  event_field_name  (EQUAL (LESS  GREATER) (EXCLAMATION  EQUAL) GREATER (GREATER  EQUAL) LESS LESS  EQUAL)  (DECIMAL STRING) COMMA?  (AND OR)  NOT?  (EQUAL (LESS  GREATER) (EXCLAMATION  EQUAL) GREATER (GREATER  EQUAL) LESS LESS  EQUAL)  (DECIMAL STRING)))? REMOVE  WHERE MODIFY  NAME  EQUAL  audit_name)
        /// </summary>
        public override AstRoot VisitAlter_server_audit(TSqlParser.Alter_server_auditContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServerAudit(context, list);
        }
        
        /// <summary>
        /// create_server_audit
        /// 	 : CREATE  SERVER  AUDIT  audit_name  ((TO  (FILE  (LR_BRACKET  (COMMA?  FILEPATH  EQUAL  filepath = STRING COMMA?  MAXSIZE  EQUAL  (DECIMAL  (MB GB TB) UNLIMITED) COMMA?  MAX_ROLLOVER_FILES  EQUAL  max_rollover_files = (DECIMAL UNLIMITED) COMMA?  MAX_FILES  EQUAL  max_files = DECIMAL COMMA?  RESERVE_DISK_SPACE  EQUAL  on_off)*  RR_BRACKET) APPLICATION_LOG SECURITY_LOG))?  (WITH  LR_BRACKET  (COMMA?  QUEUE_DELAY  EQUAL  queue_delay = DECIMAL COMMA?  ON_FAILURE  EQUAL  (CONTINUE SHUTDOWN FAIL_OPERATION) COMMA?  STATE  EQUAL  on_off COMMA?  AUDIT_GUID  EQUAL  audit_guid)*  RR_BRACKET)?  (WHERE  (COMMA?  (NOT?)  event_field_name  (EQUAL (LESS  GREATER) (EXCLAMATION  EQUAL) GREATER (GREATER  EQUAL) LESS LESS  EQUAL)  (DECIMAL STRING) COMMA?  (AND OR)  NOT?  (EQUAL (LESS  GREATER) (EXCLAMATION  EQUAL) GREATER (GREATER  EQUAL) LESS LESS  EQUAL)  (DECIMAL STRING)))? REMOVE  WHERE MODIFY  NAME  EQUAL  audit_name)
        /// </summary>
        public override AstRoot VisitCreate_server_audit(TSqlParser.Create_server_auditContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateServerAudit(context, list);
        }
        
        /// <summary>
        /// alter_server_audit_specification
        /// 	 : ALTER  SERVER  AUDIT  SPECIFICATION  audit_name  (FOR  SERVER  AUDIT  audit_name)?  ((ADD DROP)  LR_BRACKET  audit_action_group_name  RR_BRACKET)*  (WITH  LR_BRACKET  STATE  EQUAL  on_off  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitAlter_server_audit_specification(TSqlParser.Alter_server_audit_specificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServerAuditSpecification(context, list);
        }
        
        /// <summary>
        /// create_server_audit_specification
        /// 	 : CREATE  SERVER  AUDIT  SPECIFICATION  audit_name  (FOR  SERVER  AUDIT  audit_name)?  (ADD  LR_BRACKET  audit_action_group_name  RR_BRACKET)*  (WITH  LR_BRACKET  STATE  EQUAL  on_off  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitCreate_server_audit_specification(TSqlParser.Create_server_audit_specificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateServerAuditSpecification(context, list);
        }
        
        /// <summary>
        /// alter_server_role
        /// 	 : ALTER  SERVER  ROLE  server_role_name  ((ADD DROP)  MEMBER  server_name WITH  NAME  EQUAL  server_role_name)
        /// </summary>
        public override AstRoot VisitAlter_server_role(TSqlParser.Alter_server_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServerRole(context, list);
        }
        
        /// <summary>
        /// create_server_role
        /// 	 : CREATE  SERVER  ROLE  server_role_name  (AUTHORIZATION  server_name)?
        /// </summary>
        public override AstRoot VisitCreate_server_role(TSqlParser.Create_server_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateServerRole(context, list);
        }
        
        /// <summary>
        /// alter_server_role_pdw
        /// 	 : ALTER  SERVER  ROLE  server_role_name  (ADD DROP)  MEMBER  login_name
        /// </summary>
        public override AstRoot VisitAlter_server_role_pdw(TSqlParser.Alter_server_role_pdwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServerRolePdw(context, list);
        }
        
        /// <summary>
        /// alter_service
        /// 	 : ALTER  SERVICE  modified_service_name  (ON  QUEUE  (schema_name  DOT)  queue_name)?  (COMMA?  (ADD DROP)  modified_contract_name)*
        /// </summary>
        public override AstRoot VisitAlter_service(TSqlParser.Alter_serviceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterService(context, list);
        }
        
        /// <summary>
        /// create_service
        /// 	 : CREATE  SERVICE  create_service_name  (AUTHORIZATION  owner_name)?  ON  QUEUE  (schema_name  DOT)?  queue_name  (LR_BRACKET  (COMMA?  (id_ DEFAULT))+  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitCreate_service(TSqlParser.Create_serviceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateService(context, list);
        }
        
        /// <summary>
        /// alter_symmetric_key
        /// 	 : ALTER  SYMMETRIC  KEY  symmetric_key_name  (add_drop  ENCRYPTION  BY  (CERTIFICATE  certificate_name PASSWORD  EQUAL  password = STRING SYMMETRIC  KEY  symmetric_key_name ASYMMETRIC  KEY  asym_key_name))
        /// </summary>
        public override AstRoot VisitAlter_symmetric_key(TSqlParser.Alter_symmetric_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterSymmetricKey(context, list);
        }
        
        /// <summary>
        /// create_synonym
        /// 	 : CREATE  SYNONYM  (schema_name  DOT)?  synonym_name  FOR  ((server_name  DOT)?  (database_name  DOT)?  (schema_name  DOT)?  object_name (database_name  DOT)?  (schema_id_2_or_object_name = id_  DOT)?)
        /// </summary>
        public override AstRoot VisitCreate_synonym(TSqlParser.Create_synonymContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateSynonym(context, list);
        }
        
        /// <summary>
        /// alter_user
        /// 	 : ALTER  USER  user_name  WITH  (COMMA?  NAME  EQUAL  user_name COMMA?  DEFAULT_SCHEMA  EQUAL  (schema_name NULL_) COMMA?  LOGIN  EQUAL  login_name COMMA?  PASSWORD  EQUAL  STRING  (OLD_PASSWORD  EQUAL  STRING)+ COMMA?  DEFAULT_LANGUAGE  EQUAL  (NONE lcid = DECIMAL language) COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off)+
        /// </summary>
        public override AstRoot VisitAlter_user(TSqlParser.Alter_userContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterUser(context, list);
        }
        
        /// <summary>
        /// alter_user_azure_sql
        /// 	 : ALTER  USER  user_name  WITH  (COMMA?  NAME  EQUAL  user_name COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  LOGIN  EQUAL  login_name COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off)+
        /// </summary>
        public override AstRoot VisitAlter_user_azure_sql(TSqlParser.Alter_user_azure_sqlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterUserAzureSql(context, list);
        }
        
        /// <summary>
        /// create_workload_group
        /// 	 : CREATE  WORKLOAD  GROUP  workload_group_group_name  (WITH  LR_BRACKET  (IMPORTANCE  EQUAL  (LOW MEDIUM HIGH) COMMA?  REQUEST_MAX_MEMORY_GRANT_PERCENT  EQUAL  request_max_memory_grant = DECIMAL COMMA?  REQUEST_MAX_CPU_TIME_SEC  EQUAL  request_max_cpu_time_sec = DECIMAL REQUEST_MEMORY_GRANT_TIMEOUT_SEC  EQUAL  request_memory_grant_timeout_sec = DECIMAL MAX_DOP  EQUAL  max_dop = DECIMAL GROUP_MAX_REQUESTS  EQUAL  group_max_requests = DECIMAL)+  RR_BRACKET)?  (USING  (workload_group_pool_name DEFAULT_DOUBLE_QUOTE)?  (COMMA?  EXTERNAL  external_pool_name DEFAULT_DOUBLE_QUOTE)?)?
        /// </summary>
        public override AstRoot VisitCreate_workload_group(TSqlParser.Create_workload_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateWorkloadGroup(context, list);
        }
        
        /// <summary>
        /// create_xml_schema_collection
        /// 	 : CREATE  XML  SCHEMA  COLLECTION  (relational_schema  DOT)?  sql_identifier  AS  (STRING id_ LOCAL_ID)
        /// </summary>
        public override AstRoot VisitCreate_xml_schema_collection(TSqlParser.Create_xml_schema_collectionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateXmlSchemaCollection(context, list);
        }
        
        /// <summary>
        /// create_partition_function
        /// 	 : CREATE  PARTITION  FUNCTION  partition_function_name  LR_BRACKET  input_parameter_type = data_type  RR_BRACKET  AS  RANGE  (LEFT RIGHT)?  FOR  VALUES  LR_BRACKET  boundary_values = expression_list  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCreate_partition_function(TSqlParser.Create_partition_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreatePartitionFunction(context, list);
        }
        
        /// <summary>
        /// create_partition_scheme
        /// 	 : CREATE  PARTITION  SCHEME  partition_scheme_name  AS  PARTITION  partition_function_name  ALL?  TO  LR_BRACKET  file_group_names += id_  (COMMA  file_group_names += id_)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCreate_partition_scheme(TSqlParser.Create_partition_schemeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreatePartitionScheme(context, list);
        }
        
        /// <summary>
        /// create_queue
        /// 	 : CREATE  QUEUE  (complete_table_name queue_name)  queue_settings?  (ON  file_group_name DEFAULT)?
        /// </summary>
        public override AstRoot VisitCreate_queue(TSqlParser.Create_queueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateQueue(context, list);
        }
        
        /// <summary>
        /// create_contract
        /// 	 : CREATE  CONTRACT  contract_name  (AUTHORIZATION  owner_name)?  LR_BRACKET  ((message_type_name DEFAULT)  SENT  BY  (INITIATOR TARGET ANY)  COMMA?)+  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCreate_contract(TSqlParser.Create_contractContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateContract(context, list);
        }
        
        /// <summary>
        /// message_statement
        /// 	 : CREATE  MESSAGE  TYPE  message_type_name  (AUTHORIZATION  owner_name)?  (VALIDATION  EQUAL  (NONE EMPTY WELL_FORMED_XML VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_name))
        /// </summary>
        public override AstRoot VisitMessage_statement(TSqlParser.Message_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMessageStatement(context, list);
        }
        
        /// <summary>
        /// merge_statement
        /// 	 : with_expression?  MERGE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  INTO?  ddl_object  with_table_hints?  as_table_alias?  USING  table_sources  ON  search_condition  when_matches+  output_clause?  option_clause?  SEMI
        /// </summary>
        public override AstRoot VisitMerge_statement(TSqlParser.Merge_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMergeStatement(context, list);
        }
        
        /// <summary>
        /// update_elem_merges
        /// 	 : update_elem_merge  (COMMA  update_elem_merge)*
        /// </summary>
        public override AstRoot VisitUpdate_elem_merges(TSqlParser.Update_elem_mergesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdateElemMerges(context, list);
        }
        
        /// <summary>
        /// delete_statement
        /// 	 : with_expression?  DELETE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT? TOP  DECIMAL)?  FROM?  delete_statement_from  with_table_hints?  output_clause?  (FROM  table_sources)?  (WHERE  (search_condition CURRENT  OF  (GLOBAL?  cursor_name cursor_var = LOCAL_ID)))?  for_clause?  option_clause?  SEMI?
        /// </summary>
        public override AstRoot VisitDelete_statement(TSqlParser.Delete_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeleteStatement(context, list);
        }
        
        /// <summary>
        /// insert_statement
        /// 	 : with_expression?  INSERT  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  INTO?  (ddl_object rowset_function_limited)  with_table_hints?  (LR_BRACKET  insert_column_name_list  RR_BRACKET)?  output_clause?  insert_statement_value  for_clause?  option_clause?  SEMI?
        /// </summary>
        public override AstRoot VisitInsert_statement(TSqlParser.Insert_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstInsertStatement(context, list);
        }
        
        /// <summary>
        /// receive_statement
        /// 	 : LR_BRACKET?  RECEIVE  (ALL DISTINCT top_clause STAR)  (LOCAL_ID  EQUAL  expression  COMMA?)*  FROM  complete_table_name  (INTO  table_variable  (WHERE  where = search_condition))?  RR_BRACKET?
        /// </summary>
        public override AstRoot VisitReceive_statement(TSqlParser.Receive_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstReceiveStatement(context, list);
        }
        
        /// <summary>
        /// select_statement_standalone
        /// 	 : with_expression?  select_statement
        /// </summary>
        public override AstRoot VisitSelect_statement_standalone(TSqlParser.Select_statement_standaloneContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSelectStatementStandalone(context, list);
        }
        
        /// <summary>
        /// select_statement
        /// 	 : query_expression  select_order_by_clause?  for_clause?  option_clause?  SEMI?
        /// </summary>
        public override AstRoot VisitSelect_statement(TSqlParser.Select_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSelectStatement(context, list);
        }
        
        /// <summary>
        /// update_statement
        /// 	 : with_expression?  UPDATE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  (ddl_object rowset_function_limited)  with_table_hints?  SET  update_elems  output_clause?  (FROM  table_sources)?  (WHERE  (search_condition CURRENT  OF  (GLOBAL?  cursor_name cursor_var = LOCAL_ID)))?  for_clause?  option_clause?  SEMI?
        /// </summary>
        public override AstRoot VisitUpdate_statement(TSqlParser.Update_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdateStatement(context, list);
        }
        
        /// <summary>
        /// update_elems
        /// 	 : update_elem  (COMMA  update_elem)*
        /// </summary>
        public override AstRoot VisitUpdate_elems(TSqlParser.Update_elemsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdateElems(context, list);
        }
        
        /// <summary>
        /// output_clause
        /// 	 : OUTPUT  output_dml_list_elems  (INTO  (LOCAL_ID full_table_name)  (LR_BRACKET  column_name_list  RR_BRACKET)?)?
        /// </summary>
        public override AstRoot VisitOutput_clause(TSqlParser.Output_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOutputClause(context, list);
        }
        
        /// <summary>
        /// output_dml_list_elems
        /// 	 : output_dml_list_elem  (COMMA  output_dml_list_elem)*
        /// </summary>
        public override AstRoot VisitOutput_dml_list_elems(TSqlParser.Output_dml_list_elemsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOutputDmlListElems(context, list);
        }
        
        /// <summary>
        /// output_dml_list_elem
        /// 	 : (expression asterisk)  as_column_alias?
        /// </summary>
        public override AstRoot VisitOutput_dml_list_elem(TSqlParser.Output_dml_list_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOutputDmlListElem(context, list);
        }
        
        /// <summary>
        /// create_index
        /// 	 : CREATE  UNIQUE?  clustered?  INDEX  id_  ON  full_table_name  LR_BRACKET  column_name_list_with_order  RR_BRACKET  (INCLUDE  LR_BRACKET  column_name_list  RR_BRACKET)?  (WHERE  where = search_condition)?  (create_index_options)?  (ON  id_)?  SEMI?
        /// </summary>
        public override AstRoot VisitCreate_index(TSqlParser.Create_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateIndex(context, list);
        }
        
        /// <summary>
        /// create_index_options
        /// 	 : WITH  LR_BRACKET  relational_index_options  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCreate_index_options(TSqlParser.Create_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateIndexOptions(context, list);
        }
        
        /// <summary>
        /// relational_index_options
        /// 	 : relational_index_option  (COMMA  relational_index_option)*
        /// </summary>
        public override AstRoot VisitRelational_index_options(TSqlParser.Relational_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRelationalIndexOptions(context, list);
        }
        
        /// <summary>
        /// alter_index
        /// 	 : ALTER  INDEX  (id_ ALL)  ON  full_table_name  (DISABLE PAUSE ABORT RESUME  resumable_index_options? reorganize_partition set_index_options rebuild_partition)
        /// </summary>
        public override AstRoot VisitAlter_index(TSqlParser.Alter_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterIndex(context, list);
        }
        
        /// <summary>
        /// reorganize_partition
        /// 	 : REORGANIZE  (PARTITION  EQUAL  DECIMAL)?  reorganize_options?
        /// </summary>
        public override AstRoot VisitReorganize_partition(TSqlParser.Reorganize_partitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstReorganizePartition(context, list);
        }
        
        /// <summary>
        /// set_index_options
        /// 	 : SET  LR_BRACKET  set_index_option  (COMMA  set_index_option)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitSet_index_options(TSqlParser.Set_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSetIndexOptions(context, list);
        }
        
        /// <summary>
        /// rebuild_index_options
        /// 	 : WITH  LR_BRACKET  rebuild_index_option  (COMMA  rebuild_index_option)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitRebuild_index_options(TSqlParser.Rebuild_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRebuildIndexOptions(context, list);
        }
        
        /// <summary>
        /// single_partition_rebuild_index_options
        /// 	 : WITH  LR_BRACKET  single_partition_rebuild_index_option  (COMMA  single_partition_rebuild_index_option)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitSingle_partition_rebuild_index_options(TSqlParser.Single_partition_rebuild_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSinglePartitionRebuildIndexOptions(context, list);
        }
        
        /// <summary>
        /// create_columnstore_index
        /// 	 : CREATE  CLUSTERED  COLUMNSTORE  INDEX  id_  ON  full_table_name  create_columnstore_index_options?  (ON  id_)?  SEMI?
        /// </summary>
        public override AstRoot VisitCreate_columnstore_index(TSqlParser.Create_columnstore_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateColumnstoreIndex(context, list);
        }
        
        /// <summary>
        /// create_columnstore_index_options
        /// 	 : WITH  LR_BRACKET  columnstore_index_option  (COMMA  columnstore_index_option)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCreate_columnstore_index_options(TSqlParser.Create_columnstore_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateColumnstoreIndexOptions(context, list);
        }
        
        /// <summary>
        /// create_nonclustered_columnstore_index
        /// 	 : CREATE  NONCLUSTERED?  COLUMNSTORE  INDEX  id_  ON  full_table_name  LR_BRACKET  column_name_list_with_order  RR_BRACKET  (WHERE  search_condition)?  create_columnstore_index_options?  (ON  id_)?  SEMI?
        /// </summary>
        public override AstRoot VisitCreate_nonclustered_columnstore_index(TSqlParser.Create_nonclustered_columnstore_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateNonclusteredColumnstoreIndex(context, list);
        }
        
        /// <summary>
        /// create_xml_index
        /// 	 : CREATE  PRIMARY?  XML  INDEX  id_  ON  full_table_name  LR_BRACKET  id_  RR_BRACKET  (USING  XML  INDEX  id_  (FOR  (VALUE PATH PROPERTY)?)?)?  xml_index_options?  SEMI?
        /// </summary>
        public override AstRoot VisitCreate_xml_index(TSqlParser.Create_xml_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateXmlIndex(context, list);
        }
        
        /// <summary>
        /// xml_index_options
        /// 	 : WITH  LR_BRACKET  xml_index_option  (COMMA  xml_index_option)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitXml_index_options(TSqlParser.Xml_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstXmlIndexOptions(context, list);
        }
        
        /// <summary>
        /// create_or_alter_procedure
        /// 	 : ((CREATE  (OR  (ALTER REPLACE))?) ALTER)  proc = (PROC PROCEDURE)  procName = func_proc_name_schema  (SEMI  DECIMAL)?  (LR_BRACKET?  procedure_params  RR_BRACKET?)?  procedure_options?  (FOR  REPLICATION)?  AS  (as_external_name sql_clause)
        /// </summary>
        public override AstRoot VisitCreate_or_alter_procedure(TSqlParser.Create_or_alter_procedureContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterProcedure(context, list);
        }
        
        /// <summary>
        /// procedure_options
        /// 	 : WITH  procedure_option  (COMMA  procedure_option)*
        /// </summary>
        public override AstRoot VisitProcedure_options(TSqlParser.Procedure_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstProcedureOptions(context, list);
        }
        
        /// <summary>
        /// as_external_name
        /// 	 : EXTERNAL  NAME  assembly_name  DOT  class_name  DOT  method_name
        /// </summary>
        public override AstRoot VisitAs_external_name(TSqlParser.As_external_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAsExternalName(context, list);
        }
        
        /// <summary>
        /// create_or_alter_dml_trigger
        /// 	 : ((CREATE  (OR  ALTER)?) ALTER)  TRIGGER  simple_name  ON  full_table_name  dml_trigger_options?  (FOR AFTER INSTEAD  OF)  dml_trigger_operations  (WITH  APPEND)?  (NOT  FOR  REPLICATION)?  AS  sql_clauses
        /// </summary>
        public override AstRoot VisitCreate_or_alter_dml_trigger(TSqlParser.Create_or_alter_dml_triggerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterDmlTrigger(context, list);
        }
        
        /// <summary>
        /// dml_trigger_options
        /// 	 : WITH  dml_trigger_option  (COMMA  dml_trigger_option)*
        /// </summary>
        public override AstRoot VisitDml_trigger_options(TSqlParser.Dml_trigger_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDmlTriggerOptions(context, list);
        }
        
        /// <summary>
        /// dml_trigger_operations
        /// 	 : dml_trigger_operation  (COMMA  dml_trigger_operation)*
        /// </summary>
        public override AstRoot VisitDml_trigger_operations(TSqlParser.Dml_trigger_operationsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDmlTriggerOperations(context, list);
        }
        
        /// <summary>
        /// create_or_alter_ddl_trigger
        /// 	 : ((CREATE  (OR  ALTER)?) ALTER)  TRIGGER  simple_name  ON  (ALL  SERVER DATABASE)  dml_trigger_options?  (FOR AFTER)  dml_trigger_operations  AS  sql_clauses
        /// </summary>
        public override AstRoot VisitCreate_or_alter_ddl_trigger(TSqlParser.Create_or_alter_ddl_triggerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterDdlTrigger(context, list);
        }
        
        /// <summary>
        /// procedure_params
        /// 	 : procedure_param  (COMMA  procedure_param)*
        /// </summary>
        public override AstRoot VisitProcedure_params(TSqlParser.Procedure_paramsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstProcedureParams(context, list);
        }
        
        /// <summary>
        /// func_body_returns_select
        /// 	 : RETURNS  TABLE  function_options?  AS?  (as_external_name RETURN  (LR_BRACKET  select_statement_standalone  RR_BRACKET select_statement_standalone))
        /// </summary>
        public override AstRoot VisitFunc_body_returns_select(TSqlParser.Func_body_returns_selectContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFuncBodyReturnsSelect(context, list);
        }
        
        /// <summary>
        /// function_options
        /// 	 : WITH  function_option  (COMMA  function_option)*
        /// </summary>
        public override AstRoot VisitFunction_options(TSqlParser.Function_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFunctionOptions(context, list);
        }
        
        /// <summary>
        /// func_body_returns_table
        /// 	 : RETURNS  LOCAL_ID  table_type_definition  function_options?  AS?  (as_external_name BEGIN  sql_clauses?  RETURN  SEMI?  END  SEMI?)
        /// </summary>
        public override AstRoot VisitFunc_body_returns_table(TSqlParser.Func_body_returns_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFuncBodyReturnsTable(context, list);
        }
        
        /// <summary>
        /// func_body_returns_scalar
        /// 	 : RETURNS  data_type  function_options?  AS?  (as_external_name BEGIN  sql_clause?  RETURN  ret = expression  SEMI?  END)
        /// </summary>
        public override AstRoot VisitFunc_body_returns_scalar(TSqlParser.Func_body_returns_scalarContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFuncBodyReturnsScalar(context, list);
        }
        
        /// <summary>
        /// procedure_param
        /// 	 : LOCAL_ID  AS?  (type_schema  DOT)?  data_type  VARYING?  (EQUAL  default_val = default_value)?  (OUT OUTPUT READONLY)?
        /// </summary>
        public override AstRoot VisitProcedure_param(TSqlParser.Procedure_paramContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstProcedureParam(context, list);
        }
        
        /// <summary>
        /// create_statistics
        /// 	 : CREATE  STATISTICS  id_  ON  full_table_name  LR_BRACKET  column_name_list  RR_BRACKET  (WITH  (FULLSCAN SAMPLE  DECIMAL  (PERCENT ROWS) STATS_STREAM)  (COMMA  NORECOMPUTE)?  (COMMA  INCREMENTAL  EQUAL  on_off)?)?  SEMI?
        /// </summary>
        public override AstRoot VisitCreate_statistics(TSqlParser.Create_statisticsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateStatistics(context, list);
        }
        
        /// <summary>
        /// update_statistics
        /// 	 : UPDATE  STATISTICS  complete_table_name  (id_ LR_BRACKET  id_  (COMMA  id_)*  RR_BRACKET)?  update_statistics_options?
        /// </summary>
        public override AstRoot VisitUpdate_statistics(TSqlParser.Update_statisticsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdateStatistics(context, list);
        }
        
        /// <summary>
        /// update_statistics_options
        /// 	 : WITH  update_statistics_option  (COMMA  update_statistics_option)*
        /// </summary>
        public override AstRoot VisitUpdate_statistics_options(TSqlParser.Update_statistics_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdateStatisticsOptions(context, list);
        }
        
        /// <summary>
        /// create_table
        /// 	 : CREATE  TABLE  full_table_name  LR_BRACKET  column_def_table_constraints  (COMMA?  table_indices)*  COMMA?  RR_BRACKET  (LOCK  simple_id)?  table_options*  (ON  id_ DEFAULT)?  (TEXTIMAGE_ON  id_ DEFAULT)?  SEMI?
        /// </summary>
        public override AstRoot VisitCreate_table(TSqlParser.Create_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateTable(context, list);
        }
        
        /// <summary>
        /// create_table_index_options
        /// 	 : WITH  LR_BRACKET  create_table_index_option  (COMMA  create_table_index_option)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCreate_table_index_options(TSqlParser.Create_table_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateTableIndexOptions(context, list);
        }
        
        /// <summary>
        /// create_view
        /// 	 : CREATE  VIEW  simple_name  (LR_BRACKET  column_name_list  RR_BRACKET)?  view_attributes?  AS  select_statement_standalone  (WITH  CHECK  OPTION)?  SEMI?
        /// </summary>
        public override AstRoot VisitCreate_view(TSqlParser.Create_viewContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateView(context, list);
        }
        
        /// <summary>
        /// alter_table
        /// 	 : ALTER  TABLE  full_table_name  (SET  LR_BRACKET  LOCK_ESCALATION  EQUAL  (AUTO TABLE DISABLE)  RR_BRACKET ADD  column_def_table_constraints ALTER  COLUMN  (column_definition column_modifier) DROP  COLUMN  ids_ DROP  CONSTRAINT  constraint_name WITH  (CHECK NOCHECK)  ADD  (CONSTRAINT  constraint_name)?  (FOREIGN  KEY  LR_BRACKET  fk = column_name_list  RR_BRACKET  REFERENCES  full_table_name  (LR_BRACKET  pk = column_name_list  RR_BRACKET)?  (on_delete on_update)* CHECK  LR_BRACKET  search_condition  RR_BRACKET) (NOCHECK CHECK)  CONSTRAINT  constraint_name (ENABLE DISABLE)  TRIGGER  id_? REBUILD  table_options SWITCH  switch_partition)  SEMI?
        /// </summary>
        public override AstRoot VisitAlter_table(TSqlParser.Alter_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterTable(context, list);
        }
        
        /// <summary>
        /// filespecs
        /// 	 : filespec  (COMMA  filespec)*
        /// </summary>
        public override AstRoot VisitFilespecs(TSqlParser.FilespecsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFilespecs(context, list);
        }
        
        /// <summary>
        /// filespec
        /// 	 : LR_BRACKET  NAME  EQUAL  file_group_name  (COMMA  NEWNAME  EQUAL  new_file_group_name STRING)?  (COMMA  FILENAME  EQUAL  file_name = STRING)?  (COMMA  SIZE  EQUAL  size = file_size)?  (COMMA  MAXSIZE  EQUAL  (max_size = file_size) UNLIMITED)?  (COMMA  FILEGROWTH  EQUAL  growth_increment = file_size)?  (COMMA  OFFLINE)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitFilespec(TSqlParser.FilespecContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFilespec(context, list);
        }
        
        /// <summary>
        /// change_tracking_option_lists
        /// 	 : change_tracking_option_list  (COMMA  change_tracking_option_list)*
        /// </summary>
        public override AstRoot VisitChange_tracking_option_lists(TSqlParser.Change_tracking_option_listsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstChangeTrackingOptionLists(context, list);
        }
        
        /// <summary>
        /// alter_endpoint
        /// 	 : ALTER  ENDPOINT  endpoint_name  (AUTHORIZATION  login_name)?  (STATE  EQUAL  (state = STARTED state = STOPPED state = DISABLED))?  AS  TCP  LR_BRACKET  LISTENER_PORT  EQUAL  port = DECIMAL  (COMMA  LISTENER_IP  EQUAL  (ALL IPV4_ADDR IPV6_ADDR STRING))?  RR_BRACKET  (TSQL FOR  SERVICE_BROKER  LR_BRACKET  AUTHENTICATION  EQUAL  (WINDOWS  (NTLM KERBEROS NEGOTIATE)?  (CERTIFICATE  certificate_name)? CERTIFICATE  certificate_name  WINDOWS?  (NTLM KERBEROS NEGOTIATE)?)  (COMMA?  ENCRYPTION  EQUAL  (DISABLED SUPPORTED REQUIRED)  (ALGORITHM  (AES RC4 AES  RC4 RC4  AES))?)?  (COMMA?  MESSAGE_FORWARDING  EQUAL  (ENABLED DISABLED))?  (COMMA?  MESSAGE_FORWARD_SIZE  EQUAL  DECIMAL)?  RR_BRACKET FOR  DATABASE_MIRRORING  LR_BRACKET  AUTHENTICATION  EQUAL  (WINDOWS  (NTLM KERBEROS NEGOTIATE)?  (CERTIFICATE  certificate_name)? CERTIFICATE  certificate_name  WINDOWS?  (NTLM KERBEROS NEGOTIATE)?)  (COMMA?  ENCRYPTION  EQUAL  (DISABLED SUPPORTED REQUIRED)  (ALGORITHM  (AES RC4 AES  RC4 RC4  AES))?)?  COMMA?  ROLE  EQUAL  (WITNESS PARTNER ALL)  RR_BRACKET)
        /// </summary>
        public override AstRoot VisitAlter_endpoint(TSqlParser.Alter_endpointContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterEndpoint(context, list);
        }
        
        /// <summary>
        /// partner_server
        /// 	 : partner_server_tcp_prefix  host  mirroring_host_port_seperator  port_number
        /// </summary>
        public override AstRoot VisitPartner_server(TSqlParser.Partner_serverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPartnerServer(context, list);
        }
        
        /// <summary>
        /// date_correlation_optimization_option
        /// 	 : DATE_CORRELATION_OPTIMIZATION  on_off
        /// </summary>
        public override AstRoot VisitDate_correlation_optimization_option(TSqlParser.Date_correlation_optimization_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDateCorrelationOptimizationOption(context, list);
        }
        
        /// <summary>
        /// db_encryption_option
        /// 	 : ENCRYPTION  on_off
        /// </summary>
        public override AstRoot VisitDb_encryption_option(TSqlParser.Db_encryption_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDbEncryptionOption(context, list);
        }
        
        /// <summary>
        /// mixed_page_allocation_option
        /// 	 : MIXED_PAGE_ALLOCATION  on_off
        /// </summary>
        public override AstRoot VisitMixed_page_allocation_option(TSqlParser.Mixed_page_allocation_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMixedPageAllocationOption(context, list);
        }
        
        /// <summary>
        /// drop_relational_or_xml_or_spatial_indexs
        /// 	 : drop_relational_or_xml_or_spatial_index  (COMMA  drop_relational_or_xml_or_spatial_index)*
        /// </summary>
        public override AstRoot VisitDrop_relational_or_xml_or_spatial_indexs(TSqlParser.Drop_relational_or_xml_or_spatial_indexsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropRelationalOrXmlOrSpatialIndexs(context, list);
        }
        
        /// <summary>
        /// drop_backward_compatible_indexs
        /// 	 : drop_backward_compatible_index  (COMMA  drop_backward_compatible_index)*
        /// </summary>
        public override AstRoot VisitDrop_backward_compatible_indexs(TSqlParser.Drop_backward_compatible_indexsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropBackwardCompatibleIndexs(context, list);
        }
        
        /// <summary>
        /// drop_relational_or_xml_or_spatial_index
        /// 	 : index_name  ON  complete_table_name
        /// </summary>
        public override AstRoot VisitDrop_relational_or_xml_or_spatial_index(TSqlParser.Drop_relational_or_xml_or_spatial_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropRelationalOrXmlOrSpatialIndex(context, list);
        }
        
        /// <summary>
        /// drop_backward_compatible_index
        /// 	 : (schema_name  DOT)?  table_or_view_name  DOT  index_name
        /// </summary>
        public override AstRoot VisitDrop_backward_compatible_index(TSqlParser.Drop_backward_compatible_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropBackwardCompatibleIndex(context, list);
        }
        
        /// <summary>
        /// drop_procedure
        /// 	 : DROP  proc = (PROC PROCEDURE)  (IF  EXISTS)?  func_proc_name_schemas  SEMI?
        /// </summary>
        public override AstRoot VisitDrop_procedure(TSqlParser.Drop_procedureContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropProcedure(context, list);
        }
        
        /// <summary>
        /// func_proc_name_schemas
        /// 	 : func_proc_name_schema  (COMMA  func_proc_name_schema)*
        /// </summary>
        public override AstRoot VisitFunc_proc_name_schemas(TSqlParser.Func_proc_name_schemasContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFuncProcNameSchemas(context, list);
        }
        
        /// <summary>
        /// drop_dml_trigger
        /// 	 : DROP  TRIGGER  (IF  EXISTS)?  simple_names  SEMI?
        /// </summary>
        public override AstRoot VisitDrop_dml_trigger(TSqlParser.Drop_dml_triggerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDmlTrigger(context, list);
        }
        
        /// <summary>
        /// drop_ddl_trigger
        /// 	 : DROP  TRIGGER  (IF  EXISTS)?  simple_names  ON  (DATABASE ALL  SERVER)  SEMI?
        /// </summary>
        public override AstRoot VisitDrop_ddl_trigger(TSqlParser.Drop_ddl_triggerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDdlTrigger(context, list);
        }
        
        /// <summary>
        /// simple_names
        /// 	 : simple_name  (COMMA  simple_name)*
        /// </summary>
        public override AstRoot VisitSimple_names(TSqlParser.Simple_namesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSimpleNames(context, list);
        }
        
        /// <summary>
        /// table_names
        /// 	 : full_table_name  (COMMA  full_table_name)*
        /// </summary>
        public override AstRoot VisitTable_names(TSqlParser.Table_namesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableNames(context, list);
        }
        
        /// <summary>
        /// drop_function
        /// 	 : DROP  FUNCTION  (IF  EXISTS)?  func_proc_name_schemas  SEMI?
        /// </summary>
        public override AstRoot VisitDrop_function(TSqlParser.Drop_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropFunction(context, list);
        }
        
        /// <summary>
        /// drop_table
        /// 	 : DROP  TABLE  (IF  EXISTS)?  table_names  SEMI?
        /// </summary>
        public override AstRoot VisitDrop_table(TSqlParser.Drop_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropTable(context, list);
        }
        
        /// <summary>
        /// drop_view
        /// 	 : DROP  VIEW  (IF  EXISTS)?  simple_names  SEMI?
        /// </summary>
        public override AstRoot VisitDrop_view(TSqlParser.Drop_viewContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropView(context, list);
        }
        
        /// <summary>
        /// openquery
        /// 	 : OPENQUERY  LR_BRACKET  linked_server  COMMA  query = STRING  RR_BRACKET
        /// </summary>
        public override AstRoot VisitOpenquery(TSqlParser.OpenqueryContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOpenquery(context, list);
        }
        
        /// <summary>
        /// declare_locals
        /// 	 : declare_local  (COMMA  loc += declare_local)*
        /// </summary>
        public override AstRoot VisitDeclare_locals(TSqlParser.Declare_localsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeclareLocals(context, list);
        }
        
        /// <summary>
        /// xml_declarations
        /// 	 : xml_declaration  (COMMA  xml_dec += xml_declaration)*
        /// </summary>
        public override AstRoot VisitXml_declarations(TSqlParser.Xml_declarationsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstXmlDeclarations(context, list);
        }
        
        /// <summary>
        /// backup_certificate
        /// 	 : BACKUP  CERTIFICATE  certificate_name  TO  FILE  EQUAL  cert_file = STRING  (WITH  PRIVATE  KEY  LR_BRACKET  (COMMA?  FILE  EQUAL  private_key_file = STRING COMMA?  ENCRYPTION  BY  PASSWORD  EQUAL  encryption_password = STRING COMMA?  DECRYPTION  BY  PASSWORD  EQUAL  decryption_pasword = STRING)+  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitBackup_certificate(TSqlParser.Backup_certificateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBackupCertificate(context, list);
        }
        
        /// <summary>
        /// execute_statement
        /// 	 : EXECUTE  execute_body  SEMI?
        /// </summary>
        public override AstRoot VisitExecute_statement(TSqlParser.Execute_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteStatement(context, list);
        }
        
        /// <summary>
        /// execute_body_batch
        /// 	 : func_proc_name_server_database_schema  (execute_statement_args)?  SEMI?
        /// </summary>
        public override AstRoot VisitExecute_body_batch(TSqlParser.Execute_body_batchContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteBodyBatch(context, list);
        }
        
        /// <summary>
        /// execute_var_strings
        /// 	 : execute_var_string  (COMMA  execute_var_string)*
        /// </summary>
        public override AstRoot VisitExecute_var_strings(TSqlParser.Execute_var_stringsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteVarStrings(context, list);
        }
        
        /// <summary>
        /// execute_statement_arg_nameds
        /// 	 : execute_statement_arg_named  (COMMA  execute_statement_arg_named)*
        /// </summary>
        public override AstRoot VisitExecute_statement_arg_nameds(TSqlParser.Execute_statement_arg_namedsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteStatementArgNameds(context, list);
        }
        
        /// <summary>
        /// execute_statement_args
        /// 	 : execute_statement_arg  (COMMA  execute_statement_arg)*
        /// </summary>
        public override AstRoot VisitExecute_statement_args(TSqlParser.Execute_statement_argsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteStatementArgs(context, list);
        }
        
        /// <summary>
        /// create_certificate
        /// 	 : CREATE  CERTIFICATE  certificate_name  (AUTHORIZATION  user_name)?  (FROM  existing_keys generate_new_keys)  (ACTIVE  FOR  BEGIN  DIALOG  EQUAL  on_off)?
        /// </summary>
        public override AstRoot VisitCreate_certificate(TSqlParser.Create_certificateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateCertificate(context, list);
        }
        
        /// <summary>
        /// use_statement
        /// 	 : USE  database_name  SEMI?
        /// </summary>
        public override AstRoot VisitUse_statement(TSqlParser.Use_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUseStatement(context, list);
        }
        
        /// <summary>
        /// dbcc_options
        /// 	 : simple_id  (COMMA  simple_id)?
        /// </summary>
        public override AstRoot VisitDbcc_options(TSqlParser.Dbcc_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDbccOptions(context, list);
        }
        
        /// <summary>
        /// declare_local
        /// 	 : LOCAL_ID  AS?  data_type  (EQUAL  expression)?
        /// </summary>
        public override AstRoot VisitDeclare_local(TSqlParser.Declare_localContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeclareLocal(context, list);
        }
        
        /// <summary>
        /// table_type_definition
        /// 	 : TABLE  LR_BRACKET  column_def_table_constraints  (COMMA?  table_type_indices)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitTable_type_definition(TSqlParser.Table_type_definitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableTypeDefinition(context, list);
        }
        
        /// <summary>
        /// xml_type_definition
        /// 	 : XML  LR_BRACKET  (CONTENT DOCUMENT)?  xml_schema_collection  RR_BRACKET
        /// </summary>
        public override AstRoot VisitXml_type_definition(TSqlParser.Xml_type_definitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstXmlTypeDefinition(context, list);
        }
        
        /// <summary>
        /// column_def_table_constraints
        /// 	 : column_def_table_constraint  (COMMA?  column_def_table_constraint)*
        /// </summary>
        public override AstRoot VisitColumn_def_table_constraints(TSqlParser.Column_def_table_constraintsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnDefTableConstraints(context, list);
        }
        
        /// <summary>
        /// column_definition
        /// 	 : column_name  (data_type AS  expression  PERSISTED?)  column_definition_element*  column_index?
        /// </summary>
        public override AstRoot VisitColumn_definition(TSqlParser.Column_definitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnDefinition(context, list);
        }
        
        /// <summary>
        /// column_modifier
        /// 	 : id_  add_drop  (ROWGUIDCOL PERSISTED NOT  FOR  REPLICATION SPARSE HIDDEN_KEYWORD MASKED  (WITH  (FUNCTION  EQUAL  STRING LR_BRACKET  FUNCTION  EQUAL  STRING  RR_BRACKET))?)
        /// </summary>
        public override AstRoot VisitColumn_modifier(TSqlParser.Column_modifierContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnModifier(context, list);
        }
        
        /// <summary>
        /// materialized_column_definition
        /// 	 : id_  (COMPUTE AS)  expression  (MATERIALIZED NOT  MATERIALIZED)?
        /// </summary>
        public override AstRoot VisitMaterialized_column_definition(TSqlParser.Materialized_column_definitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMaterializedColumnDefinition(context, list);
        }
        
        /// <summary>
        /// column_index
        /// 	 : INDEX  index_name?  create_table_index_options?  on_partition_or_filegroup?  (FILESTREAM_ON  (filestream_filegroup_or_partition_schema_name NULL_DOUBLE_QUOTE))?
        /// </summary>
        public override AstRoot VisitColumn_index(TSqlParser.Column_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnIndex(context, list);
        }
        
        /// <summary>
        /// primary_key_options
        /// 	 : (WITH  FILLFACTOR  EQUAL  DECIMAL)?  alter_table_index_options?  on_partition_or_filegroup?
        /// </summary>
        public override AstRoot VisitPrimary_key_options(TSqlParser.Primary_key_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPrimaryKeyOptions(context, list);
        }
        
        /// <summary>
        /// foreign_key_options
        /// 	 : REFERENCES  full_table_name  LR_BRACKET  pk = column_name_list  RR_BRACKET  on_delete?  on_update?  (NOT  FOR  REPLICATION)?
        /// </summary>
        public override AstRoot VisitForeign_key_options(TSqlParser.Foreign_key_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstForeignKeyOptions(context, list);
        }
        
        /// <summary>
        /// check_constraint
        /// 	 : CHECK  (NOT  FOR  REPLICATION)?  LR_BRACKET  search_condition  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCheck_constraint(TSqlParser.Check_constraintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCheckConstraint(context, list);
        }
        
        /// <summary>
        /// alter_table_index_options
        /// 	 : WITH  LR_BRACKET  alter_table_index_option  (COMMA  alter_table_index_option)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_table_index_options(TSqlParser.Alter_table_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterTableIndexOptions(context, list);
        }
        
        /// <summary>
        /// declare_cursor
        /// 	 : DECLARE  cursor_name  (CURSOR  (declare_set_cursor_common  (FOR  UPDATE  (OF  column_name_list)?)?)? sensitive?  SCROLL?  CURSOR  FOR  select_statement_standalone  (FOR  (READ  ONLY UPDATE (OF  column_name_list)))?)  SEMI?
        /// </summary>
        public override AstRoot VisitDeclare_cursor(TSqlParser.Declare_cursorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeclareCursor(context, list);
        }
        
        /// <summary>
        /// declare_set_cursor_common
        /// 	 : declare_set_cursor_common_partial*  FOR  select_statement_standalone
        /// </summary>
        public override AstRoot VisitDeclare_set_cursor_common(TSqlParser.Declare_set_cursor_commonContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeclareSetCursorCommon(context, list);
        }
        
        /// <summary>
        /// fetch_cursor
        /// 	 : FETCH  ((fetch_cursor_strategy absolute_relative  expression)?  FROM)?  GLOBAL?  cursor_name  (INTO  local_ids)?  SEMI?
        /// </summary>
        public override AstRoot VisitFetch_cursor(TSqlParser.Fetch_cursorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFetchCursor(context, list);
        }
        
        /// <summary>
        /// time_zone
        /// 	 : AT_KEYWORD  TIME  ZONE  expression
        /// </summary>
        public override AstRoot VisitTime_zone(TSqlParser.Time_zoneContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTimeZone(context, list);
        }
        
        /// <summary>
        /// select_order_by_clause
        /// 	 : order_by_clause  (OFFSET  offset_exp = expression  offset_rows = (ROW ROWS)  (FETCH  fetch_offset = (FIRST NEXT)  fetch_exp = expression  fetch_rows = (ROW ROWS)  ONLY)?)?
        /// </summary>
        public override AstRoot VisitSelect_order_by_clause(TSqlParser.Select_order_by_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSelectOrderByClause(context, list);
        }
        
        /// <summary>
        /// option_clause
        /// 	 : OPTION  LR_BRACKET  option  (COMMA  option)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitOption_clause(TSqlParser.Option_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOptionClause(context, list);
        }
        
        /// <summary>
        /// optimize_for_args
        /// 	 : optimize_for_arg  (COMMA  optimize_for_arg)*
        /// </summary>
        public override AstRoot VisitOptimize_for_args(TSqlParser.Optimize_for_argsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOptimizeForArgs(context, list);
        }
        
        /// <summary>
        /// table_asterisk
        /// 	 : full_table_name  DOT  STAR
        /// </summary>
        public override AstRoot VisitTable_asterisk(TSqlParser.Table_asteriskContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableAsterisk(context, list);
        }
        
        /// <summary>
        /// column_elem
        /// 	 : column_elem_target  as_column_alias?
        /// </summary>
        public override AstRoot VisitColumn_elem(TSqlParser.Column_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnElem(context, list);
        }
        
        /// <summary>
        /// expression_assign_elem
        /// 	 : LOCAL_ID  (assignment_operator EQUAL)  expression
        /// </summary>
        public override AstRoot VisitExpression_assign_elem(TSqlParser.Expression_assign_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExpressionAssignElem(context, list);
        }
        
        /// <summary>
        /// expression2
        /// 	 : expression  (COMMA  expression)?
        /// </summary>
        public override AstRoot VisitExpression2(TSqlParser.Expression2Context context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExpression2(context, list);
        }
        
        /// <summary>
        /// open_xml
        /// 	 : OPENXML  LR_BRACKET  expression  COMMA  expression2  RR_BRACKET  (WITH  LR_BRACKET  schema_declaration  RR_BRACKET)?  as_table_alias?
        /// </summary>
        public override AstRoot VisitOpen_xml(TSqlParser.Open_xmlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOpenXml(context, list);
        }
        
        /// <summary>
        /// open_json
        /// 	 : OPENJSON  LR_BRACKET  expression2  RR_BRACKET  (WITH  LR_BRACKET  json_declaration  RR_BRACKET)?  as_table_alias?
        /// </summary>
        public override AstRoot VisitOpen_json(TSqlParser.Open_jsonContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOpenJson(context, list);
        }
        
        /// <summary>
        /// json_column_declaration
        /// 	 : column_declaration  (AS  JSON)?
        /// </summary>
        public override AstRoot VisitJson_column_declaration(TSqlParser.Json_column_declarationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstJsonColumnDeclaration(context, list);
        }
        
        /// <summary>
        /// column_declaration
        /// 	 : id_  data_type  STRING?
        /// </summary>
        public override AstRoot VisitColumn_declaration(TSqlParser.Column_declarationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnDeclaration(context, list);
        }
        
        /// <summary>
        /// cross_join
        /// 	 : CROSS  JOIN  table_source
        /// </summary>
        public override AstRoot VisitCross_join(TSqlParser.Cross_joinContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCrossJoin(context, list);
        }
        
        /// <summary>
        /// pivot
        /// 	 : PIVOT  pivot_clause  as_table_alias
        /// </summary>
        public override AstRoot VisitPivot(TSqlParser.PivotContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPivot(context, list);
        }
        
        /// <summary>
        /// unpivot
        /// 	 : UNPIVOT  unpivot_clause  as_table_alias
        /// </summary>
        public override AstRoot VisitUnpivot(TSqlParser.UnpivotContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUnpivot(context, list);
        }
        
        /// <summary>
        /// pivot_clause
        /// 	 : LR_BRACKET  aggregate_windowed_function  FOR  full_column_name  IN  column_alias_list  RR_BRACKET
        /// </summary>
        public override AstRoot VisitPivot_clause(TSqlParser.Pivot_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPivotClause(context, list);
        }
        
        /// <summary>
        /// unpivot_clause
        /// 	 : LR_BRACKET  unpivot_exp = expression  FOR  full_column_name  IN  LR_BRACKET  full_column_name_list  RR_BRACKET  RR_BRACKET
        /// </summary>
        public override AstRoot VisitUnpivot_clause(TSqlParser.Unpivot_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUnpivotClause(context, list);
        }
        
        /// <summary>
        /// bulk_options
        /// 	 : bulk_option  (COMMA  bulk_option)*
        /// </summary>
        public override AstRoot VisitBulk_options(TSqlParser.Bulk_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBulkOptions(context, list);
        }
        
        /// <summary>
        /// bulk_option
        /// 	 : id_  EQUAL  bulk_option_value = (DECIMAL STRING)
        /// </summary>
        public override AstRoot VisitBulk_option(TSqlParser.Bulk_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBulkOption(context, list);
        }
        
        /// <summary>
        /// partition_function
        /// 	 : (database_name  DOT)?  DOLLAR_PARTITION  DOT  function_name  LR_BRACKET  expression  RR_BRACKET
        /// </summary>
        public override AstRoot VisitPartition_function(TSqlParser.Partition_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPartitionFunction(context, list);
        }
        
        /// <summary>
        /// expression_language
        /// 	 : expression  (COMMA  LANGUAGE  expression)?
        /// </summary>
        public override AstRoot VisitExpression_language(TSqlParser.Expression_languageContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExpressionLanguage(context, list);
        }
        
        /// <summary>
        /// freetext_table_andcolumn_names
        /// 	 : full_table_name  COMMA  (full_column_name full_column_names STAR)
        /// </summary>
        public override AstRoot VisitFreetext_table_andcolumn_names(TSqlParser.Freetext_table_andcolumn_namesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFreetextTableAndcolumnNames(context, list);
        }
        
        /// <summary>
        /// full_column_names
        /// 	 : LR_BRACKET  full_column_name  (COMMA  full_column_name)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitFull_column_names(TSqlParser.Full_column_namesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFullColumnNames(context, list);
        }
        
        /// <summary>
        /// expressions
        /// 	 : expression  (COMMA  expression)*
        /// </summary>
        public override AstRoot VisitExpressions(TSqlParser.ExpressionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExpressions(context, list);
        }
        
        /// <summary>
        /// switch_section
        /// 	 : WHEN  expression  THEN  expression
        /// </summary>
        public override AstRoot VisitSwitch_section(TSqlParser.Switch_sectionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSwitchSection(context, list);
        }
        
        /// <summary>
        /// switch_search_condition_section
        /// 	 : WHEN  search_condition  THEN  expression
        /// </summary>
        public override AstRoot VisitSwitch_search_condition_section(TSqlParser.Switch_search_condition_sectionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSwitchSearchConditionSection(context, list);
        }
        
        /// <summary>
        /// as_column_alias
        /// 	 : AS?  column_alias
        /// </summary>
        public override AstRoot VisitAs_column_alias(TSqlParser.As_column_aliasContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAsColumnAlias(context, list);
        }
        
        /// <summary>
        /// as_table_alias
        /// 	 : AS?  table_alias
        /// </summary>
        public override AstRoot VisitAs_table_alias(TSqlParser.As_table_aliasContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAsTableAlias(context, list);
        }
        
        /// <summary>
        /// deprecated_table_hint
        /// 	 : LR_BRACKET  table_hint  RR_BRACKET
        /// </summary>
        public override AstRoot VisitDeprecated_table_hint(TSqlParser.Deprecated_table_hintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeprecatedTableHint(context, list);
        }
        
        /// <summary>
        /// index_values
        /// 	 : index_value  (COMMA  index_value)*
        /// </summary>
        public override AstRoot VisitIndex_values(TSqlParser.Index_valuesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstIndexValues(context, list);
        }
        
        /// <summary>
        /// all_distinct_expression
        /// 	 : (ALL DISTINCT)?  expression
        /// </summary>
        public override AstRoot VisitAll_distinct_expression(TSqlParser.All_distinct_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAllDistinctExpression(context, list);
        }
        
        /// <summary>
        /// over_clause
        /// 	 : OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  order_by_clause?  row_or_range_clause?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitOver_clause(TSqlParser.Over_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOverClause(context, list);
        }
        
        /// <summary>
        /// row_or_range_clause
        /// 	 : (ROWS RANGE)  window_frame_extent
        /// </summary>
        public override AstRoot VisitRow_or_range_clause(TSqlParser.Row_or_range_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRowOrRangeClause(context, list);
        }
        
        /// <summary>
        /// database_filestream_options
        /// 	 : database_filestream_option  (COMMA  database_filestream_option)*
        /// </summary>
        public override AstRoot VisitDatabase_filestream_options(TSqlParser.Database_filestream_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDatabaseFilestreamOptions(context, list);
        }
        
        /// <summary>
        /// file_group
        /// 	 : FILEGROUP  id_  (CONTAINS  FILESTREAM)?  (DEFAULT)?  (CONTAINS  MEMORY_OPTIMIZED_DATA)?  file_spec  (COMMA  file_spec)*
        /// </summary>
        public override AstRoot VisitFile_group(TSqlParser.File_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFileGroup(context, list);
        }
        
        /// <summary>
        /// file_spec
        /// 	 : LR_BRACKET  NAME  EQUAL  id_or_string  COMMA?  FILENAME  EQUAL  file = STRING  COMMA?  (SIZE  EQUAL  file_size  COMMA?)?  (MAXSIZE  EQUAL  (file_size UNLIMITED)  COMMA?)?  (FILEGROWTH  EQUAL  file_size  COMMA?)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitFile_spec(TSqlParser.File_specContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFileSpec(context, list);
        }
        
        /// <summary>
        /// entity_name
        /// 	 : (server_name  DOT  database_name  DOT  schema_name  DOT database_name  DOT  schema_name?  DOT schema_name  DOT)?  tableName
        /// </summary>
        public override AstRoot VisitEntity_name(TSqlParser.Entity_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEntityName(context, list);
        }
        
        /// <summary>
        /// column_name_list_with_order
        /// 	 : id_  (ASC DESC)?  (COMMA  id_  (ASC DESC)?)*
        /// </summary>
        public override AstRoot VisitColumn_name_list_with_order(TSqlParser.Column_name_list_with_orderContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnNameListWithOrder(context, list);
        }
        
        /// <summary>
        /// begin_conversation_timer
        /// 	 : BEGIN  CONVERSATION  TIMER  LR_BRACKET  LOCAL_ID  RR_BRACKET  TIMEOUT  EQUAL  time  SEMI?
        /// </summary>
        public override AstRoot VisitBegin_conversation_timer(TSqlParser.Begin_conversation_timerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBeginConversationTimer(context, list);
        }
        
        /// <summary>
        /// begin_conversation_dialog
        /// 	 : BEGIN  DIALOG  (CONVERSATION)?  dialog_handle = LOCAL_ID  FROM  SERVICE  initiator_service_name = service_name  TO  SERVICE  target_service_name = service_name  (COMMA  service_broker_guid = STRING)?  ON  CONTRACT  contract_name  (WITH  ((RELATED_CONVERSATION RELATED_CONVERSATION_GROUP)  EQUAL  LOCAL_ID  COMMA?)?  (LIFETIME  EQUAL  (DECIMAL LOCAL_ID)  COMMA?)?  (ENCRYPTION  EQUAL  on_off)?)?  SEMI?
        /// </summary>
        public override AstRoot VisitBegin_conversation_dialog(TSqlParser.Begin_conversation_dialogContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBeginConversationDialog(context, list);
        }
        
        /// <summary>
        /// waitfor_conversation
        /// 	 : WAITFOR?  LR_BRACKET  get_conversation  RR_BRACKET  (COMMA?  TIMEOUT  timeout = time)?  SEMI?
        /// </summary>
        public override AstRoot VisitWaitfor_conversation(TSqlParser.Waitfor_conversationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWaitforConversation(context, list);
        }
        
        /// <summary>
        /// file_size
        /// 	 : DECIMAL  file_size_unity?
        /// </summary>
        public override AstRoot VisitFile_size(TSqlParser.File_sizeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFileSize(context, list);
        }
    }
}
