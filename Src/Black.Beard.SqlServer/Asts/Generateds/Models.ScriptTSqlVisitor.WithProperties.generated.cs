#nullable disable
// Generate by Models.ScriptTSqlVisitor.WithProperties
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Parsers.TSql
{
    using System;
    using Bb.Parsers;
    using Bb.Asts.TSql;
    using Bb.Asts;
    using Bb.Parsers.TSql.Antlr;
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using System.Collections;
    
    
    public partial class ScriptTSqlVisitor
    {
        
        /// <summary>
        /// block_statement
        /// 	 : BEGIN  SEMI?  sql_clauses?  END  SEMI?
        /// </summary>
        public override AstRoot VisitBlock_statement(TSqlParser.Block_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBlockStatement(context, list);
        }
        
        /// <summary>
        /// return_statement
        /// 	 : RETURN  expression?  SEMI?
        /// </summary>
        public override AstRoot VisitReturn_statement(TSqlParser.Return_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstReturnStatement(context, list);
        }
        
        /// <summary>
        /// if_statement
        /// 	 : IF  search_condition  sql_clause_true = sql_clause  (ELSE  sql_clause_false = sql_clause)?  SEMI?
        /// </summary>
        public override AstRoot VisitIf_statement(TSqlParser.If_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstIfStatement(context, list);
        }
        
        /// <summary>
        /// throw_error_number
        /// 	 : decimal_local_id
        /// </summary>
        public override AstRoot VisitThrow_error_number(TSqlParser.Throw_error_numberContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstThrowErrorNumber(context, list);
        }
        
        /// <summary>
        /// throw_message
        /// 	 : string_local_id
        /// </summary>
        public override AstRoot VisitThrow_message(TSqlParser.Throw_messageContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstThrowMessage(context, list);
        }
        
        /// <summary>
        /// throw_state
        /// 	 : decimal_local_id
        /// </summary>
        public override AstRoot VisitThrow_state(TSqlParser.Throw_stateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstThrowState(context, list);
        }
        
        /// <summary>
        /// waitfor_statement
        /// 	 : WAITFOR  receive_statement?  COMMA?  (delay_time_timeout  time)?  expression?  SEMI?
        /// </summary>
        public override AstRoot VisitWaitfor_statement(TSqlParser.Waitfor_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWaitforStatement(context, list);
        }
        
        /// <summary>
        /// while_statement
        /// 	 : WHILE  search_condition  (sql_clause | BREAK  SEMI? | CONTINUE  SEMI?)
        /// </summary>
        public override AstRoot VisitWhile_statement(TSqlParser.While_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWhileStatement(context, list);
        }
        
        /// <summary>
        /// print_statement
        /// 	 : PRINT  (expression | empty_value)  local_ids?  SEMI?
        /// </summary>
        public override AstRoot VisitPrint_statement(TSqlParser.Print_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPrintStatement(context, list);
        }
        
        /// <summary>
        /// constant_local_id_or_null
        /// 	 : constant_LOCAL_ID
        /// 	 | NULL_
        /// </summary>
        public override AstRoot VisitConstant_local_id_or_null(TSqlParser.Constant_local_id_or_nullContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstConstantLocalIdOrNull(context, list);
        }
        
        /// <summary>
        /// alter_application_role
        /// 	 : ALTER  APPLICATION  ROLE  role_id  WITH  (COMMA?  NAME  EQUAL  new_role = role_id)?  (COMMA?  PASSWORD  EQUAL  application_role_password = stringtext)?  (COMMA?  DEFAULT_SCHEMA  EQUAL  schema_id)?
        /// </summary>
        public override AstRoot VisitAlter_application_role(TSqlParser.Alter_application_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterApplicationRole(context, list);
        }
        
        /// <summary>
        /// create_application_role
        /// 	 : CREATE  APPLICATION  ROLE  role_id  WITH  (COMMA?  PASSWORD  EQUAL  application_role_password = stringtext)?  (COMMA?  DEFAULT_SCHEMA  EQUAL  schema_id)?
        /// </summary>
        public override AstRoot VisitCreate_application_role(TSqlParser.Create_application_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateApplicationRole(context, list);
        }
        
        /// <summary>
        /// drop_aggregate
        /// 	 : DROP  AGGREGATE  (IF  EXISTS)?  schema_aggregate_ref
        /// </summary>
        public override AstRoot VisitDrop_aggregate(TSqlParser.Drop_aggregateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropAggregate(context, list);
        }
        
        /// <summary>
        /// drop_application_role
        /// 	 : DROP  APPLICATION  ROLE  role_id
        /// </summary>
        public override AstRoot VisitDrop_application_role(TSqlParser.Drop_application_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropApplicationRole(context, list);
        }
        
        /// <summary>
        /// alter_assembly
        /// 	 : alter_assembly_start  assembly_id  alter_assembly_clause
        /// </summary>
        public override AstRoot VisitAlter_assembly(TSqlParser.Alter_assemblyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssembly(context, list);
        }
        
        /// <summary>
        /// alter_assembly_clause
        /// 	 : alter_assembly_from_clause?  alter_assembly_with_clause?  alter_assembly_drop_clause?  alter_assembly_add_clause?
        /// </summary>
        public override AstRoot VisitAlter_assembly_clause(TSqlParser.Alter_assembly_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyClause(context, list);
        }
        
        /// <summary>
        /// alter_assembly_from_clause
        /// 	 : alter_assembly_from_clause_start  (client_assembly_specifier | alter_assembly_file_bits)
        /// </summary>
        public override AstRoot VisitAlter_assembly_from_clause(TSqlParser.Alter_assembly_from_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyFromClause(context, list);
        }
        
        /// <summary>
        /// alter_assembly_drop_clause
        /// 	 : alter_assembly_drop  alter_assembly_drop_multiple_files
        /// </summary>
        public override AstRoot VisitAlter_assembly_drop_clause(TSqlParser.Alter_assembly_drop_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyDropClause(context, list);
        }
        
        /// <summary>
        /// alter_assembly_add_clause
        /// 	 : ADD  FILE  FROM  alter_assembly_client_file_clause
        /// </summary>
        public override AstRoot VisitAlter_assembly_add_clause(TSqlParser.Alter_assembly_add_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyAddClause(context, list);
        }
        
        /// <summary>
        /// alter_assembly_client_file_clause
        /// 	 : assembly_file_name  (AS  id_)?
        /// </summary>
        public override AstRoot VisitAlter_assembly_client_file_clause(TSqlParser.Alter_assembly_client_file_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyClientFileClause(context, list);
        }
        
        /// <summary>
        /// alter_assembly_file_bits
        /// 	 : AS  id_
        /// </summary>
        public override AstRoot VisitAlter_assembly_file_bits(TSqlParser.Alter_assembly_file_bitsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyFileBits(context, list);
        }
        
        /// <summary>
        /// alter_assembly_with_clause
        /// 	 : WITH  assembly_option
        /// </summary>
        public override AstRoot VisitAlter_assembly_with_clause(TSqlParser.Alter_assembly_with_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyWithClause(context, list);
        }
        
        /// <summary>
        /// network_file_share
        /// 	 : network_file_start  network_computer  file_path
        /// </summary>
        public override AstRoot VisitNetwork_file_share(TSqlParser.Network_file_shareContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstNetworkFileShare(context, list);
        }
        
        /// <summary>
        /// local_file
        /// 	 : local_drive  file_path
        /// </summary>
        public override AstRoot VisitLocal_file(TSqlParser.Local_fileContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstLocalFile(context, list);
        }
        
        /// <summary>
        /// create_assembly
        /// 	 : CREATE  ASSEMBLY  assembly_id  (AUTHORIZATION  owner_id)?  FROM  binary_content_nexts  (WITH  PERMISSION_SET  EQUAL  (SAFE | EXTERNAL_ACCESS | UNSAFE))?
        /// </summary>
        public override AstRoot VisitCreate_assembly(TSqlParser.Create_assemblyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateAssembly(context, list);
        }
        
        /// <summary>
        /// binary_content_next
        /// 	 : COMMA?  binary_content
        /// </summary>
        public override AstRoot VisitBinary_content_next(TSqlParser.Binary_content_nextContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBinaryContentNext(context, list);
        }
        
        /// <summary>
        /// drop_assembly
        /// 	 : DROP  ASSEMBLY  (IF  EXISTS)?  assemblies  (WITH  NO  DEPENDENTS)?
        /// </summary>
        public override AstRoot VisitDrop_assembly(TSqlParser.Drop_assemblyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropAssembly(context, list);
        }
        
        /// <summary>
        /// alter_asymmetric_key
        /// 	 : ALTER  ASYMMETRIC  KEY  asym_key_id  (asymmetric_key_option | REMOVE  PRIVATE  KEY)
        /// </summary>
        public override AstRoot VisitAlter_asymmetric_key(TSqlParser.Alter_asymmetric_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAsymmetricKey(context, list);
        }
        
        /// <summary>
        /// create_asymmetric_key
        /// 	 : CREATE  ASYMMETRIC  KEY  asym_key_id  (AUTHORIZATION  database_id)?  (FROM  (FILE  EQUAL  STRING | EXECUTABLE_FILE  EQUAL  STRING | ASSEMBLY  assembly_id | PROVIDER  provider_id))?  (WITH  (ALGORITHM  EQUAL  (RSA_4096 | RSA_3072 | RSA_2048 | RSA_1024 | RSA_512) | PROVIDER_KEY_NAME  EQUAL  provider_key_name = stringtext | CREATION_DISPOSITION  EQUAL  (CREATE_NEW | OPEN_EXISTING)))?  encryption_by_pwd?
        /// </summary>
        public override AstRoot VisitCreate_asymmetric_key(TSqlParser.Create_asymmetric_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateAsymmetricKey(context, list);
        }
        
        /// <summary>
        /// alter_authorization
        /// 	 : ALTER  AUTHORIZATION  ON  (class_type  DOUBLE_COLON)?  entity = entity_name  TO  authorization_grantee
        /// </summary>
        public override AstRoot VisitAlter_authorization(TSqlParser.Alter_authorizationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAuthorization(context, list);
        }
        
        /// <summary>
        /// alter_authorization_for_sql_database
        /// 	 : ALTER  AUTHORIZATION  ON  (class_type_for_sql_database  DOUBLE_COLON)?  entity = entity_name  TO  authorization_grantee
        /// </summary>
        public override AstRoot VisitAlter_authorization_for_sql_database(TSqlParser.Alter_authorization_for_sql_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAuthorizationForSqlDatabase(context, list);
        }
        
        /// <summary>
        /// alter_authorization_for_azure_dw
        /// 	 : ALTER  AUTHORIZATION  ON  (class_type_for_azure_dw  DOUBLE_COLON)?  entity = entity_name_for_azure_dw_ref  TO  authorization_grantee
        /// </summary>
        public override AstRoot VisitAlter_authorization_for_azure_dw(TSqlParser.Alter_authorization_for_azure_dwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAuthorizationForAzureDw(context, list);
        }
        
        /// <summary>
        /// alter_authorization_for_parallel_dw
        /// 	 : ALTER  AUTHORIZATION  ON  (class_type_for_parallel_dw  DOUBLE_COLON)?  entity = entity_name_for_parallel_dw_ref  TO  authorization_grantee
        /// </summary>
        public override AstRoot VisitAlter_authorization_for_parallel_dw(TSqlParser.Alter_authorization_for_parallel_dwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAuthorizationForParallelDw(context, list);
        }
        
        /// <summary>
        /// drop_availability_group
        /// 	 : DROP  AVAILABILITY  GROUP  group_id
        /// </summary>
        public override AstRoot VisitDrop_availability_group(TSqlParser.Drop_availability_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropAvailabilityGroup(context, list);
        }
        
        /// <summary>
        /// alter_availability_group
        /// 	 : alter_availability_group_start  alter_availability_group_options
        /// </summary>
        public override AstRoot VisitAlter_availability_group(TSqlParser.Alter_availability_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAvailabilityGroup(context, list);
        }
        
        /// <summary>
        /// alter_availability_group_start
        /// 	 : ALTER  AVAILABILITY  GROUP  group_id
        /// </summary>
        public override AstRoot VisitAlter_availability_group_start(TSqlParser.Alter_availability_group_startContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAvailabilityGroupStart(context, list);
        }
        
        /// <summary>
        /// alter_availability_group_options_database
        /// 	 : add_remove  DATABASE  database_id
        /// </summary>
        public override AstRoot VisitAlter_availability_group_options_database(TSqlParser.Alter_availability_group_options_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAvailabilityGroupOptionsDatabase(context, list);
        }
        
        /// <summary>
        /// range_ip_v4
        /// 	 : left = IPV4_ADDR  right = IPV4_ADDR
        /// </summary>
        public override AstRoot VisitRange_ip_v4(TSqlParser.Range_ip_v4Context context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRangeIpV4(context, list);
        }
        
        /// <summary>
        /// range_ip_comma_v4
        /// 	 : left = IPV4_ADDR  COMMA  right = IPV4_ADDR
        /// </summary>
        public override AstRoot VisitRange_ip_comma_v4(TSqlParser.Range_ip_comma_v4Context context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRangeIpCommaV4(context, list);
        }
        
        /// <summary>
        /// alter_availability_group_options_listener_restart
        /// 	 : restart_remove  LISTENER  STRING
        /// </summary>
        public override AstRoot VisitAlter_availability_group_options_listener_restart(TSqlParser.Alter_availability_group_options_listener_restartContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAvailabilityGroupOptionsListenerRestart(context, list);
        }
        
        /// <summary>
        /// alter_availability_group_options_listener_dhcp
        /// 	 : WITH  DHCP  ON  LR_BRACKET  range_ip_v4  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_availability_group_options_listener_dhcp(TSqlParser.Alter_availability_group_options_listener_dhcpContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAvailabilityGroupOptionsListenerDhcp(context, list);
        }
        
        /// <summary>
        /// alter_availability_replicat_modify
        /// 	 : MODIFY  REPLICA  ON  server_instance  (WITH  LR_BRACKET  alter_availability_replicat_primary  RR_BRACKET | SECONDARY_ROLE  LR_BRACKET  alter_availability_secondary_role  RR_BRACKET | PRIMARY_ROLE  LR_BRACKET  alter_availability_primary_role  RR_BRACKET)
        /// </summary>
        public override AstRoot VisitAlter_availability_replicat_modify(TSqlParser.Alter_availability_replicat_modifyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAvailabilityReplicatModify(context, list);
        }
        
        /// <summary>
        /// routing_list
        /// 	 : string_list
        /// 	 | NONE
        /// </summary>
        public override AstRoot VisitRouting_list(TSqlParser.Routing_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRoutingList(context, list);
        }
        
        /// <summary>
        /// alter_availability_secondary_role
        /// 	 : allow_connections
        /// 	 | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  routingList = stringtext  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_availability_secondary_role(TSqlParser.Alter_availability_secondary_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAvailabilitySecondaryRole(context, list);
        }
        
        /// <summary>
        /// alter_availability_replicat_add
        /// 	 : ADD  REPLICA  ON  server_instance  WITH  LR_BRACKET  (ENDPOINT_URL  EQUAL  STRING)?  (COMMA?  availability_mode)?  (COMMA?  FAILOVER_MODE  EQUAL  auto_manual)?  (COMMA?  seeding_mode)?  (COMMA?  backup_priority)?  (COMMA?  PRIMARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  real_write_all  RR_BRACKET)?  (COMMA?  SECONDARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  READ_ONLY  RR_BRACKET)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_availability_replicat_add(TSqlParser.Alter_availability_replicat_addContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAvailabilityReplicatAdd(context, list);
        }
        
        /// <summary>
        /// availability_mode
        /// 	 : AVAILABILITY_MODE  EQUAL  synch_asynch
        /// </summary>
        public override AstRoot VisitAvailability_mode(TSqlParser.Availability_modeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAvailabilityMode(context, list);
        }
        
        /// <summary>
        /// seeding_mode
        /// 	 : SEEDING_MODE  EQUAL  auto_manual
        /// </summary>
        public override AstRoot VisitSeeding_mode(TSqlParser.Seeding_modeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSeedingMode(context, list);
        }
        
        /// <summary>
        /// allow_connections
        /// 	 : ALLOW_CONNECTIONS  EQUAL  no_real_write_all
        /// </summary>
        public override AstRoot VisitAllow_connections(TSqlParser.Allow_connectionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAllowConnections(context, list);
        }
        
        /// <summary>
        /// create_or_alter_broker_priority
        /// 	 : create_alter  BROKER  PRIORITY  ConversationPriorityName = id_  FOR  CONVERSATION  SET  LR_BRACKET  broker_contract_name?  broker_local_service_name?  broker_remote_service_name?  broker_priority_level?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCreate_or_alter_broker_priority(TSqlParser.Create_or_alter_broker_priorityContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterBrokerPriority(context, list);
        }
        
        /// <summary>
        /// alter_certificate
        /// 	 : ALTER  CERTIFICATE  certificate_id  (REMOVE  PRIVATE_KEY | WITH  PRIVATE  KEY  LR_BRACKET  private_keys  RR_BRACKET | WITH  ACTIVE  FOR  BEGIN_DIALOG  EQUAL  on_off)
        /// </summary>
        public override AstRoot VisitAlter_certificate(TSqlParser.Alter_certificateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterCertificate(context, list);
        }
        
        /// <summary>
        /// alter_column_encryption_key
        /// 	 : ALTER  COLUMN  ENCRYPTION  KEY  column_encryption_key_id  add_drop  VALUE  LR_BRACKET  COLUMN_MASTER_KEY  EQUAL  column_master_key_name = id_  (COMMA  ALGORITHM  EQUAL  algorithm_name = stringtext  COMMA  ENCRYPTED_VALUE  EQUAL  BINARY)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_column_encryption_key(TSqlParser.Alter_column_encryption_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterColumnEncryptionKey(context, list);
        }
        
        /// <summary>
        /// create_column_encryption_key
        /// 	 : CREATE  COLUMN  ENCRYPTION  KEY  column_encryption_key_id  WITH  VALUES  (LR_BRACKET  COMMA?  COLUMN_MASTER_KEY  EQUAL  column_master_key_name = id_  COMMA  ALGORITHM  EQUAL  algorithm_name = stringtext  COMMA  ENCRYPTED_VALUE  EQUAL  encrypted_value = BINARY  RR_BRACKET  COMMA?)+
        /// </summary>
        public override AstRoot VisitCreate_column_encryption_key(TSqlParser.Create_column_encryption_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateColumnEncryptionKey(context, list);
        }
        
        /// <summary>
        /// drop_certificate
        /// 	 : DROP  CERTIFICATE  certificate_id
        /// </summary>
        public override AstRoot VisitDrop_certificate(TSqlParser.Drop_certificateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropCertificate(context, list);
        }
        
        /// <summary>
        /// drop_column_encryption_key
        /// 	 : DROP  COLUMN  ENCRYPTION  KEY  encryptor_id
        /// </summary>
        public override AstRoot VisitDrop_column_encryption_key(TSqlParser.Drop_column_encryption_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropColumnEncryptionKey(context, list);
        }
        
        /// <summary>
        /// drop_column_master_key
        /// 	 : DROP  COLUMN  MASTER  KEY  master_key
        /// </summary>
        public override AstRoot VisitDrop_column_master_key(TSqlParser.Drop_column_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropColumnMasterKey(context, list);
        }
        
        /// <summary>
        /// drop_credential
        /// 	 : DROP  CREDENTIAL  credential_id
        /// </summary>
        public override AstRoot VisitDrop_credential(TSqlParser.Drop_credentialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropCredential(context, list);
        }
        
        /// <summary>
        /// drop_cryptograhic_provider
        /// 	 : DROP  CRYPTOGRAPHIC  PROVIDER  provider_id
        /// </summary>
        public override AstRoot VisitDrop_cryptograhic_provider(TSqlParser.Drop_cryptograhic_providerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropCryptograhicProvider(context, list);
        }
        
        /// <summary>
        /// drop_database_audit_specification
        /// 	 : DROP  DATABASE  AUDIT  SPECIFICATION  audit_id
        /// </summary>
        public override AstRoot VisitDrop_database_audit_specification(TSqlParser.Drop_database_audit_specificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDatabaseAuditSpecification(context, list);
        }
        
        /// <summary>
        /// drop_database_scoped_credential
        /// 	 : DROP  DATABASE  SCOPED  CREDENTIAL  credential_id
        /// </summary>
        public override AstRoot VisitDrop_database_scoped_credential(TSqlParser.Drop_database_scoped_credentialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDatabaseScopedCredential(context, list);
        }
        
        /// <summary>
        /// drop_endpoint
        /// 	 : DROP  ENDPOINT  endpoint_id
        /// </summary>
        public override AstRoot VisitDrop_endpoint(TSqlParser.Drop_endpointContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropEndpoint(context, list);
        }
        
        /// <summary>
        /// drop_external_data_source
        /// 	 : DROP  EXTERNAL  DATA  SOURCE  external_data_source_id
        /// </summary>
        public override AstRoot VisitDrop_external_data_source(TSqlParser.Drop_external_data_sourceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropExternalDataSource(context, list);
        }
        
        /// <summary>
        /// drop_external_file_format
        /// 	 : DROP  EXTERNAL  FILE  FORMAT  external_file_format_id
        /// </summary>
        public override AstRoot VisitDrop_external_file_format(TSqlParser.Drop_external_file_formatContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropExternalFileFormat(context, list);
        }
        
        /// <summary>
        /// drop_external_library
        /// 	 : DROP  EXTERNAL  LIBRARY  library_id  (AUTHORIZATION  owner_id)?
        /// </summary>
        public override AstRoot VisitDrop_external_library(TSqlParser.Drop_external_libraryContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropExternalLibrary(context, list);
        }
        
        /// <summary>
        /// drop_external_resource_pool
        /// 	 : DROP  EXTERNAL  RESOURCE  POOL  pool_id
        /// </summary>
        public override AstRoot VisitDrop_external_resource_pool(TSqlParser.Drop_external_resource_poolContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropExternalResourcePool(context, list);
        }
        
        /// <summary>
        /// drop_external_table
        /// 	 : DROP  EXTERNAL  TABLE  database_schema_table_ref
        /// </summary>
        public override AstRoot VisitDrop_external_table(TSqlParser.Drop_external_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropExternalTable(context, list);
        }
        
        /// <summary>
        /// drop_event_session
        /// 	 : DROP  EVENT  SESSION  event_session_id  ON  SERVER
        /// </summary>
        public override AstRoot VisitDrop_event_session(TSqlParser.Drop_event_sessionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropEventSession(context, list);
        }
        
        /// <summary>
        /// drop_fulltext_catalog
        /// 	 : DROP  FULLTEXT  CATALOG  catalog_id
        /// </summary>
        public override AstRoot VisitDrop_fulltext_catalog(TSqlParser.Drop_fulltext_catalogContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropFulltextCatalog(context, list);
        }
        
        /// <summary>
        /// drop_fulltext_index
        /// 	 : DROP  FULLTEXT  INDEX  ON  database_schema_table_ref
        /// </summary>
        public override AstRoot VisitDrop_fulltext_index(TSqlParser.Drop_fulltext_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropFulltextIndex(context, list);
        }
        
        /// <summary>
        /// drop_fulltext_stoplist
        /// 	 : DROP  FULLTEXT  STOPLIST  stoplist_id
        /// </summary>
        public override AstRoot VisitDrop_fulltext_stoplist(TSqlParser.Drop_fulltext_stoplistContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropFulltextStoplist(context, list);
        }
        
        /// <summary>
        /// drop_login
        /// 	 : DROP  LOGIN  login_id
        /// </summary>
        public override AstRoot VisitDrop_login(TSqlParser.Drop_loginContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropLogin(context, list);
        }
        
        /// <summary>
        /// drop_message_type
        /// 	 : DROP  MESSAGE  TYPE  message_type_id
        /// </summary>
        public override AstRoot VisitDrop_message_type(TSqlParser.Drop_message_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropMessageType(context, list);
        }
        
        /// <summary>
        /// drop_partition_function
        /// 	 : DROP  PARTITION  FUNCTION  partition_function_id
        /// </summary>
        public override AstRoot VisitDrop_partition_function(TSqlParser.Drop_partition_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropPartitionFunction(context, list);
        }
        
        /// <summary>
        /// drop_partition_scheme
        /// 	 : DROP  PARTITION  SCHEME  partition_scheme_id
        /// </summary>
        public override AstRoot VisitDrop_partition_scheme(TSqlParser.Drop_partition_schemeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropPartitionScheme(context, list);
        }
        
        /// <summary>
        /// drop_queue
        /// 	 : DROP  QUEUE  database_schema_queue_ref
        /// </summary>
        public override AstRoot VisitDrop_queue(TSqlParser.Drop_queueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropQueue(context, list);
        }
        
        /// <summary>
        /// drop_remote_service_binding
        /// 	 : DROP  REMOTE  SERVICE  BINDING  binding_id
        /// </summary>
        public override AstRoot VisitDrop_remote_service_binding(TSqlParser.Drop_remote_service_bindingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropRemoteServiceBinding(context, list);
        }
        
        /// <summary>
        /// drop_resource_pool
        /// 	 : DROP  RESOURCE  POOL  pool_id
        /// </summary>
        public override AstRoot VisitDrop_resource_pool(TSqlParser.Drop_resource_poolContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropResourcePool(context, list);
        }
        
        /// <summary>
        /// drop_db_role
        /// 	 : DROP  ROLE  (IF  EXISTS)?  role_id
        /// </summary>
        public override AstRoot VisitDrop_db_role(TSqlParser.Drop_db_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDbRole(context, list);
        }
        
        /// <summary>
        /// drop_route
        /// 	 : DROP  ROUTE  route_id
        /// </summary>
        public override AstRoot VisitDrop_route(TSqlParser.Drop_routeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropRoute(context, list);
        }
        
        /// <summary>
        /// drop_schema
        /// 	 : DROP  SCHEMA  (IF  EXISTS)?  schema_id
        /// </summary>
        public override AstRoot VisitDrop_schema(TSqlParser.Drop_schemaContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSchema(context, list);
        }
        
        /// <summary>
        /// drop_search_property_list
        /// 	 : DROP  SEARCH  PROPERTY  LIST  property_list_id
        /// </summary>
        public override AstRoot VisitDrop_search_property_list(TSqlParser.Drop_search_property_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSearchPropertyList(context, list);
        }
        
        /// <summary>
        /// drop_security_policy
        /// 	 : DROP  SECURITY  POLICY  (IF  EXISTS)?  schema_security_policy_ref
        /// </summary>
        public override AstRoot VisitDrop_security_policy(TSqlParser.Drop_security_policyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSecurityPolicy(context, list);
        }
        
        /// <summary>
        /// drop_server_audit
        /// 	 : DROP  SERVER  AUDIT  audit_id
        /// </summary>
        public override AstRoot VisitDrop_server_audit(TSqlParser.Drop_server_auditContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropServerAudit(context, list);
        }
        
        /// <summary>
        /// drop_server_audit_specification
        /// 	 : DROP  SERVER  AUDIT  SPECIFICATION  audit_id
        /// </summary>
        public override AstRoot VisitDrop_server_audit_specification(TSqlParser.Drop_server_audit_specificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropServerAuditSpecification(context, list);
        }
        
        /// <summary>
        /// drop_server_role
        /// 	 : DROP  SERVER  ROLE  role_id
        /// </summary>
        public override AstRoot VisitDrop_server_role(TSqlParser.Drop_server_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropServerRole(context, list);
        }
        
        /// <summary>
        /// drop_service
        /// 	 : DROP  SERVICE  service_id
        /// </summary>
        public override AstRoot VisitDrop_service(TSqlParser.Drop_serviceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropService(context, list);
        }
        
        /// <summary>
        /// drop_signature
        /// 	 : DROP  (COUNTER)?  SIGNATURE  FROM  schema_module_ref  BY  (COMMA?  CERTIFICATE  certificate_id | COMMA?  ASYMMETRIC  KEY  asym_key_id)+
        /// </summary>
        public override AstRoot VisitDrop_signature(TSqlParser.Drop_signatureContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSignature(context, list);
        }
        
        /// <summary>
        /// drop_statistics_id_azure_dw_and_pdw
        /// 	 : DROP  STATISTICS  schema_object_statistics_ref
        /// </summary>
        public override AstRoot VisitDrop_statistics_id_azure_dw_and_pdw(TSqlParser.Drop_statistics_id_azure_dw_and_pdwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropStatisticsIdAzureDwAndPdw(context, list);
        }
        
        /// <summary>
        /// drop_symmetric_key
        /// 	 : DROP  SYMMETRIC  KEY  symmetric_key_id  (REMOVE  PROVIDER  KEY)?
        /// </summary>
        public override AstRoot VisitDrop_symmetric_key(TSqlParser.Drop_symmetric_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSymmetricKey(context, list);
        }
        
        /// <summary>
        /// drop_synonym
        /// 	 : DROP  SYNONYM  (IF  EXISTS)?  schema_synonym_ref
        /// </summary>
        public override AstRoot VisitDrop_synonym(TSqlParser.Drop_synonymContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSynonym(context, list);
        }
        
        /// <summary>
        /// drop_user
        /// 	 : DROP  USER  (IF  EXISTS)?  user_id
        /// </summary>
        public override AstRoot VisitDrop_user(TSqlParser.Drop_userContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropUser(context, list);
        }
        
        /// <summary>
        /// drop_workload_group
        /// 	 : DROP  WORKLOAD  GROUP  group_id
        /// </summary>
        public override AstRoot VisitDrop_workload_group(TSqlParser.Drop_workload_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropWorkloadGroup(context, list);
        }
        
        /// <summary>
        /// drop_xml_schema_collection
        /// 	 : DROP  XML  SCHEMA  COLLECTION  schema_sql_identifier_id
        /// </summary>
        public override AstRoot VisitDrop_xml_schema_collection(TSqlParser.Drop_xml_schema_collectionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropXmlSchemaCollection(context, list);
        }
        
        /// <summary>
        /// lock_table
        /// 	 : LOCK  TABLE  full_table_ref  IN  (SHARE | EXCLUSIVE)  MODE  (WAIT  seconds = DECIMAL | NOWAIT)?  SEMI?
        /// </summary>
        public override AstRoot VisitLock_table(TSqlParser.Lock_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstLockTable(context, list);
        }
        
        /// <summary>
        /// truncate_table
        /// 	 : TRUNCATE  TABLE  full_table_ref  (WITH  LR_BRACKET  PARTITIONS  LR_BRACKET  decimal_range  RR_BRACKET  decimals?)?
        /// </summary>
        public override AstRoot VisitTruncate_table(TSqlParser.Truncate_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTruncateTable(context, list);
        }
        
        /// <summary>
        /// alter_credential
        /// 	 : ALTER  CREDENTIAL  credential_id  WITH  IDENTITY  EQUAL  identity_name = stringtext  (COMMA  SECRET  EQUAL  secret = stringtext)?
        /// </summary>
        public override AstRoot VisitAlter_credential(TSqlParser.Alter_credentialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterCredential(context, list);
        }
        
        /// <summary>
        /// create_credential
        /// 	 : CREATE  CREDENTIAL  credential_id  WITH  IDENTITY  EQUAL  identity_name = stringtext  (COMMA  SECRET  EQUAL  secret = stringtext)?  (FOR  CRYPTOGRAPHIC  PROVIDER  cryptographic_provider_id)?
        /// </summary>
        public override AstRoot VisitCreate_credential(TSqlParser.Create_credentialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateCredential(context, list);
        }
        
        /// <summary>
        /// alter_cryptographic_provider
        /// 	 : ALTER  CRYPTOGRAPHIC  PROVIDER  provider_id  (FROM  FILE  EQUAL  crypto_provider_ddl_file = stringtext)?  enable_disable?
        /// </summary>
        public override AstRoot VisitAlter_cryptographic_provider(TSqlParser.Alter_cryptographic_providerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterCryptographicProvider(context, list);
        }
        
        /// <summary>
        /// create_cryptographic_provider
        /// 	 : CREATE  CRYPTOGRAPHIC  PROVIDER  provider_id  FROM  FILE  EQUAL  path_of_DLL = stringtext
        /// </summary>
        public override AstRoot VisitCreate_cryptographic_provider(TSqlParser.Create_cryptographic_providerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateCryptographicProvider(context, list);
        }
        
        /// <summary>
        /// create_event_notification
        /// 	 : CREATE  EVENT  NOTIFICATION  event_notification_id  ON  (SERVER | DATABASE | QUEUE  queue_id)  (WITH  FAN_IN)?  FOR  (COMMA?  event_type_or_group_id)+  TO  SERVICE  broker_service = stringtext  COMMA  broker_service_specifier_or_current_database = stringtext
        /// </summary>
        public override AstRoot VisitCreate_event_notification(TSqlParser.Create_event_notificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateEventNotification(context, list);
        }
        
        /// <summary>
        /// create_or_alter_event_session
        /// 	 : (CREATE | ALTER)  EVENT  SESSION  event_session_id  ON  SERVER  create_or_alter_event_session_add_events?  create_or_alter_event_session_del_events?  create_or_alter_event_session_add_targets?  create_or_alter_event_session_del_targets?  create_or_alter_event_session_with?  (STATE  EQUAL  start_stop)?
        /// </summary>
        public override AstRoot VisitCreate_or_alter_event_session(TSqlParser.Create_or_alter_event_sessionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterEventSession(context, list);
        }
        
        /// <summary>
        /// session_arg_track_causality
        /// 	 : TRACK_CAUSALITY  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitSession_arg_track_causality(TSqlParser.Session_arg_track_causalityContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSessionArgTrackCausality(context, list);
        }
        
        /// <summary>
        /// session_arg_startup_state
        /// 	 : STARTUP_STATE  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitSession_arg_startup_state(TSqlParser.Session_arg_startup_stateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSessionArgStartupState(context, list);
        }
        
        /// <summary>
        /// create_or_alter_event_session_add_event
        /// 	 : ADD  EVENT  module_package_event_ref  (LR_BRACKET  (SET  set_attributes)?  event_session_actions  where_session_condition?  RR_BRACKET)
        /// </summary>
        public override AstRoot VisitCreate_or_alter_event_session_add_event(TSqlParser.Create_or_alter_event_session_add_eventContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterEventSessionAddEvent(context, list);
        }
        
        /// <summary>
        /// set_attribute
        /// 	 : event_customizable_attribute_id  EQUAL  decimal_string
        /// </summary>
        public override AstRoot VisitSet_attribute(TSqlParser.Set_attributeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSetAttribute(context, list);
        }
        
        /// <summary>
        /// event_session_action
        /// 	 : ACTION  LR_BRACKET  event_module_package_action_refs  RR_BRACKET
        /// </summary>
        public override AstRoot VisitEvent_session_action(TSqlParser.Event_session_actionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEventSessionAction(context, list);
        }
        
        /// <summary>
        /// where_session_condition
        /// 	 : WHERE  event_session_predicate_expression
        /// </summary>
        public override AstRoot VisitWhere_session_condition(TSqlParser.Where_session_conditionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWhereSessionCondition(context, list);
        }
        
        /// <summary>
        /// create_or_alter_event_session_add_target
        /// 	 : ADD  TARGET  module_package_event_ref  target_parameter_blocks
        /// </summary>
        public override AstRoot VisitCreate_or_alter_event_session_add_target(TSqlParser.Create_or_alter_event_session_add_targetContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterEventSessionAddTarget(context, list);
        }
        
        /// <summary>
        /// target_parameter_block
        /// 	 : LR_BRACKET  SET  target_parameter_sets  RR_BRACKET
        /// </summary>
        public override AstRoot VisitTarget_parameter_block(TSqlParser.Target_parameter_blockContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTargetParameterBlock(context, list);
        }
        
        /// <summary>
        /// target_parameter_set
        /// 	 : target_parameter_id  EQUAL  target_parameter_value
        /// </summary>
        public override AstRoot VisitTarget_parameter_set(TSqlParser.Target_parameter_setContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTargetParameterSet(context, list);
        }
        
        /// <summary>
        /// create_or_alter_event_session_del_target
        /// 	 : DROP  TARGET  module_package_event_ref
        /// </summary>
        public override AstRoot VisitCreate_or_alter_event_session_del_target(TSqlParser.Create_or_alter_event_session_del_targetContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterEventSessionDelTarget(context, list);
        }
        
        /// <summary>
        /// create_or_alter_event_session_del_event
        /// 	 : DROP  EVENT  module_package_event_ref
        /// </summary>
        public override AstRoot VisitCreate_or_alter_event_session_del_event(TSqlParser.Create_or_alter_event_session_del_eventContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterEventSessionDelEvent(context, list);
        }
        
        /// <summary>
        /// alter_external_library
        /// 	 : ALTER  EXTERNAL  LIBRARY  library_id  (AUTHORIZATION  owner_id)?  set_add  file_spec2  WITH  LR_BRACKET  (COMMA?  LANGUAGE  EQUAL  code_language | DATA_SOURCE  EQUAL  external_data_source_id)+  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_external_library(TSqlParser.Alter_external_libraryContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterExternalLibrary(context, list);
        }
        
        /// <summary>
        /// create_external_library
        /// 	 : CREATE  EXTERNAL  LIBRARY  library_id  (AUTHORIZATION  owner_id)?  FROM  file_spec2  (WITH  LR_BRACKET  (COMMA?  LANGUAGE  EQUAL  code_language | DATA_SOURCE  EQUAL  external_data_source_id)+  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitCreate_external_library(TSqlParser.Create_external_libraryContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateExternalLibrary(context, list);
        }
        
        /// <summary>
        /// file_spec2
        /// 	 : LR_BRACKET  CONTENT  EQUAL  code_content  (COMMA  PLATFORM  EQUAL  platform)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitFile_spec2(TSqlParser.File_spec2Context context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFileSpec2(context, list);
        }
        
        /// <summary>
        /// alter_external_resource_pool
        /// 	 : ALTER  EXTERNAL  RESOURCE  POOL  (pool_id | DEFAULT_DOUBLE_QUOTE)  WITH  external_resource_with
        /// </summary>
        public override AstRoot VisitAlter_external_resource_pool(TSqlParser.Alter_external_resource_poolContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterExternalResourcePool(context, list);
        }
        
        /// <summary>
        /// external_resource_with
        /// 	 : LR_BRACKET  max_cpu  (COMMA?  AFFINITY  CPU  EQUAL  (AUTO | decimal_ranges) | NUMANODE  EQUAL  decimal_ranges)  (COMMA?  max_memory)?  (COMMA?  maw_process)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitExternal_resource_with(TSqlParser.External_resource_withContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExternalResourceWith(context, list);
        }
        
        /// <summary>
        /// alter_fulltext_catalog
        /// 	 : ALTER  FULLTEXT  CATALOG  catalog_id  (REBUILD  (WITH  ACCENT_SENSITIVITY  EQUAL  on_off)? | REORGANIZE | AS  DEFAULT)
        /// </summary>
        public override AstRoot VisitAlter_fulltext_catalog(TSqlParser.Alter_fulltext_catalogContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterFulltextCatalog(context, list);
        }
        
        /// <summary>
        /// create_fulltext_catalog
        /// 	 : CREATE  FULLTEXT  CATALOG  catalog_id  (ON  FILEGROUP  file_group_id)?  (IN  PATH  rootpath = stringtext)?  (WITH  ACCENT_SENSITIVITY  EQUAL  on_off)?  (AS  DEFAULT)?  (AUTHORIZATION  owner_id)?
        /// </summary>
        public override AstRoot VisitCreate_fulltext_catalog(TSqlParser.Create_fulltext_catalogContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateFulltextCatalog(context, list);
        }
        
        /// <summary>
        /// alter_fulltext_stoplist
        /// 	 : ALTER  FULLTEXT  STOPLIST  stoplist_id  (ADD  stopword = stringtext  LANGUAGE  (STRING | DECIMAL | BINARY) | DROP  (stopword = stringtext  LANGUAGE  (STRING | DECIMAL | BINARY) | ALL  (STRING | DECIMAL | BINARY) | ALL))
        /// </summary>
        public override AstRoot VisitAlter_fulltext_stoplist(TSqlParser.Alter_fulltext_stoplistContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterFulltextStoplist(context, list);
        }
        
        /// <summary>
        /// create_fulltext_stoplist
        /// 	 : CREATE  FULLTEXT  STOPLIST  stoplist_id  (FROM  (database_stoplist_ref | SYSTEM  STOPLIST))?  (AUTHORIZATION  owner_id)?
        /// </summary>
        public override AstRoot VisitCreate_fulltext_stoplist(TSqlParser.Create_fulltext_stoplistContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateFulltextStoplist(context, list);
        }
        
        /// <summary>
        /// alter_login_sql_server
        /// 	 : ALTER  LOGIN  login_id  alter_login_sql_server_infos
        /// </summary>
        public override AstRoot VisitAlter_login_sql_server(TSqlParser.Alter_login_sql_serverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterLoginSqlServer(context, list);
        }
        
        /// <summary>
        /// alter_login_sql_server_settings
        /// 	 : login_settings_pwd?  login_settings_old_pwd?  (DEFAULT_DATABASE  EQUAL  database_id)?  (DEFAULT_LANGUAGE  EQUAL  language)?  (NAME  EQUAL  login_id)?  (CHECK_POLICY  EQUAL  check_policy = on_off)?  (CHECK_EXPIRATION  EQUAL  check_expiration = on_off)?  (CREDENTIAL  EQUAL  credential_id)?  (NO  CREDENTIAL)?
        /// </summary>
        public override AstRoot VisitAlter_login_sql_server_settings(TSqlParser.Alter_login_sql_server_settingsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterLoginSqlServerSettings(context, list);
        }
        
        /// <summary>
        /// login_settings_old_pwd
        /// 	 : OLD_PASSWORD  EQUAL  old_password = stringtext  pwd_strategies
        /// </summary>
        public override AstRoot VisitLogin_settings_old_pwd(TSqlParser.Login_settings_old_pwdContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstLoginSettingsOldPwd(context, list);
        }
        
        /// <summary>
        /// login_settings_pwd
        /// 	 : PASSWORD  EQUAL  pwd_value  pwd_strategies
        /// </summary>
        public override AstRoot VisitLogin_settings_pwd(TSqlParser.Login_settings_pwdContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstLoginSettingsPwd(context, list);
        }
        
        /// <summary>
        /// create_login_sql_server
        /// 	 : CREATE  LOGIN  login_id  (WITH  create_login_sql_server_settings | FROM  create_login_sql_server_from)
        /// </summary>
        public override AstRoot VisitCreate_login_sql_server(TSqlParser.Create_login_sql_serverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateLoginSqlServer(context, list);
        }
        
        /// <summary>
        /// alter_login_azure_sql
        /// 	 : ALTER  LOGIN  login_id  alter_login_azure_sql_infos
        /// </summary>
        public override AstRoot VisitAlter_login_azure_sql(TSqlParser.Alter_login_azure_sqlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterLoginAzureSql(context, list);
        }
        
        /// <summary>
        /// create_login_azure_sql
        /// 	 : CREATE  LOGIN  login_id  WITH  PASSWORD  EQUAL  STRING  (SID  EQUAL  sid = BINARY)?
        /// </summary>
        public override AstRoot VisitCreate_login_azure_sql(TSqlParser.Create_login_azure_sqlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateLoginAzureSql(context, list);
        }
        
        /// <summary>
        /// alter_login_azure_sql_dw_and_pdw
        /// 	 : ALTER  LOGIN  login_id  (enable_disable? | WITH  (PASSWORD  EQUAL  password = stringtext  (OLD_PASSWORD  EQUAL  old_password = stringtext  pwd_strategy*)? | NAME  EQUAL  new_name = login_id))
        /// </summary>
        public override AstRoot VisitAlter_login_azure_sql_dw_and_pdw(TSqlParser.Alter_login_azure_sql_dw_and_pdwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterLoginAzureSqlDwAndPdw(context, list);
        }
        
        /// <summary>
        /// create_login_pdw
        /// 	 : CREATE  LOGIN  login_id  (WITH  (PASSWORD  EQUAL  password = stringtext  MUST_CHANGE?  (CHECK_POLICY  EQUAL  on_off?)?) | FROM  WINDOWS)
        /// </summary>
        public override AstRoot VisitCreate_login_pdw(TSqlParser.Create_login_pdwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateLoginPdw(context, list);
        }
        
        /// <summary>
        /// create_master_key_sql_server
        /// 	 : CREATE  MASTER  KEY  encryption_by_pwd
        /// </summary>
        public override AstRoot VisitCreate_master_key_sql_server(TSqlParser.Create_master_key_sql_serverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateMasterKeySqlServer(context, list);
        }
        
        /// <summary>
        /// create_master_key_azure_sql
        /// 	 : CREATE  MASTER  KEY  encryption_by_pwd?
        /// </summary>
        public override AstRoot VisitCreate_master_key_azure_sql(TSqlParser.Create_master_key_azure_sqlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateMasterKeyAzureSql(context, list);
        }
        
        /// <summary>
        /// alter_message_type
        /// 	 : ALTER  MESSAGE  TYPE  message_type_id  VALIDATION  EQUAL  (NONE | EMPTY | WELL_FORMED_XML | VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_id)
        /// </summary>
        public override AstRoot VisitAlter_message_type(TSqlParser.Alter_message_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterMessageType(context, list);
        }
        
        /// <summary>
        /// alter_partition_function
        /// 	 : ALTER  PARTITION  FUNCTION  partition_function_id  LR_BRACKET  RR_BRACKET  split_or_merge  RANGE  LR_BRACKET  DECIMAL  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_partition_function(TSqlParser.Alter_partition_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterPartitionFunction(context, list);
        }
        
        /// <summary>
        /// alter_partition_scheme
        /// 	 : ALTER  PARTITION  SCHEME  partition_scheme_id  NEXT  USED  (file_group_id)?
        /// </summary>
        public override AstRoot VisitAlter_partition_scheme(TSqlParser.Alter_partition_schemeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterPartitionScheme(context, list);
        }
        
        /// <summary>
        /// alter_remote_service_binding
        /// 	 : ALTER  REMOTE  SERVICE  BINDING  binding_id  WITH  (USER  EQUAL  user_id)?  (COMMA  ANONYMOUS  EQUAL  on_off)?
        /// </summary>
        public override AstRoot VisitAlter_remote_service_binding(TSqlParser.Alter_remote_service_bindingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterRemoteServiceBinding(context, list);
        }
        
        /// <summary>
        /// create_remote_service_binding
        /// 	 : CREATE  REMOTE  SERVICE  BINDING  binding_id  (AUTHORIZATION  owner_id)?  TO  SERVICE  remote_service_name = stringtext  WITH  (USER  EQUAL  user_id)?  (COMMA  ANONYMOUS  EQUAL  on_off)?
        /// </summary>
        public override AstRoot VisitCreate_remote_service_binding(TSqlParser.Create_remote_service_bindingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateRemoteServiceBinding(context, list);
        }
        
        /// <summary>
        /// create_resource_pool
        /// 	 : CREATE  RESOURCE  POOL  pool_id  (WITH  LR_BRACKET  (COMMA?  MIN_CPU_PERCENT  EQUAL  min_cpu_percent = DECIMAL)?  (COMMA?  MAX_CPU_PERCENT  EQUAL  max_cpu_percent = DECIMAL)?  (COMMA?  CAP_CPU_PERCENT  EQUAL  cap_cpu_percent = DECIMAL)?  (COMMA?  AFFINITY  SCHEDULER  EQUAL  (AUTO | LR_BRACKET  decimal_ranges  RR_BRACKET | NUMANODE  EQUAL  LR_BRACKET  decimal_ranges  RR_BRACKET))?  (COMMA?  MIN_MEMORY_PERCENT  EQUAL  min_memory_percent = DECIMAL)?  (COMMA?  MAX_MEMORY_PERCENT  EQUAL  max_memory_percent = DECIMAL)?  (COMMA?  MIN_IOPS_PER_VOLUME  EQUAL  min_tops_percent = DECIMAL)?  (COMMA?  MAX_IOPS_PER_VOLUME  EQUAL  max_tops_percent = DECIMAL)?  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitCreate_resource_pool(TSqlParser.Create_resource_poolContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateResourcePool(context, list);
        }
        
        /// <summary>
        /// decimal_range
        /// 	 : dec_start = DECIMAL
        /// 	 | dec_start = DECIMAL  TO  dec_end = DECIMAL
        /// </summary>
        public override AstRoot VisitDecimal_range(TSqlParser.Decimal_rangeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDecimalRange(context, list);
        }
        
        /// <summary>
        /// create_db_role
        /// 	 : CREATE  ROLE  role_id  (AUTHORIZATION  owner_id)?
        /// </summary>
        public override AstRoot VisitCreate_db_role(TSqlParser.Create_db_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateDbRole(context, list);
        }
        
        /// <summary>
        /// create_route
        /// 	 : CREATE  ROUTE  route_id  (AUTHORIZATION  owner_id)?  WITH  (COMMA?  SERVICE_NAME  EQUAL  route_service_name = stringtext)?  (COMMA?  BROKER_INSTANCE  EQUAL  broker_instance_identifier = stringtext)?  (COMMA?  LIFETIME  EQUAL  lifetime = DECIMAL)?  COMMA?  ADDRESS  EQUAL  address = stringtext  (COMMA  MIRROR_ADDRESS  EQUAL  mirror_address = stringtext)?
        /// </summary>
        public override AstRoot VisitCreate_route(TSqlParser.Create_routeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateRoute(context, list);
        }
        
        /// <summary>
        /// create_rule
        /// 	 : CREATE  RULE  schema_rule_ref  AS  search_condition
        /// </summary>
        public override AstRoot VisitCreate_rule(TSqlParser.Create_ruleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateRule(context, list);
        }
        
        /// <summary>
        /// alter_schema_sql
        /// 	 : ALTER  SCHEMA  schema_id  TRANSFER  ((OBJECT | TYPE | XML  SCHEMA  COLLECTION)  DOUBLE_COLON)?  id_dot_id
        /// </summary>
        public override AstRoot VisitAlter_schema_sql(TSqlParser.Alter_schema_sqlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterSchemaSql(context, list);
        }
        
        /// <summary>
        /// create_schema
        /// 	 : CREATE  SCHEMA  create_schema_name  create_schema_target*
        /// </summary>
        public override AstRoot VisitCreate_schema(TSqlParser.Create_schemaContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateSchema(context, list);
        }
        
        /// <summary>
        /// schema_authorization
        /// 	 : AUTHORIZATION  owner_id
        /// </summary>
        public override AstRoot VisitSchema_authorization(TSqlParser.Schema_authorizationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSchemaAuthorization(context, list);
        }
        
        /// <summary>
        /// create_schema_azure_sql_dw_and_pdw
        /// 	 : CREATE  SCHEMA  schema_id  (AUTHORIZATION  owner_id)?
        /// </summary>
        public override AstRoot VisitCreate_schema_azure_sql_dw_and_pdw(TSqlParser.Create_schema_azure_sql_dw_and_pdwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateSchemaAzureSqlDwAndPdw(context, list);
        }
        
        /// <summary>
        /// alter_schema_azure_sql_dw_and_pdw
        /// 	 : ALTER  SCHEMA  schema_id  TRANSFER  (OBJECT  DOUBLE_COLON)?  id_  (DOT  ID)?
        /// </summary>
        public override AstRoot VisitAlter_schema_azure_sql_dw_and_pdw(TSqlParser.Alter_schema_azure_sql_dw_and_pdwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterSchemaAzureSqlDwAndPdw(context, list);
        }
        
        /// <summary>
        /// create_search_property_list
        /// 	 : CREATE  SEARCH  PROPERTY  LIST  source_list_id  (FROM  database_source_list_ref)?  (AUTHORIZATION  owner_id)?
        /// </summary>
        public override AstRoot VisitCreate_search_property_list(TSqlParser.Create_search_property_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateSearchPropertyList(context, list);
        }
        
        /// <summary>
        /// create_security_policy
        /// 	 : CREATE  SECURITY  POLICY  schema_security_policy_ref  create_security_policy_adds  (WITH  LR_BRACKET  STATE  EQUAL  on_off  schema_binding?  RR_BRACKET)?  (NOT  FOR  REPLICATION)?
        /// </summary>
        public override AstRoot VisitCreate_security_policy(TSqlParser.Create_security_policyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateSecurityPolicy(context, list);
        }
        
        /// <summary>
        /// schema_binding
        /// 	 : SCHEMABINDING  on_off
        /// </summary>
        public override AstRoot VisitSchema_binding(TSqlParser.Schema_bindingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSchemaBinding(context, list);
        }
        
        /// <summary>
        /// create_security_policy_add
        /// 	 : ADD  filter_block?  PREDICATE  schema_security_predicate_function_id  LR_BRACKET  column_or_argument_ids  RR_BRACKET  ON  database_schema_table_ref  schema_table_ref_impacts*
        /// </summary>
        public override AstRoot VisitCreate_security_policy_add(TSqlParser.Create_security_policy_addContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateSecurityPolicyAdd(context, list);
        }
        
        /// <summary>
        /// alter_sequence
        /// 	 : ALTER  SEQUENCE  schema_sequence_ref  alter_sequence_restart?  alter_sequence_increment?  alter_sequence_min_value?  alter_sequence_max_value  cycle?  sequence_cache?
        /// </summary>
        public override AstRoot VisitAlter_sequence(TSqlParser.Alter_sequenceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterSequence(context, list);
        }
        
        /// <summary>
        /// create_sequence
        /// 	 : CREATE  SEQUENCE  schema_sequence_ref  (AS  data_type)?  create_sequence_start?  create_sequence_increment?  create_sequence_min_value?  create_sequence_max_value?  cycle?  sequence_cache?
        /// </summary>
        public override AstRoot VisitCreate_sequence(TSqlParser.Create_sequenceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateSequence(context, list);
        }
        
        /// <summary>
        /// create_sequence_increment
        /// 	 : INCREMENT  BY  real
        /// </summary>
        public override AstRoot VisitCreate_sequence_increment(TSqlParser.Create_sequence_incrementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateSequenceIncrement(context, list);
        }
        
        /// <summary>
        /// alter_server_audit
        /// 	 : ALTER  SERVER  AUDIT  audit_id  alter_server_audit_infos
        /// </summary>
        public override AstRoot VisitAlter_server_audit(TSqlParser.Alter_server_auditContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServerAudit(context, list);
        }
        
        /// <summary>
        /// with_server_audit_file
        /// 	 : WITH  LR_BRACKET  server_audit_file_infos?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitWith_server_audit_file(TSqlParser.With_server_audit_fileContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWithServerAuditFile(context, list);
        }
        
        /// <summary>
        /// create_server_audit
        /// 	 : CREATE  SERVER  AUDIT  audit_id  create_server_audit_to_infos
        /// </summary>
        public override AstRoot VisitCreate_server_audit(TSqlParser.Create_server_auditContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateServerAudit(context, list);
        }
        
        /// <summary>
        /// where_server_audit_condition
        /// 	 : WHERE  alter_server_audit_condition?
        /// </summary>
        public override AstRoot VisitWhere_server_audit_condition(TSqlParser.Where_server_audit_conditionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWhereServerAuditCondition(context, list);
        }
        
        /// <summary>
        /// alter_server_audit_specification
        /// 	 : ALTER  SERVER  AUDIT  SPECIFICATION  audit_id  alter_server_audit_specification_server?  add_drop_audit_action_groups?  server_audit_state?
        /// </summary>
        public override AstRoot VisitAlter_server_audit_specification(TSqlParser.Alter_server_audit_specificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServerAuditSpecification(context, list);
        }
        
        /// <summary>
        /// server_audit_state
        /// 	 : WITH  LR_BRACKET  STATE  EQUAL  on_off  RR_BRACKET
        /// </summary>
        public override AstRoot VisitServer_audit_state(TSqlParser.Server_audit_stateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstServerAuditState(context, list);
        }
        
        /// <summary>
        /// add_drop_audit_action_group
        /// 	 : add_drop  LR_BRACKET  audit_action_group_id  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAdd_drop_audit_action_group(TSqlParser.Add_drop_audit_action_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAddDropAuditActionGroup(context, list);
        }
        
        /// <summary>
        /// alter_server_audit_specification_server
        /// 	 : FOR  SERVER  AUDIT  audit_id
        /// </summary>
        public override AstRoot VisitAlter_server_audit_specification_server(TSqlParser.Alter_server_audit_specification_serverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServerAuditSpecificationServer(context, list);
        }
        
        /// <summary>
        /// create_server_audit_specification
        /// 	 : CREATE  SERVER  AUDIT  SPECIFICATION  audit_id  alter_server_audit_specification_server?  server_audit_specification_add_groups?  server_audit_state?
        /// </summary>
        public override AstRoot VisitCreate_server_audit_specification(TSqlParser.Create_server_audit_specificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateServerAuditSpecification(context, list);
        }
        
        /// <summary>
        /// server_audit_specification_add_group
        /// 	 : ADD  LR_BRACKET  audit_action_group_id  RR_BRACKET
        /// </summary>
        public override AstRoot VisitServer_audit_specification_add_group(TSqlParser.Server_audit_specification_add_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstServerAuditSpecificationAddGroup(context, list);
        }
        
        /// <summary>
        /// alter_server_role
        /// 	 : ALTER  SERVER  ROLE  server_role_id  (add_drop  MEMBER  server_id | alter_server_role_new_name)
        /// </summary>
        public override AstRoot VisitAlter_server_role(TSqlParser.Alter_server_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServerRole(context, list);
        }
        
        /// <summary>
        /// alter_server_role_new_name
        /// 	 : WITH  NAME  EQUAL  server_role_id
        /// </summary>
        public override AstRoot VisitAlter_server_role_new_name(TSqlParser.Alter_server_role_new_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServerRoleNewName(context, list);
        }
        
        /// <summary>
        /// create_server_role
        /// 	 : CREATE  SERVER  ROLE  server_role_id  (AUTHORIZATION  server_id)?
        /// </summary>
        public override AstRoot VisitCreate_server_role(TSqlParser.Create_server_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateServerRole(context, list);
        }
        
        /// <summary>
        /// alter_server_role_pdw
        /// 	 : ALTER  SERVER  ROLE  server_role_id  add_drop  MEMBER  login_id
        /// </summary>
        public override AstRoot VisitAlter_server_role_pdw(TSqlParser.Alter_server_role_pdwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServerRolePdw(context, list);
        }
        
        /// <summary>
        /// alter_service
        /// 	 : ALTER  SERVICE  service_id  (ON  QUEUE  schema_queue_ref)?  alter_service_contracts?
        /// </summary>
        public override AstRoot VisitAlter_service(TSqlParser.Alter_serviceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterService(context, list);
        }
        
        /// <summary>
        /// alter_service_contract
        /// 	 : add_drop  modified_contract_id
        /// </summary>
        public override AstRoot VisitAlter_service_contract(TSqlParser.Alter_service_contractContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServiceContract(context, list);
        }
        
        /// <summary>
        /// create_service
        /// 	 : CREATE  SERVICE  service_id  (AUTHORIZATION  owner_id)?  ON  QUEUE  schema_queue_ref  (LR_BRACKET  contracts  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitCreate_service(TSqlParser.Create_serviceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateService(context, list);
        }
        
        /// <summary>
        /// alter_symmetric_key
        /// 	 : ALTER  SYMMETRIC  KEY  symmetric_key_id  (add_drop  ENCRYPTION  BY  (CERTIFICATE  certificate_id | PASSWORD  EQUAL  password = stringtext | SYMMETRIC  KEY  newkey = symmetric_key_id | ASYMMETRIC  KEY  asym_key_id))
        /// </summary>
        public override AstRoot VisitAlter_symmetric_key(TSqlParser.Alter_symmetric_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterSymmetricKey(context, list);
        }
        
        /// <summary>
        /// create_synonym
        /// 	 : CREATE  SYNONYM  schema_synonym_ref  FOR  server_database_schema_object_ref
        /// </summary>
        public override AstRoot VisitCreate_synonym(TSqlParser.Create_synonymContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateSynonym(context, list);
        }
        
        /// <summary>
        /// alter_user
        /// 	 : ALTER  USER  user_id  WITH  alter_user_item+
        /// </summary>
        public override AstRoot VisitAlter_user(TSqlParser.Alter_userContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterUser(context, list);
        }
        
        /// <summary>
        /// alter_user_azure_sql
        /// 	 : ALTER  USER  user_id  WITH  alter_user_azure_sql_infos
        /// </summary>
        public override AstRoot VisitAlter_user_azure_sql(TSqlParser.Alter_user_azure_sqlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterUserAzureSql(context, list);
        }
        
        /// <summary>
        /// alter_workload_group
        /// 	 : ALTER  WORKLOAD  GROUP  (workload_group_group_id | DEFAULT_DOUBLE_QUOTE)  (WITH  LR_BRACKET  (IMPORTANCE  EQUAL  importance_level | COMMA?  REQUEST_MAX_MEMORY_GRANT_PERCENT  EQUAL  request_max_memory_grant = DECIMAL | COMMA?  REQUEST_MAX_CPU_TIME_SEC  EQUAL  request_max_cpu_time_sec = DECIMAL | REQUEST_MEMORY_GRANT_TIMEOUT_SEC  EQUAL  request_memory_grant_timeout_sec = DECIMAL | MAX_DOP  EQUAL  max_dop = DECIMAL | GROUP_MAX_REQUESTS  EQUAL  group_max_requests = DECIMAL)+  RR_BRACKET)?  alter_workload_group_using?
        /// </summary>
        public override AstRoot VisitAlter_workload_group(TSqlParser.Alter_workload_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterWorkloadGroup(context, list);
        }
        
        /// <summary>
        /// create_workload_group
        /// 	 : CREATE  WORKLOAD  GROUP  workload_group_group_id  (WITH  LR_BRACKET  (IMPORTANCE  EQUAL  (LOW | MEDIUM | HIGH) | COMMA?  REQUEST_MAX_MEMORY_GRANT_PERCENT  EQUAL  request_max_memory_grant = DECIMAL | COMMA?  REQUEST_MAX_CPU_TIME_SEC  EQUAL  request_max_cpu_time_sec = DECIMAL | REQUEST_MEMORY_GRANT_TIMEOUT_SEC  EQUAL  request_memory_grant_timeout_sec = DECIMAL | MAX_DOP  EQUAL  max_dop = DECIMAL | GROUP_MAX_REQUESTS  EQUAL  group_max_requests = DECIMAL)+  RR_BRACKET)?  (USING  (workload_group_pool_id | DEFAULT_DOUBLE_QUOTE)?  (COMMA?  EXTERNAL  external_pool_id | DEFAULT_DOUBLE_QUOTE)?)?
        /// </summary>
        public override AstRoot VisitCreate_workload_group(TSqlParser.Create_workload_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateWorkloadGroup(context, list);
        }
        
        /// <summary>
        /// create_xml_schema_collection
        /// 	 : CREATE  XML  SCHEMA  COLLECTION  schema_sql_identifier_id  AS  string_id2
        /// </summary>
        public override AstRoot VisitCreate_xml_schema_collection(TSqlParser.Create_xml_schema_collectionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateXmlSchemaCollection(context, list);
        }
        
        /// <summary>
        /// create_partition_function
        /// 	 : CREATE  PARTITION  FUNCTION  partition_function_id  LR_BRACKET  input_parameter_type = data_type  RR_BRACKET  AS  RANGE  (LEFT | RIGHT)?  FOR  VALUES  LR_BRACKET  boundary_values = expression_list  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCreate_partition_function(TSqlParser.Create_partition_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreatePartitionFunction(context, list);
        }
        
        /// <summary>
        /// create_partition_scheme
        /// 	 : CREATE  PARTITION  SCHEME  partition_scheme_id  AS  PARTITION  partition_function_id  ALL?  TO  LR_BRACKET  file_group_ids  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCreate_partition_scheme(TSqlParser.Create_partition_schemeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreatePartitionScheme(context, list);
        }
        
        /// <summary>
        /// create_queue
        /// 	 : CREATE  QUEUE  (complete_table_ref | queue_id)  queue_settings?  (ON  file_group_id | DEFAULT)?
        /// </summary>
        public override AstRoot VisitCreate_queue(TSqlParser.Create_queueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateQueue(context, list);
        }
        
        /// <summary>
        /// create_contract
        /// 	 : CREATE  CONTRACT  contract_name_expression  (AUTHORIZATION  owner_id)?  LR_BRACKET  ((message_type_id | DEFAULT)  SENT  BY  (INITIATOR | TARGET | ANY)  COMMA?)+  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCreate_contract(TSqlParser.Create_contractContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateContract(context, list);
        }
        
        /// <summary>
        /// message_statement
        /// 	 : CREATE  MESSAGE  TYPE  message_type_id  (AUTHORIZATION  owner_id)?  (VALIDATION  EQUAL  (NONE | EMPTY | WELL_FORMED_XML | VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_id))
        /// </summary>
        public override AstRoot VisitMessage_statement(TSqlParser.Message_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMessageStatement(context, list);
        }
        
        /// <summary>
        /// merge_statement
        /// 	 : with_expression?  MERGE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  INTO?  ddl_object  with_table_hints?  as_table_alias?  USING  table_sources  ON  search_condition  when_matches+  output_clause?  option_clause?  SEMI
        /// </summary>
        public override AstRoot VisitMerge_statement(TSqlParser.Merge_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMergeStatement(context, list);
        }
        
        /// <summary>
        /// delete_statement
        /// 	 : with_expression?  DELETE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT? | TOP  DECIMAL)?  FROM?  delete_statement_from  with_table_hints?  output_clause?  (FROM  table_sources)?  (WHERE  (search_condition | CURRENT  OF  (GLOBAL?  cursor_name | cursor_var = LOCAL_ID)))?  for_clause?  option_clause?  SEMI?
        /// </summary>
        public override AstRoot VisitDelete_statement(TSqlParser.Delete_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeleteStatement(context, list);
        }
        
        /// <summary>
        /// insert_statement
        /// 	 : with_expression?  INSERT  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  INTO?  (ddl_object | rowset_function_limited)  with_table_hints?  (LR_BRACKET  insert_column_name_list  RR_BRACKET)?  output_clause?  insert_statement_value  for_clause?  option_clause?  SEMI?
        /// </summary>
        public override AstRoot VisitInsert_statement(TSqlParser.Insert_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstInsertStatement(context, list);
        }
        
        /// <summary>
        /// receive_statement
        /// 	 : LR_BRACKET?  RECEIVE  receive_mode  receive_ids?  FROM  complete_table_ref  receive_into?  RR_BRACKET?
        /// </summary>
        public override AstRoot VisitReceive_statement(TSqlParser.Receive_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstReceiveStatement(context, list);
        }
        
        /// <summary>
        /// receive_into
        /// 	 : INTO  table_id  where_condition
        /// </summary>
        public override AstRoot VisitReceive_into(TSqlParser.Receive_intoContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstReceiveInto(context, list);
        }
        
        /// <summary>
        /// where_condition
        /// 	 : WHERE  search_condition
        /// </summary>
        public override AstRoot VisitWhere_condition(TSqlParser.Where_conditionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWhereCondition(context, list);
        }
        
        /// <summary>
        /// receive_id
        /// 	 : LOCAL_ID  EQUAL  expression
        /// </summary>
        public override AstRoot VisitReceive_id(TSqlParser.Receive_idContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstReceiveId(context, list);
        }
        
        /// <summary>
        /// select_statement_standalone
        /// 	 : with_expression?  select_statement
        /// </summary>
        public override AstRoot VisitSelect_statement_standalone(TSqlParser.Select_statement_standaloneContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSelectStatementStandalone(context, list);
        }
        
        /// <summary>
        /// select_statement
        /// 	 : query_expression  select_order_by_clause?  for_clause?  option_clause?  SEMI?
        /// </summary>
        public override AstRoot VisitSelect_statement(TSqlParser.Select_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSelectStatement(context, list);
        }
        
        /// <summary>
        /// update_statement
        /// 	 : with_expression?  UPDATE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  (ddl_object | rowset_function_limited)  with_table_hints?  SET  update_elems  output_clause?  (FROM  table_sources)?  (WHERE  (search_condition | CURRENT  OF  (GLOBAL?  cursor_name | cursor_var = LOCAL_ID)))?  for_clause?  option_clause?  SEMI?
        /// </summary>
        public override AstRoot VisitUpdate_statement(TSqlParser.Update_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdateStatement(context, list);
        }
        
        /// <summary>
        /// output_clause
        /// 	 : OUTPUT  output_dml_list_elems  (INTO  (LOCAL_ID | full_table_ref)  (LR_BRACKET  column_name_list  RR_BRACKET)?)?
        /// </summary>
        public override AstRoot VisitOutput_clause(TSqlParser.Output_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOutputClause(context, list);
        }
        
        /// <summary>
        /// create_database
        /// 	 : CREATE  DATABASE  database_id  database_containment?  database_on_primary?  database_on_log?  database_collate?  database_create_with?
        /// </summary>
        public override AstRoot VisitCreate_database(TSqlParser.Create_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateDatabase(context, list);
        }
        
        /// <summary>
        /// database_containment
        /// 	 : CONTAINMENT  EQUAL  none_partial
        /// </summary>
        public override AstRoot VisitDatabase_containment(TSqlParser.Database_containmentContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDatabaseContainment(context, list);
        }
        
        /// <summary>
        /// database_on_primary
        /// 	 : ON  PRIMARY?  database_file_spec_list
        /// </summary>
        public override AstRoot VisitDatabase_on_primary(TSqlParser.Database_on_primaryContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDatabaseOnPrimary(context, list);
        }
        
        /// <summary>
        /// database_on_log
        /// 	 : ON  PRIMARY?  database_file_spec_list
        /// </summary>
        public override AstRoot VisitDatabase_on_log(TSqlParser.Database_on_logContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDatabaseOnLog(context, list);
        }
        
        /// <summary>
        /// database_collate
        /// 	 : COLLATE  collation_id
        /// </summary>
        public override AstRoot VisitDatabase_collate(TSqlParser.Database_collateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDatabaseCollate(context, list);
        }
        
        /// <summary>
        /// database_create_with
        /// 	 : WITH  create_database_option_list
        /// </summary>
        public override AstRoot VisitDatabase_create_with(TSqlParser.Database_create_withContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDatabaseCreateWith(context, list);
        }
        
        /// <summary>
        /// create_index
        /// 	 : CREATE  UNIQUE?  clustered?  INDEX  index_id  ON  full_table_ref  LR_BRACKET  column_name_list_with_order  RR_BRACKET  (INCLUDE  LR_BRACKET  column_name_list  RR_BRACKET)?  where_condition?  (create_index_options)?  (ON  file_group_id)?  SEMI?
        /// </summary>
        public override AstRoot VisitCreate_index(TSqlParser.Create_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateIndex(context, list);
        }
        
        /// <summary>
        /// alter_index
        /// 	 : ALTER  INDEX  (id_ | ALL)  ON  full_table_ref  (DISABLE | PAUSE | ABORT | RESUME  resumable_index_options? | reorganize_partition | set_index_options | rebuild_partition)
        /// </summary>
        public override AstRoot VisitAlter_index(TSqlParser.Alter_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterIndex(context, list);
        }
        
        /// <summary>
        /// reorganize_partition
        /// 	 : REORGANIZE  (PARTITION  EQUAL  DECIMAL)?  reorganize_options?
        /// </summary>
        public override AstRoot VisitReorganize_partition(TSqlParser.Reorganize_partitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstReorganizePartition(context, list);
        }
        
        /// <summary>
        /// create_columnstore_index
        /// 	 : CREATE  CLUSTERED  COLUMNSTORE  INDEX  id_  ON  full_table_ref  create_columnstore_index_options?  (ON  table_id)?  SEMI?
        /// </summary>
        public override AstRoot VisitCreate_columnstore_index(TSqlParser.Create_columnstore_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateColumnstoreIndex(context, list);
        }
        
        /// <summary>
        /// create_nonclustered_columnstore_index
        /// 	 : CREATE  NONCLUSTERED?  COLUMNSTORE  INDEX  id_  ON  full_table_ref  LR_BRACKET  column_name_list_with_order  RR_BRACKET  where_condition?  create_columnstore_index_options?  (ON  group_id)?  SEMI?
        /// </summary>
        public override AstRoot VisitCreate_nonclustered_columnstore_index(TSqlParser.Create_nonclustered_columnstore_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateNonclusteredColumnstoreIndex(context, list);
        }
        
        /// <summary>
        /// create_xml_index
        /// 	 : CREATE  PRIMARY?  XML  INDEX  index_id  ON  full_table_ref  LR_BRACKET  column_id  RR_BRACKET  (USING  XML  INDEX  parent_index = index_id  (FOR  (VALUE | PATH | PROPERTY)?)?)?  xml_index_options?  SEMI?
        /// </summary>
        public override AstRoot VisitCreate_xml_index(TSqlParser.Create_xml_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateXmlIndex(context, list);
        }
        
        /// <summary>
        /// create_or_alter_procedure
        /// 	 : ((CREATE  (OR  (ALTER | REPLACE))?) | ALTER)  proc = (PROC | PROCEDURE)  procName = schema_func_proc_ref  (SEMI  DECIMAL)?  (LR_BRACKET?  procedure_params  RR_BRACKET?)?  procedure_options?  (FOR  REPLICATION)?  AS  (as_external_name | sql_clause)
        /// </summary>
        public override AstRoot VisitCreate_or_alter_procedure(TSqlParser.Create_or_alter_procedureContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterProcedure(context, list);
        }
        
        /// <summary>
        /// as_external_name
        /// 	 : EXTERNAL  NAME  assembly_id  DOT  class_id  DOT  method_id
        /// </summary>
        public override AstRoot VisitAs_external_name(TSqlParser.As_external_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAsExternalName(context, list);
        }
        
        /// <summary>
        /// create_or_alter_dml_trigger
        /// 	 : ((CREATE  (OR  ALTER)?) | ALTER)  TRIGGER  schema_trigger_ref  ON  full_table_ref  dml_trigger_options?  for_after_instead  dml_trigger_operations  (WITH  APPEND)?  (NOT  FOR  REPLICATION)?  AS  sql_clauses
        /// </summary>
        public override AstRoot VisitCreate_or_alter_dml_trigger(TSqlParser.Create_or_alter_dml_triggerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterDmlTrigger(context, list);
        }
        
        /// <summary>
        /// create_or_alter_ddl_trigger
        /// 	 : ((CREATE  (OR  ALTER)?) | ALTER)  TRIGGER  schema_trigger_ref  ON  all_server_database  dml_trigger_options?  for_after  dml_trigger_operations  AS  sql_clauses
        /// </summary>
        public override AstRoot VisitCreate_or_alter_ddl_trigger(TSqlParser.Create_or_alter_ddl_triggerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterDdlTrigger(context, list);
        }
        
        /// <summary>
        /// func_body_returns_select
        /// 	 : RETURNS  TABLE  function_options?  AS?  (as_external_name | RETURN  (LR_BRACKET  select_statement_standalone  RR_BRACKET | select_statement_standalone))
        /// </summary>
        public override AstRoot VisitFunc_body_returns_select(TSqlParser.Func_body_returns_selectContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFuncBodyReturnsSelect(context, list);
        }
        
        /// <summary>
        /// func_body_returns_table
        /// 	 : RETURNS  LOCAL_ID  table_type_definition  function_options?  AS?  (as_external_name | BEGIN  sql_clauses?  RETURN  SEMI?  END  SEMI?)
        /// </summary>
        public override AstRoot VisitFunc_body_returns_table(TSqlParser.Func_body_returns_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFuncBodyReturnsTable(context, list);
        }
        
        /// <summary>
        /// func_body_returns_scalar
        /// 	 : RETURNS  data_type  function_options?  AS?  (as_external_name | BEGIN  sql_clause?  RETURN  ret = expression  SEMI?  END)
        /// </summary>
        public override AstRoot VisitFunc_body_returns_scalar(TSqlParser.Func_body_returns_scalarContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFuncBodyReturnsScalar(context, list);
        }
        
        /// <summary>
        /// procedure_param
        /// 	 : LOCAL_ID  AS?  schema_type_ref  VARYING?  (EQUAL  default_val = default_value)?  (OUT | OUTPUT | READONLY)?
        /// </summary>
        public override AstRoot VisitProcedure_param(TSqlParser.Procedure_paramContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstProcedureParam(context, list);
        }
        
        /// <summary>
        /// create_statistics
        /// 	 : CREATE  STATISTICS  id_  ON  full_table_ref  LR_BRACKET  column_name_list  RR_BRACKET  (WITH  (FULLSCAN | SAMPLE  DECIMAL  (PERCENT | ROWS) | STATS_STREAM)  (COMMA  NORECOMPUTE)?  (COMMA  INCREMENTAL  EQUAL  on_off)?)?  SEMI?
        /// </summary>
        public override AstRoot VisitCreate_statistics(TSqlParser.Create_statisticsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateStatistics(context, list);
        }
        
        /// <summary>
        /// update_statistics
        /// 	 : UPDATE  STATISTICS  complete_table_ref  (id_ | LR_BRACKET  ids  RR_BRACKET)?  update_statistics_options?
        /// </summary>
        public override AstRoot VisitUpdate_statistics(TSqlParser.Update_statisticsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdateStatistics(context, list);
        }
        
        /// <summary>
        /// create_table
        /// 	 : CREATE  TABLE  full_table_ref  LR_BRACKET  column_def_table_constraints  table_indices_list?  RR_BRACKET  (LOCK  simple_id)?  table_options*  (ON  on = group_id | DEFAULT)?  (TEXTIMAGE_ON  text_image = group_id | DEFAULT)?  SEMI?
        /// </summary>
        public override AstRoot VisitCreate_table(TSqlParser.Create_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateTable(context, list);
        }
        
        /// <summary>
        /// create_view
        /// 	 : CREATE  VIEW  schema_view_ref  (LR_BRACKET  column_name_list  RR_BRACKET)?  view_attributes?  AS  select_statement_standalone  (WITH  CHECK  OPTION)?  SEMI?
        /// </summary>
        public override AstRoot VisitCreate_view(TSqlParser.Create_viewContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateView(context, list);
        }
        
        /// <summary>
        /// alter_table
        /// 	 : ALTER  TABLE  full_table_ref  (SET  LR_BRACKET  LOCK_ESCALATION  EQUAL  (AUTO | TABLE | DISABLE)  RR_BRACKET | ADD  column_def_table_constraints | ALTER  COLUMN  (column_definition | column_modifier) | DROP  COLUMN  ids | DROP  CONSTRAINT  constraint_id | WITH  (CHECK | NOCHECK)  ADD  alter_table_constraint | (NOCHECK | CHECK)  CONSTRAINT  constraint_id | enable_disable  TRIGGER  id_? | REBUILD  table_options | SWITCH  switch_partition)  SEMI?
        /// </summary>
        public override AstRoot VisitAlter_table(TSqlParser.Alter_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterTable(context, list);
        }
        
        /// <summary>
        /// alter_table_constraint_foreign
        /// 	 : FOREIGN  KEY  LR_BRACKET  fk = column_name_list  RR_BRACKET  REFERENCES  full_table_ref  (LR_BRACKET  pk = column_name_list  RR_BRACKET)?  on1 = constraint_delete_or_update  on2 = constraint_delete_or_update
        /// </summary>
        public override AstRoot VisitAlter_table_constraint_foreign(TSqlParser.Alter_table_constraint_foreignContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterTableConstraintForeign(context, list);
        }
        
        /// <summary>
        /// alter_database
        /// 	 : ALTER  DATABASE  (database_id | CURRENT)  alter_database_new_infos  SEMI?
        /// </summary>
        public override AstRoot VisitAlter_database(TSqlParser.Alter_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterDatabase(context, list);
        }
        
        /// <summary>
        /// change_tracking_option_item
        /// 	 : change_tracking_option_list  change_tracking_option_lists
        /// </summary>
        public override AstRoot VisitChange_tracking_option_item(TSqlParser.Change_tracking_option_itemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstChangeTrackingOptionItem(context, list);
        }
        
        /// <summary>
        /// containment_option
        /// 	 : CONTAINMENT  EQUAL  none_partial
        /// </summary>
        public override AstRoot VisitContainment_option(TSqlParser.Containment_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstContainmentOption(context, list);
        }
        
        /// <summary>
        /// alter_endpoint
        /// 	 : ALTER  ENDPOINT  endpoint_id  (AUTHORIZATION  login_id)?  (STATE  EQUAL  state_enum)?  AS  TCP  LR_BRACKET  LISTENER_PORT  EQUAL  DECIMAL  (COMMA  listener_ip)?  RR_BRACKET  (TSQL | alter_endpoint_service_broker | alter_endpoint_database_mirroring)
        /// </summary>
        public override AstRoot VisitAlter_endpoint(TSqlParser.Alter_endpointContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterEndpoint(context, list);
        }
        
        /// <summary>
        /// alter_endpoint_database_mirroring
        /// 	 : FOR  DATABASE_MIRRORING  LR_BRACKET  authentication_configuration  (COMMA?  encryption_state  encryption_algorithm?)?  COMMA?  ROLE  EQUAL  (WITNESS | PARTNER | ALL)  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_endpoint_database_mirroring(TSqlParser.Alter_endpoint_database_mirroringContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterEndpointDatabaseMirroring(context, list);
        }
        
        /// <summary>
        /// alter_endpoint_service_broker
        /// 	 : FOR  SERVICE_BROKER  LR_BRACKET  authentication_configuration  (COMMA?  encryption_state  encryption_algorithm?)?  (COMMA?  MESSAGE_FORWARDING  EQUAL  enable_disable)?  (COMMA?  MESSAGE_FORWARD_SIZE  EQUAL  DECIMAL)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_endpoint_service_broker(TSqlParser.Alter_endpoint_service_brokerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterEndpointServiceBroker(context, list);
        }
        
        /// <summary>
        /// partner_server
        /// 	 : partner_server_tcp_prefix  host  mirroring_host_port_seperator  port_number
        /// </summary>
        public override AstRoot VisitPartner_server(TSqlParser.Partner_serverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPartnerServer(context, list);
        }
        
        /// <summary>
        /// date_correlation_optimization_option
        /// 	 : DATE_CORRELATION_OPTIMIZATION  on_off
        /// </summary>
        public override AstRoot VisitDate_correlation_optimization_option(TSqlParser.Date_correlation_optimization_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDateCorrelationOptimizationOption(context, list);
        }
        
        /// <summary>
        /// db_encryption_option
        /// 	 : ENCRYPTION  on_off
        /// </summary>
        public override AstRoot VisitDb_encryption_option(TSqlParser.Db_encryption_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDbEncryptionOption(context, list);
        }
        
        /// <summary>
        /// mixed_page_allocation_option
        /// 	 : MIXED_PAGE_ALLOCATION  on_off
        /// </summary>
        public override AstRoot VisitMixed_page_allocation_option(TSqlParser.Mixed_page_allocation_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMixedPageAllocationOption(context, list);
        }
        
        /// <summary>
        /// drop_index
        /// 	 : DROP  INDEX  if_exists?  (drop_relational_or_xml_or_spatial_indexs | drop_backward_compatible_indexs)  SEMI?
        /// </summary>
        public override AstRoot VisitDrop_index(TSqlParser.Drop_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropIndex(context, list);
        }
        
        /// <summary>
        /// drop_relational_or_xml_or_spatial_index
        /// 	 : index_id  ON  complete_table_ref
        /// </summary>
        public override AstRoot VisitDrop_relational_or_xml_or_spatial_index(TSqlParser.Drop_relational_or_xml_or_spatial_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropRelationalOrXmlOrSpatialIndex(context, list);
        }
        
        /// <summary>
        /// drop_procedure
        /// 	 : DROP  proc = (PROC | PROCEDURE)  if_exists?  func_proc_name_schemas  SEMI?
        /// </summary>
        public override AstRoot VisitDrop_procedure(TSqlParser.Drop_procedureContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropProcedure(context, list);
        }
        
        /// <summary>
        /// drop_dml_trigger
        /// 	 : DROP  TRIGGER  if_exists?  schema_trigger_refs  SEMI?
        /// </summary>
        public override AstRoot VisitDrop_dml_trigger(TSqlParser.Drop_dml_triggerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDmlTrigger(context, list);
        }
        
        /// <summary>
        /// drop_ddl_trigger
        /// 	 : DROP  TRIGGER  if_exists?  schema_view_refs  ON  (DATABASE | ALL  SERVER)  SEMI?
        /// </summary>
        public override AstRoot VisitDrop_ddl_trigger(TSqlParser.Drop_ddl_triggerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDdlTrigger(context, list);
        }
        
        /// <summary>
        /// drop_function
        /// 	 : DROP  FUNCTION  if_exists?  func_proc_name_schemas  SEMI?
        /// </summary>
        public override AstRoot VisitDrop_function(TSqlParser.Drop_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropFunction(context, list);
        }
        
        /// <summary>
        /// drop_table
        /// 	 : DROP  TABLE  if_exists?  table_names  SEMI?
        /// </summary>
        public override AstRoot VisitDrop_table(TSqlParser.Drop_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropTable(context, list);
        }
        
        /// <summary>
        /// drop_view
        /// 	 : DROP  VIEW  if_exists?  schema_view_refs  SEMI?
        /// </summary>
        public override AstRoot VisitDrop_view(TSqlParser.Drop_viewContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropView(context, list);
        }
        
        /// <summary>
        /// openquery
        /// 	 : OPENQUERY  LR_BRACKET  server_id  COMMA  query = stringtext  RR_BRACKET
        /// </summary>
        public override AstRoot VisitOpenquery(TSqlParser.OpenqueryContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOpenquery(context, list);
        }
        
        /// <summary>
        /// opendatasource
        /// 	 : OPENDATASOURCE  LR_BRACKET  provider = stringtext  COMMA  init = stringtext  RR_BRACKET  DOT  database_schema_table_ref
        /// </summary>
        public override AstRoot VisitOpendatasource(TSqlParser.OpendatasourceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOpendatasource(context, list);
        }
        
        /// <summary>
        /// backup_database
        /// 	 : BACKUP  DATABASE  (database_id)  (READ_WRITE_FILEGROUPS  group1 = file_group_list)?  group2 = file_group_list  backup_target?  backup_settings?
        /// </summary>
        public override AstRoot VisitBackup_database(TSqlParser.Backup_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBackupDatabase(context, list);
        }
        
        /// <summary>
        /// file_group_assign
        /// 	 : file_file_group  EQUAL  file_or_filegroup = stringtext
        /// </summary>
        public override AstRoot VisitFile_group_assign(TSqlParser.File_group_assignContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFileGroupAssign(context, list);
        }
        
        /// <summary>
        /// backup_log
        /// 	 : BACKUP  LOG  database_id  backup_target?  backup_settings?
        /// </summary>
        public override AstRoot VisitBackup_log(TSqlParser.Backup_logContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBackupLog(context, list);
        }
        
        /// <summary>
        /// backup_target
        /// 	 : backup_to  backup_to_mirror
        /// </summary>
        public override AstRoot VisitBackup_target(TSqlParser.Backup_targetContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBackupTarget(context, list);
        }
        
        /// <summary>
        /// disk_tape_url_value
        /// 	 : disk_tape_url  EQUAL  string_id
        /// </summary>
        public override AstRoot VisitDisk_tape_url_value(TSqlParser.Disk_tape_url_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDiskTapeUrlValue(context, list);
        }
        
        /// <summary>
        /// backup_certificate
        /// 	 : BACKUP  CERTIFICATE  certificate_id  TO  FILE  EQUAL  cert_file = stringtext  (WITH  PRIVATE  KEY  LR_BRACKET  backup_certificate_private_keys  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitBackup_certificate(TSqlParser.Backup_certificateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBackupCertificate(context, list);
        }
        
        /// <summary>
        /// backup_settings
        /// 	 : WITH  backup_setting+
        /// </summary>
        public override AstRoot VisitBackup_settings(TSqlParser.Backup_settingsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBackupSettings(context, list);
        }
        
        /// <summary>
        /// backup_master_key
        /// 	 : BACKUP  MASTER  KEY  TO  FILE  EQUAL  master_key_backup_file = stringtext  encryption_by_pwd
        /// </summary>
        public override AstRoot VisitBackup_master_key(TSqlParser.Backup_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBackupMasterKey(context, list);
        }
        
        /// <summary>
        /// backup_service_master_key
        /// 	 : BACKUP  SERVICE  MASTER  KEY  TO  FILE  EQUAL  service_master_key_backup_file = stringtext  encryption_by_pwd
        /// </summary>
        public override AstRoot VisitBackup_service_master_key(TSqlParser.Backup_service_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBackupServiceMasterKey(context, list);
        }
        
        /// <summary>
        /// execute_statement
        /// 	 : EXECUTE  execute_body  SEMI?
        /// </summary>
        public override AstRoot VisitExecute_statement(TSqlParser.Execute_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteStatement(context, list);
        }
        
        /// <summary>
        /// execute_body_batch
        /// 	 : func_proc_name_server_database_schema  (execute_statement_args)?  SEMI?
        /// </summary>
        public override AstRoot VisitExecute_body_batch(TSqlParser.Execute_body_batchContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteBodyBatch(context, list);
        }
        
        /// <summary>
        /// create_certificate
        /// 	 : CREATE  CERTIFICATE  certificate_id  (AUTHORIZATION  user_id)?  (FROM  existing_keys | generate_new_keys)  (ACTIVE  FOR  BEGIN  DIALOG  EQUAL  on_off)?
        /// </summary>
        public override AstRoot VisitCreate_certificate(TSqlParser.Create_certificateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateCertificate(context, list);
        }
        
        /// <summary>
        /// generate_new_keys
        /// 	 : encryption_by_pwd?  WITH  SUBJECT  EQUAL  certificate_subject_name = stringtext  (COMMA  date_options)?
        /// </summary>
        public override AstRoot VisitGenerate_new_keys(TSqlParser.Generate_new_keysContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGenerateNewKeys(context, list);
        }
        
        /// <summary>
        /// use_statement
        /// 	 : USE  database_id  SEMI?
        /// </summary>
        public override AstRoot VisitUse_statement(TSqlParser.Use_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUseStatement(context, list);
        }
        
        /// <summary>
        /// declare_local
        /// 	 : LOCAL_ID  AS?  data_type  (EQUAL  expression)?
        /// </summary>
        public override AstRoot VisitDeclare_local(TSqlParser.Declare_localContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeclareLocal(context, list);
        }
        
        /// <summary>
        /// table_type_definition
        /// 	 : TABLE  LR_BRACKET  column_def_table_constraints  table_type_indices?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitTable_type_definition(TSqlParser.Table_type_definitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableTypeDefinition(context, list);
        }
        
        /// <summary>
        /// xml_type_definition
        /// 	 : XML  LR_BRACKET  (CONTENT | DOCUMENT)?  xml_schema_collection  RR_BRACKET
        /// </summary>
        public override AstRoot VisitXml_type_definition(TSqlParser.Xml_type_definitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstXmlTypeDefinition(context, list);
        }
        
        /// <summary>
        /// column_definition
        /// 	 : column_id  (data_type | AS  expression  PERSISTED?)  column_definition_element*  column_index?
        /// </summary>
        public override AstRoot VisitColumn_definition(TSqlParser.Column_definitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnDefinition(context, list);
        }
        
        /// <summary>
        /// column_modifier
        /// 	 : id_  add_drop  (ROWGUIDCOL | PERSISTED | NOT  FOR  REPLICATION | SPARSE | HIDDEN_KEYWORD | MASKED  (WITH  (FUNCTION  EQUAL  STRING | LR_BRACKET  FUNCTION  EQUAL  STRING  RR_BRACKET))?)
        /// </summary>
        public override AstRoot VisitColumn_modifier(TSqlParser.Column_modifierContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnModifier(context, list);
        }
        
        /// <summary>
        /// materialized_column_definition
        /// 	 : id_  (COMPUTE | AS)  expression  (MATERIALIZED | NOT  MATERIALIZED)?
        /// </summary>
        public override AstRoot VisitMaterialized_column_definition(TSqlParser.Materialized_column_definitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMaterializedColumnDefinition(context, list);
        }
        
        /// <summary>
        /// column_index
        /// 	 : INDEX  index_id?  create_table_index_options?  on_partition_or_filegroup?  (FILESTREAM_ON  (filestream_filegroup_or_partition_schema_id | NULL_DOUBLE_QUOTE))?
        /// </summary>
        public override AstRoot VisitColumn_index(TSqlParser.Column_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnIndex(context, list);
        }
        
        /// <summary>
        /// primary_key_options
        /// 	 : (WITH  FILLFACTOR  EQUAL  DECIMAL)?  alter_table_index_options?  on_partition_or_filegroup?
        /// </summary>
        public override AstRoot VisitPrimary_key_options(TSqlParser.Primary_key_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPrimaryKeyOptions(context, list);
        }
        
        /// <summary>
        /// foreign_key_options
        /// 	 : REFERENCES  full_table_ref  LR_BRACKET  pk = column_name_list  RR_BRACKET  on_delete?  on_update?  (NOT  FOR  REPLICATION)?
        /// </summary>
        public override AstRoot VisitForeign_key_options(TSqlParser.Foreign_key_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstForeignKeyOptions(context, list);
        }
        
        /// <summary>
        /// check_constraint
        /// 	 : CHECK  (NOT  FOR  REPLICATION)?  LR_BRACKET  search_condition  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCheck_constraint(TSqlParser.Check_constraintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCheckConstraint(context, list);
        }
        
        /// <summary>
        /// declare_cursor
        /// 	 : DECLARE  cursor_name  (CURSOR  (declare_set_cursor_common  (FOR  UPDATE  (OF  column_name_list)?)?)? | sensitive?  SCROLL?  CURSOR  FOR  select_statement_standalone  (FOR  (READ  ONLY | UPDATE | (OF  column_name_list)))?)  SEMI?
        /// </summary>
        public override AstRoot VisitDeclare_cursor(TSqlParser.Declare_cursorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeclareCursor(context, list);
        }
        
        /// <summary>
        /// declare_set_cursor_common
        /// 	 : declare_set_cursor_common_partial*  FOR  select_statement_standalone
        /// </summary>
        public override AstRoot VisitDeclare_set_cursor_common(TSqlParser.Declare_set_cursor_commonContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeclareSetCursorCommon(context, list);
        }
        
        /// <summary>
        /// fetch_cursor
        /// 	 : FETCH  ((fetch_cursor_strategy | absolute_relative  expression)?  FROM)?  GLOBAL?  cursor_name  (INTO  local_ids)?  SEMI?
        /// </summary>
        public override AstRoot VisitFetch_cursor(TSqlParser.Fetch_cursorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFetchCursor(context, list);
        }
        
        /// <summary>
        /// time_zone
        /// 	 : AT_KEYWORD  TIME  ZONE  expression
        /// </summary>
        public override AstRoot VisitTime_zone(TSqlParser.Time_zoneContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTimeZone(context, list);
        }
        
        /// <summary>
        /// predicate_multi_assign
        /// 	 : left = expression  MULT_ASSIGN  right = expression
        /// </summary>
        public override AstRoot VisitPredicate_multi_assign(TSqlParser.Predicate_multi_assignContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPredicateMultiAssign(context, list);
        }
        
        /// <summary>
        /// predicate_binary
        /// 	 : left = expression  comparison_operator  right = expression
        /// </summary>
        public override AstRoot VisitPredicate_binary(TSqlParser.Predicate_binaryContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPredicateBinary(context, list);
        }
        
        /// <summary>
        /// predicate_tier
        /// 	 : init = expression  NOT*  BETWEEN  left = expression  AND  right = expression
        /// </summary>
        public override AstRoot VisitPredicate_tier(TSqlParser.Predicate_tierContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPredicateTier(context, list);
        }
        
        /// <summary>
        /// predicate_not_like
        /// 	 : left = expression  NOT*  LIKE  right = expression  (ESCAPE  escape = expression)?
        /// </summary>
        public override AstRoot VisitPredicate_not_like(TSqlParser.Predicate_not_likeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPredicateNotLike(context, list);
        }
        
        /// <summary>
        /// predicate_not_in
        /// 	 : left = expression  NOT*  IN  LR_BRACKET  (subquery | expression_list)  RR_BRACKET
        /// </summary>
        public override AstRoot VisitPredicate_not_in(TSqlParser.Predicate_not_inContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPredicateNotIn(context, list);
        }
        
        /// <summary>
        /// query_specification
        /// 	 : SELECT  allOrDistinct = (ALL | DISTINCT)  top = top_clause  columns = select_list  (INTO  into = full_table_ref)?  (FROM  from = table_sources)?  where_condition?  (GROUP  BY  ((groupByAll = ALL  groupBys_list) | GROUPING  SETS  LR_BRACKET  groupSet_list  RR_BRACKET))?  (HAVING  having = search_condition)?
        /// </summary>
        public override AstRoot VisitQuery_specification(TSqlParser.Query_specificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQuerySpecification(context, list);
        }
        
        /// <summary>
        /// select_order_by_clause
        /// 	 : order_by_clause  (OFFSET  offset_exp = expression  offset_rows = (ROW | ROWS)  (FETCH  fetch_offset = (FIRST | NEXT)  fetch_exp = expression  fetch_rows = (ROW | ROWS)  ONLY)?)?
        /// </summary>
        public override AstRoot VisitSelect_order_by_clause(TSqlParser.Select_order_by_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSelectOrderByClause(context, list);
        }
        
        /// <summary>
        /// for_clause_xml_raw
        /// 	 : FOR  XML  (RAW  (LR_BRACKET  xmlraw = stringtext  RR_BRACKET)? | AUTO)  xml_common_directives*  (COMMA  (XMLDATA | XMLSCHEMA  (LR_BRACKET  xml_schema = stringtext  RR_BRACKET)?))?  (COMMA  ELEMENTS  (XSINIL | ABSENT)?)?
        /// </summary>
        public override AstRoot VisitFor_clause_xml_raw(TSqlParser.For_clause_xml_rawContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstForClauseXmlRaw(context, list);
        }
        
        /// <summary>
        /// for_clause_json
        /// 	 : FOR  JSON  (AUTO | PATH)  clause_json_infos?
        /// </summary>
        public override AstRoot VisitFor_clause_json(TSqlParser.For_clause_jsonContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstForClauseJson(context, list);
        }
        
        /// <summary>
        /// group_by_item
        /// 	 : expression
        /// </summary>
        public override AstRoot VisitGroup_by_item(TSqlParser.Group_by_itemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGroupByItem(context, list);
        }
        
        /// <summary>
        /// table_asterisk
        /// 	 : full_table_ref  DOT  STAR
        /// </summary>
        public override AstRoot VisitTable_asterisk(TSqlParser.Table_asteriskContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableAsterisk(context, list);
        }
        
        /// <summary>
        /// column_elem
        /// 	 : column_elem_target  as_column_alias?
        /// </summary>
        public override AstRoot VisitColumn_elem(TSqlParser.Column_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnElem(context, list);
        }
        
        /// <summary>
        /// expression_assign_elem
        /// 	 : LOCAL_ID  (assignment_operator | EQUAL)  expression
        /// </summary>
        public override AstRoot VisitExpression_assign_elem(TSqlParser.Expression_assign_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExpressionAssignElem(context, list);
        }
        
        /// <summary>
        /// open_xml
        /// 	 : OPENXML  LR_BRACKET  expression  COMMA  expression2  RR_BRACKET  (WITH  LR_BRACKET  schema_declaration  RR_BRACKET)?  as_table_alias?
        /// </summary>
        public override AstRoot VisitOpen_xml(TSqlParser.Open_xmlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOpenXml(context, list);
        }
        
        /// <summary>
        /// open_json
        /// 	 : OPENJSON  LR_BRACKET  expression2  RR_BRACKET  (WITH  LR_BRACKET  json_declaration  RR_BRACKET)?  as_table_alias?
        /// </summary>
        public override AstRoot VisitOpen_json(TSqlParser.Open_jsonContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOpenJson(context, list);
        }
        
        /// <summary>
        /// json_column_declaration
        /// 	 : column_declaration  (AS  JSON)?
        /// </summary>
        public override AstRoot VisitJson_column_declaration(TSqlParser.Json_column_declarationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstJsonColumnDeclaration(context, list);
        }
        
        /// <summary>
        /// column_declaration
        /// 	 : id_  data_type  STRING?
        /// </summary>
        public override AstRoot VisitColumn_declaration(TSqlParser.Column_declarationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnDeclaration(context, list);
        }
        
        /// <summary>
        /// cross_join
        /// 	 : CROSS  JOIN  table_source
        /// </summary>
        public override AstRoot VisitCross_join(TSqlParser.Cross_joinContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCrossJoin(context, list);
        }
        
        /// <summary>
        /// pivot
        /// 	 : PIVOT  pivot_clause  as_table_alias
        /// </summary>
        public override AstRoot VisitPivot(TSqlParser.PivotContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPivot(context, list);
        }
        
        /// <summary>
        /// unpivot
        /// 	 : UNPIVOT  unpivot_clause  as_table_alias
        /// </summary>
        public override AstRoot VisitUnpivot(TSqlParser.UnpivotContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUnpivot(context, list);
        }
        
        /// <summary>
        /// pivot_clause
        /// 	 : LR_BRACKET  aggregate_windowed_function  FOR  full_column_name  IN  column_alias_list  RR_BRACKET
        /// </summary>
        public override AstRoot VisitPivot_clause(TSqlParser.Pivot_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPivotClause(context, list);
        }
        
        /// <summary>
        /// unpivot_clause
        /// 	 : LR_BRACKET  unpivot_exp = expression  FOR  full_column_name  IN  LR_BRACKET  full_column_name_list  RR_BRACKET  RR_BRACKET
        /// </summary>
        public override AstRoot VisitUnpivot_clause(TSqlParser.Unpivot_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUnpivotClause(context, list);
        }
        
        /// <summary>
        /// bulk_option
        /// 	 : id_  EQUAL  bulk_option_value = decimal_string
        /// </summary>
        public override AstRoot VisitBulk_option(TSqlParser.Bulk_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBulkOption(context, list);
        }
        
        /// <summary>
        /// freetext_table_andcolumn_names
        /// 	 : full_table_ref  COMMA  (full_column_name | full_column_names | STAR)
        /// </summary>
        public override AstRoot VisitFreetext_table_andcolumn_names(TSqlParser.Freetext_table_andcolumn_namesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFreetextTableAndcolumnNames(context, list);
        }
        
        /// <summary>
        /// switch_section
        /// 	 : WHEN  when_expr = expression  THEN  then_expr = expression
        /// </summary>
        public override AstRoot VisitSwitch_section(TSqlParser.Switch_sectionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSwitchSection(context, list);
        }
        
        /// <summary>
        /// switch_search_condition_section
        /// 	 : WHEN  search_condition  THEN  expression
        /// </summary>
        public override AstRoot VisitSwitch_search_condition_section(TSqlParser.Switch_search_condition_sectionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSwitchSearchConditionSection(context, list);
        }
        
        /// <summary>
        /// as_column_alias
        /// 	 : AS?  column_alias
        /// </summary>
        public override AstRoot VisitAs_column_alias(TSqlParser.As_column_aliasContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAsColumnAlias(context, list);
        }
        
        /// <summary>
        /// as_table_alias
        /// 	 : AS?  table_alias
        /// </summary>
        public override AstRoot VisitAs_table_alias(TSqlParser.As_table_aliasContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAsTableAlias(context, list);
        }
        
        /// <summary>
        /// deprecated_table_hint
        /// 	 : LR_BRACKET  table_hint  RR_BRACKET
        /// </summary>
        public override AstRoot VisitDeprecated_table_hint(TSqlParser.Deprecated_table_hintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeprecatedTableHint(context, list);
        }
        
        /// <summary>
        /// all_distinct_expression
        /// 	 : (ALL | DISTINCT)?  expression
        /// </summary>
        public override AstRoot VisitAll_distinct_expression(TSqlParser.All_distinct_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAllDistinctExpression(context, list);
        }
        
        /// <summary>
        /// over_clause
        /// 	 : OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  order_by_clause?  row_or_range_clause?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitOver_clause(TSqlParser.Over_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOverClause(context, list);
        }
        
        /// <summary>
        /// row_or_range_clause
        /// 	 : (ROWS | RANGE)  window_frame_extent
        /// </summary>
        public override AstRoot VisitRow_or_range_clause(TSqlParser.Row_or_range_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRowOrRangeClause(context, list);
        }
        
        /// <summary>
        /// file_group
        /// 	 : FILEGROUP  file_group_id  (CONTAINS  FILESTREAM)?  (DEFAULT)?  (CONTAINS  MEMORY_OPTIMIZED_DATA)?  file_specs
        /// </summary>
        public override AstRoot VisitFile_group(TSqlParser.File_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFileGroup(context, list);
        }
        
        /// <summary>
        /// file_spec
        /// 	 : LR_BRACKET  NAME  EQUAL  id_or_string  COMMA?  FILENAME  EQUAL  file = STRING  COMMA?  (SIZE  EQUAL  size = file_size  COMMA?)?  (MAXSIZE  EQUAL  max_size  COMMA?)?  (FILEGROWTH  EQUAL  filegrowth = file_size  COMMA?)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitFile_spec(TSqlParser.File_specContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFileSpec(context, list);
        }
        
        /// <summary>
        /// begin_conversation_timer
        /// 	 : BEGIN  CONVERSATION  TIMER  LR_BRACKET  LOCAL_ID  RR_BRACKET  TIMEOUT  EQUAL  time  SEMI?
        /// </summary>
        public override AstRoot VisitBegin_conversation_timer(TSqlParser.Begin_conversation_timerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBeginConversationTimer(context, list);
        }
        
        /// <summary>
        /// begin_conversation_dialog
        /// 	 : BEGIN  DIALOG  (CONVERSATION)?  dialog_handle = LOCAL_ID  FROM  SERVICE  initiator_service_name = service_name  TO  SERVICE  target_service_name = service_name  (COMMA  service_broker_guid = stringtext)?  ON  CONTRACT  contract_name_expression  (WITH  ((RELATED_CONVERSATION | RELATED_CONVERSATION_GROUP)  EQUAL  LOCAL_ID  COMMA?)?  (LIFETIME  EQUAL  decimal_local_id  COMMA?)?  (ENCRYPTION  EQUAL  on_off)?)?  SEMI?
        /// </summary>
        public override AstRoot VisitBegin_conversation_dialog(TSqlParser.Begin_conversation_dialogContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBeginConversationDialog(context, list);
        }
        
        /// <summary>
        /// waitfor_conversation
        /// 	 : WAITFOR?  LR_BRACKET  get_conversation  RR_BRACKET  (COMMA?  TIMEOUT  timeout = time)?  SEMI?
        /// </summary>
        public override AstRoot VisitWaitfor_conversation(TSqlParser.Waitfor_conversationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWaitforConversation(context, list);
        }
        
        /// <summary>
        /// file_size
        /// 	 : DECIMAL  file_size_unity?
        /// </summary>
        public override AstRoot VisitFile_size(TSqlParser.File_sizeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFileSize(context, list);
        }
        
        /// <summary>
        /// schema_security_predicate_function_id
        /// 	 : tvf_schema_id  DOT  security_predicate_function_id
        /// </summary>
        public override AstRoot VisitSchema_security_predicate_function_id(TSqlParser.Schema_security_predicate_function_idContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSchemaSecurityPredicateFunctionId(context, list);
        }
        
        /// <summary>
        /// column_ordered
        /// 	 : column_id  asc_desc?
        /// </summary>
        public override AstRoot VisitColumn_ordered(TSqlParser.Column_orderedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnOrdered(context, list);
        }
        
        /// <summary>
        /// create_index_options
        /// 	 : WITH  LR_BRACKET  relational_index_options  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCreate_index_options(TSqlParser.Create_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateIndexOptions(context, list);
        }
    }
}
