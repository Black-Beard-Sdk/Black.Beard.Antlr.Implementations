//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Asts.TSql
{
    using System;
    using Bb.Parsers;
    using Antlr4.Runtime;
    using Antlr4.Runtime.Tree;
    
    
    /// <summary>
    /// tsql_file
    /// 	 : batch*  EOF
    /// 	 | execute_body_batch  go_statement*  EOF
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTsqlFile : AstRule
    {
        
        public AstTsqlFile(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTsqlFile(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTsqlFile(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTsqlFile(this);
        }
    }
    
    /// <summary>
    /// batch
    /// 	 : go_statement
    /// 	 | execute_body_batch?  go_statement sql_clauses  go_statement*
    /// 	 | batch_level_statement  go_statement*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBatch : AstRule
    {
        
        public AstBatch(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstBatch(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstBatch(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBatch(this);
        }
    }
    
    /// <summary>
    /// sql_clause
    /// 	 : dml_clause  SEMI?
    /// 	 | cfl_statement  SEMI?
    /// 	 | another_statement  SEMI?
    /// 	 | ddl_clause  SEMI?
    /// 	 | dbcc_special  SEMI?
    /// 	 | dbcc_clause  SEMI?
    /// 	 | backup_statement  SEMI?
    /// 	 | SEMI
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSqlClause : AstRule
    {
        
        public AstSqlClause(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSqlClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSqlClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlClause(this);
        }
    }
    
    /// <summary>
    /// break_statement
    /// 	 : BREAK  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBreakStatement : AstRule
    {
        
        public AstBreakStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstBreakStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstBreakStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBreakStatement(this);
        }
    }
    
    /// <summary>
    /// continue_statement
    /// 	 : CONTINUE  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstContinueStatement : AstRule
    {
        
        public AstContinueStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstContinueStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstContinueStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContinueStatement(this);
        }
    }
    
    /// <summary>
    /// goto_statement
    /// 	 : GOTO  id_  SEMI?
    /// 	 | id_  COLON  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGotoStatement : AstRule
    {
        
        public AstGotoStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstGotoStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstGotoStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGotoStatement(this);
        }
    }
    
    /// <summary>
    /// throw_statement
    /// 	 : THROW  throw_error_number  COMMA  throw_message  COMMA  throw_state?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstThrowStatement : AstRule
    {
        
        public AstThrowStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstThrowStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstThrowStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowStatement(this);
        }
    }
    
    /// <summary>
    /// throw_error_number
    /// 	 : DECIMAL
    /// 	 | LOCAL_ID
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstThrowErrorNumber : AstRule
    {
        
        public AstThrowErrorNumber(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstThrowErrorNumber(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstThrowErrorNumber(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowErrorNumber(this);
        }
    }
    
    /// <summary>
    /// throw_message
    /// 	 : STRING
    /// 	 | LOCAL_ID
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstThrowMessage : AstRule
    {
        
        public AstThrowMessage(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstThrowMessage(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstThrowMessage(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowMessage(this);
        }
    }
    
    /// <summary>
    /// throw_state
    /// 	 : DECIMAL
    /// 	 | LOCAL_ID
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstThrowState : AstRule
    {
        
        public AstThrowState(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstThrowState(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstThrowState(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowState(this);
        }
    }
    
    /// <summary>
    /// try_catch_statement
    /// 	 : BEGIN  TRY  SEMI?    END  TRY  SEMI?  BEGIN  CATCH  SEMI?    END  CATCH  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTryCatchStatement : AstRule
    {
        
        public AstTryCatchStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTryCatchStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTryCatchStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTryCatchStatement(this);
        }
    }
    
    /// <summary>
    /// print_statement
    /// 	 : PRINT  expression DOUBLE_QUOTE_ID  COMMA  LOCAL_ID*  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPrintStatement : AstRule
    {
        
        public AstPrintStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstPrintStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstPrintStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrintStatement(this);
        }
    }
    
    /// <summary>
    /// raiseerror_statement
    /// 	 : RAISERROR  LR_BRACKET    COMMA    COMMA    COMMA  constant_LOCAL_ID NULL_*  RR_BRACKET  WITH  LOG SETERROR NOWAIT?  SEMI?
    /// 	 | RAISERROR  DECIMAL    COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRaiseerrorStatement : AstRule
    {
        
        public AstRaiseerrorStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstRaiseerrorStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstRaiseerrorStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRaiseerrorStatement(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_start
    /// 	 : ALTER  ASSEMBLY
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterAssemblyStart : AstRule
    {
        
        public AstAlterAssemblyStart(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterAssemblyStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterAssemblyStart(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyStart(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_drop_multiple_files
    /// 	 : ALL
    /// 	 | multiple_local_files
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterAssemblyDropMultipleFiles : AstRule
    {
        
        public AstAlterAssemblyDropMultipleFiles(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterAssemblyDropMultipleFiles(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterAssemblyDropMultipleFiles(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyDropMultipleFiles(this);
        }
    }
    
    /// <summary>
    /// alter_asssembly_add_clause_start
    /// 	 : ADD  FILE  FROM
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterAsssemblyAddClauseStart : AstRule
    {
        
        public AstAlterAsssemblyAddClauseStart(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterAsssemblyAddClauseStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterAsssemblyAddClauseStart(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAsssemblyAddClauseStart(this);
        }
    }
    
    /// <summary>
    /// client_assembly_specifier
    /// 	 : network_file_share
    /// 	 | local_file
    /// 	 | STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstClientAssemblySpecifier : AstRule
    {
        
        public AstClientAssemblySpecifier(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstClientAssemblySpecifier(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstClientAssemblySpecifier(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClientAssemblySpecifier(this);
        }
    }
    
    /// <summary>
    /// assembly_option
    /// 	 : PERMISSION_SET  EQUAL  SAFE EXTERNAL_ACCESS UNSAFE
    /// 	 | VISIBILITY  EQUAL  on_off
    /// 	 | UNCHECKED  DATA
    /// 	 | assembly_option  COMMA
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAssemblyOption : AstRule
    {
        
        public AstAssemblyOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAssemblyOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAssemblyOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAssemblyOption(this);
        }
    }
    
    /// <summary>
    /// file_path
    /// 	 : file_directory_path_separator  file_path
    /// 	 | id_
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFilePath : AstRule
    {
        
        public AstFilePath(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstFilePath(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstFilePath(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilePath(this);
        }
    }
    
    /// <summary>
    /// multiple_local_files
    /// 	 : multiple_local_file_start  local_file  SINGLE_QUOTE  COMMA
    /// 	 | local_file
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstMultipleLocalFiles : AstRule
    {
        
        public AstMultipleLocalFiles(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstMultipleLocalFiles(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstMultipleLocalFiles(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMultipleLocalFiles(this);
        }
    }
    
    /// <summary>
    /// binary_content
    /// 	 : STRING
    /// 	 | BINARY
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBinaryContent : AstRule
    {
        
        public AstBinaryContent(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstBinaryContent(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstBinaryContent(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBinaryContent(this);
        }
    }
    
    /// <summary>
    /// drop_assembly
    /// 	 : DROP  ASSEMBLY  IF  EXISTS?  COMMA?  assembly_name+  WITH  NO  DEPENDENTS?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropAssembly : AstRule
    {
        
        public AstDropAssembly(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropAssembly(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropAssembly(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAssembly(this);
        }
    }
    
    /// <summary>
    /// alter_asymmetric_key_start
    /// 	 : ALTER  ASYMMETRIC  KEY
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterAsymmetricKeyStart : AstRule
    {
        
        public AstAlterAsymmetricKeyStart(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterAsymmetricKeyStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterAsymmetricKeyStart(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAsymmetricKeyStart(this);
        }
    }
    
    /// <summary>
    /// asymmetric_key_option_start
    /// 	 : WITH  PRIVATE  KEY  LR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAsymmetricKeyOptionStart : AstRule
    {
        
        public AstAsymmetricKeyOptionStart(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAsymmetricKeyOptionStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAsymmetricKeyOptionStart(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsymmetricKeyOptionStart(this);
        }
    }
    
    /// <summary>
    /// asymmetric_key_password_change_option
    /// 	 : DECRYPTION  BY  PASSWORD  EQUAL  STRING
    /// 	 | ENCRYPTION  BY  PASSWORD  EQUAL  STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAsymmetricKeyPasswordChangeOption : AstRule
    {
        
        public AstAsymmetricKeyPasswordChangeOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAsymmetricKeyPasswordChangeOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAsymmetricKeyPasswordChangeOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsymmetricKeyPasswordChangeOption(this);
        }
    }
    
    /// <summary>
    /// drop_asymmetric_key
    /// 	 : DROP  ASYMMETRIC  KEY    REMOVE  PROVIDER  KEY?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropAsymmetricKey : AstRule
    {
        
        public AstDropAsymmetricKey(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropAsymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropAsymmetricKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAsymmetricKey(this);
        }
    }
    
    /// <summary>
    /// authorization_grantee
    /// 	 : 
    /// 	 | SCHEMA  OWNER
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAuthorizationGrantee : AstRule
    {
        
        public AstAuthorizationGrantee(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAuthorizationGrantee(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAuthorizationGrantee(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuthorizationGrantee(this);
        }
    }
    
    /// <summary>
    /// alter_authorization_start
    /// 	 : ALTER  AUTHORIZATION  ON
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterAuthorizationStart : AstRule
    {
        
        public AstAlterAuthorizationStart(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterAuthorizationStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterAuthorizationStart(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationStart(this);
        }
    }
    
    /// <summary>
    /// class_type
    /// 	 : OBJECT
    /// 	 | ASSEMBLY
    /// 	 | ASYMMETRIC  KEY
    /// 	 | AVAILABILITY  GROUP
    /// 	 | CERTIFICATE
    /// 	 | CONTRACT
    /// 	 | TYPE
    /// 	 | DATABASE
    /// 	 | ENDPOINT
    /// 	 | FULLTEXT  CATALOG
    /// 	 | FULLTEXT  STOPLIST
    /// 	 | MESSAGE  TYPE
    /// 	 | REMOTE  SERVICE  BINDING
    /// 	 | ROLE
    /// 	 | ROUTE
    /// 	 | SCHEMA
    /// 	 | SEARCH  PROPERTY  LIST
    /// 	 | SERVER  ROLE
    /// 	 | SERVICE
    /// 	 | SYMMETRIC  KEY
    /// 	 | XML  SCHEMA  COLLECTION
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstClassType : AstRule
    {
        
        public AstClassType(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstClassType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstClassType(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassType(this);
        }
    }
    
    /// <summary>
    /// class_type_for_sql_database
    /// 	 : OBJECT
    /// 	 | ASSEMBLY
    /// 	 | ASYMMETRIC  KEY
    /// 	 | CERTIFICATE
    /// 	 | TYPE
    /// 	 | DATABASE
    /// 	 | FULLTEXT  CATALOG
    /// 	 | FULLTEXT  STOPLIST
    /// 	 | ROLE
    /// 	 | SCHEMA
    /// 	 | SEARCH  PROPERTY  LIST
    /// 	 | SYMMETRIC  KEY
    /// 	 | XML  SCHEMA  COLLECTION
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstClassTypeForSqlDatabase : AstRule
    {
        
        public AstClassTypeForSqlDatabase(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstClassTypeForSqlDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstClassTypeForSqlDatabase(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassTypeForSqlDatabase(this);
        }
    }
    
    /// <summary>
    /// class_type_for_grant
    /// 	 : APPLICATION  ROLE
    /// 	 | ASSEMBLY
    /// 	 | ASYMMETRIC  KEY
    /// 	 | AUDIT
    /// 	 | AVAILABILITY  GROUP
    /// 	 | BROKER  PRIORITY
    /// 	 | CERTIFICATE
    /// 	 | COLUMN  ENCRYPTION MASTER  KEY
    /// 	 | CONTRACT
    /// 	 | CREDENTIAL
    /// 	 | CRYPTOGRAPHIC  PROVIDER
    /// 	 | DATABASE  AUDIT  SPECIFICATION ENCRYPTION  KEY EVENT  SESSION SCOPED  CONFIGURATION CREDENTIAL RESOURCE  GOVERNOR?
    /// 	 | ENDPOINT
    /// 	 | EVENT  SESSION
    /// 	 | NOTIFICATION  DATABASE OBJECT SERVER
    /// 	 | EXTERNAL  DATA  SOURCE FILE  FORMAT LIBRARY RESOURCE  POOL TABLE CATALOG STOPLIST
    /// 	 | LOGIN
    /// 	 | MASTER  KEY
    /// 	 | MESSAGE  TYPE
    /// 	 | OBJECT
    /// 	 | PARTITION  FUNCTION SCHEME
    /// 	 | REMOTE  SERVICE  BINDING
    /// 	 | RESOURCE  GOVERNOR
    /// 	 | ROLE
    /// 	 | ROUTE
    /// 	 | SCHEMA
    /// 	 | SEARCH  PROPERTY  LIST
    /// 	 | SERVER  AUDIT  SPECIFICATION? ROLE?
    /// 	 | SERVICE
    /// 	 | SQL  LOGIN
    /// 	 | SYMMETRIC  KEY
    /// 	 | TRIGGER  DATABASE SERVER
    /// 	 | TYPE
    /// 	 | USER
    /// 	 | XML  SCHEMA  COLLECTION
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstClassTypeForGrant : AstRule
    {
        
        public AstClassTypeForGrant(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstClassTypeForGrant(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstClassTypeForGrant(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassTypeForGrant(this);
        }
    }
    
    /// <summary>
    /// alter_availability_group_options
    /// 	 : SET  LR_BRACKET  AUTOMATED_BACKUP_PREFERENCE  EQUAL  PRIMARY SECONDARY_ONLY SECONDARY NONE FAILURE_CONDITION_LEVEL  EQUAL  DECIMAL HEALTH_CHECK_TIMEOUT  EQUAL   DB_FAILOVER  EQUAL  on_off REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT  EQUAL  DECIMAL  RR_BRACKET
    /// 	 | ADD  DATABASE  database_name
    /// 	 | REMOVE  DATABASE  database_name
    /// 	 | ADD  REPLICA  ON  server_instance  WITH  LR_BRACKET  ENDPOINT_URL  EQUAL  STRING?  COMMA?  AVAILABILITY_MODE  EQUAL  SYNCHRONOUS_COMMIT ASYNCHRONOUS_COMMIT?  COMMA?  FAILOVER_MODE  EQUAL  AUTOMATIC MANUAL?  COMMA?  SEEDING_MODE  EQUAL  AUTOMATIC MANUAL?  COMMA?  BACKUP_PRIORITY  EQUAL  DECIMAL?  COMMA?  PRIMARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  READ_WRITE ALL  RR_BRACKET?  COMMA?  SECONDARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  READ_ONLY  RR_BRACKET?  RR_BRACKET
    /// 	 | SECONDARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  NO READ_ONLY ALL READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  STRING  RR_BRACKET
    /// 	 | PRIMARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  NO READ_ONLY ALL READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  COMMA?  STRING* NONE  RR_BRACKET SESSION_TIMEOUT  EQUAL  
    /// 	 | MODIFY  REPLICA  ON  server_instance  WITH  LR_BRACKET  ENDPOINT_URL  EQUAL  STRING AVAILABILITY_MODE  EQUAL  SYNCHRONOUS_COMMIT ASYNCHRONOUS_COMMIT FAILOVER_MODE  EQUAL  AUTOMATIC MANUAL SEEDING_MODE  EQUAL  AUTOMATIC MANUAL BACKUP_PRIORITY  EQUAL  DECIMAL SECONDARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  NO READ_ONLY ALL READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  STRING  RR_BRACKET PRIMARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  NO READ_ONLY ALL READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  COMMA?  STRING* NONE  RR_BRACKET SESSION_TIMEOUT  EQUAL    RR_BRACKET
    /// 	 | REMOVE  REPLICA  ON  STRING
    /// 	 | JOIN
    /// 	 | JOIN  AVAILABILITY  GROUP  ON  COMMA?    WITH  LR_BRACKET  LISTENER_URL  EQUAL  STRING  COMMA  AVAILABILITY_MODE  EQUAL  SYNCHRONOUS_COMMIT ASYNCHRONOUS_COMMIT  COMMA  FAILOVER_MODE  EQUAL  MANUAL  COMMA  SEEDING_MODE  EQUAL  AUTOMATIC MANUAL  RR_BRACKET+
    /// 	 | MODIFY  AVAILABILITY  GROUP  ON  COMMA?    WITH  LR_BRACKET  LISTENER_URL  EQUAL  STRING  COMMA?  AVAILABILITY_MODE  EQUAL  SYNCHRONOUS_COMMIT ASYNCHRONOUS_COMMIT?  COMMA?  FAILOVER_MODE  EQUAL  MANUAL?  COMMA?  SEEDING_MODE  EQUAL  AUTOMATIC MANUAL?  RR_BRACKET+
    /// 	 | GRANT  CREATE  ANY  DATABASE
    /// 	 | DENY  CREATE  ANY  DATABASE
    /// 	 | FAILOVER
    /// 	 | FORCE_FAILOVER_ALLOW_DATA_LOSS
    /// 	 | ADD  LISTENER    LR_BRACKET  WITH  DHCP  ON  LR_BRACKET  ip_v4_failover  ip_v4_failover  RR_BRACKET WITH  IP  LR_BRACKET  COMMA?  LR_BRACKET  ip_v4_failover  COMMA  ip_v4_failover ip_v6_failover  RR_BRACKET+  RR_BRACKET  COMMA  PORT  EQUAL  DECIMAL?  RR_BRACKET
    /// 	 | MODIFY  LISTENER  ADD  IP  LR_BRACKET  ip_v4_failover  ip_v4_failover ip_v6_failover  RR_BRACKET PORT  EQUAL  DECIMAL
    /// 	 | RESTART  LISTENER  STRING
    /// 	 | REMOVE  LISTENER  STRING
    /// 	 | OFFLINE
    /// 	 | WITH  LR_BRACKET  DTC_SUPPORT  EQUAL  PER_DB  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterAvailabilityGroupOptions : AstRule
    {
        
        public AstAlterAvailabilityGroupOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterAvailabilityGroupOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterAvailabilityGroupOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupOptions(this);
        }
    }
    
    /// <summary>
    /// create_or_alter_broker_priority
    /// 	 : CREATE ALTER  BROKER  PRIORITY    FOR  CONVERSATION  SET  LR_BRACKET  CONTRACT_NAME  EQUAL  id_ ANY  COMMA??  LOCAL_SERVICE_NAME  EQUAL  DOUBLE_FORWARD_SLASH?  id_ ANY  COMMA??  REMOTE_SERVICE_NAME  EQUAL   ANY  COMMA??  PRIORITY_LEVEL  EQUAL   DEFAULT?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateOrAlterBrokerPriority : AstRule
    {
        
        public AstCreateOrAlterBrokerPriority(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateOrAlterBrokerPriority(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateOrAlterBrokerPriority(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterBrokerPriority(this);
        }
    }
    
    /// <summary>
    /// drop_broker_priority
    /// 	 : DROP  BROKER  PRIORITY  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropBrokerPriority : AstRule
    {
        
        public AstDropBrokerPriority(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropBrokerPriority(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropBrokerPriority(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropBrokerPriority(this);
        }
    }
    
    /// <summary>
    /// drop_contract
    /// 	 : DROP  CONTRACT  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropContract : AstRule
    {
        
        public AstDropContract(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropContract(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropContract(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropContract(this);
        }
    }
    
    /// <summary>
    /// drop_database
    /// 	 : DROP  DATABASE  IF  EXISTS?  COMMA?  database_name+
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropDatabase : AstRule
    {
        
        public AstDropDatabase(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropDatabase(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabase(this);
        }
    }
    
    /// <summary>
    /// drop_database_encryption_key
    /// 	 : DROP  DATABASE  ENCRYPTION  KEY
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropDatabaseEncryptionKey : AstRule
    {
        
        public AstDropDatabaseEncryptionKey(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropDatabaseEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropDatabaseEncryptionKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabaseEncryptionKey(this);
        }
    }
    
    /// <summary>
    /// drop_default
    /// 	 : DROP  DEFAULT  IF  EXISTS?  COMMA?  schema_name  DOT?  schema_name
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropDefault : AstRule
    {
        
        public AstDropDefault(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropDefault(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropDefault(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDefault(this);
        }
    }
    
    /// <summary>
    /// drop_event_notifications
    /// 	 : DROP  EVENT  NOTIFICATION  COMMA?  notification_name+  ON  SERVER DATABASE QUEUE  queue_name
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropEventNotifications : AstRule
    {
        
        public AstDropEventNotifications(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropEventNotifications(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropEventNotifications(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropEventNotifications(this);
        }
    }
    
    /// <summary>
    /// drop_master_key
    /// 	 : DROP  MASTER  KEY
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropMasterKey : AstRule
    {
        
        public AstDropMasterKey(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropMasterKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropMasterKey(this);
        }
    }
    
    /// <summary>
    /// drop_rule
    /// 	 : DROP  RULE  IF  EXISTS?  COMMA?  schema_name  DOT?  rule_name?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropRule : AstRule
    {
        
        public AstDropRule(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropRule(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropRule(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRule(this);
        }
    }
    
    /// <summary>
    /// drop_sequence
    /// 	 : DROP  SEQUENCE  IF  EXISTS?  COMMA?  database_name  DOT?  schema_name  DOT?  sequence_name?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropSequence : AstRule
    {
        
        public AstDropSequence(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropSequence(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropSequence(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSequence(this);
        }
    }
    
    /// <summary>
    /// disable_trigger
    /// 	 : DISABLE  TRIGGER  COMMA?  schema_name  DOT?  trigger_name+ ALL  ON  schema_name  DOT?  object_name DATABASE ALL  SERVER
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDisableTrigger : AstRule
    {
        
        public AstDisableTrigger(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDisableTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDisableTrigger(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDisableTrigger(this);
        }
    }
    
    /// <summary>
    /// enable_trigger
    /// 	 : ENABLE  TRIGGER  COMMA?  schema_name  DOT?  trigger_name+ ALL  ON  schema_name  DOT?  object_name DATABASE ALL  SERVER
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEnableTrigger : AstRule
    {
        
        public AstEnableTrigger(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstEnableTrigger(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstEnableTrigger(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEnableTrigger(this);
        }
    }
    
    /// <summary>
    /// create_column_master_key
    /// 	 : CREATE  COLUMN  MASTER  KEY    WITH  LR_BRACKET  KEY_STORE_PROVIDER_NAME  EQUAL    COMMA  KEY_PATH  EQUAL    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateColumnMasterKey : AstRule
    {
        
        public AstCreateColumnMasterKey(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateColumnMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateColumnMasterKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnMasterKey(this);
        }
    }
    
    /// <summary>
    /// event_session_predicate_expression
    /// 	 : COMMA?  AND OR?  NOT?  event_session_predicate_factor LR_BRACKET  event_session_predicate_expression  RR_BRACKET+
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEventSessionPredicateExpression : AstRule
    {
        
        public AstEventSessionPredicateExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstEventSessionPredicateExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstEventSessionPredicateExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionPredicateExpression(this);
        }
    }
    
    /// <summary>
    /// event_session_predicate_factor
    /// 	 : event_session_predicate_leaf
    /// 	 | LR_BRACKET  event_session_predicate_expression  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEventSessionPredicateFactor : AstRule
    {
        
        public AstEventSessionPredicateFactor(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstEventSessionPredicateFactor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstEventSessionPredicateFactor(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionPredicateFactor(this);
        }
    }
    
    /// <summary>
    /// event_session_predicate_leaf
    /// 	 : event_field_name event_field_name event_module_guid  DOT?  event_package_name  DOT  predicate_source_name  EQUAL LESS  GREATER EXCLAMATION  EQUAL GREATER GREATER  EQUAL LESS LESS  EQUAL  DECIMAL STRING
    /// 	 | event_module_guid  DOT?  event_package_name  DOT  predicate_compare_name  LR_BRACKET  event_field_name event_module_guid  DOT?  event_package_name  DOT  predicate_source_name  COMMA  DECIMAL STRING  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEventSessionPredicateLeaf : AstRule
    {
        
        public AstEventSessionPredicateLeaf(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstEventSessionPredicateLeaf(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstEventSessionPredicateLeaf(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionPredicateLeaf(this);
        }
    }
    
    /// <summary>
    /// alter_external_data_source
    /// 	 : ALTER  EXTERNAL  DATA  SOURCE  data_source_name  SET  LOCATION  EQUAL    COMMA? RESOURCE_MANAGER_LOCATION  EQUAL    COMMA? CREDENTIAL  EQUAL  credential_name+
    /// 	 | ALTER  EXTERNAL  DATA  SOURCE  data_source_name  WITH  LR_BRACKET  TYPE  EQUAL  BLOB_STORAGE  COMMA  LOCATION  EQUAL    COMMA  CREDENTIAL  EQUAL  credential_name?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterExternalDataSource : AstRule
    {
        
        public AstAlterExternalDataSource(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterExternalDataSource(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterExternalDataSource(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterExternalDataSource(this);
        }
    }
    
    /// <summary>
    /// alter_external_resource_pool
    /// 	 : ALTER  EXTERNAL  RESOURCE  POOL  pool_name DEFAULT_DOUBLE_QUOTE  WITH  LR_BRACKET  MAX_CPU_PERCENT  EQUAL    COMMA?  AFFINITY  CPU  EQUAL  AUTO COMMA?  DECIMAL  TO  DECIMAL COMMA  DECIMAL+ NUMANODE  EQUAL  COMMA?  DECIMAL  TO  DECIMAL COMMA?  DECIMAL+  COMMA?  MAX_MEMORY_PERCENT  EQUAL  ?  COMMA?  MAX_PROCESSES  EQUAL  ?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterExternalResourcePool : AstRule
    {
        
        public AstAlterExternalResourcePool(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterExternalResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterExternalResourcePool(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterExternalResourcePool(this);
        }
    }
    
    /// <summary>
    /// alter_master_key_sql_server
    /// 	 : ALTER  MASTER  KEY  FORCE?  REGENERATE  WITH  ENCRYPTION  BY  PASSWORD  EQUAL   ADD DROP  ENCRYPTION  BY  SERVICE  MASTER  KEY PASSWORD  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterMasterKeySqlServer : AstRule
    {
        
        public AstAlterMasterKeySqlServer(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterMasterKeySqlServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterMasterKeySqlServer(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterMasterKeySqlServer(this);
        }
    }
    
    /// <summary>
    /// create_master_key_sql_server
    /// 	 : CREATE  MASTER  KEY  ENCRYPTION  BY  PASSWORD  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateMasterKeySqlServer : AstRule
    {
        
        public AstCreateMasterKeySqlServer(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateMasterKeySqlServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateMasterKeySqlServer(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateMasterKeySqlServer(this);
        }
    }
    
    /// <summary>
    /// alter_master_key_azure_sql
    /// 	 : ALTER  MASTER  KEY  FORCE?  REGENERATE  WITH  ENCRYPTION  BY  PASSWORD  EQUAL   ADD  ENCRYPTION  BY  SERVICE  MASTER  KEY PASSWORD  EQUAL   DROP  ENCRYPTION  BY  PASSWORD  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterMasterKeyAzureSql : AstRule
    {
        
        public AstAlterMasterKeyAzureSql(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterMasterKeyAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterMasterKeyAzureSql(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterMasterKeyAzureSql(this);
        }
    }
    
    /// <summary>
    /// create_master_key_azure_sql
    /// 	 : CREATE  MASTER  KEY  ENCRYPTION  BY  PASSWORD  EQUAL  ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateMasterKeyAzureSql : AstRule
    {
        
        public AstCreateMasterKeyAzureSql(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateMasterKeyAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateMasterKeyAzureSql(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateMasterKeyAzureSql(this);
        }
    }
    
    /// <summary>
    /// alter_resource_governor
    /// 	 : ALTER  RESOURCE  GOVERNOR  DISABLE RECONFIGURE WITH  LR_BRACKET  CLASSIFIER_FUNCTION  EQUAL  schema_name  DOT  function_name NULL_  RR_BRACKET RESET  STATISTICS WITH  LR_BRACKET  MAX_OUTSTANDING_IO_PER_VOLUME  EQUAL    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterResourceGovernor : AstRule
    {
        
        public AstAlterResourceGovernor(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterResourceGovernor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterResourceGovernor(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterResourceGovernor(this);
        }
    }
    
    /// <summary>
    /// create_schema
    /// 	 : CREATE  SCHEMA  schema_name AUTHORIZATION  owner_name schema_name  AUTHORIZATION  owner_name  create_table create_view grant_deny  enum_dml  ON  SCHEMA  DOUBLE_COLON?  object_name  TO  owner_name REVOKE  enum_dml  ON  SCHEMA  DOUBLE_COLON?  object_name  FROM  owner_name*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateSchema : AstRule
    {
        
        public AstCreateSchema(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateSchema(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateSchema(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSchema(this);
        }
    }
    
    /// <summary>
    /// alter_server_configuration
    /// 	 : ALTER  SERVER  CONFIGURATION  SET  PROCESS  AFFINITY  CPU  EQUAL  AUTO COMMA?  DECIMAL COMMA?  DECIMAL  TO  DECIMAL+ NUMANODE  EQUAL  COMMA?  DECIMAL COMMA?  DECIMAL  TO  DECIMAL+ DIAGNOSTICS  LOG  ON OFF PATH  EQUAL  STRING DEFAULT MAX_SIZE  EQUAL  DECIMAL  MB DEFAULT MAX_FILES  EQUAL  DECIMAL DEFAULT FAILOVER  CLUSTER  PROPERTY  VERBOSELOGGING  EQUAL  STRING DEFAULT SQLDUMPERFLAGS  EQUAL  STRING DEFAULT SQLDUMPERPATH  EQUAL  STRING DEFAULT SQLDUMPERTIMEOUT  STRING DEFAULT FAILURECONDITIONLEVEL  EQUAL  STRING DEFAULT HEALTHCHECKTIMEOUT  EQUAL  DECIMAL DEFAULT HADR  CLUSTER  CONTEXT  EQUAL  STRING LOCAL BUFFER  POOL  EXTENSION  ON  LR_BRACKET  FILENAME  EQUAL  STRING  COMMA  SIZE  EQUAL  DECIMAL  KB MB GB  RR_BRACKET OFF SET  SOFTNUMA  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterServerConfiguration : AstRule
    {
        
        public AstAlterServerConfiguration(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterServerConfiguration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterServerConfiguration(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerConfiguration(this);
        }
    }
    
    /// <summary>
    /// alter_service_master_key
    /// 	 : ALTER  SERVICE  MASTER  KEY  FORCE?  REGENERATE WITH  OLD_ACCOUNT  EQUAL    COMMA  OLD_PASSWORD  EQUAL   NEW_ACCOUNT  EQUAL    COMMA  NEW_PASSWORD  EQUAL  ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterServiceMasterKey : AstRule
    {
        
        public AstAlterServiceMasterKey(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterServiceMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterServiceMasterKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServiceMasterKey(this);
        }
    }
    
    /// <summary>
    /// create_user
    /// 	 : CREATE  USER  user_name  FOR FROM  LOGIN  login_name?  WITH  COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off*?
    /// 	 | CREATE  USER  windows_principal  WITH  COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  DEFAULT_LANGUAGE  EQUAL  NONE DECIMAL language COMMA?  SID  EQUAL  BINARY COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off*? user_name  WITH  PASSWORD  EQUAL    COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  DEFAULT_LANGUAGE  EQUAL  NONE DECIMAL language COMMA?  SID  EQUAL  BINARY COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off* azure_active_directory_principal  FROM  EXTERNAL  PROVIDER
    /// 	 | CREATE  USER  user_name  WITHOUT  LOGIN  COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off* FOR FROM  CERTIFICATE  certificate_name FOR FROM  ASYMMETRIC  KEY  asym_key_name
    /// 	 | CREATE  USER  user_name
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateUser : AstRule
    {
        
        public AstCreateUser(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateUser(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateUser(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateUser(this);
        }
    }
    
    /// <summary>
    /// create_user_azure_sql_dw
    /// 	 : CREATE  USER  user_name  FOR FROM  LOGIN  login_name WITHOUT  LOGIN?  WITH  DEFAULT_SCHEMA  EQUAL  schema_name?
    /// 	 | CREATE  USER  azure_active_directory_principal  FROM  EXTERNAL  PROVIDER  WITH  DEFAULT_SCHEMA  EQUAL  schema_name?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateUserAzureSqlDw : AstRule
    {
        
        public AstCreateUserAzureSqlDw(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateUserAzureSqlDw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateUserAzureSqlDw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateUserAzureSqlDw(this);
        }
    }
    
    /// <summary>
    /// alter_workload_group
    /// 	 : ALTER  WORKLOAD  GROUP  workload_group_group_name DEFAULT_DOUBLE_QUOTE  WITH  LR_BRACKET  IMPORTANCE  EQUAL  LOW MEDIUM HIGH COMMA?  REQUEST_MAX_MEMORY_GRANT_PERCENT  EQUAL   COMMA?  REQUEST_MAX_CPU_TIME_SEC  EQUAL   REQUEST_MEMORY_GRANT_TIMEOUT_SEC  EQUAL   MAX_DOP  EQUAL   GROUP_MAX_REQUESTS  EQUAL  +  RR_BRACKET?  USING  workload_group_pool_name DEFAULT_DOUBLE_QUOTE?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterWorkloadGroup : AstRule
    {
        
        public AstAlterWorkloadGroup(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterWorkloadGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterWorkloadGroup(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterWorkloadGroup(this);
        }
    }
    
    /// <summary>
    /// queue_settings
    /// 	 : WITH  STATUS  EQUAL  on_off  COMMA??  RETENTION  EQUAL  on_off  COMMA??  ACTIVATION  LR_BRACKET  STATUS  EQUAL  on_off  COMMA??  PROCEDURE_NAME  EQUAL  func_proc_name_database_schema  COMMA??  MAX_QUEUE_READERS  EQUAL    COMMA??  EXECUTE  AS  SELF  OWNER  COMMA?? DROP  RR_BRACKET  COMMA??  POISON_MESSAGE_HANDLING  LR_BRACKET  STATUS  EQUAL  on_off  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueueSettings : AstRule
    {
        
        public AstQueueSettings(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstQueueSettings(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstQueueSettings(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueSettings(this);
        }
    }
    
    /// <summary>
    /// alter_queue
    /// 	 : ALTER  QUEUE  complete_table_name queue_name  queue_settings queue_action
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterQueue : AstRule
    {
        
        public AstAlterQueue(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterQueue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterQueue(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterQueue(this);
        }
    }
    
    /// <summary>
    /// queue_action
    /// 	 : REBUILD  WITH  LR_BRACKET  queue_rebuild_options  RR_BRACKET?
    /// 	 | REORGANIZE  WITH  LOB_COMPACTION  EQUAL  on_off?
    /// 	 | MOVE  TO  id_ DEFAULT
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueueAction : AstRule
    {
        
        public AstQueueAction(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstQueueAction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstQueueAction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueAction(this);
        }
    }
    
    /// <summary>
    /// queue_rebuild_options
    /// 	 : MAXDOP  EQUAL  DECIMAL
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueueRebuildOptions : AstRule
    {
        
        public AstQueueRebuildOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstQueueRebuildOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstQueueRebuildOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueRebuildOptions(this);
        }
    }
    
    /// <summary>
    /// when_matches
    /// 	 : WHEN  MATCHED  AND  search_condition?  THEN  merge_matched+
    /// 	 | WHEN  NOT  MATCHED  BY  TARGET?  AND  search_condition?  THEN  merge_not_matched
    /// 	 | WHEN  NOT  MATCHED  BY  SOURCE  AND  search_condition?  THEN  merge_matched+
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWhenMatches : AstRule
    {
        
        public AstWhenMatches(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstWhenMatches(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstWhenMatches(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWhenMatches(this);
        }
    }
    
    /// <summary>
    /// merge_matched
    /// 	 : UPDATE  SET  update_elem_merges
    /// 	 | DELETE
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstMergeMatched : AstRule
    {
        
        public AstMergeMatched(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstMergeMatched(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstMergeMatched(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMergeMatched(this);
        }
    }
    
    /// <summary>
    /// merge_not_matched
    /// 	 : INSERT  LR_BRACKET  column_name_list  RR_BRACKET?  table_value_constructor DEFAULT  VALUES
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstMergeNotMatched : AstRule
    {
        
        public AstMergeNotMatched(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstMergeNotMatched(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstMergeNotMatched(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMergeNotMatched(this);
        }
    }
    
    /// <summary>
    /// delete_statement_from
    /// 	 : ddl_object
    /// 	 | rowset_function_limited
    /// 	 | 
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDeleteStatementFrom : AstRule
    {
        
        public AstDeleteStatementFrom(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDeleteStatementFrom(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDeleteStatementFrom(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeleteStatementFrom(this);
        }
    }
    
    /// <summary>
    /// insert_statement_value
    /// 	 : table_value_constructor
    /// 	 | derived_table
    /// 	 | execute_statement
    /// 	 | DEFAULT  VALUES
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstInsertStatementValue : AstRule
    {
        
        public AstInsertStatementValue(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstInsertStatementValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstInsertStatementValue(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitInsertStatementValue(this);
        }
    }
    
    /// <summary>
    /// time
    /// 	 : LOCAL_ID constant
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTime : AstRule
    {
        
        public AstTime(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTime(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTime(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTime(this);
        }
    }
    
    /// <summary>
    /// create_database
    /// 	 : CREATE  DATABASE  database_name  CONTAINMENT  EQUAL  NONE PARTIAL?  ON  PRIMARY?  database_file_spec  COMMA  database_file_spec*?  LOG  ON  database_file_spec  COMMA  database_file_spec*?  COLLATE  collation_name?  WITH  create_database_option  COMMA  create_database_option*?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateDatabase : AstRule
    {
        
        public AstCreateDatabase(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateDatabase(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateDatabase(this);
        }
    }
    
    /// <summary>
    /// relational_index_option
    /// 	 : rebuild_index_option
    /// 	 | DROP_EXISTING  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRelationalIndexOption : AstRule
    {
        
        public AstRelationalIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstRelationalIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstRelationalIndexOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRelationalIndexOption(this);
        }
    }
    
    /// <summary>
    /// resumable_index_options
    /// 	 : WITH  LR_BRACKET  resumable_index_option  COMMA  resumable_index_option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstResumableIndexOptions : AstRule
    {
        
        public AstResumableIndexOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstResumableIndexOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstResumableIndexOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitResumableIndexOptions(this);
        }
    }
    
    /// <summary>
    /// resumable_index_option
    /// 	 : MAXDOP  EQUAL  
    /// 	 | MAX_DURATION  EQUAL    MINUTES?
    /// 	 | low_priority_lock_wait
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstResumableIndexOption : AstRule
    {
        
        public AstResumableIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstResumableIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstResumableIndexOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitResumableIndexOption(this);
        }
    }
    
    /// <summary>
    /// reorganize_options
    /// 	 : WITH  LR_BRACKET  reorganize_option  COMMA  reorganize_option*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstReorganizeOptions : AstRule
    {
        
        public AstReorganizeOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstReorganizeOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstReorganizeOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReorganizeOptions(this);
        }
    }
    
    /// <summary>
    /// reorganize_option
    /// 	 : LOB_COMPACTION  EQUAL  on_off
    /// 	 | COMPRESS_ALL_ROW_GROUPS  EQUAL  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstReorganizeOption : AstRule
    {
        
        public AstReorganizeOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstReorganizeOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstReorganizeOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReorganizeOption(this);
        }
    }
    
    /// <summary>
    /// set_index_option
    /// 	 : ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | COMPRESSION_DELAY  EQUAL    MINUTES?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSetIndexOption : AstRule
    {
        
        public AstSetIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSetIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSetIndexOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetIndexOption(this);
        }
    }
    
    /// <summary>
    /// rebuild_partition
    /// 	 : REBUILD  PARTITION  EQUAL  ALL?  rebuild_index_options?
    /// 	 | REBUILD  PARTITION  EQUAL  DECIMAL  single_partition_rebuild_index_options?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRebuildPartition : AstRule
    {
        
        public AstRebuildPartition(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstRebuildPartition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstRebuildPartition(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRebuildPartition(this);
        }
    }
    
    /// <summary>
    /// rebuild_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  DECIMAL
    /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | STATISTICS_INCREMENTAL  EQUAL  on_off
    /// 	 | ONLINE  EQUAL  ON  LR_BRACKET  low_priority_lock_wait  RR_BRACKET? OFF
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | MAX_DURATION  EQUAL    MINUTES?
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  
    /// 	 | DATA_COMPRESSION  EQUAL  NONE ROW PAGE COLUMNSTORE COLUMNSTORE_ARCHIVE  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRebuildIndexOption : AstRule
    {
        
        public AstRebuildIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstRebuildIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstRebuildIndexOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRebuildIndexOption(this);
        }
    }
    
    /// <summary>
    /// single_partition_rebuild_index_option
    /// 	 : SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | DATA_COMPRESSION  EQUAL  NONE ROW PAGE COLUMNSTORE COLUMNSTORE_ARCHIVE  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// 	 | ONLINE  EQUAL  ON  LR_BRACKET  low_priority_lock_wait  RR_BRACKET? OFF
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSinglePartitionRebuildIndexOption : AstRule
    {
        
        public AstSinglePartitionRebuildIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSinglePartitionRebuildIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSinglePartitionRebuildIndexOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSinglePartitionRebuildIndexOption(this);
        }
    }
    
    /// <summary>
    /// on_partitions
    /// 	 : ON  PARTITIONS  LR_BRACKET    TO  ?  COMMA    TO  ?*  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOnPartitions : AstRule
    {
        
        public AstOnPartitions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstOnPartitions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstOnPartitions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnPartitions(this);
        }
    }
    
    /// <summary>
    /// columnstore_index_option
    /// 	 : DROP_EXISTING  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  
    /// 	 | ONLINE  EQUAL  on_off
    /// 	 | COMPRESSION_DELAY  EQUAL    MINUTES?
    /// 	 | DATA_COMPRESSION  EQUAL  COLUMNSTORE COLUMNSTORE_ARCHIVE  on_partitions?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnstoreIndexOption : AstRule
    {
        
        public AstColumnstoreIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstColumnstoreIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstColumnstoreIndexOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnstoreIndexOption(this);
        }
    }
    
    /// <summary>
    /// xml_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  DECIMAL
    /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | DROP_EXISTING  EQUAL  on_off
    /// 	 | ONLINE  EQUAL  ON  LR_BRACKET  low_priority_lock_wait  RR_BRACKET? OFF
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  
    /// 	 | XML_COMPRESSION  EQUAL  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstXmlIndexOption : AstRule
    {
        
        public AstXmlIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstXmlIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstXmlIndexOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlIndexOption(this);
        }
    }
    
    /// <summary>
    /// dml_trigger_option
    /// 	 : ENCRYPTION
    /// 	 | execute_clause
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDmlTriggerOption : AstRule
    {
        
        public AstDmlTriggerOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDmlTriggerOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDmlTriggerOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDmlTriggerOption(this);
        }
    }
    
    /// <summary>
    /// create_or_alter_function
    /// 	 : CREATE  OR  ALTER? ALTER  FUNCTION    LR_BRACKET  procedure_params  RR_BRACKET LR_BRACKET  RR_BRACKET  func_body_returns_select func_body_returns_table func_body_returns_scalar  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateOrAlterFunction : AstRule
    {
        
        public AstCreateOrAlterFunction(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateOrAlterFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateOrAlterFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterFunction(this);
        }
    }
    
    /// <summary>
    /// procedure_option
    /// 	 : ENCRYPTION
    /// 	 | RECOMPILE
    /// 	 | execute_clause
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstProcedureOption : AstRule
    {
        
        public AstProcedureOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstProcedureOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstProcedureOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcedureOption(this);
        }
    }
    
    /// <summary>
    /// function_option
    /// 	 : ENCRYPTION
    /// 	 | SCHEMABINDING
    /// 	 | RETURNS  NULL_  ON  NULL_  INPUT
    /// 	 | CALLED  ON  NULL_  INPUT
    /// 	 | execute_clause
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFunctionOption : AstRule
    {
        
        public AstFunctionOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstFunctionOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstFunctionOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFunctionOption(this);
        }
    }
    
    /// <summary>
    /// update_statistics_option
    /// 	 : FULLSCAN  COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off?
    /// 	 | SAMPLE    PERCENT ROWS  COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off?
    /// 	 | RESAMPLE  on_partitions?
    /// 	 | STATS_STREAM  EQUAL  
    /// 	 | ROWCOUNT  EQUAL  DECIMAL
    /// 	 | PAGECOUNT  EQUAL  DECIMAL
    /// 	 | ALL
    /// 	 | COLUMNS
    /// 	 | INDEX
    /// 	 | NORECOMPUTE
    /// 	 | INCREMENTAL  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  
    /// 	 | AUTO_DROP  EQUAL  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUpdateStatisticsOption : AstRule
    {
        
        public AstUpdateStatisticsOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstUpdateStatisticsOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstUpdateStatisticsOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateStatisticsOption(this);
        }
    }
    
    /// <summary>
    /// table_indices
    /// 	 : INDEX  id_  UNIQUE?  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// 	 | INDEX  id_  CLUSTERED  COLUMNSTORE
    /// 	 | INDEX  id_  NONCLUSTERED?  COLUMNSTORE  LR_BRACKET  column_name_list  RR_BRACKET  create_table_index_options?  ON  id_?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableIndices : AstRule
    {
        
        public AstTableIndices(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableIndices(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableIndices(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableIndices(this);
        }
    }
    
    /// <summary>
    /// table_options
    /// 	 : WITH  LR_BRACKET  table_option  COMMA  table_option*  RR_BRACKET table_option  COMMA  table_option*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableOptions : AstRule
    {
        
        public AstTableOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableOptions(this);
        }
    }
    
    /// <summary>
    /// table_option
    /// 	 : simple_id keyword  EQUAL  simple_id keyword on_off DECIMAL
    /// 	 | CLUSTERED  COLUMNSTORE  INDEX
    /// 	 | HEAP
    /// 	 | FILLFACTOR  EQUAL  DECIMAL
    /// 	 | distribution
    /// 	 | DATA_COMPRESSION  EQUAL  NONE ROW PAGE  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableOption : AstRule
    {
        
        public AstTableOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableOption(this);
        }
    }
    
    /// <summary>
    /// distribution
    /// 	 : DISTRIBUTION  EQUAL  HASH  LR_BRACKET  id_  RR_BRACKET
    /// 	 | CLUSTERED  INDEX  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDistribution : AstRule
    {
        
        public AstDistribution(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDistribution(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDistribution(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDistribution(this);
        }
    }
    
    /// <summary>
    /// create_table_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  DECIMAL
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | STATISTICS_INCREMENTAL  EQUAL  on_off
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// 	 | DATA_COMPRESSION  EQUAL  NONE ROW PAGE COLUMNSTORE COLUMNSTORE_ARCHIVE  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateTableIndexOption : AstRule
    {
        
        public AstCreateTableIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateTableIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateTableIndexOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateTableIndexOption(this);
        }
    }
    
    /// <summary>
    /// view_attributes
    /// 	 : WITH  view_attribute  COMMA  view_attribute*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstViewAttributes : AstRule
    {
        
        public AstViewAttributes(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstViewAttributes(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstViewAttributes(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitViewAttributes(this);
        }
    }
    
    /// <summary>
    /// switch_partition
    /// 	 : PARTITION?  ?  TO    PARTITION  ?  WITH  low_priority_lock_wait?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSwitchPartition : AstRule
    {
        
        public AstSwitchPartition(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSwitchPartition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSwitchPartition(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSwitchPartition(this);
        }
    }
    
    /// <summary>
    /// low_priority_lock_wait
    /// 	 : WAIT_AT_LOW_PRIORITY  LR_BRACKET  MAX_DURATION  EQUAL    MINUTES?  COMMA  ABORT_AFTER_WAIT  EQUAL    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstLowPriorityLockWait : AstRule
    {
        
        public AstLowPriorityLockWait(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstLowPriorityLockWait(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstLowPriorityLockWait(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLowPriorityLockWait(this);
        }
    }
    
    /// <summary>
    /// alter_database
    /// 	 : ALTER  DATABASE  database_name CURRENT  MODIFY  NAME  EQUAL  database_name COLLATE  collation_name SET  database_optionspec  WITH  termination? add_or_modify_files add_or_modify_filegroups  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterDatabase : AstRule
    {
        
        public AstAlterDatabase(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterDatabase(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterDatabase(this);
        }
    }
    
    /// <summary>
    /// add_or_modify_files
    /// 	 : ADD  FILE  filespecs  TO  FILEGROUP  file_group_name?
    /// 	 | ADD  LOG  FILE  filespecs
    /// 	 | REMOVE  FILE  file_group_name
    /// 	 | MODIFY  FILE  filespec
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAddOrModifyFiles : AstRule
    {
        
        public AstAddOrModifyFiles(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAddOrModifyFiles(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAddOrModifyFiles(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAddOrModifyFiles(this);
        }
    }
    
    /// <summary>
    /// add_or_modify_filegroups
    /// 	 : ADD  FILEGROUP  file_group_name  CONTAINS  FILESTREAM CONTAINS  MEMORY_OPTIMIZED_DATA?
    /// 	 | REMOVE  FILEGROUP  file_group_name
    /// 	 | MODIFY  FILEGROUP  file_group_name  filegroup_updatability_option DEFAULT NAME  EQUAL  new_file_group_name AUTOGROW_SINGLE_FILE AUTOGROW_ALL_FILES
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAddOrModifyFilegroups : AstRule
    {
        
        public AstAddOrModifyFilegroups(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAddOrModifyFilegroups(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAddOrModifyFilegroups(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAddOrModifyFilegroups(this);
        }
    }
    
    /// <summary>
    /// database_optionspec
    /// 	 : auto_option
    /// 	 | change_tracking_option
    /// 	 | containment_option
    /// 	 | cursor_option
    /// 	 | database_mirroring_option
    /// 	 | date_correlation_optimization_option
    /// 	 | db_encryption_option
    /// 	 | db_state_option
    /// 	 | db_update_option
    /// 	 | db_user_access_option
    /// 	 | delayed_durability_option
    /// 	 | external_access_option
    /// 	 | FILESTREAM  database_filestream_option
    /// 	 | hadr_options
    /// 	 | mixed_page_allocation_option
    /// 	 | parameterization_option
    /// 	 | recovery_option
    /// 	 | service_broker_option
    /// 	 | snapshot_option
    /// 	 | sql_option
    /// 	 | target_recovery_time_option
    /// 	 | termination
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDatabaseOptionspec : AstRule
    {
        
        public AstDatabaseOptionspec(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDatabaseOptionspec(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDatabaseOptionspec(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseOptionspec(this);
        }
    }
    
    /// <summary>
    /// auto_option
    /// 	 : AUTO_CLOSE  on_off
    /// 	 | AUTO_CREATE_STATISTICS  OFF
    /// 	 | ON  INCREMENTAL  EQUAL  ON OFF
    /// 	 | AUTO_SHRINK  on_off
    /// 	 | AUTO_UPDATE_STATISTICS  on_off
    /// 	 | AUTO_UPDATE_STATISTICS_ASYNC  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAutoOption : AstRule
    {
        
        public AstAutoOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAutoOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAutoOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAutoOption(this);
        }
    }
    
    /// <summary>
    /// change_tracking_option
    /// 	 : CHANGE_TRACKING  EQUAL  OFF ON  change_tracking_option_list  change_tracking_option_lists*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstChangeTrackingOption : AstRule
    {
        
        public AstChangeTrackingOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstChangeTrackingOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstChangeTrackingOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTrackingOption(this);
        }
    }
    
    /// <summary>
    /// change_tracking_option_list
    /// 	 : AUTO_CLEANUP  EQUAL  on_off
    /// 	 | CHANGE_RETENTION  EQUAL  DAYS HOURS MINUTES
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstChangeTrackingOptionList : AstRule
    {
        
        public AstChangeTrackingOptionList(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstChangeTrackingOptionList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstChangeTrackingOptionList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTrackingOptionList(this);
        }
    }
    
    /// <summary>
    /// containment_option
    /// 	 : CONTAINMENT  EQUAL  NONE PARTIAL
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstContainmentOption : AstRule
    {
        
        public AstContainmentOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstContainmentOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstContainmentOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContainmentOption(this);
        }
    }
    
    /// <summary>
    /// cursor_option
    /// 	 : CURSOR_CLOSE_ON_COMMIT  on_off
    /// 	 | CURSOR_DEFAULT  local_global
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCursorOption : AstRule
    {
        
        public AstCursorOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCursorOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCursorOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCursorOption(this);
        }
    }
    
    /// <summary>
    /// mirroring_set_option
    /// 	 : mirroring_partner  partner_option
    /// 	 | mirroring_witness  witness_option
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstMirroringSetOption : AstRule
    {
        
        public AstMirroringSetOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstMirroringSetOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstMirroringSetOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMirroringSetOption(this);
        }
    }
    
    /// <summary>
    /// partner_option
    /// 	 : witness_partner_equal  partner_server
    /// 	 | FAILOVER
    /// 	 | FORCE_SERVICE_ALLOW_DATA_LOSS
    /// 	 | OFF
    /// 	 | RESUME
    /// 	 | SAFETY  FULL OFF
    /// 	 | SUSPEND
    /// 	 | TIMEOUT  DECIMAL
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPartnerOption : AstRule
    {
        
        public AstPartnerOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstPartnerOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstPartnerOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartnerOption(this);
        }
    }
    
    /// <summary>
    /// witness_option
    /// 	 : witness_partner_equal  witness_server
    /// 	 | OFF
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWitnessOption : AstRule
    {
        
        public AstWitnessOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstWitnessOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstWitnessOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWitnessOption(this);
        }
    }
    
    /// <summary>
    /// partner_server_tcp_prefix
    /// 	 : TCP  COLON  DOUBLE_FORWARD_SLASH
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPartnerServerTcpPrefix : AstRule
    {
        
        public AstPartnerServerTcpPrefix(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstPartnerServerTcpPrefix(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstPartnerServerTcpPrefix(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartnerServerTcpPrefix(this);
        }
    }
    
    /// <summary>
    /// port_number
    /// 	 : 
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPortNumber : AstRule
    {
        
        public AstPortNumber(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstPortNumber(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstPortNumber(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPortNumber(this);
        }
    }
    
    /// <summary>
    /// delayed_durability_option
    /// 	 : DELAYED_DURABILITY  EQUAL  DISABLED ALLOWED FORCED
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDelayedDurabilityOption : AstRule
    {
        
        public AstDelayedDurabilityOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDelayedDurabilityOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDelayedDurabilityOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDelayedDurabilityOption(this);
        }
    }
    
    /// <summary>
    /// external_access_option
    /// 	 : DB_CHAINING  on_off
    /// 	 | TRUSTWORTHY  on_off
    /// 	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
    /// 	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
    /// 	 | NESTED_TRIGGERS  EQUAL  on_off
    /// 	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
    /// 	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  DECIMAL
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExternalAccessOption : AstRule
    {
        
        public AstExternalAccessOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExternalAccessOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExternalAccessOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalAccessOption(this);
        }
    }
    
    /// <summary>
    /// hadr_options
    /// 	 : HADR  AVAILABILITY  GROUP  EQUAL  group_name OFF SUSPEND RESUME
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstHadrOptions : AstRule
    {
        
        public AstHadrOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstHadrOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstHadrOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitHadrOptions(this);
        }
    }
    
    /// <summary>
    /// parameterization_option
    /// 	 : PARAMETERIZATION  SIMPLE FORCED
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstParameterizationOption : AstRule
    {
        
        public AstParameterizationOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstParameterizationOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstParameterizationOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitParameterizationOption(this);
        }
    }
    
    /// <summary>
    /// recovery_option
    /// 	 : RECOVERY  FULL BULK_LOGGED SIMPLE
    /// 	 | TORN_PAGE_DETECTION  on_off
    /// 	 | ACCELERATED_DATABASE_RECOVERY  EQUAL  on_off
    /// 	 | PAGE_VERIFY  CHECKSUM TORN_PAGE_DETECTION NONE
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRecoveryOption : AstRule
    {
        
        public AstRecoveryOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstRecoveryOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstRecoveryOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRecoveryOption(this);
        }
    }
    
    /// <summary>
    /// service_broker_option
    /// 	 : ENABLE_BROKER
    /// 	 | DISABLE_BROKER
    /// 	 | NEW_BROKER
    /// 	 | ERROR_BROKER_CONVERSATIONS
    /// 	 | HONOR_BROKER_PRIORITY  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstServiceBrokerOption : AstRule
    {
        
        public AstServiceBrokerOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstServiceBrokerOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstServiceBrokerOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServiceBrokerOption(this);
        }
    }
    
    /// <summary>
    /// snapshot_option
    /// 	 : ALLOW_SNAPSHOT_ISOLATION  on_off
    /// 	 | READ_COMMITTED_SNAPSHOT  on_off
    /// 	 | 
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSnapshotOption : AstRule
    {
        
        public AstSnapshotOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSnapshotOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSnapshotOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSnapshotOption(this);
        }
    }
    
    /// <summary>
    /// sql_option
    /// 	 : ANSI_NULL_DEFAULT  on_off
    /// 	 | ANSI_NULLS  on_off
    /// 	 | ANSI_PADDING  on_off
    /// 	 | ANSI_WARNINGS  on_off
    /// 	 | ARITHABORT  on_off
    /// 	 | COMPATIBILITY_LEVEL  EQUAL  DECIMAL
    /// 	 | CONCAT_NULL_YIELDS_NULL  on_off
    /// 	 | NUMERIC_ROUNDABORT  on_off
    /// 	 | QUOTED_IDENTIFIER  on_off
    /// 	 | RECURSIVE_TRIGGERS  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSqlOption : AstRule
    {
        
        public AstSqlOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSqlOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSqlOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlOption(this);
        }
    }
    
    /// <summary>
    /// target_recovery_time_option
    /// 	 : TARGET_RECOVERY_TIME  EQUAL  DECIMAL  SECONDS MINUTES
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTargetRecoveryTimeOption : AstRule
    {
        
        public AstTargetRecoveryTimeOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTargetRecoveryTimeOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTargetRecoveryTimeOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetRecoveryTimeOption(this);
        }
    }
    
    /// <summary>
    /// termination
    /// 	 : ROLLBACK  AFTER  
    /// 	 | ROLLBACK  IMMEDIATE
    /// 	 | NO_WAIT
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTermination : AstRule
    {
        
        public AstTermination(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTermination(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTermination(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTermination(this);
        }
    }
    
    /// <summary>
    /// drop_index
    /// 	 : DROP  INDEX  IF  EXISTS?  drop_relational_or_xml_or_spatial_indexs drop_backward_compatible_indexs  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropIndex : AstRule
    {
        
        public AstDropIndex(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropIndex(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropIndex(this);
        }
    }
    
    /// <summary>
    /// drop_statistics
    /// 	 : DROP  STATISTICS  COMMA?  full_table_name  DOT?  +  SEMI
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropStatistics : AstRule
    {
        
        public AstDropStatistics(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropStatistics(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropStatistics(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropStatistics(this);
        }
    }
    
    /// <summary>
    /// create_type
    /// 	 : CREATE  TYPE    FROM  data_type  default_value?  AS  TABLE  LR_BRACKET  column_def_table_constraints  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateType : AstRule
    {
        
        public AstCreateType(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateType(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateType(this);
        }
    }
    
    /// <summary>
    /// drop_type
    /// 	 : DROP  TYPE  IF  EXISTS?  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDropType : AstRule
    {
        
        public AstDropType(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDropType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDropType(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropType(this);
        }
    }
    
    /// <summary>
    /// opendatasource
    /// 	 : OPENDATASOURCE  LR_BRACKET    COMMA    RR_BRACKET  DOT  database_name?  DOT  schema_name?  DOT  tableName
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOpendatasource : AstRule
    {
        
        public AstOpendatasource(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstOpendatasource(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstOpendatasource(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpendatasource(this);
        }
    }
    
    /// <summary>
    /// declare_statement
    /// 	 : DECLARE  LOCAL_ID  AS?  table_type_definition full_table_name  SEMI?
    /// 	 | DECLARE    SEMI?
    /// 	 | DECLARE  LOCAL_ID  AS?  xml_type_definition  SEMI?
    /// 	 | WITH  XMLNAMESPACES  LR_BRACKET    RR_BRACKET  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDeclareStatement : AstRule
    {
        
        public AstDeclareStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDeclareStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDeclareStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareStatement(this);
        }
    }
    
    /// <summary>
    /// xml_declaration
    /// 	 :   AS  id_
    /// 	 | DEFAULT  STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstXmlDeclaration : AstRule
    {
        
        public AstXmlDeclaration(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstXmlDeclaration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstXmlDeclaration(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlDeclaration(this);
        }
    }
    
    /// <summary>
    /// cursor_statement
    /// 	 : CLOSE  GLOBAL?  cursor_name  SEMI?
    /// 	 | DEALLOCATE  GLOBAL?  CURSOR?  cursor_name  SEMI?
    /// 	 | declare_cursor
    /// 	 | fetch_cursor
    /// 	 | OPEN  GLOBAL?  cursor_name  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCursorStatement : AstRule
    {
        
        public AstCursorStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCursorStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCursorStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCursorStatement(this);
        }
    }
    
    /// <summary>
    /// backup_database
    /// 	 : BACKUP  DATABASE  database_name  READ_WRITE_FILEGROUPS  COMMA?  FILE FILEGROUP  EQUAL  *?  COMMA?  FILE FILEGROUP  EQUAL  *  TO  COMMA?  logical_device_name+ TO  COMMA?  DISK TAPE URL  EQUAL  STRING id_+  MIRROR  TO  COMMA?  logical_device_name++ MIRROR  TO  COMMA?  DISK TAPE URL  EQUAL  STRING id_++?  WITH  COMMA?  DIFFERENTIAL COMMA?  COPY_ONLY COMMA?  COMPRESSION NO_COMPRESSION COMMA?  DESCRIPTION  EQUAL  STRING id_ COMMA?  NAME  EQUAL  backup_name COMMA?  CREDENTIAL COMMA?  FILE_SNAPSHOT COMMA?  EXPIREDATE  EQUAL  STRING id_ RETAINDAYS  EQUAL  DECIMAL id_ COMMA?  NOINIT INIT COMMA?  NOSKIP SKIP_KEYWORD COMMA?  NOFORMAT FORMAT COMMA?  MEDIADESCRIPTION  EQUAL  STRING id_ COMMA?  MEDIANAME  EQUAL   COMMA?  BLOCKSIZE  EQUAL  DECIMAL id_ COMMA?  BUFFERCOUNT  EQUAL  DECIMAL id_ COMMA?  MAXTRANSFER  EQUAL  DECIMAL id_ COMMA?  NO_CHECKSUM CHECKSUM COMMA?  STOP_ON_ERROR CONTINUE_AFTER_ERROR COMMA?  RESTART COMMA?  STATS  EQUAL  ? COMMA?  REWIND NOREWIND COMMA?  LOAD NOUNLOAD COMMA?  ENCRYPTION  LR_BRACKET  ALGORITHM  EQUAL  AES_128 AES_192 AES_256 TRIPLE_DES_3KEY  COMMA  SERVER  CERTIFICATE  EQUAL  encryptor_name SERVER  ASYMMETRIC  KEY  EQUAL  encryptor_name*?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBackupDatabase : AstRule
    {
        
        public AstBackupDatabase(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstBackupDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstBackupDatabase(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupDatabase(this);
        }
    }
    
    /// <summary>
    /// backup_log
    /// 	 : BACKUP  LOG  database_name  TO  COMMA?  logical_device_name+ TO  COMMA?  DISK TAPE URL  EQUAL  STRING id_+  MIRROR  TO  COMMA?  logical_device_name++ MIRROR  TO  COMMA?  DISK TAPE URL  EQUAL  STRING id_++?  WITH  COMMA?  DIFFERENTIAL COMMA?  COPY_ONLY COMMA?  COMPRESSION NO_COMPRESSION COMMA?  DESCRIPTION  EQUAL  STRING id_ COMMA?  NAME  EQUAL  backup_name COMMA?  CREDENTIAL COMMA?  FILE_SNAPSHOT COMMA?  EXPIREDATE  EQUAL  STRING id_ RETAINDAYS  EQUAL  DECIMAL id_ COMMA?  NOINIT INIT COMMA?  NOSKIP SKIP_KEYWORD COMMA?  NOFORMAT FORMAT COMMA?  MEDIADESCRIPTION  EQUAL  STRING id_ COMMA?  MEDIANAME  EQUAL   COMMA?  BLOCKSIZE  EQUAL  DECIMAL id_ COMMA?  BUFFERCOUNT  EQUAL  DECIMAL id_ COMMA?  MAXTRANSFER  EQUAL  DECIMAL id_ COMMA?  NO_CHECKSUM CHECKSUM COMMA?  STOP_ON_ERROR CONTINUE_AFTER_ERROR COMMA?  RESTART COMMA?  STATS  EQUAL  ? COMMA?  REWIND NOREWIND COMMA?  LOAD NOUNLOAD COMMA?  NORECOVERY STANDBY  EQUAL   COMMA?  NO_TRUNCATE COMMA?  ENCRYPTION  LR_BRACKET  ALGORITHM  EQUAL  AES_128 AES_192 AES_256 TRIPLE_DES_3KEY  COMMA  SERVER  CERTIFICATE  EQUAL  encryptor_name SERVER  ASYMMETRIC  KEY  EQUAL  encryptor_name*?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBackupLog : AstRule
    {
        
        public AstBackupLog(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstBackupLog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstBackupLog(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupLog(this);
        }
    }
    
    /// <summary>
    /// backup_master_key
    /// 	 : BACKUP  MASTER  KEY  TO  FILE  EQUAL    ENCRYPTION  BY  PASSWORD  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBackupMasterKey : AstRule
    {
        
        public AstBackupMasterKey(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstBackupMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstBackupMasterKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupMasterKey(this);
        }
    }
    
    /// <summary>
    /// backup_service_master_key
    /// 	 : BACKUP  SERVICE  MASTER  KEY  TO  FILE  EQUAL    ENCRYPTION  BY  PASSWORD  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBackupServiceMasterKey : AstRule
    {
        
        public AstBackupServiceMasterKey(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstBackupServiceMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstBackupServiceMasterKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupServiceMasterKey(this);
        }
    }
    
    /// <summary>
    /// kill_statement
    /// 	 : KILL  kill_process kill_query_notification kill_stats_job
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstKillStatement : AstRule
    {
        
        public AstKillStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstKillStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstKillStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillStatement(this);
        }
    }
    
    /// <summary>
    /// kill_process
    /// 	 :  UOW  WITH  STATUSONLY?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstKillProcess : AstRule
    {
        
        public AstKillProcess(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstKillProcess(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstKillProcess(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillProcess(this);
        }
    }
    
    /// <summary>
    /// kill_query_notification
    /// 	 : QUERY  NOTIFICATION  SUBSCRIPTION  ALL 
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstKillQueryNotification : AstRule
    {
        
        public AstKillQueryNotification(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstKillQueryNotification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstKillQueryNotification(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillQueryNotification(this);
        }
    }
    
    /// <summary>
    /// kill_stats_job
    /// 	 : STATS  JOB  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstKillStatsJob : AstRule
    {
        
        public AstKillStatsJob(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstKillStatsJob(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstKillStatsJob(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillStatsJob(this);
        }
    }
    
    /// <summary>
    /// execute_body
    /// 	 :   EQUAL?  func_proc_name_server_database_schema execute_var_string  execute_statement_arg?
    /// 	 | LR_BRACKET  execute_var_strings  RR_BRACKET  AS?  LOGIN USER  EQUAL  STRING?  AT_KEYWORD  linked_server?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteBody : AstRule
    {
        
        public AstExecuteBody(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExecuteBody(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExecuteBody(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteBody(this);
        }
    }
    
    /// <summary>
    /// execute_statement_arg
    /// 	 : execute_statement_arg_unnamed  COMMA  execute_statement_arg*
    /// 	 | execute_statement_arg_nameds
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteStatementArg : AstRule
    {
        
        public AstExecuteStatementArg(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExecuteStatementArg(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExecuteStatementArg(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArg(this);
        }
    }
    
    /// <summary>
    /// execute_statement_arg_named
    /// 	 :   EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteStatementArgNamed : AstRule
    {
        
        public AstExecuteStatementArgNamed(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExecuteStatementArgNamed(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExecuteStatementArgNamed(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgNamed(this);
        }
    }
    
    /// <summary>
    /// execute_statement_arg_unnamed
    /// 	 : 
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteStatementArgUnnamed : AstRule
    {
        
        public AstExecuteStatementArgUnnamed(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExecuteStatementArgUnnamed(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExecuteStatementArgUnnamed(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgUnnamed(this);
        }
    }
    
    /// <summary>
    /// execute_parameter
    /// 	 : constant LOCAL_ID  OUTPUT OUT? id_ DEFAULT NULL_
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteParameter : AstRule
    {
        
        public AstExecuteParameter(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExecuteParameter(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExecuteParameter(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteParameter(this);
        }
    }
    
    /// <summary>
    /// execute_var_string
    /// 	 : LOCAL_ID  OUTPUT OUT?  PLUS  LOCAL_ID  PLUS  execute_var_string??
    /// 	 | STRING  PLUS  LOCAL_ID  PLUS  execute_var_string??
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteVarString : AstRule
    {
        
        public AstExecuteVarString(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExecuteVarString(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExecuteVarString(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteVarString(this);
        }
    }
    
    /// <summary>
    /// security_statement
    /// 	 : execute_clause  SEMI?
    /// 	 | GRANT  ALL  PRIVILEGES? grant_permission  LR_BRACKET  column_name_list  RR_BRACKET?  ON  class_type_for_grant  DOUBLE_COLON?  ?  TO  to_principal_rincipal_ids  WITH  GRANT  OPTION?  AS  ?  SEMI?
    /// 	 | REVERT  LR_BRACKET  WITH  COOKIE  EQUAL  LOCAL_ID  RR_BRACKET?  SEMI?
    /// 	 | open_key
    /// 	 | close_key
    /// 	 | create_key
    /// 	 | create_certificate
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSecurityStatement : AstRule
    {
        
        public AstSecurityStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSecurityStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSecurityStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSecurityStatement(this);
        }
    }
    
    /// <summary>
    /// to_principal_rincipal_ids
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstToPrincipalRincipalIds : AstRule
    {
        
        public AstToPrincipalRincipalIds(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstToPrincipalRincipalIds(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstToPrincipalRincipalIds(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitToPrincipalRincipalIds(this);
        }
    }
    
    /// <summary>
    /// existing_keys
    /// 	 : ASSEMBLY  assembly_name
    /// 	 | EXECUTABLE?  FILE  EQUAL    WITH  PRIVATE  KEY  LR_BRACKET  private_key_options  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExistingKeys : AstRule
    {
        
        public AstExistingKeys(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExistingKeys(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExistingKeys(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExistingKeys(this);
        }
    }
    
    /// <summary>
    /// private_key_options
    /// 	 : FILE BINARY  EQUAL    COMMA  DECRYPTION ENCRYPTION  BY  PASSWORD  EQUAL  ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPrivateKeyOptions : AstRule
    {
        
        public AstPrivateKeyOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstPrivateKeyOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstPrivateKeyOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrivateKeyOptions(this);
        }
    }
    
    /// <summary>
    /// generate_new_keys
    /// 	 : ENCRYPTION  BY  PASSWORD  EQUAL  ?  WITH  SUBJECT  EQUAL    COMMA  date_options*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGenerateNewKeys : AstRule
    {
        
        public AstGenerateNewKeys(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstGenerateNewKeys(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstGenerateNewKeys(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGenerateNewKeys(this);
        }
    }
    
    /// <summary>
    /// date_options
    /// 	 : START_DATE EXPIRY_DATE  EQUAL  STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDateOptions : AstRule
    {
        
        public AstDateOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDateOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDateOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDateOptions(this);
        }
    }
    
    /// <summary>
    /// open_key
    /// 	 : OPEN  SYMMETRIC  KEY  symmetric_key_name  DECRYPTION  BY  decryption_mechanism
    /// 	 | OPEN  MASTER  KEY  DECRYPTION  BY  PASSWORD  EQUAL  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOpenKey : AstRule
    {
        
        public AstOpenKey(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstOpenKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstOpenKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenKey(this);
        }
    }
    
    /// <summary>
    /// close_key
    /// 	 : CLOSE  SYMMETRIC  KEY  symmetric_key_name
    /// 	 | CLOSE  ALL  SYMMETRIC  KEYS
    /// 	 | CLOSE  MASTER  KEY
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCloseKey : AstRule
    {
        
        public AstCloseKey(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCloseKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCloseKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCloseKey(this);
        }
    }
    
    /// <summary>
    /// create_key
    /// 	 : CREATE  MASTER  KEY  ENCRYPTION  BY  PASSWORD  EQUAL  
    /// 	 | CREATE  SYMMETRIC  KEY  symmetric_key_name  AUTHORIZATION  user_name?  FROM  PROVIDER  provider_name?  WITH  key_options ENCRYPTION  BY  encryption_mechanism  COMMA?+
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateKey : AstRule
    {
        
        public AstCreateKey(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateKey(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateKey(this);
        }
    }
    
    /// <summary>
    /// key_options
    /// 	 : KEY_SOURCE  EQUAL  
    /// 	 | ALGORITHM  EQUAL  algorithm
    /// 	 | IDENTITY_VALUE  EQUAL  
    /// 	 | PROVIDER_KEY_NAME  EQUAL  
    /// 	 | CREATION_DISPOSITION  EQUAL  CREATE_NEW OPEN_EXISTING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstKeyOptions : AstRule
    {
        
        public AstKeyOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstKeyOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstKeyOptions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKeyOptions(this);
        }
    }
    
    /// <summary>
    /// encryption_mechanism
    /// 	 : CERTIFICATE  certificate_name
    /// 	 | ASYMMETRIC  KEY  asym_key_name
    /// 	 | SYMMETRIC  KEY  symmetric_key_name
    /// 	 | PASSWORD  EQUAL  STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEncryptionMechanism : AstRule
    {
        
        public AstEncryptionMechanism(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstEncryptionMechanism(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstEncryptionMechanism(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEncryptionMechanism(this);
        }
    }
    
    /// <summary>
    /// decryption_mechanism
    /// 	 : CERTIFICATE  certificate_name  WITH  PASSWORD  EQUAL  STRING?
    /// 	 | ASYMMETRIC  KEY  asym_key_name  WITH  PASSWORD  EQUAL  STRING?
    /// 	 | SYMMETRIC  KEY  symmetric_key_name
    /// 	 | PASSWORD  EQUAL  STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDecryptionMechanism : AstRule
    {
        
        public AstDecryptionMechanism(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDecryptionMechanism(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDecryptionMechanism(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecryptionMechanism(this);
        }
    }
    
    /// <summary>
    /// grant_permission
    /// 	 : ADMINISTER  BULK  OPERATIONS DATABASE  BULK  OPERATIONS
    /// 	 | ALTER  ANY  APPLICATION  ROLE ASSEMBLY ASYMMETRIC  KEY AVAILABILITY  GROUP CERTIFICATE COLUMN  ENCRYPTION  KEY MASTER  KEY CONNECTION CONTRACT CREDENTIAL DATABASE  AUDIT DDL  TRIGGER EVENT  NOTIFICATION SESSION SCOPED  CONFIGURATION? DATASPACE ENDPOINT EVENT  NOTIFICATION SESSION EXTERNAL  DATA  SOURCE FILE  FORMAT LIBRARY FULLTEXT  CATALOG LINKED  SERVER LOGIN MASK MESSAGE  TYPE REMOTE  SERVICE  BINDING ROLE ROUTE SCHEMA SECURITY  POLICY SERVER  AUDIT ROLE SERVICE SYMMETRIC  KEY USER RESOURCES SERVER  STATE SETTINGS TRACE?
    /// 	 | AUTHENTICATE  SERVER?
    /// 	 | BACKUP  DATABASE LOG
    /// 	 | CHECKPOINT
    /// 	 | CONNECT  ANY  DATABASE REPLICATION SQL?
    /// 	 | CONTROL  SERVER?
    /// 	 | CREATE  AGGREGATE ANY  DATABASE ASSEMBLY ASYMMETRIC  KEY AVAILABILITY  GROUP CERTIFICATE CONTRACT DATABASE  DDL  EVENT  NOTIFICATION? DDL  EVENT  NOTIFICATION DEFAULT ENDPOINT EXTERNAL  LIBRARY FULLTEXT  CATALOG FUNCTION MESSAGE  TYPE PROCEDURE QUEUE REMOTE  SERVICE  BINDING ROLE ROUTE RULE SCHEMA SEQUENCE SERVER  ROLE SERVICE SYMMETRIC  KEY SYNONYM TABLE TRACE  EVENT  NOTIFICATION TYPE VIEW XML  SCHEMA  COLLECTION
    /// 	 | DELETE
    /// 	 | EXECUTE  ANY  EXTERNAL  SCRIPT?
    /// 	 | EXTERNAL  ACCESS  ASSEMBLY
    /// 	 | IMPERSONATE  ANY  LOGIN?
    /// 	 | INSERT
    /// 	 | KILL  DATABASE  CONNECTION
    /// 	 | RECEIVE
    /// 	 | REFERENCES
    /// 	 | SELECT  ALL  USER  SECURABLES?
    /// 	 | SEND
    /// 	 | SHOWPLAN
    /// 	 | SHUTDOWN
    /// 	 | SUBSCRIBE  QUERY  NOTIFICATIONS
    /// 	 | TAKE  OWNERSHIP
    /// 	 | UNMASK
    /// 	 | UNSAFE  ASSEMBLY
    /// 	 | UPDATE
    /// 	 | VIEW  ANY  DATABASE DEFINITION COLUMN  ENCRYPTION MASTER  KEY  DEFINITION CHANGE  TRACKING DATABASE  STATE DEFINITION SERVER  STATE
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGrantPermission : AstRule
    {
        
        public AstGrantPermission(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstGrantPermission(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstGrantPermission(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGrantPermission(this);
        }
    }
    
    /// <summary>
    /// set_statement
    /// 	 : SET  LOCAL_ID  DOT  ?  EQUAL  expression  SEMI?
    /// 	 | SET  LOCAL_ID  assignment_operator  expression  SEMI?
    /// 	 | SET  LOCAL_ID  EQUAL  CURSOR  declare_set_cursor_common  FOR  READ  ONLY UPDATE  OF  column_name_list??  SEMI?
    /// 	 | set_special
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSetStatement : AstRule
    {
        
        public AstSetStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSetStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSetStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetStatement(this);
        }
    }
    
    /// <summary>
    /// transaction_statement
    /// 	 : BEGIN  DISTRIBUTED  TRAN TRANSACTION  id_ LOCAL_ID?  SEMI?
    /// 	 | BEGIN  TRAN TRANSACTION  id_ LOCAL_ID  WITH  MARK  STRING??  SEMI?
    /// 	 | COMMIT  TRAN TRANSACTION  id_ LOCAL_ID  WITH  LR_BRACKET  DELAYED_DURABILITY  EQUAL  OFF ON  RR_BRACKET??  SEMI?
    /// 	 | COMMIT  WORK?  SEMI?
    /// 	 | COMMIT  id_
    /// 	 | ROLLBACK  id_
    /// 	 | ROLLBACK  TRAN TRANSACTION  id_ LOCAL_ID?  SEMI?
    /// 	 | ROLLBACK  WORK?  SEMI?
    /// 	 | SAVE  TRAN TRANSACTION  id_ LOCAL_ID?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTransactionStatement : AstRule
    {
        
        public AstTransactionStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTransactionStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTransactionStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTransactionStatement(this);
        }
    }
    
    /// <summary>
    /// go_statement
    /// 	 : GO  ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGoStatement : AstRule
    {
        
        public AstGoStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstGoStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstGoStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGoStatement(this);
        }
    }
    
    /// <summary>
    /// setuser_statement
    /// 	 : SETUSER  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSetuserStatement : AstRule
    {
        
        public AstSetuserStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSetuserStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSetuserStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetuserStatement(this);
        }
    }
    
    /// <summary>
    /// reconfigure_statement
    /// 	 : RECONFIGURE  WITH  OVERRIDE?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstReconfigureStatement : AstRule
    {
        
        public AstReconfigureStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstReconfigureStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstReconfigureStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReconfigureStatement(this);
        }
    }
    
    /// <summary>
    /// shutdown_statement
    /// 	 : SHUTDOWN  WITH  NOWAIT?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstShutdownStatement : AstRule
    {
        
        public AstShutdownStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstShutdownStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstShutdownStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitShutdownStatement(this);
        }
    }
    
    /// <summary>
    /// checkpoint_statement
    /// 	 : CHECKPOINT  ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCheckpointStatement : AstRule
    {
        
        public AstCheckpointStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCheckpointStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCheckpointStatement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCheckpointStatement(this);
        }
    }
    
    /// <summary>
    /// dbcc_special
    /// 	 : DBCC  SHRINKLOG  LR_BRACKET  SIZE  EQUAL  constant_expression id_ DEFAULT  RR_BRACKET?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDbccSpecial : AstRule
    {
        
        public AstDbccSpecial(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDbccSpecial(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDbccSpecial(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccSpecial(this);
        }
    }
    
    /// <summary>
    /// dbcc_clause
    /// 	 : DBCC    LR_BRACKET  expression_list  RR_BRACKET?  WITH  dbcc_options?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDbccClause : AstRule
    {
        
        public AstDbccClause(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDbccClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDbccClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccClause(this);
        }
    }
    
    /// <summary>
    /// dbcc_command
    /// 	 : simple_id
    /// 	 | keyword
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDbccCommand : AstRule
    {
        
        public AstDbccCommand(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDbccCommand(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDbccCommand(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccCommand(this);
        }
    }
    
    /// <summary>
    /// execute_clause
    /// 	 : EXECUTE  AS  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExecuteClause : AstRule
    {
        
        public AstExecuteClause(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExecuteClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExecuteClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteClause(this);
        }
    }
    
    /// <summary>
    /// table_type_indices
    /// 	 : PRIMARY  KEY INDEX  id_  CLUSTERED NONCLUSTERED? UNIQUE  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// 	 | CHECK  LR_BRACKET  search_condition  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableTypeIndices : AstRule
    {
        
        public AstTableTypeIndices(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableTypeIndices(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableTypeIndices(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableTypeIndices(this);
        }
    }
    
    /// <summary>
    /// xml_schema_collection
    /// 	 : ID  DOT  ID
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstXmlSchemaCollection : AstRule
    {
        
        public AstXmlSchemaCollection(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstXmlSchemaCollection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstXmlSchemaCollection(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlSchemaCollection(this);
        }
    }
    
    /// <summary>
    /// column_def_table_constraint
    /// 	 : column_definition
    /// 	 | materialized_column_definition
    /// 	 | table_constraint
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnDefTableConstraint : AstRule
    {
        
        public AstColumnDefTableConstraint(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstColumnDefTableConstraint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstColumnDefTableConstraint(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDefTableConstraint(this);
        }
    }
    
    /// <summary>
    /// column_definition_element
    /// 	 : FILESTREAM
    /// 	 | COLLATE  collation_name
    /// 	 | SPARSE
    /// 	 | MASKED  WITH  LR_BRACKET  FUNCTION  EQUAL    RR_BRACKET
    /// 	 | CONSTRAINT  constraint_name?  DEFAULT  
    /// 	 | IDENTITY  LR_BRACKET    COMMA    RR_BRACKET?
    /// 	 | NOT  FOR  REPLICATION
    /// 	 | GENERATED  ALWAYS  AS  ROW TRANSACTION_ID SEQUENCE_NUMBER  START END  HIDDEN_KEYWORD?
    /// 	 | ROWGUIDCOL
    /// 	 | ENCRYPTED  WITH  LR_BRACKET  COLUMN_ENCRYPTION_KEY  EQUAL    COMMA  ENCRYPTION_TYPE  EQUAL  DETERMINISTIC RANDOMIZED  COMMA  ALGORITHM  EQUAL    RR_BRACKET
    /// 	 | column_constraint
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnDefinitionElement : AstRule
    {
        
        public AstColumnDefinitionElement(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstColumnDefinitionElement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstColumnDefinitionElement(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDefinitionElement(this);
        }
    }
    
    /// <summary>
    /// column_constraint
    /// 	 : CONSTRAINT  constraint_name?  null_notnull PRIMARY  KEY UNIQUE  clustered?  primary_key_options FOREIGN  KEY?  foreign_key_options check_constraint
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnConstraint : AstRule
    {
        
        public AstColumnConstraint(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstColumnConstraint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstColumnConstraint(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnConstraint(this);
        }
    }
    
    /// <summary>
    /// on_partition_or_filegroup
    /// 	 : ON  partition_scheme_name  LR_BRACKET  partition_column_name  RR_BRACKET file_group_name DEFAULT_DOUBLE_QUOTE
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOnPartitionOrFilegroup : AstRule
    {
        
        public AstOnPartitionOrFilegroup(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstOnPartitionOrFilegroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstOnPartitionOrFilegroup(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnPartitionOrFilegroup(this);
        }
    }
    
    /// <summary>
    /// table_constraint
    /// 	 : CONSTRAINT  constraint_name?  PRIMARY  KEY UNIQUE  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET  primary_key_options FOREIGN  KEY  LR_BRACKET    RR_BRACKET  foreign_key_options CONNECTION  LR_BRACKET  connection_node  COMMA  connection_node*  RR_BRACKET DEFAULT  LR_BRACKET?  STRING PLUS function_call DECIMAL+ NEXT  VALUE  FOR  full_table_name  RR_BRACKET?  FOR  id_ check_constraint
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableConstraint : AstRule
    {
        
        public AstTableConstraint(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableConstraint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableConstraint(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableConstraint(this);
        }
    }
    
    /// <summary>
    /// connection_node
    /// 	 :   TO  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstConnectionNode : AstRule
    {
        
        public AstConnectionNode(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstConnectionNode(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstConnectionNode(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConnectionNode(this);
        }
    }
    
    /// <summary>
    /// on_delete
    /// 	 : ON  DELETE  NO  ACTION CASCADE SET  NULL_ SET  DEFAULT
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOnDelete : AstRule
    {
        
        public AstOnDelete(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstOnDelete(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstOnDelete(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnDelete(this);
        }
    }
    
    /// <summary>
    /// on_update
    /// 	 : ON  UPDATE  NO  ACTION CASCADE SET  NULL_ SET  DEFAULT
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOnUpdate : AstRule
    {
        
        public AstOnUpdate(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstOnUpdate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstOnUpdate(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnUpdate(this);
        }
    }
    
    /// <summary>
    /// alter_table_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  DECIMAL
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  
    /// 	 | DATA_COMPRESSION  EQUAL  NONE ROW PAGE COLUMNSTORE COLUMNSTORE_ARCHIVE  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// 	 | distribution
    /// 	 | ONLINE  EQUAL  ON  LR_BRACKET  low_priority_lock_wait  RR_BRACKET? OFF
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | MAX_DURATION  EQUAL    MINUTES?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAlterTableIndexOption : AstRule
    {
        
        public AstAlterTableIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAlterTableIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAlterTableIndexOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterTableIndexOption(this);
        }
    }
    
    /// <summary>
    /// declare_set_cursor_common_partial
    /// 	 : local_global
    /// 	 | FORWARD_ONLY SCROLL
    /// 	 | STATIC KEYSET DYNAMIC FAST_FORWARD
    /// 	 | READ_ONLY SCROLL_LOCKS OPTIMISTIC
    /// 	 | TYPE_WARNING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDeclareSetCursorCommonPartial : AstRule
    {
        
        public AstDeclareSetCursorCommonPartial(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDeclareSetCursorCommonPartial(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDeclareSetCursorCommonPartial(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareSetCursorCommonPartial(this);
        }
    }
    
    /// <summary>
    /// local_ids
    /// 	 : LOCAL_ID  COMMA  LOCAL_ID*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstLocalIds : AstRule
    {
        
        public AstLocalIds(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstLocalIds(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstLocalIds(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLocalIds(this);
        }
    }
    
    /// <summary>
    /// set_special
    /// 	 : SET  id_  id_ constant_LOCAL_ID on_off  SEMI?
    /// 	 | SET  STATISTICS  IO TIME XML PROFILE  on_off  SEMI?
    /// 	 | SET  ROWCOUNT  LOCAL_ID DECIMAL  SEMI?
    /// 	 | SET  TEXTSIZE  DECIMAL  SEMI?
    /// 	 | SET  TRANSACTION  ISOLATION  LEVEL  READ  UNCOMMITTED READ  COMMITTED REPEATABLE  READ SNAPSHOT SERIALIZABLE DECIMAL  SEMI?
    /// 	 | SET  IDENTITY_INSERT  full_table_name  on_off  SEMI?
    /// 	 | SET  special_list  COMMA  special_list*  on_off
    /// 	 | SET  modify_method
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSetSpecial : AstRule
    {
        
        public AstSetSpecial(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSetSpecial(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSetSpecial(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetSpecial(this);
        }
    }
    
    /// <summary>
    /// constant_LOCAL_ID
    /// 	 : constant
    /// 	 | LOCAL_ID
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstConstantLOCALID : AstRule
    {
        
        public AstConstantLOCALID(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstConstantLOCALID(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstConstantLOCALID(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConstantLOCALID(this);
        }
    }
    
    /// <summary>
    /// expression
    /// 	 : primitive_expression
    /// 	 | function_call
    /// 	 | expression  DOT  value_call query_call exist_call modify_call
    /// 	 | expression  DOT  hierarchyid_call
    /// 	 | expression  COLLATE  id_
    /// 	 | case_expression
    /// 	 | full_column_name
    /// 	 | bracket_expression
    /// 	 | unary_operator_expression
    /// 	 | expression    expression
    /// 	 | expression    expression
    /// 	 | expression  time_zone
    /// 	 | over_clause
    /// 	 | DOLLAR_ACTION
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExpression : AstRule
    {
        
        public AstExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpression(this);
        }
    }
    
    /// <summary>
    /// primitive_expression
    /// 	 : DEFAULT
    /// 	 | NULL_
    /// 	 | LOCAL_ID
    /// 	 | constant
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPrimitiveExpression : AstRule
    {
        
        public AstPrimitiveExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstPrimitiveExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstPrimitiveExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrimitiveExpression(this);
        }
    }
    
    /// <summary>
    /// case_expression
    /// 	 : CASE    switch_section+  ELSE  ?  END
    /// 	 | CASE  switch_search_condition_section+  ELSE  ?  END
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCaseExpression : AstRule
    {
        
        public AstCaseExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCaseExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCaseExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCaseExpression(this);
        }
    }
    
    /// <summary>
    /// unary_operator_expression
    /// 	 : BIT_NOT  expression
    /// 	 |   expression
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUnaryOperatorExpression : AstRule
    {
        
        public AstUnaryOperatorExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstUnaryOperatorExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstUnaryOperatorExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnaryOperatorExpression(this);
        }
    }
    
    /// <summary>
    /// bracket_expression
    /// 	 : LR_BRACKET  expression  RR_BRACKET
    /// 	 | LR_BRACKET  subquery  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBracketExpression : AstRule
    {
        
        public AstBracketExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstBracketExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstBracketExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBracketExpression(this);
        }
    }
    
    /// <summary>
    /// constant_expression
    /// 	 : NULL_
    /// 	 | constant
    /// 	 | function_call
    /// 	 | LOCAL_ID
    /// 	 | LR_BRACKET  constant_expression  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstConstantExpression : AstRule
    {
        
        public AstConstantExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstConstantExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstConstantExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConstantExpression(this);
        }
    }
    
    /// <summary>
    /// with_expression
    /// 	 : WITH    COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWithExpression : AstRule
    {
        
        public AstWithExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstWithExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstWithExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWithExpression(this);
        }
    }
    
    /// <summary>
    /// common_table_expression
    /// 	 :   LR_BRACKET    RR_BRACKET?  AS  LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCommonTableExpression : AstRule
    {
        
        public AstCommonTableExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCommonTableExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCommonTableExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCommonTableExpression(this);
        }
    }
    
    /// <summary>
    /// update_elem
    /// 	 : LOCAL_ID  EQUAL  full_column_name  EQUAL assignment_operator  expression
    /// 	 | full_column_name LOCAL_ID  EQUAL assignment_operator  expression
    /// 	 | udt_column_name  DOT  method_name  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUpdateElem : AstRule
    {
        
        public AstUpdateElem(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstUpdateElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstUpdateElem(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateElem(this);
        }
    }
    
    /// <summary>
    /// update_elem_merge
    /// 	 : full_column_name LOCAL_ID  EQUAL assignment_operator  expression
    /// 	 | udt_column_name  DOT  method_name  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUpdateElemMerge : AstRule
    {
        
        public AstUpdateElemMerge(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstUpdateElemMerge(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstUpdateElemMerge(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateElemMerge(this);
        }
    }
    
    /// <summary>
    /// search_condition
    /// 	 : NOT*  predicate LR_BRACKET  search_condition  RR_BRACKET
    /// 	 | search_condition  AND  search_condition
    /// 	 | search_condition  OR  search_condition
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSearchCondition : AstRule
    {
        
        public AstSearchCondition(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSearchCondition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSearchCondition(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSearchCondition(this);
        }
    }
    
    /// <summary>
    /// predicate
    /// 	 : EXISTS  LR_BRACKET  subquery  RR_BRACKET
    /// 	 | freetext_predicate
    /// 	 | expression  comparison_operator  expression
    /// 	 | expression  MULT_ASSIGN  expression
    /// 	 | expression  comparison_operator  ALL SOME ANY  LR_BRACKET  subquery  RR_BRACKET
    /// 	 | expression  NOT*  BETWEEN  expression  AND  expression
    /// 	 | expression  NOT*  IN  LR_BRACKET  subquery expression_list  RR_BRACKET
    /// 	 | expression  NOT*  LIKE  expression  ESCAPE  expression?
    /// 	 | expression  IS  null_notnull
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstPredicate : AstRule
    {
        
        public AstPredicate(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstPredicate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstPredicate(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicate(this);
        }
    }
    
    /// <summary>
    /// query_expression
    /// 	 : query_specification LR_BRACKET  query_expression  RR_BRACKET  UNION  ALL?  query_expression?
    /// 	 | query_specification  select_order_by_clause?  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueryExpression : AstRule
    {
        
        public AstQueryExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstQueryExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstQueryExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueryExpression(this);
        }
    }
    
    /// <summary>
    /// sql_union
    /// 	 : UNION  ALL? EXCEPT INTERSECT   LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSqlUnion : AstRule
    {
        
        public AstSqlUnion(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSqlUnion(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSqlUnion(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlUnion(this);
        }
    }
    
    /// <summary>
    /// query_specification
    /// 	 : SELECT        INTO  ?  FROM  ?  WHERE  ?  GROUP  BY    groupBys_list GROUPING  SETS  LR_BRACKET  groupSet_list  RR_BRACKET?  HAVING  ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQuerySpecification : AstRule
    {
        
        public AstQuerySpecification(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstQuerySpecification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstQuerySpecification(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQuerySpecification(this);
        }
    }
    
    /// <summary>
    /// groupSet_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGroupSetList : AstRule
    {
        
        public AstGroupSetList(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstGroupSetList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstGroupSetList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupSetList(this);
        }
    }
    
    /// <summary>
    /// groupBys_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGroupBysList : AstRule
    {
        
        public AstGroupBysList(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstGroupBysList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstGroupBysList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupBysList(this);
        }
    }
    
    /// <summary>
    /// top_clause
    /// 	 : TOP  top_percent top_count  WITH  TIES?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTopClause : AstRule
    {
        
        public AstTopClause(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTopClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTopClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTopClause(this);
        }
    }
    
    /// <summary>
    /// top_percent
    /// 	 :   PERCENT
    /// 	 | LR_BRACKET    RR_BRACKET  PERCENT
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTopPercent : AstRule
    {
        
        public AstTopPercent(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTopPercent(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTopPercent(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTopPercent(this);
        }
    }
    
    /// <summary>
    /// top_count
    /// 	 : 
    /// 	 | LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTopCount : AstRule
    {
        
        public AstTopCount(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTopCount(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTopCount(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTopCount(this);
        }
    }
    
    /// <summary>
    /// order_by_clause
    /// 	 : ORDER  BY    COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOrderByClause : AstRule
    {
        
        public AstOrderByClause(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstOrderByClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstOrderByClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOrderByClause(this);
        }
    }
    
    /// <summary>
    /// for_clause
    /// 	 : FOR  BROWSE
    /// 	 | FOR  XML  RAW  LR_BRACKET  STRING  RR_BRACKET? AUTO  xml_common_directives*  COMMA  XMLDATA XMLSCHEMA  LR_BRACKET  STRING  RR_BRACKET??  COMMA  ELEMENTS  XSINIL ABSENT??
    /// 	 | FOR  XML  EXPLICIT  xml_common_directives*  COMMA  XMLDATA?
    /// 	 | FOR  XML  PATH  LR_BRACKET  STRING  RR_BRACKET?  xml_common_directives*  COMMA  ELEMENTS  XSINIL ABSENT??
    /// 	 | FOR  JSON  AUTO PATH  COMMA  ROOT  LR_BRACKET  STRING  RR_BRACKET INCLUDE_NULL_VALUES WITHOUT_ARRAY_WRAPPER*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstForClause : AstRule
    {
        
        public AstForClause(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstForClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstForClause(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitForClause(this);
        }
    }
    
    /// <summary>
    /// xml_common_directives
    /// 	 : COMMA  BINARY_KEYWORD  BASE64 TYPE ROOT  LR_BRACKET  STRING  RR_BRACKET?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstXmlCommonDirectives : AstRule
    {
        
        public AstXmlCommonDirectives(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstXmlCommonDirectives(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstXmlCommonDirectives(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlCommonDirectives(this);
        }
    }
    
    /// <summary>
    /// order_by_expression
    /// 	 :    ?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOrderByExpression : AstRule
    {
        
        public AstOrderByExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstOrderByExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstOrderByExpression(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOrderByExpression(this);
        }
    }
    
    /// <summary>
    /// grouping_sets_item
    /// 	 : grouping_sets_list
    /// 	 | LR_BRACKET  grouping_sets_list?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGroupingSetsItem : AstRule
    {
        
        public AstGroupingSetsItem(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstGroupingSetsItem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstGroupingSetsItem(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupingSetsItem(this);
        }
    }
    
    /// <summary>
    /// grouping_sets_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGroupingSetsList : AstRule
    {
        
        public AstGroupingSetsList(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstGroupingSetsList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstGroupingSetsList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupingSetsList(this);
        }
    }
    
    /// <summary>
    /// option
    /// 	 : FAST  
    /// 	 | HASH ORDER  GROUP
    /// 	 | MERGE HASH CONCAT  UNION
    /// 	 | LOOP MERGE HASH  JOIN
    /// 	 | EXPAND  VIEWS
    /// 	 | FORCE  ORDER
    /// 	 | IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX
    /// 	 | KEEP  PLAN
    /// 	 | KEEPFIXED  PLAN
    /// 	 | MAXDOP  
    /// 	 | MAXRECURSION  
    /// 	 | OPTIMIZE  FOR  LR_BRACKET  optimize_for_args  RR_BRACKET
    /// 	 | OPTIMIZE  FOR  UNKNOWN
    /// 	 | PARAMETERIZATION  SIMPLE FORCED
    /// 	 | RECOMPILE
    /// 	 | ROBUST  PLAN
    /// 	 | USE  PLAN  STRING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOption : AstRule
    {
        
        public AstOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOption(this);
        }
    }
    
    /// <summary>
    /// optimize_for_arg
    /// 	 : LOCAL_ID  UNKNOWN EQUAL  constant NULL_
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstOptimizeForArg : AstRule
    {
        
        public AstOptimizeForArg(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstOptimizeForArg(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstOptimizeForArg(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOptimizeForArg(this);
        }
    }
    
    /// <summary>
    /// select_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSelectList : AstRule
    {
        
        public AstSelectList(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSelectList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSelectList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectList(this);
        }
    }
    
    /// <summary>
    /// udt_method_arguments
    /// 	 : LR_BRACKET    COMMA  *  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUdtMethodArguments : AstRule
    {
        
        public AstUdtMethodArguments(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstUdtMethodArguments(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstUdtMethodArguments(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUdtMethodArguments(this);
        }
    }
    
    /// <summary>
    /// updated_asterisk
    /// 	 : INSERTED DELETED  DOT  STAR
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUpdatedAsterisk : AstRule
    {
        
        public AstUpdatedAsterisk(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstUpdatedAsterisk(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstUpdatedAsterisk(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdatedAsterisk(this);
        }
    }
    
    /// <summary>
    /// column_elem_target
    /// 	 : full_column_name
    /// 	 | DOLLAR  IDENTITY
    /// 	 | DOLLAR  ROWGUID
    /// 	 | NULL_
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnElemTarget : AstRule
    {
        
        public AstColumnElemTarget(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstColumnElemTarget(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstColumnElemTarget(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnElemTarget(this);
        }
    }
    
    /// <summary>
    /// udt_elem
    /// 	 : udt_column_name  DOT  non_static_attr  udt_method_arguments  as_column_alias?
    /// 	 | udt_column_name  DOUBLE_COLON  static_attr  udt_method_arguments?  as_column_alias?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstUdtElem : AstRule
    {
        
        public AstUdtElem(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstUdtElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstUdtElem(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUdtElem(this);
        }
    }
    
    /// <summary>
    /// expression_elem
    /// 	 :     
    /// 	 |   as_column_alias?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExpressionElem : AstRule
    {
        
        public AstExpressionElem(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExpressionElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExpressionElem(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressionElem(this);
        }
    }
    
    /// <summary>
    /// table_sources
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableSources : AstRule
    {
        
        public AstTableSources(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableSources(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableSources(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableSources(this);
        }
    }
    
    /// <summary>
    /// table_source
    /// 	 : table_source_item_joined
    /// 	 | LR_BRACKET  table_source  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableSource : AstRule
    {
        
        public AstTableSource(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableSource(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableSource(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableSource(this);
        }
    }
    
    /// <summary>
    /// table_source_item_joined
    /// 	 : table_source_item  
    /// 	 | LR_BRACKET  table_source_item_joined  RR_BRACKET  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableSourceItemJoined : AstRule
    {
        
        public AstTableSourceItemJoined(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableSourceItemJoined(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableSourceItemJoined(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableSourceItemJoined(this);
        }
    }
    
    /// <summary>
    /// table_source_item
    /// 	 : complete_table_name  deprecated_table_hint  as_table_alias
    /// 	 | complete_table_name  as_table_alias?  with_table_hints deprecated_table_hint sybase_legacy_hints?
    /// 	 | rowset_function  as_table_alias?
    /// 	 | LR_BRACKET  derived_table  RR_BRACKET  as_table_alias  column_alias_list??
    /// 	 | change_table  as_table_alias?
    /// 	 | nodes_method  as_table_alias  column_alias_list??
    /// 	 | function_call  as_table_alias  column_alias_list??
    /// 	 |   as_table_alias?
    /// 	 |   DOT    as_table_alias  column_alias_list??
    /// 	 | open_xml
    /// 	 | open_json
    /// 	 | DOUBLE_COLON    as_table_alias?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableSourceItem : AstRule
    {
        
        public AstTableSourceItem(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableSourceItem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableSourceItem(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableSourceItem(this);
        }
    }
    
    /// <summary>
    /// json_declaration
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstJsonDeclaration : AstRule
    {
        
        public AstJsonDeclaration(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstJsonDeclaration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstJsonDeclaration(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitJsonDeclaration(this);
        }
    }
    
    /// <summary>
    /// schema_declaration
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSchemaDeclaration : AstRule
    {
        
        public AstSchemaDeclaration(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSchemaDeclaration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSchemaDeclaration(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaDeclaration(this);
        }
    }
    
    /// <summary>
    /// change_table_changes
    /// 	 : CHANGETABLE  LR_BRACKET  CHANGES    COMMA    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstChangeTableChanges : AstRule
    {
        
        public AstChangeTableChanges(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstChangeTableChanges(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstChangeTableChanges(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTableChanges(this);
        }
    }
    
    /// <summary>
    /// change_table_version
    /// 	 : CHANGETABLE  LR_BRACKET  VERSION    COMMA    COMMA    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstChangeTableVersion : AstRule
    {
        
        public AstChangeTableVersion(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstChangeTableVersion(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstChangeTableVersion(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTableVersion(this);
        }
    }
    
    /// <summary>
    /// join_on
    /// 	 :      ?  JOIN    ON  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstJoinOn : AstRule
    {
        
        public AstJoinOn(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstJoinOn(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstJoinOn(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitJoinOn(this);
        }
    }
    
    /// <summary>
    /// apply_
    /// 	 :   APPLY  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstApply : AstRule
    {
        
        public AstApply(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstApply(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstApply(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitApply(this);
        }
    }
    
    /// <summary>
    /// full_column_name_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFullColumnNameList : AstRule
    {
        
        public AstFullColumnNameList(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstFullColumnNameList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstFullColumnNameList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullColumnNameList(this);
        }
    }
    
    /// <summary>
    /// rowset_function
    /// 	 : OPENROWSET  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | OPENROWSET  LR_BRACKET  BULK    COMMA  bulk_options id_  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRowsetFunction : AstRule
    {
        
        public AstRowsetFunction(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstRowsetFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstRowsetFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRowsetFunction(this);
        }
    }
    
    /// <summary>
    /// derived_table
    /// 	 : subquery
    /// 	 | LR_BRACKET  subquery  UNION  ALL  subquery*  RR_BRACKET
    /// 	 | table_value_constructor
    /// 	 | LR_BRACKET  table_value_constructor  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDerivedTable : AstRule
    {
        
        public AstDerivedTable(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDerivedTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDerivedTable(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDerivedTable(this);
        }
    }
    
    /// <summary>
    /// function_call
    /// 	 : RANKING_WINDOWED_FUNCranking_windowed_function
    /// 	 | AGGREGATE_WINDOWED_FUNCaggregate_windowed_function
    /// 	 | ANALYTIC_WINDOWED_FUNCanalytic_windowed_function
    /// 	 | BUILT_IN_FUNCbuilt_in_functions
    /// 	 | SCALAR_FUNCTIONscalar_function_name  LR_BRACKET  expression_list?  RR_BRACKET
    /// 	 | FREE_TEXTfreetext_function
    /// 	 | PARTITION_FUNCpartition_function
    /// 	 | HIERARCHYID_METHODhierarchyid_static_method
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFunctionCall : AstRule
    {
        
        public AstFunctionCall(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstFunctionCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstFunctionCall(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFunctionCall(this);
        }
    }
    
    /// <summary>
    /// freetext_function
    /// 	 : CONTAINSTABLE FREETEXTTABLE  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  COMMA  expression?  RR_BRACKET
    /// 	 | SEMANTICSIMILARITYTABLE SEMANTICKEYPHRASETABLE  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression  RR_BRACKET
    /// 	 | SEMANTICSIMILARITYDETAILSTABLE  LR_BRACKET  full_table_name  COMMA  full_column_name  COMMA  expression  COMMA  full_column_name  COMMA  expression  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFreetextFunction : AstRule
    {
        
        public AstFreetextFunction(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstFreetextFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstFreetextFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFreetextFunction(this);
        }
    }
    
    /// <summary>
    /// freetext_predicate
    /// 	 : CONTAINS  LR_BRACKET  full_column_name full_column_names STAR PROPERTY  LR_BRACKET  full_column_name  COMMA  expression  RR_BRACKET  COMMA  expression  RR_BRACKET
    /// 	 | FREETEXT  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFreetextPredicate : AstRule
    {
        
        public AstFreetextPredicate(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstFreetextPredicate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstFreetextPredicate(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFreetextPredicate(this);
        }
    }
    
    /// <summary>
    /// built_in_functions
    /// 	 : APP_NAMEAPP_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | APPLOCK_MODEAPPLOCK_MODE  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | APPLOCK_TESTAPPLOCK_TEST  LR_BRACKET    COMMA    COMMA    COMMA    RR_BRACKET
    /// 	 | ASSEMBLYPROPERTYASSEMBLYPROPERTY  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | COL_LENGTHCOL_LENGTH  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | COL_NAMECOL_NAME  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | COLUMNPROPERTYCOLUMNPROPERTY  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | DATABASEPROPERTYEXDATABASEPROPERTYEX  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | DB_IDDB_ID  LR_BRACKET    RR_BRACKET
    /// 	 | DB_NAMEDB_NAME  LR_BRACKET    RR_BRACKET
    /// 	 | FILE_IDFILE_ID  LR_BRACKET    RR_BRACKET
    /// 	 | FILE_IDEXFILE_IDEX  LR_BRACKET    RR_BRACKET
    /// 	 | FILE_NAMEFILE_NAME  LR_BRACKET    RR_BRACKET
    /// 	 | FILEGROUP_IDFILEGROUP_ID  LR_BRACKET    RR_BRACKET
    /// 	 | FILEGROUP_NAMEFILEGROUP_NAME  LR_BRACKET    RR_BRACKET
    /// 	 | FILEGROUPPROPERTYFILEGROUPPROPERTY  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | FILEPROPERTYFILEPROPERTY  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | FILEPROPERTYEXFILEPROPERTYEX  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | FULLTEXTCATALOGPROPERTYFULLTEXTCATALOGPROPERTY  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | FULLTEXTSERVICEPROPERTYFULLTEXTSERVICEPROPERTY  LR_BRACKET    RR_BRACKET
    /// 	 | INDEX_COLINDEX_COL  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | INDEXKEY_PROPERTYINDEXKEY_PROPERTY  LR_BRACKET    COMMA    COMMA    COMMA    RR_BRACKET
    /// 	 | INDEXPROPERTYINDEXPROPERTY  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | NEXT_VALUE_FORNEXT  VALUE  FOR    OVER  LR_BRACKET  order_by_clause  RR_BRACKET?
    /// 	 | OBJECT_DEFINITIONOBJECT_DEFINITION  LR_BRACKET    RR_BRACKET
    /// 	 | OBJECT_IDOBJECT_ID  LR_BRACKET    COMMA  ?  RR_BRACKET
    /// 	 | OBJECT_NAMEOBJECT_NAME  LR_BRACKET    COMMA  ?  RR_BRACKET
    /// 	 | OBJECT_SCHEMA_NAMEOBJECT_SCHEMA_NAME  LR_BRACKET    COMMA  ?  RR_BRACKET
    /// 	 | OBJECTPROPERTYOBJECTPROPERTY  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | OBJECTPROPERTYEXOBJECTPROPERTYEX  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | ORIGINAL_DB_NAMEORIGINAL_DB_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | PARSENAMEPARSENAME  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | SCHEMA_IDSCHEMA_ID  LR_BRACKET    RR_BRACKET
    /// 	 | SCHEMA_NAMESCHEMA_NAME  LR_BRACKET    RR_BRACKET
    /// 	 | SCOPE_IDENTITYSCOPE_IDENTITY  LR_BRACKET  RR_BRACKET
    /// 	 | SERVERPROPERTYSERVERPROPERTY  LR_BRACKET    RR_BRACKET
    /// 	 | STATS_DATESTATS_DATE  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | TYPE_IDTYPE_ID  LR_BRACKET    RR_BRACKET
    /// 	 | TYPE_NAMETYPE_NAME  LR_BRACKET    RR_BRACKET
    /// 	 | TYPEPROPERTYTYPEPROPERTY  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | ASCIIASCII  LR_BRACKET    RR_BRACKET
    /// 	 | CHARCHAR  LR_BRACKET    RR_BRACKET
    /// 	 | CHARINDEXCHARINDEX  LR_BRACKET    COMMA    COMMA  ?  RR_BRACKET
    /// 	 | CONCATCONCAT  LR_BRACKET    COMMA    COMMA  *  RR_BRACKET
    /// 	 | CONCAT_WSCONCAT_WS  LR_BRACKET    COMMA    COMMA    COMMA  *  RR_BRACKET
    /// 	 | DIFFERENCEDIFFERENCE  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | FORMATFORMAT  LR_BRACKET    COMMA    COMMA  ?  RR_BRACKET
    /// 	 | LEFTLEFT  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | LENLEN  LR_BRACKET    RR_BRACKET
    /// 	 | LOWERLOWER  LR_BRACKET    RR_BRACKET
    /// 	 | LTRIMLTRIM  LR_BRACKET    RR_BRACKET
    /// 	 | NCHARNCHAR  LR_BRACKET    RR_BRACKET
    /// 	 | PATINDEXPATINDEX  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | QUOTENAMEQUOTENAME  LR_BRACKET    COMMA  ?  RR_BRACKET
    /// 	 | REPLACEREPLACE  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | REPLICATEREPLICATE  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | REVERSEREVERSE  LR_BRACKET    RR_BRACKET
    /// 	 | RIGHTRIGHT  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | RTRIMRTRIM  LR_BRACKET    RR_BRACKET
    /// 	 | SOUNDEXSOUNDEX  LR_BRACKET    RR_BRACKET
    /// 	 | SPACESPACE_KEYWORD  LR_BRACKET    RR_BRACKET
    /// 	 | STRSTR  LR_BRACKET    COMMA    COMMA  ??  RR_BRACKET
    /// 	 | STRINGAGGSTRING_AGG  LR_BRACKET    COMMA    RR_BRACKET  WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET?
    /// 	 | STRING_ESCAPESTRING_ESCAPE  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | STUFFSTUFF  LR_BRACKET    COMMA    COMMA    COMMA    RR_BRACKET
    /// 	 | SUBSTRINGSUBSTRING  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | TRANSLATETRANSLATE  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | TRIMTRIM  LR_BRACKET    FROM?    RR_BRACKET
    /// 	 | UNICODEUNICODE  LR_BRACKET    RR_BRACKET
    /// 	 | UPPERUPPER  LR_BRACKET    RR_BRACKET
    /// 	 | BINARY_CHECKSUMBINARY_CHECKSUM  LR_BRACKET   expressions  RR_BRACKET
    /// 	 | CHECKSUMCHECKSUM  LR_BRACKET   expressions  RR_BRACKET
    /// 	 | COMPRESSCOMPRESS  LR_BRACKET    RR_BRACKET
    /// 	 | CONNECTIONPROPERTYCONNECTIONPROPERTY  LR_BRACKET    RR_BRACKET
    /// 	 | CONTEXT_INFOCONTEXT_INFO  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_REQUEST_IDCURRENT_REQUEST_ID  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_TRANSACTION_IDCURRENT_TRANSACTION_ID  LR_BRACKET  RR_BRACKET
    /// 	 | DECOMPRESSDECOMPRESS  LR_BRACKET    RR_BRACKET
    /// 	 | ERROR_LINEERROR_LINE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_MESSAGEERROR_MESSAGE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_NUMBERERROR_NUMBER  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_PROCEDUREERROR_PROCEDURE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_SEVERITYERROR_SEVERITY  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_STATEERROR_STATE  LR_BRACKET  RR_BRACKET
    /// 	 | FORMATMESSAGEFORMATMESSAGE  LR_BRACKET      COMMA  expressions  RR_BRACKET
    /// 	 | GET_FILESTREAM_TRANSACTION_CONTEXTGET_FILESTREAM_TRANSACTION_CONTEXT  LR_BRACKET  RR_BRACKET
    /// 	 | GETANSINULLGETANSINULL  LR_BRACKET  ?  RR_BRACKET
    /// 	 | HOST_IDHOST_ID  LR_BRACKET  RR_BRACKET
    /// 	 | HOST_NAMEHOST_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | ISNULLISNULL  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | ISNUMERICISNUMERIC  LR_BRACKET  expression  RR_BRACKET
    /// 	 | MIN_ACTIVE_ROWVERSIONMIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET
    /// 	 | NEWIDNEWID  LR_BRACKET  RR_BRACKET
    /// 	 | NEWSEQUENTIALIDNEWSEQUENTIALID  LR_BRACKET  RR_BRACKET
    /// 	 | ROWCOUNT_BIGROWCOUNT_BIG  LR_BRACKET  RR_BRACKET
    /// 	 | SESSION_CONTEXTSESSION_CONTEXT  LR_BRACKET    RR_BRACKET
    /// 	 | XACT_STATEXACT_STATE  LR_BRACKET  RR_BRACKET
    /// 	 | CASTCAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET
    /// 	 | TRY_CASTTRY_CAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET
    /// 	 | CONVERTCONVERT  LR_BRACKET    COMMA  expression2  RR_BRACKET
    /// 	 | COALESCECOALESCE  LR_BRACKET  expression_list  RR_BRACKET
    /// 	 | CURRENT_DATECURRENT_DATE  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_TIMESTAMPCURRENT_TIMESTAMP
    /// 	 | CURRENT_USERCURRENT_USER
    /// 	 | DATEADDDATEADD  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | DATEDIFFDATEDIFF  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// 	 | DATENAMEDATENAME  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | DATEPARTDATEPART  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | GETDATEGETDATE  LR_BRACKET  RR_BRACKET
    /// 	 | GETUTCDATEGETUTCDATE  LR_BRACKET  RR_BRACKET
    /// 	 | IDENTITYIDENTITY  LR_BRACKET  data_type  COMMA  ?  COMMA  ?  RR_BRACKET
    /// 	 | MIN_ACTIVE_ROWVERSIONMIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET
    /// 	 | NULLIFNULLIF  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | SESSION_USERSESSION_USER
    /// 	 | SYSTEM_USERSYSTEM_USER
    /// 	 | USERUSER
    /// 	 | PARSEPARSE  LR_BRACKET    AS  data_type  USING  ?  RR_BRACKET
    /// 	 | XML_DATA_TYPE_FUNCxml_data_type_methods
    /// 	 | IIFIIF  LR_BRACKET    COMMA    COMMA    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstBuiltInFunctions : AstRule
    {
        
        public AstBuiltInFunctions(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstBuiltInFunctions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstBuiltInFunctions(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBuiltInFunctions(this);
        }
    }
    
    /// <summary>
    /// value_method
    /// 	 :     LR_BRACKET  RR_BRACKET  LR_BRACKET  subquery  RR_BRACKET  DOT  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstValueMethod : AstRule
    {
        
        public AstValueMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstValueMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstValueMethod(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitValueMethod(this);
        }
    }
    
    /// <summary>
    /// value_call
    /// 	 : VALUE  LR_BRACKET    COMMA    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstValueCall : AstRule
    {
        
        public AstValueCall(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstValueCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstValueCall(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitValueCall(this);
        }
    }
    
    /// <summary>
    /// query_method
    /// 	 :   LR_BRACKET  subquery  RR_BRACKET  DOT  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueryMethod : AstRule
    {
        
        public AstQueryMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstQueryMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstQueryMethod(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueryMethod(this);
        }
    }
    
    /// <summary>
    /// query_call
    /// 	 : QUERY  LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueryCall : AstRule
    {
        
        public AstQueryCall(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstQueryCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstQueryCall(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueryCall(this);
        }
    }
    
    /// <summary>
    /// exist_method
    /// 	 :   LR_BRACKET  subquery  RR_BRACKET  DOT  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExistMethod : AstRule
    {
        
        public AstExistMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExistMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExistMethod(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExistMethod(this);
        }
    }
    
    /// <summary>
    /// exist_call
    /// 	 : EXIST  LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExistCall : AstRule
    {
        
        public AstExistCall(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExistCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExistCall(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExistCall(this);
        }
    }
    
    /// <summary>
    /// modify_method
    /// 	 :   LR_BRACKET  subquery  RR_BRACKET  DOT  
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstModifyMethod : AstRule
    {
        
        public AstModifyMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstModifyMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstModifyMethod(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModifyMethod(this);
        }
    }
    
    /// <summary>
    /// modify_call
    /// 	 : MODIFY  LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstModifyCall : AstRule
    {
        
        public AstModifyCall(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstModifyCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstModifyCall(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModifyCall(this);
        }
    }
    
    /// <summary>
    /// hierarchyid_call
    /// 	 : GETANCESTOR  LR_BRACKET    RR_BRACKET
    /// 	 | GETDESCENDANT  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | GETLEVEL  LR_BRACKET  RR_BRACKET
    /// 	 | ISDESCENDANTOF  LR_BRACKET    RR_BRACKET
    /// 	 | GETREPARENTEDVALUE  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | TOSTRING  LR_BRACKET  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstHierarchyidCall : AstRule
    {
        
        public AstHierarchyidCall(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstHierarchyidCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstHierarchyidCall(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitHierarchyidCall(this);
        }
    }
    
    /// <summary>
    /// hierarchyid_static_method
    /// 	 : HIERARCHYID  DOUBLE_COLON  GETROOT  LR_BRACKET  RR_BRACKET PARSE  LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstHierarchyidStaticMethod : AstRule
    {
        
        public AstHierarchyidStaticMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstHierarchyidStaticMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstHierarchyidStaticMethod(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitHierarchyidStaticMethod(this);
        }
    }
    
    /// <summary>
    /// nodes_method
    /// 	 :   LR_BRACKET  subquery  RR_BRACKET  DOT  NODES  LR_BRACKET    RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstNodesMethod : AstRule
    {
        
        public AstNodesMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstNodesMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstNodesMethod(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNodesMethod(this);
        }
    }
    
    /// <summary>
    /// with_table_hints
    /// 	 : WITH  LR_BRACKET    COMMA?  *  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWithTableHints : AstRule
    {
        
        public AstWithTableHints(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstWithTableHints(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstWithTableHints(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWithTableHints(this);
        }
    }
    
    /// <summary>
    /// table_hint
    /// 	 : NOEXPAND
    /// 	 | INDEX  LR_BRACKET  index_values  RR_BRACKET EQUAL  LR_BRACKET  index_value  RR_BRACKET EQUAL  index_value
    /// 	 | FORCESEEK  LR_BRACKET  index_value  LR_BRACKET  column_name_list  RR_BRACKET  RR_BRACKET?
    /// 	 | FORCESCAN
    /// 	 | HOLDLOCK
    /// 	 | NOLOCK
    /// 	 | NOWAIT
    /// 	 | PAGLOCK
    /// 	 | READCOMMITTED
    /// 	 | READCOMMITTEDLOCK
    /// 	 | READPAST
    /// 	 | READUNCOMMITTED
    /// 	 | REPEATABLEREAD
    /// 	 | ROWLOCK
    /// 	 | SERIALIZABLE
    /// 	 | SNAPSHOT
    /// 	 | SPATIAL_WINDOW_MAX_CELLS  EQUAL  DECIMAL
    /// 	 | TABLOCK
    /// 	 | TABLOCKX
    /// 	 | UPDLOCK
    /// 	 | XLOCK
    /// 	 | KEEPIDENTITY
    /// 	 | KEEPDEFAULTS
    /// 	 | IGNORE_CONSTRAINTS
    /// 	 | IGNORE_TRIGGERS
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableHint : AstRule
    {
        
        public AstTableHint(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableHint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableHint(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableHint(this);
        }
    }
    
    /// <summary>
    /// index_value
    /// 	 : id_
    /// 	 | DECIMAL
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstIndexValue : AstRule
    {
        
        public AstIndexValue(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstIndexValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstIndexValue(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIndexValue(this);
        }
    }
    
    /// <summary>
    /// column_alias_list
    /// 	 : LR_BRACKET    COMMA  *  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnAliasList : AstRule
    {
        
        public AstColumnAliasList(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstColumnAliasList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstColumnAliasList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnAliasList(this);
        }
    }
    
    /// <summary>
    /// table_value_constructor
    /// 	 : VALUES  LR_BRACKET    RR_BRACKET  COMMA  LR_BRACKET    RR_BRACKET*
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstTableValueConstructor : AstRule
    {
        
        public AstTableValueConstructor(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstTableValueConstructor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstTableValueConstructor(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableValueConstructor(this);
        }
    }
    
    /// <summary>
    /// expression_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstExpressionList : AstRule
    {
        
        public AstExpressionList(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstExpressionList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstExpressionList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressionList(this);
        }
    }
    
    /// <summary>
    /// ranking_windowed_function
    /// 	 : RANK DENSE_RANK ROW_NUMBER  LR_BRACKET  RR_BRACKET  over_clause
    /// 	 | NTILE  LR_BRACKET  expression  RR_BRACKET  over_clause
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstRankingWindowedFunction : AstRule
    {
        
        public AstRankingWindowedFunction(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstRankingWindowedFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstRankingWindowedFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRankingWindowedFunction(this);
        }
    }
    
    /// <summary>
    /// aggregate_windowed_function
    /// 	 :   LR_BRACKET  all_distinct_expression  RR_BRACKET  over_clause?
    /// 	 |   LR_BRACKET  STAR all_distinct_expression  RR_BRACKET  over_clause?
    /// 	 | CHECKSUM_AGG  LR_BRACKET  all_distinct_expression  RR_BRACKET
    /// 	 | GROUPING  LR_BRACKET  expression  RR_BRACKET
    /// 	 | GROUPING_ID  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAggregateWindowedFunction : AstRule
    {
        
        public AstAggregateWindowedFunction(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAggregateWindowedFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAggregateWindowedFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAggregateWindowedFunction(this);
        }
    }
    
    /// <summary>
    /// analytic_windowed_function
    /// 	 : FIRST_VALUE LAST_VALUE  LR_BRACKET  expression  RR_BRACKET  over_clause
    /// 	 | LAG LEAD  LR_BRACKET  expression  COMMA  expression2?  RR_BRACKET  over_clause
    /// 	 | CUME_DIST PERCENT_RANK  LR_BRACKET  RR_BRACKET  OVER  LR_BRACKET  PARTITION  BY  expression_list?  order_by_clause  RR_BRACKET
    /// 	 | PERCENTILE_CONT PERCENTILE_DISC  LR_BRACKET  expression  RR_BRACKET  WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET  OVER  LR_BRACKET  PARTITION  BY  expression_list?  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAnalyticWindowedFunction : AstRule
    {
        
        public AstAnalyticWindowedFunction(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAnalyticWindowedFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAnalyticWindowedFunction(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAnalyticWindowedFunction(this);
        }
    }
    
    /// <summary>
    /// window_frame_extent
    /// 	 : window_frame_preceding
    /// 	 | BETWEEN  window_frame_bound  AND  window_frame_bound
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWindowFrameExtent : AstRule
    {
        
        public AstWindowFrameExtent(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstWindowFrameExtent(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstWindowFrameExtent(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWindowFrameExtent(this);
        }
    }
    
    /// <summary>
    /// window_frame_preceding
    /// 	 : UNBOUNDED  PRECEDING
    /// 	 | DECIMAL  PRECEDING
    /// 	 | CURRENT  ROW
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWindowFramePreceding : AstRule
    {
        
        public AstWindowFramePreceding(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstWindowFramePreceding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstWindowFramePreceding(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWindowFramePreceding(this);
        }
    }
    
    /// <summary>
    /// window_frame_following
    /// 	 : UNBOUNDED  FOLLOWING
    /// 	 | DECIMAL  FOLLOWING
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstWindowFrameFollowing : AstRule
    {
        
        public AstWindowFrameFollowing(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstWindowFrameFollowing(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstWindowFrameFollowing(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWindowFrameFollowing(this);
        }
    }
    
    /// <summary>
    /// create_database_option
    /// 	 : FILESTREAM  database_filestream_options
    /// 	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
    /// 	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
    /// 	 | NESTED_TRIGGERS  EQUAL  on_off
    /// 	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
    /// 	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  DECIMAL
    /// 	 | DB_CHAINING  on_off
    /// 	 | TRUSTWORTHY  on_off
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstCreateDatabaseOption : AstRule
    {
        
        public AstCreateDatabaseOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstCreateDatabaseOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstCreateDatabaseOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateDatabaseOption(this);
        }
    }
    
    /// <summary>
    /// database_filestream_option
    /// 	 : LR_BRACKET  NON_TRANSACTED_ACCESS  EQUAL  OFF READ_ONLY FULL DIRECTORY_NAME  EQUAL  STRING  RR_BRACKET
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDatabaseFilestreamOption : AstRule
    {
        
        public AstDatabaseFilestreamOption(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDatabaseFilestreamOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDatabaseFilestreamOption(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseFilestreamOption(this);
        }
    }
    
    /// <summary>
    /// entity_name_for_azure_dw
    /// 	 : schema_name
    /// 	 | schema_name  DOT  object_name
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEntityNameForAzureDw : AstRule
    {
        
        public AstEntityNameForAzureDw(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstEntityNameForAzureDw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstEntityNameForAzureDw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEntityNameForAzureDw(this);
        }
    }
    
    /// <summary>
    /// entity_name_for_parallel_dw
    /// 	 : 
    /// 	 | schema_name  DOT  object_name
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEntityNameForParallelDw : AstRule
    {
        
        public AstEntityNameForParallelDw(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstEntityNameForParallelDw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstEntityNameForParallelDw(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEntityNameForParallelDw(this);
        }
    }
    
    /// <summary>
    /// insert_column_name_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstInsertColumnNameList : AstRule
    {
        
        public AstInsertColumnNameList(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstInsertColumnNameList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstInsertColumnNameList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitInsertColumnNameList(this);
        }
    }
    
    /// <summary>
    /// column_name_list
    /// 	 :   COMMA  *
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstColumnNameList : AstRule
    {
        
        public AstColumnNameList(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstColumnNameList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstColumnNameList(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnNameList(this);
        }
    }
    
    /// <summary>
    /// null_notnull
    /// 	 : NOT?  NULL_
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstNullNotnull : AstRule
    {
        
        public AstNullNotnull(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstNullNotnull(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstNullNotnull(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNullNotnull(this);
        }
    }
    
    /// <summary>
    /// null_or_default
    /// 	 : null_notnull DEFAULT  constant_expression  COLLATE  id_?  WITH  VALUES?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstNullOrDefault : AstRule
    {
        
        public AstNullOrDefault(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstNullOrDefault(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstNullOrDefault(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNullOrDefault(this);
        }
    }
    
    /// <summary>
    /// scalar_function_name
    /// 	 : func_proc_name_server_database_schema
    /// 	 | RIGHT
    /// 	 | LEFT
    /// 	 | BINARY_CHECKSUM
    /// 	 | CHECKSUM
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstScalarFunctionName : AstRule
    {
        
        public AstScalarFunctionName(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstScalarFunctionName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstScalarFunctionName(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitScalarFunctionName(this);
        }
    }
    
    /// <summary>
    /// contract_name
    /// 	 : id_ expression
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstContractName : AstRule
    {
        
        public AstContractName(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstContractName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstContractName(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContractName(this);
        }
    }
    
    /// <summary>
    /// service_name
    /// 	 : id_ expression
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstServiceName : AstRule
    {
        
        public AstServiceName(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstServiceName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstServiceName(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServiceName(this);
        }
    }
    
    /// <summary>
    /// end_conversation
    /// 	 : END  CONVERSATION    SEMI?  WITH  ERROR  EQUAL    DESCRIPTION  EQUAL  ?  CLEANUP??
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstEndConversation : AstRule
    {
        
        public AstEndConversation(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstEndConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstEndConversation(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEndConversation(this);
        }
    }
    
    /// <summary>
    /// get_conversation
    /// 	 : GET  CONVERSATION  GROUP    FROM    SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstGetConversation : AstRule
    {
        
        public AstGetConversation(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstGetConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstGetConversation(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGetConversation(this);
        }
    }
    
    /// <summary>
    /// queue_id
    /// 	 : database_name  DOT  schema_name  DOT  queue_name
    /// 	 | id_
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstQueueId : AstRule
    {
        
        public AstQueueId(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstQueueId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstQueueId(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueId(this);
        }
    }
    
    /// <summary>
    /// send_conversation
    /// 	 : SEND  ON  CONVERSATION    MESSAGE  TYPE    LR_BRACKET    RR_BRACKET?  SEMI?
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSendConversation : AstRule
    {
        
        public AstSendConversation(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSendConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSendConversation(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSendConversation(this);
        }
    }
    
    /// <summary>
    /// data_type
    /// 	 :   LR_BRACKET  MAX  RR_BRACKET
    /// 	 | ext_type  LR_BRACKET    COMMA    RR_BRACKET
    /// 	 | ext_type  LR_BRACKET    RR_BRACKET
    /// 	 | ext_type  IDENTITY  LR_BRACKET    COMMA    RR_BRACKET?
    /// 	 |   PRECISION?
    /// 	 | unscaled_type
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDataType : AstRule
    {
        
        public AstDataType(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDataType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDataType(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDataType(this);
        }
    }
    
    /// <summary>
    /// default_value
    /// 	 : NULL_
    /// 	 | DEFAULT
    /// 	 | constant
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstDefaultValue : AstRule
    {
        
        public AstDefaultValue(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstDefaultValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstDefaultValue(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDefaultValue(this);
        }
    }
    
    /// <summary>
    /// constant
    /// 	 : STRING
    /// 	 | BINARY
    /// 	 | sign?  DECIMAL
    /// 	 | sign?  REAL FLOAT
    /// 	 | sign?    DECIMAL FLOAT
    /// 	 | parameter
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstConstant : AstRule
    {
        
        public AstConstant(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstConstant(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstConstant(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConstant(this);
        }
    }
    
    /// <summary>
    /// sign
    /// 	 : PLUS
    /// 	 | MINUS
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstSign : AstRule
    {
        
        public AstSign(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstSign(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstSign(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSign(this);
        }
    }
    
    /// <summary>
    /// comparison_operator
    /// 	 : EQUAL
    /// 	 | GREATER
    /// 	 | LESS
    /// 	 | LESS  EQUAL
    /// 	 | GREATER  EQUAL
    /// 	 | LESS  GREATER
    /// 	 | EXCLAMATION  EQUAL
    /// 	 | EXCLAMATION  GREATER
    /// 	 | EXCLAMATION  LESS
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstComparisonOperator : AstRule
    {
        
        public AstComparisonOperator(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstComparisonOperator(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstComparisonOperator(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitComparisonOperator(this);
        }
    }
    
    /// <summary>
    /// assignment_operator
    /// 	 : PLUS_ASSIGN
    /// 	 | MINUS_ASSIGN
    /// 	 | MULT_ASSIGN
    /// 	 | DIV_ASSIGN
    /// 	 | MOD_ASSIGN
    /// 	 | AND_ASSIGN
    /// 	 | XOR_ASSIGN
    /// 	 | OR_ASSIGN
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstAssignmentOperator : AstRule
    {
        
        public AstAssignmentOperator(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstAssignmentOperator(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstAssignmentOperator(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAssignmentOperator(this);
        }
    }
    
    /// <summary>
    /// file_size_unity
    /// 	 : KB
    /// 	 | MB
    /// 	 | GB
    /// 	 | TB
    /// 	 | MODULE
    /// </summary>
    /// <remarks>
    /// Strategy : _
    /// </remarks>
    public partial class AstFileSizeUnity : AstRule
    {
        
        public AstFileSizeUnity(ITerminalNode t, List<AstRoot> list) : 
                base(t, list)
        {
        }
        
        public AstFileSizeUnity(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx, list)
        {
        }
        
        public AstFileSizeUnity(Position p, List<AstRoot> list) : 
                base(p, list)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileSizeUnity(this);
        }
    }
}
