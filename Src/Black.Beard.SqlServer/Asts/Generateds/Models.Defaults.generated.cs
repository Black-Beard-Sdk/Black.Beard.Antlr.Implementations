#nullable disable
// Generate by Models.Defaults : samedi 8 avril 2023
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Asts.TSql
{
    using System;
    using Bb.Parsers;
    using Antlr4.Runtime;
    using Antlr4.Runtime.Tree;
    
    
    /// <summary>
    /// t_root
    /// 	 : batchs  EOF
    /// 	 | execute_body_batch  go_statements  EOF
    /// </summary>
    public partial class AstTRoot : AstRule
    {
        
        protected static string _rule = "t_root\r\n\t : batchs  EOF\r\n\t | execute_body_batch  go_statements  EOF";
        
        internal AstTRoot(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTRoot(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTRoot(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTRoot(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTRoot(this);
        }
        
        /// <summary>
        /// batchs : 
        ///    batchs 
        /// </summary>
        public static AstTRoot TRoot(AstBatchs batchs)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTRoot result = new AstTRoot(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    execute_body_batch go_statements 
        /// </summary>
        public static AstTRoot TRoot(AstExecuteBodyBatch executeBodyBatch, AstGoStatements goStatements)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTRoot result = new AstTRoot(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// batch
    /// 	 : go_statement
    /// 	 | execute_body_batch
    /// 	 | sql_clauses
    /// 	 | batch_level_statement
    /// </summary>
    public partial class AstBatch : AstRule
    {
        
        protected static string _rule = "batch\r\n\t : go_statement\r\n\t | execute_body_batch\r\n\t | sql_clauses\r\n\t | batch_level" +
            "_statement";
        
        internal AstBatch(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstBatch(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBatch(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBatch(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBatch(this);
        }
        
        /// <summary>
        /// go_statement : 
        ///    go_statement 
        /// </summary>
        public static AstBatch Batch(AstGoStatement goStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBatch result = new AstBatch(arguments);
            return result;
        }
        
        /// <summary>
        /// execute_body_batch : 
        ///    execute_body_batch 
        /// </summary>
        public static AstBatch Batch(AstExecuteBodyBatch executeBodyBatch)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBatch result = new AstBatch(arguments);
            return result;
        }
        
        /// <summary>
        /// sql_clauses : 
        ///    sql_clauses 
        /// </summary>
        public static AstBatch Batch(AstSqlClauses sqlClauses)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBatch result = new AstBatch(arguments);
            return result;
        }
        
        /// <summary>
        /// batch_level_statement : 
        ///    batch_level_statement 
        /// </summary>
        public static AstBatch Batch(AstBatchLevelStatement batchLevelStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBatch result = new AstBatch(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// sql_clause
    /// 	 : dml_clause
    /// 	 | cfl_statement
    /// 	 | another_statement
    /// 	 | ddl_clause
    /// 	 | dbcc_special
    /// 	 | dbcc_clause
    /// 	 | backup_statement
    /// </summary>
    public partial class AstSqlClause : AstRule
    {
        
        protected static string _rule = "sql_clause\r\n\t : dml_clause\r\n\t | cfl_statement\r\n\t | another_statement\r\n\t | ddl_cla" +
            "use\r\n\t | dbcc_special\r\n\t | dbcc_clause\r\n\t | backup_statement";
        
        internal AstSqlClause(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSqlClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSqlClause(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSqlClause(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlClause(this);
        }
        
        /// <summary>
        /// dml_clause : 
        ///    dml_clause 
        /// </summary>
        public static AstSqlClause SqlClause(AstDmlClause dmlClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSqlClause result = new AstSqlClause(arguments);
            return result;
        }
        
        /// <summary>
        /// cfl_statement : 
        ///    cfl_statement 
        /// </summary>
        public static AstSqlClause SqlClause(AstCflStatement cflStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSqlClause result = new AstSqlClause(arguments);
            return result;
        }
        
        /// <summary>
        /// another_statement : 
        ///    another_statement 
        /// </summary>
        public static AstSqlClause SqlClause(AstAnotherStatement anotherStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSqlClause result = new AstSqlClause(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    ddl_clause 
        /// </summary>
        public static AstSqlClause SqlClause(AstDdlClause ddlClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSqlClause result = new AstSqlClause(arguments);
            return result;
        }
        
        /// <summary>
        /// dbcc_special : 
        ///    dbcc_special 
        /// </summary>
        public static AstSqlClause SqlClause(AstDbccSpecial dbccSpecial)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSqlClause result = new AstSqlClause(arguments);
            return result;
        }
        
        /// <summary>
        /// dbcc_clause : 
        ///    dbcc_clause 
        /// </summary>
        public static AstSqlClause SqlClause(AstDbccClause dbccClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSqlClause result = new AstSqlClause(arguments);
            return result;
        }
        
        /// <summary>
        /// backup_statement : 
        ///    backup_statement 
        /// </summary>
        public static AstSqlClause SqlClause(AstBackupStatement backupStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSqlClause result = new AstSqlClause(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// break_statement
    /// 	 : BREAK  SEMI?
    /// </summary>
    public partial class AstBreakStatement : AstCflStatement
    {
        
        protected static string _rule = "break_statement\r\n\t : BREAK  SEMI?";
        
        internal AstBreakStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstBreakStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBreakStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBreakStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBreakStatement(this);
        }
    }
    
    /// <summary>
    /// continue_statement
    /// 	 : CONTINUE  SEMI?
    /// </summary>
    public partial class AstContinueStatement : AstCflStatement
    {
        
        protected static string _rule = "continue_statement\r\n\t : CONTINUE  SEMI?";
        
        internal AstContinueStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstContinueStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstContinueStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstContinueStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContinueStatement(this);
        }
    }
    
    /// <summary>
    /// goto_statement
    /// 	 : GOTO  code_location_id  SEMI?
    /// 	 | code_location_id  COLON  SEMI?
    /// </summary>
    public partial class AstGotoStatement : AstCflStatement
    {
        
        protected static string _rule = "goto_statement\r\n\t : GOTO  code_location_id  SEMI?\r\n\t | code_location_id  COLON  S" +
            "EMI?";
        
        internal AstGotoStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstGotoStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstGotoStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstGotoStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGotoStatement(this);
        }
        
        /// <summary>
        ///  : 
        ///    GOTO code_location_id SEMI? 
        /// </summary>
        public static AstGotoStatement GotoStatement(AstCodeLocationId codeLocationId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstGotoStatement result = new AstGotoStatement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// throw_statement
    /// 	 : THROW  (throw_error_number  COMMA  throw_message  COMMA  throw_state)?  SEMI?
    /// </summary>
    public partial class AstThrowStatement : AstCflStatement
    {
        
        protected static string _rule = "throw_statement\r\n\t : THROW  (throw_error_number  COMMA  throw_message  COMMA  thr" +
            "ow_state)?  SEMI?";
        
        internal AstThrowStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstThrowStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstThrowStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstThrowStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowStatement(this);
        }
        
        /// <summary>
        ///  : 
        ///    THROW throw_error_number , throw_message , throw_state SEMI? 
        /// </summary>
        public static AstThrowStatement ThrowStatement(AstThrowErrorNumber throwErrorNumber, AstThrowMessage throwMessage, AstThrowState throwState)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstThrowStatement result = new AstThrowStatement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// try_catch_statement
    /// 	 : BEGIN  TRY  SEMI?  try_clauses = sql_clauses  END  TRY  SEMI?  BEGIN  CATCH  SEMI?  catch_clauses = sql_clauses  END  CATCH  SEMI?
    /// </summary>
    public partial class AstTryCatchStatement : AstCflStatement
    {
        
        protected static string _rule = "try_catch_statement\r\n\t : BEGIN  TRY  SEMI?  try_clauses = sql_clauses  END  TRY  " +
            "SEMI?  BEGIN  CATCH  SEMI?  catch_clauses = sql_clauses  END  CATCH  SEMI?";
        
        internal AstTryCatchStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTryCatchStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTryCatchStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTryCatchStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTryCatchStatement(this);
        }
        
        /// <summary>
        ///  : 
        ///    BEGIN TRY SEMI? try_clauses=sql_clauses END TRY SEMI? BEGIN CATCH SEMI? catch_clauses=sql_clauses END CATCH SEMI? 
        /// </summary>
        public static AstTryCatchStatement TryCatchStatement(AstSqlClauses tryClauses, AstSqlClauses catchClauses)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTryCatchStatement result = new AstTryCatchStatement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// raiseerror_statement
    /// 	 : RAISERROR  LR_BRACKET  msg = decimal_string_local_id  COMMA  severity = constant_local_id  COMMA  state = constant_local_id  constant_local_ids?  RR_BRACKET  (WITH  log_seterror_nowait)?  SEMI?
    /// 	 | RAISERROR  decimal  formatstring = string_local_id_double_quote_id  decimal_string_locals?
    /// </summary>
    public partial class AstRaiseerrorStatement : AstCflStatement
    {
        
        protected static string _rule = @"raiseerror_statement
	 : RAISERROR  LR_BRACKET  msg = decimal_string_local_id  COMMA  severity = constant_local_id  COMMA  state = constant_local_id  constant_local_ids?  RR_BRACKET  (WITH  log_seterror_nowait)?  SEMI?
	 | RAISERROR  decimal  formatstring = string_local_id_double_quote_id  decimal_string_locals?";
        
        internal AstRaiseerrorStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstRaiseerrorStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstRaiseerrorStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstRaiseerrorStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRaiseerrorStatement(this);
        }
        
        /// <summary>
        ///  : 
        ///    RAISERROR ( msg=decimal_string_local_id , severity=constant_local_id , state=constant_local_id constant_local_ids? ) WITH log_seterror_nowait SEMI? 
        /// </summary>
        public static AstRaiseerrorStatement RaiseerrorStatement(AstDecimalStringLocalId msg, AstConstantLocalId severity, AstConstantLocalId state, AstConstantLocalIds constantLocalIds, AstLogSeterrorNowait logSeterrorNowait)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRaiseerrorStatement result = new AstRaiseerrorStatement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    RAISERROR decimal formatstring=string_local_id_double_quote_id decimal_string_locals? 
        /// </summary>
        public static AstRaiseerrorStatement RaiseerrorStatement(AstDecimal @decimal, AstStringLocalIdDoubleQuoteId formatstring, AstDecimalStringLocals decimalStringLocals)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRaiseerrorStatement result = new AstRaiseerrorStatement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_assembly_start
    /// 	 : ALTER  ASSEMBLY
    /// </summary>
    public partial class AstAlterAssemblyStart : AstRule
    {
        
        protected static string _rule = "alter_assembly_start\r\n\t : ALTER  ASSEMBLY";
        
        internal AstAlterAssemblyStart(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterAssemblyStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterAssemblyStart(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterAssemblyStart(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyStart(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_drop_multiple_files
    /// 	 : ALL
    /// 	 | multiple_local_files
    /// </summary>
    public partial class AstAlterAssemblyDropMultipleFiles : AstRule
    {
        
        protected static string _rule = "alter_assembly_drop_multiple_files\r\n\t : ALL\r\n\t | multiple_local_files";
        
        internal AstAlterAssemblyDropMultipleFiles(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterAssemblyDropMultipleFiles(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterAssemblyDropMultipleFiles(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterAssemblyDropMultipleFiles(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyDropMultipleFiles(this);
        }
        
        /// <summary>
        /// multiple_local_files : 
        ///    multiple_local_files 
        /// </summary>
        public static AstAlterAssemblyDropMultipleFiles AlterAssemblyDropMultipleFiles(AstMultipleLocalFiles multipleLocalFiles)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAssemblyDropMultipleFiles result = new AstAlterAssemblyDropMultipleFiles(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// client_assembly_specifier
    /// 	 : network_file_share
    /// 	 | local_file
    /// 	 | stringtext
    /// </summary>
    public partial class AstClientAssemblySpecifier : AstRule
    {
        
        protected static string _rule = "client_assembly_specifier\r\n\t : network_file_share\r\n\t | local_file\r\n\t | stringtext" +
            "";
        
        internal AstClientAssemblySpecifier(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstClientAssemblySpecifier(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstClientAssemblySpecifier(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstClientAssemblySpecifier(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClientAssemblySpecifier(this);
        }
        
        /// <summary>
        /// network_file_share : 
        ///    network_file_share 
        /// </summary>
        public static AstClientAssemblySpecifier ClientAssemblySpecifier(AstNetworkFileShare networkFileShare)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstClientAssemblySpecifier result = new AstClientAssemblySpecifier(arguments);
            return result;
        }
        
        /// <summary>
        /// local_file : 
        ///    local_file 
        /// </summary>
        public static AstClientAssemblySpecifier ClientAssemblySpecifier(AstLocalFile localFile)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstClientAssemblySpecifier result = new AstClientAssemblySpecifier(arguments);
            return result;
        }
        
        /// <summary>
        /// stringtext : 
        ///    stringtext 
        /// </summary>
        public static AstClientAssemblySpecifier ClientAssemblySpecifier(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstClientAssemblySpecifier result = new AstClientAssemblySpecifier(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// assembly_option
    /// 	 : PERMISSION_SET  EQUAL  assembly_permission
    /// 	 | VISIBILITY  EQUAL  on_off
    /// 	 | UNCHECKED  DATA
    /// 	 | assembly_option  COMMA
    /// </summary>
    public partial class AstAssemblyOption : AstRule
    {
        
        protected static string _rule = "assembly_option\r\n\t : PERMISSION_SET  EQUAL  assembly_permission\r\n\t | VISIBILITY  " +
            "EQUAL  on_off\r\n\t | UNCHECKED  DATA\r\n\t | assembly_option  COMMA";
        
        internal AstAssemblyOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAssemblyOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAssemblyOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAssemblyOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAssemblyOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    PERMISSION_SET EQUAL assembly_permission 
        /// </summary>
        public static AstAssemblyOption AssemblyOption(AstAssemblyPermission assemblyPermission)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAssemblyOption result = new AstAssemblyOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    VISIBILITY EQUAL on_off 
        /// </summary>
        public static AstAssemblyOption AssemblyOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAssemblyOption result = new AstAssemblyOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    assembly_option , 
        /// </summary>
        public static AstAssemblyOption AssemblyOption(AstAssemblyOption assemblyOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAssemblyOption result = new AstAssemblyOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// file_path
    /// 	 : file_directory_path_separator  file_path
    /// 	 | id_
    /// </summary>
    public partial class AstFilePath : AstRule
    {
        
        protected static string _rule = "file_path\r\n\t : file_directory_path_separator  file_path\r\n\t | id_";
        
        internal AstFilePath(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstFilePath(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstFilePath(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstFilePath(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilePath(this);
        }
        
        /// <summary>
        ///  : 
        ///    file_directory_path_separator file_path 
        /// </summary>
        public static AstFilePath FilePath(AstFileDirectoryPathSeparator fileDirectoryPathSeparator, AstFilePath filePath)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFilePath result = new AstFilePath(arguments);
            return result;
        }
        
        /// <summary>
        /// id_ : 
        ///    id_ 
        /// </summary>
        public static AstFilePath FilePath(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFilePath result = new AstFilePath(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// multiple_local_files
    /// 	 : multiple_local_file_start  local_file  SINGLE_QUOTE  COMMA
    /// 	 | local_file
    /// </summary>
    public partial class AstMultipleLocalFiles : AstRule
    {
        
        protected static string _rule = "multiple_local_files\r\n\t : multiple_local_file_start  local_file  SINGLE_QUOTE  CO" +
            "MMA\r\n\t | local_file";
        
        internal AstMultipleLocalFiles(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstMultipleLocalFiles(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstMultipleLocalFiles(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstMultipleLocalFiles(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMultipleLocalFiles(this);
        }
        
        /// <summary>
        ///  : 
        ///    multiple_local_file_start local_file \ , 
        /// </summary>
        public static AstMultipleLocalFiles MultipleLocalFiles(AstMultipleLocalFileStart multipleLocalFileStart, AstLocalFile localFile)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstMultipleLocalFiles result = new AstMultipleLocalFiles(arguments);
            return result;
        }
        
        /// <summary>
        /// local_file : 
        ///    local_file 
        /// </summary>
        public static AstMultipleLocalFiles MultipleLocalFiles(AstLocalFile localFile)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstMultipleLocalFiles result = new AstMultipleLocalFiles(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// binary_content
    /// 	 : stringtext
    /// 	 | binary_
    /// </summary>
    public partial class AstBinaryContent : AstRule
    {
        
        protected static string _rule = "binary_content\r\n\t : stringtext\r\n\t | binary_";
        
        internal AstBinaryContent(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstBinaryContent(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBinaryContent(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBinaryContent(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBinaryContent(this);
        }
        
        /// <summary>
        /// stringtext : 
        ///    stringtext 
        /// </summary>
        public static AstBinaryContent BinaryContent(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBinaryContent result = new AstBinaryContent(arguments);
            return result;
        }
        
        /// <summary>
        /// binary_ : 
        ///    binary_ 
        /// </summary>
        public static AstBinaryContent BinaryContent(AstBinary binary)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBinaryContent result = new AstBinaryContent(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// by_password_crypt
    /// 	 : decryption_by_pwd
    /// 	 | encryption_by_pwd
    /// </summary>
    public partial class AstByPasswordCrypt : AstRule
    {
        
        protected static string _rule = "by_password_crypt\r\n\t : decryption_by_pwd\r\n\t | encryption_by_pwd";
        
        internal AstByPasswordCrypt(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstByPasswordCrypt(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstByPasswordCrypt(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstByPasswordCrypt(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitByPasswordCrypt(this);
        }
        
        /// <summary>
        /// decryption_by_pwd : 
        ///    decryption_by_pwd 
        /// </summary>
        public static AstByPasswordCrypt ByPasswordCrypt(AstDecryptionByPwd decryptionByPwd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstByPasswordCrypt result = new AstByPasswordCrypt(arguments);
            return result;
        }
        
        /// <summary>
        /// encryption_by_pwd : 
        ///    encryption_by_pwd 
        /// </summary>
        public static AstByPasswordCrypt ByPasswordCrypt(AstEncryptionByPwd encryptionByPwd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstByPasswordCrypt result = new AstByPasswordCrypt(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// encryption_by_pwd
    /// 	 : ENCRYPTION  BY  PASSWORD  EQUAL  encryption_pwd = stringtext
    /// </summary>
    public partial class AstEncryptionByPwd : AstRule
    {
        
        protected static string _rule = "encryption_by_pwd\r\n\t : ENCRYPTION  BY  PASSWORD  EQUAL  encryption_pwd = stringte" +
            "xt";
        
        internal AstEncryptionByPwd(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstEncryptionByPwd(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstEncryptionByPwd(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstEncryptionByPwd(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEncryptionByPwd(this);
        }
        
        /// <summary>
        ///  : 
        ///    ENCRYPTION BY PASSWORD EQUAL encryption_pwd=stringtext 
        /// </summary>
        public static AstEncryptionByPwd EncryptionByPwd(AstStringtext encryptionPwd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEncryptionByPwd result = new AstEncryptionByPwd(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// decryption_by_pwd
    /// 	 : DECRYPTION  BY  PASSWORD  EQUAL  encryption_pwd = stringtext
    /// </summary>
    public partial class AstDecryptionByPwd : AstRule
    {
        
        protected static string _rule = "decryption_by_pwd\r\n\t : DECRYPTION  BY  PASSWORD  EQUAL  encryption_pwd = stringte" +
            "xt";
        
        internal AstDecryptionByPwd(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDecryptionByPwd(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDecryptionByPwd(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDecryptionByPwd(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecryptionByPwd(this);
        }
        
        /// <summary>
        ///  : 
        ///    DECRYPTION BY PASSWORD EQUAL encryption_pwd=stringtext 
        /// </summary>
        public static AstDecryptionByPwd DecryptionByPwd(AstStringtext encryptionPwd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDecryptionByPwd result = new AstDecryptionByPwd(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// drop_asymmetric_key
    /// 	 : DROP  ASYMMETRIC  KEY  key_name = id_  (REMOVE  PROVIDER  KEY)?
    /// </summary>
    public partial class AstDropAsymmetricKey : AstDdlClause
    {
        
        protected static string _rule = "drop_asymmetric_key\r\n\t : DROP  ASYMMETRIC  KEY  key_name = id_  (REMOVE  PROVIDER" +
            "  KEY)?";
        
        internal AstDropAsymmetricKey(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDropAsymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropAsymmetricKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropAsymmetricKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAsymmetricKey(this);
        }
        
        /// <summary>
        ///  : 
        ///    DROP ASYMMETRIC KEY key_name=id_ REMOVE PROVIDER KEY 
        /// </summary>
        public static AstDropAsymmetricKey DropAsymmetricKey(AstId keyName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDropAsymmetricKey result = new AstDropAsymmetricKey(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// authorization_grantee
    /// 	 : principal_name = id_
    /// 	 | SCHEMA  OWNER
    /// </summary>
    public partial class AstAuthorizationGrantee : AstRule
    {
        
        protected static string _rule = "authorization_grantee\r\n\t : principal_name = id_\r\n\t | SCHEMA  OWNER";
        
        internal AstAuthorizationGrantee(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAuthorizationGrantee(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAuthorizationGrantee(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAuthorizationGrantee(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuthorizationGrantee(this);
        }
        
        /// <summary>
        /// id_ : 
        ///    principal_name=id_ 
        /// </summary>
        public static AstAuthorizationGrantee AuthorizationGrantee(AstId principalName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAuthorizationGrantee result = new AstAuthorizationGrantee(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// class_type_for_grant
    /// 	 : COLUMN  encryption_master  KEY
    /// 	 | NOTIFICATION  database_object_server
    /// 	 | object_type_for_grant
    /// </summary>
    public partial class AstClassTypeForGrant : AstRule
    {
        
        protected static string _rule = "class_type_for_grant\r\n\t : COLUMN  encryption_master  KEY\r\n\t | NOTIFICATION  datab" +
            "ase_object_server\r\n\t | object_type_for_grant";
        
        internal AstClassTypeForGrant(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstClassTypeForGrant(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstClassTypeForGrant(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstClassTypeForGrant(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassTypeForGrant(this);
        }
        
        /// <summary>
        ///  : 
        ///    COLUMN encryption_master KEY 
        /// </summary>
        public static AstClassTypeForGrant ClassTypeForGrant(AstEncryptionMaster encryptionMaster)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstClassTypeForGrant result = new AstClassTypeForGrant(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    NOTIFICATION database_object_server 
        /// </summary>
        public static AstClassTypeForGrant ClassTypeForGrant(AstDatabaseObjectServer databaseObjectServer)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstClassTypeForGrant result = new AstClassTypeForGrant(arguments);
            return result;
        }
        
        /// <summary>
        /// object_type_for_grant : 
        ///    object_type_for_grant 
        /// </summary>
        public static AstClassTypeForGrant ClassTypeForGrant(AstObjectTypeForGrant objectTypeForGrant)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstClassTypeForGrant result = new AstClassTypeForGrant(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_group_options_listener
    /// 	 : alter_availability_group_options_listener_add
    /// 	 | alter_availability_group_options_listener_modify
    /// 	 | alter_availability_group_options_listener_restart
    /// </summary>
    public partial class AstAlterAvailabilityGroupOptionsListener : AstRule
    {
        
        protected static string _rule = "alter_availability_group_options_listener\r\n\t : alter_availability_group_options_l" +
            "istener_add\r\n\t | alter_availability_group_options_listener_modify\r\n\t | alter_ava" +
            "ilability_group_options_listener_restart";
        
        internal AstAlterAvailabilityGroupOptionsListener(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListener(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListener(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListener(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupOptionsListener(this);
        }
        
        /// <summary>
        /// alter_availability_group_options_listener_add : 
        ///    alter_availability_group_options_listener_add 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListener AlterAvailabilityGroupOptionsListener(AstAlterAvailabilityGroupOptionsListenerAdd alterAvailabilityGroupOptionsListenerAdd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsListener result = new AstAlterAvailabilityGroupOptionsListener(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options_listener_modify : 
        ///    alter_availability_group_options_listener_modify 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListener AlterAvailabilityGroupOptionsListener(AstAlterAvailabilityGroupOptionsListenerModify alterAvailabilityGroupOptionsListenerModify)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsListener result = new AstAlterAvailabilityGroupOptionsListener(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options_listener_restart : 
        ///    alter_availability_group_options_listener_restart 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListener AlterAvailabilityGroupOptionsListener(AstAlterAvailabilityGroupOptionsListenerRestart alterAvailabilityGroupOptionsListenerRestart)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsListener result = new AstAlterAvailabilityGroupOptionsListener(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_group_options_listener_modify
    /// 	 : MODIFY  LISTENER  (ADD  IP  LR_BRACKET  (range_ip_v4 | ipv6)  RR_BRACKET | PORT  EQUAL  decimal)
    /// </summary>
    public partial class AstAlterAvailabilityGroupOptionsListenerModify : AstRule
    {
        
        protected static string _rule = "alter_availability_group_options_listener_modify\r\n\t : MODIFY  LISTENER  (ADD  IP " +
            " LR_BRACKET  (range_ip_v4 | ipv6)  RR_BRACKET | PORT  EQUAL  decimal)";
        
        internal AstAlterAvailabilityGroupOptionsListenerModify(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListenerModify(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListenerModify(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListenerModify(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupOptionsListenerModify(this);
        }
        
        /// <summary>
        ///  : 
        ///    MODIFY LISTENER ADD IP ( range_ip_v4 ) 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListenerModify AlterAvailabilityGroupOptionsListenerModify(AstRangeIpV4 rangeIpV4)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsListenerModify result = new AstAlterAvailabilityGroupOptionsListenerModify(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    MODIFY LISTENER ADD IP ( ipv6 ) 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListenerModify AlterAvailabilityGroupOptionsListenerModify(AstIpv6 ipv6)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsListenerModify result = new AstAlterAvailabilityGroupOptionsListenerModify(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    MODIFY LISTENER PORT EQUAL decimal 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListenerModify AlterAvailabilityGroupOptionsListenerModify(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsListenerModify result = new AstAlterAvailabilityGroupOptionsListenerModify(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_group_options_listener_add
    /// 	 : ADD  LISTENER  listener_name = stringtext  LR_BRACKET  (alter_availability_group_options_listener_dhcp | WITH  IP  LR_BRACKET  alter_availability_group_options_listener_ip)  RR_BRACKET
    /// </summary>
    public partial class AstAlterAvailabilityGroupOptionsListenerAdd : AstRule
    {
        
        protected static string _rule = "alter_availability_group_options_listener_add\r\n\t : ADD  LISTENER  listener_name =" +
            " stringtext  LR_BRACKET  (alter_availability_group_options_listener_dhcp | WITH " +
            " IP  LR_BRACKET  alter_availability_group_options_listener_ip)  RR_BRACKET";
        
        internal AstAlterAvailabilityGroupOptionsListenerAdd(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListenerAdd(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListenerAdd(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListenerAdd(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupOptionsListenerAdd(this);
        }
        
        /// <summary>
        ///  : 
        ///    ADD LISTENER listener_name=stringtext ( alter_availability_group_options_listener_dhcp ) 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListenerAdd AlterAvailabilityGroupOptionsListenerAdd(AstStringtext listenerName, AstAlterAvailabilityGroupOptionsListenerDhcp alterAvailabilityGroupOptionsListenerDhcp)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsListenerAdd result = new AstAlterAvailabilityGroupOptionsListenerAdd(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ADD LISTENER listener_name=stringtext ( WITH IP ( alter_availability_group_options_listener_ip ) 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListenerAdd AlterAvailabilityGroupOptionsListenerAdd(AstStringtext listenerName, AstAlterAvailabilityGroupOptionsListenerIp alterAvailabilityGroupOptionsListenerIp)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsListenerAdd result = new AstAlterAvailabilityGroupOptionsListenerAdd(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_group_options_listener_ip
    /// 	 : (COMMA?  LR_BRACKET  (range_ip_comma_v4 | IPV6_ADDR)  RR_BRACKET)+  (COMMA  port = PORT  EQUAL  decimal)?
    /// </summary>
    public partial class AstAlterAvailabilityGroupOptionsListenerIp : AstRule
    {
        
        protected static string _rule = "alter_availability_group_options_listener_ip\r\n\t : (COMMA?  LR_BRACKET  (range_ip_" +
            "comma_v4 | IPV6_ADDR)  RR_BRACKET)+  (COMMA  port = PORT  EQUAL  decimal)?";
        
        internal AstAlterAvailabilityGroupOptionsListenerIp(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListenerIp(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListenerIp(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListenerIp(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupOptionsListenerIp(this);
        }
        
        /// <summary>
        ///  : 
        ///    ,? ( range_ip_comma_v4 ) , port=PORT EQUAL decimal 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListenerIp AlterAvailabilityGroupOptionsListenerIp(AstRangeIpCommaV4 rangeIpCommaV4, AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsListenerIp result = new AstAlterAvailabilityGroupOptionsListenerIp(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ,? ( IPV6_ADDR ) , port=PORT EQUAL decimal 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListenerIp AlterAvailabilityGroupOptionsListenerIp(String txt, AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsListenerIp result = new AstAlterAvailabilityGroupOptionsListenerIp(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_replicat_primary
    /// 	 : ENDPOINT_URL  EQUAL  endpoint_url = stringtext
    /// 	 | availability_mode
    /// 	 | FAILOVER_MODE  EQUAL  failover = auto_manual
    /// 	 | seeding_mode
    /// 	 | backup_priority
    /// </summary>
    public partial class AstAlterAvailabilityReplicatPrimary : AstRule
    {
        
        protected static string _rule = "alter_availability_replicat_primary\r\n\t : ENDPOINT_URL  EQUAL  endpoint_url = stri" +
            "ngtext\r\n\t | availability_mode\r\n\t | FAILOVER_MODE  EQUAL  failover = auto_manual\r" +
            "\n\t | seeding_mode\r\n\t | backup_priority";
        
        internal AstAlterAvailabilityReplicatPrimary(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterAvailabilityReplicatPrimary(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityReplicatPrimary(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityReplicatPrimary(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityReplicatPrimary(this);
        }
        
        /// <summary>
        ///  : 
        ///    ENDPOINT_URL EQUAL endpoint_url=stringtext 
        /// </summary>
        public static AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary(AstStringtext endpointUrl)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityReplicatPrimary result = new AstAlterAvailabilityReplicatPrimary(arguments);
            return result;
        }
        
        /// <summary>
        /// availability_mode : 
        ///    availability_mode 
        /// </summary>
        public static AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary(AstAvailabilityMode availabilityMode)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityReplicatPrimary result = new AstAlterAvailabilityReplicatPrimary(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    FAILOVER_MODE EQUAL failover=auto_manual 
        /// </summary>
        public static AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary(AstAutoManual failover)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityReplicatPrimary result = new AstAlterAvailabilityReplicatPrimary(arguments);
            return result;
        }
        
        /// <summary>
        /// seeding_mode : 
        ///    seeding_mode 
        /// </summary>
        public static AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary(AstSeedingMode seedingMode)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityReplicatPrimary result = new AstAlterAvailabilityReplicatPrimary(arguments);
            return result;
        }
        
        /// <summary>
        /// backup_priority : 
        ///    backup_priority 
        /// </summary>
        public static AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary(AstBackupPriority backupPriority)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityReplicatPrimary result = new AstAlterAvailabilityReplicatPrimary(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_primary_role
    /// 	 : allow_connections
    /// 	 | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  routing_list  RR_BRACKET
    /// 	 | SESSION_TIMEOUT  EQUAL  session_timeout = decimal
    /// </summary>
    public partial class AstAlterAvailabilityPrimaryRole : AstRule
    {
        
        protected static string _rule = "alter_availability_primary_role\r\n\t : allow_connections\r\n\t | READ_ONLY_ROUTING_LIS" +
            "T  EQUAL  LR_BRACKET  routing_list  RR_BRACKET\r\n\t | SESSION_TIMEOUT  EQUAL  sess" +
            "ion_timeout = decimal";
        
        internal AstAlterAvailabilityPrimaryRole(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterAvailabilityPrimaryRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityPrimaryRole(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityPrimaryRole(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityPrimaryRole(this);
        }
        
        /// <summary>
        /// allow_connections : 
        ///    allow_connections 
        /// </summary>
        public static AstAlterAvailabilityPrimaryRole AlterAvailabilityPrimaryRole(AstAllowConnections allowConnections)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityPrimaryRole result = new AstAlterAvailabilityPrimaryRole(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    READ_ONLY_ROUTING_LIST EQUAL ( routing_list ) 
        /// </summary>
        public static AstAlterAvailabilityPrimaryRole AlterAvailabilityPrimaryRole(AstRoutingList routingList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityPrimaryRole result = new AstAlterAvailabilityPrimaryRole(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    SESSION_TIMEOUT EQUAL session_timeout=decimal 
        /// </summary>
        public static AstAlterAvailabilityPrimaryRole AlterAvailabilityPrimaryRole(AstDecimal sessionTimeout)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityPrimaryRole result = new AstAlterAvailabilityPrimaryRole(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_group_options_replicat
    /// 	 : alter_availability_replicat_add
    /// 	 | REMOVE  REPLICA  ON  server_instance_txt
    /// 	 | alter_availability_replicat_modify
    /// </summary>
    public partial class AstAlterAvailabilityGroupOptionsReplicat : AstRule
    {
        
        protected static string _rule = "alter_availability_group_options_replicat\r\n\t : alter_availability_replicat_add\r\n\t" +
            " | REMOVE  REPLICA  ON  server_instance_txt\r\n\t | alter_availability_replicat_mod" +
            "ify";
        
        internal AstAlterAvailabilityGroupOptionsReplicat(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsReplicat(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsReplicat(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsReplicat(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupOptionsReplicat(this);
        }
        
        /// <summary>
        /// alter_availability_replicat_add : 
        ///    alter_availability_replicat_add 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsReplicat AlterAvailabilityGroupOptionsReplicat(AstAlterAvailabilityReplicatAdd alterAvailabilityReplicatAdd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsReplicat result = new AstAlterAvailabilityGroupOptionsReplicat(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    REMOVE REPLICA ON server_instance_txt 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsReplicat AlterAvailabilityGroupOptionsReplicat(AstServerInstanceTxt serverInstanceTxt)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsReplicat result = new AstAlterAvailabilityGroupOptionsReplicat(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_replicat_modify : 
        ///    alter_availability_replicat_modify 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsReplicat AlterAvailabilityGroupOptionsReplicat(AstAlterAvailabilityReplicatModify alterAvailabilityReplicatModify)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsReplicat result = new AstAlterAvailabilityGroupOptionsReplicat(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_group_options_group
    /// 	 : JOIN
    /// 	 | JOIN  AVAILABILITY  GROUP  ON  (COMMA?  ag_name = stringtext  WITH  LR_BRACKET  (listener_url  COMMA  availability_mode  COMMA  failover_mode_manuel  COMMA  seeding_mode)  RR_BRACKET)+
    /// 	 | MODIFY  AVAILABILITY  GROUP  ON  (COMMA?  ag_name_modified = stringtext  WITH  LR_BRACKET  (listener_url  (COMMA?  availability_mode)?  (COMMA?  failover_mode_manuel)?  (COMMA?  seeding_mode)?)  RR_BRACKET)+
    /// </summary>
    public partial class AstAlterAvailabilityGroupOptionsGroup : AstRule
    {
        
        protected static string _rule = @"alter_availability_group_options_group
	 : JOIN
	 | JOIN  AVAILABILITY  GROUP  ON  (COMMA?  ag_name = stringtext  WITH  LR_BRACKET  (listener_url  COMMA  availability_mode  COMMA  failover_mode_manuel  COMMA  seeding_mode)  RR_BRACKET)+
	 | MODIFY  AVAILABILITY  GROUP  ON  (COMMA?  ag_name_modified = stringtext  WITH  LR_BRACKET  (listener_url  (COMMA?  availability_mode)?  (COMMA?  failover_mode_manuel)?  (COMMA?  seeding_mode)?)  RR_BRACKET)+";
        
        internal AstAlterAvailabilityGroupOptionsGroup(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsGroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsGroup(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsGroup(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupOptionsGroup(this);
        }
        
        /// <summary>
        ///  : 
        ///    JOIN AVAILABILITY GROUP ON ,? ag_name=stringtext WITH ( listener_url , availability_mode , failover_mode_manuel , seeding_mode ) 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsGroup AlterAvailabilityGroupOptionsGroup(AstStringtext agName, AstListenerUrl listenerUrl, AstAvailabilityMode availabilityMode, AstFailoverModeManuel failoverModeManuel, AstSeedingMode seedingMode)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsGroup result = new AstAlterAvailabilityGroupOptionsGroup(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// failover_mode_manuel
    /// 	 : FAILOVER_MODE  EQUAL  MANUAL
    /// </summary>
    public partial class AstFailoverModeManuel : AstRule
    {
        
        protected static string _rule = "failover_mode_manuel\r\n\t : FAILOVER_MODE  EQUAL  MANUAL";
        
        internal AstFailoverModeManuel(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstFailoverModeManuel(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstFailoverModeManuel(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstFailoverModeManuel(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFailoverModeManuel(this);
        }
    }
    
    /// <summary>
    /// alter_availability_group_options_role
    /// 	 : SECONDARY_ROLE  LR_BRACKET  (allow_connections | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  stringtext  RR_BRACKET)
    /// 	 | PRIMARY_ROLE  LR_BRACKET  (allow_connections | READ_ONLY_ROUTING_LIST  EQUAL  (LR_BRACKET  (string_list | NONE)  RR_BRACKET) | SESSION_TIMEOUT  EQUAL  session_timeout = decimal)
    /// </summary>
    public partial class AstAlterAvailabilityGroupOptionsRole : AstRule
    {
        
        protected static string _rule = @"alter_availability_group_options_role
	 : SECONDARY_ROLE  LR_BRACKET  (allow_connections | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  stringtext  RR_BRACKET)
	 | PRIMARY_ROLE  LR_BRACKET  (allow_connections | READ_ONLY_ROUTING_LIST  EQUAL  (LR_BRACKET  (string_list | NONE)  RR_BRACKET) | SESSION_TIMEOUT  EQUAL  session_timeout = decimal)";
        
        internal AstAlterAvailabilityGroupOptionsRole(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsRole(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsRole(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupOptionsRole(this);
        }
        
        /// <summary>
        ///  : 
        ///    SECONDARY_ROLE ( allow_connections 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsRole AlterAvailabilityGroupOptionsRole(AstAllowConnections allowConnections)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsRole result = new AstAlterAvailabilityGroupOptionsRole(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    SECONDARY_ROLE ( READ_ONLY_ROUTING_LIST EQUAL ( stringtext ) 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsRole AlterAvailabilityGroupOptionsRole(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsRole result = new AstAlterAvailabilityGroupOptionsRole(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    PRIMARY_ROLE ( READ_ONLY_ROUTING_LIST EQUAL ( string_list ) 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsRole AlterAvailabilityGroupOptionsRole(AstStringList stringList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsRole result = new AstAlterAvailabilityGroupOptionsRole(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    PRIMARY_ROLE ( SESSION_TIMEOUT EQUAL session_timeout=decimal 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsRole AlterAvailabilityGroupOptionsRole(AstDecimal sessionTimeout)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsRole result = new AstAlterAvailabilityGroupOptionsRole(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_group_options
    /// 	 : SET  LR_BRACKET  (AUTOMATED_BACKUP_PREFERENCE  EQUAL  primary_secondary_none | FAILURE_CONDITION_LEVEL  EQUAL  decimal | HEALTH_CHECK_TIMEOUT  EQUAL  milliseconds = decimal | DB_FAILOVER  EQUAL  on_off | REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT  EQUAL  decimal  RR_BRACKET)
    /// 	 | alter_availability_group_options_database
    /// 	 | alter_availability_group_options_replicat
    /// 	 | alter_availability_group_options_listener
    /// 	 | alter_availability_group_options_role
    /// 	 | alter_availability_group_options_group
    /// 	 | grant_deny  CREATE  ANY  DATABASE
    /// 	 | FAILOVER
    /// 	 | FORCE_FAILOVER_ALLOW_DATA_LOSS
    /// 	 | OFFLINE
    /// 	 | WITH  LR_BRACKET  DTC_SUPPORT  EQUAL  PER_DB  RR_BRACKET
    /// </summary>
    public partial class AstAlterAvailabilityGroupOptions : AstRule
    {
        
        protected static string _rule = @"alter_availability_group_options
	 : SET  LR_BRACKET  (AUTOMATED_BACKUP_PREFERENCE  EQUAL  primary_secondary_none | FAILURE_CONDITION_LEVEL  EQUAL  decimal | HEALTH_CHECK_TIMEOUT  EQUAL  milliseconds = decimal | DB_FAILOVER  EQUAL  on_off | REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT  EQUAL  decimal  RR_BRACKET)
	 | alter_availability_group_options_database
	 | alter_availability_group_options_replicat
	 | alter_availability_group_options_listener
	 | alter_availability_group_options_role
	 | alter_availability_group_options_group
	 | grant_deny  CREATE  ANY  DATABASE
	 | FAILOVER
	 | FORCE_FAILOVER_ALLOW_DATA_LOSS
	 | OFFLINE
	 | WITH  LR_BRACKET  DTC_SUPPORT  EQUAL  PER_DB  RR_BRACKET";
        
        internal AstAlterAvailabilityGroupOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterAvailabilityGroupOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityGroupOptions(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityGroupOptions(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupOptions(this);
        }
        
        /// <summary>
        ///  : 
        ///    SET ( AUTOMATED_BACKUP_PREFERENCE EQUAL primary_secondary_none 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(AstPrimarySecondaryNone primarySecondaryNone)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptions result = new AstAlterAvailabilityGroupOptions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    SET ( FAILURE_CONDITION_LEVEL EQUAL decimal 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptions result = new AstAlterAvailabilityGroupOptions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    SET ( DB_FAILOVER EQUAL on_off 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptions result = new AstAlterAvailabilityGroupOptions(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options_database : 
        ///    alter_availability_group_options_database 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(AstAlterAvailabilityGroupOptionsDatabase alterAvailabilityGroupOptionsDatabase)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptions result = new AstAlterAvailabilityGroupOptions(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options_replicat : 
        ///    alter_availability_group_options_replicat 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(AstAlterAvailabilityGroupOptionsReplicat alterAvailabilityGroupOptionsReplicat)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptions result = new AstAlterAvailabilityGroupOptions(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options_listener : 
        ///    alter_availability_group_options_listener 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(AstAlterAvailabilityGroupOptionsListener alterAvailabilityGroupOptionsListener)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptions result = new AstAlterAvailabilityGroupOptions(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options_role : 
        ///    alter_availability_group_options_role 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(AstAlterAvailabilityGroupOptionsRole alterAvailabilityGroupOptionsRole)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptions result = new AstAlterAvailabilityGroupOptions(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options_group : 
        ///    alter_availability_group_options_group 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(AstAlterAvailabilityGroupOptionsGroup alterAvailabilityGroupOptionsGroup)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptions result = new AstAlterAvailabilityGroupOptions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    grant_deny CREATE ANY DATABASE 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(AstGrantDeny grantDeny)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptions result = new AstAlterAvailabilityGroupOptions(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// broker_contract_name
    /// 	 : (CONTRACT_NAME  EQUAL  (id_ | ANY)  COMMA?)
    /// </summary>
    public partial class AstBrokerContractName : AstRule
    {
        
        protected static string _rule = "broker_contract_name\r\n\t : (CONTRACT_NAME  EQUAL  (id_ | ANY)  COMMA?)";
        
        internal AstBrokerContractName(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstBrokerContractName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBrokerContractName(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBrokerContractName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBrokerContractName(this);
        }
        
        /// <summary>
        ///  : 
        ///    CONTRACT_NAME EQUAL id_ COMMA? 
        /// </summary>
        public static AstBrokerContractName BrokerContractName(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBrokerContractName result = new AstBrokerContractName(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// broker_local_service_name
    /// 	 : (LOCAL_SERVICE_NAME  EQUAL  (DOUBLE_FORWARD_SLASH?  id_ | ANY)  COMMA?)
    /// </summary>
    public partial class AstBrokerLocalServiceName : AstRule
    {
        
        protected static string _rule = "broker_local_service_name\r\n\t : (LOCAL_SERVICE_NAME  EQUAL  (DOUBLE_FORWARD_SLASH?" +
            "  id_ | ANY)  COMMA?)";
        
        internal AstBrokerLocalServiceName(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstBrokerLocalServiceName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBrokerLocalServiceName(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBrokerLocalServiceName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBrokerLocalServiceName(this);
        }
        
        /// <summary>
        ///  : 
        ///    LOCAL_SERVICE_NAME EQUAL DOUBLE_FORWARD_SLASH? id_ COMMA? 
        /// </summary>
        public static AstBrokerLocalServiceName BrokerLocalServiceName(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBrokerLocalServiceName result = new AstBrokerLocalServiceName(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// broker_remote_service_name
    /// 	 : (REMOTE_SERVICE_NAME  EQUAL  (stringtext | ANY)  COMMA?)
    /// </summary>
    public partial class AstBrokerRemoteServiceName : AstRule
    {
        
        protected static string _rule = "broker_remote_service_name\r\n\t : (REMOTE_SERVICE_NAME  EQUAL  (stringtext | ANY)  " +
            "COMMA?)";
        
        internal AstBrokerRemoteServiceName(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstBrokerRemoteServiceName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBrokerRemoteServiceName(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBrokerRemoteServiceName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBrokerRemoteServiceName(this);
        }
        
        /// <summary>
        ///  : 
        ///    REMOTE_SERVICE_NAME EQUAL stringtext COMMA? 
        /// </summary>
        public static AstBrokerRemoteServiceName BrokerRemoteServiceName(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBrokerRemoteServiceName result = new AstBrokerRemoteServiceName(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// broker_priority_level
    /// 	 : (PRIORITY_LEVEL  EQUAL  (decimal | DEFAULT))
    /// </summary>
    public partial class AstBrokerPriorityLevel : AstRule
    {
        
        protected static string _rule = "broker_priority_level\r\n\t : (PRIORITY_LEVEL  EQUAL  (decimal | DEFAULT))";
        
        internal AstBrokerPriorityLevel(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstBrokerPriorityLevel(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBrokerPriorityLevel(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBrokerPriorityLevel(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBrokerPriorityLevel(this);
        }
        
        /// <summary>
        ///  : 
        ///    PRIORITY_LEVEL EQUAL decimal 
        /// </summary>
        public static AstBrokerPriorityLevel BrokerPriorityLevel(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBrokerPriorityLevel result = new AstBrokerPriorityLevel(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// drop_broker_priority
    /// 	 : DROP  BROKER  PRIORITY  ConversationPriorityName = id_
    /// </summary>
    public partial class AstDropBrokerPriority : AstDdlClause
    {
        
        protected static string _rule = "drop_broker_priority\r\n\t : DROP  BROKER  PRIORITY  ConversationPriorityName = id_";
        
        internal AstDropBrokerPriority(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDropBrokerPriority(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropBrokerPriority(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropBrokerPriority(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropBrokerPriority(this);
        }
        
        /// <summary>
        ///  : 
        ///    DROP BROKER PRIORITY ConversationPriorityName=id_ 
        /// </summary>
        public static AstDropBrokerPriority DropBrokerPriority(AstId conversationPriorityName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDropBrokerPriority result = new AstDropBrokerPriority(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// private_key
    /// 	 : FILE  EQUAL  stringtext  COMMA?
    /// 	 | by_password_crypt  COMMA?
    /// </summary>
    public partial class AstPrivateKey : AstRule
    {
        
        protected static string _rule = "private_key\r\n\t : FILE  EQUAL  stringtext  COMMA?\r\n\t | by_password_crypt  COMMA?";
        
        internal AstPrivateKey(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstPrivateKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstPrivateKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstPrivateKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrivateKey(this);
        }
        
        /// <summary>
        ///  : 
        ///    FILE EQUAL stringtext COMMA? 
        /// </summary>
        public static AstPrivateKey PrivateKey(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPrivateKey result = new AstPrivateKey(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    by_password_crypt COMMA? 
        /// </summary>
        public static AstPrivateKey PrivateKey(AstByPasswordCrypt byPasswordCrypt)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPrivateKey result = new AstPrivateKey(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// drop_contract
    /// 	 : DROP  CONTRACT  dropped_contract_name = id_
    /// </summary>
    public partial class AstDropContract : AstDdlClause
    {
        
        protected static string _rule = "drop_contract\r\n\t : DROP  CONTRACT  dropped_contract_name = id_";
        
        internal AstDropContract(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDropContract(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropContract(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropContract(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropContract(this);
        }
        
        /// <summary>
        ///  : 
        ///    DROP CONTRACT dropped_contract_name=id_ 
        /// </summary>
        public static AstDropContract DropContract(AstId droppedContractName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDropContract result = new AstDropContract(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// drop_database
    /// 	 : DROP  DATABASE  (IF  EXISTS)?  (COMMA?  database_id)+
    /// </summary>
    public partial class AstDropDatabase : AstDdlClause
    {
        
        protected static string _rule = "drop_database\r\n\t : DROP  DATABASE  (IF  EXISTS)?  (COMMA?  database_id)+";
        
        internal AstDropDatabase(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDropDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropDatabase(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropDatabase(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabase(this);
        }
        
        /// <summary>
        ///  : 
        ///    DROP DATABASE IF EXISTS COMMA? database_id 
        /// </summary>
        public static AstDropDatabase DropDatabase(AstDatabaseId databaseId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDropDatabase result = new AstDropDatabase(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// drop_database_encryption_key
    /// 	 : DROP  DATABASE  ENCRYPTION  KEY
    /// </summary>
    public partial class AstDropDatabaseEncryptionKey : AstDdlClause
    {
        
        protected static string _rule = "drop_database_encryption_key\r\n\t : DROP  DATABASE  ENCRYPTION  KEY";
        
        internal AstDropDatabaseEncryptionKey(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDropDatabaseEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropDatabaseEncryptionKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropDatabaseEncryptionKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabaseEncryptionKey(this);
        }
    }
    
    /// <summary>
    /// drop_default
    /// 	 : DROP  DEFAULT  (IF  EXISTS)?  (COMMA?  default_ref)
    /// </summary>
    public partial class AstDropDefault : AstDdlClause
    {
        
        protected static string _rule = "drop_default\r\n\t : DROP  DEFAULT  (IF  EXISTS)?  (COMMA?  default_ref)";
        
        internal AstDropDefault(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDropDefault(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropDefault(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropDefault(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDefault(this);
        }
        
        /// <summary>
        ///  : 
        ///    DROP DEFAULT IF EXISTS COMMA? default_ref 
        /// </summary>
        public static AstDropDefault DropDefault(AstDefaultRef defaultRef)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDropDefault result = new AstDropDefault(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// event_notification_on
    /// 	 : server_database
    /// 	 | QUEUE  queue_id
    /// </summary>
    public partial class AstEventNotificationOn : AstRule
    {
        
        protected static string _rule = "event_notification_on\r\n\t : server_database\r\n\t | QUEUE  queue_id";
        
        internal AstEventNotificationOn(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstEventNotificationOn(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstEventNotificationOn(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstEventNotificationOn(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventNotificationOn(this);
        }
        
        /// <summary>
        /// server_database : 
        ///    server_database 
        /// </summary>
        public static AstEventNotificationOn EventNotificationOn(AstServerDatabase serverDatabase)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventNotificationOn result = new AstEventNotificationOn(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    QUEUE queue_id 
        /// </summary>
        public static AstEventNotificationOn EventNotificationOn(AstQueueId queueId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventNotificationOn result = new AstEventNotificationOn(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// drop_master_key
    /// 	 : DROP  MASTER  KEY
    /// </summary>
    public partial class AstDropMasterKey : AstDdlClause
    {
        
        protected static string _rule = "drop_master_key\r\n\t : DROP  MASTER  KEY";
        
        internal AstDropMasterKey(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDropMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropMasterKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropMasterKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropMasterKey(this);
        }
    }
    
    /// <summary>
    /// drop_rule
    /// 	 : DROP  RULE  (IF  EXISTS)?  (COMMA?  schema_rule_ref)?
    /// </summary>
    public partial class AstDropRule : AstDdlClause
    {
        
        protected static string _rule = "drop_rule\r\n\t : DROP  RULE  (IF  EXISTS)?  (COMMA?  schema_rule_ref)?";
        
        internal AstDropRule(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDropRule(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropRule(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropRule(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRule(this);
        }
        
        /// <summary>
        ///  : 
        ///    DROP RULE IF EXISTS COMMA? schema_rule_ref 
        /// </summary>
        public static AstDropRule DropRule(AstSchemaRuleRef schemaRuleRef)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDropRule result = new AstDropRule(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// drop_sequence
    /// 	 : DROP  SEQUENCE  (IF  EXISTS)?  (COMMA?  database_schema_sequence_ref)?
    /// </summary>
    public partial class AstDropSequence : AstDdlClause
    {
        
        protected static string _rule = "drop_sequence\r\n\t : DROP  SEQUENCE  (IF  EXISTS)?  (COMMA?  database_schema_sequen" +
            "ce_ref)?";
        
        internal AstDropSequence(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDropSequence(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropSequence(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropSequence(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSequence(this);
        }
        
        /// <summary>
        ///  : 
        ///    DROP SEQUENCE IF EXISTS COMMA? database_schema_sequence_ref 
        /// </summary>
        public static AstDropSequence DropSequence(AstDatabaseSchemaSequenceRef databaseSchemaSequenceRef)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDropSequence result = new AstDropSequence(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// trigger_name
    /// 	 : schema_trigger_refs
    /// 	 | ALL
    /// </summary>
    public partial class AstTriggerName : AstRule
    {
        
        protected static string _rule = "trigger_name\r\n\t : schema_trigger_refs\r\n\t | ALL";
        
        internal AstTriggerName(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTriggerName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTriggerName(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTriggerName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTriggerName(this);
        }
        
        /// <summary>
        /// schema_trigger_refs : 
        ///    schema_trigger_refs 
        /// </summary>
        public static AstTriggerName TriggerName(AstSchemaTriggerRefs schemaTriggerRefs)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTriggerName result = new AstTriggerName(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// trigger_target
    /// 	 : schema_object_ref
    /// 	 | all_server_database
    /// </summary>
    public partial class AstTriggerTarget : AstRule
    {
        
        protected static string _rule = "trigger_target\r\n\t : schema_object_ref\r\n\t | all_server_database";
        
        internal AstTriggerTarget(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTriggerTarget(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTriggerTarget(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTriggerTarget(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTriggerTarget(this);
        }
        
        /// <summary>
        /// schema_object_ref : 
        ///    schema_object_ref 
        /// </summary>
        public static AstTriggerTarget TriggerTarget(AstSchemaObjectRef schemaObjectRef)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTriggerTarget result = new AstTriggerTarget(arguments);
            return result;
        }
        
        /// <summary>
        /// all_server_database : 
        ///    all_server_database 
        /// </summary>
        public static AstTriggerTarget TriggerTarget(AstAllServerDatabase allServerDatabase)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTriggerTarget result = new AstTriggerTarget(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_column_master_key
    /// 	 : CREATE  COLUMN  MASTER  KEY  key_name = id_  WITH  LR_BRACKET  KEY_STORE_PROVIDER_NAME  EQUAL  key_store_provider_name = stringtext  COMMA  KEY_PATH  EQUAL  key_path = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstCreateColumnMasterKey : AstDdlClause
    {
        
        protected static string _rule = "create_column_master_key\r\n\t : CREATE  COLUMN  MASTER  KEY  key_name = id_  WITH  " +
            "LR_BRACKET  KEY_STORE_PROVIDER_NAME  EQUAL  key_store_provider_name = stringtext" +
            "  COMMA  KEY_PATH  EQUAL  key_path = stringtext  RR_BRACKET";
        
        internal AstCreateColumnMasterKey(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateColumnMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateColumnMasterKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateColumnMasterKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnMasterKey(this);
        }
        
        /// <summary>
        ///  : 
        ///    CREATE COLUMN MASTER KEY key_name=id_ WITH ( KEY_STORE_PROVIDER_NAME EQUAL key_store_provider_name=stringtext , KEY_PATH EQUAL key_path=stringtext ) 
        /// </summary>
        public static AstCreateColumnMasterKey CreateColumnMasterKey(AstId keyName, AstStringtext keyStoreProviderName, AstStringtext keyPath)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateColumnMasterKey result = new AstCreateColumnMasterKey(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session_with
    /// 	 : WITH  LR_BRACKET  (COMMA?  session_arg_max_memory)?  (COMMA?  session_arg_event_retention_mode)?  (COMMA?  session_arg_max_dispatch)?  (COMMA?  session_arg_max_event_size)?  (COMMA?  session_arg_memory_partition)?  (COMMA?  session_arg_track_causality)?  (COMMA?  session_arg_startup_state)?  RR_BRACKET
    /// </summary>
    public partial class AstCreateOrAlterEventSessionWith : AstRule
    {
        
        protected static string _rule = @"create_or_alter_event_session_with
	 : WITH  LR_BRACKET  (COMMA?  session_arg_max_memory)?  (COMMA?  session_arg_event_retention_mode)?  (COMMA?  session_arg_max_dispatch)?  (COMMA?  session_arg_max_event_size)?  (COMMA?  session_arg_memory_partition)?  (COMMA?  session_arg_track_causality)?  (COMMA?  session_arg_startup_state)?  RR_BRACKET";
        
        internal AstCreateOrAlterEventSessionWith(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateOrAlterEventSessionWith(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateOrAlterEventSessionWith(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateOrAlterEventSessionWith(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSessionWith(this);
        }
        
        /// <summary>
        ///  : 
        ///    WITH ( COMMA? session_arg_max_memory COMMA? session_arg_event_retention_mode COMMA? session_arg_max_dispatch COMMA? session_arg_max_event_size COMMA? session_arg_memory_partition COMMA? session_arg_track_causality COMMA? session_arg_startup_state ) 
        /// </summary>
        public static AstCreateOrAlterEventSessionWith CreateOrAlterEventSessionWith(AstSessionArgMaxMemory sessionArgMaxMemory, AstSessionArgEventRetentionMode sessionArgEventRetentionMode, AstSessionArgMaxDispatch sessionArgMaxDispatch, AstSessionArgMaxEventSize sessionArgMaxEventSize, AstSessionArgMemoryPartition sessionArgMemoryPartition, AstSessionArgTrackCausality sessionArgTrackCausality, AstSessionArgStartupState sessionArgStartupState)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateOrAlterEventSessionWith result = new AstCreateOrAlterEventSessionWith(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// session_arg_max_dispatch
    /// 	 : MAX_DISPATCH_LATENCY  EQUAL  (decimal  SECONDS | INFINITE)
    /// </summary>
    public partial class AstSessionArgMaxDispatch : AstRule
    {
        
        protected static string _rule = "session_arg_max_dispatch\r\n\t : MAX_DISPATCH_LATENCY  EQUAL  (decimal  SECONDS | IN" +
            "FINITE)";
        
        internal AstSessionArgMaxDispatch(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSessionArgMaxDispatch(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSessionArgMaxDispatch(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSessionArgMaxDispatch(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSessionArgMaxDispatch(this);
        }
        
        /// <summary>
        ///  : 
        ///    MAX_DISPATCH_LATENCY EQUAL decimal SECONDS 
        /// </summary>
        public static AstSessionArgMaxDispatch SessionArgMaxDispatch(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSessionArgMaxDispatch result = new AstSessionArgMaxDispatch(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// target_parameter_value
    /// 	 : (LR_BRACKET?  decimal  RR_BRACKET? | stringtext)
    /// </summary>
    public partial class AstTargetParameterValue : AstRule
    {
        
        protected static string _rule = "target_parameter_value\r\n\t : (LR_BRACKET?  decimal  RR_BRACKET? | stringtext)";
        
        internal AstTargetParameterValue(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTargetParameterValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTargetParameterValue(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTargetParameterValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetParameterValue(this);
        }
        
        /// <summary>
        ///  : 
        ///    LR_BRACKET? decimal RR_BRACKET? 
        /// </summary>
        public static AstTargetParameterValue TargetParameterValue(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTargetParameterValue result = new AstTargetParameterValue(arguments);
            return result;
        }
        
        /// <summary>
        /// stringtext : 
        ///    stringtext 
        /// </summary>
        public static AstTargetParameterValue TargetParameterValue(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTargetParameterValue result = new AstTargetParameterValue(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// event_session_predicate_expression
    /// 	 : (COMMA?  and_or?  NOT?  (event_session_predicate_factor | LR_BRACKET  event_session_predicate_expression  RR_BRACKET))+
    /// </summary>
    public partial class AstEventSessionPredicateExpression : AstRule
    {
        
        protected static string _rule = "event_session_predicate_expression\r\n\t : (COMMA?  and_or?  NOT?  (event_session_pr" +
            "edicate_factor | LR_BRACKET  event_session_predicate_expression  RR_BRACKET))+";
        
        internal AstEventSessionPredicateExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstEventSessionPredicateExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstEventSessionPredicateExpression(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstEventSessionPredicateExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionPredicateExpression(this);
        }
        
        /// <summary>
        ///  : 
        ///    COMMA? and_or? NOT? event_session_predicate_factor+ 
        /// </summary>
        public static AstEventSessionPredicateExpression EventSessionPredicateExpression(AstAndOr andOr, AstEventSessionPredicateFactor eventSessionPredicateFactor)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventSessionPredicateExpression result = new AstEventSessionPredicateExpression(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    COMMA? and_or? NOT? ( event_session_predicate_expression RR_BRACKET+ 
        /// </summary>
        public static AstEventSessionPredicateExpression EventSessionPredicateExpression(AstAndOr andOr, AstEventSessionPredicateExpression eventSessionPredicateExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventSessionPredicateExpression result = new AstEventSessionPredicateExpression(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// event_session_predicate_factor
    /// 	 : event_session_predicate_leaf
    /// 	 | LR_BRACKET  event_session_predicate_expression  RR_BRACKET
    /// </summary>
    public partial class AstEventSessionPredicateFactor : AstRule
    {
        
        protected static string _rule = "event_session_predicate_factor\r\n\t : event_session_predicate_leaf\r\n\t | LR_BRACKET " +
            " event_session_predicate_expression  RR_BRACKET";
        
        internal AstEventSessionPredicateFactor(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstEventSessionPredicateFactor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstEventSessionPredicateFactor(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstEventSessionPredicateFactor(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionPredicateFactor(this);
        }
        
        /// <summary>
        /// event_session_predicate_leaf : 
        ///    event_session_predicate_leaf 
        /// </summary>
        public static AstEventSessionPredicateFactor EventSessionPredicateFactor(AstEventSessionPredicateLeaf eventSessionPredicateLeaf)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventSessionPredicateFactor result = new AstEventSessionPredicateFactor(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ( event_session_predicate_expression ) 
        /// </summary>
        public static AstEventSessionPredicateFactor EventSessionPredicateFactor(AstEventSessionPredicateExpression eventSessionPredicateExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventSessionPredicateFactor result = new AstEventSessionPredicateFactor(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// event_session_predicate_leaf
    /// 	 : (event_field_id | (event_field_id | full_predicate_source_ref)  event_session_predicate_leaf_ope  decimal_string)
    /// 	 | source1 = full_predicate_source_ref  LR_BRACKET  (event_field_id | source2 = full_predicate_source_ref  COMMA  decimal_string)  RR_BRACKET
    /// </summary>
    public partial class AstEventSessionPredicateLeaf : AstRule
    {
        
        protected static string _rule = @"event_session_predicate_leaf
	 : (event_field_id | (event_field_id | full_predicate_source_ref)  event_session_predicate_leaf_ope  decimal_string)
	 | source1 = full_predicate_source_ref  LR_BRACKET  (event_field_id | source2 = full_predicate_source_ref  COMMA  decimal_string)  RR_BRACKET";
        
        internal AstEventSessionPredicateLeaf(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstEventSessionPredicateLeaf(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstEventSessionPredicateLeaf(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstEventSessionPredicateLeaf(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionPredicateLeaf(this);
        }
        
        /// <summary>
        /// event_field_id : 
        ///    event_field_id 
        /// </summary>
        public static AstEventSessionPredicateLeaf EventSessionPredicateLeaf(AstEventFieldId eventFieldId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventSessionPredicateLeaf result = new AstEventSessionPredicateLeaf(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    event_field_id event_session_predicate_leaf_ope decimal_string 
        /// </summary>
        public static AstEventSessionPredicateLeaf EventSessionPredicateLeaf(AstEventFieldId eventFieldId, AstEventSessionPredicateLeafOpe eventSessionPredicateLeafOpe, AstDecimalString decimalString)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventSessionPredicateLeaf result = new AstEventSessionPredicateLeaf(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    full_predicate_source_ref event_session_predicate_leaf_ope decimal_string 
        /// </summary>
        public static AstEventSessionPredicateLeaf EventSessionPredicateLeaf(AstFullPredicateSourceRef fullPredicateSourceRef, AstEventSessionPredicateLeafOpe eventSessionPredicateLeafOpe, AstDecimalString decimalString)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventSessionPredicateLeaf result = new AstEventSessionPredicateLeaf(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    source1=full_predicate_source_ref ( event_field_id ) 
        /// </summary>
        public static AstEventSessionPredicateLeaf EventSessionPredicateLeaf(AstFullPredicateSourceRef source1, AstEventFieldId eventFieldId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventSessionPredicateLeaf result = new AstEventSessionPredicateLeaf(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    source1=full_predicate_source_ref ( source2=full_predicate_source_ref , decimal_string ) 
        /// </summary>
        public static AstEventSessionPredicateLeaf EventSessionPredicateLeaf(AstFullPredicateSourceRef source1, AstFullPredicateSourceRef source2, AstDecimalString decimalString)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventSessionPredicateLeaf result = new AstEventSessionPredicateLeaf(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_external_data_source
    /// 	 : ALTER  EXTERNAL  DATA  SOURCE  data_source_id  SET  (LOCATION  EQUAL  location = stringtext  COMMA? | RESOURCE_MANAGER_LOCATION  EQUAL  resource_manager_location = stringtext  COMMA? | CREDENTIAL  EQUAL  credential_id)+
    /// 	 | ALTER  EXTERNAL  DATA  SOURCE  data_source_id  WITH  LR_BRACKET  TYPE  EQUAL  BLOB_STORAGE  COMMA  LOCATION  EQUAL  location = stringtext  (COMMA  CREDENTIAL  EQUAL  credential_id)?  RR_BRACKET
    /// </summary>
    public partial class AstAlterExternalDataSource : AstDdlClause
    {
        
        protected static string _rule = @"alter_external_data_source
	 : ALTER  EXTERNAL  DATA  SOURCE  data_source_id  SET  (LOCATION  EQUAL  location = stringtext  COMMA? | RESOURCE_MANAGER_LOCATION  EQUAL  resource_manager_location = stringtext  COMMA? | CREDENTIAL  EQUAL  credential_id)+
	 | ALTER  EXTERNAL  DATA  SOURCE  data_source_id  WITH  LR_BRACKET  TYPE  EQUAL  BLOB_STORAGE  COMMA  LOCATION  EQUAL  location = stringtext  (COMMA  CREDENTIAL  EQUAL  credential_id)?  RR_BRACKET";
        
        internal AstAlterExternalDataSource(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterExternalDataSource(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterExternalDataSource(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterExternalDataSource(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterExternalDataSource(this);
        }
        
        /// <summary>
        ///  : 
        ///    ALTER EXTERNAL DATA SOURCE data_source_id SET LOCATION EQUAL location=stringtext COMMA? 
        /// </summary>
        public static AstAlterExternalDataSource AlterExternalDataSource(AstDataSourceId dataSourceId, AstStringtext location)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterExternalDataSource result = new AstAlterExternalDataSource(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ALTER EXTERNAL DATA SOURCE data_source_id SET CREDENTIAL EQUAL credential_id 
        /// </summary>
        public static AstAlterExternalDataSource AlterExternalDataSource(AstDataSourceId dataSourceId, AstCredentialId credentialId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterExternalDataSource result = new AstAlterExternalDataSource(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ALTER EXTERNAL DATA SOURCE data_source_id WITH ( TYPE EQUAL BLOB_STORAGE , LOCATION EQUAL location=stringtext , CREDENTIAL EQUAL credential_id ) 
        /// </summary>
        public static AstAlterExternalDataSource AlterExternalDataSource(AstDataSourceId dataSourceId, AstStringtext location, AstCredentialId credentialId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterExternalDataSource result = new AstAlterExternalDataSource(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// code_content
    /// 	 : stringtext
    /// 	 | binary_
    /// 	 | NONE
    /// </summary>
    public partial class AstCodeContent : AstRule
    {
        
        protected static string _rule = "code_content\r\n\t : stringtext\r\n\t | binary_\r\n\t | NONE";
        
        internal AstCodeContent(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCodeContent(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCodeContent(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCodeContent(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCodeContent(this);
        }
        
        /// <summary>
        /// stringtext : 
        ///    stringtext 
        /// </summary>
        public static AstCodeContent CodeContent(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCodeContent result = new AstCodeContent(arguments);
            return result;
        }
        
        /// <summary>
        /// binary_ : 
        ///    binary_ 
        /// </summary>
        public static AstCodeContent CodeContent(AstBinary binary)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCodeContent result = new AstCodeContent(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_external_resource_pool
    /// 	 : CREATE  EXTERNAL  RESOURCE  POOL  pool_id  WITH  external_resource_with
    /// </summary>
    public partial class AstCreateExternalResourcePool : AstDdlClause
    {
        
        protected static string _rule = "create_external_resource_pool\r\n\t : CREATE  EXTERNAL  RESOURCE  POOL  pool_id  WIT" +
            "H  external_resource_with";
        
        internal AstCreateExternalResourcePool(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateExternalResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateExternalResourcePool(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateExternalResourcePool(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateExternalResourcePool(this);
        }
        
        /// <summary>
        ///  : 
        ///    CREATE EXTERNAL RESOURCE POOL pool_id WITH external_resource_with 
        /// </summary>
        public static AstCreateExternalResourcePool CreateExternalResourcePool(AstPoolId poolId, AstExternalResourceWith externalResourceWith)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateExternalResourcePool result = new AstCreateExternalResourcePool(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// fulltext_languageList
    /// 	 : stringtext
    /// 	 | decimal
    /// 	 | binary_
    /// </summary>
    public partial class AstFulltextLanguageList : AstRule
    {
        
        protected static string _rule = "fulltext_languageList\r\n\t : stringtext\r\n\t | decimal\r\n\t | binary_";
        
        internal AstFulltextLanguageList(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstFulltextLanguageList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstFulltextLanguageList(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstFulltextLanguageList(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFulltextLanguageList(this);
        }
        
        /// <summary>
        /// stringtext : 
        ///    stringtext 
        /// </summary>
        public static AstFulltextLanguageList FulltextLanguageList(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFulltextLanguageList result = new AstFulltextLanguageList(arguments);
            return result;
        }
        
        /// <summary>
        /// decimal : 
        ///    decimal 
        /// </summary>
        public static AstFulltextLanguageList FulltextLanguageList(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFulltextLanguageList result = new AstFulltextLanguageList(arguments);
            return result;
        }
        
        /// <summary>
        /// binary_ : 
        ///    binary_ 
        /// </summary>
        public static AstFulltextLanguageList FulltextLanguageList(AstBinary binary)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFulltextLanguageList result = new AstFulltextLanguageList(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_login_sql_server_infos
    /// 	 : enable_disable?
    /// 	 | WITH  alter_login_sql_server_settings
    /// 	 | add_drop  CREDENTIAL  credential_id
    /// </summary>
    public partial class AstAlterLoginSqlServerInfos : AstRule
    {
        
        protected static string _rule = "alter_login_sql_server_infos\r\n\t : enable_disable?\r\n\t | WITH  alter_login_sql_serv" +
            "er_settings\r\n\t | add_drop  CREDENTIAL  credential_id";
        
        internal AstAlterLoginSqlServerInfos(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterLoginSqlServerInfos(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterLoginSqlServerInfos(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterLoginSqlServerInfos(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginSqlServerInfos(this);
        }
        
        /// <summary>
        /// enable_disable : 
        ///    enable_disable? 
        /// </summary>
        public static AstAlterLoginSqlServerInfos AlterLoginSqlServerInfos(AstEnableDisable enableDisable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterLoginSqlServerInfos result = new AstAlterLoginSqlServerInfos(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    WITH alter_login_sql_server_settings 
        /// </summary>
        public static AstAlterLoginSqlServerInfos AlterLoginSqlServerInfos(AstAlterLoginSqlServerSettings alterLoginSqlServerSettings)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterLoginSqlServerInfos result = new AstAlterLoginSqlServerInfos(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    add_drop CREDENTIAL credential_id 
        /// </summary>
        public static AstAlterLoginSqlServerInfos AlterLoginSqlServerInfos(AstAddDrop addDrop, AstCredentialId credentialId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterLoginSqlServerInfos result = new AstAlterLoginSqlServerInfos(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// pwd_value
    /// 	 : stringtext
    /// 	 | binary_  HASHED
    /// </summary>
    public partial class AstPwdValue : AstRule
    {
        
        protected static string _rule = "pwd_value\r\n\t : stringtext\r\n\t | binary_  HASHED";
        
        internal AstPwdValue(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstPwdValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstPwdValue(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstPwdValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPwdValue(this);
        }
        
        /// <summary>
        /// stringtext : 
        ///    stringtext 
        /// </summary>
        public static AstPwdValue PwdValue(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPwdValue result = new AstPwdValue(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    binary_ HASHED 
        /// </summary>
        public static AstPwdValue PwdValue(AstBinary binary)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPwdValue result = new AstPwdValue(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_login_sql_server_settings
    /// 	 : ((PASSWORD  EQUAL  (password = stringtext | password_hash = binary_  HASHED))  pwd_strategies?)?  (COMMA?  SID  EQUAL  sid = binary_)?  (COMMA?  DEFAULT_DATABASE  EQUAL  database_id)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  language)?  (COMMA?  CHECK_EXPIRATION  EQUAL  check_expiration = on_off)?  (COMMA?  CHECK_POLICY  EQUAL  check_policy = on_off)?  (COMMA?  CREDENTIAL  EQUAL  credential_id)?
    /// </summary>
    public partial class AstCreateLoginSqlServerSettings : AstRule
    {
        
        protected static string _rule = @"create_login_sql_server_settings
	 : ((PASSWORD  EQUAL  (password = stringtext | password_hash = binary_  HASHED))  pwd_strategies?)?  (COMMA?  SID  EQUAL  sid = binary_)?  (COMMA?  DEFAULT_DATABASE  EQUAL  database_id)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  language)?  (COMMA?  CHECK_EXPIRATION  EQUAL  check_expiration = on_off)?  (COMMA?  CHECK_POLICY  EQUAL  check_policy = on_off)?  (COMMA?  CREDENTIAL  EQUAL  credential_id)?";
        
        internal AstCreateLoginSqlServerSettings(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateLoginSqlServerSettings(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateLoginSqlServerSettings(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateLoginSqlServerSettings(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginSqlServerSettings(this);
        }
        
        /// <summary>
        ///  : 
        ///    PASSWORD EQUAL password=stringtext pwd_strategies? COMMA? SID EQUAL sid=binary_ COMMA? DEFAULT_DATABASE EQUAL database_id COMMA? DEFAULT_LANGUAGE EQUAL language COMMA? CHECK_EXPIRATION EQUAL check_expiration=on_off COMMA? CHECK_POLICY EQUAL check_policy=on_off COMMA? CREDENTIAL EQUAL credential_id 
        /// </summary>
        public static AstCreateLoginSqlServerSettings CreateLoginSqlServerSettings(AstStringtext password, AstPwdStrategies pwdStrategies, AstBinary sid, AstDatabaseId databaseId, AstLanguage language, AstOnOff checkExpiration, AstOnOff checkPolicy, AstCredentialId credentialId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateLoginSqlServerSettings result = new AstCreateLoginSqlServerSettings(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    PASSWORD EQUAL password_hash=binary_ HASHED pwd_strategies? COMMA? SID EQUAL sid=binary_ COMMA? DEFAULT_DATABASE EQUAL database_id COMMA? DEFAULT_LANGUAGE EQUAL language COMMA? CHECK_EXPIRATION EQUAL check_expiration=on_off COMMA? CHECK_POLICY EQUAL check_policy=on_off COMMA? CREDENTIAL EQUAL credential_id 
        /// </summary>
        public static AstCreateLoginSqlServerSettings CreateLoginSqlServerSettings(AstBinary passwordHash, AstPwdStrategies pwdStrategies, AstBinary sid, AstDatabaseId databaseId, AstLanguage language, AstOnOff checkExpiration, AstOnOff checkPolicy, AstCredentialId credentialId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateLoginSqlServerSettings result = new AstCreateLoginSqlServerSettings(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_login_sql_server_from
    /// 	 : WINDOWS  (WITH  (COMMA?  DEFAULT_DATABASE  EQUAL  database_id)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  default_language = stringtext)?)
    /// 	 | CERTIFICATE  certificate_id
    /// 	 | ASYMMETRIC  KEY  asym_key_id
    /// </summary>
    public partial class AstCreateLoginSqlServerFrom : AstRule
    {
        
        protected static string _rule = "create_login_sql_server_from\r\n\t : WINDOWS  (WITH  (COMMA?  DEFAULT_DATABASE  EQUA" +
            "L  database_id)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  default_language = stringtex" +
            "t)?)\r\n\t | CERTIFICATE  certificate_id\r\n\t | ASYMMETRIC  KEY  asym_key_id";
        
        internal AstCreateLoginSqlServerFrom(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateLoginSqlServerFrom(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateLoginSqlServerFrom(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateLoginSqlServerFrom(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginSqlServerFrom(this);
        }
        
        /// <summary>
        ///  : 
        ///    WINDOWS WITH COMMA? DEFAULT_DATABASE EQUAL database_id COMMA? DEFAULT_LANGUAGE EQUAL default_language=stringtext 
        /// </summary>
        public static AstCreateLoginSqlServerFrom CreateLoginSqlServerFrom(AstDatabaseId databaseId, AstStringtext defaultLanguage)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateLoginSqlServerFrom result = new AstCreateLoginSqlServerFrom(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CERTIFICATE certificate_id 
        /// </summary>
        public static AstCreateLoginSqlServerFrom CreateLoginSqlServerFrom(AstCertificateId certificateId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateLoginSqlServerFrom result = new AstCreateLoginSqlServerFrom(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public static AstCreateLoginSqlServerFrom CreateLoginSqlServerFrom(AstAsymKeyId asymKeyId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateLoginSqlServerFrom result = new AstCreateLoginSqlServerFrom(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_login_azure_sql_infos
    /// 	 : enable_disable?
    /// 	 | WITH  alter_login_azure_sql_with
    /// </summary>
    public partial class AstAlterLoginAzureSqlInfos : AstRule
    {
        
        protected static string _rule = "alter_login_azure_sql_infos\r\n\t : enable_disable?\r\n\t | WITH  alter_login_azure_sql" +
            "_with";
        
        internal AstAlterLoginAzureSqlInfos(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterLoginAzureSqlInfos(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterLoginAzureSqlInfos(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterLoginAzureSqlInfos(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginAzureSqlInfos(this);
        }
        
        /// <summary>
        /// enable_disable : 
        ///    enable_disable? 
        /// </summary>
        public static AstAlterLoginAzureSqlInfos AlterLoginAzureSqlInfos(AstEnableDisable enableDisable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterLoginAzureSqlInfos result = new AstAlterLoginAzureSqlInfos(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    WITH alter_login_azure_sql_with 
        /// </summary>
        public static AstAlterLoginAzureSqlInfos AlterLoginAzureSqlInfos(AstAlterLoginAzureSqlWith alterLoginAzureSqlWith)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterLoginAzureSqlInfos result = new AstAlterLoginAzureSqlInfos(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_login_azure_sql_with
    /// 	 : PASSWORD  EQUAL  password = stringtext  (OLD_PASSWORD  EQUAL  old_password = stringtext)?
    /// 	 | NAME  EQUAL  login_id
    /// </summary>
    public partial class AstAlterLoginAzureSqlWith : AstRule
    {
        
        protected static string _rule = "alter_login_azure_sql_with\r\n\t : PASSWORD  EQUAL  password = stringtext  (OLD_PASS" +
            "WORD  EQUAL  old_password = stringtext)?\r\n\t | NAME  EQUAL  login_id";
        
        internal AstAlterLoginAzureSqlWith(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterLoginAzureSqlWith(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterLoginAzureSqlWith(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterLoginAzureSqlWith(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginAzureSqlWith(this);
        }
        
        /// <summary>
        ///  : 
        ///    PASSWORD EQUAL password=stringtext OLD_PASSWORD EQUAL old_password=stringtext 
        /// </summary>
        public static AstAlterLoginAzureSqlWith AlterLoginAzureSqlWith(AstStringtext password, AstStringtext oldPassword)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterLoginAzureSqlWith result = new AstAlterLoginAzureSqlWith(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    NAME EQUAL login_id 
        /// </summary>
        public static AstAlterLoginAzureSqlWith AlterLoginAzureSqlWith(AstLoginId loginId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterLoginAzureSqlWith result = new AstAlterLoginAzureSqlWith(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_master_key_sql_server
    /// 	 : ALTER  MASTER  KEY  (regenerate_mater_key | add_drop  add_master_key)
    /// </summary>
    public partial class AstAlterMasterKeySqlServer : AstDdlClause
    {
        
        protected static string _rule = "alter_master_key_sql_server\r\n\t : ALTER  MASTER  KEY  (regenerate_mater_key | add_" +
            "drop  add_master_key)";
        
        internal AstAlterMasterKeySqlServer(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterMasterKeySqlServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterMasterKeySqlServer(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterMasterKeySqlServer(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterMasterKeySqlServer(this);
        }
        
        /// <summary>
        ///  : 
        ///    ALTER MASTER KEY regenerate_mater_key 
        /// </summary>
        public static AstAlterMasterKeySqlServer AlterMasterKeySqlServer(AstRegenerateMaterKey regenerateMaterKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterMasterKeySqlServer result = new AstAlterMasterKeySqlServer(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ALTER MASTER KEY add_drop add_master_key 
        /// </summary>
        public static AstAlterMasterKeySqlServer AlterMasterKeySqlServer(AstAddDrop addDrop, AstAddMasterKey addMasterKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterMasterKeySqlServer result = new AstAlterMasterKeySqlServer(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_master_key_azure_sql
    /// 	 : ALTER  MASTER  KEY  (regenerate_mater_key | ADD  add_master_key | DROP  encryption_by_pwd)
    /// </summary>
    public partial class AstAlterMasterKeyAzureSql : AstDdlClause
    {
        
        protected static string _rule = "alter_master_key_azure_sql\r\n\t : ALTER  MASTER  KEY  (regenerate_mater_key | ADD  " +
            "add_master_key | DROP  encryption_by_pwd)";
        
        internal AstAlterMasterKeyAzureSql(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterMasterKeyAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterMasterKeyAzureSql(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterMasterKeyAzureSql(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterMasterKeyAzureSql(this);
        }
        
        /// <summary>
        ///  : 
        ///    ALTER MASTER KEY regenerate_mater_key 
        /// </summary>
        public static AstAlterMasterKeyAzureSql AlterMasterKeyAzureSql(AstRegenerateMaterKey regenerateMaterKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterMasterKeyAzureSql result = new AstAlterMasterKeyAzureSql(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ALTER MASTER KEY ADD add_master_key 
        /// </summary>
        public static AstAlterMasterKeyAzureSql AlterMasterKeyAzureSql(AstAddMasterKey addMasterKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterMasterKeyAzureSql result = new AstAlterMasterKeyAzureSql(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ALTER MASTER KEY DROP encryption_by_pwd 
        /// </summary>
        public static AstAlterMasterKeyAzureSql AlterMasterKeyAzureSql(AstEncryptionByPwd encryptionByPwd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterMasterKeyAzureSql result = new AstAlterMasterKeyAzureSql(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// add_master_key
    /// 	 : ENCRYPTION  BY  (SERVICE  MASTER  KEY | PASSWORD  EQUAL  encryption_password = stringtext)
    /// </summary>
    public partial class AstAddMasterKey : AstRule
    {
        
        protected static string _rule = "add_master_key\r\n\t : ENCRYPTION  BY  (SERVICE  MASTER  KEY | PASSWORD  EQUAL  encr" +
            "yption_password = stringtext)";
        
        internal AstAddMasterKey(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAddMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAddMasterKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAddMasterKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAddMasterKey(this);
        }
        
        /// <summary>
        ///  : 
        ///    ENCRYPTION BY PASSWORD EQUAL encryption_password=stringtext 
        /// </summary>
        public static AstAddMasterKey AddMasterKey(AstStringtext encryptionPassword)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAddMasterKey result = new AstAddMasterKey(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// message_validation_value
    /// 	 : message_validation_value_enum
    /// 	 | VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_id
    /// </summary>
    public partial class AstMessageValidationValue : AstRule
    {
        
        protected static string _rule = "message_validation_value\r\n\t : message_validation_value_enum\r\n\t | VALID_XML  WITH " +
            " SCHEMA  COLLECTION  schema_collection_id";
        
        internal AstMessageValidationValue(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstMessageValidationValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstMessageValidationValue(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstMessageValidationValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMessageValidationValue(this);
        }
        
        /// <summary>
        /// message_validation_value_enum : 
        ///    message_validation_value_enum 
        /// </summary>
        public static AstMessageValidationValue MessageValidationValue(AstMessageValidationValueEnum messageValidationValueEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstMessageValidationValue result = new AstMessageValidationValue(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    VALID_XML WITH SCHEMA COLLECTION schema_collection_id 
        /// </summary>
        public static AstMessageValidationValue MessageValidationValue(AstSchemaCollectionId schemaCollectionId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstMessageValidationValue result = new AstMessageValidationValue(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_resource_governor
    /// 	 : ALTER  RESOURCE  GOVERNOR  (disable_reconfigure | WITH  LR_BRACKET  CLASSIFIER_FUNCTION  EQUAL  (schema_func_proc_ref | NULL_)  RR_BRACKET | RESET  STATISTICS | WITH  LR_BRACKET  MAX_OUTSTANDING_IO_PER_VOLUME  EQUAL  max_outstanding_io_per_volume = decimal  RR_BRACKET)
    /// </summary>
    public partial class AstAlterResourceGovernor : AstDdlClause
    {
        
        protected static string _rule = @"alter_resource_governor
	 : ALTER  RESOURCE  GOVERNOR  (disable_reconfigure | WITH  LR_BRACKET  CLASSIFIER_FUNCTION  EQUAL  (schema_func_proc_ref | NULL_)  RR_BRACKET | RESET  STATISTICS | WITH  LR_BRACKET  MAX_OUTSTANDING_IO_PER_VOLUME  EQUAL  max_outstanding_io_per_volume = decimal  RR_BRACKET)";
        
        internal AstAlterResourceGovernor(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterResourceGovernor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterResourceGovernor(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterResourceGovernor(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterResourceGovernor(this);
        }
        
        /// <summary>
        ///  : 
        ///    ALTER RESOURCE GOVERNOR disable_reconfigure 
        /// </summary>
        public static AstAlterResourceGovernor AlterResourceGovernor(AstDisableReconfigure disableReconfigure)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterResourceGovernor result = new AstAlterResourceGovernor(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ALTER RESOURCE GOVERNOR WITH ( CLASSIFIER_FUNCTION EQUAL schema_func_proc_ref ) 
        /// </summary>
        public static AstAlterResourceGovernor AlterResourceGovernor(AstSchemaFuncProcRef schemaFuncProcRef)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterResourceGovernor result = new AstAlterResourceGovernor(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ALTER RESOURCE GOVERNOR WITH ( MAX_OUTSTANDING_IO_PER_VOLUME EQUAL max_outstanding_io_per_volume=decimal ) 
        /// </summary>
        public static AstAlterResourceGovernor AlterResourceGovernor(AstDecimal maxOutstandingIoPerVolume)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterResourceGovernor result = new AstAlterResourceGovernor(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_db_role
    /// 	 : ALTER  ROLE  old_role_name = role_id  (add_drop  MEMBER  database_id | WITH  NAME  EQUAL  new_role_name = role_id)
    /// </summary>
    public partial class AstAlterDbRole : AstDdlClause
    {
        
        protected static string _rule = "alter_db_role\r\n\t : ALTER  ROLE  old_role_name = role_id  (add_drop  MEMBER  datab" +
            "ase_id | WITH  NAME  EQUAL  new_role_name = role_id)";
        
        internal AstAlterDbRole(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterDbRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterDbRole(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterDbRole(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterDbRole(this);
        }
        
        /// <summary>
        ///  : 
        ///    ALTER ROLE old_role_name=role_id add_drop MEMBER database_id 
        /// </summary>
        public static AstAlterDbRole AlterDbRole(AstRoleId oldRoleName, AstAddDrop addDrop, AstDatabaseId databaseId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterDbRole result = new AstAlterDbRole(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ALTER ROLE old_role_name=role_id WITH NAME EQUAL new_role_name=role_id 
        /// </summary>
        public static AstAlterDbRole AlterDbRole(AstRoleId oldRoleName, AstRoleId newRoleName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterDbRole result = new AstAlterDbRole(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_schema_name
    /// 	 : schema_id  schema_authorization?
    /// 	 | schema_id?  schema_authorization
    /// </summary>
    public partial class AstCreateSchemaName : AstRule
    {
        
        protected static string _rule = "create_schema_name\r\n\t : schema_id  schema_authorization?\r\n\t | schema_id?  schema_" +
            "authorization";
        
        internal AstCreateSchemaName(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateSchemaName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateSchemaName(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateSchemaName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSchemaName(this);
        }
        
        /// <summary>
        ///  : 
        ///    schema_id schema_authorization? 
        /// </summary>
        public static AstCreateSchemaName CreateSchemaName(AstSchemaId schemaId, AstSchemaAuthorization schemaAuthorization)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateSchemaName result = new AstCreateSchemaName(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_schema_target
    /// 	 : create_table
    /// 	 | create_view
    /// 	 | grant_deny  enum_dml  ON  (SCHEMA  DOUBLE_COLON)?  object_id  TO  owner_id
    /// 	 | REVOKE  enum_dml  ON  (SCHEMA  DOUBLE_COLON)?  object_id  FROM  owner_id
    /// </summary>
    public partial class AstCreateSchemaTarget : AstRule
    {
        
        protected static string _rule = "create_schema_target\r\n\t : create_table\r\n\t | create_view\r\n\t | grant_deny  enum_dml" +
            "  ON  (SCHEMA  DOUBLE_COLON)?  object_id  TO  owner_id\r\n\t | REVOKE  enum_dml  ON" +
            "  (SCHEMA  DOUBLE_COLON)?  object_id  FROM  owner_id";
        
        internal AstCreateSchemaTarget(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateSchemaTarget(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateSchemaTarget(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateSchemaTarget(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSchemaTarget(this);
        }
        
        /// <summary>
        /// create_table : 
        ///    create_table 
        /// </summary>
        public static AstCreateSchemaTarget CreateSchemaTarget(AstCreateTable createTable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateSchemaTarget result = new AstCreateSchemaTarget(arguments);
            return result;
        }
        
        /// <summary>
        /// create_view : 
        ///    create_view 
        /// </summary>
        public static AstCreateSchemaTarget CreateSchemaTarget(AstCreateView createView)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateSchemaTarget result = new AstCreateSchemaTarget(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    grant_deny enum_dml ON SCHEMA :: object_id TO owner_id 
        /// </summary>
        public static AstCreateSchemaTarget CreateSchemaTarget(AstGrantDeny grantDeny, AstEnumDml enumDml, AstObjectId objectId, AstOwnerId ownerId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateSchemaTarget result = new AstCreateSchemaTarget(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    REVOKE enum_dml ON SCHEMA :: object_id FROM owner_id 
        /// </summary>
        public static AstCreateSchemaTarget CreateSchemaTarget(AstEnumDml enumDml, AstObjectId objectId, AstOwnerId ownerId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateSchemaTarget result = new AstCreateSchemaTarget(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// schema_table_ref_impact
    /// 	 : AFTER  insert_update
    /// 	 | BEFORE  update_delate
    /// </summary>
    public partial class AstSchemaTableRefImpact : AstRule
    {
        
        protected static string _rule = "schema_table_ref_impact\r\n\t : AFTER  insert_update\r\n\t | BEFORE  update_delate";
        
        internal AstSchemaTableRefImpact(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSchemaTableRefImpact(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSchemaTableRefImpact(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSchemaTableRefImpact(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaTableRefImpact(this);
        }
        
        /// <summary>
        ///  : 
        ///    AFTER insert_update 
        /// </summary>
        public static AstSchemaTableRefImpact SchemaTableRefImpact(AstInsertUpdate insertUpdate)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSchemaTableRefImpact result = new AstSchemaTableRefImpact(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    BEFORE update_delate 
        /// </summary>
        public static AstSchemaTableRefImpact SchemaTableRefImpact(AstUpdateDelate updateDelate)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSchemaTableRefImpact result = new AstSchemaTableRefImpact(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_sequence_restart
    /// 	 : RESTART  (WITH  decimal)?
    /// </summary>
    public partial class AstAlterSequenceRestart : AstRule
    {
        
        protected static string _rule = "alter_sequence_restart\r\n\t : RESTART  (WITH  decimal)?";
        
        internal AstAlterSequenceRestart(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterSequenceRestart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterSequenceRestart(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterSequenceRestart(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSequenceRestart(this);
        }
        
        /// <summary>
        ///  : 
        ///    RESTART WITH decimal 
        /// </summary>
        public static AstAlterSequenceRestart AlterSequenceRestart(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterSequenceRestart result = new AstAlterSequenceRestart(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_sequence_increment
    /// 	 : INCREMENT  BY  sequnce_increment = decimal
    /// </summary>
    public partial class AstAlterSequenceIncrement : AstRule
    {
        
        protected static string _rule = "alter_sequence_increment\r\n\t : INCREMENT  BY  sequnce_increment = decimal";
        
        internal AstAlterSequenceIncrement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterSequenceIncrement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterSequenceIncrement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterSequenceIncrement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSequenceIncrement(this);
        }
        
        /// <summary>
        ///  : 
        ///    INCREMENT BY sequnce_increment=decimal 
        /// </summary>
        public static AstAlterSequenceIncrement AlterSequenceIncrement(AstDecimal sequnceIncrement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterSequenceIncrement result = new AstAlterSequenceIncrement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// sequence_cache
    /// 	 : (CACHE  decimal | NO  CACHE)
    /// </summary>
    public partial class AstSequenceCache : AstRule
    {
        
        protected static string _rule = "sequence_cache\r\n\t : (CACHE  decimal | NO  CACHE)";
        
        internal AstSequenceCache(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSequenceCache(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSequenceCache(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSequenceCache(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSequenceCache(this);
        }
        
        /// <summary>
        ///  : 
        ///    CACHE decimal 
        /// </summary>
        public static AstSequenceCache SequenceCache(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSequenceCache result = new AstSequenceCache(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_sequence_max_value
    /// 	 : (MAXVALUE  decimal | NO  MAXVALUE)?
    /// </summary>
    public partial class AstAlterSequenceMaxValue : AstRule
    {
        
        protected static string _rule = "alter_sequence_max_value\r\n\t : (MAXVALUE  decimal | NO  MAXVALUE)?";
        
        internal AstAlterSequenceMaxValue(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterSequenceMaxValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterSequenceMaxValue(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterSequenceMaxValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSequenceMaxValue(this);
        }
        
        /// <summary>
        ///  : 
        ///    MAXVALUE decimal 
        /// </summary>
        public static AstAlterSequenceMaxValue AlterSequenceMaxValue(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterSequenceMaxValue result = new AstAlterSequenceMaxValue(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_sequence_min_value
    /// 	 : MINVALUE  decimal
    /// 	 | NO  MINVALUE
    /// </summary>
    public partial class AstAlterSequenceMinValue : AstRule
    {
        
        protected static string _rule = "alter_sequence_min_value\r\n\t : MINVALUE  decimal\r\n\t | NO  MINVALUE";
        
        internal AstAlterSequenceMinValue(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterSequenceMinValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterSequenceMinValue(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterSequenceMinValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSequenceMinValue(this);
        }
        
        /// <summary>
        ///  : 
        ///    MINVALUE decimal 
        /// </summary>
        public static AstAlterSequenceMinValue AlterSequenceMinValue(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterSequenceMinValue result = new AstAlterSequenceMinValue(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_sequence_min_value
    /// 	 : MINVALUE  real?
    /// 	 | NO  MINVALUE
    /// </summary>
    public partial class AstCreateSequenceMinValue : AstRule
    {
        
        protected static string _rule = "create_sequence_min_value\r\n\t : MINVALUE  real?\r\n\t | NO  MINVALUE";
        
        internal AstCreateSequenceMinValue(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateSequenceMinValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateSequenceMinValue(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateSequenceMinValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSequenceMinValue(this);
        }
        
        /// <summary>
        ///  : 
        ///    MINVALUE real? 
        /// </summary>
        public static AstCreateSequenceMinValue CreateSequenceMinValue(AstReal real)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateSequenceMinValue result = new AstCreateSequenceMinValue(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_sequence_max_value
    /// 	 : MAXVALUE  real?
    /// 	 | NO  MAXVALUE
    /// </summary>
    public partial class AstCreateSequenceMaxValue : AstRule
    {
        
        protected static string _rule = "create_sequence_max_value\r\n\t : MAXVALUE  real?\r\n\t | NO  MAXVALUE";
        
        internal AstCreateSequenceMaxValue(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateSequenceMaxValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateSequenceMaxValue(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateSequenceMaxValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSequenceMaxValue(this);
        }
        
        /// <summary>
        ///  : 
        ///    MAXVALUE real? 
        /// </summary>
        public static AstCreateSequenceMaxValue CreateSequenceMaxValue(AstReal real)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateSequenceMaxValue result = new AstCreateSequenceMaxValue(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_server_audit_infos
    /// 	 : (TO  server_audit_file)?  with_server_audit_file?  where_server_audit_condition?
    /// 	 | REMOVE  WHERE
    /// 	 | MODIFY  NAME  EQUAL  audit_id
    /// </summary>
    public partial class AstAlterServerAuditInfos : AstRule
    {
        
        protected static string _rule = "alter_server_audit_infos\r\n\t : (TO  server_audit_file)?  with_server_audit_file?  " +
            "where_server_audit_condition?\r\n\t | REMOVE  WHERE\r\n\t | MODIFY  NAME  EQUAL  audit" +
            "_id";
        
        internal AstAlterServerAuditInfos(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterServerAuditInfos(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterServerAuditInfos(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterServerAuditInfos(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerAuditInfos(this);
        }
        
        /// <summary>
        ///  : 
        ///    TO server_audit_file with_server_audit_file? where_server_audit_condition? 
        /// </summary>
        public static AstAlterServerAuditInfos AlterServerAuditInfos(AstServerAuditFile serverAuditFile, AstWithServerAuditFile withServerAuditFile, AstWhereServerAuditCondition whereServerAuditCondition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServerAuditInfos result = new AstAlterServerAuditInfos(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    MODIFY NAME EQUAL audit_id 
        /// </summary>
        public static AstAlterServerAuditInfos AlterServerAuditInfos(AstAuditId auditId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServerAuditInfos result = new AstAlterServerAuditInfos(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// server_audit_file_info
    /// 	 : QUEUE_DELAY  EQUAL  queue_delay = decimal
    /// 	 | ON_FAILURE  EQUAL  continue_shutdown
    /// 	 | STATE  EQUAL  on_off
    /// </summary>
    public partial class AstServerAuditFileInfo : AstRule
    {
        
        protected static string _rule = "server_audit_file_info\r\n\t : QUEUE_DELAY  EQUAL  queue_delay = decimal\r\n\t | ON_FAI" +
            "LURE  EQUAL  continue_shutdown\r\n\t | STATE  EQUAL  on_off";
        
        internal AstServerAuditFileInfo(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstServerAuditFileInfo(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstServerAuditFileInfo(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstServerAuditFileInfo(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerAuditFileInfo(this);
        }
        
        /// <summary>
        ///  : 
        ///    QUEUE_DELAY EQUAL queue_delay=decimal 
        /// </summary>
        public static AstServerAuditFileInfo ServerAuditFileInfo(AstDecimal queueDelay)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerAuditFileInfo result = new AstServerAuditFileInfo(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ON_FAILURE EQUAL continue_shutdown 
        /// </summary>
        public static AstServerAuditFileInfo ServerAuditFileInfo(AstContinueShutdown continueShutdown)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerAuditFileInfo result = new AstServerAuditFileInfo(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    STATE EQUAL on_off 
        /// </summary>
        public static AstServerAuditFileInfo ServerAuditFileInfo(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerAuditFileInfo result = new AstServerAuditFileInfo(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// server_audit_file
    /// 	 : FILE  LR_BRACKET  server_audit_file_specs?  RR_BRACKET
    /// 	 | APPLICATION_LOG
    /// 	 | SECURITY_LOG
    /// </summary>
    public partial class AstServerAuditFile : AstRule
    {
        
        protected static string _rule = "server_audit_file\r\n\t : FILE  LR_BRACKET  server_audit_file_specs?  RR_BRACKET\r\n\t " +
            "| APPLICATION_LOG\r\n\t | SECURITY_LOG";
        
        internal AstServerAuditFile(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstServerAuditFile(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstServerAuditFile(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstServerAuditFile(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerAuditFile(this);
        }
        
        /// <summary>
        ///  : 
        ///    FILE ( server_audit_file_specs? ) 
        /// </summary>
        public static AstServerAuditFile ServerAuditFile(AstServerAuditFileSpecs serverAuditFileSpecs)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerAuditFile result = new AstServerAuditFile(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// server_audit_file_spec
    /// 	 : FILEPATH  EQUAL  filepath = stringtext
    /// 	 | MAXSIZE  EQUAL  decimal_size_unlimited
    /// 	 | MAX_ROLLOVER_FILES  EQUAL  max_rollover_files = decimal_unlimited
    /// 	 | MAX_FILES  EQUAL  max_files = decimal
    /// 	 | RESERVE_DISK_SPACE  EQUAL  on_off
    /// </summary>
    public partial class AstServerAuditFileSpec : AstRule
    {
        
        protected static string _rule = @"server_audit_file_spec
	 : FILEPATH  EQUAL  filepath = stringtext
	 | MAXSIZE  EQUAL  decimal_size_unlimited
	 | MAX_ROLLOVER_FILES  EQUAL  max_rollover_files = decimal_unlimited
	 | MAX_FILES  EQUAL  max_files = decimal
	 | RESERVE_DISK_SPACE  EQUAL  on_off";
        
        internal AstServerAuditFileSpec(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstServerAuditFileSpec(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstServerAuditFileSpec(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstServerAuditFileSpec(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerAuditFileSpec(this);
        }
        
        /// <summary>
        ///  : 
        ///    FILEPATH EQUAL filepath=stringtext 
        /// </summary>
        public static AstServerAuditFileSpec ServerAuditFileSpec(AstStringtext filepath)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerAuditFileSpec result = new AstServerAuditFileSpec(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    MAXSIZE EQUAL decimal_size_unlimited 
        /// </summary>
        public static AstServerAuditFileSpec ServerAuditFileSpec(AstDecimalSizeUnlimited decimalSizeUnlimited)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerAuditFileSpec result = new AstServerAuditFileSpec(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    MAX_ROLLOVER_FILES EQUAL max_rollover_files=decimal_unlimited 
        /// </summary>
        public static AstServerAuditFileSpec ServerAuditFileSpec(AstDecimalUnlimited maxRolloverFiles)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerAuditFileSpec result = new AstServerAuditFileSpec(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    MAX_FILES EQUAL max_files=decimal 
        /// </summary>
        public static AstServerAuditFileSpec ServerAuditFileSpec(AstDecimal maxFiles)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerAuditFileSpec result = new AstServerAuditFileSpec(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    RESERVE_DISK_SPACE EQUAL on_off 
        /// </summary>
        public static AstServerAuditFileSpec ServerAuditFileSpec(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerAuditFileSpec result = new AstServerAuditFileSpec(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// decimal_unlimited
    /// 	 : decimal
    /// 	 | UNLIMITED
    /// </summary>
    public partial class AstDecimalUnlimited : AstRule
    {
        
        protected static string _rule = "decimal_unlimited\r\n\t : decimal\r\n\t | UNLIMITED";
        
        internal AstDecimalUnlimited(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDecimalUnlimited(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDecimalUnlimited(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDecimalUnlimited(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecimalUnlimited(this);
        }
        
        /// <summary>
        /// decimal : 
        ///    decimal 
        /// </summary>
        public static AstDecimalUnlimited DecimalUnlimited(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDecimalUnlimited result = new AstDecimalUnlimited(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// decimal_size_unlimited
    /// 	 : (decimal  size_unity | UNLIMITED)
    /// </summary>
    public partial class AstDecimalSizeUnlimited : AstRule
    {
        
        protected static string _rule = "decimal_size_unlimited\r\n\t : (decimal  size_unity | UNLIMITED)";
        
        internal AstDecimalSizeUnlimited(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDecimalSizeUnlimited(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDecimalSizeUnlimited(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDecimalSizeUnlimited(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecimalSizeUnlimited(this);
        }
        
        /// <summary>
        ///  : 
        ///    decimal size_unity 
        /// </summary>
        public static AstDecimalSizeUnlimited DecimalSizeUnlimited(AstDecimal @decimal, AstSizeUnity sizeUnity)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDecimalSizeUnlimited result = new AstDecimalSizeUnlimited(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_server_audit_condition
    /// 	 : COMMA?  (NOT?)  event_field_id  audit_operator  decimal_string
    /// 	 | COMMA?  and_or  NOT?  audit_operator  decimal_string
    /// </summary>
    public partial class AstAlterServerAuditCondition : AstRule
    {
        
        protected static string _rule = "alter_server_audit_condition\r\n\t : COMMA?  (NOT?)  event_field_id  audit_operator " +
            " decimal_string\r\n\t | COMMA?  and_or  NOT?  audit_operator  decimal_string";
        
        internal AstAlterServerAuditCondition(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterServerAuditCondition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterServerAuditCondition(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterServerAuditCondition(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerAuditCondition(this);
        }
        
        /// <summary>
        ///  : 
        ///    COMMA? NOT() event_field_id audit_operator decimal_string 
        /// </summary>
        public static AstAlterServerAuditCondition AlterServerAuditCondition(AstEventFieldId eventFieldId, AstAuditOperator auditOperator, AstDecimalString decimalString)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServerAuditCondition result = new AstAlterServerAuditCondition(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    COMMA? and_or NOT? audit_operator decimal_string 
        /// </summary>
        public static AstAlterServerAuditCondition AlterServerAuditCondition(AstAndOr andOr, AstAuditOperator auditOperator, AstDecimalString decimalString)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServerAuditCondition result = new AstAlterServerAuditCondition(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_server_audit_to_infos
    /// 	 : (TO  server_audit_file)?  (WITH  LR_BRACKET  create_server_audit_withs?  RR_BRACKET)?  where_server_audit_condition?
    /// 	 | REMOVE  WHERE
    /// 	 | MODIFY  NAME  EQUAL  audit_id
    /// </summary>
    public partial class AstCreateServerAuditToInfos : AstRule
    {
        
        protected static string _rule = "create_server_audit_to_infos\r\n\t : (TO  server_audit_file)?  (WITH  LR_BRACKET  cr" +
            "eate_server_audit_withs?  RR_BRACKET)?  where_server_audit_condition?\r\n\t | REMOV" +
            "E  WHERE\r\n\t | MODIFY  NAME  EQUAL  audit_id";
        
        internal AstCreateServerAuditToInfos(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateServerAuditToInfos(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateServerAuditToInfos(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateServerAuditToInfos(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerAuditToInfos(this);
        }
        
        /// <summary>
        ///  : 
        ///    TO server_audit_file WITH ( create_server_audit_withs? ) where_server_audit_condition? 
        /// </summary>
        public static AstCreateServerAuditToInfos CreateServerAuditToInfos(AstServerAuditFile serverAuditFile, AstCreateServerAuditWiths createServerAuditWiths, AstWhereServerAuditCondition whereServerAuditCondition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateServerAuditToInfos result = new AstCreateServerAuditToInfos(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    MODIFY NAME EQUAL audit_id 
        /// </summary>
        public static AstCreateServerAuditToInfos CreateServerAuditToInfos(AstAuditId auditId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateServerAuditToInfos result = new AstCreateServerAuditToInfos(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_server_audit_with
    /// 	 : QUEUE_DELAY  EQUAL  queue_delay = decimal
    /// 	 | ON_FAILURE  EQUAL  continue_shutdown
    /// 	 | STATE  EQUAL  state = on_off
    /// 	 | audit1 = audit_guid_id  EQUAL  audit2 = audit_guid_id
    /// </summary>
    public partial class AstCreateServerAuditWith : AstRule
    {
        
        protected static string _rule = "create_server_audit_with\r\n\t : QUEUE_DELAY  EQUAL  queue_delay = decimal\r\n\t | ON_F" +
            "AILURE  EQUAL  continue_shutdown\r\n\t | STATE  EQUAL  state = on_off\r\n\t | audit1 =" +
            " audit_guid_id  EQUAL  audit2 = audit_guid_id";
        
        internal AstCreateServerAuditWith(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateServerAuditWith(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateServerAuditWith(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateServerAuditWith(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerAuditWith(this);
        }
        
        /// <summary>
        ///  : 
        ///    QUEUE_DELAY EQUAL queue_delay=decimal 
        /// </summary>
        public static AstCreateServerAuditWith CreateServerAuditWith(AstDecimal queueDelay)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateServerAuditWith result = new AstCreateServerAuditWith(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ON_FAILURE EQUAL continue_shutdown 
        /// </summary>
        public static AstCreateServerAuditWith CreateServerAuditWith(AstContinueShutdown continueShutdown)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateServerAuditWith result = new AstCreateServerAuditWith(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    STATE EQUAL state=on_off 
        /// </summary>
        public static AstCreateServerAuditWith CreateServerAuditWith(AstOnOff state)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateServerAuditWith result = new AstCreateServerAuditWith(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    audit1=audit_guid_id EQUAL audit2=audit_guid_id 
        /// </summary>
        public static AstCreateServerAuditWith CreateServerAuditWith(AstAuditGuidId audit1, AstAuditGuidId audit2)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateServerAuditWith result = new AstCreateServerAuditWith(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_server_configuration
    /// 	 : ALTER  SERVER  CONFIGURATION  SET  (server_config_process_affinity | server_config_diagnostic_log | server_config_failover | HADR  CLUSTER  CONTEXT  EQUAL  (stringtext | LOCAL) | server_config_buffer_pool_ext | SET  SOFTNUMA  on_off)
    /// </summary>
    public partial class AstAlterServerConfiguration : AstDdlClause
    {
        
        protected static string _rule = @"alter_server_configuration
	 : ALTER  SERVER  CONFIGURATION  SET  (server_config_process_affinity | server_config_diagnostic_log | server_config_failover | HADR  CLUSTER  CONTEXT  EQUAL  (stringtext | LOCAL) | server_config_buffer_pool_ext | SET  SOFTNUMA  on_off)";
        
        internal AstAlterServerConfiguration(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterServerConfiguration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterServerConfiguration(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterServerConfiguration(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerConfiguration(this);
        }
        
        /// <summary>
        ///  : 
        ///    ALTER SERVER CONFIGURATION SET server_config_process_affinity 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(AstServerConfigProcessAffinity serverConfigProcessAffinity)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServerConfiguration result = new AstAlterServerConfiguration(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ALTER SERVER CONFIGURATION SET server_config_diagnostic_log 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(AstServerConfigDiagnosticLog serverConfigDiagnosticLog)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServerConfiguration result = new AstAlterServerConfiguration(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ALTER SERVER CONFIGURATION SET server_config_failover 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(AstServerConfigFailover serverConfigFailover)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServerConfiguration result = new AstAlterServerConfiguration(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ALTER SERVER CONFIGURATION SET HADR CLUSTER CONTEXT EQUAL stringtext 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServerConfiguration result = new AstAlterServerConfiguration(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ALTER SERVER CONFIGURATION SET server_config_buffer_pool_ext 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(AstServerConfigBufferPoolExt serverConfigBufferPoolExt)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServerConfiguration result = new AstAlterServerConfiguration(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ALTER SERVER CONFIGURATION SET SET SOFTNUMA on_off 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServerConfiguration result = new AstAlterServerConfiguration(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// server_config_process_affinity
    /// 	 : PROCESS  AFFINITY  (CPU  EQUAL  (AUTO | decimal_range  decimal_ranges) | NUMANODE  EQUAL  decimal_range  decimal_ranges)
    /// </summary>
    public partial class AstServerConfigProcessAffinity : AstRule
    {
        
        protected static string _rule = "server_config_process_affinity\r\n\t : PROCESS  AFFINITY  (CPU  EQUAL  (AUTO | decim" +
            "al_range  decimal_ranges) | NUMANODE  EQUAL  decimal_range  decimal_ranges)";
        
        internal AstServerConfigProcessAffinity(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstServerConfigProcessAffinity(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstServerConfigProcessAffinity(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstServerConfigProcessAffinity(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerConfigProcessAffinity(this);
        }
        
        /// <summary>
        ///  : 
        ///    PROCESS AFFINITY CPU EQUAL decimal_range decimal_ranges 
        /// </summary>
        public static AstServerConfigProcessAffinity ServerConfigProcessAffinity(AstDecimalRange decimalRange, AstDecimalRanges decimalRanges)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerConfigProcessAffinity result = new AstServerConfigProcessAffinity(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// server_config_diagnostic_log
    /// 	 : DIAGNOSTICS  LOG  (on_off | PATH  EQUAL  string_or_default | MAX_SIZE  EQUAL  size_value | MAX_FILES  EQUAL  decimal_default)
    /// </summary>
    public partial class AstServerConfigDiagnosticLog : AstRule
    {
        
        protected static string _rule = "server_config_diagnostic_log\r\n\t : DIAGNOSTICS  LOG  (on_off | PATH  EQUAL  string" +
            "_or_default | MAX_SIZE  EQUAL  size_value | MAX_FILES  EQUAL  decimal_default)";
        
        internal AstServerConfigDiagnosticLog(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstServerConfigDiagnosticLog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstServerConfigDiagnosticLog(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstServerConfigDiagnosticLog(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerConfigDiagnosticLog(this);
        }
        
        /// <summary>
        ///  : 
        ///    DIAGNOSTICS LOG on_off 
        /// </summary>
        public static AstServerConfigDiagnosticLog ServerConfigDiagnosticLog(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerConfigDiagnosticLog result = new AstServerConfigDiagnosticLog(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DIAGNOSTICS LOG PATH EQUAL string_or_default 
        /// </summary>
        public static AstServerConfigDiagnosticLog ServerConfigDiagnosticLog(AstStringOrDefault stringOrDefault)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerConfigDiagnosticLog result = new AstServerConfigDiagnosticLog(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DIAGNOSTICS LOG MAX_SIZE EQUAL size_value 
        /// </summary>
        public static AstServerConfigDiagnosticLog ServerConfigDiagnosticLog(AstSizeValue sizeValue)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerConfigDiagnosticLog result = new AstServerConfigDiagnosticLog(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DIAGNOSTICS LOG MAX_FILES EQUAL decimal_default 
        /// </summary>
        public static AstServerConfigDiagnosticLog ServerConfigDiagnosticLog(AstDecimalDefault decimalDefault)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerConfigDiagnosticLog result = new AstServerConfigDiagnosticLog(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// server_config_failover
    /// 	 : FAILOVER  CLUSTER  PROPERTY  (VERBOSELOGGING  EQUAL  verboselogging = string_or_default | SQLDUMPERFLAGS  EQUAL  sqldumperflags = string_or_default | SQLDUMPERPATH  EQUAL  sqldumperpath = string_or_default | SQLDUMPERTIMEOUT  sqldumpertimeout = string_or_default | FAILURECONDITIONLEVEL  EQUAL  failure = string_or_default | HEALTHCHECKTIMEOUT  EQUAL  health = decimal_default)
    /// </summary>
    public partial class AstServerConfigFailover : AstRule
    {
        
        protected static string _rule = @"server_config_failover
	 : FAILOVER  CLUSTER  PROPERTY  (VERBOSELOGGING  EQUAL  verboselogging = string_or_default | SQLDUMPERFLAGS  EQUAL  sqldumperflags = string_or_default | SQLDUMPERPATH  EQUAL  sqldumperpath = string_or_default | SQLDUMPERTIMEOUT  sqldumpertimeout = string_or_default | FAILURECONDITIONLEVEL  EQUAL  failure = string_or_default | HEALTHCHECKTIMEOUT  EQUAL  health = decimal_default)";
        
        internal AstServerConfigFailover(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstServerConfigFailover(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstServerConfigFailover(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstServerConfigFailover(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerConfigFailover(this);
        }
        
        /// <summary>
        ///  : 
        ///    FAILOVER CLUSTER PROPERTY VERBOSELOGGING EQUAL verboselogging=string_or_default 
        /// </summary>
        public static AstServerConfigFailover ServerConfigFailover(AstStringOrDefault verboselogging)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerConfigFailover result = new AstServerConfigFailover(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    FAILOVER CLUSTER PROPERTY HEALTHCHECKTIMEOUT EQUAL health=decimal_default 
        /// </summary>
        public static AstServerConfigFailover ServerConfigFailover(AstDecimalDefault health)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerConfigFailover result = new AstServerConfigFailover(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// server_config_buffer_pool_ext
    /// 	 : BUFFER  POOL  EXTENSION  (ON  LR_BRACKET  FILENAME  EQUAL  filename = stringtext  COMMA  SIZE  EQUAL  size = decimal  size_unity  RR_BRACKET | OFF)
    /// </summary>
    public partial class AstServerConfigBufferPoolExt : AstRule
    {
        
        protected static string _rule = "server_config_buffer_pool_ext\r\n\t : BUFFER  POOL  EXTENSION  (ON  LR_BRACKET  FILE" +
            "NAME  EQUAL  filename = stringtext  COMMA  SIZE  EQUAL  size = decimal  size_uni" +
            "ty  RR_BRACKET | OFF)";
        
        internal AstServerConfigBufferPoolExt(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstServerConfigBufferPoolExt(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstServerConfigBufferPoolExt(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstServerConfigBufferPoolExt(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerConfigBufferPoolExt(this);
        }
        
        /// <summary>
        ///  : 
        ///    BUFFER POOL EXTENSION ON ( FILENAME EQUAL filename=stringtext , SIZE EQUAL size=decimal size_unity ) 
        /// </summary>
        public static AstServerConfigBufferPoolExt ServerConfigBufferPoolExt(AstStringtext filename, AstDecimal size, AstSizeUnity sizeUnity)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerConfigBufferPoolExt result = new AstServerConfigBufferPoolExt(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// string_or_default
    /// 	 : stringtext
    /// 	 | DEFAULT
    /// </summary>
    public partial class AstStringOrDefault : AstRule
    {
        
        protected static string _rule = "string_or_default\r\n\t : stringtext\r\n\t | DEFAULT";
        
        internal AstStringOrDefault(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstStringOrDefault(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstStringOrDefault(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstStringOrDefault(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStringOrDefault(this);
        }
        
        /// <summary>
        /// stringtext : 
        ///    stringtext 
        /// </summary>
        public static AstStringOrDefault StringOrDefault(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstStringOrDefault result = new AstStringOrDefault(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// contract
    /// 	 : modified_contract_id
    /// 	 | DEFAULT
    /// </summary>
    public partial class AstContract : AstRule
    {
        
        protected static string _rule = "contract\r\n\t : modified_contract_id\r\n\t | DEFAULT";
        
        internal AstContract(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstContract(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstContract(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstContract(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContract(this);
        }
        
        /// <summary>
        /// modified_contract_id : 
        ///    modified_contract_id 
        /// </summary>
        public static AstContract Contract(AstModifiedContractId modifiedContractId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstContract result = new AstContract(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_service_master_key
    /// 	 : ALTER  SERVICE  MASTER  KEY  (FORCE?  REGENERATE | (WITH  (OLD_ACCOUNT  EQUAL  acold_account_name = stringtext  COMMA  OLD_PASSWORD  EQUAL  old_password = stringtext | NEW_ACCOUNT  EQUAL  new_account_name = stringtext  COMMA  NEW_PASSWORD  EQUAL  new_password = stringtext)?))
    /// </summary>
    public partial class AstAlterServiceMasterKey : AstDdlClause
    {
        
        protected static string _rule = @"alter_service_master_key
	 : ALTER  SERVICE  MASTER  KEY  (FORCE?  REGENERATE | (WITH  (OLD_ACCOUNT  EQUAL  acold_account_name = stringtext  COMMA  OLD_PASSWORD  EQUAL  old_password = stringtext | NEW_ACCOUNT  EQUAL  new_account_name = stringtext  COMMA  NEW_PASSWORD  EQUAL  new_password = stringtext)?))";
        
        internal AstAlterServiceMasterKey(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterServiceMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterServiceMasterKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterServiceMasterKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServiceMasterKey(this);
        }
        
        /// <summary>
        ///  : 
        ///    ALTER SERVICE MASTER KEY WITH OLD_ACCOUNT EQUAL acold_account_name=stringtext , OLD_PASSWORD EQUAL old_password=stringtext 
        /// </summary>
        public static AstAlterServiceMasterKey AlterServiceMasterKey(AstStringtext acoldAccountName, AstStringtext oldPassword)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServiceMasterKey result = new AstAlterServiceMasterKey(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_user_item
    /// 	 : NAME  EQUAL  user_id
    /// 	 | DEFAULT_SCHEMA  EQUAL  (schema_id | NULL_)
    /// 	 | LOGIN  EQUAL  login_id
    /// 	 | PASSWORD  EQUAL  newpwd = stringtext  (OLD_PASSWORD  EQUAL  oldpwd = stringtext)+
    /// 	 | DEFAULT_LANGUAGE  EQUAL  (NONE | lcid = decimal | language)
    /// 	 | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
    /// </summary>
    public partial class AstAlterUserItem : AstRule
    {
        
        protected static string _rule = @"alter_user_item
	 : NAME  EQUAL  user_id
	 | DEFAULT_SCHEMA  EQUAL  (schema_id | NULL_)
	 | LOGIN  EQUAL  login_id
	 | PASSWORD  EQUAL  newpwd = stringtext  (OLD_PASSWORD  EQUAL  oldpwd = stringtext)+
	 | DEFAULT_LANGUAGE  EQUAL  (NONE | lcid = decimal | language)
	 | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off";
        
        internal AstAlterUserItem(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterUserItem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterUserItem(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterUserItem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterUserItem(this);
        }
        
        /// <summary>
        ///  : 
        ///    NAME EQUAL user_id 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(AstUserId userId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserItem result = new AstAlterUserItem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DEFAULT_SCHEMA EQUAL schema_id 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(AstSchemaId schemaId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserItem result = new AstAlterUserItem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    LOGIN EQUAL login_id 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(AstLoginId loginId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserItem result = new AstAlterUserItem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    PASSWORD EQUAL newpwd=stringtext OLD_PASSWORD EQUAL oldpwd=stringtext 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(AstStringtext newpwd, AstStringtext oldpwd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserItem result = new AstAlterUserItem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DEFAULT_LANGUAGE EQUAL lcid=decimal 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(AstDecimal lcid)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserItem result = new AstAlterUserItem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DEFAULT_LANGUAGE EQUAL language 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(AstLanguage language)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserItem result = new AstAlterUserItem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserItem result = new AstAlterUserItem(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_user
    /// 	 : CREATE  USER  user_id  create_user_with_login
    /// 	 | CREATE  USER  create_user_windows_principal_id
    /// 	 | CREATE  USER  user_id  create_user_without_login?
    /// </summary>
    public partial class AstCreateUser : AstDdlClause
    {
        
        protected static string _rule = "create_user\r\n\t : CREATE  USER  user_id  create_user_with_login\r\n\t | CREATE  USER " +
            " create_user_windows_principal_id\r\n\t | CREATE  USER  user_id  create_user_withou" +
            "t_login?";
        
        internal AstCreateUser(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateUser(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateUser(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateUser(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateUser(this);
        }
        
        /// <summary>
        ///  : 
        ///    CREATE USER user_id create_user_with_login 
        /// </summary>
        public static AstCreateUser CreateUser(AstUserId userId, AstCreateUserWithLogin createUserWithLogin)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUser result = new AstCreateUser(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CREATE USER create_user_windows_principal_id 
        /// </summary>
        public static AstCreateUser CreateUser(AstCreateUserWindowsPrincipalId createUserWindowsPrincipalId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUser result = new AstCreateUser(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CREATE USER user_id create_user_without_login? 
        /// </summary>
        public static AstCreateUser CreateUser(AstUserId userId, AstCreateUserWithoutLogin createUserWithoutLogin)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUser result = new AstCreateUser(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_user_with_login
    /// 	 : (for_from  LOGIN  login_id)?  (WITH  user_settings_short*)?
    /// </summary>
    public partial class AstCreateUserWithLogin : AstRule
    {
        
        protected static string _rule = "create_user_with_login\r\n\t : (for_from  LOGIN  login_id)?  (WITH  user_settings_sh" +
            "ort*)?";
        
        internal AstCreateUserWithLogin(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateUserWithLogin(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateUserWithLogin(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateUserWithLogin(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateUserWithLogin(this);
        }
        
        /// <summary>
        ///  : 
        ///    for_from LOGIN login_id WITH user_settings_short* 
        /// </summary>
        public static AstCreateUserWithLogin CreateUserWithLogin(AstForFrom forFrom, AstLoginId loginId, IEnumerable<AstUserSettingsShort> userSettingsShort)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUserWithLogin result = new AstCreateUserWithLogin(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_user_without_login
    /// 	 : WITHOUT  LOGIN  user_settings_short*
    /// 	 | for_from  CERTIFICATE  certificate_id
    /// 	 | for_from  ASYMMETRIC  KEY  asym_key_id
    /// </summary>
    public partial class AstCreateUserWithoutLogin : AstRule
    {
        
        protected static string _rule = "create_user_without_login\r\n\t : WITHOUT  LOGIN  user_settings_short*\r\n\t | for_from" +
            "  CERTIFICATE  certificate_id\r\n\t | for_from  ASYMMETRIC  KEY  asym_key_id";
        
        internal AstCreateUserWithoutLogin(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateUserWithoutLogin(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateUserWithoutLogin(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateUserWithoutLogin(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateUserWithoutLogin(this);
        }
        
        /// <summary>
        ///  : 
        ///    WITHOUT LOGIN user_settings_short* 
        /// </summary>
        public static AstCreateUserWithoutLogin CreateUserWithoutLogin(IEnumerable<AstUserSettingsShort> userSettingsShort)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUserWithoutLogin result = new AstCreateUserWithoutLogin(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    for_from CERTIFICATE certificate_id 
        /// </summary>
        public static AstCreateUserWithoutLogin CreateUserWithoutLogin(AstForFrom forFrom, AstCertificateId certificateId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUserWithoutLogin result = new AstCreateUserWithoutLogin(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    for_from ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public static AstCreateUserWithoutLogin CreateUserWithoutLogin(AstForFrom forFrom, AstAsymKeyId asymKeyId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUserWithoutLogin result = new AstCreateUserWithoutLogin(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_user_windows_principal_id
    /// 	 : windows_principal_id  (WITH  user_settings*)?
    /// 	 | user_id  WITH  PASSWORD  EQUAL  password = stringtext  user_settings*
    /// 	 | user_id  FROM  EXTERNAL  PROVIDER
    /// </summary>
    public partial class AstCreateUserWindowsPrincipalId : AstRule
    {
        
        protected static string _rule = "create_user_windows_principal_id\r\n\t : windows_principal_id  (WITH  user_settings*" +
            ")?\r\n\t | user_id  WITH  PASSWORD  EQUAL  password = stringtext  user_settings*\r\n\t" +
            " | user_id  FROM  EXTERNAL  PROVIDER";
        
        internal AstCreateUserWindowsPrincipalId(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateUserWindowsPrincipalId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateUserWindowsPrincipalId(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateUserWindowsPrincipalId(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateUserWindowsPrincipalId(this);
        }
        
        /// <summary>
        ///  : 
        ///    windows_principal_id WITH user_settings* 
        /// </summary>
        public static AstCreateUserWindowsPrincipalId CreateUserWindowsPrincipalId(AstWindowsPrincipalId windowsPrincipalId, IEnumerable<AstUserSettings> userSettings)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUserWindowsPrincipalId result = new AstCreateUserWindowsPrincipalId(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    user_id WITH PASSWORD EQUAL password=stringtext user_settings* 
        /// </summary>
        public static AstCreateUserWindowsPrincipalId CreateUserWindowsPrincipalId(AstUserId userId, AstStringtext password, IEnumerable<AstUserSettings> userSettings)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUserWindowsPrincipalId result = new AstCreateUserWindowsPrincipalId(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    user_id FROM EXTERNAL PROVIDER 
        /// </summary>
        public static AstCreateUserWindowsPrincipalId CreateUserWindowsPrincipalId(AstUserId userId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUserWindowsPrincipalId result = new AstCreateUserWindowsPrincipalId(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// user_settings_short
    /// 	 : COMMA?  DEFAULT_SCHEMA  EQUAL  schema_id
    /// 	 | COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
    /// </summary>
    public partial class AstUserSettingsShort : AstRule
    {
        
        protected static string _rule = "user_settings_short\r\n\t : COMMA?  DEFAULT_SCHEMA  EQUAL  schema_id\r\n\t | COMMA?  AL" +
            "LOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off";
        
        internal AstUserSettingsShort(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstUserSettingsShort(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstUserSettingsShort(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstUserSettingsShort(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUserSettingsShort(this);
        }
        
        /// <summary>
        ///  : 
        ///    COMMA? DEFAULT_SCHEMA EQUAL schema_id 
        /// </summary>
        public static AstUserSettingsShort UserSettingsShort(AstSchemaId schemaId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUserSettingsShort result = new AstUserSettingsShort(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    COMMA? ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public static AstUserSettingsShort UserSettingsShort(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUserSettingsShort result = new AstUserSettingsShort(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// user_settings
    /// 	 : COMMA?  DEFAULT_SCHEMA  EQUAL  schema_id
    /// 	 | COMMA?  DEFAULT_LANGUAGE  EQUAL  (NONE | decimal | language)
    /// 	 | COMMA?  SID  EQUAL  binary_
    /// 	 | COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
    /// </summary>
    public partial class AstUserSettings : AstRule
    {
        
        protected static string _rule = "user_settings\r\n\t : COMMA?  DEFAULT_SCHEMA  EQUAL  schema_id\r\n\t | COMMA?  DEFAULT_" +
            "LANGUAGE  EQUAL  (NONE | decimal | language)\r\n\t | COMMA?  SID  EQUAL  binary_\r\n\t" +
            " | COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off";
        
        internal AstUserSettings(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstUserSettings(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstUserSettings(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstUserSettings(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUserSettings(this);
        }
        
        /// <summary>
        ///  : 
        ///    COMMA? DEFAULT_SCHEMA EQUAL schema_id 
        /// </summary>
        public static AstUserSettings UserSettings(AstSchemaId schemaId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUserSettings result = new AstUserSettings(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    COMMA? DEFAULT_LANGUAGE EQUAL decimal 
        /// </summary>
        public static AstUserSettings UserSettings(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUserSettings result = new AstUserSettings(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    COMMA? DEFAULT_LANGUAGE EQUAL language 
        /// </summary>
        public static AstUserSettings UserSettings(AstLanguage language)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUserSettings result = new AstUserSettings(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    COMMA? SID EQUAL binary_ 
        /// </summary>
        public static AstUserSettings UserSettings(AstBinary binary)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUserSettings result = new AstUserSettings(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    COMMA? ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public static AstUserSettings UserSettings(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUserSettings result = new AstUserSettings(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_user_azure_sql_dw
    /// 	 : CREATE  USER  user_id  (for_from  LOGIN  login_id | WITHOUT  LOGIN)?  (WITH  DEFAULT_SCHEMA  EQUAL  schema_id)?
    /// 	 | CREATE  USER  user_id  FROM  EXTERNAL  PROVIDER  (WITH  DEFAULT_SCHEMA  EQUAL  schema_id)?
    /// </summary>
    public partial class AstCreateUserAzureSqlDw : AstDdlClause
    {
        
        protected static string _rule = "create_user_azure_sql_dw\r\n\t : CREATE  USER  user_id  (for_from  LOGIN  login_id |" +
            " WITHOUT  LOGIN)?  (WITH  DEFAULT_SCHEMA  EQUAL  schema_id)?\r\n\t | CREATE  USER  " +
            "user_id  FROM  EXTERNAL  PROVIDER  (WITH  DEFAULT_SCHEMA  EQUAL  schema_id)?";
        
        internal AstCreateUserAzureSqlDw(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateUserAzureSqlDw(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateUserAzureSqlDw(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateUserAzureSqlDw(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateUserAzureSqlDw(this);
        }
        
        /// <summary>
        ///  : 
        ///    CREATE USER user_id for_from LOGIN login_id WITH DEFAULT_SCHEMA EQUAL schema_id 
        /// </summary>
        public static AstCreateUserAzureSqlDw CreateUserAzureSqlDw(AstUserId userId, AstForFrom forFrom, AstLoginId loginId, AstSchemaId schemaId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUserAzureSqlDw result = new AstCreateUserAzureSqlDw(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CREATE USER user_id WITHOUT LOGIN WITH DEFAULT_SCHEMA EQUAL schema_id 
        /// </summary>
        public static AstCreateUserAzureSqlDw CreateUserAzureSqlDw(AstUserId userId, AstSchemaId schemaId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUserAzureSqlDw result = new AstCreateUserAzureSqlDw(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_user_azure_sql_info
    /// 	 : (NAME  EQUAL  user_id | DEFAULT_SCHEMA  EQUAL  schema_id | LOGIN  EQUAL  login_id | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off)+
    /// </summary>
    public partial class AstAlterUserAzureSqlInfo : AstRule
    {
        
        protected static string _rule = "alter_user_azure_sql_info\r\n\t : (NAME  EQUAL  user_id | DEFAULT_SCHEMA  EQUAL  sch" +
            "ema_id | LOGIN  EQUAL  login_id | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on" +
            "_off)+";
        
        internal AstAlterUserAzureSqlInfo(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterUserAzureSqlInfo(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterUserAzureSqlInfo(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterUserAzureSqlInfo(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterUserAzureSqlInfo(this);
        }
        
        /// <summary>
        ///  : 
        ///    NAME EQUAL user_id 
        /// </summary>
        public static AstAlterUserAzureSqlInfo AlterUserAzureSqlInfo(AstUserId userId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserAzureSqlInfo result = new AstAlterUserAzureSqlInfo(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DEFAULT_SCHEMA EQUAL schema_id 
        /// </summary>
        public static AstAlterUserAzureSqlInfo AlterUserAzureSqlInfo(AstSchemaId schemaId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserAzureSqlInfo result = new AstAlterUserAzureSqlInfo(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    LOGIN EQUAL login_id 
        /// </summary>
        public static AstAlterUserAzureSqlInfo AlterUserAzureSqlInfo(AstLoginId loginId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserAzureSqlInfo result = new AstAlterUserAzureSqlInfo(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public static AstAlterUserAzureSqlInfo AlterUserAzureSqlInfo(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserAzureSqlInfo result = new AstAlterUserAzureSqlInfo(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_workload_group_using
    /// 	 : USING  (workload_group_pool_id | DEFAULT_DOUBLE_QUOTE)
    /// </summary>
    public partial class AstAlterWorkloadGroupUsing : AstRule
    {
        
        protected static string _rule = "alter_workload_group_using\r\n\t : USING  (workload_group_pool_id | DEFAULT_DOUBLE_Q" +
            "UOTE)";
        
        internal AstAlterWorkloadGroupUsing(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterWorkloadGroupUsing(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterWorkloadGroupUsing(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterWorkloadGroupUsing(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterWorkloadGroupUsing(this);
        }
        
        /// <summary>
        ///  : 
        ///    USING workload_group_pool_id 
        /// </summary>
        public static AstAlterWorkloadGroupUsing AlterWorkloadGroupUsing(AstWorkloadGroupPoolId workloadGroupPoolId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterWorkloadGroupUsing result = new AstAlterWorkloadGroupUsing(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// queue_settings
    /// 	 : WITH  (STATUS  EQUAL  status = on_off  COMMA?)?  (RETENTION  EQUAL  retention = on_off  COMMA?)?  (ACTIVATION  LR_BRACKET  (((STATUS  EQUAL  activation_status = on_off  COMMA?)?  (PROCEDURE_NAME  EQUAL  func_proc_name_database_schema_ref  COMMA?)?  (MAX_QUEUE_READERS  EQUAL  max_readers = decimal  COMMA?)?  (EXECUTE  AS  (SELF | username = stringtext | OWNER)  COMMA?)?) | DROP)  RR_BRACKET  COMMA?)?  (POISON_MESSAGE_HANDLING  LR_BRACKET  (STATUS  EQUAL  on_off)  RR_BRACKET)?
    /// </summary>
    public partial class AstQueueSettings : AstRule
    {
        
        protected static string _rule = @"queue_settings
	 : WITH  (STATUS  EQUAL  status = on_off  COMMA?)?  (RETENTION  EQUAL  retention = on_off  COMMA?)?  (ACTIVATION  LR_BRACKET  (((STATUS  EQUAL  activation_status = on_off  COMMA?)?  (PROCEDURE_NAME  EQUAL  func_proc_name_database_schema_ref  COMMA?)?  (MAX_QUEUE_READERS  EQUAL  max_readers = decimal  COMMA?)?  (EXECUTE  AS  (SELF | username = stringtext | OWNER)  COMMA?)?) | DROP)  RR_BRACKET  COMMA?)?  (POISON_MESSAGE_HANDLING  LR_BRACKET  (STATUS  EQUAL  on_off)  RR_BRACKET)?";
        
        internal AstQueueSettings(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstQueueSettings(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstQueueSettings(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstQueueSettings(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueSettings(this);
        }
        
        /// <summary>
        ///  : 
        ///    WITH STATUS EQUAL status=on_off COMMA? RETENTION EQUAL retention=on_off COMMA? ACTIVATION ( STATUS EQUAL activation_status=on_off COMMA? PROCEDURE_NAME EQUAL func_proc_name_database_schema_ref COMMA? MAX_QUEUE_READERS EQUAL max_readers=decimal COMMA? EXECUTE AS SELF COMMA? ) COMMA? POISON_MESSAGE_HANDLING ( STATUS EQUAL on_off ) 
        /// </summary>
        public static AstQueueSettings QueueSettings(AstOnOff status, AstOnOff retention, AstOnOff activationStatus, AstFuncProcNameDatabaseSchemaRef funcProcNameDatabaseSchemaRef, AstDecimal maxReaders, AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueueSettings result = new AstQueueSettings(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    WITH STATUS EQUAL status=on_off COMMA? RETENTION EQUAL retention=on_off COMMA? ACTIVATION ( STATUS EQUAL activation_status=on_off COMMA? PROCEDURE_NAME EQUAL func_proc_name_database_schema_ref COMMA? MAX_QUEUE_READERS EQUAL max_readers=decimal COMMA? EXECUTE AS username=stringtext COMMA? ) COMMA? POISON_MESSAGE_HANDLING ( STATUS EQUAL on_off ) 
        /// </summary>
        public static AstQueueSettings QueueSettings(AstOnOff status, AstOnOff retention, AstOnOff activationStatus, AstFuncProcNameDatabaseSchemaRef funcProcNameDatabaseSchemaRef, AstDecimal maxReaders, AstStringtext username, AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueueSettings result = new AstQueueSettings(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    WITH STATUS EQUAL status=on_off COMMA? RETENTION EQUAL retention=on_off COMMA? ACTIVATION ( DROP ) COMMA? POISON_MESSAGE_HANDLING ( STATUS EQUAL on_off ) 
        /// </summary>
        public static AstQueueSettings QueueSettings(AstOnOff status, AstOnOff retention, AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueueSettings result = new AstQueueSettings(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_queue
    /// 	 : ALTER  QUEUE  (complete_table_ref | queue_id)  (queue_settings | queue_action)
    /// </summary>
    public partial class AstAlterQueue : AstAnotherStatement
    {
        
        protected static string _rule = "alter_queue\r\n\t : ALTER  QUEUE  (complete_table_ref | queue_id)  (queue_settings |" +
            " queue_action)";
        
        internal AstAlterQueue(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterQueue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterQueue(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterQueue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterQueue(this);
        }
        
        /// <summary>
        ///  : 
        ///    ALTER QUEUE complete_table_ref queue_settings 
        /// </summary>
        public static AstAlterQueue AlterQueue(AstCompleteTableRef completeTableRef, AstQueueSettings queueSettings)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterQueue result = new AstAlterQueue(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ALTER QUEUE queue_id queue_settings 
        /// </summary>
        public static AstAlterQueue AlterQueue(AstQueueId queueId, AstQueueSettings queueSettings)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterQueue result = new AstAlterQueue(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ALTER QUEUE complete_table_ref queue_action 
        /// </summary>
        public static AstAlterQueue AlterQueue(AstCompleteTableRef completeTableRef, AstQueueAction queueAction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterQueue result = new AstAlterQueue(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ALTER QUEUE queue_id queue_action 
        /// </summary>
        public static AstAlterQueue AlterQueue(AstQueueId queueId, AstQueueAction queueAction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterQueue result = new AstAlterQueue(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// queue_action
    /// 	 : REBUILD  (WITH  LR_BRACKET  queue_rebuild_options  RR_BRACKET)?
    /// 	 | REORGANIZE  (WITH  LOB_COMPACTION  EQUAL  on_off)?
    /// 	 | MOVE  TO  (id_ | DEFAULT)
    /// </summary>
    public partial class AstQueueAction : AstRule
    {
        
        protected static string _rule = "queue_action\r\n\t : REBUILD  (WITH  LR_BRACKET  queue_rebuild_options  RR_BRACKET)?" +
            "\r\n\t | REORGANIZE  (WITH  LOB_COMPACTION  EQUAL  on_off)?\r\n\t | MOVE  TO  (id_ | D" +
            "EFAULT)";
        
        internal AstQueueAction(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstQueueAction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstQueueAction(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstQueueAction(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueAction(this);
        }
        
        /// <summary>
        ///  : 
        ///    REBUILD WITH ( queue_rebuild_options ) 
        /// </summary>
        public static AstQueueAction QueueAction(AstQueueRebuildOptions queueRebuildOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueueAction result = new AstQueueAction(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    REORGANIZE WITH LOB_COMPACTION EQUAL on_off 
        /// </summary>
        public static AstQueueAction QueueAction(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueueAction result = new AstQueueAction(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    MOVE TO id_ 
        /// </summary>
        public static AstQueueAction QueueAction(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueueAction result = new AstQueueAction(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// when_matche
    /// 	 : (WHEN  MATCHED  (AND  search_condition)?  THEN  merge_matched)+
    /// 	 | (WHEN  NOT  MATCHED  (BY  TARGET)?  (AND  search_condition)?  THEN  merge_not_matched)
    /// 	 | (WHEN  NOT  MATCHED  BY  SOURCE  (AND  search_condition)?  THEN  merge_matched)+
    /// </summary>
    public partial class AstWhenMatche : AstRule
    {
        
        protected static string _rule = @"when_matche
	 : (WHEN  MATCHED  (AND  search_condition)?  THEN  merge_matched)+
	 | (WHEN  NOT  MATCHED  (BY  TARGET)?  (AND  search_condition)?  THEN  merge_not_matched)
	 | (WHEN  NOT  MATCHED  BY  SOURCE  (AND  search_condition)?  THEN  merge_matched)+";
        
        internal AstWhenMatche(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstWhenMatche(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstWhenMatche(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstWhenMatche(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWhenMatche(this);
        }
        
        /// <summary>
        ///  : 
        ///    WHEN MATCHED AND search_condition THEN merge_matched+ 
        /// </summary>
        public static AstWhenMatche WhenMatche(AstSearchCondition searchCondition, AstMergeMatched mergeMatched)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstWhenMatche result = new AstWhenMatche(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    WHEN NOT MATCHED BY TARGET AND search_condition THEN merge_not_matched 
        /// </summary>
        public static AstWhenMatche WhenMatche(AstSearchCondition searchCondition, AstMergeNotMatched mergeNotMatched)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstWhenMatche result = new AstWhenMatche(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// merge_matched
    /// 	 : UPDATE  SET  update_elem_merges
    /// 	 | DELETE
    /// </summary>
    public partial class AstMergeMatched : AstRule
    {
        
        protected static string _rule = "merge_matched\r\n\t : UPDATE  SET  update_elem_merges\r\n\t | DELETE";
        
        internal AstMergeMatched(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstMergeMatched(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstMergeMatched(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstMergeMatched(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMergeMatched(this);
        }
        
        /// <summary>
        ///  : 
        ///    UPDATE SET update_elem_merges 
        /// </summary>
        public static AstMergeMatched MergeMatched(AstUpdateElemMerges updateElemMerges)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstMergeMatched result = new AstMergeMatched(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// merge_not_matched
    /// 	 : INSERT  (LR_BRACKET  column_name_list  RR_BRACKET)?  (table_value_constructor | DEFAULT  VALUES)
    /// </summary>
    public partial class AstMergeNotMatched : AstRule
    {
        
        protected static string _rule = "merge_not_matched\r\n\t : INSERT  (LR_BRACKET  column_name_list  RR_BRACKET)?  (tabl" +
            "e_value_constructor | DEFAULT  VALUES)";
        
        internal AstMergeNotMatched(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstMergeNotMatched(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstMergeNotMatched(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstMergeNotMatched(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMergeNotMatched(this);
        }
        
        /// <summary>
        ///  : 
        ///    INSERT ( column_name_list ) table_value_constructor 
        /// </summary>
        public static AstMergeNotMatched MergeNotMatched(AstColumnNameList columnNameList, AstTableValueConstructor tableValueConstructor)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstMergeNotMatched result = new AstMergeNotMatched(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    INSERT ( column_name_list ) DEFAULT VALUES 
        /// </summary>
        public static AstMergeNotMatched MergeNotMatched(AstColumnNameList columnNameList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstMergeNotMatched result = new AstMergeNotMatched(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// delete_statement_from
    /// 	 : ddl_object
    /// 	 | rowset_function_limited
    /// 	 | table_var = local_id
    /// </summary>
    public partial class AstDeleteStatementFrom : AstRule
    {
        
        protected static string _rule = "delete_statement_from\r\n\t : ddl_object\r\n\t | rowset_function_limited\r\n\t | table_var" +
            " = local_id";
        
        internal AstDeleteStatementFrom(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDeleteStatementFrom(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDeleteStatementFrom(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDeleteStatementFrom(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeleteStatementFrom(this);
        }
        
        /// <summary>
        /// ddl_object : 
        ///    ddl_object 
        /// </summary>
        public static AstDeleteStatementFrom DeleteStatementFrom(AstDdlObject ddlObject)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDeleteStatementFrom result = new AstDeleteStatementFrom(arguments);
            return result;
        }
        
        /// <summary>
        /// rowset_function_limited : 
        ///    rowset_function_limited 
        /// </summary>
        public static AstDeleteStatementFrom DeleteStatementFrom(AstRowsetFunctionLimited rowsetFunctionLimited)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDeleteStatementFrom result = new AstDeleteStatementFrom(arguments);
            return result;
        }
        
        /// <summary>
        /// local_id : 
        ///    table_var=local_id 
        /// </summary>
        public static AstDeleteStatementFrom DeleteStatementFrom(AstLocalId tableVar)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDeleteStatementFrom result = new AstDeleteStatementFrom(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// insert_statement_value
    /// 	 : table_value_constructor
    /// 	 | derived_table
    /// 	 | execute_statement
    /// 	 | DEFAULT  VALUES
    /// </summary>
    public partial class AstInsertStatementValue : AstRule
    {
        
        protected static string _rule = "insert_statement_value\r\n\t : table_value_constructor\r\n\t | derived_table\r\n\t | execu" +
            "te_statement\r\n\t | DEFAULT  VALUES";
        
        internal AstInsertStatementValue(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstInsertStatementValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstInsertStatementValue(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstInsertStatementValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitInsertStatementValue(this);
        }
        
        /// <summary>
        /// table_value_constructor : 
        ///    table_value_constructor 
        /// </summary>
        public static AstInsertStatementValue InsertStatementValue(AstTableValueConstructor tableValueConstructor)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstInsertStatementValue result = new AstInsertStatementValue(arguments);
            return result;
        }
        
        /// <summary>
        /// derived_table : 
        ///    derived_table 
        /// </summary>
        public static AstInsertStatementValue InsertStatementValue(AstDerivedTable derivedTable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstInsertStatementValue result = new AstInsertStatementValue(arguments);
            return result;
        }
        
        /// <summary>
        /// execute_statement : 
        ///    execute_statement 
        /// </summary>
        public static AstInsertStatementValue InsertStatementValue(AstExecuteStatement executeStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstInsertStatementValue result = new AstInsertStatementValue(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// receive_mode
    /// 	 : receive_mode_enum
    /// 	 | top_clause
    /// </summary>
    public partial class AstReceiveMode : AstRule
    {
        
        protected static string _rule = "receive_mode\r\n\t : receive_mode_enum\r\n\t | top_clause";
        
        internal AstReceiveMode(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstReceiveMode(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstReceiveMode(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstReceiveMode(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReceiveMode(this);
        }
        
        /// <summary>
        /// receive_mode_enum : 
        ///    receive_mode_enum 
        /// </summary>
        public static AstReceiveMode ReceiveMode(AstReceiveModeEnum receiveModeEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstReceiveMode result = new AstReceiveMode(arguments);
            return result;
        }
        
        /// <summary>
        /// top_clause : 
        ///    top_clause 
        /// </summary>
        public static AstReceiveMode ReceiveMode(AstTopClause topClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstReceiveMode result = new AstReceiveMode(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// time
    /// 	 : (local_id | constant)
    /// </summary>
    public partial class AstTime : AstRule
    {
        
        protected static string _rule = "time\r\n\t : (local_id | constant)";
        
        internal AstTime(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTime(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTime(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTime(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTime(this);
        }
        
        /// <summary>
        /// local_id : 
        ///    local_id 
        /// </summary>
        public static AstTime Time(AstLocalId localId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTime result = new AstTime(arguments);
            return result;
        }
        
        /// <summary>
        /// constant : 
        ///    constant 
        /// </summary>
        public static AstTime Time(AstConstant constant)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTime result = new AstTime(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// relational_index_option
    /// 	 : rebuild_index_option
    /// 	 | DROP_EXISTING  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// </summary>
    public partial class AstRelationalIndexOption : AstRule
    {
        
        protected static string _rule = "relational_index_option\r\n\t : rebuild_index_option\r\n\t | DROP_EXISTING  EQUAL  on_o" +
            "ff\r\n\t | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off";
        
        internal AstRelationalIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstRelationalIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstRelationalIndexOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstRelationalIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRelationalIndexOption(this);
        }
        
        /// <summary>
        /// rebuild_index_option : 
        ///    rebuild_index_option 
        /// </summary>
        public static AstRelationalIndexOption RelationalIndexOption(AstRebuildIndexOption rebuildIndexOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRelationalIndexOption result = new AstRelationalIndexOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DROP_EXISTING EQUAL on_off 
        /// </summary>
        public static AstRelationalIndexOption RelationalIndexOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRelationalIndexOption result = new AstRelationalIndexOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// index_status
    /// 	 : index_status_enum
    /// 	 | RESUME  resumable_index_options?
    /// 	 | reorganize_partition
    /// 	 | set_index_options
    /// 	 | rebuild_partition
    /// </summary>
    public partial class AstIndexStatus : AstRule
    {
        
        protected static string _rule = "index_status\r\n\t : index_status_enum\r\n\t | RESUME  resumable_index_options?\r\n\t | re" +
            "organize_partition\r\n\t | set_index_options\r\n\t | rebuild_partition";
        
        internal AstIndexStatus(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstIndexStatus(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstIndexStatus(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstIndexStatus(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIndexStatus(this);
        }
        
        /// <summary>
        /// index_status_enum : 
        ///    index_status_enum 
        /// </summary>
        public static AstIndexStatus IndexStatus(AstIndexStatusEnum indexStatusEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstIndexStatus result = new AstIndexStatus(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    RESUME resumable_index_options? 
        /// </summary>
        public static AstIndexStatus IndexStatus(AstResumableIndexOptions resumableIndexOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstIndexStatus result = new AstIndexStatus(arguments);
            return result;
        }
        
        /// <summary>
        /// reorganize_partition : 
        ///    reorganize_partition 
        /// </summary>
        public static AstIndexStatus IndexStatus(AstReorganizePartition reorganizePartition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstIndexStatus result = new AstIndexStatus(arguments);
            return result;
        }
        
        /// <summary>
        /// set_index_options : 
        ///    set_index_options 
        /// </summary>
        public static AstIndexStatus IndexStatus(AstSetIndexOptions setIndexOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstIndexStatus result = new AstIndexStatus(arguments);
            return result;
        }
        
        /// <summary>
        /// rebuild_partition : 
        ///    rebuild_partition 
        /// </summary>
        public static AstIndexStatus IndexStatus(AstRebuildPartition rebuildPartition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstIndexStatus result = new AstIndexStatus(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// index_name
    /// 	 : (id_ | ALL)
    /// </summary>
    public partial class AstIndexName : AstRule
    {
        
        protected static string _rule = "index_name\r\n\t : (id_ | ALL)";
        
        internal AstIndexName(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstIndexName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstIndexName(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstIndexName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIndexName(this);
        }
        
        /// <summary>
        /// id_ : 
        ///    id_ 
        /// </summary>
        public static AstIndexName IndexName(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstIndexName result = new AstIndexName(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// resumable_index_option
    /// 	 : MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | MAX_DURATION  EQUAL  max_duration = decimal  MINUTES?
    /// 	 | low_priority_lock_wait
    /// </summary>
    public partial class AstResumableIndexOption : AstRule
    {
        
        protected static string _rule = "resumable_index_option\r\n\t : MAXDOP  EQUAL  max_degree_of_parallelism = decimal\r\n\t" +
            " | MAX_DURATION  EQUAL  max_duration = decimal  MINUTES?\r\n\t | low_priority_lock_" +
            "wait";
        
        internal AstResumableIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstResumableIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstResumableIndexOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstResumableIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitResumableIndexOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public static AstResumableIndexOption ResumableIndexOption(AstDecimal maxDegreeOfParallelism)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstResumableIndexOption result = new AstResumableIndexOption(arguments);
            return result;
        }
        
        /// <summary>
        /// low_priority_lock_wait : 
        ///    low_priority_lock_wait 
        /// </summary>
        public static AstResumableIndexOption ResumableIndexOption(AstLowPriorityLockWait lowPriorityLockWait)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstResumableIndexOption result = new AstResumableIndexOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// reorganize_option
    /// 	 : LOB_COMPACTION  EQUAL  on_off
    /// 	 | COMPRESS_ALL_ROW_GROUPS  EQUAL  on_off
    /// </summary>
    public partial class AstReorganizeOption : AstRule
    {
        
        protected static string _rule = "reorganize_option\r\n\t : LOB_COMPACTION  EQUAL  on_off\r\n\t | COMPRESS_ALL_ROW_GROUPS" +
            "  EQUAL  on_off";
        
        internal AstReorganizeOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstReorganizeOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstReorganizeOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstReorganizeOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReorganizeOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    LOB_COMPACTION EQUAL on_off 
        /// </summary>
        public static AstReorganizeOption ReorganizeOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstReorganizeOption result = new AstReorganizeOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// set_index_option
    /// 	 : ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES?
    /// </summary>
    public partial class AstSetIndexOption : AstRule
    {
        
        protected static string _rule = @"set_index_option
	 : ALLOW_ROW_LOCKS  EQUAL  on_off
	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
	 | IGNORE_DUP_KEY  EQUAL  on_off
	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
	 | COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES?";
        
        internal AstSetIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSetIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSetIndexOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSetIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetIndexOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    ALLOW_ROW_LOCKS EQUAL on_off 
        /// </summary>
        public static AstSetIndexOption SetIndexOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetIndexOption result = new AstSetIndexOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    COMPRESSION_DELAY EQUAL delay=decimal MINUTES? 
        /// </summary>
        public static AstSetIndexOption SetIndexOption(AstDecimal delay)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetIndexOption result = new AstSetIndexOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// rebuild_partition
    /// 	 : REBUILD  (PARTITION  EQUAL  ALL)?  rebuild_index_options?
    /// 	 | REBUILD  PARTITION  EQUAL  decimal  single_partition_rebuild_index_options?
    /// </summary>
    public partial class AstRebuildPartition : AstRule
    {
        
        protected static string _rule = "rebuild_partition\r\n\t : REBUILD  (PARTITION  EQUAL  ALL)?  rebuild_index_options?\r" +
            "\n\t | REBUILD  PARTITION  EQUAL  decimal  single_partition_rebuild_index_options?" +
            "";
        
        internal AstRebuildPartition(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstRebuildPartition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstRebuildPartition(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstRebuildPartition(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRebuildPartition(this);
        }
        
        /// <summary>
        ///  : 
        ///    REBUILD PARTITION EQUAL ALL rebuild_index_options? 
        /// </summary>
        public static AstRebuildPartition RebuildPartition(AstRebuildIndexOptions rebuildIndexOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRebuildPartition result = new AstRebuildPartition(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    REBUILD PARTITION EQUAL decimal single_partition_rebuild_index_options? 
        /// </summary>
        public static AstRebuildPartition RebuildPartition(AstDecimal @decimal, AstSinglePartitionRebuildIndexOptions singlePartitionRebuildIndexOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRebuildPartition result = new AstRebuildPartition(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// rebuild_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  decimal
    /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | STATISTICS_INCREMENTAL  EQUAL  on_off
    /// 	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | MAX_DURATION  EQUAL  times = decimal  MINUTES?
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// </summary>
    public partial class AstRebuildIndexOption : AstRule
    {
        
        protected static string _rule = @"rebuild_index_option
	 : PAD_INDEX  EQUAL  on_off
	 | FILLFACTOR  EQUAL  decimal
	 | SORT_IN_TEMPDB  EQUAL  on_off
	 | IGNORE_DUP_KEY  EQUAL  on_off
	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
	 | STATISTICS_INCREMENTAL  EQUAL  on_off
	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
	 | RESUMABLE  EQUAL  on_off
	 | MAX_DURATION  EQUAL  times = decimal  MINUTES?
	 | ALLOW_ROW_LOCKS  EQUAL  on_off
	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
	 | DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions?
	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?";
        
        internal AstRebuildIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstRebuildIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstRebuildIndexOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstRebuildIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRebuildIndexOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    PAD_INDEX EQUAL on_off 
        /// </summary>
        public static AstRebuildIndexOption RebuildIndexOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRebuildIndexOption result = new AstRebuildIndexOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    FILLFACTOR EQUAL decimal 
        /// </summary>
        public static AstRebuildIndexOption RebuildIndexOption(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRebuildIndexOption result = new AstRebuildIndexOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ONLINE EQUAL ON ( low_priority_lock_wait ) 
        /// </summary>
        public static AstRebuildIndexOption RebuildIndexOption(AstLowPriorityLockWait lowPriorityLockWait)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRebuildIndexOption result = new AstRebuildIndexOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DATA_COMPRESSION EQUAL datacompression_mode on_partitions? 
        /// </summary>
        public static AstRebuildIndexOption RebuildIndexOption(AstDatacompressionMode datacompressionMode, AstOnPartitions onPartitions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRebuildIndexOption result = new AstRebuildIndexOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public static AstRebuildIndexOption RebuildIndexOption(AstOnOff onOff, AstOnPartitions onPartitions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRebuildIndexOption result = new AstRebuildIndexOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// single_partition_rebuild_index_option
    /// 	 : SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// 	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
    /// </summary>
    public partial class AstSinglePartitionRebuildIndexOption : AstRule
    {
        
        protected static string _rule = @"single_partition_rebuild_index_option
	 : SORT_IN_TEMPDB  EQUAL  on_off
	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
	 | RESUMABLE  EQUAL  on_off
	 | DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions?
	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)";
        
        internal AstSinglePartitionRebuildIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSinglePartitionRebuildIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSinglePartitionRebuildIndexOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSinglePartitionRebuildIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSinglePartitionRebuildIndexOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    SORT_IN_TEMPDB EQUAL on_off 
        /// </summary>
        public static AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSinglePartitionRebuildIndexOption result = new AstSinglePartitionRebuildIndexOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public static AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption(AstDecimal maxDegreeOfParallelism)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSinglePartitionRebuildIndexOption result = new AstSinglePartitionRebuildIndexOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DATA_COMPRESSION EQUAL datacompression_mode on_partitions? 
        /// </summary>
        public static AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption(AstDatacompressionMode datacompressionMode, AstOnPartitions onPartitions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSinglePartitionRebuildIndexOption result = new AstSinglePartitionRebuildIndexOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public static AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption(AstOnOff onOff, AstOnPartitions onPartitions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSinglePartitionRebuildIndexOption result = new AstSinglePartitionRebuildIndexOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ONLINE EQUAL ON ( low_priority_lock_wait ) 
        /// </summary>
        public static AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption(AstLowPriorityLockWait lowPriorityLockWait)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSinglePartitionRebuildIndexOption result = new AstSinglePartitionRebuildIndexOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// partition_nums
    /// 	 : partition_number = decimal  (TO  to_partition_number = decimal)?
    /// </summary>
    public partial class AstPartitionNums : AstRule
    {
        
        protected static string _rule = "partition_nums\r\n\t : partition_number = decimal  (TO  to_partition_number = decima" +
            "l)?";
        
        internal AstPartitionNums(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstPartitionNums(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstPartitionNums(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstPartitionNums(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionNums(this);
        }
        
        /// <summary>
        ///  : 
        ///    partition_number=decimal TO to_partition_number=decimal 
        /// </summary>
        public static AstPartitionNums PartitionNums(AstDecimal partitionNumber, AstDecimal toPartitionNumber)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPartitionNums result = new AstPartitionNums(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// columnstore_index_option
    /// 	 : DROP_EXISTING  EQUAL  drop_existing = on_off
    /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | ONLINE  EQUAL  online = on_off
    /// 	 | COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES?
    /// 	 | DATA_COMPRESSION  EQUAL  datacompression_column_mode  on_partitions?
    /// </summary>
    public partial class AstColumnstoreIndexOption : AstRule
    {
        
        protected static string _rule = @"columnstore_index_option
	 : DROP_EXISTING  EQUAL  drop_existing = on_off
	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
	 | ONLINE  EQUAL  online = on_off
	 | COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES?
	 | DATA_COMPRESSION  EQUAL  datacompression_column_mode  on_partitions?";
        
        internal AstColumnstoreIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstColumnstoreIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstColumnstoreIndexOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstColumnstoreIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnstoreIndexOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    DROP_EXISTING EQUAL drop_existing=on_off 
        /// </summary>
        public static AstColumnstoreIndexOption ColumnstoreIndexOption(AstOnOff dropExisting)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnstoreIndexOption result = new AstColumnstoreIndexOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public static AstColumnstoreIndexOption ColumnstoreIndexOption(AstDecimal maxDegreeOfParallelism)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnstoreIndexOption result = new AstColumnstoreIndexOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DATA_COMPRESSION EQUAL datacompression_column_mode on_partitions? 
        /// </summary>
        public static AstColumnstoreIndexOption ColumnstoreIndexOption(AstDatacompressionColumnMode datacompressionColumnMode, AstOnPartitions onPartitions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnstoreIndexOption result = new AstColumnstoreIndexOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// xml_index_option
    /// 	 : PAD_INDEX  EQUAL  pad_index = on_off
    /// 	 | FILLFACTOR  EQUAL  fillfactor = decimal
    /// 	 | SORT_IN_TEMPDB  EQUAL  sort_in_tempdb = on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  ignore_dup_key = on_off
    /// 	 | DROP_EXISTING  EQUAL  drop_existing = on_off
    /// 	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  allow_row_loks = on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  allow_page_locks = on_off
    /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | XML_COMPRESSION  EQUAL  xml_compression = on_off
    /// </summary>
    public partial class AstXmlIndexOption : AstRule
    {
        
        protected static string _rule = @"xml_index_option
	 : PAD_INDEX  EQUAL  pad_index = on_off
	 | FILLFACTOR  EQUAL  fillfactor = decimal
	 | SORT_IN_TEMPDB  EQUAL  sort_in_tempdb = on_off
	 | IGNORE_DUP_KEY  EQUAL  ignore_dup_key = on_off
	 | DROP_EXISTING  EQUAL  drop_existing = on_off
	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
	 | ALLOW_ROW_LOCKS  EQUAL  allow_row_loks = on_off
	 | ALLOW_PAGE_LOCKS  EQUAL  allow_page_locks = on_off
	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
	 | XML_COMPRESSION  EQUAL  xml_compression = on_off";
        
        internal AstXmlIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstXmlIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstXmlIndexOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstXmlIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlIndexOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    PAD_INDEX EQUAL pad_index=on_off 
        /// </summary>
        public static AstXmlIndexOption XmlIndexOption(AstOnOff padIndex)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstXmlIndexOption result = new AstXmlIndexOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    FILLFACTOR EQUAL fillfactor=decimal 
        /// </summary>
        public static AstXmlIndexOption XmlIndexOption(AstDecimal fillfactor)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstXmlIndexOption result = new AstXmlIndexOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ONLINE EQUAL ON ( low_priority_lock_wait ) 
        /// </summary>
        public static AstXmlIndexOption XmlIndexOption(AstLowPriorityLockWait lowPriorityLockWait)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstXmlIndexOption result = new AstXmlIndexOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// for_after_instead
    /// 	 : FOR
    /// 	 | AFTER
    /// 	 | INSTEAD  OF
    /// </summary>
    public partial class AstForAfterInstead : AstRule
    {
        
        protected static string _rule = "for_after_instead\r\n\t : FOR\r\n\t | AFTER\r\n\t | INSTEAD  OF";
        
        internal AstForAfterInstead(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstForAfterInstead(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstForAfterInstead(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstForAfterInstead(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitForAfterInstead(this);
        }
    }
    
    /// <summary>
    /// dml_trigger_option
    /// 	 : ENCRYPTION
    /// 	 | execute_clause
    /// </summary>
    public partial class AstDmlTriggerOption : AstRule
    {
        
        protected static string _rule = "dml_trigger_option\r\n\t : ENCRYPTION\r\n\t | execute_clause";
        
        internal AstDmlTriggerOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDmlTriggerOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDmlTriggerOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDmlTriggerOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDmlTriggerOption(this);
        }
        
        /// <summary>
        /// execute_clause : 
        ///    execute_clause 
        /// </summary>
        public static AstDmlTriggerOption DmlTriggerOption(AstExecuteClause executeClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDmlTriggerOption result = new AstDmlTriggerOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_or_alter_function
    /// 	 : ((CREATE  (OR  ALTER)?) | ALTER)  FUNCTION  funcName = schema_func_proc_ref  ((LR_BRACKET  procedure_params  RR_BRACKET) | LR_BRACKET  RR_BRACKET)  (func_body_returns_select | func_body_returns_table | func_body_returns_scalar)  SEMI?
    /// </summary>
    public partial class AstCreateOrAlterFunction : AstBatchLevelStatement
    {
        
        protected static string _rule = @"create_or_alter_function
	 : ((CREATE  (OR  ALTER)?) | ALTER)  FUNCTION  funcName = schema_func_proc_ref  ((LR_BRACKET  procedure_params  RR_BRACKET) | LR_BRACKET  RR_BRACKET)  (func_body_returns_select | func_body_returns_table | func_body_returns_scalar)  SEMI?";
        
        internal AstCreateOrAlterFunction(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateOrAlterFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateOrAlterFunction(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateOrAlterFunction(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterFunction(this);
        }
        
        /// <summary>
        ///  : 
        ///    CREATE OR ALTER FUNCTION funcName=schema_func_proc_ref ( procedure_params ) func_body_returns_select SEMI? 
        /// </summary>
        public static AstCreateOrAlterFunction CreateOrAlterFunction(AstSchemaFuncProcRef funcName, AstProcedureParams procedureParams, AstFuncBodyReturnsSelect funcBodyReturnsSelect)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateOrAlterFunction result = new AstCreateOrAlterFunction(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CREATE OR ALTER FUNCTION funcName=schema_func_proc_ref ( ) func_body_returns_select SEMI? 
        /// </summary>
        public static AstCreateOrAlterFunction CreateOrAlterFunction(AstSchemaFuncProcRef funcName, AstFuncBodyReturnsSelect funcBodyReturnsSelect)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateOrAlterFunction result = new AstCreateOrAlterFunction(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CREATE OR ALTER FUNCTION funcName=schema_func_proc_ref ( procedure_params ) func_body_returns_table SEMI? 
        /// </summary>
        public static AstCreateOrAlterFunction CreateOrAlterFunction(AstSchemaFuncProcRef funcName, AstProcedureParams procedureParams, AstFuncBodyReturnsTable funcBodyReturnsTable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateOrAlterFunction result = new AstCreateOrAlterFunction(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CREATE OR ALTER FUNCTION funcName=schema_func_proc_ref ( ) func_body_returns_table SEMI? 
        /// </summary>
        public static AstCreateOrAlterFunction CreateOrAlterFunction(AstSchemaFuncProcRef funcName, AstFuncBodyReturnsTable funcBodyReturnsTable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateOrAlterFunction result = new AstCreateOrAlterFunction(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CREATE OR ALTER FUNCTION funcName=schema_func_proc_ref ( procedure_params ) func_body_returns_scalar SEMI? 
        /// </summary>
        public static AstCreateOrAlterFunction CreateOrAlterFunction(AstSchemaFuncProcRef funcName, AstProcedureParams procedureParams, AstFuncBodyReturnsScalar funcBodyReturnsScalar)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateOrAlterFunction result = new AstCreateOrAlterFunction(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CREATE OR ALTER FUNCTION funcName=schema_func_proc_ref ( ) func_body_returns_scalar SEMI? 
        /// </summary>
        public static AstCreateOrAlterFunction CreateOrAlterFunction(AstSchemaFuncProcRef funcName, AstFuncBodyReturnsScalar funcBodyReturnsScalar)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateOrAlterFunction result = new AstCreateOrAlterFunction(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// procedure_option
    /// 	 : procedure_option_enum
    /// 	 | execute_clause
    /// </summary>
    public partial class AstProcedureOption : AstRule
    {
        
        protected static string _rule = "procedure_option\r\n\t : procedure_option_enum\r\n\t | execute_clause";
        
        internal AstProcedureOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstProcedureOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstProcedureOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstProcedureOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcedureOption(this);
        }
        
        /// <summary>
        /// procedure_option_enum : 
        ///    procedure_option_enum 
        /// </summary>
        public static AstProcedureOption ProcedureOption(AstProcedureOptionEnum procedureOptionEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstProcedureOption result = new AstProcedureOption(arguments);
            return result;
        }
        
        /// <summary>
        /// execute_clause : 
        ///    execute_clause 
        /// </summary>
        public static AstProcedureOption ProcedureOption(AstExecuteClause executeClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstProcedureOption result = new AstProcedureOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// function_option
    /// 	 : function_option_enum
    /// 	 | execute_clause
    /// </summary>
    public partial class AstFunctionOption : AstRule
    {
        
        protected static string _rule = "function_option\r\n\t : function_option_enum\r\n\t | execute_clause";
        
        internal AstFunctionOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstFunctionOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstFunctionOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstFunctionOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFunctionOption(this);
        }
        
        /// <summary>
        /// function_option_enum : 
        ///    function_option_enum 
        /// </summary>
        public static AstFunctionOption FunctionOption(AstFunctionOptionEnum functionOptionEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFunctionOption result = new AstFunctionOption(arguments);
            return result;
        }
        
        /// <summary>
        /// execute_clause : 
        ///    execute_clause 
        /// </summary>
        public static AstFunctionOption FunctionOption(AstExecuteClause executeClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFunctionOption result = new AstFunctionOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// statistics_with
    /// 	 : FULLSCAN
    /// 	 | SAMPLE  decimal  percent_row
    /// 	 | STATS_STREAM
    /// </summary>
    public partial class AstStatisticsWith : AstRule
    {
        
        protected static string _rule = "statistics_with\r\n\t : FULLSCAN\r\n\t | SAMPLE  decimal  percent_row\r\n\t | STATS_STREAM" +
            "";
        
        internal AstStatisticsWith(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstStatisticsWith(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstStatisticsWith(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstStatisticsWith(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStatisticsWith(this);
        }
        
        /// <summary>
        ///  : 
        ///    SAMPLE decimal percent_row 
        /// </summary>
        public static AstStatisticsWith StatisticsWith(AstDecimal @decimal, AstPercentRow percentRow)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstStatisticsWith result = new AstStatisticsWith(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// update_statistics_option
    /// 	 : (FULLSCAN  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
    /// 	 | (SAMPLE  number = decimal  percent_row  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
    /// 	 | RESAMPLE  on_partitions?
    /// 	 | STATS_STREAM  EQUAL  stats_stream_ = expression
    /// 	 | ROWCOUNT  EQUAL  decimal
    /// 	 | PAGECOUNT  EQUAL  decimal
    /// 	 | ALL
    /// 	 | COLUMNS
    /// 	 | INDEX
    /// 	 | NORECOMPUTE
    /// 	 | INCREMENTAL  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  max_dregree_of_parallelism = decimal
    /// 	 | AUTO_DROP  EQUAL  on_off
    /// </summary>
    public partial class AstUpdateStatisticsOption : AstRule
    {
        
        protected static string _rule = @"update_statistics_option
	 : (FULLSCAN  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
	 | (SAMPLE  number = decimal  percent_row  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
	 | RESAMPLE  on_partitions?
	 | STATS_STREAM  EQUAL  stats_stream_ = expression
	 | ROWCOUNT  EQUAL  decimal
	 | PAGECOUNT  EQUAL  decimal
	 | ALL
	 | COLUMNS
	 | INDEX
	 | NORECOMPUTE
	 | INCREMENTAL  EQUAL  on_off
	 | MAXDOP  EQUAL  max_dregree_of_parallelism = decimal
	 | AUTO_DROP  EQUAL  on_off";
        
        internal AstUpdateStatisticsOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstUpdateStatisticsOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstUpdateStatisticsOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstUpdateStatisticsOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateStatisticsOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    FULLSCAN COMMA? PERSIST_SAMPLE_PERCENT EQUAL on_off 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateStatisticsOption result = new AstUpdateStatisticsOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    SAMPLE number=decimal percent_row COMMA? PERSIST_SAMPLE_PERCENT EQUAL on_off 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(AstDecimal number, AstPercentRow percentRow, AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateStatisticsOption result = new AstUpdateStatisticsOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    RESAMPLE on_partitions? 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(AstOnPartitions onPartitions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateStatisticsOption result = new AstUpdateStatisticsOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    STATS_STREAM EQUAL stats_stream_=expression 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(AstExpression statsStream)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateStatisticsOption result = new AstUpdateStatisticsOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ROWCOUNT EQUAL decimal 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateStatisticsOption result = new AstUpdateStatisticsOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// table_indices
    /// 	 : INDEX  id_  UNIQUE?  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// 	 | INDEX  id_  CLUSTERED  COLUMNSTORE
    /// 	 | INDEX  id_  NONCLUSTERED?  COLUMNSTORE  LR_BRACKET  column_name_list  RR_BRACKET  create_table_index_options?  (ON  group_id)?
    /// </summary>
    public partial class AstTableIndices : AstRule
    {
        
        protected static string _rule = @"table_indices
	 : INDEX  id_  UNIQUE?  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET
	 | INDEX  id_  CLUSTERED  COLUMNSTORE
	 | INDEX  id_  NONCLUSTERED?  COLUMNSTORE  LR_BRACKET  column_name_list  RR_BRACKET  create_table_index_options?  (ON  group_id)?";
        
        internal AstTableIndices(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTableIndices(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTableIndices(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTableIndices(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableIndices(this);
        }
        
        /// <summary>
        ///  : 
        ///    INDEX id_ UNIQUE? clustered? ( column_name_list_with_order ) 
        /// </summary>
        public static AstTableIndices TableIndices(AstId id, AstClustered clustered, AstColumnNameListWithOrder columnNameListWithOrder)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableIndices result = new AstTableIndices(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    INDEX id_ CLUSTERED COLUMNSTORE 
        /// </summary>
        public static AstTableIndices TableIndices(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableIndices result = new AstTableIndices(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    INDEX id_ NONCLUSTERED? COLUMNSTORE ( column_name_list ) create_table_index_options? ON group_id 
        /// </summary>
        public static AstTableIndices TableIndices(AstId id, AstColumnNameList columnNameList, AstCreateTableIndexOptions createTableIndexOptions, AstGroupId groupId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableIndices result = new AstTableIndices(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// tbl_option
    /// 	 : WITH  LR_BRACKET  tableoptions  RR_BRACKET
    /// 	 | tableoptions
    /// </summary>
    public partial class AstTblOption : AstRule
    {
        
        protected static string _rule = "tbl_option\r\n\t : WITH  LR_BRACKET  tableoptions  RR_BRACKET\r\n\t | tableoptions";
        
        internal AstTblOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTblOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTblOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTblOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTblOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    WITH ( tableoptions ) 
        /// </summary>
        public static AstTblOption TblOption(AstTableoptions tableoptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTblOption result = new AstTblOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// tableoption
    /// 	 : table_opt_varname  EQUAL  table_opt_var_value
    /// 	 | tableoption_cluster_mode
    /// 	 | FILLFACTOR  EQUAL  decimal
    /// 	 | distribution
    /// 	 | DATA_COMPRESSION  EQUAL  compression_mode  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// </summary>
    public partial class AstTableoption : AstRule
    {
        
        protected static string _rule = @"tableoption
	 : table_opt_varname  EQUAL  table_opt_var_value
	 | tableoption_cluster_mode
	 | FILLFACTOR  EQUAL  decimal
	 | distribution
	 | DATA_COMPRESSION  EQUAL  compression_mode  on_partitions?
	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?";
        
        internal AstTableoption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTableoption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTableoption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTableoption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableoption(this);
        }
        
        /// <summary>
        ///  : 
        ///    table_opt_varname EQUAL table_opt_var_value 
        /// </summary>
        public static AstTableoption Tableoption(AstTableOptVarname tableOptVarname, AstTableOptVarValue tableOptVarValue)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableoption result = new AstTableoption(arguments);
            return result;
        }
        
        /// <summary>
        /// tableoption_cluster_mode : 
        ///    tableoption_cluster_mode 
        /// </summary>
        public static AstTableoption Tableoption(AstTableoptionClusterMode tableoptionClusterMode)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableoption result = new AstTableoption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    FILLFACTOR EQUAL decimal 
        /// </summary>
        public static AstTableoption Tableoption(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableoption result = new AstTableoption(arguments);
            return result;
        }
        
        /// <summary>
        /// distribution : 
        ///    distribution 
        /// </summary>
        public static AstTableoption Tableoption(AstDistribution distribution)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableoption result = new AstTableoption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DATA_COMPRESSION EQUAL compression_mode on_partitions? 
        /// </summary>
        public static AstTableoption Tableoption(AstCompressionMode compressionMode, AstOnPartitions onPartitions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableoption result = new AstTableoption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public static AstTableoption Tableoption(AstOnOff onOff, AstOnPartitions onPartitions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableoption result = new AstTableoption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// table_opt_varname
    /// 	 : (simple_id | keyword)
    /// </summary>
    public partial class AstTableOptVarname : AstRule
    {
        
        protected static string _rule = "table_opt_varname\r\n\t : (simple_id | keyword)";
        
        internal AstTableOptVarname(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTableOptVarname(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTableOptVarname(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTableOptVarname(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableOptVarname(this);
        }
        
        /// <summary>
        /// simple_id : 
        ///    simple_id 
        /// </summary>
        public static AstTableOptVarname TableOptVarname(AstSimpleId simpleId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableOptVarname result = new AstTableOptVarname(arguments);
            return result;
        }
        
        /// <summary>
        /// keyword : 
        ///    keyword 
        /// </summary>
        public static AstTableOptVarname TableOptVarname(AstKeyword keyword)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableOptVarname result = new AstTableOptVarname(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// table_opt_var_value
    /// 	 : (simple_id | keyword | on_off | decimal)
    /// </summary>
    public partial class AstTableOptVarValue : AstRule
    {
        
        protected static string _rule = "table_opt_var_value\r\n\t : (simple_id | keyword | on_off | decimal)";
        
        internal AstTableOptVarValue(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTableOptVarValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTableOptVarValue(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTableOptVarValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableOptVarValue(this);
        }
        
        /// <summary>
        /// simple_id : 
        ///    simple_id 
        /// </summary>
        public static AstTableOptVarValue TableOptVarValue(AstSimpleId simpleId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableOptVarValue result = new AstTableOptVarValue(arguments);
            return result;
        }
        
        /// <summary>
        /// keyword : 
        ///    keyword 
        /// </summary>
        public static AstTableOptVarValue TableOptVarValue(AstKeyword keyword)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableOptVarValue result = new AstTableOptVarValue(arguments);
            return result;
        }
        
        /// <summary>
        /// on_off : 
        ///    on_off 
        /// </summary>
        public static AstTableOptVarValue TableOptVarValue(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableOptVarValue result = new AstTableOptVarValue(arguments);
            return result;
        }
        
        /// <summary>
        /// decimal : 
        ///    decimal 
        /// </summary>
        public static AstTableOptVarValue TableOptVarValue(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableOptVarValue result = new AstTableOptVarValue(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// distribution
    /// 	 : DISTRIBUTION  EQUAL  HASH  LR_BRACKET  id_  RR_BRACKET
    /// 	 | CLUSTERED  INDEX  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// </summary>
    public partial class AstDistribution : AstRule
    {
        
        protected static string _rule = "distribution\r\n\t : DISTRIBUTION  EQUAL  HASH  LR_BRACKET  id_  RR_BRACKET\r\n\t | CLU" +
            "STERED  INDEX  LR_BRACKET  column_name_list_with_order  RR_BRACKET";
        
        internal AstDistribution(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDistribution(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDistribution(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDistribution(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDistribution(this);
        }
        
        /// <summary>
        ///  : 
        ///    DISTRIBUTION EQUAL HASH ( id_ ) 
        /// </summary>
        public static AstDistribution Distribution(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDistribution result = new AstDistribution(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CLUSTERED INDEX ( column_name_list_with_order ) 
        /// </summary>
        public static AstDistribution Distribution(AstColumnNameListWithOrder columnNameListWithOrder)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDistribution result = new AstDistribution(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_table_constraint
    /// 	 : (CONSTRAINT  constraint_id)?  alter_table_constraint_foreign
    /// 	 | CHECK  LR_BRACKET  search_condition  RR_BRACKET
    /// </summary>
    public partial class AstAlterTableConstraint : AstRule
    {
        
        protected static string _rule = "alter_table_constraint\r\n\t : (CONSTRAINT  constraint_id)?  alter_table_constraint_" +
            "foreign\r\n\t | CHECK  LR_BRACKET  search_condition  RR_BRACKET";
        
        internal AstAlterTableConstraint(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterTableConstraint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterTableConstraint(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterTableConstraint(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterTableConstraint(this);
        }
        
        /// <summary>
        ///  : 
        ///    CONSTRAINT constraint_id alter_table_constraint_foreign 
        /// </summary>
        public static AstAlterTableConstraint AlterTableConstraint(AstConstraintId constraintId, AstAlterTableConstraintForeign alterTableConstraintForeign)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterTableConstraint result = new AstAlterTableConstraint(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CHECK ( search_condition ) 
        /// </summary>
        public static AstAlterTableConstraint AlterTableConstraint(AstSearchCondition searchCondition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterTableConstraint result = new AstAlterTableConstraint(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// switch_partition
    /// 	 : (PARTITION?  source_partition_number_expression = expression)?  TO  target_table = full_table_ref  (PARTITION  target_partition_number_expression = expression)?  (WITH  low_priority_lock_wait)?
    /// </summary>
    public partial class AstSwitchPartition : AstRule
    {
        
        protected static string _rule = "switch_partition\r\n\t : (PARTITION?  source_partition_number_expression = expressio" +
            "n)?  TO  target_table = full_table_ref  (PARTITION  target_partition_number_expr" +
            "ession = expression)?  (WITH  low_priority_lock_wait)?";
        
        internal AstSwitchPartition(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSwitchPartition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSwitchPartition(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSwitchPartition(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSwitchPartition(this);
        }
        
        /// <summary>
        ///  : 
        ///    PARTITION? source_partition_number_expression=expression TO target_table=full_table_ref PARTITION target_partition_number_expression=expression WITH low_priority_lock_wait 
        /// </summary>
        public static AstSwitchPartition SwitchPartition(AstExpression sourcePartitionNumberExpression, AstFullTableRef targetTable, AstExpression targetPartitionNumberExpression, AstLowPriorityLockWait lowPriorityLockWait)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSwitchPartition result = new AstSwitchPartition(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// low_priority_lock_wait
    /// 	 : WAIT_AT_LOW_PRIORITY  LR_BRACKET  MAX_DURATION  EQUAL  max_duration = time  MINUTES?  COMMA  ABORT_AFTER_WAIT  EQUAL  abort_after_wait = abord_after_mode  RR_BRACKET
    /// </summary>
    public partial class AstLowPriorityLockWait : AstRule
    {
        
        protected static string _rule = "low_priority_lock_wait\r\n\t : WAIT_AT_LOW_PRIORITY  LR_BRACKET  MAX_DURATION  EQUAL" +
            "  max_duration = time  MINUTES?  COMMA  ABORT_AFTER_WAIT  EQUAL  abort_after_wai" +
            "t = abord_after_mode  RR_BRACKET";
        
        internal AstLowPriorityLockWait(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstLowPriorityLockWait(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstLowPriorityLockWait(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstLowPriorityLockWait(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLowPriorityLockWait(this);
        }
        
        /// <summary>
        ///  : 
        ///    WAIT_AT_LOW_PRIORITY ( MAX_DURATION EQUAL max_duration=time MINUTES? , ABORT_AFTER_WAIT EQUAL abort_after_wait=abord_after_mode ) 
        /// </summary>
        public static AstLowPriorityLockWait LowPriorityLockWait(AstTime maxDuration, AstAbordAfterMode abortAfterWait)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstLowPriorityLockWait result = new AstLowPriorityLockWait(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_database_new_infos
    /// 	 : MODIFY  NAME  EQUAL  database_id
    /// 	 | COLLATE  collation_id
    /// 	 | SET  database_optionspec  (WITH  termination)?
    /// 	 | add_or_modify_files
    /// 	 | add_or_modify_filegroups
    /// </summary>
    public partial class AstAlterDatabaseNewInfos : AstRule
    {
        
        protected static string _rule = "alter_database_new_infos\r\n\t : MODIFY  NAME  EQUAL  database_id\r\n\t | COLLATE  coll" +
            "ation_id\r\n\t | SET  database_optionspec  (WITH  termination)?\r\n\t | add_or_modify_" +
            "files\r\n\t | add_or_modify_filegroups";
        
        internal AstAlterDatabaseNewInfos(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterDatabaseNewInfos(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterDatabaseNewInfos(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterDatabaseNewInfos(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterDatabaseNewInfos(this);
        }
        
        /// <summary>
        ///  : 
        ///    MODIFY NAME EQUAL database_id 
        /// </summary>
        public static AstAlterDatabaseNewInfos AlterDatabaseNewInfos(AstDatabaseId databaseId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterDatabaseNewInfos result = new AstAlterDatabaseNewInfos(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    COLLATE collation_id 
        /// </summary>
        public static AstAlterDatabaseNewInfos AlterDatabaseNewInfos(AstCollationId collationId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterDatabaseNewInfos result = new AstAlterDatabaseNewInfos(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    SET database_optionspec WITH termination 
        /// </summary>
        public static AstAlterDatabaseNewInfos AlterDatabaseNewInfos(AstDatabaseOptionspec databaseOptionspec, AstTermination termination)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterDatabaseNewInfos result = new AstAlterDatabaseNewInfos(arguments);
            return result;
        }
        
        /// <summary>
        /// add_or_modify_files : 
        ///    add_or_modify_files 
        /// </summary>
        public static AstAlterDatabaseNewInfos AlterDatabaseNewInfos(AstAddOrModifyFiles addOrModifyFiles)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterDatabaseNewInfos result = new AstAlterDatabaseNewInfos(arguments);
            return result;
        }
        
        /// <summary>
        /// add_or_modify_filegroups : 
        ///    add_or_modify_filegroups 
        /// </summary>
        public static AstAlterDatabaseNewInfos AlterDatabaseNewInfos(AstAddOrModifyFilegroups addOrModifyFilegroups)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterDatabaseNewInfos result = new AstAlterDatabaseNewInfos(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// add_or_modify_files
    /// 	 : ADD  FILE  filespecs  (TO  FILEGROUP  file_group_id)?
    /// 	 | ADD  LOG  FILE  filespecs
    /// 	 | REMOVE  FILE  file_group_id
    /// 	 | MODIFY  FILE  filespec
    /// </summary>
    public partial class AstAddOrModifyFiles : AstRule
    {
        
        protected static string _rule = "add_or_modify_files\r\n\t : ADD  FILE  filespecs  (TO  FILEGROUP  file_group_id)?\r\n\t" +
            " | ADD  LOG  FILE  filespecs\r\n\t | REMOVE  FILE  file_group_id\r\n\t | MODIFY  FILE " +
            " filespec";
        
        internal AstAddOrModifyFiles(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAddOrModifyFiles(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAddOrModifyFiles(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAddOrModifyFiles(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAddOrModifyFiles(this);
        }
        
        /// <summary>
        ///  : 
        ///    ADD FILE filespecs TO FILEGROUP file_group_id 
        /// </summary>
        public static AstAddOrModifyFiles AddOrModifyFiles(AstFilespecs filespecs, AstFileGroupId fileGroupId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAddOrModifyFiles result = new AstAddOrModifyFiles(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ADD LOG FILE filespecs 
        /// </summary>
        public static AstAddOrModifyFiles AddOrModifyFiles(AstFilespecs filespecs)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAddOrModifyFiles result = new AstAddOrModifyFiles(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    REMOVE FILE file_group_id 
        /// </summary>
        public static AstAddOrModifyFiles AddOrModifyFiles(AstFileGroupId fileGroupId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAddOrModifyFiles result = new AstAddOrModifyFiles(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    MODIFY FILE filespec 
        /// </summary>
        public static AstAddOrModifyFiles AddOrModifyFiles(AstFilespec filespec)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAddOrModifyFiles result = new AstAddOrModifyFiles(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// add_or_modify_filegroups
    /// 	 : ADD  FILEGROUP  file_group_id  filegroup_predicate?
    /// 	 | REMOVE  FILEGROUP  file_group_id
    /// 	 | MODIFY  FILEGROUP  file_group_id  (filegroup_updatability_option | DEFAULT | NAME  EQUAL  new_name = file_group_id | AUTOGROW_SINGLE_FILE | AUTOGROW_ALL_FILES)
    /// </summary>
    public partial class AstAddOrModifyFilegroups : AstRule
    {
        
        protected static string _rule = @"add_or_modify_filegroups
	 : ADD  FILEGROUP  file_group_id  filegroup_predicate?
	 | REMOVE  FILEGROUP  file_group_id
	 | MODIFY  FILEGROUP  file_group_id  (filegroup_updatability_option | DEFAULT | NAME  EQUAL  new_name = file_group_id | AUTOGROW_SINGLE_FILE | AUTOGROW_ALL_FILES)";
        
        internal AstAddOrModifyFilegroups(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAddOrModifyFilegroups(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAddOrModifyFilegroups(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAddOrModifyFilegroups(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAddOrModifyFilegroups(this);
        }
        
        /// <summary>
        ///  : 
        ///    ADD FILEGROUP file_group_id filegroup_predicate? 
        /// </summary>
        public static AstAddOrModifyFilegroups AddOrModifyFilegroups(AstFileGroupId fileGroupId, AstFilegroupPredicate filegroupPredicate)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAddOrModifyFilegroups result = new AstAddOrModifyFilegroups(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    REMOVE FILEGROUP file_group_id 
        /// </summary>
        public static AstAddOrModifyFilegroups AddOrModifyFilegroups(AstFileGroupId fileGroupId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAddOrModifyFilegroups result = new AstAddOrModifyFilegroups(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    MODIFY FILEGROUP file_group_id filegroup_updatability_option 
        /// </summary>
        public static AstAddOrModifyFilegroups AddOrModifyFilegroups(AstFileGroupId fileGroupId, AstFilegroupUpdatabilityOption filegroupUpdatabilityOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAddOrModifyFilegroups result = new AstAddOrModifyFilegroups(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    MODIFY FILEGROUP file_group_id NAME EQUAL new_name=file_group_id 
        /// </summary>
        public static AstAddOrModifyFilegroups AddOrModifyFilegroups(AstFileGroupId fileGroupId, AstFileGroupId newName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAddOrModifyFilegroups result = new AstAddOrModifyFilegroups(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// database_optionspec
    /// 	 : auto_option
    /// 	 | change_tracking
    /// 	 | containment_option
    /// 	 | cursor_option
    /// 	 | database_mirroring_option
    /// 	 | date_correlation_optimization_option
    /// 	 | db_encryption_option
    /// 	 | db_state_option
    /// 	 | db_update_option
    /// 	 | db_user_access_option
    /// 	 | delayed_durability_option
    /// 	 | external_access_option
    /// 	 | FILESTREAM  database_filestream_option
    /// 	 | hadr_options
    /// 	 | mixed_page_allocation_option
    /// 	 | parameterization_option
    /// 	 | recovery_option
    /// 	 | service_broker_option
    /// 	 | snapshot_option
    /// 	 | sql_option
    /// 	 | target_recovery_time_option
    /// 	 | termination
    /// </summary>
    public partial class AstDatabaseOptionspec : AstRule
    {
        
        protected static string _rule = @"database_optionspec
	 : auto_option
	 | change_tracking
	 | containment_option
	 | cursor_option
	 | database_mirroring_option
	 | date_correlation_optimization_option
	 | db_encryption_option
	 | db_state_option
	 | db_update_option
	 | db_user_access_option
	 | delayed_durability_option
	 | external_access_option
	 | FILESTREAM  database_filestream_option
	 | hadr_options
	 | mixed_page_allocation_option
	 | parameterization_option
	 | recovery_option
	 | service_broker_option
	 | snapshot_option
	 | sql_option
	 | target_recovery_time_option
	 | termination";
        
        internal AstDatabaseOptionspec(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDatabaseOptionspec(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDatabaseOptionspec(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDatabaseOptionspec(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseOptionspec(this);
        }
        
        /// <summary>
        /// auto_option : 
        ///    auto_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstAutoOption autoOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        /// change_tracking : 
        ///    change_tracking 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstChangeTracking changeTracking)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        /// containment_option : 
        ///    containment_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstContainmentOption containmentOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        /// cursor_option : 
        ///    cursor_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstCursorOption cursorOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        /// database_mirroring_option : 
        ///    database_mirroring_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstDatabaseMirroringOption databaseMirroringOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        /// date_correlation_optimization_option : 
        ///    date_correlation_optimization_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstDateCorrelationOptimizationOption dateCorrelationOptimizationOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        /// db_encryption_option : 
        ///    db_encryption_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstDbEncryptionOption dbEncryptionOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        /// db_state_option : 
        ///    db_state_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstDbStateOption dbStateOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        /// db_update_option : 
        ///    db_update_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstDbUpdateOption dbUpdateOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        /// db_user_access_option : 
        ///    db_user_access_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstDbUserAccessOption dbUserAccessOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        /// delayed_durability_option : 
        ///    delayed_durability_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstDelayedDurabilityOption delayedDurabilityOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        /// external_access_option : 
        ///    external_access_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstExternalAccessOption externalAccessOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    FILESTREAM database_filestream_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstDatabaseFilestreamOption databaseFilestreamOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        /// hadr_options : 
        ///    hadr_options 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstHadrOptions hadrOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        /// mixed_page_allocation_option : 
        ///    mixed_page_allocation_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstMixedPageAllocationOption mixedPageAllocationOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        /// parameterization_option : 
        ///    parameterization_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstParameterizationOption parameterizationOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        /// recovery_option : 
        ///    recovery_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstRecoveryOption recoveryOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        /// service_broker_option : 
        ///    service_broker_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstServiceBrokerOption serviceBrokerOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        /// snapshot_option : 
        ///    snapshot_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstSnapshotOption snapshotOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        /// sql_option : 
        ///    sql_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstSqlOption sqlOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        /// target_recovery_time_option : 
        ///    target_recovery_time_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstTargetRecoveryTimeOption targetRecoveryTimeOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
        
        /// <summary>
        /// termination : 
        ///    termination 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstTermination termination)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec result = new AstDatabaseOptionspec(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// auto_option
    /// 	 : AUTO_CLOSE  on_off
    /// 	 | AUTO_CREATE_STATISTICS  statistic_value
    /// 	 | AUTO_SHRINK  on_off
    /// 	 | AUTO_UPDATE_STATISTICS  on_off
    /// 	 | AUTO_UPDATE_STATISTICS_ASYNC  on_off
    /// </summary>
    public partial class AstAutoOption : AstRule
    {
        
        protected static string _rule = "auto_option\r\n\t : AUTO_CLOSE  on_off\r\n\t | AUTO_CREATE_STATISTICS  statistic_value\r" +
            "\n\t | AUTO_SHRINK  on_off\r\n\t | AUTO_UPDATE_STATISTICS  on_off\r\n\t | AUTO_UPDATE_ST" +
            "ATISTICS_ASYNC  on_off";
        
        internal AstAutoOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAutoOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAutoOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAutoOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAutoOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    AUTO_CLOSE on_off 
        /// </summary>
        public static AstAutoOption AutoOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAutoOption result = new AstAutoOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    AUTO_CREATE_STATISTICS statistic_value 
        /// </summary>
        public static AstAutoOption AutoOption(AstStatisticValue statisticValue)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAutoOption result = new AstAutoOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// change_tracking
    /// 	 : CHANGE_TRACKING  EQUAL  (OFF | ON  change_tracking_option_list)
    /// </summary>
    public partial class AstChangeTracking : AstRule
    {
        
        protected static string _rule = "change_tracking\r\n\t : CHANGE_TRACKING  EQUAL  (OFF | ON  change_tracking_option_li" +
            "st)";
        
        internal AstChangeTracking(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstChangeTracking(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstChangeTracking(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstChangeTracking(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTracking(this);
        }
        
        /// <summary>
        ///  : 
        ///    CHANGE_TRACKING EQUAL ON change_tracking_option_list 
        /// </summary>
        public static AstChangeTracking ChangeTracking(AstChangeTrackingOptionList changeTrackingOptionList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstChangeTracking result = new AstChangeTracking(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// change_tracking_option_list
    /// 	 : AUTO_CLEANUP  EQUAL  on_off
    /// 	 | CHANGE_RETENTION  EQUAL  period
    /// </summary>
    public partial class AstChangeTrackingOptionList : AstRule
    {
        
        protected static string _rule = "change_tracking_option_list\r\n\t : AUTO_CLEANUP  EQUAL  on_off\r\n\t | CHANGE_RETENTIO" +
            "N  EQUAL  period";
        
        internal AstChangeTrackingOptionList(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstChangeTrackingOptionList(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstChangeTrackingOptionList(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstChangeTrackingOptionList(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTrackingOptionList(this);
        }
        
        /// <summary>
        ///  : 
        ///    AUTO_CLEANUP EQUAL on_off 
        /// </summary>
        public static AstChangeTrackingOptionList ChangeTrackingOptionList(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstChangeTrackingOptionList result = new AstChangeTrackingOptionList(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CHANGE_RETENTION EQUAL period 
        /// </summary>
        public static AstChangeTrackingOptionList ChangeTrackingOptionList(AstPeriod period)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstChangeTrackingOptionList result = new AstChangeTrackingOptionList(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// cursor_option
    /// 	 : CURSOR_CLOSE_ON_COMMIT  on_off
    /// 	 | CURSOR_DEFAULT  local_global
    /// </summary>
    public partial class AstCursorOption : AstRule
    {
        
        protected static string _rule = "cursor_option\r\n\t : CURSOR_CLOSE_ON_COMMIT  on_off\r\n\t | CURSOR_DEFAULT  local_glob" +
            "al";
        
        internal AstCursorOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCursorOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCursorOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCursorOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCursorOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    CURSOR_CLOSE_ON_COMMIT on_off 
        /// </summary>
        public static AstCursorOption CursorOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCursorOption result = new AstCursorOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CURSOR_DEFAULT local_global 
        /// </summary>
        public static AstCursorOption CursorOption(AstLocalGlobal localGlobal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCursorOption result = new AstCursorOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// listener_ip
    /// 	 : LISTENER_IP  EQUAL  (ALL | ipv4 | ipv6 | stringtext)
    /// </summary>
    public partial class AstListenerIp : AstRule
    {
        
        protected static string _rule = "listener_ip\r\n\t : LISTENER_IP  EQUAL  (ALL | ipv4 | ipv6 | stringtext)";
        
        internal AstListenerIp(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstListenerIp(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstListenerIp(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstListenerIp(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitListenerIp(this);
        }
        
        /// <summary>
        ///  : 
        ///    LISTENER_IP EQUAL ipv4 
        /// </summary>
        public static AstListenerIp ListenerIp(AstIpv4 ipv4)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstListenerIp result = new AstListenerIp(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    LISTENER_IP EQUAL ipv6 
        /// </summary>
        public static AstListenerIp ListenerIp(AstIpv6 ipv6)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstListenerIp result = new AstListenerIp(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    LISTENER_IP EQUAL stringtext 
        /// </summary>
        public static AstListenerIp ListenerIp(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstListenerIp result = new AstListenerIp(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// authentication_configuration
    /// 	 : AUTHENTICATION  EQUAL  (WINDOWS  authentication_mode?  (CERTIFICATE  certificate_id)? | CERTIFICATE  certificate_id  WINDOWS?  authentication_mode?)
    /// </summary>
    public partial class AstAuthenticationConfiguration : AstRule
    {
        
        protected static string _rule = "authentication_configuration\r\n\t : AUTHENTICATION  EQUAL  (WINDOWS  authentication" +
            "_mode?  (CERTIFICATE  certificate_id)? | CERTIFICATE  certificate_id  WINDOWS?  " +
            "authentication_mode?)";
        
        internal AstAuthenticationConfiguration(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAuthenticationConfiguration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAuthenticationConfiguration(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAuthenticationConfiguration(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuthenticationConfiguration(this);
        }
        
        /// <summary>
        ///  : 
        ///    AUTHENTICATION EQUAL WINDOWS authentication_mode? CERTIFICATE certificate_id 
        /// </summary>
        public static AstAuthenticationConfiguration AuthenticationConfiguration(AstAuthenticationMode authenticationMode, AstCertificateId certificateId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAuthenticationConfiguration result = new AstAuthenticationConfiguration(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    AUTHENTICATION EQUAL CERTIFICATE certificate_id WINDOWS? authentication_mode? 
        /// </summary>
        public static AstAuthenticationConfiguration AuthenticationConfiguration(AstCertificateId certificateId, AstAuthenticationMode authenticationMode)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAuthenticationConfiguration result = new AstAuthenticationConfiguration(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// mirroring_set_option
    /// 	 : mirroring_partner  partner_option
    /// 	 | mirroring_witness  witness_option
    /// </summary>
    public partial class AstMirroringSetOption : AstDatabaseMirroringOption
    {
        
        protected static string _rule = "mirroring_set_option\r\n\t : mirroring_partner  partner_option\r\n\t | mirroring_witnes" +
            "s  witness_option";
        
        internal AstMirroringSetOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstMirroringSetOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstMirroringSetOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstMirroringSetOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMirroringSetOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    mirroring_partner partner_option 
        /// </summary>
        public static AstMirroringSetOption MirroringSetOption(AstMirroringPartner mirroringPartner, AstPartnerOption partnerOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstMirroringSetOption result = new AstMirroringSetOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    mirroring_witness witness_option 
        /// </summary>
        public static AstMirroringSetOption MirroringSetOption(AstMirroringWitness mirroringWitness, AstWitnessOption witnessOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstMirroringSetOption result = new AstMirroringSetOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// partner_option
    /// 	 : witness_partner_equal  partner_server
    /// 	 | TIMEOUT  decimal
    /// 	 | partner_option_enum
    /// </summary>
    public partial class AstPartnerOption : AstRule
    {
        
        protected static string _rule = "partner_option\r\n\t : witness_partner_equal  partner_server\r\n\t | TIMEOUT  decimal\r\n" +
            "\t | partner_option_enum";
        
        internal AstPartnerOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstPartnerOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstPartnerOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstPartnerOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartnerOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    witness_partner_equal partner_server 
        /// </summary>
        public static AstPartnerOption PartnerOption(AstWitnessPartnerEqual witnessPartnerEqual, AstPartnerServer partnerServer)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPartnerOption result = new AstPartnerOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    TIMEOUT decimal 
        /// </summary>
        public static AstPartnerOption PartnerOption(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPartnerOption result = new AstPartnerOption(arguments);
            return result;
        }
        
        /// <summary>
        /// partner_option_enum : 
        ///    partner_option_enum 
        /// </summary>
        public static AstPartnerOption PartnerOption(AstPartnerOptionEnum partnerOptionEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPartnerOption result = new AstPartnerOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// witness_option
    /// 	 : witness_partner_equal  witness_server
    /// 	 | OFF
    /// </summary>
    public partial class AstWitnessOption : AstRule
    {
        
        protected static string _rule = "witness_option\r\n\t : witness_partner_equal  witness_server\r\n\t | OFF";
        
        internal AstWitnessOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstWitnessOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstWitnessOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstWitnessOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWitnessOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    witness_partner_equal witness_server 
        /// </summary>
        public static AstWitnessOption WitnessOption(AstWitnessPartnerEqual witnessPartnerEqual, AstWitnessServer witnessServer)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstWitnessOption result = new AstWitnessOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// partner_server_tcp_prefix
    /// 	 : TCP  COLON  DOUBLE_FORWARD_SLASH
    /// </summary>
    public partial class AstPartnerServerTcpPrefix : AstRule
    {
        
        protected static string _rule = "partner_server_tcp_prefix\r\n\t : TCP  COLON  DOUBLE_FORWARD_SLASH";
        
        internal AstPartnerServerTcpPrefix(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstPartnerServerTcpPrefix(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstPartnerServerTcpPrefix(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstPartnerServerTcpPrefix(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartnerServerTcpPrefix(this);
        }
    }
    
    /// <summary>
    /// external_access_option
    /// 	 : DB_CHAINING  on_off
    /// 	 | TRUSTWORTHY  on_off
    /// 	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
    /// 	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
    /// 	 | NESTED_TRIGGERS  EQUAL  on_off
    /// 	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
    /// 	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal
    /// </summary>
    public partial class AstExternalAccessOption : AstRule
    {
        
        protected static string _rule = @"external_access_option
	 : DB_CHAINING  on_off
	 | TRUSTWORTHY  on_off
	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
	 | NESTED_TRIGGERS  EQUAL  on_off
	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal";
        
        internal AstExternalAccessOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstExternalAccessOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExternalAccessOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExternalAccessOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalAccessOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    DB_CHAINING on_off 
        /// </summary>
        public static AstExternalAccessOption ExternalAccessOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExternalAccessOption result = new AstExternalAccessOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DEFAULT_LANGUAGE EQUAL id_or_string 
        /// </summary>
        public static AstExternalAccessOption ExternalAccessOption(AstIdOrString idOrString)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExternalAccessOption result = new AstExternalAccessOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    TWO_DIGIT_YEAR_CUTOFF EQUAL decimal 
        /// </summary>
        public static AstExternalAccessOption ExternalAccessOption(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExternalAccessOption result = new AstExternalAccessOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// hadr_options
    /// 	 : HADR  ((AVAILABILITY  GROUP  EQUAL  group_id | OFF) | suspend_resume)
    /// </summary>
    public partial class AstHadrOptions : AstRule
    {
        
        protected static string _rule = "hadr_options\r\n\t : HADR  ((AVAILABILITY  GROUP  EQUAL  group_id | OFF) | suspend_r" +
            "esume)";
        
        internal AstHadrOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstHadrOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstHadrOptions(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstHadrOptions(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitHadrOptions(this);
        }
        
        /// <summary>
        ///  : 
        ///    HADR AVAILABILITY GROUP EQUAL group_id 
        /// </summary>
        public static AstHadrOptions HadrOptions(AstGroupId groupId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstHadrOptions result = new AstHadrOptions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    HADR suspend_resume 
        /// </summary>
        public static AstHadrOptions HadrOptions(AstSuspendResume suspendResume)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstHadrOptions result = new AstHadrOptions(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// recovery_option
    /// 	 : recovery_option_enum
    /// 	 | TORN_PAGE_DETECTION  on_off
    /// 	 | ACCELERATED_DATABASE_RECOVERY  EQUAL  on_off
    /// </summary>
    public partial class AstRecoveryOption : AstRule
    {
        
        protected static string _rule = "recovery_option\r\n\t : recovery_option_enum\r\n\t | TORN_PAGE_DETECTION  on_off\r\n\t | A" +
            "CCELERATED_DATABASE_RECOVERY  EQUAL  on_off";
        
        internal AstRecoveryOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstRecoveryOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstRecoveryOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstRecoveryOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRecoveryOption(this);
        }
        
        /// <summary>
        /// recovery_option_enum : 
        ///    recovery_option_enum 
        /// </summary>
        public static AstRecoveryOption RecoveryOption(AstRecoveryOptionEnum recoveryOptionEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRecoveryOption result = new AstRecoveryOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    TORN_PAGE_DETECTION on_off 
        /// </summary>
        public static AstRecoveryOption RecoveryOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRecoveryOption result = new AstRecoveryOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// service_broker_option
    /// 	 : ENABLE_BROKER
    /// 	 | DISABLE_BROKER
    /// 	 | NEW_BROKER
    /// 	 | ERROR_BROKER_CONVERSATIONS
    /// 	 | HONOR_BROKER_PRIORITY  on_off
    /// </summary>
    public partial class AstServiceBrokerOption : AstRule
    {
        
        protected static string _rule = "service_broker_option\r\n\t : ENABLE_BROKER\r\n\t | DISABLE_BROKER\r\n\t | NEW_BROKER\r\n\t |" +
            " ERROR_BROKER_CONVERSATIONS\r\n\t | HONOR_BROKER_PRIORITY  on_off";
        
        internal AstServiceBrokerOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstServiceBrokerOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstServiceBrokerOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstServiceBrokerOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServiceBrokerOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    HONOR_BROKER_PRIORITY on_off 
        /// </summary>
        public static AstServiceBrokerOption ServiceBrokerOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServiceBrokerOption result = new AstServiceBrokerOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// snapshot_option
    /// 	 : ALLOW_SNAPSHOT_ISOLATION  on_off
    /// 	 | READ_COMMITTED_SNAPSHOT  on_off
    /// 	 | MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = on_off
    /// </summary>
    public partial class AstSnapshotOption : AstRule
    {
        
        protected static string _rule = "snapshot_option\r\n\t : ALLOW_SNAPSHOT_ISOLATION  on_off\r\n\t | READ_COMMITTED_SNAPSHO" +
            "T  on_off\r\n\t | MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = on_off";
        
        internal AstSnapshotOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSnapshotOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSnapshotOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSnapshotOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSnapshotOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    ALLOW_SNAPSHOT_ISOLATION on_off 
        /// </summary>
        public static AstSnapshotOption SnapshotOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSnapshotOption result = new AstSnapshotOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// sql_option
    /// 	 : ANSI_NULL_DEFAULT  on_off
    /// 	 | ANSI_NULLS  on_off
    /// 	 | ANSI_PADDING  on_off
    /// 	 | ANSI_WARNINGS  on_off
    /// 	 | ARITHABORT  on_off
    /// 	 | COMPATIBILITY_LEVEL  EQUAL  decimal
    /// 	 | CONCAT_NULL_YIELDS_NULL  on_off
    /// 	 | NUMERIC_ROUNDABORT  on_off
    /// 	 | QUOTED_IDENTIFIER  on_off
    /// 	 | RECURSIVE_TRIGGERS  on_off
    /// </summary>
    public partial class AstSqlOption : AstRule
    {
        
        protected static string _rule = @"sql_option
	 : ANSI_NULL_DEFAULT  on_off
	 | ANSI_NULLS  on_off
	 | ANSI_PADDING  on_off
	 | ANSI_WARNINGS  on_off
	 | ARITHABORT  on_off
	 | COMPATIBILITY_LEVEL  EQUAL  decimal
	 | CONCAT_NULL_YIELDS_NULL  on_off
	 | NUMERIC_ROUNDABORT  on_off
	 | QUOTED_IDENTIFIER  on_off
	 | RECURSIVE_TRIGGERS  on_off";
        
        internal AstSqlOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSqlOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSqlOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSqlOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    ANSI_NULL_DEFAULT on_off 
        /// </summary>
        public static AstSqlOption SqlOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSqlOption result = new AstSqlOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    COMPATIBILITY_LEVEL EQUAL decimal 
        /// </summary>
        public static AstSqlOption SqlOption(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSqlOption result = new AstSqlOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// termination
    /// 	 : ROLLBACK  AFTER  seconds = decimal
    /// 	 | ROLLBACK  IMMEDIATE
    /// 	 | NO_WAIT
    /// </summary>
    public partial class AstTermination : AstRule
    {
        
        protected static string _rule = "termination\r\n\t : ROLLBACK  AFTER  seconds = decimal\r\n\t | ROLLBACK  IMMEDIATE\r\n\t |" +
            " NO_WAIT";
        
        internal AstTermination(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTermination(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTermination(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTermination(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTermination(this);
        }
        
        /// <summary>
        ///  : 
        ///    ROLLBACK AFTER seconds=decimal 
        /// </summary>
        public static AstTermination Termination(AstDecimal seconds)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTermination result = new AstTermination(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// if_exists
    /// 	 : IF  EXISTS
    /// </summary>
    public partial class AstIfExists : AstRule
    {
        
        protected static string _rule = "if_exists\r\n\t : IF  EXISTS";
        
        internal AstIfExists(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstIfExists(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstIfExists(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstIfExists(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIfExists(this);
        }
    }
    
    /// <summary>
    /// create_type
    /// 	 : CREATE  TYPE  name = schema_type_ref  (FROM  data_type  default_value)?  (AS  TABLE  LR_BRACKET  column_def_table_constraints  RR_BRACKET)?
    /// </summary>
    public partial class AstCreateType : AstDdlClause
    {
        
        protected static string _rule = "create_type\r\n\t : CREATE  TYPE  name = schema_type_ref  (FROM  data_type  default_" +
            "value)?  (AS  TABLE  LR_BRACKET  column_def_table_constraints  RR_BRACKET)?";
        
        internal AstCreateType(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateType(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateType(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateType(this);
        }
        
        /// <summary>
        ///  : 
        ///    CREATE TYPE name=schema_type_ref FROM data_type default_value AS TABLE ( column_def_table_constraints ) 
        /// </summary>
        public static AstCreateType CreateType(AstSchemaTypeRef name, AstDataType dataType, AstDefaultValue defaultValue, AstColumnDefTableConstraints columnDefTableConstraints)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateType result = new AstCreateType(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// drop_type
    /// 	 : DROP  TYPE  (IF  EXISTS)?  name = schema_type_ref
    /// </summary>
    public partial class AstDropType : AstDdlClause
    {
        
        protected static string _rule = "drop_type\r\n\t : DROP  TYPE  (IF  EXISTS)?  name = schema_type_ref";
        
        internal AstDropType(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDropType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropType(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropType(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropType(this);
        }
        
        /// <summary>
        ///  : 
        ///    DROP TYPE IF EXISTS name=schema_type_ref 
        /// </summary>
        public static AstDropType DropType(AstSchemaTypeRef name)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDropType result = new AstDropType(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// declare_statement
    /// 	 : DECLARE  local_id  AS?  (table_type_definition | full_table_ref)  SEMI?
    /// 	 | DECLARE  loc += declare_locals  SEMI?
    /// 	 | DECLARE  local_id  AS?  xml_type_definition  SEMI?
    /// 	 | WITH  XMLNAMESPACES  LR_BRACKET  xml_dec += xml_declarations  RR_BRACKET  SEMI?
    /// </summary>
    public partial class AstDeclareStatement : AstAnotherStatement
    {
        
        protected static string _rule = @"declare_statement
	 : DECLARE  local_id  AS?  (table_type_definition | full_table_ref)  SEMI?
	 | DECLARE  loc += declare_locals  SEMI?
	 | DECLARE  local_id  AS?  xml_type_definition  SEMI?
	 | WITH  XMLNAMESPACES  LR_BRACKET  xml_dec += xml_declarations  RR_BRACKET  SEMI?";
        
        internal AstDeclareStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDeclareStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDeclareStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDeclareStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareStatement(this);
        }
        
        /// <summary>
        ///  : 
        ///    DECLARE local_id AS? table_type_definition SEMI? 
        /// </summary>
        public static AstDeclareStatement DeclareStatement(AstLocalId localId, AstTableTypeDefinition tableTypeDefinition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDeclareStatement result = new AstDeclareStatement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DECLARE local_id AS? full_table_ref SEMI? 
        /// </summary>
        public static AstDeclareStatement DeclareStatement(AstLocalId localId, AstFullTableRef fullTableRef)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDeclareStatement result = new AstDeclareStatement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DECLARE loc=declare_locals SEMI? 
        /// </summary>
        public static AstDeclareStatement DeclareStatement(AstDeclareLocals loc)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDeclareStatement result = new AstDeclareStatement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DECLARE local_id AS? xml_type_definition SEMI? 
        /// </summary>
        public static AstDeclareStatement DeclareStatement(AstLocalId localId, AstXmlTypeDefinition xmlTypeDefinition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDeclareStatement result = new AstDeclareStatement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    WITH XMLNAMESPACES ( xml_dec=xml_declarations ) SEMI? 
        /// </summary>
        public static AstDeclareStatement DeclareStatement(AstXmlDeclarations xmlDec)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDeclareStatement result = new AstDeclareStatement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// xml_declaration
    /// 	 : xml_namespace_uri = stringtext  AS  id_
    /// 	 | DEFAULT  stringtext
    /// </summary>
    public partial class AstXmlDeclaration : AstRule
    {
        
        protected static string _rule = "xml_declaration\r\n\t : xml_namespace_uri = stringtext  AS  id_\r\n\t | DEFAULT  string" +
            "text";
        
        internal AstXmlDeclaration(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstXmlDeclaration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstXmlDeclaration(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstXmlDeclaration(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlDeclaration(this);
        }
        
        /// <summary>
        ///  : 
        ///    xml_namespace_uri=stringtext AS id_ 
        /// </summary>
        public static AstXmlDeclaration XmlDeclaration(AstStringtext xmlNamespaceUri, AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstXmlDeclaration result = new AstXmlDeclaration(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DEFAULT stringtext 
        /// </summary>
        public static AstXmlDeclaration XmlDeclaration(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstXmlDeclaration result = new AstXmlDeclaration(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// cursor_statement
    /// 	 : CLOSE  GLOBAL?  cursor_name  SEMI?
    /// 	 | DEALLOCATE  GLOBAL?  CURSOR?  cursor_name  SEMI?
    /// 	 | declare_cursor
    /// 	 | fetch_cursor
    /// 	 | OPEN  GLOBAL?  cursor_name  SEMI?
    /// </summary>
    public partial class AstCursorStatement : AstAnotherStatement
    {
        
        protected static string _rule = "cursor_statement\r\n\t : CLOSE  GLOBAL?  cursor_name  SEMI?\r\n\t | DEALLOCATE  GLOBAL?" +
            "  CURSOR?  cursor_name  SEMI?\r\n\t | declare_cursor\r\n\t | fetch_cursor\r\n\t | OPEN  G" +
            "LOBAL?  cursor_name  SEMI?";
        
        internal AstCursorStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCursorStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCursorStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCursorStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCursorStatement(this);
        }
        
        /// <summary>
        ///  : 
        ///    CLOSE GLOBAL? cursor_name SEMI? 
        /// </summary>
        public static AstCursorStatement CursorStatement(AstCursorName cursorName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCursorStatement result = new AstCursorStatement(arguments);
            return result;
        }
        
        /// <summary>
        /// declare_cursor : 
        ///    declare_cursor 
        /// </summary>
        public static AstCursorStatement CursorStatement(AstDeclareCursor declareCursor)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCursorStatement result = new AstCursorStatement(arguments);
            return result;
        }
        
        /// <summary>
        /// fetch_cursor : 
        ///    fetch_cursor 
        /// </summary>
        public static AstCursorStatement CursorStatement(AstFetchCursor fetchCursor)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCursorStatement result = new AstCursorStatement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// backup_to
    /// 	 : TO  (logical_device_ids  TO  disk_tape_url_values)
    /// </summary>
    public partial class AstBackupTo : AstRule
    {
        
        protected static string _rule = "backup_to\r\n\t : TO  (logical_device_ids  TO  disk_tape_url_values)";
        
        internal AstBackupTo(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstBackupTo(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBackupTo(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBackupTo(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupTo(this);
        }
        
        /// <summary>
        ///  : 
        ///    TO logical_device_ids TO disk_tape_url_values 
        /// </summary>
        public static AstBackupTo BackupTo(AstLogicalDeviceIds logicalDeviceIds, AstDiskTapeUrlValues diskTapeUrlValues)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupTo result = new AstBackupTo(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// backup_to_mirror
    /// 	 : MIRROR  TO  (logical_device_ids | disk_tape_url_values)
    /// </summary>
    public partial class AstBackupToMirror : AstRule
    {
        
        protected static string _rule = "backup_to_mirror\r\n\t : MIRROR  TO  (logical_device_ids | disk_tape_url_values)";
        
        internal AstBackupToMirror(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstBackupToMirror(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBackupToMirror(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBackupToMirror(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupToMirror(this);
        }
        
        /// <summary>
        ///  : 
        ///    MIRROR TO logical_device_ids 
        /// </summary>
        public static AstBackupToMirror BackupToMirror(AstLogicalDeviceIds logicalDeviceIds)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupToMirror result = new AstBackupToMirror(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    MIRROR TO disk_tape_url_values 
        /// </summary>
        public static AstBackupToMirror BackupToMirror(AstDiskTapeUrlValues diskTapeUrlValues)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupToMirror result = new AstBackupToMirror(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// backup_certificate_private_key
    /// 	 : FILE  EQUAL  private_key_file = stringtext
    /// 	 | by_password_crypt
    /// </summary>
    public partial class AstBackupCertificatePrivateKey : AstRule
    {
        
        protected static string _rule = "backup_certificate_private_key\r\n\t : FILE  EQUAL  private_key_file = stringtext\r\n\t" +
            " | by_password_crypt";
        
        internal AstBackupCertificatePrivateKey(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstBackupCertificatePrivateKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBackupCertificatePrivateKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBackupCertificatePrivateKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupCertificatePrivateKey(this);
        }
        
        /// <summary>
        ///  : 
        ///    FILE EQUAL private_key_file=stringtext 
        /// </summary>
        public static AstBackupCertificatePrivateKey BackupCertificatePrivateKey(AstStringtext privateKeyFile)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupCertificatePrivateKey result = new AstBackupCertificatePrivateKey(arguments);
            return result;
        }
        
        /// <summary>
        /// by_password_crypt : 
        ///    by_password_crypt 
        /// </summary>
        public static AstBackupCertificatePrivateKey BackupCertificatePrivateKey(AstByPasswordCrypt byPasswordCrypt)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupCertificatePrivateKey result = new AstBackupCertificatePrivateKey(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// backup_setting
    /// 	 : DIFFERENTIAL
    /// 	 | COPY_ONLY
    /// 	 | CREDENTIAL
    /// 	 | FILE_SNAPSHOT
    /// 	 | NO_CHECKSUM
    /// 	 | CHECKSUM
    /// 	 | STOP_ON_ERROR
    /// 	 | CONTINUE_AFTER_ERROR
    /// 	 | RESTART
    /// 	 | DESCRIPTION  EQUAL  string_id
    /// 	 | NAME  EQUAL  backup_id
    /// 	 | EXPIREDATE  EQUAL  string_id
    /// 	 | RETAINDAYS  EQUAL  decimal_id
    /// 	 | MEDIADESCRIPTION  EQUAL  string_id
    /// 	 | MEDIANAME  EQUAL  stringtext
    /// 	 | BLOCKSIZE  EQUAL  decimal_id
    /// 	 | BUFFERCOUNT  EQUAL  decimal_id
    /// 	 | MAXTRANSFER  EQUAL  decimal_id
    /// 	 | STATS  (EQUAL  decimal)?
    /// 	 | ENCRYPTION  LR_BRACKET  ALGORITHM  EQUAL  algorithm_short  COMMA  SERVER  CERTIFICATE  EQUAL  (encryptor_id | SERVER  ASYMMETRIC  KEY  EQUAL  encryptor_id)  RR_BRACKET
    /// 	 | compression
    /// 	 | rewind
    /// 	 | load_moun_load
    /// 	 | init_no_init
    /// 	 | no_skip
    /// 	 | format_noformat
    /// </summary>
    public partial class AstBackupSetting : AstRule
    {
        
        protected static string _rule = @"backup_setting
	 : DIFFERENTIAL
	 | COPY_ONLY
	 | CREDENTIAL
	 | FILE_SNAPSHOT
	 | NO_CHECKSUM
	 | CHECKSUM
	 | STOP_ON_ERROR
	 | CONTINUE_AFTER_ERROR
	 | RESTART
	 | DESCRIPTION  EQUAL  string_id
	 | NAME  EQUAL  backup_id
	 | EXPIREDATE  EQUAL  string_id
	 | RETAINDAYS  EQUAL  decimal_id
	 | MEDIADESCRIPTION  EQUAL  string_id
	 | MEDIANAME  EQUAL  stringtext
	 | BLOCKSIZE  EQUAL  decimal_id
	 | BUFFERCOUNT  EQUAL  decimal_id
	 | MAXTRANSFER  EQUAL  decimal_id
	 | STATS  (EQUAL  decimal)?
	 | ENCRYPTION  LR_BRACKET  ALGORITHM  EQUAL  algorithm_short  COMMA  SERVER  CERTIFICATE  EQUAL  (encryptor_id | SERVER  ASYMMETRIC  KEY  EQUAL  encryptor_id)  RR_BRACKET
	 | compression
	 | rewind
	 | load_moun_load
	 | init_no_init
	 | no_skip
	 | format_noformat";
        
        internal AstBackupSetting(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstBackupSetting(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBackupSetting(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBackupSetting(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupSetting(this);
        }
        
        /// <summary>
        ///  : 
        ///    DESCRIPTION EQUAL string_id 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstStringId stringId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting result = new AstBackupSetting(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    NAME EQUAL backup_id 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstBackupId backupId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting result = new AstBackupSetting(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    RETAINDAYS EQUAL decimal_id 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstDecimalId decimalId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting result = new AstBackupSetting(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    MEDIANAME EQUAL stringtext 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting result = new AstBackupSetting(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    STATS EQUAL decimal 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting result = new AstBackupSetting(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ENCRYPTION ( ALGORITHM EQUAL algorithm_short , SERVER CERTIFICATE EQUAL encryptor_id ) 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstAlgorithmShort algorithmShort, AstEncryptorId encryptorId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting result = new AstBackupSetting(arguments);
            return result;
        }
        
        /// <summary>
        /// compression : 
        ///    compression 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstCompression compression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting result = new AstBackupSetting(arguments);
            return result;
        }
        
        /// <summary>
        /// rewind : 
        ///    rewind 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstRewind rewind)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting result = new AstBackupSetting(arguments);
            return result;
        }
        
        /// <summary>
        /// load_moun_load : 
        ///    load_moun_load 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstLoadMounLoad loadMounLoad)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting result = new AstBackupSetting(arguments);
            return result;
        }
        
        /// <summary>
        /// init_no_init : 
        ///    init_no_init 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstInitNoInit initNoInit)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting result = new AstBackupSetting(arguments);
            return result;
        }
        
        /// <summary>
        /// no_skip : 
        ///    no_skip 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstNoSkip noSkip)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting result = new AstBackupSetting(arguments);
            return result;
        }
        
        /// <summary>
        /// format_noformat : 
        ///    format_noformat 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstFormatNoformat formatNoformat)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting result = new AstBackupSetting(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// kill_statement
    /// 	 : KILL  (kill_process | kill_query_notification | kill_stats_job)
    /// </summary>
    public partial class AstKillStatement : AstAnotherStatement
    {
        
        protected static string _rule = "kill_statement\r\n\t : KILL  (kill_process | kill_query_notification | kill_stats_jo" +
            "b)";
        
        internal AstKillStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstKillStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstKillStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstKillStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillStatement(this);
        }
        
        /// <summary>
        ///  : 
        ///    KILL kill_process 
        /// </summary>
        public static AstKillStatement KillStatement(AstKillProcess killProcess)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstKillStatement result = new AstKillStatement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    KILL kill_query_notification 
        /// </summary>
        public static AstKillStatement KillStatement(AstKillQueryNotification killQueryNotification)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstKillStatement result = new AstKillStatement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    KILL kill_stats_job 
        /// </summary>
        public static AstKillStatement KillStatement(AstKillStatsJob killStatsJob)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstKillStatement result = new AstKillStatement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// kill_process
    /// 	 : (session = decimal_string | UOW)  (WITH  STATUSONLY)?
    /// </summary>
    public partial class AstKillProcess : AstRule
    {
        
        protected static string _rule = "kill_process\r\n\t : (session = decimal_string | UOW)  (WITH  STATUSONLY)?";
        
        internal AstKillProcess(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstKillProcess(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstKillProcess(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstKillProcess(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillProcess(this);
        }
        
        /// <summary>
        ///  : 
        ///    session=decimal_string WITH STATUSONLY 
        /// </summary>
        public static AstKillProcess KillProcess(AstDecimalString session)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstKillProcess result = new AstKillProcess(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// kill_query_notification
    /// 	 : QUERY  NOTIFICATION  SUBSCRIPTION  (ALL | subscription = decimal)
    /// </summary>
    public partial class AstKillQueryNotification : AstRule
    {
        
        protected static string _rule = "kill_query_notification\r\n\t : QUERY  NOTIFICATION  SUBSCRIPTION  (ALL | subscripti" +
            "on = decimal)";
        
        internal AstKillQueryNotification(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstKillQueryNotification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstKillQueryNotification(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstKillQueryNotification(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillQueryNotification(this);
        }
        
        /// <summary>
        ///  : 
        ///    QUERY NOTIFICATION SUBSCRIPTION subscription=decimal 
        /// </summary>
        public static AstKillQueryNotification KillQueryNotification(AstDecimal subscription)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstKillQueryNotification result = new AstKillQueryNotification(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// kill_stats_job
    /// 	 : STATS  JOB  job = decimal
    /// </summary>
    public partial class AstKillStatsJob : AstRule
    {
        
        protected static string _rule = "kill_stats_job\r\n\t : STATS  JOB  job = decimal";
        
        internal AstKillStatsJob(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstKillStatsJob(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstKillStatsJob(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstKillStatsJob(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillStatsJob(this);
        }
        
        /// <summary>
        ///  : 
        ///    STATS JOB job=decimal 
        /// </summary>
        public static AstKillStatsJob KillStatsJob(AstDecimal job)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstKillStatsJob result = new AstKillStatsJob(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// execute_body
    /// 	 : (return_status = local_id  EQUAL)?  (func_proc_name_server_database_schema | execute_var_string)  execute_statement_arg?
    /// 	 | LR_BRACKET  execute_var_strings  RR_BRACKET  (AS?  login_user  EQUAL  stringtext)?  (AT_KEYWORD  server_id)?
    /// </summary>
    public partial class AstExecuteBody : AstRule
    {
        
        protected static string _rule = "execute_body\r\n\t : (return_status = local_id  EQUAL)?  (func_proc_name_server_data" +
            "base_schema | execute_var_string)  execute_statement_arg?\r\n\t | LR_BRACKET  execu" +
            "te_var_strings  RR_BRACKET  (AS?  login_user  EQUAL  stringtext)?  (AT_KEYWORD  " +
            "server_id)?";
        
        internal AstExecuteBody(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstExecuteBody(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExecuteBody(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExecuteBody(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteBody(this);
        }
        
        /// <summary>
        ///  : 
        ///    return_status=local_id EQUAL func_proc_name_server_database_schema execute_statement_arg? 
        /// </summary>
        public static AstExecuteBody ExecuteBody(AstLocalId returnStatus, AstFuncProcNameServerDatabaseSchema funcProcNameServerDatabaseSchema, AstExecuteStatementArg executeStatementArg)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteBody result = new AstExecuteBody(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    return_status=local_id EQUAL execute_var_string execute_statement_arg? 
        /// </summary>
        public static AstExecuteBody ExecuteBody(AstLocalId returnStatus, AstExecuteVarString executeVarString, AstExecuteStatementArg executeStatementArg)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteBody result = new AstExecuteBody(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ( execute_var_strings ) AS? login_user EQUAL stringtext AT_KEYWORD server_id 
        /// </summary>
        public static AstExecuteBody ExecuteBody(AstExecuteVarStrings executeVarStrings, AstLoginUser loginUser, AstStringtext stringtext, AstServerId serverId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteBody result = new AstExecuteBody(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// execute_statement_arg
    /// 	 : execute_statement_arg_unnamed  execute_statement_args?
    /// 	 | execute_statement_arg_nameds
    /// </summary>
    public partial class AstExecuteStatementArg : AstRule
    {
        
        protected static string _rule = "execute_statement_arg\r\n\t : execute_statement_arg_unnamed  execute_statement_args?" +
            "\r\n\t | execute_statement_arg_nameds";
        
        internal AstExecuteStatementArg(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstExecuteStatementArg(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExecuteStatementArg(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExecuteStatementArg(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArg(this);
        }
        
        /// <summary>
        ///  : 
        ///    execute_statement_arg_unnamed execute_statement_args? 
        /// </summary>
        public static AstExecuteStatementArg ExecuteStatementArg(AstExecuteStatementArgUnnamed executeStatementArgUnnamed, AstExecuteStatementArgs executeStatementArgs)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteStatementArg result = new AstExecuteStatementArg(arguments);
            return result;
        }
        
        /// <summary>
        /// execute_statement_arg_nameds : 
        ///    execute_statement_arg_nameds 
        /// </summary>
        public static AstExecuteStatementArg ExecuteStatementArg(AstExecuteStatementArgNameds executeStatementArgNameds)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteStatementArg result = new AstExecuteStatementArg(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// execute_statement_arg_named
    /// 	 : name = local_id  EQUAL  value = execute_parameter
    /// </summary>
    public partial class AstExecuteStatementArgNamed : AstRule
    {
        
        protected static string _rule = "execute_statement_arg_named\r\n\t : name = local_id  EQUAL  value = execute_paramete" +
            "r";
        
        internal AstExecuteStatementArgNamed(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstExecuteStatementArgNamed(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExecuteStatementArgNamed(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExecuteStatementArgNamed(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgNamed(this);
        }
        
        /// <summary>
        ///  : 
        ///    name=local_id EQUAL value=execute_parameter 
        /// </summary>
        public static AstExecuteStatementArgNamed ExecuteStatementArgNamed(AstLocalId name, AstExecuteParameter value)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteStatementArgNamed result = new AstExecuteStatementArgNamed(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// execute_statement_arg_unnamed
    /// 	 : value = execute_parameter
    /// </summary>
    public partial class AstExecuteStatementArgUnnamed : AstRule
    {
        
        protected static string _rule = "execute_statement_arg_unnamed\r\n\t : value = execute_parameter";
        
        internal AstExecuteStatementArgUnnamed(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstExecuteStatementArgUnnamed(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExecuteStatementArgUnnamed(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExecuteStatementArgUnnamed(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgUnnamed(this);
        }
        
        /// <summary>
        /// execute_parameter : 
        ///    value=execute_parameter 
        /// </summary>
        public static AstExecuteStatementArgUnnamed ExecuteStatementArgUnnamed(AstExecuteParameter value)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteStatementArgUnnamed result = new AstExecuteStatementArgUnnamed(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// execute_parameter
    /// 	 : (constant | local_id  output_out? | id_ | DEFAULT | NULL_)
    /// </summary>
    public partial class AstExecuteParameter : AstRule
    {
        
        protected static string _rule = "execute_parameter\r\n\t : (constant | local_id  output_out? | id_ | DEFAULT | NULL_)" +
            "";
        
        internal AstExecuteParameter(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstExecuteParameter(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExecuteParameter(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExecuteParameter(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteParameter(this);
        }
        
        /// <summary>
        /// constant : 
        ///    constant 
        /// </summary>
        public static AstExecuteParameter ExecuteParameter(AstConstant constant)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteParameter result = new AstExecuteParameter(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    local_id output_out? 
        /// </summary>
        public static AstExecuteParameter ExecuteParameter(AstLocalId localId, AstOutputOut outputOut)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteParameter result = new AstExecuteParameter(arguments);
            return result;
        }
        
        /// <summary>
        /// id_ : 
        ///    id_ 
        /// </summary>
        public static AstExecuteParameter ExecuteParameter(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteParameter result = new AstExecuteParameter(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// execute_var_string
    /// 	 : source = local_id  output_out?  (PLUS  more = local_id  (PLUS  execute_var_string)?)?
    /// 	 | stringtext  (PLUS  local_id  (PLUS  execute_var_string)?)?
    /// </summary>
    public partial class AstExecuteVarString : AstRule
    {
        
        protected static string _rule = "execute_var_string\r\n\t : source = local_id  output_out?  (PLUS  more = local_id  (" +
            "PLUS  execute_var_string)?)?\r\n\t | stringtext  (PLUS  local_id  (PLUS  execute_va" +
            "r_string)?)?";
        
        internal AstExecuteVarString(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstExecuteVarString(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExecuteVarString(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExecuteVarString(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteVarString(this);
        }
        
        /// <summary>
        ///  : 
        ///    source=local_id output_out? PLUS more=local_id PLUS execute_var_string 
        /// </summary>
        public static AstExecuteVarString ExecuteVarString(AstLocalId source, AstOutputOut outputOut, AstLocalId more, AstExecuteVarString executeVarString)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteVarString result = new AstExecuteVarString(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    stringtext PLUS local_id PLUS execute_var_string 
        /// </summary>
        public static AstExecuteVarString ExecuteVarString(AstStringtext stringtext, AstLocalId localId, AstExecuteVarString executeVarString)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteVarString result = new AstExecuteVarString(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// security_statement
    /// 	 : execute_clause  SEMI?
    /// 	 | GRANT  (ALL  PRIVILEGES? | grant_permission  (LR_BRACKET  column_name_list  RR_BRACKET)?)  (ON  (class_type_for_grant  DOUBLE_COLON)?  table = full_table_ref)?  TO  to_principal_rincipal_ids  (WITH  GRANT  OPTION)?  (AS  as_principal = principal_id)?  SEMI?
    /// 	 | REVERT  (LR_BRACKET  WITH  COOKIE  EQUAL  local_id  RR_BRACKET)?  SEMI?
    /// 	 | open_key
    /// 	 | close_key
    /// 	 | create_key
    /// 	 | create_certificate
    /// </summary>
    public partial class AstSecurityStatement : AstAnotherStatement
    {
        
        protected static string _rule = @"security_statement
	 : execute_clause  SEMI?
	 | GRANT  (ALL  PRIVILEGES? | grant_permission  (LR_BRACKET  column_name_list  RR_BRACKET)?)  (ON  (class_type_for_grant  DOUBLE_COLON)?  table = full_table_ref)?  TO  to_principal_rincipal_ids  (WITH  GRANT  OPTION)?  (AS  as_principal = principal_id)?  SEMI?
	 | REVERT  (LR_BRACKET  WITH  COOKIE  EQUAL  local_id  RR_BRACKET)?  SEMI?
	 | open_key
	 | close_key
	 | create_key
	 | create_certificate";
        
        internal AstSecurityStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSecurityStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSecurityStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSecurityStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSecurityStatement(this);
        }
        
        /// <summary>
        ///  : 
        ///    execute_clause SEMI? 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(AstExecuteClause executeClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSecurityStatement result = new AstSecurityStatement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    GRANT ALL PRIVILEGES? ON class_type_for_grant :: table=full_table_ref TO to_principal_rincipal_ids WITH GRANT OPTION AS as_principal=principal_id SEMI? 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(AstClassTypeForGrant classTypeForGrant, AstFullTableRef table, AstToPrincipalRincipalIds toPrincipalRincipalIds, AstPrincipalId asPrincipal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSecurityStatement result = new AstSecurityStatement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    GRANT grant_permission ( column_name_list ) ON class_type_for_grant :: table=full_table_ref TO to_principal_rincipal_ids WITH GRANT OPTION AS as_principal=principal_id SEMI? 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(AstGrantPermission grantPermission, AstColumnNameList columnNameList, AstClassTypeForGrant classTypeForGrant, AstFullTableRef table, AstToPrincipalRincipalIds toPrincipalRincipalIds, AstPrincipalId asPrincipal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSecurityStatement result = new AstSecurityStatement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    REVERT ( WITH COOKIE EQUAL local_id ) SEMI? 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(AstLocalId localId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSecurityStatement result = new AstSecurityStatement(arguments);
            return result;
        }
        
        /// <summary>
        /// open_key : 
        ///    open_key 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(AstOpenKey openKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSecurityStatement result = new AstSecurityStatement(arguments);
            return result;
        }
        
        /// <summary>
        /// close_key : 
        ///    close_key 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(AstCloseKey closeKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSecurityStatement result = new AstSecurityStatement(arguments);
            return result;
        }
        
        /// <summary>
        /// create_key : 
        ///    create_key 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(AstCreateKey createKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSecurityStatement result = new AstSecurityStatement(arguments);
            return result;
        }
        
        /// <summary>
        /// create_certificate : 
        ///    create_certificate 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(AstCreateCertificate createCertificate)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSecurityStatement result = new AstSecurityStatement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// existing_keys
    /// 	 : ASSEMBLY  assembly_id
    /// 	 | EXECUTABLE?  FILE  EQUAL  path_to_file = stringtext  (WITH  PRIVATE  KEY  LR_BRACKET  private_key_options  RR_BRACKET)?
    /// </summary>
    public partial class AstExistingKeys : AstRule
    {
        
        protected static string _rule = "existing_keys\r\n\t : ASSEMBLY  assembly_id\r\n\t | EXECUTABLE?  FILE  EQUAL  path_to_f" +
            "ile = stringtext  (WITH  PRIVATE  KEY  LR_BRACKET  private_key_options  RR_BRACK" +
            "ET)?";
        
        internal AstExistingKeys(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstExistingKeys(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExistingKeys(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExistingKeys(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExistingKeys(this);
        }
        
        /// <summary>
        ///  : 
        ///    ASSEMBLY assembly_id 
        /// </summary>
        public static AstExistingKeys ExistingKeys(AstAssemblyId assemblyId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExistingKeys result = new AstExistingKeys(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    EXECUTABLE? FILE EQUAL path_to_file=stringtext WITH PRIVATE KEY ( private_key_options ) 
        /// </summary>
        public static AstExistingKeys ExistingKeys(AstStringtext pathToFile, AstPrivateKeyOptions privateKeyOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExistingKeys result = new AstExistingKeys(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// private_key_options
    /// 	 : (FILE | binary_)  EQUAL  path = stringtext  (COMMA  encryption_decryption  BY  PASSWORD  EQUAL  password = stringtext)?
    /// </summary>
    public partial class AstPrivateKeyOptions : AstRule
    {
        
        protected static string _rule = "private_key_options\r\n\t : (FILE | binary_)  EQUAL  path = stringtext  (COMMA  encr" +
            "yption_decryption  BY  PASSWORD  EQUAL  password = stringtext)?";
        
        internal AstPrivateKeyOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstPrivateKeyOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstPrivateKeyOptions(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstPrivateKeyOptions(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrivateKeyOptions(this);
        }
        
        /// <summary>
        ///  : 
        ///    FILE EQUAL path=stringtext , encryption_decryption BY PASSWORD EQUAL password=stringtext 
        /// </summary>
        public static AstPrivateKeyOptions PrivateKeyOptions(AstStringtext path, AstEncryptionDecryption encryptionDecryption, AstStringtext password)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPrivateKeyOptions result = new AstPrivateKeyOptions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    binary_ EQUAL path=stringtext , encryption_decryption BY PASSWORD EQUAL password=stringtext 
        /// </summary>
        public static AstPrivateKeyOptions PrivateKeyOptions(AstBinary binary, AstStringtext path, AstEncryptionDecryption encryptionDecryption, AstStringtext password)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPrivateKeyOptions result = new AstPrivateKeyOptions(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// open_key
    /// 	 : OPEN  SYMMETRIC  KEY  symmetric_key_id  DECRYPTION  BY  decryption_mechanism
    /// 	 | OPEN  MASTER  KEY  decryption_by_pwd
    /// </summary>
    public partial class AstOpenKey : AstRule
    {
        
        protected static string _rule = "open_key\r\n\t : OPEN  SYMMETRIC  KEY  symmetric_key_id  DECRYPTION  BY  decryption_" +
            "mechanism\r\n\t | OPEN  MASTER  KEY  decryption_by_pwd";
        
        internal AstOpenKey(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstOpenKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstOpenKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstOpenKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenKey(this);
        }
        
        /// <summary>
        ///  : 
        ///    OPEN SYMMETRIC KEY symmetric_key_id DECRYPTION BY decryption_mechanism 
        /// </summary>
        public static AstOpenKey OpenKey(AstSymmetricKeyId symmetricKeyId, AstDecryptionMechanism decryptionMechanism)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstOpenKey result = new AstOpenKey(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    OPEN MASTER KEY decryption_by_pwd 
        /// </summary>
        public static AstOpenKey OpenKey(AstDecryptionByPwd decryptionByPwd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstOpenKey result = new AstOpenKey(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// close_key
    /// 	 : CLOSE  SYMMETRIC  KEY  symmetric_key_id
    /// 	 | CLOSE  ALL  SYMMETRIC  KEYS
    /// 	 | CLOSE  MASTER  KEY
    /// </summary>
    public partial class AstCloseKey : AstRule
    {
        
        protected static string _rule = "close_key\r\n\t : CLOSE  SYMMETRIC  KEY  symmetric_key_id\r\n\t | CLOSE  ALL  SYMMETRIC" +
            "  KEYS\r\n\t | CLOSE  MASTER  KEY";
        
        internal AstCloseKey(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCloseKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCloseKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCloseKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCloseKey(this);
        }
        
        /// <summary>
        ///  : 
        ///    CLOSE SYMMETRIC KEY symmetric_key_id 
        /// </summary>
        public static AstCloseKey CloseKey(AstSymmetricKeyId symmetricKeyId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCloseKey result = new AstCloseKey(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_key
    /// 	 : CREATE  MASTER  KEY  encryption_by_pwd
    /// 	 | CREATE  SYMMETRIC  KEY  symmetric_key_id  (AUTHORIZATION  user_id)?  (FROM  PROVIDER  provider_id)?  WITH  ((key_options | ENCRYPTION  BY  encryption_mechanism)  COMMA?)+
    /// </summary>
    public partial class AstCreateKey : AstRule
    {
        
        protected static string _rule = "create_key\r\n\t : CREATE  MASTER  KEY  encryption_by_pwd\r\n\t | CREATE  SYMMETRIC  KE" +
            "Y  symmetric_key_id  (AUTHORIZATION  user_id)?  (FROM  PROVIDER  provider_id)?  " +
            "WITH  ((key_options | ENCRYPTION  BY  encryption_mechanism)  COMMA?)+";
        
        internal AstCreateKey(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateKey(this);
        }
        
        /// <summary>
        ///  : 
        ///    CREATE MASTER KEY encryption_by_pwd 
        /// </summary>
        public static AstCreateKey CreateKey(AstEncryptionByPwd encryptionByPwd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateKey result = new AstCreateKey(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CREATE SYMMETRIC KEY symmetric_key_id AUTHORIZATION user_id FROM PROVIDER provider_id WITH key_options COMMA? 
        /// </summary>
        public static AstCreateKey CreateKey(AstSymmetricKeyId symmetricKeyId, AstUserId userId, AstProviderId providerId, AstKeyOptions keyOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateKey result = new AstCreateKey(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CREATE SYMMETRIC KEY symmetric_key_id AUTHORIZATION user_id FROM PROVIDER provider_id WITH ENCRYPTION BY encryption_mechanism COMMA? 
        /// </summary>
        public static AstCreateKey CreateKey(AstSymmetricKeyId symmetricKeyId, AstUserId userId, AstProviderId providerId, AstEncryptionMechanism encryptionMechanism)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateKey result = new AstCreateKey(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// key_options
    /// 	 : KEY_SOURCE  EQUAL  pass_phrase = stringtext
    /// 	 | ALGORITHM  EQUAL  algorithm
    /// 	 | IDENTITY_VALUE  EQUAL  identity_phrase = stringtext
    /// 	 | PROVIDER_KEY_NAME  EQUAL  key_name_in_provider = stringtext
    /// 	 | CREATION_DISPOSITION  EQUAL  (CREATE_NEW | OPEN_EXISTING)
    /// </summary>
    public partial class AstKeyOptions : AstRule
    {
        
        protected static string _rule = @"key_options
	 : KEY_SOURCE  EQUAL  pass_phrase = stringtext
	 | ALGORITHM  EQUAL  algorithm
	 | IDENTITY_VALUE  EQUAL  identity_phrase = stringtext
	 | PROVIDER_KEY_NAME  EQUAL  key_name_in_provider = stringtext
	 | CREATION_DISPOSITION  EQUAL  (CREATE_NEW | OPEN_EXISTING)";
        
        internal AstKeyOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstKeyOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstKeyOptions(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstKeyOptions(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKeyOptions(this);
        }
        
        /// <summary>
        ///  : 
        ///    KEY_SOURCE EQUAL pass_phrase=stringtext 
        /// </summary>
        public static AstKeyOptions KeyOptions(AstStringtext passPhrase)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstKeyOptions result = new AstKeyOptions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ALGORITHM EQUAL algorithm 
        /// </summary>
        public static AstKeyOptions KeyOptions(AstAlgorithm algorithm)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstKeyOptions result = new AstKeyOptions(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// encryption_mechanism
    /// 	 : CERTIFICATE  certificate_id
    /// 	 | ASYMMETRIC  KEY  asym_key_id
    /// 	 | SYMMETRIC  KEY  symmetric_key_id
    /// 	 | PASSWORD  EQUAL  stringtext
    /// </summary>
    public partial class AstEncryptionMechanism : AstRule
    {
        
        protected static string _rule = "encryption_mechanism\r\n\t : CERTIFICATE  certificate_id\r\n\t | ASYMMETRIC  KEY  asym_" +
            "key_id\r\n\t | SYMMETRIC  KEY  symmetric_key_id\r\n\t | PASSWORD  EQUAL  stringtext";
        
        internal AstEncryptionMechanism(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstEncryptionMechanism(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstEncryptionMechanism(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstEncryptionMechanism(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEncryptionMechanism(this);
        }
        
        /// <summary>
        ///  : 
        ///    CERTIFICATE certificate_id 
        /// </summary>
        public static AstEncryptionMechanism EncryptionMechanism(AstCertificateId certificateId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEncryptionMechanism result = new AstEncryptionMechanism(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public static AstEncryptionMechanism EncryptionMechanism(AstAsymKeyId asymKeyId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEncryptionMechanism result = new AstEncryptionMechanism(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    SYMMETRIC KEY symmetric_key_id 
        /// </summary>
        public static AstEncryptionMechanism EncryptionMechanism(AstSymmetricKeyId symmetricKeyId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEncryptionMechanism result = new AstEncryptionMechanism(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    PASSWORD EQUAL stringtext 
        /// </summary>
        public static AstEncryptionMechanism EncryptionMechanism(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEncryptionMechanism result = new AstEncryptionMechanism(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// decryption_mechanism
    /// 	 : CERTIFICATE  certificate_id  (WITH  PASSWORD  EQUAL  stringtext)?
    /// 	 | ASYMMETRIC  KEY  asym_key_id  (WITH  PASSWORD  EQUAL  stringtext)?
    /// 	 | SYMMETRIC  KEY  symmetric_key_id
    /// 	 | PASSWORD  EQUAL  stringtext
    /// </summary>
    public partial class AstDecryptionMechanism : AstRule
    {
        
        protected static string _rule = "decryption_mechanism\r\n\t : CERTIFICATE  certificate_id  (WITH  PASSWORD  EQUAL  st" +
            "ringtext)?\r\n\t | ASYMMETRIC  KEY  asym_key_id  (WITH  PASSWORD  EQUAL  stringtext" +
            ")?\r\n\t | SYMMETRIC  KEY  symmetric_key_id\r\n\t | PASSWORD  EQUAL  stringtext";
        
        internal AstDecryptionMechanism(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDecryptionMechanism(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDecryptionMechanism(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDecryptionMechanism(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecryptionMechanism(this);
        }
        
        /// <summary>
        ///  : 
        ///    CERTIFICATE certificate_id WITH PASSWORD EQUAL stringtext 
        /// </summary>
        public static AstDecryptionMechanism DecryptionMechanism(AstCertificateId certificateId, AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDecryptionMechanism result = new AstDecryptionMechanism(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ASYMMETRIC KEY asym_key_id WITH PASSWORD EQUAL stringtext 
        /// </summary>
        public static AstDecryptionMechanism DecryptionMechanism(AstAsymKeyId asymKeyId, AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDecryptionMechanism result = new AstDecryptionMechanism(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    SYMMETRIC KEY symmetric_key_id 
        /// </summary>
        public static AstDecryptionMechanism DecryptionMechanism(AstSymmetricKeyId symmetricKeyId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDecryptionMechanism result = new AstDecryptionMechanism(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    PASSWORD EQUAL stringtext 
        /// </summary>
        public static AstDecryptionMechanism DecryptionMechanism(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDecryptionMechanism result = new AstDecryptionMechanism(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// grant_permission
    /// 	 : grant_permission_enum
    /// 	 | grant_permission_alter
    /// 	 | grant_permission_create
    /// </summary>
    public partial class AstGrantPermission : AstRule
    {
        
        protected static string _rule = "grant_permission\r\n\t : grant_permission_enum\r\n\t | grant_permission_alter\r\n\t | gran" +
            "t_permission_create";
        
        internal AstGrantPermission(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstGrantPermission(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstGrantPermission(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstGrantPermission(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGrantPermission(this);
        }
        
        /// <summary>
        /// grant_permission_enum : 
        ///    grant_permission_enum 
        /// </summary>
        public static AstGrantPermission GrantPermission(AstGrantPermissionEnum grantPermissionEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstGrantPermission result = new AstGrantPermission(arguments);
            return result;
        }
        
        /// <summary>
        /// grant_permission_alter : 
        ///    grant_permission_alter 
        /// </summary>
        public static AstGrantPermission GrantPermission(AstGrantPermissionAlter grantPermissionAlter)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstGrantPermission result = new AstGrantPermission(arguments);
            return result;
        }
        
        /// <summary>
        /// grant_permission_create : 
        ///    grant_permission_create 
        /// </summary>
        public static AstGrantPermission GrantPermission(AstGrantPermissionCreate grantPermissionCreate)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstGrantPermission result = new AstGrantPermission(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// set_statement
    /// 	 : SET  local_id  (DOT  member_name = id_)?  EQUAL  expression  SEMI?
    /// 	 | SET  local_id  assignment_operator  expression  SEMI?
    /// 	 | SET  local_id  EQUAL  CURSOR  declare_set_cursor_common  (FOR  (READ  ONLY | UPDATE  (OF  column_name_list)?))?  SEMI?
    /// 	 | set_special
    /// </summary>
    public partial class AstSetStatement : AstAnotherStatement
    {
        
        protected static string _rule = @"set_statement
	 : SET  local_id  (DOT  member_name = id_)?  EQUAL  expression  SEMI?
	 | SET  local_id  assignment_operator  expression  SEMI?
	 | SET  local_id  EQUAL  CURSOR  declare_set_cursor_common  (FOR  (READ  ONLY | UPDATE  (OF  column_name_list)?))?  SEMI?
	 | set_special";
        
        internal AstSetStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSetStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSetStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSetStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetStatement(this);
        }
        
        /// <summary>
        ///  : 
        ///    SET local_id . member_name=id_ EQUAL expression SEMI? 
        /// </summary>
        public static AstSetStatement SetStatement(AstLocalId localId, AstId memberName, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetStatement result = new AstSetStatement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    SET local_id assignment_operator expression SEMI? 
        /// </summary>
        public static AstSetStatement SetStatement(AstLocalId localId, AstAssignmentOperator assignmentOperator, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetStatement result = new AstSetStatement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    SET local_id EQUAL CURSOR declare_set_cursor_common FOR READ ONLY SEMI? 
        /// </summary>
        public static AstSetStatement SetStatement(AstLocalId localId, AstDeclareSetCursorCommon declareSetCursorCommon)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetStatement result = new AstSetStatement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    SET local_id EQUAL CURSOR declare_set_cursor_common FOR UPDATE OF column_name_list SEMI? 
        /// </summary>
        public static AstSetStatement SetStatement(AstLocalId localId, AstDeclareSetCursorCommon declareSetCursorCommon, AstColumnNameList columnNameList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetStatement result = new AstSetStatement(arguments);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    set_special 
        /// </summary>
        public static AstSetStatement SetStatement(AstSetSpecial setSpecial)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetStatement result = new AstSetStatement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// transaction_statement
    /// 	 : BEGIN  DISTRIBUTED  transaction  transaction_ref?
    /// 	 | BEGIN  transaction  (transaction_ref  (WITH  MARK  mark = stringtext)?)?
    /// 	 | COMMIT  transaction  (transaction_ref  (WITH  LR_BRACKET  DELAYED_DURABILITY  EQUAL  on_off  RR_BRACKET)?)?
    /// 	 | COMMIT  WORK?
    /// 	 | COMMIT  transaction_id
    /// 	 | ROLLBACK  transaction_id
    /// 	 | ROLLBACK  transaction  transaction_ref?
    /// 	 | ROLLBACK  WORK?
    /// 	 | SAVE  transaction  transaction_ref?
    /// </summary>
    public partial class AstTransactionStatement : AstAnotherStatement
    {
        
        protected static string _rule = @"transaction_statement
	 : BEGIN  DISTRIBUTED  transaction  transaction_ref?
	 | BEGIN  transaction  (transaction_ref  (WITH  MARK  mark = stringtext)?)?
	 | COMMIT  transaction  (transaction_ref  (WITH  LR_BRACKET  DELAYED_DURABILITY  EQUAL  on_off  RR_BRACKET)?)?
	 | COMMIT  WORK?
	 | COMMIT  transaction_id
	 | ROLLBACK  transaction_id
	 | ROLLBACK  transaction  transaction_ref?
	 | ROLLBACK  WORK?
	 | SAVE  transaction  transaction_ref?";
        
        internal AstTransactionStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTransactionStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTransactionStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTransactionStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTransactionStatement(this);
        }
        
        /// <summary>
        ///  : 
        ///    BEGIN DISTRIBUTED transaction transaction_ref? 
        /// </summary>
        public static AstTransactionStatement TransactionStatement(AstTransaction transaction, AstTransactionRef transactionRef)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTransactionStatement result = new AstTransactionStatement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    BEGIN transaction transaction_ref WITH MARK mark=stringtext 
        /// </summary>
        public static AstTransactionStatement TransactionStatement(AstTransaction transaction, AstTransactionRef transactionRef, AstStringtext mark)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTransactionStatement result = new AstTransactionStatement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    COMMIT transaction transaction_ref WITH ( DELAYED_DURABILITY EQUAL on_off ) 
        /// </summary>
        public static AstTransactionStatement TransactionStatement(AstTransaction transaction, AstTransactionRef transactionRef, AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTransactionStatement result = new AstTransactionStatement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    COMMIT transaction_id 
        /// </summary>
        public static AstTransactionStatement TransactionStatement(AstTransactionId transactionId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTransactionStatement result = new AstTransactionStatement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// go_statement
    /// 	 : GO  (count = decimal)?
    /// </summary>
    public partial class AstGoStatement : AstRule
    {
        
        protected static string _rule = "go_statement\r\n\t : GO  (count = decimal)?";
        
        internal AstGoStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstGoStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstGoStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstGoStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGoStatement(this);
        }
        
        /// <summary>
        ///  : 
        ///    GO count=decimal()? 
        /// </summary>
        public static AstGoStatement GoStatement(AstDecimal count)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstGoStatement result = new AstGoStatement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// setuser_statement
    /// 	 : SETUSER  user = stringtext
    /// </summary>
    public partial class AstSetuserStatement : AstAnotherStatement
    {
        
        protected static string _rule = "setuser_statement\r\n\t : SETUSER  user = stringtext";
        
        internal AstSetuserStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSetuserStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSetuserStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSetuserStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetuserStatement(this);
        }
        
        /// <summary>
        ///  : 
        ///    SETUSER user=stringtext 
        /// </summary>
        public static AstSetuserStatement SetuserStatement(AstStringtext user)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetuserStatement result = new AstSetuserStatement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// reconfigure_statement
    /// 	 : RECONFIGURE  (WITH  OVERRIDE)?
    /// </summary>
    public partial class AstReconfigureStatement : AstAnotherStatement
    {
        
        protected static string _rule = "reconfigure_statement\r\n\t : RECONFIGURE  (WITH  OVERRIDE)?";
        
        internal AstReconfigureStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstReconfigureStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstReconfigureStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstReconfigureStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReconfigureStatement(this);
        }
    }
    
    /// <summary>
    /// shutdown_statement
    /// 	 : SHUTDOWN  (WITH  NOWAIT)?
    /// </summary>
    public partial class AstShutdownStatement : AstAnotherStatement
    {
        
        protected static string _rule = "shutdown_statement\r\n\t : SHUTDOWN  (WITH  NOWAIT)?";
        
        internal AstShutdownStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstShutdownStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstShutdownStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstShutdownStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitShutdownStatement(this);
        }
    }
    
    /// <summary>
    /// checkpoint_statement
    /// 	 : CHECKPOINT  (checkPointDuration = decimal)?
    /// </summary>
    public partial class AstCheckpointStatement : AstAnotherStatement
    {
        
        protected static string _rule = "checkpoint_statement\r\n\t : CHECKPOINT  (checkPointDuration = decimal)?";
        
        internal AstCheckpointStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCheckpointStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCheckpointStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCheckpointStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCheckpointStatement(this);
        }
        
        /// <summary>
        ///  : 
        ///    CHECKPOINT checkPointDuration=decimal()? 
        /// </summary>
        public static AstCheckpointStatement CheckpointStatement(AstDecimal checkPointDuration)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCheckpointStatement result = new AstCheckpointStatement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// dbcc_special
    /// 	 : DBCC  SHRINKLOG  (LR_BRACKET  SIZE  EQUAL  (constant_expression | id_ | DEFAULT)  RR_BRACKET)?  SEMI?
    /// </summary>
    public partial class AstDbccSpecial : AstRule
    {
        
        protected static string _rule = "dbcc_special\r\n\t : DBCC  SHRINKLOG  (LR_BRACKET  SIZE  EQUAL  (constant_expression" +
            " | id_ | DEFAULT)  RR_BRACKET)?  SEMI?";
        
        internal AstDbccSpecial(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDbccSpecial(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDbccSpecial(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDbccSpecial(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccSpecial(this);
        }
        
        /// <summary>
        ///  : 
        ///    DBCC SHRINKLOG ( SIZE EQUAL constant_expression ) SEMI? 
        /// </summary>
        public static AstDbccSpecial DbccSpecial(AstConstantExpression constantExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDbccSpecial result = new AstDbccSpecial(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DBCC SHRINKLOG ( SIZE EQUAL id_ ) SEMI? 
        /// </summary>
        public static AstDbccSpecial DbccSpecial(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDbccSpecial result = new AstDbccSpecial(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// dbcc_clause
    /// 	 : DBCC  name = dbcc_command  (LR_BRACKET  expression_list  RR_BRACKET)?  (WITH  dbcc_options)?  SEMI?
    /// </summary>
    public partial class AstDbccClause : AstRule
    {
        
        protected static string _rule = "dbcc_clause\r\n\t : DBCC  name = dbcc_command  (LR_BRACKET  expression_list  RR_BRAC" +
            "KET)?  (WITH  dbcc_options)?  SEMI?";
        
        internal AstDbccClause(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDbccClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDbccClause(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDbccClause(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccClause(this);
        }
        
        /// <summary>
        ///  : 
        ///    DBCC name=dbcc_command ( expression_list ) WITH dbcc_options SEMI? 
        /// </summary>
        public static AstDbccClause DbccClause(AstDbccCommand name, AstExpressionList expressionList, AstDbccOptions dbccOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDbccClause result = new AstDbccClause(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// dbcc_command
    /// 	 : simple_id
    /// 	 | keyword
    /// </summary>
    public partial class AstDbccCommand : AstRule
    {
        
        protected static string _rule = "dbcc_command\r\n\t : simple_id\r\n\t | keyword";
        
        internal AstDbccCommand(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDbccCommand(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDbccCommand(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDbccCommand(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccCommand(this);
        }
        
        /// <summary>
        /// simple_id : 
        ///    simple_id 
        /// </summary>
        public static AstDbccCommand DbccCommand(AstSimpleId simpleId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDbccCommand result = new AstDbccCommand(arguments);
            return result;
        }
        
        /// <summary>
        /// keyword : 
        ///    keyword 
        /// </summary>
        public static AstDbccCommand DbccCommand(AstKeyword keyword)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDbccCommand result = new AstDbccCommand(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// execute_clause_mode
    /// 	 : execute_clause_mode_enum
    /// 	 | stringtext
    /// </summary>
    public partial class AstExecuteClauseMode : AstRule
    {
        
        protected static string _rule = "execute_clause_mode\r\n\t : execute_clause_mode_enum\r\n\t | stringtext";
        
        internal AstExecuteClauseMode(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstExecuteClauseMode(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExecuteClauseMode(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExecuteClauseMode(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteClauseMode(this);
        }
        
        /// <summary>
        /// execute_clause_mode_enum : 
        ///    execute_clause_mode_enum 
        /// </summary>
        public static AstExecuteClauseMode ExecuteClauseMode(AstExecuteClauseModeEnum executeClauseModeEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteClauseMode result = new AstExecuteClauseMode(arguments);
            return result;
        }
        
        /// <summary>
        /// stringtext : 
        ///    stringtext 
        /// </summary>
        public static AstExecuteClauseMode ExecuteClauseMode(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteClauseMode result = new AstExecuteClauseMode(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// table_type_indice
    /// 	 : (((PRIMARY  KEY | INDEX  id_)  clustered?) | UNIQUE)  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// 	 | CHECK  LR_BRACKET  search_condition  RR_BRACKET
    /// </summary>
    public partial class AstTableTypeIndice : AstRule
    {
        
        protected static string _rule = "table_type_indice\r\n\t : (((PRIMARY  KEY | INDEX  id_)  clustered?) | UNIQUE)  LR_B" +
            "RACKET  column_name_list_with_order  RR_BRACKET\r\n\t | CHECK  LR_BRACKET  search_c" +
            "ondition  RR_BRACKET";
        
        internal AstTableTypeIndice(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTableTypeIndice(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTableTypeIndice(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTableTypeIndice(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableTypeIndice(this);
        }
        
        /// <summary>
        ///  : 
        ///    PRIMARY KEY clustered? ( column_name_list_with_order ) 
        /// </summary>
        public static AstTableTypeIndice TableTypeIndice(AstClustered clustered, AstColumnNameListWithOrder columnNameListWithOrder)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableTypeIndice result = new AstTableTypeIndice(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    INDEX id_ clustered? ( column_name_list_with_order ) 
        /// </summary>
        public static AstTableTypeIndice TableTypeIndice(AstId id, AstClustered clustered, AstColumnNameListWithOrder columnNameListWithOrder)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableTypeIndice result = new AstTableTypeIndice(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    UNIQUE ( column_name_list_with_order ) 
        /// </summary>
        public static AstTableTypeIndice TableTypeIndice(AstColumnNameListWithOrder columnNameListWithOrder)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableTypeIndice result = new AstTableTypeIndice(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CHECK ( search_condition ) 
        /// </summary>
        public static AstTableTypeIndice TableTypeIndice(AstSearchCondition searchCondition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableTypeIndice result = new AstTableTypeIndice(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// xml_schema_collection
    /// 	 : left = ID  DOT  right = ID
    /// </summary>
    public partial class AstXmlSchemaCollection : AstRule
    {
        
        protected static string _rule = "xml_schema_collection\r\n\t : left = ID  DOT  right = ID";
        
        internal AstXmlSchemaCollection(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstXmlSchemaCollection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstXmlSchemaCollection(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstXmlSchemaCollection(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlSchemaCollection(this);
        }
        
        /// <summary>
        ///  : 
        ///    left=ID . right=ID 
        /// </summary>
        public static AstXmlSchemaCollection XmlSchemaCollection(String left, String right)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstXmlSchemaCollection result = new AstXmlSchemaCollection(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// column_def_table_constraint
    /// 	 : column_definition
    /// 	 | materialized_column_definition
    /// 	 | table_constraint
    /// </summary>
    public partial class AstColumnDefTableConstraint : AstRule
    {
        
        protected static string _rule = "column_def_table_constraint\r\n\t : column_definition\r\n\t | materialized_column_defin" +
            "ition\r\n\t | table_constraint";
        
        internal AstColumnDefTableConstraint(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstColumnDefTableConstraint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstColumnDefTableConstraint(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstColumnDefTableConstraint(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDefTableConstraint(this);
        }
        
        /// <summary>
        /// column_definition : 
        ///    column_definition 
        /// </summary>
        public static AstColumnDefTableConstraint ColumnDefTableConstraint(AstColumnDefinition columnDefinition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnDefTableConstraint result = new AstColumnDefTableConstraint(arguments);
            return result;
        }
        
        /// <summary>
        /// materialized_column_definition : 
        ///    materialized_column_definition 
        /// </summary>
        public static AstColumnDefTableConstraint ColumnDefTableConstraint(AstMaterializedColumnDefinition materializedColumnDefinition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnDefTableConstraint result = new AstColumnDefTableConstraint(arguments);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    table_constraint 
        /// </summary>
        public static AstColumnDefTableConstraint ColumnDefTableConstraint(AstTableConstraint tableConstraint)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnDefTableConstraint result = new AstColumnDefTableConstraint(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// column_definition_element
    /// 	 : FILESTREAM
    /// 	 | COLLATE  collation_id
    /// 	 | SPARSE
    /// 	 | MASKED  WITH  LR_BRACKET  FUNCTION  EQUAL  mask_function = stringtext  RR_BRACKET
    /// 	 | (CONSTRAINT  constraint_id)?  DEFAULT  constant_expr = expression
    /// 	 | IDENTITY  (LR_BRACKET  seed = decimal  COMMA  increment = decimal  RR_BRACKET)?
    /// 	 | NOT  FOR  REPLICATION
    /// 	 | GENERATED  ALWAYS  AS  generation_mode  start_end  HIDDEN_KEYWORD?
    /// 	 | ROWGUIDCOL
    /// 	 | ENCRYPTED  WITH  LR_BRACKET  column_encryption_key_id  EQUAL  key_name = stringtext  COMMA  ENCRYPTION_TYPE  EQUAL  encryption_mode  COMMA  ALGORITHM  EQUAL  algo = stringtext  RR_BRACKET
    /// 	 | column_constraint
    /// </summary>
    public partial class AstColumnDefinitionElement : AstRule
    {
        
        protected static string _rule = @"column_definition_element
	 : FILESTREAM
	 | COLLATE  collation_id
	 | SPARSE
	 | MASKED  WITH  LR_BRACKET  FUNCTION  EQUAL  mask_function = stringtext  RR_BRACKET
	 | (CONSTRAINT  constraint_id)?  DEFAULT  constant_expr = expression
	 | IDENTITY  (LR_BRACKET  seed = decimal  COMMA  increment = decimal  RR_BRACKET)?
	 | NOT  FOR  REPLICATION
	 | GENERATED  ALWAYS  AS  generation_mode  start_end  HIDDEN_KEYWORD?
	 | ROWGUIDCOL
	 | ENCRYPTED  WITH  LR_BRACKET  column_encryption_key_id  EQUAL  key_name = stringtext  COMMA  ENCRYPTION_TYPE  EQUAL  encryption_mode  COMMA  ALGORITHM  EQUAL  algo = stringtext  RR_BRACKET
	 | column_constraint";
        
        internal AstColumnDefinitionElement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstColumnDefinitionElement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstColumnDefinitionElement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstColumnDefinitionElement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDefinitionElement(this);
        }
        
        /// <summary>
        ///  : 
        ///    COLLATE collation_id 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(AstCollationId collationId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnDefinitionElement result = new AstColumnDefinitionElement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    MASKED WITH ( FUNCTION EQUAL mask_function=stringtext ) 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(AstStringtext maskFunction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnDefinitionElement result = new AstColumnDefinitionElement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CONSTRAINT constraint_id DEFAULT constant_expr=expression 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(AstConstraintId constraintId, AstExpression constantExpr)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnDefinitionElement result = new AstColumnDefinitionElement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    IDENTITY ( seed=decimal , increment=decimal ) 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(AstDecimal seed, AstDecimal increment)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnDefinitionElement result = new AstColumnDefinitionElement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    GENERATED ALWAYS AS generation_mode start_end HIDDEN_KEYWORD? 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(AstGenerationMode generationMode, AstStartEnd startEnd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnDefinitionElement result = new AstColumnDefinitionElement(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ENCRYPTED WITH ( column_encryption_key_id EQUAL key_name=stringtext , ENCRYPTION_TYPE EQUAL encryption_mode , ALGORITHM EQUAL algo=stringtext ) 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(AstColumnEncryptionKeyId columnEncryptionKeyId, AstStringtext keyName, AstEncryptionMode encryptionMode, AstStringtext algo)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnDefinitionElement result = new AstColumnDefinitionElement(arguments);
            return result;
        }
        
        /// <summary>
        /// column_constraint : 
        ///    column_constraint 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(AstColumnConstraint columnConstraint)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnDefinitionElement result = new AstColumnDefinitionElement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// column_constraint
    /// 	 : (CONSTRAINT  constraint_id)?  (null_notnull | (primary_key_unique  clustered?  primary_key_options) | ((FOREIGN  KEY)?  foreign_key_options) | check_constraint)
    /// </summary>
    public partial class AstColumnConstraint : AstRule
    {
        
        protected static string _rule = "column_constraint\r\n\t : (CONSTRAINT  constraint_id)?  (null_notnull | (primary_key" +
            "_unique  clustered?  primary_key_options) | ((FOREIGN  KEY)?  foreign_key_option" +
            "s) | check_constraint)";
        
        internal AstColumnConstraint(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstColumnConstraint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstColumnConstraint(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstColumnConstraint(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnConstraint(this);
        }
        
        /// <summary>
        ///  : 
        ///    CONSTRAINT constraint_id null_notnull 
        /// </summary>
        public static AstColumnConstraint ColumnConstraint(AstConstraintId constraintId, AstNullNotnull nullNotnull)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnConstraint result = new AstColumnConstraint(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CONSTRAINT constraint_id primary_key_unique clustered? primary_key_options 
        /// </summary>
        public static AstColumnConstraint ColumnConstraint(AstConstraintId constraintId, AstPrimaryKeyUnique primaryKeyUnique, AstClustered clustered, AstPrimaryKeyOptions primaryKeyOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnConstraint result = new AstColumnConstraint(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CONSTRAINT constraint_id FOREIGN KEY foreign_key_options 
        /// </summary>
        public static AstColumnConstraint ColumnConstraint(AstConstraintId constraintId, AstForeignKeyOptions foreignKeyOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnConstraint result = new AstColumnConstraint(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CONSTRAINT constraint_id check_constraint 
        /// </summary>
        public static AstColumnConstraint ColumnConstraint(AstConstraintId constraintId, AstCheckConstraint checkConstraint)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnConstraint result = new AstColumnConstraint(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// on_partition_or_filegroup
    /// 	 : ON  ((partition_scheme_id  LR_BRACKET  partition_column_id  RR_BRACKET) | file_group_id | DEFAULT_DOUBLE_QUOTE)
    /// </summary>
    public partial class AstOnPartitionOrFilegroup : AstRule
    {
        
        protected static string _rule = "on_partition_or_filegroup\r\n\t : ON  ((partition_scheme_id  LR_BRACKET  partition_c" +
            "olumn_id  RR_BRACKET) | file_group_id | DEFAULT_DOUBLE_QUOTE)";
        
        internal AstOnPartitionOrFilegroup(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstOnPartitionOrFilegroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstOnPartitionOrFilegroup(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstOnPartitionOrFilegroup(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnPartitionOrFilegroup(this);
        }
        
        /// <summary>
        ///  : 
        ///    ON partition_scheme_id ( partition_column_id ) 
        /// </summary>
        public static AstOnPartitionOrFilegroup OnPartitionOrFilegroup(AstPartitionSchemeId partitionSchemeId, AstPartitionColumnId partitionColumnId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstOnPartitionOrFilegroup result = new AstOnPartitionOrFilegroup(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ON file_group_id 
        /// </summary>
        public static AstOnPartitionOrFilegroup OnPartitionOrFilegroup(AstFileGroupId fileGroupId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstOnPartitionOrFilegroup result = new AstOnPartitionOrFilegroup(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// table_constraint
    /// 	 : (CONSTRAINT  constraint_id)?  ((primary_key_unique  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET  primary_key_options) | (FOREIGN  KEY  LR_BRACKET  fk = column_name_list  RR_BRACKET  foreign_key_options) | (CONNECTION  LR_BRACKET  connection_nodes  RR_BRACKET) | (DEFAULT  LR_BRACKET?  ((stringtext | PLUS | function_call | decimal)+ | NEXT  VALUE  FOR  full_table_ref)  RR_BRACKET?  FOR  id_) | check_constraint)
    /// </summary>
    public partial class AstTableConstraint : AstRule
    {
        
        protected static string _rule = @"table_constraint
	 : (CONSTRAINT  constraint_id)?  ((primary_key_unique  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET  primary_key_options) | (FOREIGN  KEY  LR_BRACKET  fk = column_name_list  RR_BRACKET  foreign_key_options) | (CONNECTION  LR_BRACKET  connection_nodes  RR_BRACKET) | (DEFAULT  LR_BRACKET?  ((stringtext | PLUS | function_call | decimal)+ | NEXT  VALUE  FOR  full_table_ref)  RR_BRACKET?  FOR  id_) | check_constraint)";
        
        internal AstTableConstraint(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTableConstraint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTableConstraint(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTableConstraint(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableConstraint(this);
        }
        
        /// <summary>
        ///  : 
        ///    CONSTRAINT constraint_id primary_key_unique clustered? ( column_name_list_with_order ) primary_key_options 
        /// </summary>
        public static AstTableConstraint TableConstraint(AstConstraintId constraintId, AstPrimaryKeyUnique primaryKeyUnique, AstClustered clustered, AstColumnNameListWithOrder columnNameListWithOrder, AstPrimaryKeyOptions primaryKeyOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableConstraint result = new AstTableConstraint(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CONSTRAINT constraint_id FOREIGN KEY ( fk=column_name_list ) foreign_key_options 
        /// </summary>
        public static AstTableConstraint TableConstraint(AstConstraintId constraintId, AstColumnNameList fk, AstForeignKeyOptions foreignKeyOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableConstraint result = new AstTableConstraint(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CONSTRAINT constraint_id CONNECTION ( connection_nodes ) 
        /// </summary>
        public static AstTableConstraint TableConstraint(AstConstraintId constraintId, AstConnectionNodes connectionNodes)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableConstraint result = new AstTableConstraint(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CONSTRAINT constraint_id DEFAULT LR_BRACKET? stringtext RR_BRACKET? FOR id_ 
        /// </summary>
        public static AstTableConstraint TableConstraint(AstConstraintId constraintId, AstStringtext stringtext, AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableConstraint result = new AstTableConstraint(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CONSTRAINT constraint_id DEFAULT LR_BRACKET? PLUS RR_BRACKET? FOR id_ 
        /// </summary>
        public static AstTableConstraint TableConstraint(AstConstraintId constraintId, AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableConstraint result = new AstTableConstraint(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CONSTRAINT constraint_id DEFAULT LR_BRACKET? function_call RR_BRACKET? FOR id_ 
        /// </summary>
        public static AstTableConstraint TableConstraint(AstConstraintId constraintId, AstFunctionCall functionCall, AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableConstraint result = new AstTableConstraint(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CONSTRAINT constraint_id DEFAULT LR_BRACKET? decimal RR_BRACKET? FOR id_ 
        /// </summary>
        public static AstTableConstraint TableConstraint(AstConstraintId constraintId, AstDecimal @decimal, AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableConstraint result = new AstTableConstraint(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CONSTRAINT constraint_id DEFAULT LR_BRACKET? NEXT VALUE FOR full_table_ref RR_BRACKET? FOR id_ 
        /// </summary>
        public static AstTableConstraint TableConstraint(AstConstraintId constraintId, AstFullTableRef fullTableRef, AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableConstraint result = new AstTableConstraint(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CONSTRAINT constraint_id check_constraint 
        /// </summary>
        public static AstTableConstraint TableConstraint(AstConstraintId constraintId, AstCheckConstraint checkConstraint)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableConstraint result = new AstTableConstraint(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// connection_node
    /// 	 : from_node_table = id_  TO  to_node_table = id_
    /// </summary>
    public partial class AstConnectionNode : AstRule
    {
        
        protected static string _rule = "connection_node\r\n\t : from_node_table = id_  TO  to_node_table = id_";
        
        internal AstConnectionNode(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstConnectionNode(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstConnectionNode(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstConnectionNode(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConnectionNode(this);
        }
        
        /// <summary>
        ///  : 
        ///    from_node_table=id_ TO to_node_table=id_ 
        /// </summary>
        public static AstConnectionNode ConnectionNode(AstId fromNodeTable, AstId toNodeTable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConnectionNode result = new AstConnectionNode(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_table_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  decimal
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | DATA_COMPRESSION  EQUAL  index_strategy  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// 	 | distribution
    /// 	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | MAX_DURATION  EQUAL  times = decimal  MINUTES?
    /// </summary>
    public partial class AstAlterTableIndexOption : AstRule
    {
        
        protected static string _rule = @"alter_table_index_option
	 : PAD_INDEX  EQUAL  on_off
	 | FILLFACTOR  EQUAL  decimal
	 | IGNORE_DUP_KEY  EQUAL  on_off
	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
	 | ALLOW_ROW_LOCKS  EQUAL  on_off
	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
	 | SORT_IN_TEMPDB  EQUAL  on_off
	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
	 | DATA_COMPRESSION  EQUAL  index_strategy  on_partitions?
	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
	 | distribution
	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
	 | RESUMABLE  EQUAL  on_off
	 | MAX_DURATION  EQUAL  times = decimal  MINUTES?";
        
        internal AstAlterTableIndexOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterTableIndexOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterTableIndexOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterTableIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterTableIndexOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    PAD_INDEX EQUAL on_off 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterTableIndexOption result = new AstAlterTableIndexOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    FILLFACTOR EQUAL decimal 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterTableIndexOption result = new AstAlterTableIndexOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DATA_COMPRESSION EQUAL index_strategy on_partitions? 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(AstIndexStrategy indexStrategy, AstOnPartitions onPartitions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterTableIndexOption result = new AstAlterTableIndexOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(AstOnOff onOff, AstOnPartitions onPartitions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterTableIndexOption result = new AstAlterTableIndexOption(arguments);
            return result;
        }
        
        /// <summary>
        /// distribution : 
        ///    distribution 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(AstDistribution distribution)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterTableIndexOption result = new AstAlterTableIndexOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ONLINE EQUAL ON ( low_priority_lock_wait ) 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(AstLowPriorityLockWait lowPriorityLockWait)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterTableIndexOption result = new AstAlterTableIndexOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// declare_set_cursor_common_partial
    /// 	 : local_global
    /// 	 | declare_set_cursor_common_partial_enum
    /// </summary>
    public partial class AstDeclareSetCursorCommonPartial : AstRule
    {
        
        protected static string _rule = "declare_set_cursor_common_partial\r\n\t : local_global\r\n\t | declare_set_cursor_commo" +
            "n_partial_enum";
        
        internal AstDeclareSetCursorCommonPartial(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDeclareSetCursorCommonPartial(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDeclareSetCursorCommonPartial(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDeclareSetCursorCommonPartial(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareSetCursorCommonPartial(this);
        }
        
        /// <summary>
        /// local_global : 
        ///    local_global 
        /// </summary>
        public static AstDeclareSetCursorCommonPartial DeclareSetCursorCommonPartial(AstLocalGlobal localGlobal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDeclareSetCursorCommonPartial result = new AstDeclareSetCursorCommonPartial(arguments);
            return result;
        }
        
        /// <summary>
        /// declare_set_cursor_common_partial_enum : 
        ///    declare_set_cursor_common_partial_enum 
        /// </summary>
        public static AstDeclareSetCursorCommonPartial DeclareSetCursorCommonPartial(AstDeclareSetCursorCommonPartialEnum declareSetCursorCommonPartialEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDeclareSetCursorCommonPartial result = new AstDeclareSetCursorCommonPartial(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// set_special
    /// 	 : SET  left = id_  set_special_set_value  SEMI?
    /// 	 | SET  STATISTICS  statistic_kind  statistics = on_off  SEMI?
    /// 	 | SET  ROWCOUNT  (local_id | decimal)  SEMI?
    /// 	 | SET  TEXTSIZE  decimal  SEMI?
    /// 	 | SET  TRANSACTION  ISOLATION  LEVEL  (transaction_isolation | decimal)  SEMI?
    /// 	 | SET  IDENTITY_INSERT  full_table_ref  identity_insert = on_off  SEMI?
    /// 	 | SET  special_lists  list = on_off
    /// 	 | SET  modify_method
    /// </summary>
    public partial class AstSetSpecial : AstRule
    {
        
        protected static string _rule = @"set_special
	 : SET  left = id_  set_special_set_value  SEMI?
	 | SET  STATISTICS  statistic_kind  statistics = on_off  SEMI?
	 | SET  ROWCOUNT  (local_id | decimal)  SEMI?
	 | SET  TEXTSIZE  decimal  SEMI?
	 | SET  TRANSACTION  ISOLATION  LEVEL  (transaction_isolation | decimal)  SEMI?
	 | SET  IDENTITY_INSERT  full_table_ref  identity_insert = on_off  SEMI?
	 | SET  special_lists  list = on_off
	 | SET  modify_method";
        
        internal AstSetSpecial(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSetSpecial(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSetSpecial(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSetSpecial(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetSpecial(this);
        }
        
        /// <summary>
        ///  : 
        ///    SET left=id_ set_special_set_value SEMI? 
        /// </summary>
        public static AstSetSpecial SetSpecial(AstId left, AstSetSpecialSetValue setSpecialSetValue)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecial result = new AstSetSpecial(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    SET STATISTICS statistic_kind statistics=on_off SEMI? 
        /// </summary>
        public static AstSetSpecial SetSpecial(AstStatisticKind statisticKind, AstOnOff statistics)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecial result = new AstSetSpecial(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    SET ROWCOUNT local_id SEMI? 
        /// </summary>
        public static AstSetSpecial SetSpecial(AstLocalId localId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecial result = new AstSetSpecial(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    SET ROWCOUNT decimal SEMI? 
        /// </summary>
        public static AstSetSpecial SetSpecial(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecial result = new AstSetSpecial(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    SET TRANSACTION ISOLATION LEVEL transaction_isolation SEMI? 
        /// </summary>
        public static AstSetSpecial SetSpecial(AstTransactionIsolation transactionIsolation)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecial result = new AstSetSpecial(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    SET IDENTITY_INSERT full_table_ref identity_insert=on_off SEMI? 
        /// </summary>
        public static AstSetSpecial SetSpecial(AstFullTableRef fullTableRef, AstOnOff identityInsert)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecial result = new AstSetSpecial(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    SET special_lists list=on_off 
        /// </summary>
        public static AstSetSpecial SetSpecial(AstSpecialLists specialLists, AstOnOff list)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecial result = new AstSetSpecial(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    SET modify_method 
        /// </summary>
        public static AstSetSpecial SetSpecial(AstModifyMethod modifyMethod)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecial result = new AstSetSpecial(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// set_special_set_value
    /// 	 : (id_ | constant_local_id | on_off)
    /// </summary>
    public partial class AstSetSpecialSetValue : AstRule
    {
        
        protected static string _rule = "set_special_set_value\r\n\t : (id_ | constant_local_id | on_off)";
        
        internal AstSetSpecialSetValue(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSetSpecialSetValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSetSpecialSetValue(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSetSpecialSetValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetSpecialSetValue(this);
        }
        
        /// <summary>
        /// id_ : 
        ///    id_ 
        /// </summary>
        public static AstSetSpecialSetValue SetSpecialSetValue(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecialSetValue result = new AstSetSpecialSetValue(arguments);
            return result;
        }
        
        /// <summary>
        /// constant_local_id : 
        ///    constant_local_id 
        /// </summary>
        public static AstSetSpecialSetValue SetSpecialSetValue(AstConstantLocalId constantLocalId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecialSetValue result = new AstSetSpecialSetValue(arguments);
            return result;
        }
        
        /// <summary>
        /// on_off : 
        ///    on_off 
        /// </summary>
        public static AstSetSpecialSetValue SetSpecialSetValue(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecialSetValue result = new AstSetSpecialSetValue(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// constant_local_id
    /// 	 : constant
    /// 	 | local_id
    /// </summary>
    public partial class AstConstantLocalId : AstRule
    {
        
        protected static string _rule = "constant_local_id\r\n\t : constant\r\n\t | local_id";
        
        internal AstConstantLocalId(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstConstantLocalId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstConstantLocalId(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstConstantLocalId(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConstantLocalId(this);
        }
        
        /// <summary>
        /// constant : 
        ///    constant 
        /// </summary>
        public static AstConstantLocalId ConstantLocalId(AstConstant constant)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstantLocalId result = new AstConstantLocalId(arguments);
            return result;
        }
        
        /// <summary>
        /// local_id : 
        ///    local_id 
        /// </summary>
        public static AstConstantLocalId ConstantLocalId(AstLocalId localId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstantLocalId result = new AstConstantLocalId(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// expression
    /// 	 : primitive_expression
    /// 	 | function_call
    /// 	 | expression  DOT  (value_call | query_call | exist_call | modify_call)
    /// 	 | expression  DOT  hierarchyid_call
    /// 	 | expression  COLLATE  id_
    /// 	 | case_expression
    /// 	 | full_column_name
    /// 	 | bracket_expression
    /// 	 | unary_operator_expression
    /// 	 | left = expression  op = expression_operator  right = expression
    /// 	 | expression  time_zone
    /// 	 | over_clause
    /// 	 | DOLLAR_ACTION
    /// </summary>
    public partial class AstExpression : AstRule
    {
        
        protected static string _rule = @"expression
	 : primitive_expression
	 | function_call
	 | expression  DOT  (value_call | query_call | exist_call | modify_call)
	 | expression  DOT  hierarchyid_call
	 | expression  COLLATE  id_
	 | case_expression
	 | full_column_name
	 | bracket_expression
	 | unary_operator_expression
	 | left = expression  op = expression_operator  right = expression
	 | expression  time_zone
	 | over_clause
	 | DOLLAR_ACTION";
        
        internal AstExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExpression(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpression(this);
        }
        
        /// <summary>
        /// primitive_expression : 
        ///    primitive_expression 
        /// </summary>
        public static AstExpression Expression(AstPrimitiveExpression primitiveExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression result = new AstExpression(arguments);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    function_call 
        /// </summary>
        public static AstExpression Expression(AstFunctionCall functionCall)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression result = new AstExpression(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    expression . value_call 
        /// </summary>
        public static AstExpression Expression(AstExpression expression, AstValueCall valueCall)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression result = new AstExpression(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    expression . query_call 
        /// </summary>
        public static AstExpression Expression(AstExpression expression, AstQueryCall queryCall)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression result = new AstExpression(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    expression . exist_call 
        /// </summary>
        public static AstExpression Expression(AstExpression expression, AstExistCall existCall)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression result = new AstExpression(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    expression . modify_call 
        /// </summary>
        public static AstExpression Expression(AstExpression expression, AstModifyCall modifyCall)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression result = new AstExpression(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    expression . hierarchyid_call 
        /// </summary>
        public static AstExpression Expression(AstExpression expression, AstHierarchyidCall hierarchyidCall)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression result = new AstExpression(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    expression COLLATE id_ 
        /// </summary>
        public static AstExpression Expression(AstExpression expression, AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression result = new AstExpression(arguments);
            return result;
        }
        
        /// <summary>
        /// case_expression : 
        ///    case_expression 
        /// </summary>
        public static AstExpression Expression(AstCaseExpression caseExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression result = new AstExpression(arguments);
            return result;
        }
        
        /// <summary>
        /// full_column_name : 
        ///    full_column_name 
        /// </summary>
        public static AstExpression Expression(AstFullColumnName fullColumnName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression result = new AstExpression(arguments);
            return result;
        }
        
        /// <summary>
        /// bracket_expression : 
        ///    bracket_expression 
        /// </summary>
        public static AstExpression Expression(AstBracketExpression bracketExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression result = new AstExpression(arguments);
            return result;
        }
        
        /// <summary>
        /// unary_operator_expression : 
        ///    unary_operator_expression 
        /// </summary>
        public static AstExpression Expression(AstUnaryOperatorExpression unaryOperatorExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression result = new AstExpression(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    left=expression op=expression_operator right=expression 
        /// </summary>
        public static AstExpression Expression(AstExpression left, AstExpressionOperator op, AstExpression right)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression result = new AstExpression(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    expression time_zone 
        /// </summary>
        public static AstExpression Expression(AstExpression expression, AstTimeZone timeZone)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression result = new AstExpression(arguments);
            return result;
        }
        
        /// <summary>
        /// over_clause : 
        ///    over_clause 
        /// </summary>
        public static AstExpression Expression(AstOverClause overClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression result = new AstExpression(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// primitive_expression
    /// 	 : DEFAULT
    /// 	 | NULL_
    /// 	 | local_id
    /// 	 | constant
    /// </summary>
    public partial class AstPrimitiveExpression : AstRule
    {
        
        protected static string _rule = "primitive_expression\r\n\t : DEFAULT\r\n\t | NULL_\r\n\t | local_id\r\n\t | constant";
        
        internal AstPrimitiveExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstPrimitiveExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstPrimitiveExpression(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstPrimitiveExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrimitiveExpression(this);
        }
        
        /// <summary>
        /// local_id : 
        ///    local_id 
        /// </summary>
        public static AstPrimitiveExpression PrimitiveExpression(AstLocalId localId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPrimitiveExpression result = new AstPrimitiveExpression(arguments);
            return result;
        }
        
        /// <summary>
        /// constant : 
        ///    constant 
        /// </summary>
        public static AstPrimitiveExpression PrimitiveExpression(AstConstant constant)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPrimitiveExpression result = new AstPrimitiveExpression(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// case_expression
    /// 	 : CASE  caseExpr = expression  switch_section+  (ELSE  elseExpr = expression)?  END
    /// 	 | CASE  switch_search_condition_section+  (ELSE  elseExpr = expression)?  END
    /// </summary>
    public partial class AstCaseExpression : AstRule
    {
        
        protected static string _rule = "case_expression\r\n\t : CASE  caseExpr = expression  switch_section+  (ELSE  elseExp" +
            "r = expression)?  END\r\n\t | CASE  switch_search_condition_section+  (ELSE  elseEx" +
            "pr = expression)?  END";
        
        internal AstCaseExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCaseExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCaseExpression(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCaseExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCaseExpression(this);
        }
        
        /// <summary>
        ///  : 
        ///    CASE caseExpr=expression switch_section+ ELSE elseExpr=expression END 
        /// </summary>
        public static AstCaseExpression CaseExpression(AstExpression caseExpr, IEnumerable<AstSwitchSection> switchSection, AstExpression elseExpr)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCaseExpression result = new AstCaseExpression(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CASE switch_search_condition_section+ ELSE elseExpr=expression END 
        /// </summary>
        public static AstCaseExpression CaseExpression(IEnumerable<AstSwitchSearchConditionSection> switchSearchConditionSection, AstExpression elseExpr)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCaseExpression result = new AstCaseExpression(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// unary_operator_expression
    /// 	 : BIT_NOT  expression
    /// 	 | plus_minus  expression
    /// </summary>
    public partial class AstUnaryOperatorExpression : AstRule
    {
        
        protected static string _rule = "unary_operator_expression\r\n\t : BIT_NOT  expression\r\n\t | plus_minus  expression";
        
        internal AstUnaryOperatorExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstUnaryOperatorExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstUnaryOperatorExpression(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstUnaryOperatorExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnaryOperatorExpression(this);
        }
        
        /// <summary>
        ///  : 
        ///    BIT_NOT expression 
        /// </summary>
        public static AstUnaryOperatorExpression UnaryOperatorExpression(AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUnaryOperatorExpression result = new AstUnaryOperatorExpression(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    plus_minus expression 
        /// </summary>
        public static AstUnaryOperatorExpression UnaryOperatorExpression(AstPlusMinus plusMinus, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUnaryOperatorExpression result = new AstUnaryOperatorExpression(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// bracket_expression
    /// 	 : LR_BRACKET  expression  RR_BRACKET
    /// 	 | LR_BRACKET  subquery  RR_BRACKET
    /// </summary>
    public partial class AstBracketExpression : AstRule
    {
        
        protected static string _rule = "bracket_expression\r\n\t : LR_BRACKET  expression  RR_BRACKET\r\n\t | LR_BRACKET  subqu" +
            "ery  RR_BRACKET";
        
        internal AstBracketExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstBracketExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBracketExpression(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBracketExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBracketExpression(this);
        }
        
        /// <summary>
        ///  : 
        ///    ( expression ) 
        /// </summary>
        public static AstBracketExpression BracketExpression(AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBracketExpression result = new AstBracketExpression(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ( subquery ) 
        /// </summary>
        public static AstBracketExpression BracketExpression(AstSubquery subquery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBracketExpression result = new AstBracketExpression(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// constant_expression
    /// 	 : NULL_
    /// 	 | constant
    /// 	 | function_call
    /// 	 | local_id
    /// 	 | LR_BRACKET  constant_expression  RR_BRACKET
    /// </summary>
    public partial class AstConstantExpression : AstRule
    {
        
        protected static string _rule = "constant_expression\r\n\t : NULL_\r\n\t | constant\r\n\t | function_call\r\n\t | local_id\r\n\t " +
            "| LR_BRACKET  constant_expression  RR_BRACKET";
        
        internal AstConstantExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstConstantExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstConstantExpression(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstConstantExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConstantExpression(this);
        }
        
        /// <summary>
        /// constant : 
        ///    constant 
        /// </summary>
        public static AstConstantExpression ConstantExpression(AstConstant constant)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstantExpression result = new AstConstantExpression(arguments);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    function_call 
        /// </summary>
        public static AstConstantExpression ConstantExpression(AstFunctionCall functionCall)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstantExpression result = new AstConstantExpression(arguments);
            return result;
        }
        
        /// <summary>
        /// local_id : 
        ///    local_id 
        /// </summary>
        public static AstConstantExpression ConstantExpression(AstLocalId localId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstantExpression result = new AstConstantExpression(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ( constant_expression ) 
        /// </summary>
        public static AstConstantExpression ConstantExpression(AstConstantExpression constantExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstantExpression result = new AstConstantExpression(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// common_table_expression
    /// 	 : expression_name = id_  (LR_BRACKET  columns = column_name_list  RR_BRACKET)?  AS  LR_BRACKET  cte_query = select_statement  RR_BRACKET
    /// </summary>
    public partial class AstCommonTableExpression : AstRule
    {
        
        protected static string _rule = "common_table_expression\r\n\t : expression_name = id_  (LR_BRACKET  columns = column" +
            "_name_list  RR_BRACKET)?  AS  LR_BRACKET  cte_query = select_statement  RR_BRACK" +
            "ET";
        
        internal AstCommonTableExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCommonTableExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCommonTableExpression(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCommonTableExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCommonTableExpression(this);
        }
        
        /// <summary>
        ///  : 
        ///    expression_name=id_ ( columns=column_name_list ) AS ( cte_query=select_statement ) 
        /// </summary>
        public static AstCommonTableExpression CommonTableExpression(AstId expressionName, AstColumnNameList columns, AstSelectStatement cteQuery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCommonTableExpression result = new AstCommonTableExpression(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// update_elem
    /// 	 : local_id  EQUAL  full_column_name  (EQUAL | assignment_operator)  expression
    /// 	 | (full_column_name | local_id)  (EQUAL | assignment_operator)  expression
    /// 	 | udt_column_id  DOT  method_id  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    public partial class AstUpdateElem : AstRule
    {
        
        protected static string _rule = "update_elem\r\n\t : local_id  EQUAL  full_column_name  (EQUAL | assignment_operator)" +
            "  expression\r\n\t | (full_column_name | local_id)  (EQUAL | assignment_operator)  " +
            "expression\r\n\t | udt_column_id  DOT  method_id  LR_BRACKET  expression_list  RR_B" +
            "RACKET";
        
        internal AstUpdateElem(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstUpdateElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstUpdateElem(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstUpdateElem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateElem(this);
        }
        
        /// <summary>
        ///  : 
        ///    local_id EQUAL full_column_name EQUAL expression 
        /// </summary>
        public static AstUpdateElem UpdateElem(AstLocalId localId, AstFullColumnName fullColumnName, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElem result = new AstUpdateElem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    local_id EQUAL full_column_name assignment_operator expression 
        /// </summary>
        public static AstUpdateElem UpdateElem(AstLocalId localId, AstFullColumnName fullColumnName, AstAssignmentOperator assignmentOperator, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElem result = new AstUpdateElem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    full_column_name EQUAL expression 
        /// </summary>
        public static AstUpdateElem UpdateElem(AstFullColumnName fullColumnName, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElem result = new AstUpdateElem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    local_id EQUAL expression 
        /// </summary>
        public static AstUpdateElem UpdateElem(AstLocalId localId, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElem result = new AstUpdateElem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    full_column_name assignment_operator expression 
        /// </summary>
        public static AstUpdateElem UpdateElem(AstFullColumnName fullColumnName, AstAssignmentOperator assignmentOperator, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElem result = new AstUpdateElem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    local_id assignment_operator expression 
        /// </summary>
        public static AstUpdateElem UpdateElem(AstLocalId localId, AstAssignmentOperator assignmentOperator, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElem result = new AstUpdateElem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    udt_column_id . method_id ( expression_list ) 
        /// </summary>
        public static AstUpdateElem UpdateElem(AstUdtColumnId udtColumnId, AstMethodId methodId, AstExpressionList expressionList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElem result = new AstUpdateElem(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// update_elem_merge
    /// 	 : (full_column_name | local_id)  (EQUAL | assignment_operator)  expression
    /// 	 | udt_column_id  DOT  method_id  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    public partial class AstUpdateElemMerge : AstRule
    {
        
        protected static string _rule = "update_elem_merge\r\n\t : (full_column_name | local_id)  (EQUAL | assignment_operato" +
            "r)  expression\r\n\t | udt_column_id  DOT  method_id  LR_BRACKET  expression_list  " +
            "RR_BRACKET";
        
        internal AstUpdateElemMerge(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstUpdateElemMerge(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstUpdateElemMerge(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstUpdateElemMerge(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateElemMerge(this);
        }
        
        /// <summary>
        ///  : 
        ///    full_column_name EQUAL expression 
        /// </summary>
        public static AstUpdateElemMerge UpdateElemMerge(AstFullColumnName fullColumnName, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElemMerge result = new AstUpdateElemMerge(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    local_id EQUAL expression 
        /// </summary>
        public static AstUpdateElemMerge UpdateElemMerge(AstLocalId localId, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElemMerge result = new AstUpdateElemMerge(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    full_column_name assignment_operator expression 
        /// </summary>
        public static AstUpdateElemMerge UpdateElemMerge(AstFullColumnName fullColumnName, AstAssignmentOperator assignmentOperator, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElemMerge result = new AstUpdateElemMerge(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    local_id assignment_operator expression 
        /// </summary>
        public static AstUpdateElemMerge UpdateElemMerge(AstLocalId localId, AstAssignmentOperator assignmentOperator, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElemMerge result = new AstUpdateElemMerge(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    udt_column_id . method_id ( expression_list ) 
        /// </summary>
        public static AstUpdateElemMerge UpdateElemMerge(AstUdtColumnId udtColumnId, AstMethodId methodId, AstExpressionList expressionList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElemMerge result = new AstUpdateElemMerge(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// search_condition
    /// 	 : NOT*  (predicate | LR_BRACKET  search_condition  RR_BRACKET)
    /// 	 | left = search_condition  AND  right = search_condition
    /// 	 | left = search_condition  OR  right = search_condition
    /// </summary>
    public partial class AstSearchCondition : AstRule
    {
        
        protected static string _rule = "search_condition\r\n\t : NOT*  (predicate | LR_BRACKET  search_condition  RR_BRACKET" +
            ")\r\n\t | left = search_condition  AND  right = search_condition\r\n\t | left = search" +
            "_condition  OR  right = search_condition";
        
        internal AstSearchCondition(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSearchCondition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSearchCondition(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSearchCondition(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSearchCondition(this);
        }
        
        /// <summary>
        ///  : 
        ///    NOT* predicate 
        /// </summary>
        public static AstSearchCondition SearchCondition(AstPredicate predicate)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSearchCondition result = new AstSearchCondition(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    NOT* ( search_condition ) 
        /// </summary>
        public static AstSearchCondition SearchCondition(AstSearchCondition searchCondition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSearchCondition result = new AstSearchCondition(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    left=search_condition AND right=search_condition 
        /// </summary>
        public static AstSearchCondition SearchCondition(AstSearchCondition left, AstSearchCondition right)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSearchCondition result = new AstSearchCondition(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// predicate
    /// 	 : EXISTS  LR_BRACKET  subquery  RR_BRACKET
    /// 	 | freetext_predicate
    /// 	 | predicate_binary
    /// 	 | predicate_multi_assign
    /// 	 | expression  comparison_operator  all_some_any  LR_BRACKET  subquery  RR_BRACKET
    /// 	 | predicate_tier
    /// 	 | predicate_not_in
    /// 	 | predicate_not_like
    /// 	 | expression  IS  null_notnull
    /// </summary>
    public partial class AstPredicate : AstRule
    {
        
        protected static string _rule = @"predicate
	 : EXISTS  LR_BRACKET  subquery  RR_BRACKET
	 | freetext_predicate
	 | predicate_binary
	 | predicate_multi_assign
	 | expression  comparison_operator  all_some_any  LR_BRACKET  subquery  RR_BRACKET
	 | predicate_tier
	 | predicate_not_in
	 | predicate_not_like
	 | expression  IS  null_notnull";
        
        internal AstPredicate(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstPredicate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstPredicate(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstPredicate(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicate(this);
        }
        
        /// <summary>
        ///  : 
        ///    EXISTS ( subquery ) 
        /// </summary>
        public static AstPredicate Predicate(AstSubquery subquery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPredicate result = new AstPredicate(arguments);
            return result;
        }
        
        /// <summary>
        /// freetext_predicate : 
        ///    freetext_predicate 
        /// </summary>
        public static AstPredicate Predicate(AstFreetextPredicate freetextPredicate)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPredicate result = new AstPredicate(arguments);
            return result;
        }
        
        /// <summary>
        /// predicate_binary : 
        ///    predicate_binary 
        /// </summary>
        public static AstPredicate Predicate(AstPredicateBinary predicateBinary)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPredicate result = new AstPredicate(arguments);
            return result;
        }
        
        /// <summary>
        /// predicate_multi_assign : 
        ///    predicate_multi_assign 
        /// </summary>
        public static AstPredicate Predicate(AstPredicateMultiAssign predicateMultiAssign)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPredicate result = new AstPredicate(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    expression comparison_operator all_some_any ( subquery ) 
        /// </summary>
        public static AstPredicate Predicate(AstExpression expression, AstComparisonOperator comparisonOperator, AstAllSomeAny allSomeAny, AstSubquery subquery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPredicate result = new AstPredicate(arguments);
            return result;
        }
        
        /// <summary>
        /// predicate_tier : 
        ///    predicate_tier 
        /// </summary>
        public static AstPredicate Predicate(AstPredicateTier predicateTier)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPredicate result = new AstPredicate(arguments);
            return result;
        }
        
        /// <summary>
        /// predicate_not_in : 
        ///    predicate_not_in 
        /// </summary>
        public static AstPredicate Predicate(AstPredicateNotIn predicateNotIn)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPredicate result = new AstPredicate(arguments);
            return result;
        }
        
        /// <summary>
        /// predicate_not_like : 
        ///    predicate_not_like 
        /// </summary>
        public static AstPredicate Predicate(AstPredicateNotLike predicateNotLike)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPredicate result = new AstPredicate(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    expression IS null_notnull 
        /// </summary>
        public static AstPredicate Predicate(AstExpression expression, AstNullNotnull nullNotnull)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPredicate result = new AstPredicate(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// query_expression
    /// 	 : (query_specification | LR_BRACKET  left = query_expression  RR_BRACKET  (UNION  ALL?  right = query_expression)?)
    /// 	 | query_specification  select_order_by_clause?  unions += sql_union
    /// </summary>
    public partial class AstQueryExpression : AstRule
    {
        
        protected static string _rule = "query_expression\r\n\t : (query_specification | LR_BRACKET  left = query_expression " +
            " RR_BRACKET  (UNION  ALL?  right = query_expression)?)\r\n\t | query_specification " +
            " select_order_by_clause?  unions += sql_union";
        
        internal AstQueryExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstQueryExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstQueryExpression(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstQueryExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueryExpression(this);
        }
        
        /// <summary>
        /// query_specification : 
        ///    query_specification 
        /// </summary>
        public static AstQueryExpression QueryExpression(AstQuerySpecification querySpecification)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueryExpression result = new AstQueryExpression(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ( left=query_expression ) UNION ALL? right=query_expression 
        /// </summary>
        public static AstQueryExpression QueryExpression(AstQueryExpression left, AstQueryExpression right)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueryExpression result = new AstQueryExpression(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    query_specification select_order_by_clause? unions=sql_union 
        /// </summary>
        public static AstQueryExpression QueryExpression(AstQuerySpecification querySpecification, AstSelectOrderByClause selectOrderByClause, AstSqlUnion unions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueryExpression result = new AstQueryExpression(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// top_clause
    /// 	 : TOP  (top_percent | top_count)  (WITH  TIES)?
    /// </summary>
    public partial class AstTopClause : AstRule
    {
        
        protected static string _rule = "top_clause\r\n\t : TOP  (top_percent | top_count)  (WITH  TIES)?";
        
        internal AstTopClause(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTopClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTopClause(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTopClause(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTopClause(this);
        }
        
        /// <summary>
        ///  : 
        ///    TOP top_percent WITH TIES 
        /// </summary>
        public static AstTopClause TopClause(AstTopPercent topPercent)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTopClause result = new AstTopClause(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    TOP top_count WITH TIES 
        /// </summary>
        public static AstTopClause TopClause(AstTopCount topCount)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTopClause result = new AstTopClause(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// top_percent
    /// 	 : percent_constant  PERCENT
    /// 	 | LR_BRACKET  topper_expression = expression  RR_BRACKET  PERCENT
    /// </summary>
    public partial class AstTopPercent : AstRule
    {
        
        protected static string _rule = "top_percent\r\n\t : percent_constant  PERCENT\r\n\t | LR_BRACKET  topper_expression = e" +
            "xpression  RR_BRACKET  PERCENT";
        
        internal AstTopPercent(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTopPercent(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTopPercent(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTopPercent(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTopPercent(this);
        }
        
        /// <summary>
        ///  : 
        ///    percent_constant PERCENT 
        /// </summary>
        public static AstTopPercent TopPercent(AstPercentConstant percentConstant)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTopPercent result = new AstTopPercent(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ( topper_expression=expression ) PERCENT 
        /// </summary>
        public static AstTopPercent TopPercent(AstExpression topperExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTopPercent result = new AstTopPercent(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// percent_constant
    /// 	 : real
    /// 	 | float
    /// 	 | decimal
    /// </summary>
    public partial class AstPercentConstant : AstRule
    {
        
        protected static string _rule = "percent_constant\r\n\t : real\r\n\t | float\r\n\t | decimal";
        
        internal AstPercentConstant(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstPercentConstant(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstPercentConstant(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstPercentConstant(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPercentConstant(this);
        }
        
        /// <summary>
        /// real : 
        ///    real 
        /// </summary>
        public static AstPercentConstant PercentConstant(AstReal real)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPercentConstant result = new AstPercentConstant(arguments);
            return result;
        }
        
        /// <summary>
        /// float : 
        ///    float 
        /// </summary>
        public static AstPercentConstant PercentConstant(AstFloat @float)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPercentConstant result = new AstPercentConstant(arguments);
            return result;
        }
        
        /// <summary>
        /// decimal : 
        ///    decimal 
        /// </summary>
        public static AstPercentConstant PercentConstant(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPercentConstant result = new AstPercentConstant(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// top_count
    /// 	 : count_constant = decimal
    /// 	 | LR_BRACKET  topcount_expression = expression  RR_BRACKET
    /// </summary>
    public partial class AstTopCount : AstRule
    {
        
        protected static string _rule = "top_count\r\n\t : count_constant = decimal\r\n\t | LR_BRACKET  topcount_expression = ex" +
            "pression  RR_BRACKET";
        
        internal AstTopCount(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTopCount(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTopCount(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTopCount(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTopCount(this);
        }
        
        /// <summary>
        /// decimal : 
        ///    count_constant=decimal 
        /// </summary>
        public static AstTopCount TopCount(AstDecimal countConstant)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTopCount result = new AstTopCount(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ( topcount_expression=expression ) 
        /// </summary>
        public static AstTopCount TopCount(AstExpression topcountExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTopCount result = new AstTopCount(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// for_clause
    /// 	 : FOR  BROWSE
    /// 	 | for_clause_xml_raw
    /// 	 | FOR  XML  EXPLICIT  xml_common_directives?  (COMMA  XMLDATA)?
    /// 	 | FOR  XML  PATH  (LR_BRACKET  stringtext  RR_BRACKET)?  xml_common_directives?  (COMMA  ELEMENTS  absent_xsinil?)?
    /// 	 | for_clause_json
    /// </summary>
    public partial class AstForClause : AstRule
    {
        
        protected static string _rule = @"for_clause
	 : FOR  BROWSE
	 | for_clause_xml_raw
	 | FOR  XML  EXPLICIT  xml_common_directives?  (COMMA  XMLDATA)?
	 | FOR  XML  PATH  (LR_BRACKET  stringtext  RR_BRACKET)?  xml_common_directives?  (COMMA  ELEMENTS  absent_xsinil?)?
	 | for_clause_json";
        
        internal AstForClause(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstForClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstForClause(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstForClause(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitForClause(this);
        }
        
        /// <summary>
        /// for_clause_xml_raw : 
        ///    for_clause_xml_raw 
        /// </summary>
        public static AstForClause ForClause(AstForClauseXmlRaw forClauseXmlRaw)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstForClause result = new AstForClause(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    FOR XML EXPLICIT xml_common_directives? , XMLDATA 
        /// </summary>
        public static AstForClause ForClause(AstXmlCommonDirectives xmlCommonDirectives)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstForClause result = new AstForClause(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    FOR XML PATH ( stringtext ) xml_common_directives? , ELEMENTS absent_xsinil? 
        /// </summary>
        public static AstForClause ForClause(AstStringtext stringtext, AstXmlCommonDirectives xmlCommonDirectives, AstAbsentXsinil absentXsinil)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstForClause result = new AstForClause(arguments);
            return result;
        }
        
        /// <summary>
        /// for_clause_json : 
        ///    for_clause_json 
        /// </summary>
        public static AstForClause ForClause(AstForClauseJson forClauseJson)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstForClause result = new AstForClause(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// xml_common_directive
    /// 	 : BINARY_KEYWORD  BASE64
    /// 	 | TYPE
    /// 	 | ROOT  (LR_BRACKET  stringtext  RR_BRACKET)?
    /// </summary>
    public partial class AstXmlCommonDirective : AstRule
    {
        
        protected static string _rule = "xml_common_directive\r\n\t : BINARY_KEYWORD  BASE64\r\n\t | TYPE\r\n\t | ROOT  (LR_BRACKET" +
            "  stringtext  RR_BRACKET)?";
        
        internal AstXmlCommonDirective(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstXmlCommonDirective(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstXmlCommonDirective(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstXmlCommonDirective(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlCommonDirective(this);
        }
        
        /// <summary>
        ///  : 
        ///    ROOT ( stringtext ) 
        /// </summary>
        public static AstXmlCommonDirective XmlCommonDirective(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstXmlCommonDirective result = new AstXmlCommonDirective(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// clause_json_info
    /// 	 : ROOT  (LR_BRACKET  stringtext  RR_BRACKET)
    /// 	 | INCLUDE_NULL_VALUES
    /// 	 | WITHOUT_ARRAY_WRAPPER
    /// </summary>
    public partial class AstClauseJsonInfo : AstRule
    {
        
        protected static string _rule = "clause_json_info\r\n\t : ROOT  (LR_BRACKET  stringtext  RR_BRACKET)\r\n\t | INCLUDE_NUL" +
            "L_VALUES\r\n\t | WITHOUT_ARRAY_WRAPPER";
        
        internal AstClauseJsonInfo(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstClauseJsonInfo(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstClauseJsonInfo(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstClauseJsonInfo(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClauseJsonInfo(this);
        }
        
        /// <summary>
        ///  : 
        ///    ROOT ( stringtext ) 
        /// </summary>
        public static AstClauseJsonInfo ClauseJsonInfo(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstClauseJsonInfo result = new AstClauseJsonInfo(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// order_by_expression
    /// 	 : order_by = expression  (ascending = ASC | descending = DESC)?
    /// </summary>
    public partial class AstOrderByExpression : AstRule
    {
        
        protected static string _rule = "order_by_expression\r\n\t : order_by = expression  (ascending = ASC | descending = D" +
            "ESC)?";
        
        internal AstOrderByExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstOrderByExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstOrderByExpression(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstOrderByExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOrderByExpression(this);
        }
        
        /// <summary>
        ///  : 
        ///    order_by=expression ascending=ASC 
        /// </summary>
        public static AstOrderByExpression OrderByExpression(AstExpression orderBy)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstOrderByExpression result = new AstOrderByExpression(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// grouping_sets_item
    /// 	 : grouping_sets_list
    /// 	 | LR_BRACKET  grouping_sets_list?  RR_BRACKET
    /// </summary>
    public partial class AstGroupingSetsItem : AstRule
    {
        
        protected static string _rule = "grouping_sets_item\r\n\t : grouping_sets_list\r\n\t | LR_BRACKET  grouping_sets_list?  " +
            "RR_BRACKET";
        
        internal AstGroupingSetsItem(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstGroupingSetsItem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstGroupingSetsItem(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstGroupingSetsItem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupingSetsItem(this);
        }
        
        /// <summary>
        /// grouping_sets_list : 
        ///    grouping_sets_list 
        /// </summary>
        public static AstGroupingSetsItem GroupingSetsItem(AstGroupingSetsList groupingSetsList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstGroupingSetsItem result = new AstGroupingSetsItem(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// update_option
    /// 	 : FAST  number_rows = decimal
    /// 	 | MAXDOP  number_of_processors = decimal
    /// 	 | MAXRECURSION  number_recursion = decimal
    /// 	 | USE  PLAN  stringtext
    /// 	 | OPTIMIZE  FOR  LR_BRACKET  optimize_for_args  RR_BRACKET
    /// 	 | update_option_enum
    /// </summary>
    public partial class AstUpdateOption : AstRule
    {
        
        protected static string _rule = "update_option\r\n\t : FAST  number_rows = decimal\r\n\t | MAXDOP  number_of_processors " +
            "= decimal\r\n\t | MAXRECURSION  number_recursion = decimal\r\n\t | USE  PLAN  stringte" +
            "xt\r\n\t | OPTIMIZE  FOR  LR_BRACKET  optimize_for_args  RR_BRACKET\r\n\t | update_opt" +
            "ion_enum";
        
        internal AstUpdateOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstUpdateOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstUpdateOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstUpdateOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    FAST number_rows=decimal 
        /// </summary>
        public static AstUpdateOption UpdateOption(AstDecimal numberRows)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateOption result = new AstUpdateOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    USE PLAN stringtext 
        /// </summary>
        public static AstUpdateOption UpdateOption(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateOption result = new AstUpdateOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    OPTIMIZE FOR ( optimize_for_args ) 
        /// </summary>
        public static AstUpdateOption UpdateOption(AstOptimizeForArgs optimizeForArgs)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateOption result = new AstUpdateOption(arguments);
            return result;
        }
        
        /// <summary>
        /// update_option_enum : 
        ///    update_option_enum 
        /// </summary>
        public static AstUpdateOption UpdateOption(AstUpdateOptionEnum updateOptionEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateOption result = new AstUpdateOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// column_elem_target
    /// 	 : full_column_name
    /// 	 | DOLLAR  IDENTITY
    /// 	 | DOLLAR  ROWGUID
    /// 	 | NULL_
    /// </summary>
    public partial class AstColumnElemTarget : AstRule
    {
        
        protected static string _rule = "column_elem_target\r\n\t : full_column_name\r\n\t | DOLLAR  IDENTITY\r\n\t | DOLLAR  ROWGU" +
            "ID\r\n\t | NULL_";
        
        internal AstColumnElemTarget(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstColumnElemTarget(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstColumnElemTarget(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstColumnElemTarget(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnElemTarget(this);
        }
        
        /// <summary>
        /// full_column_name : 
        ///    full_column_name 
        /// </summary>
        public static AstColumnElemTarget ColumnElemTarget(AstFullColumnName fullColumnName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnElemTarget result = new AstColumnElemTarget(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// udt_elem
    /// 	 : udt_column_id  DOT  non_static_attr_id  udt_method_arguments  as_column_alias?
    /// 	 | udt_column_id  DOUBLE_COLON  static_attr_id  udt_method_arguments?  as_column_alias?
    /// </summary>
    public partial class AstUdtElem : AstSelectListElem
    {
        
        protected static string _rule = "udt_elem\r\n\t : udt_column_id  DOT  non_static_attr_id  udt_method_arguments  as_co" +
            "lumn_alias?\r\n\t | udt_column_id  DOUBLE_COLON  static_attr_id  udt_method_argumen" +
            "ts?  as_column_alias?";
        
        internal AstUdtElem(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstUdtElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstUdtElem(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstUdtElem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUdtElem(this);
        }
        
        /// <summary>
        ///  : 
        ///    udt_column_id . non_static_attr_id udt_method_arguments as_column_alias? 
        /// </summary>
        public static AstUdtElem UdtElem(AstUdtColumnId udtColumnId, AstNonStaticAttrId nonStaticAttrId, AstUdtMethodArguments udtMethodArguments, AstAsColumnAlias asColumnAlias)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUdtElem result = new AstUdtElem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    udt_column_id :: static_attr_id udt_method_arguments? as_column_alias? 
        /// </summary>
        public static AstUdtElem UdtElem(AstUdtColumnId udtColumnId, AstStaticAttrId staticAttrId, AstUdtMethodArguments udtMethodArguments, AstAsColumnAlias asColumnAlias)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUdtElem result = new AstUdtElem(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// expression_elem
    /// 	 : leftAlias = column_alias  eq = EQUAL  leftAssignment = expression
    /// 	 | expressionAs = expression  as_column_alias?
    /// </summary>
    public partial class AstExpressionElem : AstSelectListElem
    {
        
        protected static string _rule = "expression_elem\r\n\t : leftAlias = column_alias  eq = EQUAL  leftAssignment = expre" +
            "ssion\r\n\t | expressionAs = expression  as_column_alias?";
        
        internal AstExpressionElem(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstExpressionElem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExpressionElem(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExpressionElem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressionElem(this);
        }
        
        /// <summary>
        ///  : 
        ///    leftAlias=column_alias eq=EQUAL leftAssignment=expression 
        /// </summary>
        public static AstExpressionElem ExpressionElem(AstColumnAlias leftAlias, AstExpression leftAssignment)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpressionElem result = new AstExpressionElem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    expressionAs=expression as_column_alias? 
        /// </summary>
        public static AstExpressionElem ExpressionElem(AstExpression expressionAs, AstAsColumnAlias asColumnAlias)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpressionElem result = new AstExpressionElem(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// table_source
    /// 	 : table_source_item_joined
    /// 	 | LR_BRACKET  table_source  RR_BRACKET
    /// </summary>
    public partial class AstTableSource : AstRule
    {
        
        protected static string _rule = "table_source\r\n\t : table_source_item_joined\r\n\t | LR_BRACKET  table_source  RR_BRAC" +
            "KET";
        
        internal AstTableSource(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTableSource(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTableSource(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTableSource(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableSource(this);
        }
        
        /// <summary>
        /// table_source_item_joined : 
        ///    table_source_item_joined 
        /// </summary>
        public static AstTableSource TableSource(AstTableSourceItemJoined tableSourceItemJoined)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSource result = new AstTableSource(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ( table_source ) 
        /// </summary>
        public static AstTableSource TableSource(AstTableSource tableSource)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSource result = new AstTableSource(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// table_source_item_joined
    /// 	 : table_source_item  joins += join_part
    /// 	 | LR_BRACKET  table_source_item_joined  RR_BRACKET  joins += join_part
    /// </summary>
    public partial class AstTableSourceItemJoined : AstRule
    {
        
        protected static string _rule = "table_source_item_joined\r\n\t : table_source_item  joins += join_part\r\n\t | LR_BRACK" +
            "ET  table_source_item_joined  RR_BRACKET  joins += join_part";
        
        internal AstTableSourceItemJoined(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTableSourceItemJoined(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTableSourceItemJoined(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTableSourceItemJoined(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableSourceItemJoined(this);
        }
        
        /// <summary>
        ///  : 
        ///    table_source_item joins=join_part 
        /// </summary>
        public static AstTableSourceItemJoined TableSourceItemJoined(AstTableSourceItem tableSourceItem, AstJoinPart joins)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItemJoined result = new AstTableSourceItemJoined(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ( table_source_item_joined ) joins=join_part 
        /// </summary>
        public static AstTableSourceItemJoined TableSourceItemJoined(AstTableSourceItemJoined tableSourceItemJoined, AstJoinPart joins)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItemJoined result = new AstTableSourceItemJoined(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// table_source_item
    /// 	 : complete_table_ref  deprecated_table_hint  as_table_alias
    /// 	 | complete_table_ref  as_table_alias?  (with_table_hints | deprecated_table_hint | sybase_legacy_hints)?
    /// 	 | rowset_function  as_table_alias?
    /// 	 | LR_BRACKET  derived_table  RR_BRACKET  (as_table_alias  column_alias_list?)?
    /// 	 | change_table  as_table_alias?
    /// 	 | nodes_method  (as_table_alias  column_alias_list?)?
    /// 	 | function_call  (as_table_alias  column_alias_list?)?
    /// 	 | loc_id = local_id  as_table_alias?
    /// 	 | loc_id_call = local_id  DOT  loc_fcall = function_call  (as_table_alias  column_alias_list?)?
    /// 	 | open_xml
    /// 	 | open_json
    /// 	 | DOUBLE_COLON  oldstyle_fcall = function_call  as_table_alias?
    /// </summary>
    public partial class AstTableSourceItem : AstRule
    {
        
        protected static string _rule = @"table_source_item
	 : complete_table_ref  deprecated_table_hint  as_table_alias
	 | complete_table_ref  as_table_alias?  (with_table_hints | deprecated_table_hint | sybase_legacy_hints)?
	 | rowset_function  as_table_alias?
	 | LR_BRACKET  derived_table  RR_BRACKET  (as_table_alias  column_alias_list?)?
	 | change_table  as_table_alias?
	 | nodes_method  (as_table_alias  column_alias_list?)?
	 | function_call  (as_table_alias  column_alias_list?)?
	 | loc_id = local_id  as_table_alias?
	 | loc_id_call = local_id  DOT  loc_fcall = function_call  (as_table_alias  column_alias_list?)?
	 | open_xml
	 | open_json
	 | DOUBLE_COLON  oldstyle_fcall = function_call  as_table_alias?";
        
        internal AstTableSourceItem(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTableSourceItem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTableSourceItem(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTableSourceItem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableSourceItem(this);
        }
        
        /// <summary>
        ///  : 
        ///    complete_table_ref deprecated_table_hint as_table_alias 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstCompleteTableRef completeTableRef, AstDeprecatedTableHint deprecatedTableHint, AstAsTableAlias asTableAlias)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem result = new AstTableSourceItem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    complete_table_ref as_table_alias? with_table_hints 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstCompleteTableRef completeTableRef, AstAsTableAlias asTableAlias, AstWithTableHints withTableHints)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem result = new AstTableSourceItem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    complete_table_ref as_table_alias? deprecated_table_hint 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstCompleteTableRef completeTableRef, AstAsTableAlias asTableAlias, AstDeprecatedTableHint deprecatedTableHint)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem result = new AstTableSourceItem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    complete_table_ref as_table_alias? sybase_legacy_hints 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstCompleteTableRef completeTableRef, AstAsTableAlias asTableAlias, AstSybaseLegacyHints sybaseLegacyHints)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem result = new AstTableSourceItem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    rowset_function as_table_alias? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstRowsetFunction rowsetFunction, AstAsTableAlias asTableAlias)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem result = new AstTableSourceItem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ( derived_table ) as_table_alias column_alias_list? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstDerivedTable derivedTable, AstAsTableAlias asTableAlias, AstColumnAliasList columnAliasList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem result = new AstTableSourceItem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    change_table as_table_alias? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstChangeTable changeTable, AstAsTableAlias asTableAlias)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem result = new AstTableSourceItem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    nodes_method as_table_alias column_alias_list? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstNodesMethod nodesMethod, AstAsTableAlias asTableAlias, AstColumnAliasList columnAliasList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem result = new AstTableSourceItem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    function_call as_table_alias column_alias_list? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstFunctionCall functionCall, AstAsTableAlias asTableAlias, AstColumnAliasList columnAliasList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem result = new AstTableSourceItem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    loc_id=local_id as_table_alias? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstLocalId locId, AstAsTableAlias asTableAlias)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem result = new AstTableSourceItem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    loc_id_call=local_id . loc_fcall=function_call as_table_alias column_alias_list? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstLocalId locIdCall, AstFunctionCall locFcall, AstAsTableAlias asTableAlias, AstColumnAliasList columnAliasList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem result = new AstTableSourceItem(arguments);
            return result;
        }
        
        /// <summary>
        /// open_xml : 
        ///    open_xml 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstOpenXml openXml)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem result = new AstTableSourceItem(arguments);
            return result;
        }
        
        /// <summary>
        /// open_json : 
        ///    open_json 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstOpenJson openJson)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem result = new AstTableSourceItem(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    :: oldstyle_fcall=function_call as_table_alias? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstFunctionCall oldstyleFcall, AstAsTableAlias asTableAlias)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem result = new AstTableSourceItem(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// change_table_changes
    /// 	 : CHANGETABLE  LR_BRACKET  CHANGES  changetable = full_table_ref  COMMA  (NULL_ | decimal_local_id)  RR_BRACKET
    /// </summary>
    public partial class AstChangeTableChanges : AstChangeTable
    {
        
        protected static string _rule = "change_table_changes\r\n\t : CHANGETABLE  LR_BRACKET  CHANGES  changetable = full_ta" +
            "ble_ref  COMMA  (NULL_ | decimal_local_id)  RR_BRACKET";
        
        internal AstChangeTableChanges(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstChangeTableChanges(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstChangeTableChanges(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstChangeTableChanges(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTableChanges(this);
        }
        
        /// <summary>
        ///  : 
        ///    CHANGETABLE ( CHANGES changetable=full_table_ref , NULL_ ) 
        /// </summary>
        public static AstChangeTableChanges ChangeTableChanges(AstFullTableRef changetable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstChangeTableChanges result = new AstChangeTableChanges(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CHANGETABLE ( CHANGES changetable=full_table_ref , decimal_local_id ) 
        /// </summary>
        public static AstChangeTableChanges ChangeTableChanges(AstFullTableRef changetable, AstDecimalLocalId decimalLocalId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstChangeTableChanges result = new AstChangeTableChanges(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// change_table_version
    /// 	 : CHANGETABLE  LR_BRACKET  VERSION  versiontable = full_table_ref  COMMA  pk_columns = full_column_name_list  COMMA  pk_values = select_list  RR_BRACKET
    /// </summary>
    public partial class AstChangeTableVersion : AstChangeTable
    {
        
        protected static string _rule = "change_table_version\r\n\t : CHANGETABLE  LR_BRACKET  VERSION  versiontable = full_t" +
            "able_ref  COMMA  pk_columns = full_column_name_list  COMMA  pk_values = select_l" +
            "ist  RR_BRACKET";
        
        internal AstChangeTableVersion(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstChangeTableVersion(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstChangeTableVersion(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstChangeTableVersion(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTableVersion(this);
        }
        
        /// <summary>
        ///  : 
        ///    CHANGETABLE ( VERSION versiontable=full_table_ref , pk_columns=full_column_name_list , pk_values=select_list ) 
        /// </summary>
        public static AstChangeTableVersion ChangeTableVersion(AstFullTableRef versiontable, AstFullColumnNameList pkColumns, AstSelectList pkValues)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstChangeTableVersion result = new AstChangeTableVersion(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// rowset_function
    /// 	 : (OPENROWSET  LR_BRACKET  providerName = stringtext  COMMA  connectionString = stringtext  COMMA  sql = stringtext  RR_BRACKET)
    /// 	 | (OPENROWSET  LR_BRACKET  BULK  data_file = stringtext  COMMA  (bulk_options | id_)  RR_BRACKET)
    /// </summary>
    public partial class AstRowsetFunction : AstRule
    {
        
        protected static string _rule = "rowset_function\r\n\t : (OPENROWSET  LR_BRACKET  providerName = stringtext  COMMA  c" +
            "onnectionString = stringtext  COMMA  sql = stringtext  RR_BRACKET)\r\n\t | (OPENROW" +
            "SET  LR_BRACKET  BULK  data_file = stringtext  COMMA  (bulk_options | id_)  RR_B" +
            "RACKET)";
        
        internal AstRowsetFunction(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstRowsetFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstRowsetFunction(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstRowsetFunction(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRowsetFunction(this);
        }
        
        /// <summary>
        ///  : 
        ///    OPENROWSET ( providerName=stringtext , connectionString=stringtext , sql=stringtext ) 
        /// </summary>
        public static AstRowsetFunction RowsetFunction(AstStringtext providerName, AstStringtext connectionString, AstStringtext sql)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRowsetFunction result = new AstRowsetFunction(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    OPENROWSET ( BULK data_file=stringtext , bulk_options ) 
        /// </summary>
        public static AstRowsetFunction RowsetFunction(AstStringtext dataFile, AstBulkOptions bulkOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRowsetFunction result = new AstRowsetFunction(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    OPENROWSET ( BULK data_file=stringtext , id_ ) 
        /// </summary>
        public static AstRowsetFunction RowsetFunction(AstStringtext dataFile, AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRowsetFunction result = new AstRowsetFunction(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// derived_table
    /// 	 : subquery
    /// 	 | LR_BRACKET  subqueries  RR_BRACKET
    /// 	 | table_value_constructor
    /// 	 | LR_BRACKET  table_value_constructor  RR_BRACKET
    /// </summary>
    public partial class AstDerivedTable : AstRule
    {
        
        protected static string _rule = "derived_table\r\n\t : subquery\r\n\t | LR_BRACKET  subqueries  RR_BRACKET\r\n\t | table_va" +
            "lue_constructor\r\n\t | LR_BRACKET  table_value_constructor  RR_BRACKET";
        
        internal AstDerivedTable(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDerivedTable(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDerivedTable(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDerivedTable(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDerivedTable(this);
        }
        
        /// <summary>
        /// subquery : 
        ///    subquery 
        /// </summary>
        public static AstDerivedTable DerivedTable(AstSubquery subquery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDerivedTable result = new AstDerivedTable(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ( subqueries ) 
        /// </summary>
        public static AstDerivedTable DerivedTable(AstSubqueries subqueries)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDerivedTable result = new AstDerivedTable(arguments);
            return result;
        }
        
        /// <summary>
        /// table_value_constructor : 
        ///    table_value_constructor 
        /// </summary>
        public static AstDerivedTable DerivedTable(AstTableValueConstructor tableValueConstructor)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDerivedTable result = new AstDerivedTable(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// function_call
    /// 	 : ranking_windowed_function
    /// 	 | aggregate_windowed_function
    /// 	 | analytic_windowed_function
    /// 	 | built_in_functions
    /// 	 | scalar_function_name  LR_BRACKET  expression_list?  RR_BRACKET
    /// 	 | freetext_function
    /// 	 | partition_function
    /// 	 | hierarchyid_static_method
    /// </summary>
    public partial class AstFunctionCall : AstRule
    {
        
        protected static string _rule = @"function_call
	 : ranking_windowed_function
	 | aggregate_windowed_function
	 | analytic_windowed_function
	 | built_in_functions
	 | scalar_function_name  LR_BRACKET  expression_list?  RR_BRACKET
	 | freetext_function
	 | partition_function
	 | hierarchyid_static_method";
        
        internal AstFunctionCall(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstFunctionCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstFunctionCall(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstFunctionCall(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFunctionCall(this);
        }
        
        /// <summary>
        /// ranking_windowed_function : 
        ///    ranking_windowed_function 
        /// </summary>
        public static AstFunctionCall FunctionCall(AstRankingWindowedFunction rankingWindowedFunction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFunctionCall result = new AstFunctionCall(arguments);
            return result;
        }
        
        /// <summary>
        /// aggregate_windowed_function : 
        ///    aggregate_windowed_function 
        /// </summary>
        public static AstFunctionCall FunctionCall(AstAggregateWindowedFunction aggregateWindowedFunction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFunctionCall result = new AstFunctionCall(arguments);
            return result;
        }
        
        /// <summary>
        /// analytic_windowed_function : 
        ///    analytic_windowed_function 
        /// </summary>
        public static AstFunctionCall FunctionCall(AstAnalyticWindowedFunction analyticWindowedFunction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFunctionCall result = new AstFunctionCall(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    built_in_functions 
        /// </summary>
        public static AstFunctionCall FunctionCall(AstBuiltInFunctions builtInFunctions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFunctionCall result = new AstFunctionCall(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    scalar_function_name ( expression_list? ) 
        /// </summary>
        public static AstFunctionCall FunctionCall(AstScalarFunctionName scalarFunctionName, AstExpressionList expressionList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFunctionCall result = new AstFunctionCall(arguments);
            return result;
        }
        
        /// <summary>
        /// freetext_function : 
        ///    freetext_function 
        /// </summary>
        public static AstFunctionCall FunctionCall(AstFreetextFunction freetextFunction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFunctionCall result = new AstFunctionCall(arguments);
            return result;
        }
        
        /// <summary>
        /// partition_function : 
        ///    partition_function 
        /// </summary>
        public static AstFunctionCall FunctionCall(AstPartitionFunction partitionFunction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFunctionCall result = new AstFunctionCall(arguments);
            return result;
        }
        
        /// <summary>
        /// hierarchyid_static_method : 
        ///    hierarchyid_static_method 
        /// </summary>
        public static AstFunctionCall FunctionCall(AstHierarchyidStaticMethod hierarchyidStaticMethod)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFunctionCall result = new AstFunctionCall(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// freetext_function
    /// 	 : containstable_freetexttable  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  (COMMA  expression)?  RR_BRACKET
    /// 	 | semantic_table  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression  RR_BRACKET
    /// 	 | SEMANTICSIMILARITYDETAILSTABLE  LR_BRACKET  full_table_ref  COMMA  name1 = full_column_name  COMMA  expr1 = expression  COMMA  name2 = full_column_name  COMMA  expr2 = expression  RR_BRACKET
    /// </summary>
    public partial class AstFreetextFunction : AstRule
    {
        
        protected static string _rule = @"freetext_function
	 : containstable_freetexttable  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  (COMMA  expression)?  RR_BRACKET
	 | semantic_table  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression  RR_BRACKET
	 | SEMANTICSIMILARITYDETAILSTABLE  LR_BRACKET  full_table_ref  COMMA  name1 = full_column_name  COMMA  expr1 = expression  COMMA  name2 = full_column_name  COMMA  expr2 = expression  RR_BRACKET";
        
        internal AstFreetextFunction(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstFreetextFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstFreetextFunction(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstFreetextFunction(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFreetextFunction(this);
        }
        
        /// <summary>
        ///  : 
        ///    containstable_freetexttable ( freetext_table_andcolumn_names , expression_language , expression ) 
        /// </summary>
        public static AstFreetextFunction FreetextFunction(AstContainstableFreetexttable containstableFreetexttable, AstFreetextTableAndcolumnNames freetextTableAndcolumnNames, AstExpressionLanguage expressionLanguage, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFreetextFunction result = new AstFreetextFunction(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    semantic_table ( freetext_table_andcolumn_names , expression ) 
        /// </summary>
        public static AstFreetextFunction FreetextFunction(AstSemanticTable semanticTable, AstFreetextTableAndcolumnNames freetextTableAndcolumnNames, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFreetextFunction result = new AstFreetextFunction(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    SEMANTICSIMILARITYDETAILSTABLE ( full_table_ref , name1=full_column_name , expr1=expression , name2=full_column_name , expr2=expression ) 
        /// </summary>
        public static AstFreetextFunction FreetextFunction(AstFullTableRef fullTableRef, AstFullColumnName name1, AstExpression expr1, AstFullColumnName name2, AstExpression expr2)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFreetextFunction result = new AstFreetextFunction(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// freetext_predicate
    /// 	 : CONTAINS  LR_BRACKET  (full_column_name | full_column_names | STAR | PROPERTY  LR_BRACKET  full_column_name  COMMA  property = expression  RR_BRACKET)  COMMA  rule = expression  RR_BRACKET
    /// 	 | FREETEXT  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  RR_BRACKET
    /// </summary>
    public partial class AstFreetextPredicate : AstRule
    {
        
        protected static string _rule = @"freetext_predicate
	 : CONTAINS  LR_BRACKET  (full_column_name | full_column_names | STAR | PROPERTY  LR_BRACKET  full_column_name  COMMA  property = expression  RR_BRACKET)  COMMA  rule = expression  RR_BRACKET
	 | FREETEXT  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  RR_BRACKET";
        
        internal AstFreetextPredicate(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstFreetextPredicate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstFreetextPredicate(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstFreetextPredicate(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFreetextPredicate(this);
        }
        
        /// <summary>
        ///  : 
        ///    CONTAINS ( full_column_name , rule=expression ) 
        /// </summary>
        public static AstFreetextPredicate FreetextPredicate(AstFullColumnName fullColumnName, AstExpression rule)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFreetextPredicate result = new AstFreetextPredicate(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CONTAINS ( full_column_names , rule=expression ) 
        /// </summary>
        public static AstFreetextPredicate FreetextPredicate(AstFullColumnNames fullColumnNames, AstExpression rule)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFreetextPredicate result = new AstFreetextPredicate(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CONTAINS ( STAR , rule=expression ) 
        /// </summary>
        public static AstFreetextPredicate FreetextPredicate(AstExpression rule)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFreetextPredicate result = new AstFreetextPredicate(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CONTAINS ( PROPERTY ( full_column_name , property=expression ) , rule=expression ) 
        /// </summary>
        public static AstFreetextPredicate FreetextPredicate(AstFullColumnName fullColumnName, AstExpression property, AstExpression rule)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFreetextPredicate result = new AstFreetextPredicate(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    FREETEXT ( freetext_table_andcolumn_names , expression_language ) 
        /// </summary>
        public static AstFreetextPredicate FreetextPredicate(AstFreetextTableAndcolumnNames freetextTableAndcolumnNames, AstExpressionLanguage expressionLanguage)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFreetextPredicate result = new AstFreetextPredicate(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// built_in_functions
    /// 	 : APP_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | APPLOCK_MODE  LR_BRACKET  database_principal = expression  COMMA  resource_name = expression  COMMA  lock_owner = expression  RR_BRACKET
    /// 	 | APPLOCK_TEST  LR_BRACKET  database_principal = expression  COMMA  resource_name = expression  COMMA  lockmode = expression  COMMA  lock_owner = expression  RR_BRACKET
    /// 	 | ASSEMBLYPROPERTY  LR_BRACKET  assemblyName = expression  COMMA  propertyName = expression  RR_BRACKET
    /// 	 | COL_LENGTH  LR_BRACKET  table = expression  COMMA  column = expression  RR_BRACKET
    /// 	 | COL_NAME  LR_BRACKET  table = expression  COMMA  column = expression  RR_BRACKET
    /// 	 | COLUMNPROPERTY  LR_BRACKET  id = expression  COMMA  column = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | DATABASEPROPERTYEX  LR_BRACKET  database = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | DB_ID  LR_BRACKET  databaseName = expression  RR_BRACKET
    /// 	 | DB_NAME  LR_BRACKET  database = expression  RR_BRACKET
    /// 	 | FILE_ID  LR_BRACKET  file_name = expression  RR_BRACKET
    /// 	 | FILE_IDEX  LR_BRACKET  file_name = expression  RR_BRACKET
    /// 	 | FILE_NAME  LR_BRACKET  file = expression  RR_BRACKET
    /// 	 | FILEGROUP_ID  LR_BRACKET  filegroup_name = expression  RR_BRACKET
    /// 	 | FILEGROUP_NAME  LR_BRACKET  filegroup_id = expression  RR_BRACKET
    /// 	 | FILEGROUPPROPERTY  LR_BRACKET  filegroup = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | FILEPROPERTY  LR_BRACKET  file = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | FILEPROPERTYEX  LR_BRACKET  name = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | FULLTEXTCATALOGPROPERTY  LR_BRACKET  catalog = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | FULLTEXTSERVICEPROPERTY  LR_BRACKET  property = expression  RR_BRACKET
    /// 	 | INDEX_COL  LR_BRACKET  tableOrView = expression  COMMA  index = expression  COMMA  key = expression  RR_BRACKET
    /// 	 | INDEXKEY_PROPERTY  LR_BRACKET  object = expression  COMMA  index = expression  COMMA  key = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | INDEXPROPERTY  LR_BRACKET  object = expression  COMMA  index_or_statistics = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | NEXT  VALUE  FOR  sequenceName = full_table_ref  (OVER  LR_BRACKET  order_by_clause  RR_BRACKET)?
    /// 	 | OBJECT_DEFINITION  LR_BRACKET  object = expression  RR_BRACKET
    /// 	 | OBJECT_ID  LR_BRACKET  objectName = expression  (COMMA  object_type = expression)?  RR_BRACKET
    /// 	 | OBJECT_NAME  LR_BRACKET  object = expression  (COMMA  database = expression)?  RR_BRACKET
    /// 	 | OBJECT_SCHEMA_NAME  LR_BRACKET  target_object = expression  (COMMA  database = expression)?  RR_BRACKET
    /// 	 | OBJECTPROPERTY  LR_BRACKET  id = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | OBJECTPROPERTYEX  LR_BRACKET  id = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | ORIGINAL_DB_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | PARSENAME  LR_BRACKET  objectName = expression  COMMA  object_piece = expression  RR_BRACKET
    /// 	 | SCHEMA_ID  LR_BRACKET  schemaName = expression  RR_BRACKET
    /// 	 | SCHEMA_NAME  LR_BRACKET  schemaId = expression  RR_BRACKET
    /// 	 | SCOPE_IDENTITY  LR_BRACKET  RR_BRACKET
    /// 	 | SERVERPROPERTY  LR_BRACKET  property = expression  RR_BRACKET
    /// 	 | STATS_DATE  LR_BRACKET  target_object = expression  COMMA  stats = expression  RR_BRACKET
    /// 	 | TYPE_ID  LR_BRACKET  type_name = expression  RR_BRACKET
    /// 	 | TYPE_NAME  LR_BRACKET  type = expression  RR_BRACKET
    /// 	 | TYPEPROPERTY  LR_BRACKET  type = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | ASCII  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | CHAR  LR_BRACKET  integer_expression = expression  RR_BRACKET
    /// 	 | CHARINDEX  LR_BRACKET  expressionToFind = expression  COMMA  expressionToSearch = expression  (COMMA  start_location = expression)?  RR_BRACKET
    /// 	 | CONCAT  LR_BRACKET  expressions  RR_BRACKET
    /// 	 | CONCAT_WS  LR_BRACKET  expressions  RR_BRACKET
    /// 	 | DIFFERENCE  LR_BRACKET  character_expression_1 = expression  COMMA  character_expression_2 = expression  RR_BRACKET
    /// 	 | FORMAT  LR_BRACKET  expressions  RR_BRACKET
    /// 	 | LEFT  LR_BRACKET  character_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
    /// 	 | LEN  LR_BRACKET  string_expression = expression  RR_BRACKET
    /// 	 | LOWER  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | LTRIM  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | NCHAR  LR_BRACKET  integer_expression = expression  RR_BRACKET
    /// 	 | PATINDEX  LR_BRACKET  pattern = expression  COMMA  string_expression = expression  RR_BRACKET
    /// 	 | QUOTENAME  LR_BRACKET  character_string = expression  (COMMA  quote_character = expression)?  RR_BRACKET
    /// 	 | REPLACE  LR_BRACKET  input = expression  COMMA  replacing = expression  COMMA  with = expression  RR_BRACKET
    /// 	 | REPLICATE  LR_BRACKET  string_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
    /// 	 | REVERSE  LR_BRACKET  string_expression = expression  RR_BRACKET
    /// 	 | RIGHT  LR_BRACKET  character_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
    /// 	 | RTRIM  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | SOUNDEX  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | SPACE_KEYWORD  LR_BRACKET  integer_expression = expression  RR_BRACKET
    /// 	 | STR  LR_BRACKET  float_expression = expression  (COMMA  length_expression = expression  (COMMA  decimal_expr = expression)?)?  RR_BRACKET
    /// 	 | STRING_AGG  LR_BRACKET  expr = expression  COMMA  separator = expression  RR_BRACKET  (WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET)?
    /// 	 | STRING_ESCAPE  LR_BRACKET  text_ = expression  COMMA  type_ = expression  RR_BRACKET
    /// 	 | STUFF  LR_BRACKET  str = expression  COMMA  from = decimal  COMMA  to = decimal  COMMA  str_with = expression  RR_BRACKET
    /// 	 | SUBSTRING  LR_BRACKET  string_expression = expression  COMMA  start_ = expression  COMMA  length = expression  RR_BRACKET
    /// 	 | TRANSLATE  LR_BRACKET  inputString = expression  COMMA  characters = expression  COMMA  translations = expression  RR_BRACKET
    /// 	 | TRIM  LR_BRACKET  (characters = expression  FROM)?  string_ = expression  RR_BRACKET
    /// 	 | UNICODE  LR_BRACKET  ncharacter_expression = expression  RR_BRACKET
    /// 	 | UPPER  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | BINARY_CHECKSUM  LR_BRACKET  (star = STAR | expressions)  RR_BRACKET
    /// 	 | CHECKSUM  LR_BRACKET  (star = STAR | expressions)  RR_BRACKET
    /// 	 | COMPRESS  LR_BRACKET  expr = expression  RR_BRACKET
    /// 	 | CONNECTIONPROPERTY  LR_BRACKET  cnx_property = stringtext  RR_BRACKET
    /// 	 | CONTEXT_INFO  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_REQUEST_ID  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_TRANSACTION_ID  LR_BRACKET  RR_BRACKET
    /// 	 | DECOMPRESS  LR_BRACKET  expr = expression  RR_BRACKET
    /// 	 | ERROR_LINE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_MESSAGE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_NUMBER  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_PROCEDURE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_SEVERITY  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_STATE  LR_BRACKET  RR_BRACKET
    /// 	 | FORMATMESSAGE  LR_BRACKET  (msg_number = decimal | msg_string = stringtext | msg_variable = local_id)  COMMA  expressions  RR_BRACKET
    /// 	 | GET_FILESTREAM_TRANSACTION_CONTEXT  LR_BRACKET  RR_BRACKET
    /// 	 | GETANSINULL  LR_BRACKET  (database_name = stringtext)?  RR_BRACKET
    /// 	 | HOST_ID  LR_BRACKET  RR_BRACKET
    /// 	 | HOST_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | ISNULL  LR_BRACKET  left = expression  COMMA  right = expression  RR_BRACKET
    /// 	 | ISNUMERIC  LR_BRACKET  expression  RR_BRACKET
    /// 	 | MIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET
    /// 	 | NEWID  LR_BRACKET  RR_BRACKET
    /// 	 | NEWSEQUENTIALID  LR_BRACKET  RR_BRACKET
    /// 	 | ROWCOUNT_BIG  LR_BRACKET  RR_BRACKET
    /// 	 | SESSION_CONTEXT  LR_BRACKET  session_key = stringtext  RR_BRACKET
    /// 	 | XACT_STATE  LR_BRACKET  RR_BRACKET
    /// 	 | CAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET
    /// 	 | TRY_CAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET
    /// 	 | CONVERT  LR_BRACKET  convert_data_type = data_type  COMMA  expression2  RR_BRACKET
    /// 	 | COALESCE  LR_BRACKET  expression_list  RR_BRACKET
    /// 	 | CURRENT_DATE  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_TIMESTAMP
    /// 	 | CURRENT_USER
    /// 	 | DATEADD  LR_BRACKET  datepart = ID  COMMA  number = expression  COMMA  date = expression  RR_BRACKET
    /// 	 | DATEDIFF  LR_BRACKET  datepart = ID  COMMA  date_first = expression  COMMA  date_second = expression  RR_BRACKET
    /// 	 | DATENAME  LR_BRACKET  datepart = ID  COMMA  date = expression  RR_BRACKET
    /// 	 | DATEPART  LR_BRACKET  datepart = ID  COMMA  date = expression  RR_BRACKET
    /// 	 | GETDATE  LR_BRACKET  RR_BRACKET
    /// 	 | GETUTCDATE  LR_BRACKET  RR_BRACKET
    /// 	 | IDENTITY  LR_BRACKET  data_type  (COMMA  seed = decimal)?  (COMMA  increment = decimal)?  RR_BRACKET
    /// 	 | MIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET
    /// 	 | NULLIF  LR_BRACKET  left = expression  COMMA  right = expression  RR_BRACKET
    /// 	 | SESSION_USER
    /// 	 | SYSTEM_USER
    /// 	 | USER
    /// 	 | PARSE  LR_BRACKET  str = expression  AS  data_type  (USING  culture = expression)?  RR_BRACKET
    /// 	 | xml_data_type_methods
    /// 	 | IIF  LR_BRACKET  cond = search_condition  COMMA  left = expression  COMMA  right = expression  RR_BRACKET
    /// </summary>
    public partial class AstBuiltInFunctions : AstRule
    {
        
        protected static string _rule = "built_in_functions\r\n\t : APP_NAME  LR_BRACKET  RR_BRACKET\r\n\t | APPLOCK_MODE  LR_BR" +
            "ACKET  database_principal = expression  COMMA  resource_name = expression  COMMA" +
            "  lock_owner = expression  RR_BRACKET\r\n\t | APPLOCK_TEST  LR_BRACKET  database_pr" +
            "incipal = expression  COMMA  resource_name = expression  COMMA  lockmode = expre" +
            "ssion  COMMA  lock_owner = expression  RR_BRACKET\r\n\t | ASSEMBLYPROPERTY  LR_BRAC" +
            "KET  assemblyName = expression  COMMA  propertyName = expression  RR_BRACKET\r\n\t " +
            "| COL_LENGTH  LR_BRACKET  table = expression  COMMA  column = expression  RR_BRA" +
            "CKET\r\n\t | COL_NAME  LR_BRACKET  table = expression  COMMA  column = expression  " +
            "RR_BRACKET\r\n\t | COLUMNPROPERTY  LR_BRACKET  id = expression  COMMA  column = exp" +
            "ression  COMMA  property = expression  RR_BRACKET\r\n\t | DATABASEPROPERTYEX  LR_BR" +
            "ACKET  database = expression  COMMA  property = expression  RR_BRACKET\r\n\t | DB_I" +
            "D  LR_BRACKET  databaseName = expression  RR_BRACKET\r\n\t | DB_NAME  LR_BRACKET  d" +
            "atabase = expression  RR_BRACKET\r\n\t | FILE_ID  LR_BRACKET  file_name = expressio" +
            "n  RR_BRACKET\r\n\t | FILE_IDEX  LR_BRACKET  file_name = expression  RR_BRACKET\r\n\t " +
            "| FILE_NAME  LR_BRACKET  file = expression  RR_BRACKET\r\n\t | FILEGROUP_ID  LR_BRA" +
            "CKET  filegroup_name = expression  RR_BRACKET\r\n\t | FILEGROUP_NAME  LR_BRACKET  f" +
            "ilegroup_id = expression  RR_BRACKET\r\n\t | FILEGROUPPROPERTY  LR_BRACKET  filegro" +
            "up = expression  COMMA  property = expression  RR_BRACKET\r\n\t | FILEPROPERTY  LR_" +
            "BRACKET  file = expression  COMMA  property = expression  RR_BRACKET\r\n\t | FILEPR" +
            "OPERTYEX  LR_BRACKET  name = expression  COMMA  property = expression  RR_BRACKE" +
            "T\r\n\t | FULLTEXTCATALOGPROPERTY  LR_BRACKET  catalog = expression  COMMA  propert" +
            "y = expression  RR_BRACKET\r\n\t | FULLTEXTSERVICEPROPERTY  LR_BRACKET  property = " +
            "expression  RR_BRACKET\r\n\t | INDEX_COL  LR_BRACKET  tableOrView = expression  COM" +
            "MA  index = expression  COMMA  key = expression  RR_BRACKET\r\n\t | INDEXKEY_PROPER" +
            "TY  LR_BRACKET  object = expression  COMMA  index = expression  COMMA  key = exp" +
            "ression  COMMA  property = expression  RR_BRACKET\r\n\t | INDEXPROPERTY  LR_BRACKET" +
            "  object = expression  COMMA  index_or_statistics = expression  COMMA  property " +
            "= expression  RR_BRACKET\r\n\t | NEXT  VALUE  FOR  sequenceName = full_table_ref  (" +
            "OVER  LR_BRACKET  order_by_clause  RR_BRACKET)?\r\n\t | OBJECT_DEFINITION  LR_BRACK" +
            "ET  object = expression  RR_BRACKET\r\n\t | OBJECT_ID  LR_BRACKET  objectName = exp" +
            "ression  (COMMA  object_type = expression)?  RR_BRACKET\r\n\t | OBJECT_NAME  LR_BRA" +
            "CKET  object = expression  (COMMA  database = expression)?  RR_BRACKET\r\n\t | OBJE" +
            "CT_SCHEMA_NAME  LR_BRACKET  target_object = expression  (COMMA  database = expre" +
            "ssion)?  RR_BRACKET\r\n\t | OBJECTPROPERTY  LR_BRACKET  id = expression  COMMA  pro" +
            "perty = expression  RR_BRACKET\r\n\t | OBJECTPROPERTYEX  LR_BRACKET  id = expressio" +
            "n  COMMA  property = expression  RR_BRACKET\r\n\t | ORIGINAL_DB_NAME  LR_BRACKET  R" +
            "R_BRACKET\r\n\t | PARSENAME  LR_BRACKET  objectName = expression  COMMA  object_pie" +
            "ce = expression  RR_BRACKET\r\n\t | SCHEMA_ID  LR_BRACKET  schemaName = expression " +
            " RR_BRACKET\r\n\t | SCHEMA_NAME  LR_BRACKET  schemaId = expression  RR_BRACKET\r\n\t |" +
            " SCOPE_IDENTITY  LR_BRACKET  RR_BRACKET\r\n\t | SERVERPROPERTY  LR_BRACKET  propert" +
            "y = expression  RR_BRACKET\r\n\t | STATS_DATE  LR_BRACKET  target_object = expressi" +
            "on  COMMA  stats = expression  RR_BRACKET\r\n\t | TYPE_ID  LR_BRACKET  type_name = " +
            "expression  RR_BRACKET\r\n\t | TYPE_NAME  LR_BRACKET  type = expression  RR_BRACKET" +
            "\r\n\t | TYPEPROPERTY  LR_BRACKET  type = expression  COMMA  property = expression " +
            " RR_BRACKET\r\n\t | ASCII  LR_BRACKET  character_expression = expression  RR_BRACKE" +
            "T\r\n\t | CHAR  LR_BRACKET  integer_expression = expression  RR_BRACKET\r\n\t | CHARIN" +
            "DEX  LR_BRACKET  expressionToFind = expression  COMMA  expressionToSearch = expr" +
            "ession  (COMMA  start_location = expression)?  RR_BRACKET\r\n\t | CONCAT  LR_BRACKE" +
            "T  expressions  RR_BRACKET\r\n\t | CONCAT_WS  LR_BRACKET  expressions  RR_BRACKET\r\n" +
            "\t | DIFFERENCE  LR_BRACKET  character_expression_1 = expression  COMMA  characte" +
            "r_expression_2 = expression  RR_BRACKET\r\n\t | FORMAT  LR_BRACKET  expressions  RR" +
            "_BRACKET\r\n\t | LEFT  LR_BRACKET  character_expression = expression  COMMA  intege" +
            "r_expression = expression  RR_BRACKET\r\n\t | LEN  LR_BRACKET  string_expression = " +
            "expression  RR_BRACKET\r\n\t | LOWER  LR_BRACKET  character_expression = expression" +
            "  RR_BRACKET\r\n\t | LTRIM  LR_BRACKET  character_expression = expression  RR_BRACK" +
            "ET\r\n\t | NCHAR  LR_BRACKET  integer_expression = expression  RR_BRACKET\r\n\t | PATI" +
            "NDEX  LR_BRACKET  pattern = expression  COMMA  string_expression = expression  R" +
            "R_BRACKET\r\n\t | QUOTENAME  LR_BRACKET  character_string = expression  (COMMA  quo" +
            "te_character = expression)?  RR_BRACKET\r\n\t | REPLACE  LR_BRACKET  input = expres" +
            "sion  COMMA  replacing = expression  COMMA  with = expression  RR_BRACKET\r\n\t | R" +
            "EPLICATE  LR_BRACKET  string_expression = expression  COMMA  integer_expression " +
            "= expression  RR_BRACKET\r\n\t | REVERSE  LR_BRACKET  string_expression = expressio" +
            "n  RR_BRACKET\r\n\t | RIGHT  LR_BRACKET  character_expression = expression  COMMA  " +
            "integer_expression = expression  RR_BRACKET\r\n\t | RTRIM  LR_BRACKET  character_ex" +
            "pression = expression  RR_BRACKET\r\n\t | SOUNDEX  LR_BRACKET  character_expression" +
            " = expression  RR_BRACKET\r\n\t | SPACE_KEYWORD  LR_BRACKET  integer_expression = e" +
            "xpression  RR_BRACKET\r\n\t | STR  LR_BRACKET  float_expression = expression  (COMM" +
            "A  length_expression = expression  (COMMA  decimal_expr = expression)?)?  RR_BRA" +
            "CKET\r\n\t | STRING_AGG  LR_BRACKET  expr = expression  COMMA  separator = expressi" +
            "on  RR_BRACKET  (WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET)?\r\n\t | S" +
            "TRING_ESCAPE  LR_BRACKET  text_ = expression  COMMA  type_ = expression  RR_BRAC" +
            "KET\r\n\t | STUFF  LR_BRACKET  str = expression  COMMA  from = decimal  COMMA  to =" +
            " decimal  COMMA  str_with = expression  RR_BRACKET\r\n\t | SUBSTRING  LR_BRACKET  s" +
            "tring_expression = expression  COMMA  start_ = expression  COMMA  length = expre" +
            "ssion  RR_BRACKET\r\n\t | TRANSLATE  LR_BRACKET  inputString = expression  COMMA  c" +
            "haracters = expression  COMMA  translations = expression  RR_BRACKET\r\n\t | TRIM  " +
            "LR_BRACKET  (characters = expression  FROM)?  string_ = expression  RR_BRACKET\r\n" +
            "\t | UNICODE  LR_BRACKET  ncharacter_expression = expression  RR_BRACKET\r\n\t | UPP" +
            "ER  LR_BRACKET  character_expression = expression  RR_BRACKET\r\n\t | BINARY_CHECKS" +
            "UM  LR_BRACKET  (star = STAR | expressions)  RR_BRACKET\r\n\t | CHECKSUM  LR_BRACKE" +
            "T  (star = STAR | expressions)  RR_BRACKET\r\n\t | COMPRESS  LR_BRACKET  expr = exp" +
            "ression  RR_BRACKET\r\n\t | CONNECTIONPROPERTY  LR_BRACKET  cnx_property = stringte" +
            "xt  RR_BRACKET\r\n\t | CONTEXT_INFO  LR_BRACKET  RR_BRACKET\r\n\t | CURRENT_REQUEST_ID" +
            "  LR_BRACKET  RR_BRACKET\r\n\t | CURRENT_TRANSACTION_ID  LR_BRACKET  RR_BRACKET\r\n\t " +
            "| DECOMPRESS  LR_BRACKET  expr = expression  RR_BRACKET\r\n\t | ERROR_LINE  LR_BRAC" +
            "KET  RR_BRACKET\r\n\t | ERROR_MESSAGE  LR_BRACKET  RR_BRACKET\r\n\t | ERROR_NUMBER  LR" +
            "_BRACKET  RR_BRACKET\r\n\t | ERROR_PROCEDURE  LR_BRACKET  RR_BRACKET\r\n\t | ERROR_SEV" +
            "ERITY  LR_BRACKET  RR_BRACKET\r\n\t | ERROR_STATE  LR_BRACKET  RR_BRACKET\r\n\t | FORM" +
            "ATMESSAGE  LR_BRACKET  (msg_number = decimal | msg_string = stringtext | msg_var" +
            "iable = local_id)  COMMA  expressions  RR_BRACKET\r\n\t | GET_FILESTREAM_TRANSACTIO" +
            "N_CONTEXT  LR_BRACKET  RR_BRACKET\r\n\t | GETANSINULL  LR_BRACKET  (database_name =" +
            " stringtext)?  RR_BRACKET\r\n\t | HOST_ID  LR_BRACKET  RR_BRACKET\r\n\t | HOST_NAME  L" +
            "R_BRACKET  RR_BRACKET\r\n\t | ISNULL  LR_BRACKET  left = expression  COMMA  right =" +
            " expression  RR_BRACKET\r\n\t | ISNUMERIC  LR_BRACKET  expression  RR_BRACKET\r\n\t | " +
            "MIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET\r\n\t | NEWID  LR_BRACKET  RR_BRACKET" +
            "\r\n\t | NEWSEQUENTIALID  LR_BRACKET  RR_BRACKET\r\n\t | ROWCOUNT_BIG  LR_BRACKET  RR_" +
            "BRACKET\r\n\t | SESSION_CONTEXT  LR_BRACKET  session_key = stringtext  RR_BRACKET\r\n" +
            "\t | XACT_STATE  LR_BRACKET  RR_BRACKET\r\n\t | CAST  LR_BRACKET  expression  AS  da" +
            "ta_type  RR_BRACKET\r\n\t | TRY_CAST  LR_BRACKET  expression  AS  data_type  RR_BRA" +
            "CKET\r\n\t | CONVERT  LR_BRACKET  convert_data_type = data_type  COMMA  expression2" +
            "  RR_BRACKET\r\n\t | COALESCE  LR_BRACKET  expression_list  RR_BRACKET\r\n\t | CURRENT" +
            "_DATE  LR_BRACKET  RR_BRACKET\r\n\t | CURRENT_TIMESTAMP\r\n\t | CURRENT_USER\r\n\t | DATE" +
            "ADD  LR_BRACKET  datepart = ID  COMMA  number = expression  COMMA  date = expres" +
            "sion  RR_BRACKET\r\n\t | DATEDIFF  LR_BRACKET  datepart = ID  COMMA  date_first = e" +
            "xpression  COMMA  date_second = expression  RR_BRACKET\r\n\t | DATENAME  LR_BRACKET" +
            "  datepart = ID  COMMA  date = expression  RR_BRACKET\r\n\t | DATEPART  LR_BRACKET " +
            " datepart = ID  COMMA  date = expression  RR_BRACKET\r\n\t | GETDATE  LR_BRACKET  R" +
            "R_BRACKET\r\n\t | GETUTCDATE  LR_BRACKET  RR_BRACKET\r\n\t | IDENTITY  LR_BRACKET  dat" +
            "a_type  (COMMA  seed = decimal)?  (COMMA  increment = decimal)?  RR_BRACKET\r\n\t |" +
            " MIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET\r\n\t | NULLIF  LR_BRACKET  left = e" +
            "xpression  COMMA  right = expression  RR_BRACKET\r\n\t | SESSION_USER\r\n\t | SYSTEM_U" +
            "SER\r\n\t | USER\r\n\t | PARSE  LR_BRACKET  str = expression  AS  data_type  (USING  c" +
            "ulture = expression)?  RR_BRACKET\r\n\t | xml_data_type_methods\r\n\t | IIF  LR_BRACKE" +
            "T  cond = search_condition  COMMA  left = expression  COMMA  right = expression " +
            " RR_BRACKET";
        
        internal AstBuiltInFunctions(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstBuiltInFunctions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBuiltInFunctions(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBuiltInFunctions(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBuiltInFunctions(this);
        }
        
        /// <summary>
        ///  : 
        ///    APPLOCK_MODE ( database_principal=expression , resource_name=expression , lock_owner=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstExpression databasePrincipal, AstExpression resourceName, AstExpression lockOwner)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    APPLOCK_TEST ( database_principal=expression , resource_name=expression , lockmode=expression , lock_owner=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstExpression databasePrincipal, AstExpression resourceName, AstExpression lockmode, AstExpression lockOwner)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ASSEMBLYPROPERTY ( assemblyName=expression , propertyName=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstExpression assemblyName, AstExpression propertyName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DB_ID ( databaseName=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstExpression databaseName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    NEXT VALUE FOR sequenceName=full_table_ref OVER ( order_by_clause ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstFullTableRef sequenceName, AstOrderByClause orderByClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CONCAT ( expressions ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstExpressions expressions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    STRING_AGG ( expr=expression , separator=expression ) WITHIN GROUP ( order_by_clause ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstExpression expr, AstExpression separator, AstOrderByClause orderByClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    STUFF ( str=expression , from=decimal , to=decimal , str_with=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstExpression str, AstDecimal from, AstDecimal to, AstExpression strWith)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CONNECTIONPROPERTY ( cnx_property=stringtext ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstStringtext cnxProperty)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    FORMATMESSAGE ( msg_number=decimal , expressions ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstDecimal msgNumber, AstExpressions expressions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    FORMATMESSAGE ( msg_string=stringtext , expressions ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstStringtext msgString, AstExpressions expressions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    FORMATMESSAGE ( msg_variable=local_id , expressions ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstLocalId msgVariable, AstExpressions expressions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CAST ( expression AS data_type ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstExpression expression, AstDataType dataType)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CONVERT ( convert_data_type=data_type , expression2 ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstDataType convertDataType, AstExpression2 expression2)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    COALESCE ( expression_list ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstExpressionList expressionList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DATEADD ( datepart=ID , number=expression , date=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(String datepart, AstExpression number, AstExpression date)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DATENAME ( datepart=ID , date=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(String datepart, AstExpression date)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    IDENTITY ( data_type , seed=decimal , increment=decimal ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstDataType dataType, AstDecimal seed, AstDecimal increment)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    PARSE ( str=expression AS data_type USING culture=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstExpression str, AstDataType dataType, AstExpression culture)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
        
        /// <summary>
        /// xml_data_type_methods : 
        ///    xml_data_type_methods 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstXmlDataTypeMethods xmlDataTypeMethods)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    IIF ( cond=search_condition , left=expression , right=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstSearchCondition cond, AstExpression left, AstExpression right)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions result = new AstBuiltInFunctions(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// value_method
    /// 	 : (loc = local_id | value = full_column_name | eventdata = EVENTDATA  LR_BRACKET  RR_BRACKET | query = query_method | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = value_call
    /// </summary>
    public partial class AstValueMethod : AstXmlDataTypeMethods
    {
        
        protected static string _rule = "value_method\r\n\t : (loc = local_id | value = full_column_name | eventdata = EVENTD" +
            "ATA  LR_BRACKET  RR_BRACKET | query = query_method | LR_BRACKET  subquery  RR_BR" +
            "ACKET)  DOT  call = value_call";
        
        internal AstValueMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstValueMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstValueMethod(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstValueMethod(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitValueMethod(this);
        }
        
        /// <summary>
        ///  : 
        ///    loc=local_id . call=value_call 
        /// </summary>
        public static AstValueMethod ValueMethod(AstLocalId loc, AstValueCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstValueMethod result = new AstValueMethod(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    value=full_column_name . call=value_call 
        /// </summary>
        public static AstValueMethod ValueMethod(AstFullColumnName value, AstValueCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstValueMethod result = new AstValueMethod(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    eventdata=EVENTDATA ( ) . call=value_call 
        /// </summary>
        public static AstValueMethod ValueMethod(AstValueCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstValueMethod result = new AstValueMethod(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    query=query_method . call=value_call 
        /// </summary>
        public static AstValueMethod ValueMethod(AstQueryMethod query, AstValueCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstValueMethod result = new AstValueMethod(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ( subquery ) . call=value_call 
        /// </summary>
        public static AstValueMethod ValueMethod(AstSubquery subquery, AstValueCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstValueMethod result = new AstValueMethod(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// value_call
    /// 	 : VALUE  LR_BRACKET  xquery = stringtext  COMMA  sqltype = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstValueCall : AstRule
    {
        
        protected static string _rule = "value_call\r\n\t : VALUE  LR_BRACKET  xquery = stringtext  COMMA  sqltype = stringte" +
            "xt  RR_BRACKET";
        
        internal AstValueCall(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstValueCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstValueCall(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstValueCall(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitValueCall(this);
        }
        
        /// <summary>
        ///  : 
        ///    VALUE ( xquery=stringtext , sqltype=stringtext ) 
        /// </summary>
        public static AstValueCall ValueCall(AstStringtext xquery, AstStringtext sqltype)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstValueCall result = new AstValueCall(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// query_method
    /// 	 : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = query_call
    /// </summary>
    public partial class AstQueryMethod : AstXmlDataTypeMethods
    {
        
        protected static string _rule = "query_method\r\n\t : (loc = local_id | value = full_column_name | LR_BRACKET  subque" +
            "ry  RR_BRACKET)  DOT  call = query_call";
        
        internal AstQueryMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstQueryMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstQueryMethod(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstQueryMethod(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueryMethod(this);
        }
        
        /// <summary>
        ///  : 
        ///    loc=local_id . call=query_call 
        /// </summary>
        public static AstQueryMethod QueryMethod(AstLocalId loc, AstQueryCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueryMethod result = new AstQueryMethod(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    value=full_column_name . call=query_call 
        /// </summary>
        public static AstQueryMethod QueryMethod(AstFullColumnName value, AstQueryCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueryMethod result = new AstQueryMethod(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ( subquery ) . call=query_call 
        /// </summary>
        public static AstQueryMethod QueryMethod(AstSubquery subquery, AstQueryCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueryMethod result = new AstQueryMethod(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// query_call
    /// 	 : QUERY  LR_BRACKET  xquery = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstQueryCall : AstRule
    {
        
        protected static string _rule = "query_call\r\n\t : QUERY  LR_BRACKET  xquery = stringtext  RR_BRACKET";
        
        internal AstQueryCall(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstQueryCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstQueryCall(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstQueryCall(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueryCall(this);
        }
        
        /// <summary>
        ///  : 
        ///    QUERY ( xquery=stringtext ) 
        /// </summary>
        public static AstQueryCall QueryCall(AstStringtext xquery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueryCall result = new AstQueryCall(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// exist_method
    /// 	 : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = exist_call
    /// </summary>
    public partial class AstExistMethod : AstXmlDataTypeMethods
    {
        
        protected static string _rule = "exist_method\r\n\t : (loc = local_id | value = full_column_name | LR_BRACKET  subque" +
            "ry  RR_BRACKET)  DOT  call = exist_call";
        
        internal AstExistMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstExistMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExistMethod(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExistMethod(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExistMethod(this);
        }
        
        /// <summary>
        ///  : 
        ///    loc=local_id . call=exist_call 
        /// </summary>
        public static AstExistMethod ExistMethod(AstLocalId loc, AstExistCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExistMethod result = new AstExistMethod(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    value=full_column_name . call=exist_call 
        /// </summary>
        public static AstExistMethod ExistMethod(AstFullColumnName value, AstExistCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExistMethod result = new AstExistMethod(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ( subquery ) . call=exist_call 
        /// </summary>
        public static AstExistMethod ExistMethod(AstSubquery subquery, AstExistCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExistMethod result = new AstExistMethod(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// exist_call
    /// 	 : EXIST  LR_BRACKET  xquery = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstExistCall : AstRule
    {
        
        protected static string _rule = "exist_call\r\n\t : EXIST  LR_BRACKET  xquery = stringtext  RR_BRACKET";
        
        internal AstExistCall(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstExistCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExistCall(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExistCall(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExistCall(this);
        }
        
        /// <summary>
        ///  : 
        ///    EXIST ( xquery=stringtext ) 
        /// </summary>
        public static AstExistCall ExistCall(AstStringtext xquery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExistCall result = new AstExistCall(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// modify_method
    /// 	 : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = modify_call
    /// </summary>
    public partial class AstModifyMethod : AstXmlDataTypeMethods
    {
        
        protected static string _rule = "modify_method\r\n\t : (loc = local_id | value = full_column_name | LR_BRACKET  subqu" +
            "ery  RR_BRACKET)  DOT  call = modify_call";
        
        internal AstModifyMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstModifyMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstModifyMethod(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstModifyMethod(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModifyMethod(this);
        }
        
        /// <summary>
        ///  : 
        ///    loc=local_id . call=modify_call 
        /// </summary>
        public static AstModifyMethod ModifyMethod(AstLocalId loc, AstModifyCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstModifyMethod result = new AstModifyMethod(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    value=full_column_name . call=modify_call 
        /// </summary>
        public static AstModifyMethod ModifyMethod(AstFullColumnName value, AstModifyCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstModifyMethod result = new AstModifyMethod(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ( subquery ) . call=modify_call 
        /// </summary>
        public static AstModifyMethod ModifyMethod(AstSubquery subquery, AstModifyCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstModifyMethod result = new AstModifyMethod(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// modify_call
    /// 	 : MODIFY  LR_BRACKET  xml_dml = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstModifyCall : AstRule
    {
        
        protected static string _rule = "modify_call\r\n\t : MODIFY  LR_BRACKET  xml_dml = stringtext  RR_BRACKET";
        
        internal AstModifyCall(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstModifyCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstModifyCall(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstModifyCall(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModifyCall(this);
        }
        
        /// <summary>
        ///  : 
        ///    MODIFY ( xml_dml=stringtext ) 
        /// </summary>
        public static AstModifyCall ModifyCall(AstStringtext xmlDml)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstModifyCall result = new AstModifyCall(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// hierarchyid_call
    /// 	 : GETANCESTOR  LR_BRACKET  n = expression  RR_BRACKET
    /// 	 | GETDESCENDANT  LR_BRACKET  child1 = expression  COMMA  child2 = expression  RR_BRACKET
    /// 	 | GETLEVEL  LR_BRACKET  RR_BRACKET
    /// 	 | ISDESCENDANTOF  LR_BRACKET  parent_ = expression  RR_BRACKET
    /// 	 | GETREPARENTEDVALUE  LR_BRACKET  oldroot = expression  COMMA  newroot = expression  RR_BRACKET
    /// 	 | TOSTRING  LR_BRACKET  RR_BRACKET
    /// </summary>
    public partial class AstHierarchyidCall : AstRule
    {
        
        protected static string _rule = @"hierarchyid_call
	 : GETANCESTOR  LR_BRACKET  n = expression  RR_BRACKET
	 | GETDESCENDANT  LR_BRACKET  child1 = expression  COMMA  child2 = expression  RR_BRACKET
	 | GETLEVEL  LR_BRACKET  RR_BRACKET
	 | ISDESCENDANTOF  LR_BRACKET  parent_ = expression  RR_BRACKET
	 | GETREPARENTEDVALUE  LR_BRACKET  oldroot = expression  COMMA  newroot = expression  RR_BRACKET
	 | TOSTRING  LR_BRACKET  RR_BRACKET";
        
        internal AstHierarchyidCall(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstHierarchyidCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstHierarchyidCall(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstHierarchyidCall(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitHierarchyidCall(this);
        }
        
        /// <summary>
        ///  : 
        ///    GETANCESTOR ( n=expression ) 
        /// </summary>
        public static AstHierarchyidCall HierarchyidCall(AstExpression n)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstHierarchyidCall result = new AstHierarchyidCall(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    GETDESCENDANT ( child1=expression , child2=expression ) 
        /// </summary>
        public static AstHierarchyidCall HierarchyidCall(AstExpression child1, AstExpression child2)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstHierarchyidCall result = new AstHierarchyidCall(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// hierarchyid_static_method
    /// 	 : HIERARCHYID  DOUBLE_COLON  (GETROOT  LR_BRACKET  RR_BRACKET | PARSE  LR_BRACKET  input = expression  RR_BRACKET)
    /// </summary>
    public partial class AstHierarchyidStaticMethod : AstRule
    {
        
        protected static string _rule = "hierarchyid_static_method\r\n\t : HIERARCHYID  DOUBLE_COLON  (GETROOT  LR_BRACKET  R" +
            "R_BRACKET | PARSE  LR_BRACKET  input = expression  RR_BRACKET)";
        
        internal AstHierarchyidStaticMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstHierarchyidStaticMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstHierarchyidStaticMethod(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstHierarchyidStaticMethod(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitHierarchyidStaticMethod(this);
        }
        
        /// <summary>
        ///  : 
        ///    HIERARCHYID :: PARSE ( input=expression ) 
        /// </summary>
        public static AstHierarchyidStaticMethod HierarchyidStaticMethod(AstExpression input)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstHierarchyidStaticMethod result = new AstHierarchyidStaticMethod(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// nodes_method
    /// 	 : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  NODES  LR_BRACKET  xquery = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstNodesMethod : AstRule
    {
        
        protected static string _rule = "nodes_method\r\n\t : (loc = local_id | value = full_column_name | LR_BRACKET  subque" +
            "ry  RR_BRACKET)  DOT  NODES  LR_BRACKET  xquery = stringtext  RR_BRACKET";
        
        internal AstNodesMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstNodesMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstNodesMethod(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstNodesMethod(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNodesMethod(this);
        }
        
        /// <summary>
        ///  : 
        ///    loc=local_id . NODES ( xquery=stringtext ) 
        /// </summary>
        public static AstNodesMethod NodesMethod(AstLocalId loc, AstStringtext xquery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstNodesMethod result = new AstNodesMethod(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    value=full_column_name . NODES ( xquery=stringtext ) 
        /// </summary>
        public static AstNodesMethod NodesMethod(AstFullColumnName value, AstStringtext xquery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstNodesMethod result = new AstNodesMethod(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ( subquery ) . NODES ( xquery=stringtext ) 
        /// </summary>
        public static AstNodesMethod NodesMethod(AstSubquery subquery, AstStringtext xquery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstNodesMethod result = new AstNodesMethod(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// table_hint
    /// 	 : NOEXPAND
    /// 	 | INDEX  (LR_BRACKET  index_values  RR_BRACKET | EQUAL  LR_BRACKET  index_value  RR_BRACKET | EQUAL  index_value)
    /// 	 | FORCESEEK  (LR_BRACKET  index_value  LR_BRACKET  column_name_list  RR_BRACKET  RR_BRACKET)?
    /// 	 | FORCESCAN
    /// 	 | HOLDLOCK
    /// 	 | NOLOCK
    /// 	 | NOWAIT
    /// 	 | PAGLOCK
    /// 	 | READCOMMITTED
    /// 	 | READCOMMITTEDLOCK
    /// 	 | READPAST
    /// 	 | READUNCOMMITTED
    /// 	 | REPEATABLEREAD
    /// 	 | ROWLOCK
    /// 	 | SERIALIZABLE
    /// 	 | SNAPSHOT
    /// 	 | SPATIAL_WINDOW_MAX_CELLS  EQUAL  decimal
    /// 	 | TABLOCK
    /// 	 | TABLOCKX
    /// 	 | UPDLOCK
    /// 	 | XLOCK
    /// 	 | KEEPIDENTITY
    /// 	 | KEEPDEFAULTS
    /// 	 | IGNORE_CONSTRAINTS
    /// 	 | IGNORE_TRIGGERS
    /// </summary>
    public partial class AstTableHint : AstRule
    {
        
        protected static string _rule = @"table_hint
	 : NOEXPAND
	 | INDEX  (LR_BRACKET  index_values  RR_BRACKET | EQUAL  LR_BRACKET  index_value  RR_BRACKET | EQUAL  index_value)
	 | FORCESEEK  (LR_BRACKET  index_value  LR_BRACKET  column_name_list  RR_BRACKET  RR_BRACKET)?
	 | FORCESCAN
	 | HOLDLOCK
	 | NOLOCK
	 | NOWAIT
	 | PAGLOCK
	 | READCOMMITTED
	 | READCOMMITTEDLOCK
	 | READPAST
	 | READUNCOMMITTED
	 | REPEATABLEREAD
	 | ROWLOCK
	 | SERIALIZABLE
	 | SNAPSHOT
	 | SPATIAL_WINDOW_MAX_CELLS  EQUAL  decimal
	 | TABLOCK
	 | TABLOCKX
	 | UPDLOCK
	 | XLOCK
	 | KEEPIDENTITY
	 | KEEPDEFAULTS
	 | IGNORE_CONSTRAINTS
	 | IGNORE_TRIGGERS";
        
        internal AstTableHint(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTableHint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTableHint(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTableHint(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableHint(this);
        }
        
        /// <summary>
        ///  : 
        ///    INDEX ( index_values ) 
        /// </summary>
        public static AstTableHint TableHint(AstIndexValues indexValues)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableHint result = new AstTableHint(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    INDEX EQUAL ( index_value ) 
        /// </summary>
        public static AstTableHint TableHint(AstIndexValue indexValue)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableHint result = new AstTableHint(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    FORCESEEK ( index_value ( column_name_list ) ) 
        /// </summary>
        public static AstTableHint TableHint(AstIndexValue indexValue, AstColumnNameList columnNameList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableHint result = new AstTableHint(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    SPATIAL_WINDOW_MAX_CELLS EQUAL decimal 
        /// </summary>
        public static AstTableHint TableHint(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableHint result = new AstTableHint(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// index_value
    /// 	 : id_
    /// 	 | decimal
    /// </summary>
    public partial class AstIndexValue : AstRule
    {
        
        protected static string _rule = "index_value\r\n\t : id_\r\n\t | decimal";
        
        internal AstIndexValue(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstIndexValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstIndexValue(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstIndexValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIndexValue(this);
        }
        
        /// <summary>
        /// id_ : 
        ///    id_ 
        /// </summary>
        public static AstIndexValue IndexValue(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstIndexValue result = new AstIndexValue(arguments);
            return result;
        }
        
        /// <summary>
        /// decimal : 
        ///    decimal 
        /// </summary>
        public static AstIndexValue IndexValue(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstIndexValue result = new AstIndexValue(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// ranking_windowed_function
    /// 	 : ranking_windowed  LR_BRACKET  RR_BRACKET  over_clause
    /// 	 | NTILE  LR_BRACKET  expression  RR_BRACKET  over_clause
    /// </summary>
    public partial class AstRankingWindowedFunction : AstRule
    {
        
        protected static string _rule = "ranking_windowed_function\r\n\t : ranking_windowed  LR_BRACKET  RR_BRACKET  over_cla" +
            "use\r\n\t | NTILE  LR_BRACKET  expression  RR_BRACKET  over_clause";
        
        internal AstRankingWindowedFunction(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstRankingWindowedFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstRankingWindowedFunction(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstRankingWindowedFunction(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRankingWindowedFunction(this);
        }
        
        /// <summary>
        ///  : 
        ///    ranking_windowed ( ) over_clause 
        /// </summary>
        public static AstRankingWindowedFunction RankingWindowedFunction(AstRankingWindowed rankingWindowed, AstOverClause overClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRankingWindowedFunction result = new AstRankingWindowedFunction(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    NTILE ( expression ) over_clause 
        /// </summary>
        public static AstRankingWindowedFunction RankingWindowedFunction(AstExpression expression, AstOverClause overClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRankingWindowedFunction result = new AstRankingWindowedFunction(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// aggregate_windowed_function
    /// 	 : agg_function  LR_BRACKET  all_distinct_expression  RR_BRACKET  over_clause?
    /// 	 | count_count_big  LR_BRACKET  (STAR | all_distinct_expression)  RR_BRACKET  over_clause?
    /// 	 | CHECKSUM_AGG  LR_BRACKET  all_distinct_expression  RR_BRACKET
    /// 	 | GROUPING  LR_BRACKET  expression  RR_BRACKET
    /// 	 | GROUPING_ID  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    public partial class AstAggregateWindowedFunction : AstRule
    {
        
        protected static string _rule = @"aggregate_windowed_function
	 : agg_function  LR_BRACKET  all_distinct_expression  RR_BRACKET  over_clause?
	 | count_count_big  LR_BRACKET  (STAR | all_distinct_expression)  RR_BRACKET  over_clause?
	 | CHECKSUM_AGG  LR_BRACKET  all_distinct_expression  RR_BRACKET
	 | GROUPING  LR_BRACKET  expression  RR_BRACKET
	 | GROUPING_ID  LR_BRACKET  expression_list  RR_BRACKET";
        
        internal AstAggregateWindowedFunction(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAggregateWindowedFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAggregateWindowedFunction(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAggregateWindowedFunction(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAggregateWindowedFunction(this);
        }
        
        /// <summary>
        ///  : 
        ///    agg_function ( all_distinct_expression ) over_clause? 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(AstAggFunction aggFunction, AstAllDistinctExpression allDistinctExpression, AstOverClause overClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAggregateWindowedFunction result = new AstAggregateWindowedFunction(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    count_count_big ( STAR ) over_clause? 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(AstCountCountBig countCountBig, AstOverClause overClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAggregateWindowedFunction result = new AstAggregateWindowedFunction(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    count_count_big ( all_distinct_expression ) over_clause? 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(AstCountCountBig countCountBig, AstAllDistinctExpression allDistinctExpression, AstOverClause overClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAggregateWindowedFunction result = new AstAggregateWindowedFunction(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    CHECKSUM_AGG ( all_distinct_expression ) 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(AstAllDistinctExpression allDistinctExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAggregateWindowedFunction result = new AstAggregateWindowedFunction(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    GROUPING ( expression ) 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAggregateWindowedFunction result = new AstAggregateWindowedFunction(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    GROUPING_ID ( expression_list ) 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(AstExpressionList expressionList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAggregateWindowedFunction result = new AstAggregateWindowedFunction(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// analytic_windowed_function
    /// 	 : first_last_value  LR_BRACKET  expression  RR_BRACKET  over_clause
    /// 	 | lag_lead  LR_BRACKET  expression  (COMMA  expression2)?  RR_BRACKET  over_clause
    /// 	 | cume_percent  LR_BRACKET  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  order_by_clause  RR_BRACKET
    /// 	 | percentil  LR_BRACKET  expression  RR_BRACKET  WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  RR_BRACKET
    /// </summary>
    public partial class AstAnalyticWindowedFunction : AstRule
    {
        
        protected static string _rule = @"analytic_windowed_function
	 : first_last_value  LR_BRACKET  expression  RR_BRACKET  over_clause
	 | lag_lead  LR_BRACKET  expression  (COMMA  expression2)?  RR_BRACKET  over_clause
	 | cume_percent  LR_BRACKET  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  order_by_clause  RR_BRACKET
	 | percentil  LR_BRACKET  expression  RR_BRACKET  WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  RR_BRACKET";
        
        internal AstAnalyticWindowedFunction(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAnalyticWindowedFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAnalyticWindowedFunction(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAnalyticWindowedFunction(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAnalyticWindowedFunction(this);
        }
        
        /// <summary>
        ///  : 
        ///    first_last_value ( expression ) over_clause 
        /// </summary>
        public static AstAnalyticWindowedFunction AnalyticWindowedFunction(AstFirstLastValue firstLastValue, AstExpression expression, AstOverClause overClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnalyticWindowedFunction result = new AstAnalyticWindowedFunction(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    lag_lead ( expression , expression2 ) over_clause 
        /// </summary>
        public static AstAnalyticWindowedFunction AnalyticWindowedFunction(AstLagLead lagLead, AstExpression expression, AstExpression2 expression2, AstOverClause overClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnalyticWindowedFunction result = new AstAnalyticWindowedFunction(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    cume_percent ( ) OVER ( PARTITION BY expression_list order_by_clause ) 
        /// </summary>
        public static AstAnalyticWindowedFunction AnalyticWindowedFunction(AstCumePercent cumePercent, AstExpressionList expressionList, AstOrderByClause orderByClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnalyticWindowedFunction result = new AstAnalyticWindowedFunction(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    percentil ( expression ) WITHIN GROUP ( order_by_clause ) OVER ( PARTITION BY expression_list ) 
        /// </summary>
        public static AstAnalyticWindowedFunction AnalyticWindowedFunction(AstPercentil percentil, AstExpression expression, AstOrderByClause orderByClause, AstExpressionList expressionList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnalyticWindowedFunction result = new AstAnalyticWindowedFunction(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// window_frame_extent
    /// 	 : window_frame_preceding
    /// 	 | BETWEEN  left = window_frame_bound  AND  right = window_frame_bound
    /// </summary>
    public partial class AstWindowFrameExtent : AstRule
    {
        
        protected static string _rule = "window_frame_extent\r\n\t : window_frame_preceding\r\n\t | BETWEEN  left = window_frame" +
            "_bound  AND  right = window_frame_bound";
        
        internal AstWindowFrameExtent(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstWindowFrameExtent(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstWindowFrameExtent(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstWindowFrameExtent(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWindowFrameExtent(this);
        }
        
        /// <summary>
        /// window_frame_preceding : 
        ///    window_frame_preceding 
        /// </summary>
        public static AstWindowFrameExtent WindowFrameExtent(AstWindowFramePreceding windowFramePreceding)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstWindowFrameExtent result = new AstWindowFrameExtent(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    BETWEEN left=window_frame_bound AND right=window_frame_bound 
        /// </summary>
        public static AstWindowFrameExtent WindowFrameExtent(AstWindowFrameBound left, AstWindowFrameBound right)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstWindowFrameExtent result = new AstWindowFrameExtent(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// window_frame_preceding
    /// 	 : UNBOUNDED  PRECEDING
    /// 	 | decimal  PRECEDING
    /// 	 | CURRENT  ROW
    /// </summary>
    public partial class AstWindowFramePreceding : AstWindowFrameBound
    {
        
        protected static string _rule = "window_frame_preceding\r\n\t : UNBOUNDED  PRECEDING\r\n\t | decimal  PRECEDING\r\n\t | CUR" +
            "RENT  ROW";
        
        internal AstWindowFramePreceding(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstWindowFramePreceding(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstWindowFramePreceding(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstWindowFramePreceding(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWindowFramePreceding(this);
        }
        
        /// <summary>
        ///  : 
        ///    decimal PRECEDING 
        /// </summary>
        public static AstWindowFramePreceding WindowFramePreceding(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstWindowFramePreceding result = new AstWindowFramePreceding(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// window_frame_following
    /// 	 : UNBOUNDED  FOLLOWING
    /// 	 | decimal  FOLLOWING
    /// </summary>
    public partial class AstWindowFrameFollowing : AstWindowFrameBound
    {
        
        protected static string _rule = "window_frame_following\r\n\t : UNBOUNDED  FOLLOWING\r\n\t | decimal  FOLLOWING";
        
        internal AstWindowFrameFollowing(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstWindowFrameFollowing(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstWindowFrameFollowing(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstWindowFrameFollowing(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWindowFrameFollowing(this);
        }
        
        /// <summary>
        ///  : 
        ///    decimal FOLLOWING 
        /// </summary>
        public static AstWindowFrameFollowing WindowFrameFollowing(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstWindowFrameFollowing result = new AstWindowFrameFollowing(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_database_option
    /// 	 : FILESTREAM  database_filestream_options
    /// 	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
    /// 	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
    /// 	 | NESTED_TRIGGERS  EQUAL  on_off
    /// 	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
    /// 	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal
    /// 	 | DB_CHAINING  on_off
    /// 	 | TRUSTWORTHY  on_off
    /// </summary>
    public partial class AstCreateDatabaseOption : AstRule
    {
        
        protected static string _rule = @"create_database_option
	 : FILESTREAM  database_filestream_options
	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
	 | NESTED_TRIGGERS  EQUAL  on_off
	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal
	 | DB_CHAINING  on_off
	 | TRUSTWORTHY  on_off";
        
        internal AstCreateDatabaseOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateDatabaseOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateDatabaseOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateDatabaseOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateDatabaseOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    FILESTREAM database_filestream_options 
        /// </summary>
        public static AstCreateDatabaseOption CreateDatabaseOption(AstDatabaseFilestreamOptions databaseFilestreamOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateDatabaseOption result = new AstCreateDatabaseOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DEFAULT_LANGUAGE EQUAL id_or_string 
        /// </summary>
        public static AstCreateDatabaseOption CreateDatabaseOption(AstIdOrString idOrString)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateDatabaseOption result = new AstCreateDatabaseOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    NESTED_TRIGGERS EQUAL on_off 
        /// </summary>
        public static AstCreateDatabaseOption CreateDatabaseOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateDatabaseOption result = new AstCreateDatabaseOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    TWO_DIGIT_YEAR_CUTOFF EQUAL decimal 
        /// </summary>
        public static AstCreateDatabaseOption CreateDatabaseOption(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateDatabaseOption result = new AstCreateDatabaseOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// database_filestream_option
    /// 	 : LR_BRACKET  ((NON_TRANSACTED_ACCESS  EQUAL  off_read_only_full) | (DIRECTORY_NAME  EQUAL  stringtext))  RR_BRACKET
    /// </summary>
    public partial class AstDatabaseFilestreamOption : AstRule
    {
        
        protected static string _rule = "database_filestream_option\r\n\t : LR_BRACKET  ((NON_TRANSACTED_ACCESS  EQUAL  off_r" +
            "ead_only_full) | (DIRECTORY_NAME  EQUAL  stringtext))  RR_BRACKET";
        
        internal AstDatabaseFilestreamOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDatabaseFilestreamOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDatabaseFilestreamOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDatabaseFilestreamOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseFilestreamOption(this);
        }
        
        /// <summary>
        ///  : 
        ///    ( NON_TRANSACTED_ACCESS EQUAL off_read_only_full ) 
        /// </summary>
        public static AstDatabaseFilestreamOption DatabaseFilestreamOption(AstOffReadOnlyFull offReadOnlyFull)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseFilestreamOption result = new AstDatabaseFilestreamOption(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ( DIRECTORY_NAME EQUAL stringtext ) 
        /// </summary>
        public static AstDatabaseFilestreamOption DatabaseFilestreamOption(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseFilestreamOption result = new AstDatabaseFilestreamOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// max_size
    /// 	 : file_size
    /// 	 | UNLIMITED
    /// </summary>
    public partial class AstMaxSize : AstRule
    {
        
        protected static string _rule = "max_size\r\n\t : file_size\r\n\t | UNLIMITED";
        
        internal AstMaxSize(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstMaxSize(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstMaxSize(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstMaxSize(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMaxSize(this);
        }
        
        /// <summary>
        /// file_size : 
        ///    file_size 
        /// </summary>
        public static AstMaxSize MaxSize(AstFileSize fileSize)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstMaxSize result = new AstMaxSize(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// null_or_default
    /// 	 : (null_notnull | DEFAULT  constant_expression  (COLLATE  id_)?  (WITH  VALUES)?)
    /// </summary>
    public partial class AstNullOrDefault : AstRule
    {
        
        protected static string _rule = "null_or_default\r\n\t : (null_notnull | DEFAULT  constant_expression  (COLLATE  id_)" +
            "?  (WITH  VALUES)?)";
        
        internal AstNullOrDefault(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstNullOrDefault(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstNullOrDefault(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstNullOrDefault(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNullOrDefault(this);
        }
        
        /// <summary>
        /// null_notnull : 
        ///    null_notnull 
        /// </summary>
        public static AstNullOrDefault NullOrDefault(AstNullNotnull nullNotnull)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstNullOrDefault result = new AstNullOrDefault(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    DEFAULT constant_expression COLLATE id_ WITH VALUES 
        /// </summary>
        public static AstNullOrDefault NullOrDefault(AstConstantExpression constantExpression, AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstNullOrDefault result = new AstNullOrDefault(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// scalar_function_name
    /// 	 : func_proc_name_server_database_schema
    /// 	 | scalar_function_name_enum
    /// </summary>
    public partial class AstScalarFunctionName : AstRule
    {
        
        protected static string _rule = "scalar_function_name\r\n\t : func_proc_name_server_database_schema\r\n\t | scalar_funct" +
            "ion_name_enum";
        
        internal AstScalarFunctionName(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstScalarFunctionName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstScalarFunctionName(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstScalarFunctionName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitScalarFunctionName(this);
        }
        
        /// <summary>
        /// func_proc_name_server_database_schema : 
        ///    func_proc_name_server_database_schema 
        /// </summary>
        public static AstScalarFunctionName ScalarFunctionName(AstFuncProcNameServerDatabaseSchema funcProcNameServerDatabaseSchema)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstScalarFunctionName result = new AstScalarFunctionName(arguments);
            return result;
        }
        
        /// <summary>
        /// scalar_function_name_enum : 
        ///    scalar_function_name_enum 
        /// </summary>
        public static AstScalarFunctionName ScalarFunctionName(AstScalarFunctionNameEnum scalarFunctionNameEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstScalarFunctionName result = new AstScalarFunctionName(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// contract_name_expression
    /// 	 : (id_ | expression)
    /// </summary>
    public partial class AstContractNameExpression : AstRule
    {
        
        protected static string _rule = "contract_name_expression\r\n\t : (id_ | expression)";
        
        internal AstContractNameExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstContractNameExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstContractNameExpression(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstContractNameExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContractNameExpression(this);
        }
        
        /// <summary>
        /// id_ : 
        ///    id_ 
        /// </summary>
        public static AstContractNameExpression ContractNameExpression(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstContractNameExpression result = new AstContractNameExpression(arguments);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    expression 
        /// </summary>
        public static AstContractNameExpression ContractNameExpression(AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstContractNameExpression result = new AstContractNameExpression(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// service_name
    /// 	 : (id_ | expression)
    /// </summary>
    public partial class AstServiceName : AstRule
    {
        
        protected static string _rule = "service_name\r\n\t : (id_ | expression)";
        
        internal AstServiceName(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstServiceName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstServiceName(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstServiceName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServiceName(this);
        }
        
        /// <summary>
        /// id_ : 
        ///    id_ 
        /// </summary>
        public static AstServiceName ServiceName(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServiceName result = new AstServiceName(arguments);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    expression 
        /// </summary>
        public static AstServiceName ServiceName(AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServiceName result = new AstServiceName(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// end_conversation
    /// 	 : END  CONVERSATION  conversation_handle = local_id  SEMI?  (WITH  (ERROR  EQUAL  faliure_code = string_local_id  DESCRIPTION  EQUAL  failure_text = string_local_id)?  CLEANUP?)?
    /// </summary>
    public partial class AstEndConversation : AstConversationStatement
    {
        
        protected static string _rule = "end_conversation\r\n\t : END  CONVERSATION  conversation_handle = local_id  SEMI?  (" +
            "WITH  (ERROR  EQUAL  faliure_code = string_local_id  DESCRIPTION  EQUAL  failure" +
            "_text = string_local_id)?  CLEANUP?)?";
        
        internal AstEndConversation(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstEndConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstEndConversation(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstEndConversation(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEndConversation(this);
        }
        
        /// <summary>
        ///  : 
        ///    END CONVERSATION conversation_handle=local_id SEMI? WITH ERROR EQUAL faliure_code=string_local_id DESCRIPTION EQUAL failure_text=string_local_id CLEANUP? 
        /// </summary>
        public static AstEndConversation EndConversation(AstLocalId conversationHandle, AstStringLocalId faliureCode, AstStringLocalId failureText)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEndConversation result = new AstEndConversation(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// get_conversation
    /// 	 : GET  CONVERSATION  GROUP  conversation_group = string_local_id  FROM  queue = database_schema_queue_ref  SEMI?
    /// </summary>
    public partial class AstGetConversation : AstConversationStatement
    {
        
        protected static string _rule = "get_conversation\r\n\t : GET  CONVERSATION  GROUP  conversation_group = string_local" +
            "_id  FROM  queue = database_schema_queue_ref  SEMI?";
        
        internal AstGetConversation(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstGetConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstGetConversation(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstGetConversation(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGetConversation(this);
        }
        
        /// <summary>
        ///  : 
        ///    GET CONVERSATION GROUP conversation_group=string_local_id FROM queue=database_schema_queue_ref SEMI? 
        /// </summary>
        public static AstGetConversation GetConversation(AstStringLocalId conversationGroup, AstDatabaseSchemaQueueRef queue)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstGetConversation result = new AstGetConversation(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// send_conversation
    /// 	 : SEND  ON  CONVERSATION  conversation_handle = string_local_id  MESSAGE  TYPE  messageTypeName = expression  (LR_BRACKET  messageBodyEexpression = string_local_id  RR_BRACKET)?  SEMI?
    /// </summary>
    public partial class AstSendConversation : AstConversationStatement
    {
        
        protected static string _rule = "send_conversation\r\n\t : SEND  ON  CONVERSATION  conversation_handle = string_local" +
            "_id  MESSAGE  TYPE  messageTypeName = expression  (LR_BRACKET  messageBodyEexpre" +
            "ssion = string_local_id  RR_BRACKET)?  SEMI?";
        
        internal AstSendConversation(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSendConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSendConversation(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSendConversation(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSendConversation(this);
        }
        
        /// <summary>
        ///  : 
        ///    SEND ON CONVERSATION conversation_handle=string_local_id MESSAGE TYPE messageTypeName=expression ( messageBodyEexpression=string_local_id ) SEMI? 
        /// </summary>
        public static AstSendConversation SendConversation(AstStringLocalId conversationHandle, AstExpression messageTypeName, AstStringLocalId messageBodyEexpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSendConversation result = new AstSendConversation(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// data_type
    /// 	 : scaled = data_type_scaled  LR_BRACKET  MAX  RR_BRACKET
    /// 	 | ext_type_id  LR_BRACKET  decimal_scale_prec  RR_BRACKET
    /// 	 | ext_type_id  LR_BRACKET  scale = decimal  RR_BRACKET
    /// 	 | ext_type_id  IDENTITY  (LR_BRACKET  identity_seed  RR_BRACKET)?
    /// 	 | double_prec = DOUBLE  PRECISION?
    /// 	 | unscaled_type_id
    /// </summary>
    public partial class AstDataType : AstRule
    {
        
        protected static string _rule = @"data_type
	 : scaled = data_type_scaled  LR_BRACKET  MAX  RR_BRACKET
	 | ext_type_id  LR_BRACKET  decimal_scale_prec  RR_BRACKET
	 | ext_type_id  LR_BRACKET  scale = decimal  RR_BRACKET
	 | ext_type_id  IDENTITY  (LR_BRACKET  identity_seed  RR_BRACKET)?
	 | double_prec = DOUBLE  PRECISION?
	 | unscaled_type_id";
        
        internal AstDataType(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDataType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDataType(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDataType(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDataType(this);
        }
        
        /// <summary>
        ///  : 
        ///    scaled=data_type_scaled ( MAX ) 
        /// </summary>
        public static AstDataType DataType(AstDataTypeScaled scaled)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDataType result = new AstDataType(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ext_type_id ( decimal_scale_prec ) 
        /// </summary>
        public static AstDataType DataType(AstExtTypeId extTypeId, AstDecimalScalePrec decimalScalePrec)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDataType result = new AstDataType(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ext_type_id ( scale=decimal ) 
        /// </summary>
        public static AstDataType DataType(AstExtTypeId extTypeId, AstDecimal scale)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDataType result = new AstDataType(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    ext_type_id IDENTITY ( identity_seed ) 
        /// </summary>
        public static AstDataType DataType(AstExtTypeId extTypeId, AstIdentitySeed identitySeed)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDataType result = new AstDataType(arguments);
            return result;
        }
        
        /// <summary>
        /// unscaled_type_id : 
        ///    unscaled_type_id 
        /// </summary>
        public static AstDataType DataType(AstUnscaledTypeId unscaledTypeId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDataType result = new AstDataType(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// default_value
    /// 	 : NULL_
    /// 	 | DEFAULT
    /// 	 | constant
    /// </summary>
    public partial class AstDefaultValue : AstRule
    {
        
        protected static string _rule = "default_value\r\n\t : NULL_\r\n\t | DEFAULT\r\n\t | constant";
        
        internal AstDefaultValue(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDefaultValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDefaultValue(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDefaultValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDefaultValue(this);
        }
        
        /// <summary>
        /// constant : 
        ///    constant 
        /// </summary>
        public static AstDefaultValue DefaultValue(AstConstant constant)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDefaultValue result = new AstDefaultValue(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// constant
    /// 	 : stringtext
    /// 	 | binary_
    /// 	 | sign?  decimal
    /// 	 | sign?  (real | float)
    /// 	 | sign?  dollar = DOLLAR  (decimal | float)
    /// 	 | parameter
    /// </summary>
    public partial class AstConstant : AstRule
    {
        
        protected static string _rule = "constant\r\n\t : stringtext\r\n\t | binary_\r\n\t | sign?  decimal\r\n\t | sign?  (real | flo" +
            "at)\r\n\t | sign?  dollar = DOLLAR  (decimal | float)\r\n\t | parameter";
        
        internal AstConstant(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstConstant(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstConstant(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstConstant(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConstant(this);
        }
        
        /// <summary>
        /// stringtext : 
        ///    stringtext 
        /// </summary>
        public static AstConstant Constant(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstant result = new AstConstant(arguments);
            return result;
        }
        
        /// <summary>
        /// binary_ : 
        ///    binary_ 
        /// </summary>
        public static AstConstant Constant(AstBinary binary)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstant result = new AstConstant(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    sign? decimal 
        /// </summary>
        public static AstConstant Constant(AstSign sign, AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstant result = new AstConstant(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    sign? real 
        /// </summary>
        public static AstConstant Constant(AstSign sign, AstReal real)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstant result = new AstConstant(arguments);
            return result;
        }
        
        /// <summary>
        ///  : 
        ///    sign? float 
        /// </summary>
        public static AstConstant Constant(AstSign sign, AstFloat @float)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstant result = new AstConstant(arguments);
            return result;
        }
        
        /// <summary>
        /// parameter : 
        ///    parameter 
        /// </summary>
        public static AstConstant Constant(AstParameter parameter)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstant result = new AstConstant(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// string_id2
    /// 	 : stringtext
    /// 	 | id_
    /// 	 | local_id
    /// </summary>
    public partial class AstStringId2 : AstRule
    {
        
        protected static string _rule = "string_id2\r\n\t : stringtext\r\n\t | id_\r\n\t | local_id";
        
        internal AstStringId2(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstStringId2(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstStringId2(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstStringId2(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStringId2(this);
        }
        
        /// <summary>
        /// stringtext : 
        ///    stringtext 
        /// </summary>
        public static AstStringId2 StringId2(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstStringId2 result = new AstStringId2(arguments);
            return result;
        }
        
        /// <summary>
        /// id_ : 
        ///    id_ 
        /// </summary>
        public static AstStringId2 StringId2(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstStringId2 result = new AstStringId2(arguments);
            return result;
        }
        
        /// <summary>
        /// local_id : 
        ///    local_id 
        /// </summary>
        public static AstStringId2 StringId2(AstLocalId localId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstStringId2 result = new AstStringId2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// all_server_database
    /// 	 : ALL  SERVER
    /// 	 | DATABASE
    /// </summary>
    public partial class AstAllServerDatabase : AstRule
    {
        
        protected static string _rule = "all_server_database\r\n\t : ALL  SERVER\r\n\t | DATABASE";
        
        internal AstAllServerDatabase(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAllServerDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAllServerDatabase(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAllServerDatabase(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAllServerDatabase(this);
        }
    }
    
    /// <summary>
    /// encryption_state
    /// 	 : ENCRYPTION  EQUAL  (DISABLED | SUPPORTED | REQUIRED)
    /// </summary>
    public partial class AstEncryptionState : AstRule
    {
        
        protected static string _rule = "encryption_state\r\n\t : ENCRYPTION  EQUAL  (DISABLED | SUPPORTED | REQUIRED)";
        
        internal AstEncryptionState(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstEncryptionState(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstEncryptionState(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstEncryptionState(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEncryptionState(this);
        }
    }
    
    /// <summary>
    /// parameterization_option
    /// 	 : PARAMETERIZATION  (SIMPLE | FORCED)
    /// </summary>
    public partial class AstParameterizationOption : AstRule
    {
        
        protected static string _rule = "parameterization_option\r\n\t : PARAMETERIZATION  (SIMPLE | FORCED)";
        
        internal AstParameterizationOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstParameterizationOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstParameterizationOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstParameterizationOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitParameterizationOption(this);
        }
    }
    
    /// <summary>
    /// event_session_predicate_leaf_ope
    /// 	 : EQUAL
    /// 	 | (LESS  GREATER)
    /// 	 | (EXCLAMATION  EQUAL)
    /// 	 | GREATER
    /// 	 | (GREATER  EQUAL)
    /// 	 | LESS
    /// 	 | LESS  EQUAL
    /// </summary>
    public partial class AstEventSessionPredicateLeafOpe : AstRule
    {
        
        protected static string _rule = "event_session_predicate_leaf_ope\r\n\t : EQUAL\r\n\t | (LESS  GREATER)\r\n\t | (EXCLAMATIO" +
            "N  EQUAL)\r\n\t | GREATER\r\n\t | (GREATER  EQUAL)\r\n\t | LESS\r\n\t | LESS  EQUAL";
        
        internal AstEventSessionPredicateLeafOpe(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstEventSessionPredicateLeafOpe(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstEventSessionPredicateLeafOpe(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstEventSessionPredicateLeafOpe(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionPredicateLeafOpe(this);
        }
    }
    
    /// <summary>
    /// cycle
    /// 	 : CYCLE
    /// 	 | NO  CYCLE
    /// </summary>
    public partial class AstCycle : AstRule
    {
        
        protected static string _rule = "cycle\r\n\t : CYCLE\r\n\t | NO  CYCLE";
        
        internal AstCycle(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCycle(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCycle(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCycle(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCycle(this);
        }
    }
    
    /// <summary>
    /// size_value
    /// 	 : decimal  MB
    /// 	 | DEFAULT
    /// </summary>
    public partial class AstSizeValue : AstRule
    {
        
        protected static string _rule = "size_value\r\n\t : decimal  MB\r\n\t | DEFAULT";
        
        internal AstSizeValue(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSizeValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSizeValue(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSizeValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSizeValue(this);
        }
        
        /// <summary>
        ///  : 
        ///    decimal MB 
        /// </summary>
        public static AstSizeValue SizeValue(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSizeValue result = new AstSizeValue(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// decimal_default
    /// 	 : decimal
    /// 	 | DEFAULT
    /// </summary>
    public partial class AstDecimalDefault : AstRule
    {
        
        protected static string _rule = "decimal_default\r\n\t : decimal\r\n\t | DEFAULT";
        
        internal AstDecimalDefault(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDecimalDefault(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDecimalDefault(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDecimalDefault(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecimalDefault(this);
        }
        
        /// <summary>
        /// decimal : 
        ///    decimal 
        /// </summary>
        public static AstDecimalDefault DecimalDefault(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDecimalDefault result = new AstDecimalDefault(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// on_delete
    /// 	 : ON  DELETE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)
    /// </summary>
    public partial class AstOnDelete : AstConstraintDeleteOrUpdate
    {
        
        protected static string _rule = "on_delete\r\n\t : ON  DELETE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)";
        
        internal AstOnDelete(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstOnDelete(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstOnDelete(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstOnDelete(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnDelete(this);
        }
    }
    
    /// <summary>
    /// on_update
    /// 	 : ON  UPDATE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)
    /// </summary>
    public partial class AstOnUpdate : AstConstraintDeleteOrUpdate
    {
        
        protected static string _rule = "on_update\r\n\t : ON  UPDATE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)";
        
        internal AstOnUpdate(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstOnUpdate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstOnUpdate(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstOnUpdate(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnUpdate(this);
        }
    }
    
    /// <summary>
    /// updated_asterisk
    /// 	 : (INSERTED | DELETED)  DOT  STAR
    /// </summary>
    public partial class AstUpdatedAsterisk : AstSelectListElem
    {
        
        protected static string _rule = "updated_asterisk\r\n\t : (INSERTED | DELETED)  DOT  STAR";
        
        internal AstUpdatedAsterisk(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstUpdatedAsterisk(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstUpdatedAsterisk(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstUpdatedAsterisk(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdatedAsterisk(this);
        }
    }
    
    /// <summary>
    /// null_notnull
    /// 	 : NOT?  NULL_
    /// </summary>
    public partial class AstNullNotnull : AstRule
    {
        
        protected static string _rule = "null_notnull\r\n\t : NOT?  NULL_";
        
        internal AstNullNotnull(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstNullNotnull(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstNullNotnull(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstNullNotnull(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNullNotnull(this);
        }
    }
    
    /// <summary>
    /// comparison_operator
    /// 	 : EQUAL
    /// 	 | GREATER
    /// 	 | LESS
    /// 	 | LESS  EQUAL
    /// 	 | GREATER  EQUAL
    /// 	 | LESS  GREATER
    /// 	 | EXCLAMATION  EQUAL
    /// 	 | EXCLAMATION  GREATER
    /// 	 | EXCLAMATION  LESS
    /// </summary>
    public partial class AstComparisonOperator : AstRule
    {
        
        protected static string _rule = "comparison_operator\r\n\t : EQUAL\r\n\t | GREATER\r\n\t | LESS\r\n\t | LESS  EQUAL\r\n\t | GREAT" +
            "ER  EQUAL\r\n\t | LESS  GREATER\r\n\t | EXCLAMATION  EQUAL\r\n\t | EXCLAMATION  GREATER\r\n" +
            "\t | EXCLAMATION  LESS";
        
        internal AstComparisonOperator(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstComparisonOperator(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstComparisonOperator(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstComparisonOperator(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitComparisonOperator(this);
        }
    }
    
    /// <summary>
    /// assignment_operator
    /// 	 : PLUS_ASSIGN
    /// 	 | MINUS_ASSIGN
    /// 	 | MULT_ASSIGN
    /// 	 | DIV_ASSIGN
    /// 	 | MOD_ASSIGN
    /// 	 | AND_ASSIGN
    /// 	 | XOR_ASSIGN
    /// 	 | OR_ASSIGN
    /// </summary>
    public partial class AstAssignmentOperator : AstRule
    {
        
        protected static string _rule = "assignment_operator\r\n\t : PLUS_ASSIGN\r\n\t | MINUS_ASSIGN\r\n\t | MULT_ASSIGN\r\n\t | DIV_" +
            "ASSIGN\r\n\t | MOD_ASSIGN\r\n\t | AND_ASSIGN\r\n\t | XOR_ASSIGN\r\n\t | OR_ASSIGN";
        
        internal AstAssignmentOperator(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAssignmentOperator(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAssignmentOperator(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAssignmentOperator(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAssignmentOperator(this);
        }
    }
}
