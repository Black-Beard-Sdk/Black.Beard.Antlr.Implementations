#nullable disable
// Generated by Models.Defaults : mardi 11 avril 2023
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Asts.TSql
{
    using System;
    using Bb.Parsers;
    using Antlr4.Runtime;
    using Antlr4.Runtime.Tree;
    
    
    /// <summary>
    /// t_root
    /// 	 : batchs  EOF
    /// 	 | execute_body_batch  go_statements  EOF
    /// </summary>
    public abstract partial class AstTRoot : AstRule
    {
        
        protected static string _rule = "t_root\r\n\t : batchs  EOF\r\n\t | execute_body_batch  go_statements  EOF";
        
        /// <summary>
        /// t_root : batchs  EOF
        /// </summary>
        public partial class AstTRoot1 : AstTRoot
        {
            
            internal AstTRoot1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTRoot1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTRoot1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTRoot1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTRoot(this);
            }
        }
        /// <summary>
        /// t_root : execute_body_batch  go_statements  EOF
        /// </summary>
        public partial class AstTRoot2 : AstTRoot
        {
            
            internal AstTRoot2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTRoot2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTRoot2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTRoot2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTRoot(this);
            }
        }
        

        
        internal AstTRoot(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstTRoot(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTRoot(Position p) : 
                base(p)
        {
        }
        
        internal AstTRoot(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTRoot Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTRoot.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstExecuteBodyBatch), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstGoStatements), false, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstBatchs), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// t_root : 
        ///    batchs 
        /// </summary>
        public static AstTRoot TRoot(AstBatchs batchs)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTRoot.AstTRoot1 result = new AstTRoot.AstTRoot1(arguments);
            return result;
        }
        
        /// <summary>
        /// t_root : 
        ///    execute_body_batch go_statements 
        /// </summary>
        public static AstTRoot TRoot(AstExecuteBodyBatch executeBodyBatch, AstGoStatements goStatements)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTRoot.AstTRoot2 result = new AstTRoot.AstTRoot2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// batch
    /// 	 : go_statement
    /// 	 | execute_body_batch
    /// 	 | sql_clauses
    /// 	 | batch_level_statement
    /// </summary>
    public abstract partial class AstBatch : AstRule
    {
        
        protected static string _rule = "batch\r\n\t : go_statement\r\n\t | execute_body_batch\r\n\t | sql_clauses\r\n\t | batch_level" +
            "_statement";
        
        /// <summary>
        /// batch : go_statement
        /// </summary>
        public partial class AstBatch1 : AstBatch
        {
            
            internal AstBatch1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBatch1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBatch1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBatch1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBatch(this);
            }
        }
        /// <summary>
        /// batch : execute_body_batch
        /// </summary>
        public partial class AstBatch2 : AstBatch
        {
            
            internal AstBatch2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBatch2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBatch2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBatch2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBatch(this);
            }
        }
        /// <summary>
        /// batch : sql_clauses
        /// </summary>
        public partial class AstBatch3 : AstBatch
        {
            
            internal AstBatch3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBatch3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBatch3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBatch3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBatch(this);
            }
        }
        /// <summary>
        /// batch : batch_level_statement
        /// </summary>
        public partial class AstBatch4 : AstBatch
        {
            
            internal AstBatch4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBatch4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBatch4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBatch4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBatch(this);
            }
        }
        

        
        internal AstBatch(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstBatch(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBatch(Position p) : 
                base(p)
        {
        }
        
        internal AstBatch(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstBatch Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstBatch.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstGoStatement), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstExecuteBodyBatch), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstSqlClauses), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstBatchLevelStatement), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// batch : 
        ///    go_statement 
        /// </summary>
        public static AstBatch Batch(AstGoStatement goStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBatch.AstBatch1 result = new AstBatch.AstBatch1(arguments);
            return result;
        }
        
        /// <summary>
        /// batch : 
        ///    execute_body_batch 
        /// </summary>
        public static AstBatch Batch(AstExecuteBodyBatch executeBodyBatch)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBatch.AstBatch2 result = new AstBatch.AstBatch2(arguments);
            return result;
        }
        
        /// <summary>
        /// batch : 
        ///    sql_clauses 
        /// </summary>
        public static AstBatch Batch(AstSqlClauses sqlClauses)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBatch.AstBatch3 result = new AstBatch.AstBatch3(arguments);
            return result;
        }
        
        /// <summary>
        /// batch : 
        ///    batch_level_statement 
        /// </summary>
        public static AstBatch Batch(AstBatchLevelStatement batchLevelStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBatch.AstBatch4 result = new AstBatch.AstBatch4(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// batch_level_statement
    /// 	 : create_or_alter_function
    /// 	 | create_or_alter_procedure
    /// 	 | create_or_alter_trigger
    /// 	 | create_view
    /// </summary>
    public abstract partial class AstBatchLevelStatement : AstRule
    {
        
        protected static string _rule = "batch_level_statement\r\n\t : create_or_alter_function\r\n\t | create_or_alter_procedur" +
            "e\r\n\t | create_or_alter_trigger\r\n\t | create_view";
        
        /// <summary>
        /// batch_level_statement : create_or_alter_function
        /// </summary>
        public partial class AstBatchLevelStatement1 : AstBatchLevelStatement
        {
            
            internal AstBatchLevelStatement1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBatchLevelStatement1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBatchLevelStatement1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBatchLevelStatement1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBatchLevelStatement(this);
            }
        }
        /// <summary>
        /// batch_level_statement : create_or_alter_procedure
        /// </summary>
        public partial class AstBatchLevelStatement2 : AstBatchLevelStatement
        {
            
            internal AstBatchLevelStatement2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBatchLevelStatement2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBatchLevelStatement2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBatchLevelStatement2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBatchLevelStatement(this);
            }
        }
        /// <summary>
        /// batch_level_statement : create_or_alter_trigger
        /// </summary>
        public partial class AstBatchLevelStatement3 : AstBatchLevelStatement
        {
            
            internal AstBatchLevelStatement3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBatchLevelStatement3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBatchLevelStatement3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBatchLevelStatement3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBatchLevelStatement(this);
            }
        }
        /// <summary>
        /// batch_level_statement : create_view
        /// </summary>
        public partial class AstBatchLevelStatement4 : AstBatchLevelStatement
        {
            
            internal AstBatchLevelStatement4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBatchLevelStatement4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBatchLevelStatement4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBatchLevelStatement4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBatchLevelStatement(this);
            }
        }
        

        
        internal AstBatchLevelStatement(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstBatchLevelStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBatchLevelStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstBatchLevelStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstBatchLevelStatement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstBatchLevelStatement.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstCreateOrAlterFunction), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateOrAlterProcedure), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateOrAlterTrigger), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateView), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// batch_level_statement : 
        ///    create_or_alter_function 
        /// </summary>
        public static AstBatchLevelStatement BatchLevelStatement(AstCreateOrAlterFunction createOrAlterFunction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBatchLevelStatement.AstBatchLevelStatement1 result = new AstBatchLevelStatement.AstBatchLevelStatement1(arguments);
            return result;
        }
        
        /// <summary>
        /// batch_level_statement : 
        ///    create_or_alter_procedure 
        /// </summary>
        public static AstBatchLevelStatement BatchLevelStatement(AstCreateOrAlterProcedure createOrAlterProcedure)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBatchLevelStatement.AstBatchLevelStatement2 result = new AstBatchLevelStatement.AstBatchLevelStatement2(arguments);
            return result;
        }
        
        /// <summary>
        /// batch_level_statement : 
        ///    create_or_alter_trigger 
        /// </summary>
        public static AstBatchLevelStatement BatchLevelStatement(AstCreateOrAlterTrigger createOrAlterTrigger)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBatchLevelStatement.AstBatchLevelStatement3 result = new AstBatchLevelStatement.AstBatchLevelStatement3(arguments);
            return result;
        }
        
        /// <summary>
        /// batch_level_statement : 
        ///    create_view 
        /// </summary>
        public static AstBatchLevelStatement BatchLevelStatement(AstCreateView createView)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBatchLevelStatement.AstBatchLevelStatement4 result = new AstBatchLevelStatement.AstBatchLevelStatement4(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// sql_clause
    /// 	 : dml_clause
    /// 	 | cfl_statement
    /// 	 | another_statement
    /// 	 | ddl_clause
    /// 	 | dbcc_special
    /// 	 | dbcc_clause
    /// 	 | backup_statement
    /// </summary>
    public abstract partial class AstSqlClause : AstRule
    {
        
        protected static string _rule = "sql_clause\r\n\t : dml_clause\r\n\t | cfl_statement\r\n\t | another_statement\r\n\t | ddl_cla" +
            "use\r\n\t | dbcc_special\r\n\t | dbcc_clause\r\n\t | backup_statement";
        
        /// <summary>
        /// sql_clause : dml_clause
        /// </summary>
        public partial class AstSqlClause1 : AstSqlClause
        {
            
            internal AstSqlClause1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSqlClause1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSqlClause1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSqlClause1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : cfl_statement
        /// </summary>
        public partial class AstSqlClause2 : AstSqlClause
        {
            
            internal AstSqlClause2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSqlClause2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSqlClause2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSqlClause2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : another_statement
        /// </summary>
        public partial class AstSqlClause3 : AstSqlClause
        {
            
            internal AstSqlClause3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSqlClause3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSqlClause3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSqlClause3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : ddl_clause
        /// </summary>
        public partial class AstSqlClause4 : AstSqlClause
        {
            
            internal AstSqlClause4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSqlClause4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSqlClause4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSqlClause4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : dbcc_special
        /// </summary>
        public partial class AstSqlClause5 : AstSqlClause
        {
            
            internal AstSqlClause5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSqlClause5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSqlClause5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSqlClause5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : dbcc_clause
        /// </summary>
        public partial class AstSqlClause6 : AstSqlClause
        {
            
            internal AstSqlClause6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSqlClause6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSqlClause6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSqlClause6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : backup_statement
        /// </summary>
        public partial class AstSqlClause7 : AstSqlClause
        {
            
            internal AstSqlClause7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSqlClause7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSqlClause7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSqlClause7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        

        
        internal AstSqlClause(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstSqlClause(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSqlClause(Position p) : 
                base(p)
        {
        }
        
        internal AstSqlClause(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSqlClause Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSqlClause.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDmlClause), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstCflStatement), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstAnotherStatement), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstDdlClause), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstDbccSpecial), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstDbccClause), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstBackupStatement), false, false))
                {
                    return 7;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    dml_clause 
        /// </summary>
        public static AstSqlClause SqlClause(AstDmlClause dmlClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSqlClause.AstSqlClause1 result = new AstSqlClause.AstSqlClause1(arguments);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    cfl_statement 
        /// </summary>
        public static AstSqlClause SqlClause(AstCflStatement cflStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSqlClause.AstSqlClause2 result = new AstSqlClause.AstSqlClause2(arguments);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    another_statement 
        /// </summary>
        public static AstSqlClause SqlClause(AstAnotherStatement anotherStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSqlClause.AstSqlClause3 result = new AstSqlClause.AstSqlClause3(arguments);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    ddl_clause 
        /// </summary>
        public static AstSqlClause SqlClause(AstDdlClause ddlClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSqlClause.AstSqlClause4 result = new AstSqlClause.AstSqlClause4(arguments);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    dbcc_special 
        /// </summary>
        public static AstSqlClause SqlClause(AstDbccSpecial dbccSpecial)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSqlClause.AstSqlClause5 result = new AstSqlClause.AstSqlClause5(arguments);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    dbcc_clause 
        /// </summary>
        public static AstSqlClause SqlClause(AstDbccClause dbccClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSqlClause.AstSqlClause6 result = new AstSqlClause.AstSqlClause6(arguments);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    backup_statement 
        /// </summary>
        public static AstSqlClause SqlClause(AstBackupStatement backupStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSqlClause.AstSqlClause7 result = new AstSqlClause.AstSqlClause7(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// dml_clause
    /// 	 : merge_statement
    /// 	 | delete_statement
    /// 	 | insert_statement
    /// 	 | select_statement_standalone
    /// 	 | update_statement
    /// </summary>
    public abstract partial class AstDmlClause : AstRule
    {
        
        protected static string _rule = "dml_clause\r\n\t : merge_statement\r\n\t | delete_statement\r\n\t | insert_statement\r\n\t | " +
            "select_statement_standalone\r\n\t | update_statement";
        
        /// <summary>
        /// dml_clause : merge_statement
        /// </summary>
        public partial class AstDmlClause1 : AstDmlClause
        {
            
            internal AstDmlClause1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDmlClause1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDmlClause1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDmlClause1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDmlClause(this);
            }
        }
        /// <summary>
        /// dml_clause : delete_statement
        /// </summary>
        public partial class AstDmlClause2 : AstDmlClause
        {
            
            internal AstDmlClause2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDmlClause2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDmlClause2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDmlClause2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDmlClause(this);
            }
        }
        /// <summary>
        /// dml_clause : insert_statement
        /// </summary>
        public partial class AstDmlClause3 : AstDmlClause
        {
            
            internal AstDmlClause3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDmlClause3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDmlClause3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDmlClause3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDmlClause(this);
            }
        }
        /// <summary>
        /// dml_clause : select_statement_standalone
        /// </summary>
        public partial class AstDmlClause4 : AstDmlClause
        {
            
            internal AstDmlClause4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDmlClause4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDmlClause4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDmlClause4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDmlClause(this);
            }
        }
        /// <summary>
        /// dml_clause : update_statement
        /// </summary>
        public partial class AstDmlClause5 : AstDmlClause
        {
            
            internal AstDmlClause5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDmlClause5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDmlClause5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDmlClause5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDmlClause(this);
            }
        }
        

        
        internal AstDmlClause(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstDmlClause(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDmlClause(Position p) : 
                base(p)
        {
        }
        
        internal AstDmlClause(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDmlClause Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDmlClause.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstMergeStatement), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDeleteStatement), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstInsertStatement), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstSelectStatementStandalone), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstUpdateStatement), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// dml_clause : 
        ///    merge_statement 
        /// </summary>
        public static AstDmlClause DmlClause(AstMergeStatement mergeStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDmlClause.AstDmlClause1 result = new AstDmlClause.AstDmlClause1(arguments);
            return result;
        }
        
        /// <summary>
        /// dml_clause : 
        ///    delete_statement 
        /// </summary>
        public static AstDmlClause DmlClause(AstDeleteStatement deleteStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDmlClause.AstDmlClause2 result = new AstDmlClause.AstDmlClause2(arguments);
            return result;
        }
        
        /// <summary>
        /// dml_clause : 
        ///    insert_statement 
        /// </summary>
        public static AstDmlClause DmlClause(AstInsertStatement insertStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDmlClause.AstDmlClause3 result = new AstDmlClause.AstDmlClause3(arguments);
            return result;
        }
        
        /// <summary>
        /// dml_clause : 
        ///    select_statement_standalone 
        /// </summary>
        public static AstDmlClause DmlClause(AstSelectStatementStandalone selectStatementStandalone)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDmlClause.AstDmlClause4 result = new AstDmlClause.AstDmlClause4(arguments);
            return result;
        }
        
        /// <summary>
        /// dml_clause : 
        ///    update_statement 
        /// </summary>
        public static AstDmlClause DmlClause(AstUpdateStatement updateStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDmlClause.AstDmlClause5 result = new AstDmlClause.AstDmlClause5(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// ddl_clause
    /// 	 : alter_application_role
    /// 	 | alter_assembly
    /// 	 | alter_asymmetric_key
    /// 	 | alter_authorization
    /// 	 | alter_authorization_for_azure_dw
    /// 	 | alter_authorization_for_parallel_dw
    /// 	 | alter_authorization_for_sql_database
    /// 	 | alter_availability_group
    /// 	 | alter_certificate
    /// 	 | alter_column_encryption_key
    /// 	 | alter_credential
    /// 	 | alter_cryptographic_provider
    /// 	 | alter_database
    /// 	 | alter_db_role
    /// 	 | alter_endpoint
    /// 	 | create_or_alter_event_session
    /// 	 | alter_external_data_source
    /// 	 | alter_external_library
    /// 	 | alter_external_resource_pool
    /// 	 | alter_fulltext_catalog
    /// 	 | alter_fulltext_stoplist
    /// 	 | alter_index
    /// 	 | alter_login_azure_sql
    /// 	 | alter_login_azure_sql_dw_and_pdw
    /// 	 | alter_login_sql_server
    /// 	 | alter_master_key_azure_sql
    /// 	 | alter_master_key_sql_server
    /// 	 | alter_message_type
    /// 	 | alter_partition_function
    /// 	 | alter_partition_scheme
    /// 	 | alter_remote_service_binding
    /// 	 | alter_resource_governor
    /// 	 | alter_schema_azure_sql_dw_and_pdw
    /// 	 | alter_schema_sql
    /// 	 | alter_sequence
    /// 	 | alter_server_audit
    /// 	 | alter_server_audit_specification
    /// 	 | alter_server_configuration
    /// 	 | alter_server_role
    /// 	 | alter_server_role_pdw
    /// 	 | alter_service
    /// 	 | alter_service_master_key
    /// 	 | alter_symmetric_key
    /// 	 | alter_table
    /// 	 | alter_user
    /// 	 | alter_user_azure_sql
    /// 	 | alter_workload_group
    /// 	 | create_application_role
    /// 	 | create_assembly
    /// 	 | create_asymmetric_key
    /// 	 | create_column_encryption_key
    /// 	 | create_column_master_key
    /// 	 | create_credential
    /// 	 | create_cryptographic_provider
    /// 	 | create_database
    /// 	 | create_db_role
    /// 	 | create_event_notification
    /// 	 | create_external_library
    /// 	 | create_external_resource_pool
    /// 	 | create_fulltext_catalog
    /// 	 | create_fulltext_stoplist
    /// 	 | create_index
    /// 	 | create_columnstore_index
    /// 	 | create_nonclustered_columnstore_index
    /// 	 | create_login_azure_sql
    /// 	 | create_login_pdw
    /// 	 | create_login_sql_server
    /// 	 | create_master_key_azure_sql
    /// 	 | create_master_key_sql_server
    /// 	 | create_or_alter_broker_priority
    /// 	 | create_remote_service_binding
    /// 	 | create_resource_pool
    /// 	 | create_route
    /// 	 | create_rule
    /// 	 | create_schema
    /// 	 | create_schema_azure_sql_dw_and_pdw
    /// 	 | create_search_property_list
    /// 	 | create_security_policy
    /// 	 | create_sequence
    /// 	 | create_server_audit
    /// 	 | create_server_audit_specification
    /// 	 | create_server_role
    /// 	 | create_service
    /// 	 | create_statistics
    /// 	 | create_synonym
    /// 	 | create_table
    /// 	 | create_type
    /// 	 | create_user
    /// 	 | create_user_azure_sql_dw
    /// 	 | create_workload_group
    /// 	 | create_xml_index
    /// 	 | create_xml_schema_collection
    /// 	 | create_partition_function
    /// 	 | create_partition_scheme
    /// 	 | drop_aggregate
    /// 	 | drop_application_role
    /// 	 | drop_assembly
    /// 	 | drop_asymmetric_key
    /// 	 | drop_availability_group
    /// 	 | drop_broker_priority
    /// 	 | drop_certificate
    /// 	 | drop_column_encryption_key
    /// 	 | drop_column_master_key
    /// 	 | drop_contract
    /// 	 | drop_credential
    /// 	 | drop_cryptograhic_provider
    /// 	 | drop_database
    /// 	 | drop_database_audit_specification
    /// 	 | drop_database_encryption_key
    /// 	 | drop_database_scoped_credential
    /// 	 | drop_db_role
    /// 	 | drop_default
    /// 	 | drop_endpoint
    /// 	 | drop_event_notifications
    /// 	 | drop_event_session
    /// 	 | drop_external_data_source
    /// 	 | drop_external_file_format
    /// 	 | drop_external_library
    /// 	 | drop_external_resource_pool
    /// 	 | drop_external_table
    /// 	 | drop_fulltext_catalog
    /// 	 | drop_fulltext_index
    /// 	 | drop_fulltext_stoplist
    /// 	 | drop_function
    /// 	 | drop_index
    /// 	 | drop_login
    /// 	 | drop_master_key
    /// 	 | drop_message_type
    /// 	 | drop_partition_function
    /// 	 | drop_partition_scheme
    /// 	 | drop_procedure
    /// 	 | drop_queue
    /// 	 | drop_remote_service_binding
    /// 	 | drop_resource_pool
    /// 	 | drop_route
    /// 	 | drop_rule
    /// 	 | drop_schema
    /// 	 | drop_search_property_list
    /// 	 | drop_security_policy
    /// 	 | drop_sequence
    /// 	 | drop_server_audit
    /// 	 | drop_server_audit_specification
    /// 	 | drop_server_role
    /// 	 | drop_service
    /// 	 | drop_signature
    /// 	 | drop_statistics
    /// 	 | drop_statistics_id_azure_dw_and_pdw
    /// 	 | drop_symmetric_key
    /// 	 | drop_synonym
    /// 	 | drop_table
    /// 	 | drop_trigger
    /// 	 | drop_type
    /// 	 | drop_user
    /// 	 | drop_view
    /// 	 | drop_workload_group
    /// 	 | drop_xml_schema_collection
    /// 	 | disable_trigger
    /// 	 | enable_trigger
    /// 	 | lock_table
    /// 	 | truncate_table
    /// 	 | update_statistics
    /// </summary>
    public abstract partial class AstDdlClause : AstRule
    {
        
        protected static string _rule = "ddl_clause\r\n\t : alter_application_role\r\n\t | alter_assembly\r\n\t | alter_asymmetric_" +
            "key\r\n\t | alter_authorization\r\n\t | alter_authorization_for_azure_dw\r\n\t | alter_au" +
            "thorization_for_parallel_dw\r\n\t | alter_authorization_for_sql_database\r\n\t | alter" +
            "_availability_group\r\n\t | alter_certificate\r\n\t | alter_column_encryption_key\r\n\t |" +
            " alter_credential\r\n\t | alter_cryptographic_provider\r\n\t | alter_database\r\n\t | alt" +
            "er_db_role\r\n\t | alter_endpoint\r\n\t | create_or_alter_event_session\r\n\t | alter_ext" +
            "ernal_data_source\r\n\t | alter_external_library\r\n\t | alter_external_resource_pool\r" +
            "\n\t | alter_fulltext_catalog\r\n\t | alter_fulltext_stoplist\r\n\t | alter_index\r\n\t | a" +
            "lter_login_azure_sql\r\n\t | alter_login_azure_sql_dw_and_pdw\r\n\t | alter_login_sql_" +
            "server\r\n\t | alter_master_key_azure_sql\r\n\t | alter_master_key_sql_server\r\n\t | alt" +
            "er_message_type\r\n\t | alter_partition_function\r\n\t | alter_partition_scheme\r\n\t | a" +
            "lter_remote_service_binding\r\n\t | alter_resource_governor\r\n\t | alter_schema_azure" +
            "_sql_dw_and_pdw\r\n\t | alter_schema_sql\r\n\t | alter_sequence\r\n\t | alter_server_audi" +
            "t\r\n\t | alter_server_audit_specification\r\n\t | alter_server_configuration\r\n\t | alt" +
            "er_server_role\r\n\t | alter_server_role_pdw\r\n\t | alter_service\r\n\t | alter_service_" +
            "master_key\r\n\t | alter_symmetric_key\r\n\t | alter_table\r\n\t | alter_user\r\n\t | alter_" +
            "user_azure_sql\r\n\t | alter_workload_group\r\n\t | create_application_role\r\n\t | creat" +
            "e_assembly\r\n\t | create_asymmetric_key\r\n\t | create_column_encryption_key\r\n\t | cre" +
            "ate_column_master_key\r\n\t | create_credential\r\n\t | create_cryptographic_provider\r" +
            "\n\t | create_database\r\n\t | create_db_role\r\n\t | create_event_notification\r\n\t | cre" +
            "ate_external_library\r\n\t | create_external_resource_pool\r\n\t | create_fulltext_cat" +
            "alog\r\n\t | create_fulltext_stoplist\r\n\t | create_index\r\n\t | create_columnstore_ind" +
            "ex\r\n\t | create_nonclustered_columnstore_index\r\n\t | create_login_azure_sql\r\n\t | c" +
            "reate_login_pdw\r\n\t | create_login_sql_server\r\n\t | create_master_key_azure_sql\r\n\t" +
            " | create_master_key_sql_server\r\n\t | create_or_alter_broker_priority\r\n\t | create" +
            "_remote_service_binding\r\n\t | create_resource_pool\r\n\t | create_route\r\n\t | create_" +
            "rule\r\n\t | create_schema\r\n\t | create_schema_azure_sql_dw_and_pdw\r\n\t | create_sear" +
            "ch_property_list\r\n\t | create_security_policy\r\n\t | create_sequence\r\n\t | create_se" +
            "rver_audit\r\n\t | create_server_audit_specification\r\n\t | create_server_role\r\n\t | c" +
            "reate_service\r\n\t | create_statistics\r\n\t | create_synonym\r\n\t | create_table\r\n\t | " +
            "create_type\r\n\t | create_user\r\n\t | create_user_azure_sql_dw\r\n\t | create_workload_" +
            "group\r\n\t | create_xml_index\r\n\t | create_xml_schema_collection\r\n\t | create_partit" +
            "ion_function\r\n\t | create_partition_scheme\r\n\t | drop_aggregate\r\n\t | drop_applicat" +
            "ion_role\r\n\t | drop_assembly\r\n\t | drop_asymmetric_key\r\n\t | drop_availability_grou" +
            "p\r\n\t | drop_broker_priority\r\n\t | drop_certificate\r\n\t | drop_column_encryption_ke" +
            "y\r\n\t | drop_column_master_key\r\n\t | drop_contract\r\n\t | drop_credential\r\n\t | drop_" +
            "cryptograhic_provider\r\n\t | drop_database\r\n\t | drop_database_audit_specification\r" +
            "\n\t | drop_database_encryption_key\r\n\t | drop_database_scoped_credential\r\n\t | drop" +
            "_db_role\r\n\t | drop_default\r\n\t | drop_endpoint\r\n\t | drop_event_notifications\r\n\t |" +
            " drop_event_session\r\n\t | drop_external_data_source\r\n\t | drop_external_file_forma" +
            "t\r\n\t | drop_external_library\r\n\t | drop_external_resource_pool\r\n\t | drop_external" +
            "_table\r\n\t | drop_fulltext_catalog\r\n\t | drop_fulltext_index\r\n\t | drop_fulltext_st" +
            "oplist\r\n\t | drop_function\r\n\t | drop_index\r\n\t | drop_login\r\n\t | drop_master_key\r\n" +
            "\t | drop_message_type\r\n\t | drop_partition_function\r\n\t | drop_partition_scheme\r\n\t" +
            " | drop_procedure\r\n\t | drop_queue\r\n\t | drop_remote_service_binding\r\n\t | drop_res" +
            "ource_pool\r\n\t | drop_route\r\n\t | drop_rule\r\n\t | drop_schema\r\n\t | drop_search_prop" +
            "erty_list\r\n\t | drop_security_policy\r\n\t | drop_sequence\r\n\t | drop_server_audit\r\n\t" +
            " | drop_server_audit_specification\r\n\t | drop_server_role\r\n\t | drop_service\r\n\t | " +
            "drop_signature\r\n\t | drop_statistics\r\n\t | drop_statistics_id_azure_dw_and_pdw\r\n\t " +
            "| drop_symmetric_key\r\n\t | drop_synonym\r\n\t | drop_table\r\n\t | drop_trigger\r\n\t | dr" +
            "op_type\r\n\t | drop_user\r\n\t | drop_view\r\n\t | drop_workload_group\r\n\t | drop_xml_sch" +
            "ema_collection\r\n\t | disable_trigger\r\n\t | enable_trigger\r\n\t | lock_table\r\n\t | tru" +
            "ncate_table\r\n\t | update_statistics";
        
        /// <summary>
        /// ddl_clause : alter_application_role
        /// </summary>
        public partial class AstDdlClause1 : AstDdlClause
        {
            
            internal AstDdlClause1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_assembly
        /// </summary>
        public partial class AstDdlClause2 : AstDdlClause
        {
            
            internal AstDdlClause2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_asymmetric_key
        /// </summary>
        public partial class AstDdlClause3 : AstDdlClause
        {
            
            internal AstDdlClause3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_authorization
        /// </summary>
        public partial class AstDdlClause4 : AstDdlClause
        {
            
            internal AstDdlClause4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_authorization_for_azure_dw
        /// </summary>
        public partial class AstDdlClause5 : AstDdlClause
        {
            
            internal AstDdlClause5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_authorization_for_parallel_dw
        /// </summary>
        public partial class AstDdlClause6 : AstDdlClause
        {
            
            internal AstDdlClause6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_authorization_for_sql_database
        /// </summary>
        public partial class AstDdlClause7 : AstDdlClause
        {
            
            internal AstDdlClause7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_availability_group
        /// </summary>
        public partial class AstDdlClause8 : AstDdlClause
        {
            
            internal AstDdlClause8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_certificate
        /// </summary>
        public partial class AstDdlClause9 : AstDdlClause
        {
            
            internal AstDdlClause9(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause9(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause9(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause9(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_column_encryption_key
        /// </summary>
        public partial class AstDdlClause10 : AstDdlClause
        {
            
            internal AstDdlClause10(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause10(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause10(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause10(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_credential
        /// </summary>
        public partial class AstDdlClause11 : AstDdlClause
        {
            
            internal AstDdlClause11(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause11(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause11(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause11(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_cryptographic_provider
        /// </summary>
        public partial class AstDdlClause12 : AstDdlClause
        {
            
            internal AstDdlClause12(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause12(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause12(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause12(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_database
        /// </summary>
        public partial class AstDdlClause13 : AstDdlClause
        {
            
            internal AstDdlClause13(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause13(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause13(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause13(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_db_role
        /// </summary>
        public partial class AstDdlClause14 : AstDdlClause
        {
            
            internal AstDdlClause14(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause14(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause14(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause14(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_endpoint
        /// </summary>
        public partial class AstDdlClause15 : AstDdlClause
        {
            
            internal AstDdlClause15(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause15(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause15(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause15(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_or_alter_event_session
        /// </summary>
        public partial class AstDdlClause16 : AstDdlClause
        {
            
            internal AstDdlClause16(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause16(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause16(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause16(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_external_data_source
        /// </summary>
        public partial class AstDdlClause17 : AstDdlClause
        {
            
            internal AstDdlClause17(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause17(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause17(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause17(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_external_library
        /// </summary>
        public partial class AstDdlClause18 : AstDdlClause
        {
            
            internal AstDdlClause18(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause18(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause18(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause18(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_external_resource_pool
        /// </summary>
        public partial class AstDdlClause19 : AstDdlClause
        {
            
            internal AstDdlClause19(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause19(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause19(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause19(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_fulltext_catalog
        /// </summary>
        public partial class AstDdlClause20 : AstDdlClause
        {
            
            internal AstDdlClause20(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause20(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause20(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause20(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_fulltext_stoplist
        /// </summary>
        public partial class AstDdlClause21 : AstDdlClause
        {
            
            internal AstDdlClause21(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause21(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause21(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause21(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_index
        /// </summary>
        public partial class AstDdlClause22 : AstDdlClause
        {
            
            internal AstDdlClause22(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause22(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause22(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause22(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_login_azure_sql
        /// </summary>
        public partial class AstDdlClause23 : AstDdlClause
        {
            
            internal AstDdlClause23(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause23(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause23(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause23(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_login_azure_sql_dw_and_pdw
        /// </summary>
        public partial class AstDdlClause24 : AstDdlClause
        {
            
            internal AstDdlClause24(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause24(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause24(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause24(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_login_sql_server
        /// </summary>
        public partial class AstDdlClause25 : AstDdlClause
        {
            
            internal AstDdlClause25(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause25(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause25(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause25(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_master_key_azure_sql
        /// </summary>
        public partial class AstDdlClause26 : AstDdlClause
        {
            
            internal AstDdlClause26(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause26(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause26(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause26(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_master_key_sql_server
        /// </summary>
        public partial class AstDdlClause27 : AstDdlClause
        {
            
            internal AstDdlClause27(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause27(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause27(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause27(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_message_type
        /// </summary>
        public partial class AstDdlClause28 : AstDdlClause
        {
            
            internal AstDdlClause28(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause28(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause28(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause28(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_partition_function
        /// </summary>
        public partial class AstDdlClause29 : AstDdlClause
        {
            
            internal AstDdlClause29(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause29(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause29(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause29(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_partition_scheme
        /// </summary>
        public partial class AstDdlClause30 : AstDdlClause
        {
            
            internal AstDdlClause30(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause30(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause30(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause30(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_remote_service_binding
        /// </summary>
        public partial class AstDdlClause31 : AstDdlClause
        {
            
            internal AstDdlClause31(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause31(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause31(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause31(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_resource_governor
        /// </summary>
        public partial class AstDdlClause32 : AstDdlClause
        {
            
            internal AstDdlClause32(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause32(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause32(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause32(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_schema_azure_sql_dw_and_pdw
        /// </summary>
        public partial class AstDdlClause33 : AstDdlClause
        {
            
            internal AstDdlClause33(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause33(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause33(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause33(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_schema_sql
        /// </summary>
        public partial class AstDdlClause34 : AstDdlClause
        {
            
            internal AstDdlClause34(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause34(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause34(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause34(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_sequence
        /// </summary>
        public partial class AstDdlClause35 : AstDdlClause
        {
            
            internal AstDdlClause35(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause35(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause35(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause35(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_server_audit
        /// </summary>
        public partial class AstDdlClause36 : AstDdlClause
        {
            
            internal AstDdlClause36(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause36(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause36(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause36(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_server_audit_specification
        /// </summary>
        public partial class AstDdlClause37 : AstDdlClause
        {
            
            internal AstDdlClause37(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause37(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause37(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause37(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_server_configuration
        /// </summary>
        public partial class AstDdlClause38 : AstDdlClause
        {
            
            internal AstDdlClause38(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause38(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause38(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause38(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_server_role
        /// </summary>
        public partial class AstDdlClause39 : AstDdlClause
        {
            
            internal AstDdlClause39(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause39(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause39(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause39(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_server_role_pdw
        /// </summary>
        public partial class AstDdlClause40 : AstDdlClause
        {
            
            internal AstDdlClause40(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause40(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause40(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause40(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_service
        /// </summary>
        public partial class AstDdlClause41 : AstDdlClause
        {
            
            internal AstDdlClause41(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause41(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause41(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause41(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_service_master_key
        /// </summary>
        public partial class AstDdlClause42 : AstDdlClause
        {
            
            internal AstDdlClause42(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause42(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause42(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause42(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_symmetric_key
        /// </summary>
        public partial class AstDdlClause43 : AstDdlClause
        {
            
            internal AstDdlClause43(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause43(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause43(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause43(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_table
        /// </summary>
        public partial class AstDdlClause44 : AstDdlClause
        {
            
            internal AstDdlClause44(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause44(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause44(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause44(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_user
        /// </summary>
        public partial class AstDdlClause45 : AstDdlClause
        {
            
            internal AstDdlClause45(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause45(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause45(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause45(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_user_azure_sql
        /// </summary>
        public partial class AstDdlClause46 : AstDdlClause
        {
            
            internal AstDdlClause46(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause46(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause46(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause46(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : alter_workload_group
        /// </summary>
        public partial class AstDdlClause47 : AstDdlClause
        {
            
            internal AstDdlClause47(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause47(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause47(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause47(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_application_role
        /// </summary>
        public partial class AstDdlClause48 : AstDdlClause
        {
            
            internal AstDdlClause48(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause48(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause48(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause48(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_assembly
        /// </summary>
        public partial class AstDdlClause49 : AstDdlClause
        {
            
            internal AstDdlClause49(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause49(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause49(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause49(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_asymmetric_key
        /// </summary>
        public partial class AstDdlClause50 : AstDdlClause
        {
            
            internal AstDdlClause50(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause50(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause50(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause50(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_column_encryption_key
        /// </summary>
        public partial class AstDdlClause51 : AstDdlClause
        {
            
            internal AstDdlClause51(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause51(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause51(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause51(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_column_master_key
        /// </summary>
        public partial class AstDdlClause52 : AstDdlClause
        {
            
            internal AstDdlClause52(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause52(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause52(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause52(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_credential
        /// </summary>
        public partial class AstDdlClause53 : AstDdlClause
        {
            
            internal AstDdlClause53(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause53(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause53(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause53(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_cryptographic_provider
        /// </summary>
        public partial class AstDdlClause54 : AstDdlClause
        {
            
            internal AstDdlClause54(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause54(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause54(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause54(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_database
        /// </summary>
        public partial class AstDdlClause55 : AstDdlClause
        {
            
            internal AstDdlClause55(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause55(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause55(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause55(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_db_role
        /// </summary>
        public partial class AstDdlClause56 : AstDdlClause
        {
            
            internal AstDdlClause56(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause56(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause56(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause56(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_event_notification
        /// </summary>
        public partial class AstDdlClause57 : AstDdlClause
        {
            
            internal AstDdlClause57(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause57(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause57(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause57(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_external_library
        /// </summary>
        public partial class AstDdlClause58 : AstDdlClause
        {
            
            internal AstDdlClause58(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause58(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause58(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause58(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_external_resource_pool
        /// </summary>
        public partial class AstDdlClause59 : AstDdlClause
        {
            
            internal AstDdlClause59(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause59(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause59(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause59(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_fulltext_catalog
        /// </summary>
        public partial class AstDdlClause60 : AstDdlClause
        {
            
            internal AstDdlClause60(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause60(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause60(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause60(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_fulltext_stoplist
        /// </summary>
        public partial class AstDdlClause61 : AstDdlClause
        {
            
            internal AstDdlClause61(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause61(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause61(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause61(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_index
        /// </summary>
        public partial class AstDdlClause62 : AstDdlClause
        {
            
            internal AstDdlClause62(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause62(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause62(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause62(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_columnstore_index
        /// </summary>
        public partial class AstDdlClause63 : AstDdlClause
        {
            
            internal AstDdlClause63(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause63(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause63(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause63(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_nonclustered_columnstore_index
        /// </summary>
        public partial class AstDdlClause64 : AstDdlClause
        {
            
            internal AstDdlClause64(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause64(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause64(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause64(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_login_azure_sql
        /// </summary>
        public partial class AstDdlClause65 : AstDdlClause
        {
            
            internal AstDdlClause65(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause65(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause65(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause65(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_login_pdw
        /// </summary>
        public partial class AstDdlClause66 : AstDdlClause
        {
            
            internal AstDdlClause66(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause66(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause66(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause66(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_login_sql_server
        /// </summary>
        public partial class AstDdlClause67 : AstDdlClause
        {
            
            internal AstDdlClause67(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause67(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause67(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause67(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_master_key_azure_sql
        /// </summary>
        public partial class AstDdlClause68 : AstDdlClause
        {
            
            internal AstDdlClause68(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause68(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause68(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause68(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_master_key_sql_server
        /// </summary>
        public partial class AstDdlClause69 : AstDdlClause
        {
            
            internal AstDdlClause69(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause69(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause69(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause69(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_or_alter_broker_priority
        /// </summary>
        public partial class AstDdlClause70 : AstDdlClause
        {
            
            internal AstDdlClause70(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause70(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause70(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause70(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_remote_service_binding
        /// </summary>
        public partial class AstDdlClause71 : AstDdlClause
        {
            
            internal AstDdlClause71(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause71(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause71(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause71(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_resource_pool
        /// </summary>
        public partial class AstDdlClause72 : AstDdlClause
        {
            
            internal AstDdlClause72(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause72(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause72(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause72(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_route
        /// </summary>
        public partial class AstDdlClause73 : AstDdlClause
        {
            
            internal AstDdlClause73(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause73(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause73(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause73(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_rule
        /// </summary>
        public partial class AstDdlClause74 : AstDdlClause
        {
            
            internal AstDdlClause74(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause74(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause74(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause74(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_schema
        /// </summary>
        public partial class AstDdlClause75 : AstDdlClause
        {
            
            internal AstDdlClause75(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause75(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause75(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause75(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_schema_azure_sql_dw_and_pdw
        /// </summary>
        public partial class AstDdlClause76 : AstDdlClause
        {
            
            internal AstDdlClause76(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause76(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause76(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause76(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_search_property_list
        /// </summary>
        public partial class AstDdlClause77 : AstDdlClause
        {
            
            internal AstDdlClause77(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause77(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause77(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause77(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_security_policy
        /// </summary>
        public partial class AstDdlClause78 : AstDdlClause
        {
            
            internal AstDdlClause78(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause78(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause78(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause78(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_sequence
        /// </summary>
        public partial class AstDdlClause79 : AstDdlClause
        {
            
            internal AstDdlClause79(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause79(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause79(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause79(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_server_audit
        /// </summary>
        public partial class AstDdlClause80 : AstDdlClause
        {
            
            internal AstDdlClause80(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause80(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause80(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause80(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_server_audit_specification
        /// </summary>
        public partial class AstDdlClause81 : AstDdlClause
        {
            
            internal AstDdlClause81(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause81(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause81(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause81(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_server_role
        /// </summary>
        public partial class AstDdlClause82 : AstDdlClause
        {
            
            internal AstDdlClause82(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause82(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause82(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause82(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_service
        /// </summary>
        public partial class AstDdlClause83 : AstDdlClause
        {
            
            internal AstDdlClause83(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause83(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause83(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause83(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_statistics
        /// </summary>
        public partial class AstDdlClause84 : AstDdlClause
        {
            
            internal AstDdlClause84(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause84(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause84(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause84(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_synonym
        /// </summary>
        public partial class AstDdlClause85 : AstDdlClause
        {
            
            internal AstDdlClause85(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause85(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause85(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause85(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_table
        /// </summary>
        public partial class AstDdlClause86 : AstDdlClause
        {
            
            internal AstDdlClause86(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause86(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause86(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause86(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_type
        /// </summary>
        public partial class AstDdlClause87 : AstDdlClause
        {
            
            internal AstDdlClause87(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause87(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause87(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause87(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_user
        /// </summary>
        public partial class AstDdlClause88 : AstDdlClause
        {
            
            internal AstDdlClause88(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause88(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause88(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause88(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_user_azure_sql_dw
        /// </summary>
        public partial class AstDdlClause89 : AstDdlClause
        {
            
            internal AstDdlClause89(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause89(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause89(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause89(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_workload_group
        /// </summary>
        public partial class AstDdlClause90 : AstDdlClause
        {
            
            internal AstDdlClause90(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause90(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause90(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause90(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_xml_index
        /// </summary>
        public partial class AstDdlClause91 : AstDdlClause
        {
            
            internal AstDdlClause91(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause91(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause91(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause91(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_xml_schema_collection
        /// </summary>
        public partial class AstDdlClause92 : AstDdlClause
        {
            
            internal AstDdlClause92(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause92(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause92(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause92(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_partition_function
        /// </summary>
        public partial class AstDdlClause93 : AstDdlClause
        {
            
            internal AstDdlClause93(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause93(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause93(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause93(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : create_partition_scheme
        /// </summary>
        public partial class AstDdlClause94 : AstDdlClause
        {
            
            internal AstDdlClause94(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause94(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause94(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause94(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_aggregate
        /// </summary>
        public partial class AstDdlClause95 : AstDdlClause
        {
            
            internal AstDdlClause95(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause95(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause95(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause95(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_application_role
        /// </summary>
        public partial class AstDdlClause96 : AstDdlClause
        {
            
            internal AstDdlClause96(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause96(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause96(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause96(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_assembly
        /// </summary>
        public partial class AstDdlClause97 : AstDdlClause
        {
            
            internal AstDdlClause97(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause97(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause97(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause97(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_asymmetric_key
        /// </summary>
        public partial class AstDdlClause98 : AstDdlClause
        {
            
            internal AstDdlClause98(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause98(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause98(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause98(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_availability_group
        /// </summary>
        public partial class AstDdlClause99 : AstDdlClause
        {
            
            internal AstDdlClause99(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause99(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause99(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause99(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_broker_priority
        /// </summary>
        public partial class AstDdlClause100 : AstDdlClause
        {
            
            internal AstDdlClause100(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause100(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause100(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause100(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_certificate
        /// </summary>
        public partial class AstDdlClause101 : AstDdlClause
        {
            
            internal AstDdlClause101(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause101(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause101(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause101(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_column_encryption_key
        /// </summary>
        public partial class AstDdlClause102 : AstDdlClause
        {
            
            internal AstDdlClause102(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause102(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause102(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause102(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_column_master_key
        /// </summary>
        public partial class AstDdlClause103 : AstDdlClause
        {
            
            internal AstDdlClause103(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause103(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause103(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause103(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_contract
        /// </summary>
        public partial class AstDdlClause104 : AstDdlClause
        {
            
            internal AstDdlClause104(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause104(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause104(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause104(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_credential
        /// </summary>
        public partial class AstDdlClause105 : AstDdlClause
        {
            
            internal AstDdlClause105(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause105(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause105(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause105(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_cryptograhic_provider
        /// </summary>
        public partial class AstDdlClause106 : AstDdlClause
        {
            
            internal AstDdlClause106(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause106(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause106(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause106(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_database
        /// </summary>
        public partial class AstDdlClause107 : AstDdlClause
        {
            
            internal AstDdlClause107(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause107(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause107(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause107(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_database_audit_specification
        /// </summary>
        public partial class AstDdlClause108 : AstDdlClause
        {
            
            internal AstDdlClause108(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause108(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause108(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause108(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_database_encryption_key
        /// </summary>
        public partial class AstDdlClause109 : AstDdlClause
        {
            
            internal AstDdlClause109(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause109(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause109(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause109(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_database_scoped_credential
        /// </summary>
        public partial class AstDdlClause110 : AstDdlClause
        {
            
            internal AstDdlClause110(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause110(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause110(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause110(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_db_role
        /// </summary>
        public partial class AstDdlClause111 : AstDdlClause
        {
            
            internal AstDdlClause111(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause111(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause111(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause111(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_default
        /// </summary>
        public partial class AstDdlClause112 : AstDdlClause
        {
            
            internal AstDdlClause112(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause112(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause112(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause112(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_endpoint
        /// </summary>
        public partial class AstDdlClause113 : AstDdlClause
        {
            
            internal AstDdlClause113(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause113(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause113(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause113(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_event_notifications
        /// </summary>
        public partial class AstDdlClause114 : AstDdlClause
        {
            
            internal AstDdlClause114(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause114(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause114(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause114(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_event_session
        /// </summary>
        public partial class AstDdlClause115 : AstDdlClause
        {
            
            internal AstDdlClause115(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause115(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause115(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause115(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_external_data_source
        /// </summary>
        public partial class AstDdlClause116 : AstDdlClause
        {
            
            internal AstDdlClause116(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause116(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause116(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause116(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_external_file_format
        /// </summary>
        public partial class AstDdlClause117 : AstDdlClause
        {
            
            internal AstDdlClause117(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause117(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause117(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause117(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_external_library
        /// </summary>
        public partial class AstDdlClause118 : AstDdlClause
        {
            
            internal AstDdlClause118(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause118(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause118(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause118(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_external_resource_pool
        /// </summary>
        public partial class AstDdlClause119 : AstDdlClause
        {
            
            internal AstDdlClause119(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause119(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause119(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause119(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_external_table
        /// </summary>
        public partial class AstDdlClause120 : AstDdlClause
        {
            
            internal AstDdlClause120(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause120(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause120(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause120(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_fulltext_catalog
        /// </summary>
        public partial class AstDdlClause121 : AstDdlClause
        {
            
            internal AstDdlClause121(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause121(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause121(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause121(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_fulltext_index
        /// </summary>
        public partial class AstDdlClause122 : AstDdlClause
        {
            
            internal AstDdlClause122(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause122(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause122(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause122(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_fulltext_stoplist
        /// </summary>
        public partial class AstDdlClause123 : AstDdlClause
        {
            
            internal AstDdlClause123(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause123(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause123(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause123(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_function
        /// </summary>
        public partial class AstDdlClause124 : AstDdlClause
        {
            
            internal AstDdlClause124(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause124(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause124(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause124(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_index
        /// </summary>
        public partial class AstDdlClause125 : AstDdlClause
        {
            
            internal AstDdlClause125(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause125(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause125(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause125(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_login
        /// </summary>
        public partial class AstDdlClause126 : AstDdlClause
        {
            
            internal AstDdlClause126(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause126(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause126(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause126(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_master_key
        /// </summary>
        public partial class AstDdlClause127 : AstDdlClause
        {
            
            internal AstDdlClause127(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause127(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause127(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause127(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_message_type
        /// </summary>
        public partial class AstDdlClause128 : AstDdlClause
        {
            
            internal AstDdlClause128(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause128(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause128(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause128(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_partition_function
        /// </summary>
        public partial class AstDdlClause129 : AstDdlClause
        {
            
            internal AstDdlClause129(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause129(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause129(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause129(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_partition_scheme
        /// </summary>
        public partial class AstDdlClause130 : AstDdlClause
        {
            
            internal AstDdlClause130(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause130(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause130(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause130(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_procedure
        /// </summary>
        public partial class AstDdlClause131 : AstDdlClause
        {
            
            internal AstDdlClause131(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause131(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause131(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause131(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_queue
        /// </summary>
        public partial class AstDdlClause132 : AstDdlClause
        {
            
            internal AstDdlClause132(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause132(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause132(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause132(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_remote_service_binding
        /// </summary>
        public partial class AstDdlClause133 : AstDdlClause
        {
            
            internal AstDdlClause133(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause133(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause133(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause133(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_resource_pool
        /// </summary>
        public partial class AstDdlClause134 : AstDdlClause
        {
            
            internal AstDdlClause134(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause134(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause134(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause134(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_route
        /// </summary>
        public partial class AstDdlClause135 : AstDdlClause
        {
            
            internal AstDdlClause135(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause135(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause135(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause135(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_rule
        /// </summary>
        public partial class AstDdlClause136 : AstDdlClause
        {
            
            internal AstDdlClause136(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause136(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause136(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause136(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_schema
        /// </summary>
        public partial class AstDdlClause137 : AstDdlClause
        {
            
            internal AstDdlClause137(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause137(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause137(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause137(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_search_property_list
        /// </summary>
        public partial class AstDdlClause138 : AstDdlClause
        {
            
            internal AstDdlClause138(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause138(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause138(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause138(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_security_policy
        /// </summary>
        public partial class AstDdlClause139 : AstDdlClause
        {
            
            internal AstDdlClause139(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause139(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause139(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause139(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_sequence
        /// </summary>
        public partial class AstDdlClause140 : AstDdlClause
        {
            
            internal AstDdlClause140(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause140(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause140(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause140(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_server_audit
        /// </summary>
        public partial class AstDdlClause141 : AstDdlClause
        {
            
            internal AstDdlClause141(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause141(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause141(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause141(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_server_audit_specification
        /// </summary>
        public partial class AstDdlClause142 : AstDdlClause
        {
            
            internal AstDdlClause142(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause142(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause142(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause142(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_server_role
        /// </summary>
        public partial class AstDdlClause143 : AstDdlClause
        {
            
            internal AstDdlClause143(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause143(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause143(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause143(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_service
        /// </summary>
        public partial class AstDdlClause144 : AstDdlClause
        {
            
            internal AstDdlClause144(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause144(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause144(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause144(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_signature
        /// </summary>
        public partial class AstDdlClause145 : AstDdlClause
        {
            
            internal AstDdlClause145(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause145(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause145(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause145(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_statistics
        /// </summary>
        public partial class AstDdlClause146 : AstDdlClause
        {
            
            internal AstDdlClause146(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause146(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause146(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause146(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_statistics_id_azure_dw_and_pdw
        /// </summary>
        public partial class AstDdlClause147 : AstDdlClause
        {
            
            internal AstDdlClause147(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause147(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause147(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause147(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_symmetric_key
        /// </summary>
        public partial class AstDdlClause148 : AstDdlClause
        {
            
            internal AstDdlClause148(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause148(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause148(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause148(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_synonym
        /// </summary>
        public partial class AstDdlClause149 : AstDdlClause
        {
            
            internal AstDdlClause149(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause149(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause149(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause149(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_table
        /// </summary>
        public partial class AstDdlClause150 : AstDdlClause
        {
            
            internal AstDdlClause150(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause150(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause150(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause150(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_trigger
        /// </summary>
        public partial class AstDdlClause151 : AstDdlClause
        {
            
            internal AstDdlClause151(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause151(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause151(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause151(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_type
        /// </summary>
        public partial class AstDdlClause152 : AstDdlClause
        {
            
            internal AstDdlClause152(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause152(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause152(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause152(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_user
        /// </summary>
        public partial class AstDdlClause153 : AstDdlClause
        {
            
            internal AstDdlClause153(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause153(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause153(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause153(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_view
        /// </summary>
        public partial class AstDdlClause154 : AstDdlClause
        {
            
            internal AstDdlClause154(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause154(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause154(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause154(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_workload_group
        /// </summary>
        public partial class AstDdlClause155 : AstDdlClause
        {
            
            internal AstDdlClause155(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause155(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause155(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause155(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : drop_xml_schema_collection
        /// </summary>
        public partial class AstDdlClause156 : AstDdlClause
        {
            
            internal AstDdlClause156(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause156(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause156(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause156(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : disable_trigger
        /// </summary>
        public partial class AstDdlClause157 : AstDdlClause
        {
            
            internal AstDdlClause157(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause157(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause157(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause157(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : enable_trigger
        /// </summary>
        public partial class AstDdlClause158 : AstDdlClause
        {
            
            internal AstDdlClause158(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause158(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause158(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause158(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : lock_table
        /// </summary>
        public partial class AstDdlClause159 : AstDdlClause
        {
            
            internal AstDdlClause159(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause159(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause159(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause159(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : truncate_table
        /// </summary>
        public partial class AstDdlClause160 : AstDdlClause
        {
            
            internal AstDdlClause160(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause160(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause160(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause160(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        /// <summary>
        /// ddl_clause : update_statistics
        /// </summary>
        public partial class AstDdlClause161 : AstDdlClause
        {
            
            internal AstDdlClause161(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDdlClause161(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDdlClause161(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDdlClause161(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDdlClause(this);
            }
        }
        

        
        internal AstDdlClause(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstDdlClause(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDdlClause(Position p) : 
                base(p)
        {
        }
        
        internal AstDdlClause(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDdlClause Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDdlClause.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAlterApplicationRole), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAssembly), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAsymmetricKey), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAuthorization), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAuthorizationForAzureDw), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAuthorizationForParallelDw), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAuthorizationForSqlDatabase), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAvailabilityGroup), false, false))
                {
                    return 8;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterCertificate), false, false))
                {
                    return 9;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterColumnEncryptionKey), false, false))
                {
                    return 10;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterCredential), false, false))
                {
                    return 11;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterCryptographicProvider), false, false))
                {
                    return 12;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterDatabase), false, false))
                {
                    return 13;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterDbRole), false, false))
                {
                    return 14;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterEndpoint), false, false))
                {
                    return 15;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateOrAlterEventSession), false, false))
                {
                    return 16;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterExternalDataSource), false, false))
                {
                    return 17;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterExternalLibrary), false, false))
                {
                    return 18;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterExternalResourcePool), false, false))
                {
                    return 19;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterFulltextCatalog), false, false))
                {
                    return 20;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterFulltextStoplist), false, false))
                {
                    return 21;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterIndex), false, false))
                {
                    return 22;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterLoginAzureSql), false, false))
                {
                    return 23;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterLoginAzureSqlDwAndPdw), false, false))
                {
                    return 24;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterLoginSqlServer), false, false))
                {
                    return 25;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterMasterKeyAzureSql), false, false))
                {
                    return 26;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterMasterKeySqlServer), false, false))
                {
                    return 27;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterMessageType), false, false))
                {
                    return 28;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterPartitionFunction), false, false))
                {
                    return 29;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterPartitionScheme), false, false))
                {
                    return 30;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterRemoteServiceBinding), false, false))
                {
                    return 31;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterResourceGovernor), false, false))
                {
                    return 32;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterSchemaAzureSqlDwAndPdw), false, false))
                {
                    return 33;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterSchemaSql), false, false))
                {
                    return 34;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterSequence), false, false))
                {
                    return 35;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterServerAudit), false, false))
                {
                    return 36;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterServerAuditSpecification), false, false))
                {
                    return 37;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterServerConfiguration), false, false))
                {
                    return 38;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterServerRole), false, false))
                {
                    return 39;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterServerRolePdw), false, false))
                {
                    return 40;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterService), false, false))
                {
                    return 41;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterServiceMasterKey), false, false))
                {
                    return 42;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterSymmetricKey), false, false))
                {
                    return 43;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterTable), false, false))
                {
                    return 44;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterUser), false, false))
                {
                    return 45;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterUserAzureSql), false, false))
                {
                    return 46;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterWorkloadGroup), false, false))
                {
                    return 47;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateApplicationRole), false, false))
                {
                    return 48;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateAssembly), false, false))
                {
                    return 49;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateAsymmetricKey), false, false))
                {
                    return 50;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateColumnEncryptionKey), false, false))
                {
                    return 51;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateColumnMasterKey), false, false))
                {
                    return 52;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateCredential), false, false))
                {
                    return 53;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateCryptographicProvider), false, false))
                {
                    return 54;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateDatabase), false, false))
                {
                    return 55;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateDbRole), false, false))
                {
                    return 56;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateEventNotification), false, false))
                {
                    return 57;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateExternalLibrary), false, false))
                {
                    return 58;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateExternalResourcePool), false, false))
                {
                    return 59;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateFulltextCatalog), false, false))
                {
                    return 60;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateFulltextStoplist), false, false))
                {
                    return 61;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateIndex), false, false))
                {
                    return 62;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateColumnstoreIndex), false, false))
                {
                    return 63;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateNonclusteredColumnstoreIndex), false, false))
                {
                    return 64;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateLoginAzureSql), false, false))
                {
                    return 65;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateLoginPdw), false, false))
                {
                    return 66;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateLoginSqlServer), false, false))
                {
                    return 67;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateMasterKeyAzureSql), false, false))
                {
                    return 68;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateMasterKeySqlServer), false, false))
                {
                    return 69;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateOrAlterBrokerPriority), false, false))
                {
                    return 70;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateRemoteServiceBinding), false, false))
                {
                    return 71;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateResourcePool), false, false))
                {
                    return 72;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateRoute), false, false))
                {
                    return 73;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateRule), false, false))
                {
                    return 74;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateSchema), false, false))
                {
                    return 75;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateSchemaAzureSqlDwAndPdw), false, false))
                {
                    return 76;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateSearchPropertyList), false, false))
                {
                    return 77;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateSecurityPolicy), false, false))
                {
                    return 78;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateSequence), false, false))
                {
                    return 79;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateServerAudit), false, false))
                {
                    return 80;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateServerAuditSpecification), false, false))
                {
                    return 81;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateServerRole), false, false))
                {
                    return 82;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateService), false, false))
                {
                    return 83;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateStatistics), false, false))
                {
                    return 84;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateSynonym), false, false))
                {
                    return 85;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateTable), false, false))
                {
                    return 86;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateType), false, false))
                {
                    return 87;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateUser), false, false))
                {
                    return 88;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateUserAzureSqlDw), false, false))
                {
                    return 89;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateWorkloadGroup), false, false))
                {
                    return 90;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateXmlIndex), false, false))
                {
                    return 91;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateXmlSchemaCollection), false, false))
                {
                    return 92;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreatePartitionFunction), false, false))
                {
                    return 93;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreatePartitionScheme), false, false))
                {
                    return 94;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropAggregate), false, false))
                {
                    return 95;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropApplicationRole), false, false))
                {
                    return 96;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropAssembly), false, false))
                {
                    return 97;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropAsymmetricKey), false, false))
                {
                    return 98;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropAvailabilityGroup), false, false))
                {
                    return 99;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropBrokerPriority), false, false))
                {
                    return 100;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropCertificate), false, false))
                {
                    return 101;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropColumnEncryptionKey), false, false))
                {
                    return 102;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropColumnMasterKey), false, false))
                {
                    return 103;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropContract), false, false))
                {
                    return 104;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropCredential), false, false))
                {
                    return 105;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropCryptograhicProvider), false, false))
                {
                    return 106;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropDatabase), false, false))
                {
                    return 107;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropDatabaseAuditSpecification), false, false))
                {
                    return 108;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropDatabaseEncryptionKey), false, false))
                {
                    return 109;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropDatabaseScopedCredential), false, false))
                {
                    return 110;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropDbRole), false, false))
                {
                    return 111;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropDefault), false, false))
                {
                    return 112;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropEndpoint), false, false))
                {
                    return 113;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropEventNotifications), false, false))
                {
                    return 114;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropEventSession), false, false))
                {
                    return 115;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropExternalDataSource), false, false))
                {
                    return 116;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropExternalFileFormat), false, false))
                {
                    return 117;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropExternalLibrary), false, false))
                {
                    return 118;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropExternalResourcePool), false, false))
                {
                    return 119;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropExternalTable), false, false))
                {
                    return 120;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropFulltextCatalog), false, false))
                {
                    return 121;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropFulltextIndex), false, false))
                {
                    return 122;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropFulltextStoplist), false, false))
                {
                    return 123;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropFunction), false, false))
                {
                    return 124;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropIndex), false, false))
                {
                    return 125;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropLogin), false, false))
                {
                    return 126;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropMasterKey), false, false))
                {
                    return 127;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropMessageType), false, false))
                {
                    return 128;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropPartitionFunction), false, false))
                {
                    return 129;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropPartitionScheme), false, false))
                {
                    return 130;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropProcedure), false, false))
                {
                    return 131;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropQueue), false, false))
                {
                    return 132;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropRemoteServiceBinding), false, false))
                {
                    return 133;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropResourcePool), false, false))
                {
                    return 134;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropRoute), false, false))
                {
                    return 135;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropRule), false, false))
                {
                    return 136;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropSchema), false, false))
                {
                    return 137;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropSearchPropertyList), false, false))
                {
                    return 138;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropSecurityPolicy), false, false))
                {
                    return 139;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropSequence), false, false))
                {
                    return 140;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropServerAudit), false, false))
                {
                    return 141;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropServerAuditSpecification), false, false))
                {
                    return 142;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropServerRole), false, false))
                {
                    return 143;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropService), false, false))
                {
                    return 144;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropSignature), false, false))
                {
                    return 145;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropStatistics), false, false))
                {
                    return 146;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropStatisticsIdAzureDwAndPdw), false, false))
                {
                    return 147;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropSymmetricKey), false, false))
                {
                    return 148;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropSynonym), false, false))
                {
                    return 149;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropTable), false, false))
                {
                    return 150;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropTrigger), false, false))
                {
                    return 151;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropType), false, false))
                {
                    return 152;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropUser), false, false))
                {
                    return 153;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropView), false, false))
                {
                    return 154;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropWorkloadGroup), false, false))
                {
                    return 155;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropXmlSchemaCollection), false, false))
                {
                    return 156;
                }
                if (AstRoot.Eval(list[0], typeof(AstDisableTrigger), false, false))
                {
                    return 157;
                }
                if (AstRoot.Eval(list[0], typeof(AstEnableTrigger), false, false))
                {
                    return 158;
                }
                if (AstRoot.Eval(list[0], typeof(AstLockTable), false, false))
                {
                    return 159;
                }
                if (AstRoot.Eval(list[0], typeof(AstTruncateTable), false, false))
                {
                    return 160;
                }
                if (AstRoot.Eval(list[0], typeof(AstUpdateStatistics), false, false))
                {
                    return 161;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_application_role 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterApplicationRole alterApplicationRole)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause1 result = new AstDdlClause.AstDdlClause1(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_assembly 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterAssembly alterAssembly)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause2 result = new AstDdlClause.AstDdlClause2(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_asymmetric_key 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterAsymmetricKey alterAsymmetricKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause3 result = new AstDdlClause.AstDdlClause3(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_authorization 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterAuthorization alterAuthorization)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause4 result = new AstDdlClause.AstDdlClause4(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_authorization_for_azure_dw 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterAuthorizationForAzureDw alterAuthorizationForAzureDw)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause5 result = new AstDdlClause.AstDdlClause5(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_authorization_for_parallel_dw 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterAuthorizationForParallelDw alterAuthorizationForParallelDw)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause6 result = new AstDdlClause.AstDdlClause6(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_authorization_for_sql_database 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterAuthorizationForSqlDatabase alterAuthorizationForSqlDatabase)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause7 result = new AstDdlClause.AstDdlClause7(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_availability_group 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterAvailabilityGroup alterAvailabilityGroup)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause8 result = new AstDdlClause.AstDdlClause8(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_certificate 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterCertificate alterCertificate)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause9 result = new AstDdlClause.AstDdlClause9(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_column_encryption_key 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterColumnEncryptionKey alterColumnEncryptionKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause10 result = new AstDdlClause.AstDdlClause10(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_credential 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterCredential alterCredential)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause11 result = new AstDdlClause.AstDdlClause11(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_cryptographic_provider 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterCryptographicProvider alterCryptographicProvider)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause12 result = new AstDdlClause.AstDdlClause12(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_database 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterDatabase alterDatabase)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause13 result = new AstDdlClause.AstDdlClause13(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_db_role 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterDbRole alterDbRole)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause14 result = new AstDdlClause.AstDdlClause14(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_endpoint 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterEndpoint alterEndpoint)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause15 result = new AstDdlClause.AstDdlClause15(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_or_alter_event_session 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateOrAlterEventSession createOrAlterEventSession)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause16 result = new AstDdlClause.AstDdlClause16(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_external_data_source 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterExternalDataSource alterExternalDataSource)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause17 result = new AstDdlClause.AstDdlClause17(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_external_library 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterExternalLibrary alterExternalLibrary)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause18 result = new AstDdlClause.AstDdlClause18(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_external_resource_pool 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterExternalResourcePool alterExternalResourcePool)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause19 result = new AstDdlClause.AstDdlClause19(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_fulltext_catalog 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterFulltextCatalog alterFulltextCatalog)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause20 result = new AstDdlClause.AstDdlClause20(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_fulltext_stoplist 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterFulltextStoplist alterFulltextStoplist)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause21 result = new AstDdlClause.AstDdlClause21(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_index 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterIndex alterIndex)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause22 result = new AstDdlClause.AstDdlClause22(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_login_azure_sql 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterLoginAzureSql alterLoginAzureSql)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause23 result = new AstDdlClause.AstDdlClause23(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_login_azure_sql_dw_and_pdw 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterLoginAzureSqlDwAndPdw alterLoginAzureSqlDwAndPdw)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause24 result = new AstDdlClause.AstDdlClause24(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_login_sql_server 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterLoginSqlServer alterLoginSqlServer)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause25 result = new AstDdlClause.AstDdlClause25(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_master_key_azure_sql 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterMasterKeyAzureSql alterMasterKeyAzureSql)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause26 result = new AstDdlClause.AstDdlClause26(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_master_key_sql_server 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterMasterKeySqlServer alterMasterKeySqlServer)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause27 result = new AstDdlClause.AstDdlClause27(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_message_type 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterMessageType alterMessageType)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause28 result = new AstDdlClause.AstDdlClause28(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_partition_function 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterPartitionFunction alterPartitionFunction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause29 result = new AstDdlClause.AstDdlClause29(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_partition_scheme 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterPartitionScheme alterPartitionScheme)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause30 result = new AstDdlClause.AstDdlClause30(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_remote_service_binding 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterRemoteServiceBinding alterRemoteServiceBinding)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause31 result = new AstDdlClause.AstDdlClause31(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_resource_governor 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterResourceGovernor alterResourceGovernor)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause32 result = new AstDdlClause.AstDdlClause32(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_schema_azure_sql_dw_and_pdw 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterSchemaAzureSqlDwAndPdw alterSchemaAzureSqlDwAndPdw)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause33 result = new AstDdlClause.AstDdlClause33(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_schema_sql 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterSchemaSql alterSchemaSql)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause34 result = new AstDdlClause.AstDdlClause34(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_sequence 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterSequence alterSequence)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause35 result = new AstDdlClause.AstDdlClause35(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_server_audit 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterServerAudit alterServerAudit)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause36 result = new AstDdlClause.AstDdlClause36(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_server_audit_specification 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterServerAuditSpecification alterServerAuditSpecification)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause37 result = new AstDdlClause.AstDdlClause37(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_server_configuration 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterServerConfiguration alterServerConfiguration)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause38 result = new AstDdlClause.AstDdlClause38(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_server_role 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterServerRole alterServerRole)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause39 result = new AstDdlClause.AstDdlClause39(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_server_role_pdw 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterServerRolePdw alterServerRolePdw)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause40 result = new AstDdlClause.AstDdlClause40(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_service 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterService alterService)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause41 result = new AstDdlClause.AstDdlClause41(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_service_master_key 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterServiceMasterKey alterServiceMasterKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause42 result = new AstDdlClause.AstDdlClause42(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_symmetric_key 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterSymmetricKey alterSymmetricKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause43 result = new AstDdlClause.AstDdlClause43(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_table 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterTable alterTable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause44 result = new AstDdlClause.AstDdlClause44(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_user 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterUser alterUser)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause45 result = new AstDdlClause.AstDdlClause45(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_user_azure_sql 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterUserAzureSql alterUserAzureSql)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause46 result = new AstDdlClause.AstDdlClause46(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    alter_workload_group 
        /// </summary>
        public static AstDdlClause DdlClause(AstAlterWorkloadGroup alterWorkloadGroup)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause47 result = new AstDdlClause.AstDdlClause47(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_application_role 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateApplicationRole createApplicationRole)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause48 result = new AstDdlClause.AstDdlClause48(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_assembly 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateAssembly createAssembly)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause49 result = new AstDdlClause.AstDdlClause49(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_asymmetric_key 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateAsymmetricKey createAsymmetricKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause50 result = new AstDdlClause.AstDdlClause50(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_column_encryption_key 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateColumnEncryptionKey createColumnEncryptionKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause51 result = new AstDdlClause.AstDdlClause51(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_column_master_key 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateColumnMasterKey createColumnMasterKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause52 result = new AstDdlClause.AstDdlClause52(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_credential 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateCredential createCredential)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause53 result = new AstDdlClause.AstDdlClause53(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_cryptographic_provider 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateCryptographicProvider createCryptographicProvider)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause54 result = new AstDdlClause.AstDdlClause54(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_database 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateDatabase createDatabase)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause55 result = new AstDdlClause.AstDdlClause55(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_db_role 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateDbRole createDbRole)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause56 result = new AstDdlClause.AstDdlClause56(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_event_notification 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateEventNotification createEventNotification)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause57 result = new AstDdlClause.AstDdlClause57(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_external_library 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateExternalLibrary createExternalLibrary)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause58 result = new AstDdlClause.AstDdlClause58(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_external_resource_pool 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateExternalResourcePool createExternalResourcePool)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause59 result = new AstDdlClause.AstDdlClause59(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_fulltext_catalog 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateFulltextCatalog createFulltextCatalog)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause60 result = new AstDdlClause.AstDdlClause60(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_fulltext_stoplist 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateFulltextStoplist createFulltextStoplist)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause61 result = new AstDdlClause.AstDdlClause61(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_index 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateIndex createIndex)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause62 result = new AstDdlClause.AstDdlClause62(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_columnstore_index 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateColumnstoreIndex createColumnstoreIndex)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause63 result = new AstDdlClause.AstDdlClause63(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_nonclustered_columnstore_index 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateNonclusteredColumnstoreIndex createNonclusteredColumnstoreIndex)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause64 result = new AstDdlClause.AstDdlClause64(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_login_azure_sql 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateLoginAzureSql createLoginAzureSql)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause65 result = new AstDdlClause.AstDdlClause65(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_login_pdw 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateLoginPdw createLoginPdw)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause66 result = new AstDdlClause.AstDdlClause66(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_login_sql_server 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateLoginSqlServer createLoginSqlServer)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause67 result = new AstDdlClause.AstDdlClause67(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_master_key_azure_sql 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateMasterKeyAzureSql createMasterKeyAzureSql)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause68 result = new AstDdlClause.AstDdlClause68(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_master_key_sql_server 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateMasterKeySqlServer createMasterKeySqlServer)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause69 result = new AstDdlClause.AstDdlClause69(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_or_alter_broker_priority 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateOrAlterBrokerPriority createOrAlterBrokerPriority)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause70 result = new AstDdlClause.AstDdlClause70(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_remote_service_binding 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateRemoteServiceBinding createRemoteServiceBinding)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause71 result = new AstDdlClause.AstDdlClause71(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_resource_pool 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateResourcePool createResourcePool)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause72 result = new AstDdlClause.AstDdlClause72(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_route 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateRoute createRoute)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause73 result = new AstDdlClause.AstDdlClause73(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_rule 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateRule createRule)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause74 result = new AstDdlClause.AstDdlClause74(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_schema 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateSchema createSchema)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause75 result = new AstDdlClause.AstDdlClause75(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_schema_azure_sql_dw_and_pdw 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateSchemaAzureSqlDwAndPdw createSchemaAzureSqlDwAndPdw)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause76 result = new AstDdlClause.AstDdlClause76(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_search_property_list 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateSearchPropertyList createSearchPropertyList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause77 result = new AstDdlClause.AstDdlClause77(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_security_policy 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateSecurityPolicy createSecurityPolicy)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause78 result = new AstDdlClause.AstDdlClause78(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_sequence 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateSequence createSequence)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause79 result = new AstDdlClause.AstDdlClause79(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_server_audit 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateServerAudit createServerAudit)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause80 result = new AstDdlClause.AstDdlClause80(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_server_audit_specification 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateServerAuditSpecification createServerAuditSpecification)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause81 result = new AstDdlClause.AstDdlClause81(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_server_role 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateServerRole createServerRole)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause82 result = new AstDdlClause.AstDdlClause82(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_service 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateService createService)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause83 result = new AstDdlClause.AstDdlClause83(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_statistics 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateStatistics createStatistics)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause84 result = new AstDdlClause.AstDdlClause84(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_synonym 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateSynonym createSynonym)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause85 result = new AstDdlClause.AstDdlClause85(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_table 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateTable createTable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause86 result = new AstDdlClause.AstDdlClause86(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_type 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateType createType)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause87 result = new AstDdlClause.AstDdlClause87(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_user 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateUser createUser)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause88 result = new AstDdlClause.AstDdlClause88(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_user_azure_sql_dw 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateUserAzureSqlDw createUserAzureSqlDw)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause89 result = new AstDdlClause.AstDdlClause89(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_workload_group 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateWorkloadGroup createWorkloadGroup)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause90 result = new AstDdlClause.AstDdlClause90(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_xml_index 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateXmlIndex createXmlIndex)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause91 result = new AstDdlClause.AstDdlClause91(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_xml_schema_collection 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreateXmlSchemaCollection createXmlSchemaCollection)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause92 result = new AstDdlClause.AstDdlClause92(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_partition_function 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreatePartitionFunction createPartitionFunction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause93 result = new AstDdlClause.AstDdlClause93(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    create_partition_scheme 
        /// </summary>
        public static AstDdlClause DdlClause(AstCreatePartitionScheme createPartitionScheme)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause94 result = new AstDdlClause.AstDdlClause94(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_aggregate 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropAggregate dropAggregate)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause95 result = new AstDdlClause.AstDdlClause95(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_application_role 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropApplicationRole dropApplicationRole)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause96 result = new AstDdlClause.AstDdlClause96(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_assembly 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropAssembly dropAssembly)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause97 result = new AstDdlClause.AstDdlClause97(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_asymmetric_key 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropAsymmetricKey dropAsymmetricKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause98 result = new AstDdlClause.AstDdlClause98(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_availability_group 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropAvailabilityGroup dropAvailabilityGroup)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause99 result = new AstDdlClause.AstDdlClause99(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_broker_priority 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropBrokerPriority dropBrokerPriority)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause100 result = new AstDdlClause.AstDdlClause100(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_certificate 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropCertificate dropCertificate)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause101 result = new AstDdlClause.AstDdlClause101(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_column_encryption_key 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropColumnEncryptionKey dropColumnEncryptionKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause102 result = new AstDdlClause.AstDdlClause102(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_column_master_key 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropColumnMasterKey dropColumnMasterKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause103 result = new AstDdlClause.AstDdlClause103(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_contract 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropContract dropContract)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause104 result = new AstDdlClause.AstDdlClause104(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_credential 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropCredential dropCredential)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause105 result = new AstDdlClause.AstDdlClause105(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_cryptograhic_provider 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropCryptograhicProvider dropCryptograhicProvider)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause106 result = new AstDdlClause.AstDdlClause106(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_database 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropDatabase dropDatabase)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause107 result = new AstDdlClause.AstDdlClause107(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_database_audit_specification 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropDatabaseAuditSpecification dropDatabaseAuditSpecification)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause108 result = new AstDdlClause.AstDdlClause108(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_database_encryption_key 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropDatabaseEncryptionKey dropDatabaseEncryptionKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause109 result = new AstDdlClause.AstDdlClause109(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_database_scoped_credential 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropDatabaseScopedCredential dropDatabaseScopedCredential)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause110 result = new AstDdlClause.AstDdlClause110(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_db_role 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropDbRole dropDbRole)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause111 result = new AstDdlClause.AstDdlClause111(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_default 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropDefault dropDefault)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause112 result = new AstDdlClause.AstDdlClause112(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_endpoint 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropEndpoint dropEndpoint)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause113 result = new AstDdlClause.AstDdlClause113(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_event_notifications 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropEventNotifications dropEventNotifications)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause114 result = new AstDdlClause.AstDdlClause114(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_event_session 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropEventSession dropEventSession)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause115 result = new AstDdlClause.AstDdlClause115(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_external_data_source 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropExternalDataSource dropExternalDataSource)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause116 result = new AstDdlClause.AstDdlClause116(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_external_file_format 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropExternalFileFormat dropExternalFileFormat)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause117 result = new AstDdlClause.AstDdlClause117(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_external_library 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropExternalLibrary dropExternalLibrary)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause118 result = new AstDdlClause.AstDdlClause118(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_external_resource_pool 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropExternalResourcePool dropExternalResourcePool)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause119 result = new AstDdlClause.AstDdlClause119(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_external_table 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropExternalTable dropExternalTable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause120 result = new AstDdlClause.AstDdlClause120(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_fulltext_catalog 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropFulltextCatalog dropFulltextCatalog)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause121 result = new AstDdlClause.AstDdlClause121(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_fulltext_index 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropFulltextIndex dropFulltextIndex)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause122 result = new AstDdlClause.AstDdlClause122(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_fulltext_stoplist 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropFulltextStoplist dropFulltextStoplist)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause123 result = new AstDdlClause.AstDdlClause123(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_function 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropFunction dropFunction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause124 result = new AstDdlClause.AstDdlClause124(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_index 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropIndex dropIndex)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause125 result = new AstDdlClause.AstDdlClause125(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_login 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropLogin dropLogin)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause126 result = new AstDdlClause.AstDdlClause126(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_master_key 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropMasterKey dropMasterKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause127 result = new AstDdlClause.AstDdlClause127(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_message_type 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropMessageType dropMessageType)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause128 result = new AstDdlClause.AstDdlClause128(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_partition_function 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropPartitionFunction dropPartitionFunction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause129 result = new AstDdlClause.AstDdlClause129(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_partition_scheme 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropPartitionScheme dropPartitionScheme)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause130 result = new AstDdlClause.AstDdlClause130(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_procedure 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropProcedure dropProcedure)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause131 result = new AstDdlClause.AstDdlClause131(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_queue 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropQueue dropQueue)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause132 result = new AstDdlClause.AstDdlClause132(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_remote_service_binding 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropRemoteServiceBinding dropRemoteServiceBinding)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause133 result = new AstDdlClause.AstDdlClause133(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_resource_pool 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropResourcePool dropResourcePool)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause134 result = new AstDdlClause.AstDdlClause134(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_route 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropRoute dropRoute)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause135 result = new AstDdlClause.AstDdlClause135(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_rule 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropRule dropRule)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause136 result = new AstDdlClause.AstDdlClause136(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_schema 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropSchema dropSchema)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause137 result = new AstDdlClause.AstDdlClause137(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_search_property_list 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropSearchPropertyList dropSearchPropertyList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause138 result = new AstDdlClause.AstDdlClause138(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_security_policy 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropSecurityPolicy dropSecurityPolicy)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause139 result = new AstDdlClause.AstDdlClause139(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_sequence 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropSequence dropSequence)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause140 result = new AstDdlClause.AstDdlClause140(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_server_audit 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropServerAudit dropServerAudit)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause141 result = new AstDdlClause.AstDdlClause141(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_server_audit_specification 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropServerAuditSpecification dropServerAuditSpecification)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause142 result = new AstDdlClause.AstDdlClause142(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_server_role 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropServerRole dropServerRole)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause143 result = new AstDdlClause.AstDdlClause143(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_service 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropService dropService)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause144 result = new AstDdlClause.AstDdlClause144(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_signature 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropSignature dropSignature)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause145 result = new AstDdlClause.AstDdlClause145(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_statistics 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropStatistics dropStatistics)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause146 result = new AstDdlClause.AstDdlClause146(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_statistics_id_azure_dw_and_pdw 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropStatisticsIdAzureDwAndPdw dropStatisticsIdAzureDwAndPdw)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause147 result = new AstDdlClause.AstDdlClause147(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_symmetric_key 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropSymmetricKey dropSymmetricKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause148 result = new AstDdlClause.AstDdlClause148(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_synonym 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropSynonym dropSynonym)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause149 result = new AstDdlClause.AstDdlClause149(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_table 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropTable dropTable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause150 result = new AstDdlClause.AstDdlClause150(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_trigger 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropTrigger dropTrigger)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause151 result = new AstDdlClause.AstDdlClause151(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_type 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropType dropType)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause152 result = new AstDdlClause.AstDdlClause152(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_user 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropUser dropUser)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause153 result = new AstDdlClause.AstDdlClause153(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_view 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropView dropView)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause154 result = new AstDdlClause.AstDdlClause154(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_workload_group 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropWorkloadGroup dropWorkloadGroup)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause155 result = new AstDdlClause.AstDdlClause155(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    drop_xml_schema_collection 
        /// </summary>
        public static AstDdlClause DdlClause(AstDropXmlSchemaCollection dropXmlSchemaCollection)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause156 result = new AstDdlClause.AstDdlClause156(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    disable_trigger 
        /// </summary>
        public static AstDdlClause DdlClause(AstDisableTrigger disableTrigger)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause157 result = new AstDdlClause.AstDdlClause157(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    enable_trigger 
        /// </summary>
        public static AstDdlClause DdlClause(AstEnableTrigger enableTrigger)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause158 result = new AstDdlClause.AstDdlClause158(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    lock_table 
        /// </summary>
        public static AstDdlClause DdlClause(AstLockTable lockTable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause159 result = new AstDdlClause.AstDdlClause159(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    truncate_table 
        /// </summary>
        public static AstDdlClause DdlClause(AstTruncateTable truncateTable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause160 result = new AstDdlClause.AstDdlClause160(arguments);
            return result;
        }
        
        /// <summary>
        /// ddl_clause : 
        ///    update_statistics 
        /// </summary>
        public static AstDdlClause DdlClause(AstUpdateStatistics updateStatistics)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDdlClause.AstDdlClause161 result = new AstDdlClause.AstDdlClause161(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// backup_statement
    /// 	 : backup_database
    /// 	 | backup_log
    /// 	 | backup_certificate
    /// 	 | backup_master_key
    /// 	 | backup_service_master_key
    /// </summary>
    public abstract partial class AstBackupStatement : AstRule
    {
        
        protected static string _rule = "backup_statement\r\n\t : backup_database\r\n\t | backup_log\r\n\t | backup_certificate\r\n\t " +
            "| backup_master_key\r\n\t | backup_service_master_key";
        
        /// <summary>
        /// backup_statement : backup_database
        /// </summary>
        public partial class AstBackupStatement1 : AstBackupStatement
        {
            
            internal AstBackupStatement1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupStatement1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupStatement1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupStatement1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupStatement(this);
            }
        }
        /// <summary>
        /// backup_statement : backup_log
        /// </summary>
        public partial class AstBackupStatement2 : AstBackupStatement
        {
            
            internal AstBackupStatement2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupStatement2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupStatement2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupStatement2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupStatement(this);
            }
        }
        /// <summary>
        /// backup_statement : backup_certificate
        /// </summary>
        public partial class AstBackupStatement3 : AstBackupStatement
        {
            
            internal AstBackupStatement3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupStatement3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupStatement3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupStatement3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupStatement(this);
            }
        }
        /// <summary>
        /// backup_statement : backup_master_key
        /// </summary>
        public partial class AstBackupStatement4 : AstBackupStatement
        {
            
            internal AstBackupStatement4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupStatement4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupStatement4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupStatement4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupStatement(this);
            }
        }
        /// <summary>
        /// backup_statement : backup_service_master_key
        /// </summary>
        public partial class AstBackupStatement5 : AstBackupStatement
        {
            
            internal AstBackupStatement5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupStatement5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupStatement5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupStatement5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupStatement(this);
            }
        }
        

        
        internal AstBackupStatement(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstBackupStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBackupStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstBackupStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstBackupStatement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstBackupStatement.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstBackupDatabase), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstBackupLog), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstBackupCertificate), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstBackupMasterKey), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstBackupServiceMasterKey), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// backup_statement : 
        ///    backup_database 
        /// </summary>
        public static AstBackupStatement BackupStatement(AstBackupDatabase backupDatabase)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupStatement.AstBackupStatement1 result = new AstBackupStatement.AstBackupStatement1(arguments);
            return result;
        }
        
        /// <summary>
        /// backup_statement : 
        ///    backup_log 
        /// </summary>
        public static AstBackupStatement BackupStatement(AstBackupLog backupLog)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupStatement.AstBackupStatement2 result = new AstBackupStatement.AstBackupStatement2(arguments);
            return result;
        }
        
        /// <summary>
        /// backup_statement : 
        ///    backup_certificate 
        /// </summary>
        public static AstBackupStatement BackupStatement(AstBackupCertificate backupCertificate)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupStatement.AstBackupStatement3 result = new AstBackupStatement.AstBackupStatement3(arguments);
            return result;
        }
        
        /// <summary>
        /// backup_statement : 
        ///    backup_master_key 
        /// </summary>
        public static AstBackupStatement BackupStatement(AstBackupMasterKey backupMasterKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupStatement.AstBackupStatement4 result = new AstBackupStatement.AstBackupStatement4(arguments);
            return result;
        }
        
        /// <summary>
        /// backup_statement : 
        ///    backup_service_master_key 
        /// </summary>
        public static AstBackupStatement BackupStatement(AstBackupServiceMasterKey backupServiceMasterKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupStatement.AstBackupStatement5 result = new AstBackupStatement.AstBackupStatement5(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// cfl_statement
    /// 	 : block_statement
    /// 	 | break_statement
    /// 	 | continue_statement
    /// 	 | goto_statement
    /// 	 | if_statement
    /// 	 | return_statement
    /// 	 | throw_statement
    /// 	 | try_catch_statement
    /// 	 | waitfor_statement
    /// 	 | while_statement
    /// 	 | print_statement
    /// 	 | raiseerror_statement
    /// </summary>
    public abstract partial class AstCflStatement : AstRule
    {
        
        protected static string _rule = @"cfl_statement
	 : block_statement
	 | break_statement
	 | continue_statement
	 | goto_statement
	 | if_statement
	 | return_statement
	 | throw_statement
	 | try_catch_statement
	 | waitfor_statement
	 | while_statement
	 | print_statement
	 | raiseerror_statement";
        
        /// <summary>
        /// cfl_statement : block_statement
        /// </summary>
        public partial class AstCflStatement1 : AstCflStatement
        {
            
            internal AstCflStatement1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCflStatement1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCflStatement1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCflStatement1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCflStatement(this);
            }
        }
        /// <summary>
        /// cfl_statement : break_statement
        /// </summary>
        public partial class AstCflStatement2 : AstCflStatement
        {
            
            internal AstCflStatement2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCflStatement2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCflStatement2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCflStatement2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCflStatement(this);
            }
        }
        /// <summary>
        /// cfl_statement : continue_statement
        /// </summary>
        public partial class AstCflStatement3 : AstCflStatement
        {
            
            internal AstCflStatement3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCflStatement3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCflStatement3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCflStatement3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCflStatement(this);
            }
        }
        /// <summary>
        /// cfl_statement : goto_statement
        /// </summary>
        public partial class AstCflStatement4 : AstCflStatement
        {
            
            internal AstCflStatement4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCflStatement4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCflStatement4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCflStatement4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCflStatement(this);
            }
        }
        /// <summary>
        /// cfl_statement : if_statement
        /// </summary>
        public partial class AstCflStatement5 : AstCflStatement
        {
            
            internal AstCflStatement5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCflStatement5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCflStatement5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCflStatement5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCflStatement(this);
            }
        }
        /// <summary>
        /// cfl_statement : return_statement
        /// </summary>
        public partial class AstCflStatement6 : AstCflStatement
        {
            
            internal AstCflStatement6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCflStatement6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCflStatement6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCflStatement6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCflStatement(this);
            }
        }
        /// <summary>
        /// cfl_statement : throw_statement
        /// </summary>
        public partial class AstCflStatement7 : AstCflStatement
        {
            
            internal AstCflStatement7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCflStatement7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCflStatement7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCflStatement7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCflStatement(this);
            }
        }
        /// <summary>
        /// cfl_statement : try_catch_statement
        /// </summary>
        public partial class AstCflStatement8 : AstCflStatement
        {
            
            internal AstCflStatement8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCflStatement8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCflStatement8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCflStatement8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCflStatement(this);
            }
        }
        /// <summary>
        /// cfl_statement : waitfor_statement
        /// </summary>
        public partial class AstCflStatement9 : AstCflStatement
        {
            
            internal AstCflStatement9(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCflStatement9(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCflStatement9(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCflStatement9(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCflStatement(this);
            }
        }
        /// <summary>
        /// cfl_statement : while_statement
        /// </summary>
        public partial class AstCflStatement10 : AstCflStatement
        {
            
            internal AstCflStatement10(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCflStatement10(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCflStatement10(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCflStatement10(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCflStatement(this);
            }
        }
        /// <summary>
        /// cfl_statement : print_statement
        /// </summary>
        public partial class AstCflStatement11 : AstCflStatement
        {
            
            internal AstCflStatement11(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCflStatement11(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCflStatement11(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCflStatement11(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCflStatement(this);
            }
        }
        /// <summary>
        /// cfl_statement : raiseerror_statement
        /// </summary>
        public partial class AstCflStatement12 : AstCflStatement
        {
            
            internal AstCflStatement12(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCflStatement12(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCflStatement12(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCflStatement12(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCflStatement(this);
            }
        }
        

        
        internal AstCflStatement(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCflStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCflStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstCflStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCflStatement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCflStatement.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstBlockStatement), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstBreakStatement), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstContinueStatement), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstGotoStatement), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstIfStatement), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstReturnStatement), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstThrowStatement), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstTryCatchStatement), false, false))
                {
                    return 8;
                }
                if (AstRoot.Eval(list[0], typeof(AstWaitforStatement), false, false))
                {
                    return 9;
                }
                if (AstRoot.Eval(list[0], typeof(AstWhileStatement), false, false))
                {
                    return 10;
                }
                if (AstRoot.Eval(list[0], typeof(AstPrintStatement), false, false))
                {
                    return 11;
                }
                if (AstRoot.Eval(list[0], typeof(AstRaiseerrorStatement), false, false))
                {
                    return 12;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// cfl_statement : 
        ///    block_statement 
        /// </summary>
        public static AstCflStatement CflStatement(AstBlockStatement blockStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCflStatement.AstCflStatement1 result = new AstCflStatement.AstCflStatement1(arguments);
            return result;
        }
        
        /// <summary>
        /// cfl_statement : 
        ///    break_statement 
        /// </summary>
        public static AstCflStatement CflStatement(AstBreakStatement breakStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCflStatement.AstCflStatement2 result = new AstCflStatement.AstCflStatement2(arguments);
            return result;
        }
        
        /// <summary>
        /// cfl_statement : 
        ///    continue_statement 
        /// </summary>
        public static AstCflStatement CflStatement(AstContinueStatement continueStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCflStatement.AstCflStatement3 result = new AstCflStatement.AstCflStatement3(arguments);
            return result;
        }
        
        /// <summary>
        /// cfl_statement : 
        ///    goto_statement 
        /// </summary>
        public static AstCflStatement CflStatement(AstGotoStatement gotoStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCflStatement.AstCflStatement4 result = new AstCflStatement.AstCflStatement4(arguments);
            return result;
        }
        
        /// <summary>
        /// cfl_statement : 
        ///    if_statement 
        /// </summary>
        public static AstCflStatement CflStatement(AstIfStatement ifStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCflStatement.AstCflStatement5 result = new AstCflStatement.AstCflStatement5(arguments);
            return result;
        }
        
        /// <summary>
        /// cfl_statement : 
        ///    return_statement 
        /// </summary>
        public static AstCflStatement CflStatement(AstReturnStatement returnStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCflStatement.AstCflStatement6 result = new AstCflStatement.AstCflStatement6(arguments);
            return result;
        }
        
        /// <summary>
        /// cfl_statement : 
        ///    throw_statement 
        /// </summary>
        public static AstCflStatement CflStatement(AstThrowStatement throwStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCflStatement.AstCflStatement7 result = new AstCflStatement.AstCflStatement7(arguments);
            return result;
        }
        
        /// <summary>
        /// cfl_statement : 
        ///    try_catch_statement 
        /// </summary>
        public static AstCflStatement CflStatement(AstTryCatchStatement tryCatchStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCflStatement.AstCflStatement8 result = new AstCflStatement.AstCflStatement8(arguments);
            return result;
        }
        
        /// <summary>
        /// cfl_statement : 
        ///    waitfor_statement 
        /// </summary>
        public static AstCflStatement CflStatement(AstWaitforStatement waitforStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCflStatement.AstCflStatement9 result = new AstCflStatement.AstCflStatement9(arguments);
            return result;
        }
        
        /// <summary>
        /// cfl_statement : 
        ///    while_statement 
        /// </summary>
        public static AstCflStatement CflStatement(AstWhileStatement whileStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCflStatement.AstCflStatement10 result = new AstCflStatement.AstCflStatement10(arguments);
            return result;
        }
        
        /// <summary>
        /// cfl_statement : 
        ///    print_statement 
        /// </summary>
        public static AstCflStatement CflStatement(AstPrintStatement printStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCflStatement.AstCflStatement11 result = new AstCflStatement.AstCflStatement11(arguments);
            return result;
        }
        
        /// <summary>
        /// cfl_statement : 
        ///    raiseerror_statement 
        /// </summary>
        public static AstCflStatement CflStatement(AstRaiseerrorStatement raiseerrorStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCflStatement.AstCflStatement12 result = new AstCflStatement.AstCflStatement12(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// break_statement
    /// 	 : BREAK  SEMI?
    /// </summary>
    public partial class AstBreakStatement : AstCflStatement
    {
        
        protected static string _rule = "break_statement\r\n\t : BREAK  SEMI?";
        
        internal AstBreakStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstBreakStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBreakStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBreakStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBreakStatement(this);
        }
    }
    
    /// <summary>
    /// continue_statement
    /// 	 : CONTINUE  SEMI?
    /// </summary>
    public partial class AstContinueStatement : AstCflStatement
    {
        
        protected static string _rule = "continue_statement\r\n\t : CONTINUE  SEMI?";
        
        internal AstContinueStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstContinueStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstContinueStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstContinueStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContinueStatement(this);
        }
    }
    
    /// <summary>
    /// goto_statement
    /// 	 : GOTO  code_location_id  SEMI?
    /// 	 | code_location_id  COLON  SEMI?
    /// </summary>
    public abstract partial class AstGotoStatement : AstCflStatement
    {
        
        protected static string _rule = "goto_statement\r\n\t : GOTO  code_location_id  SEMI?\r\n\t | code_location_id  COLON  S" +
            "EMI?";
        
        /// <summary>
        /// goto_statement : GOTO  code_location_id  SEMI?
        /// </summary>
        public partial class AstGotoStatement1 : AstGotoStatement
        {
            
            internal AstGotoStatement1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstGotoStatement1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstGotoStatement1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstGotoStatement1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGotoStatement(this);
            }
        }
        /// <summary>
        /// goto_statement : code_location_id  COLON  SEMI?
        /// </summary>
        public partial class AstGotoStatement2 : AstGotoStatement
        {
            
            internal AstGotoStatement2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstGotoStatement2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstGotoStatement2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstGotoStatement2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGotoStatement(this);
            }
        }
        

        
        internal AstGotoStatement(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstGotoStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstGotoStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstGotoStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstGotoStatement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstGotoStatement.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstCodeLocationId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstCodeLocationId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// goto_statement : 
        ///    GOTO code_location_id SEMI? 
        /// </summary>
        public static AstGotoStatement GotoStatement(AstCodeLocationId codeLocationId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstGotoStatement.AstGotoStatement1 result = new AstGotoStatement.AstGotoStatement1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// throw_statement
    /// 	 : THROW  (throw_error_number  COMMA  throw_message  COMMA  throw_state)?  SEMI?
    /// </summary>
    public partial class AstThrowStatement : AstCflStatement
    {
        
        protected static string _rule = "throw_statement\r\n\t : THROW  (throw_error_number  COMMA  throw_message  COMMA  thr" +
            "ow_state)?  SEMI?";
        
        internal AstThrowStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstThrowStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstThrowStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstThrowStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowStatement(this);
        }
        
        /// <summary>
        /// throw_statement : 
        ///    THROW throw_error_number , throw_message , throw_state SEMI? 
        /// </summary>
        public static AstThrowStatement ThrowStatement(AstThrowErrorNumber throwErrorNumber, AstThrowMessage throwMessage, AstThrowState throwState)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstThrowStatement result = new AstThrowStatement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// try_catch_statement
    /// 	 : BEGIN  TRY  SEMI?  try_clauses = sql_clauses  END  TRY  SEMI?  BEGIN  CATCH  SEMI?  catch_clauses = sql_clauses  END  CATCH  SEMI?
    /// </summary>
    public partial class AstTryCatchStatement : AstCflStatement
    {
        
        protected static string _rule = "try_catch_statement\r\n\t : BEGIN  TRY  SEMI?  try_clauses = sql_clauses  END  TRY  " +
            "SEMI?  BEGIN  CATCH  SEMI?  catch_clauses = sql_clauses  END  CATCH  SEMI?";
        
        internal AstTryCatchStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTryCatchStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTryCatchStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTryCatchStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTryCatchStatement(this);
        }
        
        /// <summary>
        /// try_catch_statement : 
        ///    BEGIN TRY SEMI? try_clauses=sql_clauses END TRY SEMI? BEGIN CATCH SEMI? catch_clauses=sql_clauses END CATCH SEMI? 
        /// </summary>
        public static AstTryCatchStatement TryCatchStatement(AstSqlClauses tryClauses, AstSqlClauses catchClauses)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTryCatchStatement result = new AstTryCatchStatement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// raiseerror_statement
    /// 	 : RAISERROR  LR_BRACKET  msg = decimal_string_local_id  COMMA  severity = constant_local_id  COMMA  state = constant_local_id  constant_local_ids?  RR_BRACKET  (WITH  log_seterror_nowait)?  SEMI?
    /// 	 | RAISERROR  decimal  formatstring = string_local_id_double_quote_id  decimal_string_locals?
    /// </summary>
    public abstract partial class AstRaiseerrorStatement : AstCflStatement
    {
        
        protected static string _rule = @"raiseerror_statement
	 : RAISERROR  LR_BRACKET  msg = decimal_string_local_id  COMMA  severity = constant_local_id  COMMA  state = constant_local_id  constant_local_ids?  RR_BRACKET  (WITH  log_seterror_nowait)?  SEMI?
	 | RAISERROR  decimal  formatstring = string_local_id_double_quote_id  decimal_string_locals?";
        
        /// <summary>
        /// raiseerror_statement : RAISERROR  LR_BRACKET  msg = decimal_string_local_id  COMMA  severity = constant_local_id  COMMA  state = constant_local_id  constant_local_ids?  RR_BRACKET  (WITH  log_seterror_nowait)?  SEMI?
        /// </summary>
        public partial class AstRaiseerrorStatement1 : AstRaiseerrorStatement
        {
            
            internal AstRaiseerrorStatement1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRaiseerrorStatement1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRaiseerrorStatement1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRaiseerrorStatement1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRaiseerrorStatement(this);
            }
        }
        /// <summary>
        /// raiseerror_statement : RAISERROR  decimal  formatstring = string_local_id_double_quote_id  decimal_string_locals?
        /// </summary>
        public partial class AstRaiseerrorStatement2 : AstRaiseerrorStatement
        {
            
            internal AstRaiseerrorStatement2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRaiseerrorStatement2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRaiseerrorStatement2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRaiseerrorStatement2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRaiseerrorStatement(this);
            }
        }
        

        
        internal AstRaiseerrorStatement(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstRaiseerrorStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRaiseerrorStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstRaiseerrorStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstRaiseerrorStatement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstRaiseerrorStatement.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 5))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimalStringLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstConstantLocalId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstConstantLocalId), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstConstantLocalIds), true, false))
                            {
                                if (AstRoot.Eval(list[4], typeof(AstLogSeterrorNowait), false, false))
                                {
                                    return 1;
                                }
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringLocalIdDoubleQuoteId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstDecimalStringLocals), true, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// raiseerror_statement : 
        ///    RAISERROR ( msg=decimal_string_local_id , severity=constant_local_id , state=constant_local_id constant_local_ids? ) WITH log_seterror_nowait SEMI? 
        /// </summary>
        public static AstRaiseerrorStatement RaiseerrorStatement(AstDecimalStringLocalId msg, AstConstantLocalId severity, AstConstantLocalId state, AstConstantLocalIds constantLocalIds, AstLogSeterrorNowait logSeterrorNowait)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRaiseerrorStatement.AstRaiseerrorStatement1 result = new AstRaiseerrorStatement.AstRaiseerrorStatement1(arguments);
            return result;
        }
        
        /// <summary>
        /// raiseerror_statement : 
        ///    RAISERROR decimal formatstring=string_local_id_double_quote_id decimal_string_locals? 
        /// </summary>
        public static AstRaiseerrorStatement RaiseerrorStatement(AstDecimal @decimal, AstStringLocalIdDoubleQuoteId formatstring, AstDecimalStringLocals decimalStringLocals)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRaiseerrorStatement.AstRaiseerrorStatement2 result = new AstRaiseerrorStatement.AstRaiseerrorStatement2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// another_statement
    /// 	 : declare_statement
    /// 	 | execute_statement
    /// 	 | cursor_statement
    /// 	 | conversation_statement
    /// 	 | create_contract
    /// 	 | create_queue
    /// 	 | alter_queue
    /// 	 | kill_statement
    /// 	 | message_statement
    /// 	 | security_statement
    /// 	 | set_statement
    /// 	 | transaction_statement
    /// 	 | use_statement
    /// 	 | setuser_statement
    /// 	 | reconfigure_statement
    /// 	 | shutdown_statement
    /// 	 | checkpoint_statement
    /// </summary>
    public abstract partial class AstAnotherStatement : AstRule
    {
        
        protected static string _rule = @"another_statement
	 : declare_statement
	 | execute_statement
	 | cursor_statement
	 | conversation_statement
	 | create_contract
	 | create_queue
	 | alter_queue
	 | kill_statement
	 | message_statement
	 | security_statement
	 | set_statement
	 | transaction_statement
	 | use_statement
	 | setuser_statement
	 | reconfigure_statement
	 | shutdown_statement
	 | checkpoint_statement";
        
        /// <summary>
        /// another_statement : declare_statement
        /// </summary>
        public partial class AstAnotherStatement1 : AstAnotherStatement
        {
            
            internal AstAnotherStatement1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnotherStatement1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnotherStatement1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnotherStatement1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnotherStatement(this);
            }
        }
        /// <summary>
        /// another_statement : execute_statement
        /// </summary>
        public partial class AstAnotherStatement2 : AstAnotherStatement
        {
            
            internal AstAnotherStatement2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnotherStatement2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnotherStatement2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnotherStatement2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnotherStatement(this);
            }
        }
        /// <summary>
        /// another_statement : cursor_statement
        /// </summary>
        public partial class AstAnotherStatement3 : AstAnotherStatement
        {
            
            internal AstAnotherStatement3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnotherStatement3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnotherStatement3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnotherStatement3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnotherStatement(this);
            }
        }
        /// <summary>
        /// another_statement : conversation_statement
        /// </summary>
        public partial class AstAnotherStatement4 : AstAnotherStatement
        {
            
            internal AstAnotherStatement4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnotherStatement4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnotherStatement4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnotherStatement4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnotherStatement(this);
            }
        }
        /// <summary>
        /// another_statement : create_contract
        /// </summary>
        public partial class AstAnotherStatement5 : AstAnotherStatement
        {
            
            internal AstAnotherStatement5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnotherStatement5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnotherStatement5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnotherStatement5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnotherStatement(this);
            }
        }
        /// <summary>
        /// another_statement : create_queue
        /// </summary>
        public partial class AstAnotherStatement6 : AstAnotherStatement
        {
            
            internal AstAnotherStatement6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnotherStatement6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnotherStatement6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnotherStatement6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnotherStatement(this);
            }
        }
        /// <summary>
        /// another_statement : alter_queue
        /// </summary>
        public partial class AstAnotherStatement7 : AstAnotherStatement
        {
            
            internal AstAnotherStatement7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnotherStatement7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnotherStatement7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnotherStatement7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnotherStatement(this);
            }
        }
        /// <summary>
        /// another_statement : kill_statement
        /// </summary>
        public partial class AstAnotherStatement8 : AstAnotherStatement
        {
            
            internal AstAnotherStatement8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnotherStatement8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnotherStatement8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnotherStatement8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnotherStatement(this);
            }
        }
        /// <summary>
        /// another_statement : message_statement
        /// </summary>
        public partial class AstAnotherStatement9 : AstAnotherStatement
        {
            
            internal AstAnotherStatement9(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnotherStatement9(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnotherStatement9(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnotherStatement9(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnotherStatement(this);
            }
        }
        /// <summary>
        /// another_statement : security_statement
        /// </summary>
        public partial class AstAnotherStatement10 : AstAnotherStatement
        {
            
            internal AstAnotherStatement10(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnotherStatement10(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnotherStatement10(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnotherStatement10(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnotherStatement(this);
            }
        }
        /// <summary>
        /// another_statement : set_statement
        /// </summary>
        public partial class AstAnotherStatement11 : AstAnotherStatement
        {
            
            internal AstAnotherStatement11(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnotherStatement11(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnotherStatement11(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnotherStatement11(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnotherStatement(this);
            }
        }
        /// <summary>
        /// another_statement : transaction_statement
        /// </summary>
        public partial class AstAnotherStatement12 : AstAnotherStatement
        {
            
            internal AstAnotherStatement12(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnotherStatement12(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnotherStatement12(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnotherStatement12(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnotherStatement(this);
            }
        }
        /// <summary>
        /// another_statement : use_statement
        /// </summary>
        public partial class AstAnotherStatement13 : AstAnotherStatement
        {
            
            internal AstAnotherStatement13(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnotherStatement13(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnotherStatement13(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnotherStatement13(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnotherStatement(this);
            }
        }
        /// <summary>
        /// another_statement : setuser_statement
        /// </summary>
        public partial class AstAnotherStatement14 : AstAnotherStatement
        {
            
            internal AstAnotherStatement14(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnotherStatement14(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnotherStatement14(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnotherStatement14(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnotherStatement(this);
            }
        }
        /// <summary>
        /// another_statement : reconfigure_statement
        /// </summary>
        public partial class AstAnotherStatement15 : AstAnotherStatement
        {
            
            internal AstAnotherStatement15(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnotherStatement15(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnotherStatement15(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnotherStatement15(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnotherStatement(this);
            }
        }
        /// <summary>
        /// another_statement : shutdown_statement
        /// </summary>
        public partial class AstAnotherStatement16 : AstAnotherStatement
        {
            
            internal AstAnotherStatement16(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnotherStatement16(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnotherStatement16(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnotherStatement16(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnotherStatement(this);
            }
        }
        /// <summary>
        /// another_statement : checkpoint_statement
        /// </summary>
        public partial class AstAnotherStatement17 : AstAnotherStatement
        {
            
            internal AstAnotherStatement17(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnotherStatement17(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnotherStatement17(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnotherStatement17(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnotherStatement(this);
            }
        }
        

        
        internal AstAnotherStatement(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAnotherStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAnotherStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstAnotherStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAnotherStatement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAnotherStatement.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDeclareStatement), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstExecuteStatement), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstCursorStatement), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstConversationStatement), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateContract), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateQueue), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterQueue), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstKillStatement), false, false))
                {
                    return 8;
                }
                if (AstRoot.Eval(list[0], typeof(AstMessageStatement), false, false))
                {
                    return 9;
                }
                if (AstRoot.Eval(list[0], typeof(AstSecurityStatement), false, false))
                {
                    return 10;
                }
                if (AstRoot.Eval(list[0], typeof(AstSetStatement), false, false))
                {
                    return 11;
                }
                if (AstRoot.Eval(list[0], typeof(AstTransactionStatement), false, false))
                {
                    return 12;
                }
                if (AstRoot.Eval(list[0], typeof(AstUseStatement), false, false))
                {
                    return 13;
                }
                if (AstRoot.Eval(list[0], typeof(AstSetuserStatement), false, false))
                {
                    return 14;
                }
                if (AstRoot.Eval(list[0], typeof(AstReconfigureStatement), false, false))
                {
                    return 15;
                }
                if (AstRoot.Eval(list[0], typeof(AstShutdownStatement), false, false))
                {
                    return 16;
                }
                if (AstRoot.Eval(list[0], typeof(AstCheckpointStatement), false, false))
                {
                    return 17;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// another_statement : 
        ///    declare_statement 
        /// </summary>
        public static AstAnotherStatement AnotherStatement(AstDeclareStatement declareStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnotherStatement.AstAnotherStatement1 result = new AstAnotherStatement.AstAnotherStatement1(arguments);
            return result;
        }
        
        /// <summary>
        /// another_statement : 
        ///    execute_statement 
        /// </summary>
        public static AstAnotherStatement AnotherStatement(AstExecuteStatement executeStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnotherStatement.AstAnotherStatement2 result = new AstAnotherStatement.AstAnotherStatement2(arguments);
            return result;
        }
        
        /// <summary>
        /// another_statement : 
        ///    cursor_statement 
        /// </summary>
        public static AstAnotherStatement AnotherStatement(AstCursorStatement cursorStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnotherStatement.AstAnotherStatement3 result = new AstAnotherStatement.AstAnotherStatement3(arguments);
            return result;
        }
        
        /// <summary>
        /// another_statement : 
        ///    conversation_statement 
        /// </summary>
        public static AstAnotherStatement AnotherStatement(AstConversationStatement conversationStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnotherStatement.AstAnotherStatement4 result = new AstAnotherStatement.AstAnotherStatement4(arguments);
            return result;
        }
        
        /// <summary>
        /// another_statement : 
        ///    create_contract 
        /// </summary>
        public static AstAnotherStatement AnotherStatement(AstCreateContract createContract)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnotherStatement.AstAnotherStatement5 result = new AstAnotherStatement.AstAnotherStatement5(arguments);
            return result;
        }
        
        /// <summary>
        /// another_statement : 
        ///    create_queue 
        /// </summary>
        public static AstAnotherStatement AnotherStatement(AstCreateQueue createQueue)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnotherStatement.AstAnotherStatement6 result = new AstAnotherStatement.AstAnotherStatement6(arguments);
            return result;
        }
        
        /// <summary>
        /// another_statement : 
        ///    alter_queue 
        /// </summary>
        public static AstAnotherStatement AnotherStatement(AstAlterQueue alterQueue)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnotherStatement.AstAnotherStatement7 result = new AstAnotherStatement.AstAnotherStatement7(arguments);
            return result;
        }
        
        /// <summary>
        /// another_statement : 
        ///    kill_statement 
        /// </summary>
        public static AstAnotherStatement AnotherStatement(AstKillStatement killStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnotherStatement.AstAnotherStatement8 result = new AstAnotherStatement.AstAnotherStatement8(arguments);
            return result;
        }
        
        /// <summary>
        /// another_statement : 
        ///    message_statement 
        /// </summary>
        public static AstAnotherStatement AnotherStatement(AstMessageStatement messageStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnotherStatement.AstAnotherStatement9 result = new AstAnotherStatement.AstAnotherStatement9(arguments);
            return result;
        }
        
        /// <summary>
        /// another_statement : 
        ///    security_statement 
        /// </summary>
        public static AstAnotherStatement AnotherStatement(AstSecurityStatement securityStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnotherStatement.AstAnotherStatement10 result = new AstAnotherStatement.AstAnotherStatement10(arguments);
            return result;
        }
        
        /// <summary>
        /// another_statement : 
        ///    set_statement 
        /// </summary>
        public static AstAnotherStatement AnotherStatement(AstSetStatement setStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnotherStatement.AstAnotherStatement11 result = new AstAnotherStatement.AstAnotherStatement11(arguments);
            return result;
        }
        
        /// <summary>
        /// another_statement : 
        ///    transaction_statement 
        /// </summary>
        public static AstAnotherStatement AnotherStatement(AstTransactionStatement transactionStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnotherStatement.AstAnotherStatement12 result = new AstAnotherStatement.AstAnotherStatement12(arguments);
            return result;
        }
        
        /// <summary>
        /// another_statement : 
        ///    use_statement 
        /// </summary>
        public static AstAnotherStatement AnotherStatement(AstUseStatement useStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnotherStatement.AstAnotherStatement13 result = new AstAnotherStatement.AstAnotherStatement13(arguments);
            return result;
        }
        
        /// <summary>
        /// another_statement : 
        ///    setuser_statement 
        /// </summary>
        public static AstAnotherStatement AnotherStatement(AstSetuserStatement setuserStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnotherStatement.AstAnotherStatement14 result = new AstAnotherStatement.AstAnotherStatement14(arguments);
            return result;
        }
        
        /// <summary>
        /// another_statement : 
        ///    reconfigure_statement 
        /// </summary>
        public static AstAnotherStatement AnotherStatement(AstReconfigureStatement reconfigureStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnotherStatement.AstAnotherStatement15 result = new AstAnotherStatement.AstAnotherStatement15(arguments);
            return result;
        }
        
        /// <summary>
        /// another_statement : 
        ///    shutdown_statement 
        /// </summary>
        public static AstAnotherStatement AnotherStatement(AstShutdownStatement shutdownStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnotherStatement.AstAnotherStatement16 result = new AstAnotherStatement.AstAnotherStatement16(arguments);
            return result;
        }
        
        /// <summary>
        /// another_statement : 
        ///    checkpoint_statement 
        /// </summary>
        public static AstAnotherStatement AnotherStatement(AstCheckpointStatement checkpointStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnotherStatement.AstAnotherStatement17 result = new AstAnotherStatement.AstAnotherStatement17(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_assembly_start
    /// 	 : ALTER  ASSEMBLY
    /// </summary>
    public partial class AstAlterAssemblyStart : AstRule
    {
        
        protected static string _rule = "alter_assembly_start\r\n\t : ALTER  ASSEMBLY";
        
        internal AstAlterAssemblyStart(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterAssemblyStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterAssemblyStart(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterAssemblyStart(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyStart(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_drop_multiple_files
    /// 	 : ALL
    /// 	 | multiple_local_files
    /// </summary>
    public abstract partial class AstAlterAssemblyDropMultipleFiles : AstRule
    {
        
        protected static string _rule = "alter_assembly_drop_multiple_files\r\n\t : ALL\r\n\t | multiple_local_files";
        
        /// <summary>
        /// alter_assembly_drop_multiple_files : ALL
        /// </summary>
        public partial class AstAlterAssemblyDropMultipleFiles1 : AstAlterAssemblyDropMultipleFiles
        {
            
            internal AstAlterAssemblyDropMultipleFiles1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAssemblyDropMultipleFiles1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAssemblyDropMultipleFiles1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAssemblyDropMultipleFiles1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAssemblyDropMultipleFiles(this);
            }
        }
        /// <summary>
        /// alter_assembly_drop_multiple_files : multiple_local_files
        /// </summary>
        public partial class AstAlterAssemblyDropMultipleFiles2 : AstAlterAssemblyDropMultipleFiles
        {
            
            internal AstAlterAssemblyDropMultipleFiles2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAssemblyDropMultipleFiles2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAssemblyDropMultipleFiles2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAssemblyDropMultipleFiles2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAssemblyDropMultipleFiles(this);
            }
        }
        

        
        internal AstAlterAssemblyDropMultipleFiles(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAlterAssemblyDropMultipleFiles(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAssemblyDropMultipleFiles(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterAssemblyDropMultipleFiles(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterAssemblyDropMultipleFiles Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterAssemblyDropMultipleFiles.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstMultipleLocalFiles), false, false))
                {
                    return 2;
                }
            }
            if ((list.Count == 0))
            {
                return 1;
            }
            return 0;
        }
        
        /// <summary>
        /// alter_assembly_drop_multiple_files : 
        ///    multiple_local_files 
        /// </summary>
        public static AstAlterAssemblyDropMultipleFiles AlterAssemblyDropMultipleFiles(AstMultipleLocalFiles multipleLocalFiles)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAssemblyDropMultipleFiles.AstAlterAssemblyDropMultipleFiles2 result = new AstAlterAssemblyDropMultipleFiles.AstAlterAssemblyDropMultipleFiles2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// client_assembly_specifier
    /// 	 : network_file_share
    /// 	 | local_file
    /// 	 | stringtext
    /// </summary>
    public abstract partial class AstClientAssemblySpecifier : AstRule
    {
        
        protected static string _rule = "client_assembly_specifier\r\n\t : network_file_share\r\n\t | local_file\r\n\t | stringtext" +
            "";
        
        /// <summary>
        /// client_assembly_specifier : network_file_share
        /// </summary>
        public partial class AstClientAssemblySpecifier1 : AstClientAssemblySpecifier
        {
            
            internal AstClientAssemblySpecifier1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstClientAssemblySpecifier1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstClientAssemblySpecifier1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstClientAssemblySpecifier1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClientAssemblySpecifier(this);
            }
        }
        /// <summary>
        /// client_assembly_specifier : local_file
        /// </summary>
        public partial class AstClientAssemblySpecifier2 : AstClientAssemblySpecifier
        {
            
            internal AstClientAssemblySpecifier2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstClientAssemblySpecifier2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstClientAssemblySpecifier2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstClientAssemblySpecifier2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClientAssemblySpecifier(this);
            }
        }
        /// <summary>
        /// client_assembly_specifier : stringtext
        /// </summary>
        public partial class AstClientAssemblySpecifier3 : AstClientAssemblySpecifier
        {
            
            internal AstClientAssemblySpecifier3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstClientAssemblySpecifier3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstClientAssemblySpecifier3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstClientAssemblySpecifier3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClientAssemblySpecifier(this);
            }
        }
        

        
        internal AstClientAssemblySpecifier(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstClientAssemblySpecifier(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstClientAssemblySpecifier(Position p) : 
                base(p)
        {
        }
        
        internal AstClientAssemblySpecifier(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstClientAssemblySpecifier Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstClientAssemblySpecifier.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstNetworkFileShare), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalFile), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// client_assembly_specifier : 
        ///    network_file_share 
        /// </summary>
        public static AstClientAssemblySpecifier ClientAssemblySpecifier(AstNetworkFileShare networkFileShare)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstClientAssemblySpecifier.AstClientAssemblySpecifier1 result = new AstClientAssemblySpecifier.AstClientAssemblySpecifier1(arguments);
            return result;
        }
        
        /// <summary>
        /// client_assembly_specifier : 
        ///    local_file 
        /// </summary>
        public static AstClientAssemblySpecifier ClientAssemblySpecifier(AstLocalFile localFile)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstClientAssemblySpecifier.AstClientAssemblySpecifier2 result = new AstClientAssemblySpecifier.AstClientAssemblySpecifier2(arguments);
            return result;
        }
        
        /// <summary>
        /// client_assembly_specifier : 
        ///    stringtext 
        /// </summary>
        public static AstClientAssemblySpecifier ClientAssemblySpecifier(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstClientAssemblySpecifier.AstClientAssemblySpecifier3 result = new AstClientAssemblySpecifier.AstClientAssemblySpecifier3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// assembly_option
    /// 	 : PERMISSION_SET  EQUAL  assembly_permission
    /// 	 | VISIBILITY  EQUAL  on_off
    /// 	 | UNCHECKED  DATA
    /// 	 | assembly_option  COMMA
    /// </summary>
    public abstract partial class AstAssemblyOption : AstRule
    {
        
        protected static string _rule = "assembly_option\r\n\t : PERMISSION_SET  EQUAL  assembly_permission\r\n\t | VISIBILITY  " +
            "EQUAL  on_off\r\n\t | UNCHECKED  DATA\r\n\t | assembly_option  COMMA";
        
        /// <summary>
        /// assembly_option : PERMISSION_SET  EQUAL  assembly_permission
        /// </summary>
        public partial class AstAssemblyOption1 : AstAssemblyOption
        {
            
            internal AstAssemblyOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAssemblyOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAssemblyOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAssemblyOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssemblyOption(this);
            }
        }
        /// <summary>
        /// assembly_option : VISIBILITY  EQUAL  on_off
        /// </summary>
        public partial class AstAssemblyOption2 : AstAssemblyOption
        {
            
            internal AstAssemblyOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAssemblyOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAssemblyOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAssemblyOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssemblyOption(this);
            }
        }
        /// <summary>
        /// assembly_option : UNCHECKED  DATA
        /// </summary>
        public partial class AstAssemblyOption3 : AstAssemblyOption
        {
            
            internal AstAssemblyOption3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAssemblyOption3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAssemblyOption3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAssemblyOption3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssemblyOption(this);
            }
        }
        /// <summary>
        /// assembly_option : assembly_option  COMMA
        /// </summary>
        public partial class AstAssemblyOption4 : AstAssemblyOption
        {
            
            internal AstAssemblyOption4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAssemblyOption4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAssemblyOption4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAssemblyOption4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssemblyOption(this);
            }
        }
        

        
        internal AstAssemblyOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAssemblyOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAssemblyOption(Position p) : 
                base(p)
        {
        }
        
        internal AstAssemblyOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAssemblyOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAssemblyOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAssemblyPermission), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstAssemblyOption), false, false))
                {
                    return 4;
                }
            }
            if ((list.Count == 0))
            {
                return 3;
            }
            return 0;
        }
        
        /// <summary>
        /// assembly_option : 
        ///    PERMISSION_SET EQUAL assembly_permission 
        /// </summary>
        public static AstAssemblyOption AssemblyOption(AstAssemblyPermission assemblyPermission)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAssemblyOption.AstAssemblyOption1 result = new AstAssemblyOption.AstAssemblyOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// assembly_option : 
        ///    VISIBILITY EQUAL on_off 
        /// </summary>
        public static AstAssemblyOption AssemblyOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAssemblyOption.AstAssemblyOption2 result = new AstAssemblyOption.AstAssemblyOption2(arguments);
            return result;
        }
        
        /// <summary>
        /// assembly_option : 
        ///    assembly_option , 
        /// </summary>
        public static AstAssemblyOption AssemblyOption(AstAssemblyOption assemblyOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAssemblyOption.AstAssemblyOption4 result = new AstAssemblyOption.AstAssemblyOption4(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// file_path
    /// 	 : file_directory_path_separator  file_path
    /// 	 | id_
    /// </summary>
    public abstract partial class AstFilePath : AstRule
    {
        
        protected static string _rule = "file_path\r\n\t : file_directory_path_separator  file_path\r\n\t | id_";
        
        /// <summary>
        /// file_path : file_directory_path_separator  file_path
        /// </summary>
        public partial class AstFilePath1 : AstFilePath
        {
            
            internal AstFilePath1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstFilePath1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstFilePath1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstFilePath1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFilePath(this);
            }
        }
        /// <summary>
        /// file_path : id_
        /// </summary>
        public partial class AstFilePath2 : AstFilePath
        {
            
            internal AstFilePath2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstFilePath2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstFilePath2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstFilePath2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFilePath(this);
            }
        }
        

        
        internal AstFilePath(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstFilePath(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFilePath(Position p) : 
                base(p)
        {
        }
        
        internal AstFilePath(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstFilePath Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstFilePath.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstFileDirectoryPathSeparator), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFilePath), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// file_path : 
        ///    file_directory_path_separator file_path 
        /// </summary>
        public static AstFilePath FilePath(AstFileDirectoryPathSeparator fileDirectoryPathSeparator, AstFilePath filePath)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFilePath.AstFilePath1 result = new AstFilePath.AstFilePath1(arguments);
            return result;
        }
        
        /// <summary>
        /// file_path : 
        ///    id_ 
        /// </summary>
        public static AstFilePath FilePath(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFilePath.AstFilePath2 result = new AstFilePath.AstFilePath2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// multiple_local_files
    /// 	 : multiple_local_file_start  local_file  SINGLE_QUOTE  COMMA
    /// 	 | local_file
    /// </summary>
    public abstract partial class AstMultipleLocalFiles : AstRule
    {
        
        protected static string _rule = "multiple_local_files\r\n\t : multiple_local_file_start  local_file  SINGLE_QUOTE  CO" +
            "MMA\r\n\t | local_file";
        
        /// <summary>
        /// multiple_local_files : multiple_local_file_start  local_file  SINGLE_QUOTE  COMMA
        /// </summary>
        public partial class AstMultipleLocalFiles1 : AstMultipleLocalFiles
        {
            
            internal AstMultipleLocalFiles1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstMultipleLocalFiles1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstMultipleLocalFiles1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstMultipleLocalFiles1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMultipleLocalFiles(this);
            }
        }
        /// <summary>
        /// multiple_local_files : local_file
        /// </summary>
        public partial class AstMultipleLocalFiles2 : AstMultipleLocalFiles
        {
            
            internal AstMultipleLocalFiles2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstMultipleLocalFiles2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstMultipleLocalFiles2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstMultipleLocalFiles2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMultipleLocalFiles(this);
            }
        }
        

        
        internal AstMultipleLocalFiles(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstMultipleLocalFiles(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstMultipleLocalFiles(Position p) : 
                base(p)
        {
        }
        
        internal AstMultipleLocalFiles(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstMultipleLocalFiles Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstMultipleLocalFiles.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstMultipleLocalFileStart), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstLocalFile), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalFile), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// multiple_local_files : 
        ///    multiple_local_file_start local_file \ , 
        /// </summary>
        public static AstMultipleLocalFiles MultipleLocalFiles(AstMultipleLocalFileStart multipleLocalFileStart, AstLocalFile localFile)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstMultipleLocalFiles.AstMultipleLocalFiles1 result = new AstMultipleLocalFiles.AstMultipleLocalFiles1(arguments);
            return result;
        }
        
        /// <summary>
        /// multiple_local_files : 
        ///    local_file 
        /// </summary>
        public static AstMultipleLocalFiles MultipleLocalFiles(AstLocalFile localFile)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstMultipleLocalFiles.AstMultipleLocalFiles2 result = new AstMultipleLocalFiles.AstMultipleLocalFiles2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// binary_content
    /// 	 : stringtext
    /// 	 | binary_
    /// </summary>
    public abstract partial class AstBinaryContent : AstRule
    {
        
        protected static string _rule = "binary_content\r\n\t : stringtext\r\n\t | binary_";
        
        /// <summary>
        /// binary_content : stringtext
        /// </summary>
        public partial class AstBinaryContent1 : AstBinaryContent
        {
            
            internal AstBinaryContent1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBinaryContent1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBinaryContent1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBinaryContent1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBinaryContent(this);
            }
        }
        /// <summary>
        /// binary_content : binary_
        /// </summary>
        public partial class AstBinaryContent2 : AstBinaryContent
        {
            
            internal AstBinaryContent2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBinaryContent2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBinaryContent2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBinaryContent2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBinaryContent(this);
            }
        }
        

        
        internal AstBinaryContent(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstBinaryContent(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBinaryContent(Position p) : 
                base(p)
        {
        }
        
        internal AstBinaryContent(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstBinaryContent Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstBinaryContent.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstBinary), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// binary_content : 
        ///    stringtext 
        /// </summary>
        public static AstBinaryContent BinaryContent(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBinaryContent.AstBinaryContent1 result = new AstBinaryContent.AstBinaryContent1(arguments);
            return result;
        }
        
        /// <summary>
        /// binary_content : 
        ///    binary_ 
        /// </summary>
        public static AstBinaryContent BinaryContent(AstBinary binary)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBinaryContent.AstBinaryContent2 result = new AstBinaryContent.AstBinaryContent2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// by_password_crypt
    /// 	 : decryption_by_pwd
    /// 	 | encryption_by_pwd
    /// </summary>
    public abstract partial class AstByPasswordCrypt : AstRule
    {
        
        protected static string _rule = "by_password_crypt\r\n\t : decryption_by_pwd\r\n\t | encryption_by_pwd";
        
        /// <summary>
        /// by_password_crypt : decryption_by_pwd
        /// </summary>
        public partial class AstByPasswordCrypt1 : AstByPasswordCrypt
        {
            
            internal AstByPasswordCrypt1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstByPasswordCrypt1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstByPasswordCrypt1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstByPasswordCrypt1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitByPasswordCrypt(this);
            }
        }
        /// <summary>
        /// by_password_crypt : encryption_by_pwd
        /// </summary>
        public partial class AstByPasswordCrypt2 : AstByPasswordCrypt
        {
            
            internal AstByPasswordCrypt2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstByPasswordCrypt2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstByPasswordCrypt2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstByPasswordCrypt2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitByPasswordCrypt(this);
            }
        }
        

        
        internal AstByPasswordCrypt(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstByPasswordCrypt(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstByPasswordCrypt(Position p) : 
                base(p)
        {
        }
        
        internal AstByPasswordCrypt(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstByPasswordCrypt Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstByPasswordCrypt.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecryptionByPwd), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstEncryptionByPwd), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// by_password_crypt : 
        ///    decryption_by_pwd 
        /// </summary>
        public static AstByPasswordCrypt ByPasswordCrypt(AstDecryptionByPwd decryptionByPwd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstByPasswordCrypt.AstByPasswordCrypt1 result = new AstByPasswordCrypt.AstByPasswordCrypt1(arguments);
            return result;
        }
        
        /// <summary>
        /// by_password_crypt : 
        ///    encryption_by_pwd 
        /// </summary>
        public static AstByPasswordCrypt ByPasswordCrypt(AstEncryptionByPwd encryptionByPwd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstByPasswordCrypt.AstByPasswordCrypt2 result = new AstByPasswordCrypt.AstByPasswordCrypt2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// encryption_by_pwd
    /// 	 : ENCRYPTION  BY  PASSWORD  EQUAL  encryption_pwd = stringtext
    /// </summary>
    public partial class AstEncryptionByPwd : AstRule
    {
        
        protected static string _rule = "encryption_by_pwd\r\n\t : ENCRYPTION  BY  PASSWORD  EQUAL  encryption_pwd = stringte" +
            "xt";
        
        internal AstEncryptionByPwd(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstEncryptionByPwd(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstEncryptionByPwd(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstEncryptionByPwd(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEncryptionByPwd(this);
        }
        
        /// <summary>
        /// encryption_by_pwd : 
        ///    ENCRYPTION BY PASSWORD EQUAL encryption_pwd=stringtext 
        /// </summary>
        public static AstEncryptionByPwd EncryptionByPwd(AstStringtext encryptionPwd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEncryptionByPwd result = new AstEncryptionByPwd(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// decryption_by_pwd
    /// 	 : DECRYPTION  BY  PASSWORD  EQUAL  encryption_pwd = stringtext
    /// </summary>
    public partial class AstDecryptionByPwd : AstRule
    {
        
        protected static string _rule = "decryption_by_pwd\r\n\t : DECRYPTION  BY  PASSWORD  EQUAL  encryption_pwd = stringte" +
            "xt";
        
        internal AstDecryptionByPwd(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDecryptionByPwd(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDecryptionByPwd(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDecryptionByPwd(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecryptionByPwd(this);
        }
        
        /// <summary>
        /// decryption_by_pwd : 
        ///    DECRYPTION BY PASSWORD EQUAL encryption_pwd=stringtext 
        /// </summary>
        public static AstDecryptionByPwd DecryptionByPwd(AstStringtext encryptionPwd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDecryptionByPwd result = new AstDecryptionByPwd(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// drop_asymmetric_key
    /// 	 : DROP  ASYMMETRIC  KEY  key_name = id_  (REMOVE  PROVIDER  KEY)?
    /// </summary>
    public partial class AstDropAsymmetricKey : AstDdlClause
    {
        
        protected static string _rule = "drop_asymmetric_key\r\n\t : DROP  ASYMMETRIC  KEY  key_name = id_  (REMOVE  PROVIDER" +
            "  KEY)?";
        
        internal AstDropAsymmetricKey(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDropAsymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropAsymmetricKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropAsymmetricKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAsymmetricKey(this);
        }
        
        /// <summary>
        /// drop_asymmetric_key : 
        ///    DROP ASYMMETRIC KEY key_name=id_ REMOVE PROVIDER KEY 
        /// </summary>
        public static AstDropAsymmetricKey DropAsymmetricKey(AstId keyName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDropAsymmetricKey result = new AstDropAsymmetricKey(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// authorization_grantee
    /// 	 : principal_name = id_
    /// 	 | SCHEMA  OWNER
    /// </summary>
    public abstract partial class AstAuthorizationGrantee : AstRule
    {
        
        protected static string _rule = "authorization_grantee\r\n\t : principal_name = id_\r\n\t | SCHEMA  OWNER";
        
        /// <summary>
        /// authorization_grantee : principal_name = id_
        /// </summary>
        public partial class AstAuthorizationGrantee1 : AstAuthorizationGrantee
        {
            
            internal AstAuthorizationGrantee1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAuthorizationGrantee1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAuthorizationGrantee1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAuthorizationGrantee1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAuthorizationGrantee(this);
            }
        }
        /// <summary>
        /// authorization_grantee : SCHEMA  OWNER
        /// </summary>
        public partial class AstAuthorizationGrantee2 : AstAuthorizationGrantee
        {
            
            internal AstAuthorizationGrantee2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAuthorizationGrantee2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAuthorizationGrantee2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAuthorizationGrantee2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAuthorizationGrantee(this);
            }
        }
        

        
        internal AstAuthorizationGrantee(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAuthorizationGrantee(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAuthorizationGrantee(Position p) : 
                base(p)
        {
        }
        
        internal AstAuthorizationGrantee(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAuthorizationGrantee Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAuthorizationGrantee.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 1;
                }
            }
            if ((list.Count == 0))
            {
                return 2;
            }
            return 0;
        }
        
        /// <summary>
        /// authorization_grantee : 
        ///    principal_name=id_ 
        /// </summary>
        public static AstAuthorizationGrantee AuthorizationGrantee(AstId principalName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAuthorizationGrantee.AstAuthorizationGrantee1 result = new AstAuthorizationGrantee.AstAuthorizationGrantee1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// class_type_for_grant
    /// 	 : COLUMN  encryption_master  KEY
    /// 	 | NOTIFICATION  database_object_server
    /// 	 | object_type_for_grant
    /// </summary>
    public abstract partial class AstClassTypeForGrant : AstRule
    {
        
        protected static string _rule = "class_type_for_grant\r\n\t : COLUMN  encryption_master  KEY\r\n\t | NOTIFICATION  datab" +
            "ase_object_server\r\n\t | object_type_for_grant";
        
        /// <summary>
        /// class_type_for_grant : COLUMN  encryption_master  KEY
        /// </summary>
        public partial class AstClassTypeForGrant1 : AstClassTypeForGrant
        {
            
            internal AstClassTypeForGrant1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstClassTypeForGrant1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstClassTypeForGrant1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstClassTypeForGrant1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClassTypeForGrant(this);
            }
        }
        /// <summary>
        /// class_type_for_grant : NOTIFICATION  database_object_server
        /// </summary>
        public partial class AstClassTypeForGrant2 : AstClassTypeForGrant
        {
            
            internal AstClassTypeForGrant2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstClassTypeForGrant2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstClassTypeForGrant2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstClassTypeForGrant2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClassTypeForGrant(this);
            }
        }
        /// <summary>
        /// class_type_for_grant : object_type_for_grant
        /// </summary>
        public partial class AstClassTypeForGrant3 : AstClassTypeForGrant
        {
            
            internal AstClassTypeForGrant3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstClassTypeForGrant3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstClassTypeForGrant3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstClassTypeForGrant3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClassTypeForGrant(this);
            }
        }
        

        
        internal AstClassTypeForGrant(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstClassTypeForGrant(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstClassTypeForGrant(Position p) : 
                base(p)
        {
        }
        
        internal AstClassTypeForGrant(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstClassTypeForGrant Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstClassTypeForGrant.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstEncryptionMaster), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDatabaseObjectServer), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstObjectTypeForGrant), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// class_type_for_grant : 
        ///    COLUMN encryption_master KEY 
        /// </summary>
        public static AstClassTypeForGrant ClassTypeForGrant(AstEncryptionMaster encryptionMaster)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstClassTypeForGrant.AstClassTypeForGrant1 result = new AstClassTypeForGrant.AstClassTypeForGrant1(arguments);
            return result;
        }
        
        /// <summary>
        /// class_type_for_grant : 
        ///    NOTIFICATION database_object_server 
        /// </summary>
        public static AstClassTypeForGrant ClassTypeForGrant(AstDatabaseObjectServer databaseObjectServer)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstClassTypeForGrant.AstClassTypeForGrant2 result = new AstClassTypeForGrant.AstClassTypeForGrant2(arguments);
            return result;
        }
        
        /// <summary>
        /// class_type_for_grant : 
        ///    object_type_for_grant 
        /// </summary>
        public static AstClassTypeForGrant ClassTypeForGrant(AstObjectTypeForGrant objectTypeForGrant)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstClassTypeForGrant.AstClassTypeForGrant3 result = new AstClassTypeForGrant.AstClassTypeForGrant3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_group_options_listener
    /// 	 : alter_availability_group_options_listener_add
    /// 	 | alter_availability_group_options_listener_modify
    /// 	 | alter_availability_group_options_listener_restart
    /// </summary>
    public abstract partial class AstAlterAvailabilityGroupOptionsListener : AstRule
    {
        
        protected static string _rule = "alter_availability_group_options_listener\r\n\t : alter_availability_group_options_l" +
            "istener_add\r\n\t | alter_availability_group_options_listener_modify\r\n\t | alter_ava" +
            "ilability_group_options_listener_restart";
        
        /// <summary>
        /// alter_availability_group_options_listener : alter_availability_group_options_listener_add
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionsListener1 : AstAlterAvailabilityGroupOptionsListener
        {
            
            internal AstAlterAvailabilityGroupOptionsListener1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsListener1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsListener1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsListener1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionsListener(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options_listener : alter_availability_group_options_listener_modify
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionsListener2 : AstAlterAvailabilityGroupOptionsListener
        {
            
            internal AstAlterAvailabilityGroupOptionsListener2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsListener2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsListener2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsListener2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionsListener(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options_listener : alter_availability_group_options_listener_restart
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionsListener3 : AstAlterAvailabilityGroupOptionsListener
        {
            
            internal AstAlterAvailabilityGroupOptionsListener3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsListener3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsListener3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsListener3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionsListener(this);
            }
        }
        

        
        internal AstAlterAvailabilityGroupOptionsListener(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListener(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListener(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListener(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterAvailabilityGroupOptionsListener Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterAvailabilityGroupOptionsListener.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAlterAvailabilityGroupOptionsListenerAdd), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAvailabilityGroupOptionsListenerModify), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAvailabilityGroupOptionsListenerRestart), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_availability_group_options_listener : 
        ///    alter_availability_group_options_listener_add 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListener AlterAvailabilityGroupOptionsListener(AstAlterAvailabilityGroupOptionsListenerAdd alterAvailabilityGroupOptionsListenerAdd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsListener.AstAlterAvailabilityGroupOptionsListener1 result = new AstAlterAvailabilityGroupOptionsListener.AstAlterAvailabilityGroupOptionsListener1(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options_listener : 
        ///    alter_availability_group_options_listener_modify 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListener AlterAvailabilityGroupOptionsListener(AstAlterAvailabilityGroupOptionsListenerModify alterAvailabilityGroupOptionsListenerModify)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsListener.AstAlterAvailabilityGroupOptionsListener2 result = new AstAlterAvailabilityGroupOptionsListener.AstAlterAvailabilityGroupOptionsListener2(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options_listener : 
        ///    alter_availability_group_options_listener_restart 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListener AlterAvailabilityGroupOptionsListener(AstAlterAvailabilityGroupOptionsListenerRestart alterAvailabilityGroupOptionsListenerRestart)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsListener.AstAlterAvailabilityGroupOptionsListener3 result = new AstAlterAvailabilityGroupOptionsListener.AstAlterAvailabilityGroupOptionsListener3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_group_options_listener_modify
    /// 	 : MODIFY  LISTENER  (ADD  IP  LR_BRACKET  (range_ip_v4 | ipv6)  RR_BRACKET | PORT  EQUAL  decimal)
    /// </summary>
    public partial class AstAlterAvailabilityGroupOptionsListenerModify : AstRule
    {
        
        protected static string _rule = "alter_availability_group_options_listener_modify\r\n\t : MODIFY  LISTENER  (ADD  IP " +
            " LR_BRACKET  (range_ip_v4 | ipv6)  RR_BRACKET | PORT  EQUAL  decimal)";
        
        internal AstAlterAvailabilityGroupOptionsListenerModify(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListenerModify(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListenerModify(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListenerModify(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupOptionsListenerModify(this);
        }
        
        /// <summary>
        /// alter_availability_group_options_listener_modify : 
        ///    MODIFY LISTENER ADD IP ( range_ip_v4 ) 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListenerModify AlterAvailabilityGroupOptionsListenerModify(AstRangeIpV4 rangeIpV4)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsListenerModify result = new AstAlterAvailabilityGroupOptionsListenerModify(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options_listener_modify : 
        ///    MODIFY LISTENER ADD IP ( ipv6 ) 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListenerModify AlterAvailabilityGroupOptionsListenerModify(AstIpv6 ipv6)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsListenerModify result = new AstAlterAvailabilityGroupOptionsListenerModify(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options_listener_modify : 
        ///    MODIFY LISTENER PORT EQUAL decimal 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListenerModify AlterAvailabilityGroupOptionsListenerModify(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsListenerModify result = new AstAlterAvailabilityGroupOptionsListenerModify(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_group_options_listener_add
    /// 	 : ADD  LISTENER  listener_name = stringtext  LR_BRACKET  (alter_availability_group_options_listener_dhcp | WITH  IP  LR_BRACKET  alter_availability_group_options_listener_ip)  RR_BRACKET
    /// </summary>
    public partial class AstAlterAvailabilityGroupOptionsListenerAdd : AstRule
    {
        
        protected static string _rule = "alter_availability_group_options_listener_add\r\n\t : ADD  LISTENER  listener_name =" +
            " stringtext  LR_BRACKET  (alter_availability_group_options_listener_dhcp | WITH " +
            " IP  LR_BRACKET  alter_availability_group_options_listener_ip)  RR_BRACKET";
        
        internal AstAlterAvailabilityGroupOptionsListenerAdd(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListenerAdd(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListenerAdd(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListenerAdd(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupOptionsListenerAdd(this);
        }
        
        /// <summary>
        /// alter_availability_group_options_listener_add : 
        ///    ADD LISTENER listener_name=stringtext ( alter_availability_group_options_listener_dhcp ) 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListenerAdd AlterAvailabilityGroupOptionsListenerAdd(AstStringtext listenerName, AstAlterAvailabilityGroupOptionsListenerDhcp alterAvailabilityGroupOptionsListenerDhcp)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsListenerAdd result = new AstAlterAvailabilityGroupOptionsListenerAdd(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options_listener_add : 
        ///    ADD LISTENER listener_name=stringtext ( WITH IP ( alter_availability_group_options_listener_ip ) 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListenerAdd AlterAvailabilityGroupOptionsListenerAdd(AstStringtext listenerName, AstAlterAvailabilityGroupOptionsListenerIp alterAvailabilityGroupOptionsListenerIp)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsListenerAdd result = new AstAlterAvailabilityGroupOptionsListenerAdd(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_group_options_listener_ip
    /// 	 : (COMMA?  LR_BRACKET  (range_ip_comma_v4 | IPV6_ADDR)  RR_BRACKET)+  (COMMA  port = PORT  EQUAL  decimal)?
    /// </summary>
    public partial class AstAlterAvailabilityGroupOptionsListenerIp : AstRule
    {
        
        protected static string _rule = "alter_availability_group_options_listener_ip\r\n\t : (COMMA?  LR_BRACKET  (range_ip_" +
            "comma_v4 | IPV6_ADDR)  RR_BRACKET)+  (COMMA  port = PORT  EQUAL  decimal)?";
        
        internal AstAlterAvailabilityGroupOptionsListenerIp(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListenerIp(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListenerIp(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsListenerIp(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupOptionsListenerIp(this);
        }
        
        /// <summary>
        /// alter_availability_group_options_listener_ip : 
        ///    ,? ( range_ip_comma_v4 ) , port=PORT EQUAL decimal 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListenerIp AlterAvailabilityGroupOptionsListenerIp(AstRangeIpCommaV4 rangeIpCommaV4, AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsListenerIp result = new AstAlterAvailabilityGroupOptionsListenerIp(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options_listener_ip : 
        ///    ,? ( IPV6_ADDR ) , port=PORT EQUAL decimal 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsListenerIp AlterAvailabilityGroupOptionsListenerIp(String txt, AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsListenerIp result = new AstAlterAvailabilityGroupOptionsListenerIp(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_replicat_primary
    /// 	 : ENDPOINT_URL  EQUAL  endpoint_url = stringtext
    /// 	 | availability_mode
    /// 	 | FAILOVER_MODE  EQUAL  failover = auto_manual
    /// 	 | seeding_mode
    /// 	 | backup_priority
    /// </summary>
    public abstract partial class AstAlterAvailabilityReplicatPrimary : AstRule
    {
        
        protected static string _rule = "alter_availability_replicat_primary\r\n\t : ENDPOINT_URL  EQUAL  endpoint_url = stri" +
            "ngtext\r\n\t | availability_mode\r\n\t | FAILOVER_MODE  EQUAL  failover = auto_manual\r" +
            "\n\t | seeding_mode\r\n\t | backup_priority";
        
        /// <summary>
        /// alter_availability_replicat_primary : ENDPOINT_URL  EQUAL  endpoint_url = stringtext
        /// </summary>
        public partial class AstAlterAvailabilityReplicatPrimary1 : AstAlterAvailabilityReplicatPrimary
        {
            
            internal AstAlterAvailabilityReplicatPrimary1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityReplicatPrimary1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityReplicatPrimary1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityReplicatPrimary1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicatPrimary(this);
            }
        }
        /// <summary>
        /// alter_availability_replicat_primary : availability_mode
        /// </summary>
        public partial class AstAlterAvailabilityReplicatPrimary2 : AstAlterAvailabilityReplicatPrimary
        {
            
            internal AstAlterAvailabilityReplicatPrimary2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityReplicatPrimary2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityReplicatPrimary2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityReplicatPrimary2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicatPrimary(this);
            }
        }
        /// <summary>
        /// alter_availability_replicat_primary : FAILOVER_MODE  EQUAL  failover = auto_manual
        /// </summary>
        public partial class AstAlterAvailabilityReplicatPrimary3 : AstAlterAvailabilityReplicatPrimary
        {
            
            internal AstAlterAvailabilityReplicatPrimary3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityReplicatPrimary3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityReplicatPrimary3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityReplicatPrimary3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicatPrimary(this);
            }
        }
        /// <summary>
        /// alter_availability_replicat_primary : seeding_mode
        /// </summary>
        public partial class AstAlterAvailabilityReplicatPrimary4 : AstAlterAvailabilityReplicatPrimary
        {
            
            internal AstAlterAvailabilityReplicatPrimary4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityReplicatPrimary4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityReplicatPrimary4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityReplicatPrimary4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicatPrimary(this);
            }
        }
        /// <summary>
        /// alter_availability_replicat_primary : backup_priority
        /// </summary>
        public partial class AstAlterAvailabilityReplicatPrimary5 : AstAlterAvailabilityReplicatPrimary
        {
            
            internal AstAlterAvailabilityReplicatPrimary5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityReplicatPrimary5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityReplicatPrimary5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityReplicatPrimary5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicatPrimary(this);
            }
        }
        

        
        internal AstAlterAvailabilityReplicatPrimary(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAlterAvailabilityReplicatPrimary(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityReplicatPrimary(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityReplicatPrimary(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterAvailabilityReplicatPrimary Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterAvailabilityReplicatPrimary.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstAvailabilityMode), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstAutoManual), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstSeedingMode), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstBackupPriority), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_availability_replicat_primary : 
        ///    ENDPOINT_URL EQUAL endpoint_url=stringtext 
        /// </summary>
        public static AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary(AstStringtext endpointUrl)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary1 result = new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary1(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_replicat_primary : 
        ///    availability_mode 
        /// </summary>
        public static AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary(AstAvailabilityMode availabilityMode)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary2 result = new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary2(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_replicat_primary : 
        ///    FAILOVER_MODE EQUAL failover=auto_manual 
        /// </summary>
        public static AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary(AstAutoManual failover)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary3 result = new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary3(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_replicat_primary : 
        ///    seeding_mode 
        /// </summary>
        public static AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary(AstSeedingMode seedingMode)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary4 result = new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary4(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_replicat_primary : 
        ///    backup_priority 
        /// </summary>
        public static AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary(AstBackupPriority backupPriority)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary5 result = new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary5(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_primary_role
    /// 	 : allow_connections
    /// 	 | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  routing_list  RR_BRACKET
    /// 	 | SESSION_TIMEOUT  EQUAL  session_timeout = decimal
    /// </summary>
    public abstract partial class AstAlterAvailabilityPrimaryRole : AstRule
    {
        
        protected static string _rule = "alter_availability_primary_role\r\n\t : allow_connections\r\n\t | READ_ONLY_ROUTING_LIS" +
            "T  EQUAL  LR_BRACKET  routing_list  RR_BRACKET\r\n\t | SESSION_TIMEOUT  EQUAL  sess" +
            "ion_timeout = decimal";
        
        /// <summary>
        /// alter_availability_primary_role : allow_connections
        /// </summary>
        public partial class AstAlterAvailabilityPrimaryRole1 : AstAlterAvailabilityPrimaryRole
        {
            
            internal AstAlterAvailabilityPrimaryRole1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityPrimaryRole1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityPrimaryRole1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityPrimaryRole1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityPrimaryRole(this);
            }
        }
        /// <summary>
        /// alter_availability_primary_role : READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  routing_list  RR_BRACKET
        /// </summary>
        public partial class AstAlterAvailabilityPrimaryRole2 : AstAlterAvailabilityPrimaryRole
        {
            
            internal AstAlterAvailabilityPrimaryRole2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityPrimaryRole2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityPrimaryRole2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityPrimaryRole2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityPrimaryRole(this);
            }
        }
        /// <summary>
        /// alter_availability_primary_role : SESSION_TIMEOUT  EQUAL  session_timeout = decimal
        /// </summary>
        public partial class AstAlterAvailabilityPrimaryRole3 : AstAlterAvailabilityPrimaryRole
        {
            
            internal AstAlterAvailabilityPrimaryRole3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityPrimaryRole3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityPrimaryRole3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityPrimaryRole3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityPrimaryRole(this);
            }
        }
        

        
        internal AstAlterAvailabilityPrimaryRole(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAlterAvailabilityPrimaryRole(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityPrimaryRole(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityPrimaryRole(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterAvailabilityPrimaryRole Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterAvailabilityPrimaryRole.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAllowConnections), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstRoutingList), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_availability_primary_role : 
        ///    allow_connections 
        /// </summary>
        public static AstAlterAvailabilityPrimaryRole AlterAvailabilityPrimaryRole(AstAllowConnections allowConnections)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole1 result = new AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole1(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_primary_role : 
        ///    READ_ONLY_ROUTING_LIST EQUAL ( routing_list ) 
        /// </summary>
        public static AstAlterAvailabilityPrimaryRole AlterAvailabilityPrimaryRole(AstRoutingList routingList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole2 result = new AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole2(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_primary_role : 
        ///    SESSION_TIMEOUT EQUAL session_timeout=decimal 
        /// </summary>
        public static AstAlterAvailabilityPrimaryRole AlterAvailabilityPrimaryRole(AstDecimal sessionTimeout)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole3 result = new AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_group_options_replicat
    /// 	 : alter_availability_replicat_add
    /// 	 | REMOVE  REPLICA  ON  server_instance_txt
    /// 	 | alter_availability_replicat_modify
    /// </summary>
    public abstract partial class AstAlterAvailabilityGroupOptionsReplicat : AstRule
    {
        
        protected static string _rule = "alter_availability_group_options_replicat\r\n\t : alter_availability_replicat_add\r\n\t" +
            " | REMOVE  REPLICA  ON  server_instance_txt\r\n\t | alter_availability_replicat_mod" +
            "ify";
        
        /// <summary>
        /// alter_availability_group_options_replicat : alter_availability_replicat_add
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionsReplicat1 : AstAlterAvailabilityGroupOptionsReplicat
        {
            
            internal AstAlterAvailabilityGroupOptionsReplicat1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsReplicat1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsReplicat1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsReplicat1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionsReplicat(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options_replicat : REMOVE  REPLICA  ON  server_instance_txt
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionsReplicat2 : AstAlterAvailabilityGroupOptionsReplicat
        {
            
            internal AstAlterAvailabilityGroupOptionsReplicat2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsReplicat2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsReplicat2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsReplicat2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionsReplicat(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options_replicat : alter_availability_replicat_modify
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionsReplicat3 : AstAlterAvailabilityGroupOptionsReplicat
        {
            
            internal AstAlterAvailabilityGroupOptionsReplicat3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsReplicat3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsReplicat3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsReplicat3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionsReplicat(this);
            }
        }
        

        
        internal AstAlterAvailabilityGroupOptionsReplicat(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsReplicat(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsReplicat(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsReplicat(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterAvailabilityGroupOptionsReplicat Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterAvailabilityGroupOptionsReplicat.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAlterAvailabilityReplicatAdd), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstServerInstanceTxt), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAvailabilityReplicatModify), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_availability_group_options_replicat : 
        ///    alter_availability_replicat_add 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsReplicat AlterAvailabilityGroupOptionsReplicat(AstAlterAvailabilityReplicatAdd alterAvailabilityReplicatAdd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsReplicat.AstAlterAvailabilityGroupOptionsReplicat1 result = new AstAlterAvailabilityGroupOptionsReplicat.AstAlterAvailabilityGroupOptionsReplicat1(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options_replicat : 
        ///    REMOVE REPLICA ON server_instance_txt 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsReplicat AlterAvailabilityGroupOptionsReplicat(AstServerInstanceTxt serverInstanceTxt)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsReplicat.AstAlterAvailabilityGroupOptionsReplicat2 result = new AstAlterAvailabilityGroupOptionsReplicat.AstAlterAvailabilityGroupOptionsReplicat2(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options_replicat : 
        ///    alter_availability_replicat_modify 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsReplicat AlterAvailabilityGroupOptionsReplicat(AstAlterAvailabilityReplicatModify alterAvailabilityReplicatModify)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsReplicat.AstAlterAvailabilityGroupOptionsReplicat3 result = new AstAlterAvailabilityGroupOptionsReplicat.AstAlterAvailabilityGroupOptionsReplicat3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_group_options_group
    /// 	 : JOIN
    /// 	 | JOIN  AVAILABILITY  GROUP  ON  (COMMA?  ag_name = stringtext  WITH  LR_BRACKET  (listener_url  COMMA  availability_mode  COMMA  failover_mode_manuel  COMMA  seeding_mode)  RR_BRACKET)+
    /// 	 | MODIFY  AVAILABILITY  GROUP  ON  (COMMA?  ag_name_modified = stringtext  WITH  LR_BRACKET  (listener_url  (COMMA?  availability_mode)?  (COMMA?  failover_mode_manuel)?  (COMMA?  seeding_mode)?)  RR_BRACKET)+
    /// </summary>
    public abstract partial class AstAlterAvailabilityGroupOptionsGroup : AstRule
    {
        
        protected static string _rule = @"alter_availability_group_options_group
	 : JOIN
	 | JOIN  AVAILABILITY  GROUP  ON  (COMMA?  ag_name = stringtext  WITH  LR_BRACKET  (listener_url  COMMA  availability_mode  COMMA  failover_mode_manuel  COMMA  seeding_mode)  RR_BRACKET)+
	 | MODIFY  AVAILABILITY  GROUP  ON  (COMMA?  ag_name_modified = stringtext  WITH  LR_BRACKET  (listener_url  (COMMA?  availability_mode)?  (COMMA?  failover_mode_manuel)?  (COMMA?  seeding_mode)?)  RR_BRACKET)+";
        
        /// <summary>
        /// alter_availability_group_options_group : JOIN
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionsGroup1 : AstAlterAvailabilityGroupOptionsGroup
        {
            
            internal AstAlterAvailabilityGroupOptionsGroup1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsGroup1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsGroup1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsGroup1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionsGroup(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options_group : JOIN  AVAILABILITY  GROUP  ON  (COMMA?  ag_name = stringtext  WITH  LR_BRACKET  (listener_url  COMMA  availability_mode  COMMA  failover_mode_manuel  COMMA  seeding_mode)  RR_BRACKET)+
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionsGroup2 : AstAlterAvailabilityGroupOptionsGroup
        {
            
            internal AstAlterAvailabilityGroupOptionsGroup2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsGroup2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsGroup2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsGroup2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionsGroup(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options_group : MODIFY  AVAILABILITY  GROUP  ON  (COMMA?  ag_name_modified = stringtext  WITH  LR_BRACKET  (listener_url  (COMMA?  availability_mode)?  (COMMA?  failover_mode_manuel)?  (COMMA?  seeding_mode)?)  RR_BRACKET)+
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionsGroup3 : AstAlterAvailabilityGroupOptionsGroup
        {
            
            internal AstAlterAvailabilityGroupOptionsGroup3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsGroup3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsGroup3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsGroup3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionsGroup(this);
            }
        }
        

        
        internal AstAlterAvailabilityGroupOptionsGroup(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsGroup(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsGroup(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsGroup(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterAvailabilityGroupOptionsGroup Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterAvailabilityGroupOptionsGroup.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 5))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstListenerUrl), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstAvailabilityMode), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstFailoverModeManuel), false, false))
                            {
                                if (AstRoot.Eval(list[4], typeof(AstSeedingMode), false, false))
                                {
                                    return 2;
                                }
                            }
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstListenerUrl), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstAvailabilityMode), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstFailoverModeManuel), false, false))
                            {
                                if (AstRoot.Eval(list[4], typeof(AstSeedingMode), false, false))
                                {
                                    return 3;
                                }
                            }
                        }
                    }
                }
            }
            if ((list.Count == 0))
            {
                return 1;
            }
            return 0;
        }
        
        /// <summary>
        /// alter_availability_group_options_group : 
        ///    JOIN AVAILABILITY GROUP ON ,? ag_name=stringtext WITH ( listener_url , availability_mode , failover_mode_manuel , seeding_mode ) 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsGroup AlterAvailabilityGroupOptionsGroup(AstStringtext agName, AstListenerUrl listenerUrl, AstAvailabilityMode availabilityMode, AstFailoverModeManuel failoverModeManuel, AstSeedingMode seedingMode)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsGroup.AstAlterAvailabilityGroupOptionsGroup2 result = new AstAlterAvailabilityGroupOptionsGroup.AstAlterAvailabilityGroupOptionsGroup2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// failover_mode_manuel
    /// 	 : FAILOVER_MODE  EQUAL  MANUAL
    /// </summary>
    public partial class AstFailoverModeManuel : AstRule
    {
        
        protected static string _rule = "failover_mode_manuel\r\n\t : FAILOVER_MODE  EQUAL  MANUAL";
        
        internal AstFailoverModeManuel(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstFailoverModeManuel(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstFailoverModeManuel(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstFailoverModeManuel(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFailoverModeManuel(this);
        }
    }
    
    /// <summary>
    /// alter_availability_group_options_role
    /// 	 : SECONDARY_ROLE  LR_BRACKET  (allow_connections | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  stringtext  RR_BRACKET)
    /// 	 | PRIMARY_ROLE  LR_BRACKET  (allow_connections | READ_ONLY_ROUTING_LIST  EQUAL  (LR_BRACKET  (string_list | NONE)  RR_BRACKET) | SESSION_TIMEOUT  EQUAL  session_timeout = decimal)
    /// </summary>
    public abstract partial class AstAlterAvailabilityGroupOptionsRole : AstRule
    {
        
        protected static string _rule = @"alter_availability_group_options_role
	 : SECONDARY_ROLE  LR_BRACKET  (allow_connections | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  stringtext  RR_BRACKET)
	 | PRIMARY_ROLE  LR_BRACKET  (allow_connections | READ_ONLY_ROUTING_LIST  EQUAL  (LR_BRACKET  (string_list | NONE)  RR_BRACKET) | SESSION_TIMEOUT  EQUAL  session_timeout = decimal)";
        
        /// <summary>
        /// alter_availability_group_options_role : SECONDARY_ROLE  LR_BRACKET  (allow_connections | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  stringtext  RR_BRACKET)
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionsRole1 : AstAlterAvailabilityGroupOptionsRole
        {
            
            internal AstAlterAvailabilityGroupOptionsRole1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsRole1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsRole1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsRole1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionsRole(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options_role : PRIMARY_ROLE  LR_BRACKET  (allow_connections | READ_ONLY_ROUTING_LIST  EQUAL  (LR_BRACKET  (string_list | NONE)  RR_BRACKET) | SESSION_TIMEOUT  EQUAL  session_timeout = decimal)
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionsRole2 : AstAlterAvailabilityGroupOptionsRole
        {
            
            internal AstAlterAvailabilityGroupOptionsRole2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsRole2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsRole2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptionsRole2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionsRole(this);
            }
        }
        

        
        internal AstAlterAvailabilityGroupOptionsRole(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsRole(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsRole(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionsRole(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterAvailabilityGroupOptionsRole Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterAvailabilityGroupOptionsRole.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstAllowConnections), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringList), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstDecimal), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstAllowConnections), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        return 1;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_availability_group_options_role : 
        ///    SECONDARY_ROLE ( allow_connections 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsRole AlterAvailabilityGroupOptionsRole(AstAllowConnections allowConnections)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsRole.AstAlterAvailabilityGroupOptionsRole1 result = new AstAlterAvailabilityGroupOptionsRole.AstAlterAvailabilityGroupOptionsRole1(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options_role : 
        ///    SECONDARY_ROLE ( READ_ONLY_ROUTING_LIST EQUAL ( stringtext ) 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsRole AlterAvailabilityGroupOptionsRole(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsRole.AstAlterAvailabilityGroupOptionsRole1 result = new AstAlterAvailabilityGroupOptionsRole.AstAlterAvailabilityGroupOptionsRole1(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options_role : 
        ///    PRIMARY_ROLE ( READ_ONLY_ROUTING_LIST EQUAL ( string_list ) 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsRole AlterAvailabilityGroupOptionsRole(AstStringList stringList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsRole.AstAlterAvailabilityGroupOptionsRole2 result = new AstAlterAvailabilityGroupOptionsRole.AstAlterAvailabilityGroupOptionsRole2(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options_role : 
        ///    PRIMARY_ROLE ( SESSION_TIMEOUT EQUAL session_timeout=decimal 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionsRole AlterAvailabilityGroupOptionsRole(AstDecimal sessionTimeout)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptionsRole.AstAlterAvailabilityGroupOptionsRole2 result = new AstAlterAvailabilityGroupOptionsRole.AstAlterAvailabilityGroupOptionsRole2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_group_options
    /// 	 : SET  LR_BRACKET  (AUTOMATED_BACKUP_PREFERENCE  EQUAL  primary_secondary_none | FAILURE_CONDITION_LEVEL  EQUAL  decimal | HEALTH_CHECK_TIMEOUT  EQUAL  milliseconds = decimal | DB_FAILOVER  EQUAL  on_off | REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT  EQUAL  decimal  RR_BRACKET)
    /// 	 | alter_availability_group_options_database
    /// 	 | alter_availability_group_options_replicat
    /// 	 | alter_availability_group_options_listener
    /// 	 | alter_availability_group_options_role
    /// 	 | alter_availability_group_options_group
    /// 	 | grant_deny  CREATE  ANY  DATABASE
    /// 	 | FAILOVER
    /// 	 | FORCE_FAILOVER_ALLOW_DATA_LOSS
    /// 	 | OFFLINE
    /// 	 | WITH  LR_BRACKET  DTC_SUPPORT  EQUAL  PER_DB  RR_BRACKET
    /// </summary>
    public abstract partial class AstAlterAvailabilityGroupOptions : AstRule
    {
        
        protected static string _rule = @"alter_availability_group_options
	 : SET  LR_BRACKET  (AUTOMATED_BACKUP_PREFERENCE  EQUAL  primary_secondary_none | FAILURE_CONDITION_LEVEL  EQUAL  decimal | HEALTH_CHECK_TIMEOUT  EQUAL  milliseconds = decimal | DB_FAILOVER  EQUAL  on_off | REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT  EQUAL  decimal  RR_BRACKET)
	 | alter_availability_group_options_database
	 | alter_availability_group_options_replicat
	 | alter_availability_group_options_listener
	 | alter_availability_group_options_role
	 | alter_availability_group_options_group
	 | grant_deny  CREATE  ANY  DATABASE
	 | FAILOVER
	 | FORCE_FAILOVER_ALLOW_DATA_LOSS
	 | OFFLINE
	 | WITH  LR_BRACKET  DTC_SUPPORT  EQUAL  PER_DB  RR_BRACKET";
        
        /// <summary>
        /// alter_availability_group_options : SET  LR_BRACKET  (AUTOMATED_BACKUP_PREFERENCE  EQUAL  primary_secondary_none | FAILURE_CONDITION_LEVEL  EQUAL  decimal | HEALTH_CHECK_TIMEOUT  EQUAL  milliseconds = decimal | DB_FAILOVER  EQUAL  on_off | REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT  EQUAL  decimal  RR_BRACKET)
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions1 : AstAlterAvailabilityGroupOptions
        {
            
            internal AstAlterAvailabilityGroupOptions1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : alter_availability_group_options_database
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions2 : AstAlterAvailabilityGroupOptions
        {
            
            internal AstAlterAvailabilityGroupOptions2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : alter_availability_group_options_replicat
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions3 : AstAlterAvailabilityGroupOptions
        {
            
            internal AstAlterAvailabilityGroupOptions3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : alter_availability_group_options_listener
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions4 : AstAlterAvailabilityGroupOptions
        {
            
            internal AstAlterAvailabilityGroupOptions4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : alter_availability_group_options_role
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions5 : AstAlterAvailabilityGroupOptions
        {
            
            internal AstAlterAvailabilityGroupOptions5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : alter_availability_group_options_group
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions6 : AstAlterAvailabilityGroupOptions
        {
            
            internal AstAlterAvailabilityGroupOptions6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : grant_deny  CREATE  ANY  DATABASE
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions7 : AstAlterAvailabilityGroupOptions
        {
            
            internal AstAlterAvailabilityGroupOptions7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : FAILOVER
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions8 : AstAlterAvailabilityGroupOptions
        {
            
            internal AstAlterAvailabilityGroupOptions8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : FORCE_FAILOVER_ALLOW_DATA_LOSS
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions9 : AstAlterAvailabilityGroupOptions
        {
            
            internal AstAlterAvailabilityGroupOptions9(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions9(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions9(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions9(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : OFFLINE
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions10 : AstAlterAvailabilityGroupOptions
        {
            
            internal AstAlterAvailabilityGroupOptions10(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions10(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions10(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions10(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : WITH  LR_BRACKET  DTC_SUPPORT  EQUAL  PER_DB  RR_BRACKET
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions11 : AstAlterAvailabilityGroupOptions
        {
            
            internal AstAlterAvailabilityGroupOptions11(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions11(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions11(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterAvailabilityGroupOptions11(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        

        
        internal AstAlterAvailabilityGroupOptions(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAlterAvailabilityGroupOptions(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityGroupOptions(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityGroupOptions(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterAvailabilityGroupOptions Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterAvailabilityGroupOptions.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 5))
            {
                if (AstRoot.Eval(list[0], typeof(AstPrimarySecondaryNone), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimal), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstDecimal), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstOnOff), false, false))
                            {
                                if (AstRoot.Eval(list[4], typeof(AstDecimal), false, false))
                                {
                                    return 1;
                                }
                            }
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAlterAvailabilityGroupOptionsDatabase), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAvailabilityGroupOptionsReplicat), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAvailabilityGroupOptionsListener), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAvailabilityGroupOptionsRole), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAvailabilityGroupOptionsGroup), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstGrantDeny), false, false))
                {
                    return 7;
                }
            }
            if ((list.Count == 0))
            {
                return 8;
                return 9;
                return 10;
                return 11;
            }
            return 0;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    SET ( AUTOMATED_BACKUP_PREFERENCE EQUAL primary_secondary_none 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(AstPrimarySecondaryNone primarySecondaryNone)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions1 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions1(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    SET ( FAILURE_CONDITION_LEVEL EQUAL decimal 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions1 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions1(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    SET ( DB_FAILOVER EQUAL on_off 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions1 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions1(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    alter_availability_group_options_database 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(AstAlterAvailabilityGroupOptionsDatabase alterAvailabilityGroupOptionsDatabase)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions2 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions2(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    alter_availability_group_options_replicat 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(AstAlterAvailabilityGroupOptionsReplicat alterAvailabilityGroupOptionsReplicat)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions3 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions3(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    alter_availability_group_options_listener 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(AstAlterAvailabilityGroupOptionsListener alterAvailabilityGroupOptionsListener)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions4 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions4(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    alter_availability_group_options_role 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(AstAlterAvailabilityGroupOptionsRole alterAvailabilityGroupOptionsRole)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions5 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions5(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    alter_availability_group_options_group 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(AstAlterAvailabilityGroupOptionsGroup alterAvailabilityGroupOptionsGroup)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions6 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions6(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    grant_deny CREATE ANY DATABASE 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(AstGrantDeny grantDeny)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions7 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions7(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// broker_contract_name
    /// 	 : (CONTRACT_NAME  EQUAL  (id_ | ANY)  COMMA?)
    /// </summary>
    public partial class AstBrokerContractName : AstRule
    {
        
        protected static string _rule = "broker_contract_name\r\n\t : (CONTRACT_NAME  EQUAL  (id_ | ANY)  COMMA?)";
        
        internal AstBrokerContractName(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstBrokerContractName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBrokerContractName(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBrokerContractName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBrokerContractName(this);
        }
        
        /// <summary>
        /// broker_contract_name : 
        ///    CONTRACT_NAME EQUAL id_ COMMA? 
        /// </summary>
        public static AstBrokerContractName BrokerContractName(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBrokerContractName result = new AstBrokerContractName(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// broker_local_service_name
    /// 	 : (LOCAL_SERVICE_NAME  EQUAL  (DOUBLE_FORWARD_SLASH?  id_ | ANY)  COMMA?)
    /// </summary>
    public partial class AstBrokerLocalServiceName : AstRule
    {
        
        protected static string _rule = "broker_local_service_name\r\n\t : (LOCAL_SERVICE_NAME  EQUAL  (DOUBLE_FORWARD_SLASH?" +
            "  id_ | ANY)  COMMA?)";
        
        internal AstBrokerLocalServiceName(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstBrokerLocalServiceName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBrokerLocalServiceName(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBrokerLocalServiceName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBrokerLocalServiceName(this);
        }
        
        /// <summary>
        /// broker_local_service_name : 
        ///    LOCAL_SERVICE_NAME EQUAL DOUBLE_FORWARD_SLASH? id_ COMMA? 
        /// </summary>
        public static AstBrokerLocalServiceName BrokerLocalServiceName(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBrokerLocalServiceName result = new AstBrokerLocalServiceName(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// broker_remote_service_name
    /// 	 : (REMOTE_SERVICE_NAME  EQUAL  (stringtext | ANY)  COMMA?)
    /// </summary>
    public partial class AstBrokerRemoteServiceName : AstRule
    {
        
        protected static string _rule = "broker_remote_service_name\r\n\t : (REMOTE_SERVICE_NAME  EQUAL  (stringtext | ANY)  " +
            "COMMA?)";
        
        internal AstBrokerRemoteServiceName(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstBrokerRemoteServiceName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBrokerRemoteServiceName(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBrokerRemoteServiceName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBrokerRemoteServiceName(this);
        }
        
        /// <summary>
        /// broker_remote_service_name : 
        ///    REMOTE_SERVICE_NAME EQUAL stringtext COMMA? 
        /// </summary>
        public static AstBrokerRemoteServiceName BrokerRemoteServiceName(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBrokerRemoteServiceName result = new AstBrokerRemoteServiceName(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// broker_priority_level
    /// 	 : (PRIORITY_LEVEL  EQUAL  (decimal | DEFAULT))
    /// </summary>
    public partial class AstBrokerPriorityLevel : AstRule
    {
        
        protected static string _rule = "broker_priority_level\r\n\t : (PRIORITY_LEVEL  EQUAL  (decimal | DEFAULT))";
        
        internal AstBrokerPriorityLevel(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstBrokerPriorityLevel(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBrokerPriorityLevel(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBrokerPriorityLevel(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBrokerPriorityLevel(this);
        }
        
        /// <summary>
        /// broker_priority_level : 
        ///    PRIORITY_LEVEL EQUAL decimal 
        /// </summary>
        public static AstBrokerPriorityLevel BrokerPriorityLevel(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBrokerPriorityLevel result = new AstBrokerPriorityLevel(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// drop_broker_priority
    /// 	 : DROP  BROKER  PRIORITY  ConversationPriorityName = id_
    /// </summary>
    public partial class AstDropBrokerPriority : AstDdlClause
    {
        
        protected static string _rule = "drop_broker_priority\r\n\t : DROP  BROKER  PRIORITY  ConversationPriorityName = id_";
        
        internal AstDropBrokerPriority(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDropBrokerPriority(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropBrokerPriority(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropBrokerPriority(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropBrokerPriority(this);
        }
        
        /// <summary>
        /// drop_broker_priority : 
        ///    DROP BROKER PRIORITY ConversationPriorityName=id_ 
        /// </summary>
        public static AstDropBrokerPriority DropBrokerPriority(AstId conversationPriorityName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDropBrokerPriority result = new AstDropBrokerPriority(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// private_key
    /// 	 : FILE  EQUAL  stringtext  COMMA?
    /// 	 | by_password_crypt  COMMA?
    /// </summary>
    public abstract partial class AstPrivateKey : AstRule
    {
        
        protected static string _rule = "private_key\r\n\t : FILE  EQUAL  stringtext  COMMA?\r\n\t | by_password_crypt  COMMA?";
        
        /// <summary>
        /// private_key : FILE  EQUAL  stringtext  COMMA?
        /// </summary>
        public partial class AstPrivateKey1 : AstPrivateKey
        {
            
            internal AstPrivateKey1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPrivateKey1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPrivateKey1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPrivateKey1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrivateKey(this);
            }
        }
        /// <summary>
        /// private_key : by_password_crypt  COMMA?
        /// </summary>
        public partial class AstPrivateKey2 : AstPrivateKey
        {
            
            internal AstPrivateKey2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPrivateKey2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPrivateKey2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPrivateKey2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrivateKey(this);
            }
        }
        

        
        internal AstPrivateKey(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstPrivateKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPrivateKey(Position p) : 
                base(p)
        {
        }
        
        internal AstPrivateKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstPrivateKey Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstPrivateKey.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstByPasswordCrypt), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// private_key : 
        ///    FILE EQUAL stringtext COMMA? 
        /// </summary>
        public static AstPrivateKey PrivateKey(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPrivateKey.AstPrivateKey1 result = new AstPrivateKey.AstPrivateKey1(arguments);
            return result;
        }
        
        /// <summary>
        /// private_key : 
        ///    by_password_crypt COMMA? 
        /// </summary>
        public static AstPrivateKey PrivateKey(AstByPasswordCrypt byPasswordCrypt)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPrivateKey.AstPrivateKey2 result = new AstPrivateKey.AstPrivateKey2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// drop_contract
    /// 	 : DROP  CONTRACT  dropped_contract_name = id_
    /// </summary>
    public partial class AstDropContract : AstDdlClause
    {
        
        protected static string _rule = "drop_contract\r\n\t : DROP  CONTRACT  dropped_contract_name = id_";
        
        internal AstDropContract(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDropContract(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropContract(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropContract(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropContract(this);
        }
        
        /// <summary>
        /// drop_contract : 
        ///    DROP CONTRACT dropped_contract_name=id_ 
        /// </summary>
        public static AstDropContract DropContract(AstId droppedContractName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDropContract result = new AstDropContract(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// drop_database
    /// 	 : DROP  DATABASE  (IF  EXISTS)?  (COMMA?  database_id)+
    /// </summary>
    public partial class AstDropDatabase : AstDdlClause
    {
        
        protected static string _rule = "drop_database\r\n\t : DROP  DATABASE  (IF  EXISTS)?  (COMMA?  database_id)+";
        
        internal AstDropDatabase(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDropDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropDatabase(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropDatabase(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabase(this);
        }
        
        /// <summary>
        /// drop_database : 
        ///    DROP DATABASE IF EXISTS COMMA? database_id 
        /// </summary>
        public static AstDropDatabase DropDatabase(AstDatabaseId databaseId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDropDatabase result = new AstDropDatabase(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// drop_database_encryption_key
    /// 	 : DROP  DATABASE  ENCRYPTION  KEY
    /// </summary>
    public partial class AstDropDatabaseEncryptionKey : AstDdlClause
    {
        
        protected static string _rule = "drop_database_encryption_key\r\n\t : DROP  DATABASE  ENCRYPTION  KEY";
        
        internal AstDropDatabaseEncryptionKey(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDropDatabaseEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropDatabaseEncryptionKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropDatabaseEncryptionKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabaseEncryptionKey(this);
        }
    }
    
    /// <summary>
    /// drop_default
    /// 	 : DROP  DEFAULT  (IF  EXISTS)?  (COMMA?  default_ref)
    /// </summary>
    public partial class AstDropDefault : AstDdlClause
    {
        
        protected static string _rule = "drop_default\r\n\t : DROP  DEFAULT  (IF  EXISTS)?  (COMMA?  default_ref)";
        
        internal AstDropDefault(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDropDefault(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropDefault(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropDefault(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDefault(this);
        }
        
        /// <summary>
        /// drop_default : 
        ///    DROP DEFAULT IF EXISTS COMMA? default_ref 
        /// </summary>
        public static AstDropDefault DropDefault(AstDefaultRef defaultRef)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDropDefault result = new AstDropDefault(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// event_notification_on
    /// 	 : server_database
    /// 	 | QUEUE  queue_id
    /// </summary>
    public abstract partial class AstEventNotificationOn : AstRule
    {
        
        protected static string _rule = "event_notification_on\r\n\t : server_database\r\n\t | QUEUE  queue_id";
        
        /// <summary>
        /// event_notification_on : server_database
        /// </summary>
        public partial class AstEventNotificationOn1 : AstEventNotificationOn
        {
            
            internal AstEventNotificationOn1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstEventNotificationOn1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstEventNotificationOn1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstEventNotificationOn1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventNotificationOn(this);
            }
        }
        /// <summary>
        /// event_notification_on : QUEUE  queue_id
        /// </summary>
        public partial class AstEventNotificationOn2 : AstEventNotificationOn
        {
            
            internal AstEventNotificationOn2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstEventNotificationOn2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstEventNotificationOn2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstEventNotificationOn2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventNotificationOn(this);
            }
        }
        

        
        internal AstEventNotificationOn(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstEventNotificationOn(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEventNotificationOn(Position p) : 
                base(p)
        {
        }
        
        internal AstEventNotificationOn(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstEventNotificationOn Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstEventNotificationOn.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstServerDatabase), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstQueueId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// event_notification_on : 
        ///    server_database 
        /// </summary>
        public static AstEventNotificationOn EventNotificationOn(AstServerDatabase serverDatabase)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventNotificationOn.AstEventNotificationOn1 result = new AstEventNotificationOn.AstEventNotificationOn1(arguments);
            return result;
        }
        
        /// <summary>
        /// event_notification_on : 
        ///    QUEUE queue_id 
        /// </summary>
        public static AstEventNotificationOn EventNotificationOn(AstQueueId queueId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventNotificationOn.AstEventNotificationOn2 result = new AstEventNotificationOn.AstEventNotificationOn2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// drop_master_key
    /// 	 : DROP  MASTER  KEY
    /// </summary>
    public partial class AstDropMasterKey : AstDdlClause
    {
        
        protected static string _rule = "drop_master_key\r\n\t : DROP  MASTER  KEY";
        
        internal AstDropMasterKey(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDropMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropMasterKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropMasterKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropMasterKey(this);
        }
    }
    
    /// <summary>
    /// drop_rule
    /// 	 : DROP  RULE  (IF  EXISTS)?  (COMMA?  schema_rule_ref)?
    /// </summary>
    public partial class AstDropRule : AstDdlClause
    {
        
        protected static string _rule = "drop_rule\r\n\t : DROP  RULE  (IF  EXISTS)?  (COMMA?  schema_rule_ref)?";
        
        internal AstDropRule(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDropRule(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropRule(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropRule(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRule(this);
        }
        
        /// <summary>
        /// drop_rule : 
        ///    DROP RULE IF EXISTS COMMA? schema_rule_ref 
        /// </summary>
        public static AstDropRule DropRule(AstSchemaRuleRef schemaRuleRef)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDropRule result = new AstDropRule(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// drop_sequence
    /// 	 : DROP  SEQUENCE  (IF  EXISTS)?  (COMMA?  database_schema_sequence_ref)?
    /// </summary>
    public partial class AstDropSequence : AstDdlClause
    {
        
        protected static string _rule = "drop_sequence\r\n\t : DROP  SEQUENCE  (IF  EXISTS)?  (COMMA?  database_schema_sequen" +
            "ce_ref)?";
        
        internal AstDropSequence(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDropSequence(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropSequence(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropSequence(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSequence(this);
        }
        
        /// <summary>
        /// drop_sequence : 
        ///    DROP SEQUENCE IF EXISTS COMMA? database_schema_sequence_ref 
        /// </summary>
        public static AstDropSequence DropSequence(AstDatabaseSchemaSequenceRef databaseSchemaSequenceRef)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDropSequence result = new AstDropSequence(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// trigger_name
    /// 	 : schema_trigger_refs
    /// 	 | ALL
    /// </summary>
    public abstract partial class AstTriggerName : AstRule
    {
        
        protected static string _rule = "trigger_name\r\n\t : schema_trigger_refs\r\n\t | ALL";
        
        /// <summary>
        /// trigger_name : schema_trigger_refs
        /// </summary>
        public partial class AstTriggerName1 : AstTriggerName
        {
            
            internal AstTriggerName1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTriggerName1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTriggerName1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTriggerName1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTriggerName(this);
            }
        }
        /// <summary>
        /// trigger_name : ALL
        /// </summary>
        public partial class AstTriggerName2 : AstTriggerName
        {
            
            internal AstTriggerName2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTriggerName2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTriggerName2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTriggerName2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTriggerName(this);
            }
        }
        

        
        internal AstTriggerName(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstTriggerName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTriggerName(Position p) : 
                base(p)
        {
        }
        
        internal AstTriggerName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTriggerName Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTriggerName.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSchemaTriggerRefs), false, false))
                {
                    return 1;
                }
            }
            if ((list.Count == 0))
            {
                return 2;
            }
            return 0;
        }
        
        /// <summary>
        /// trigger_name : 
        ///    schema_trigger_refs 
        /// </summary>
        public static AstTriggerName TriggerName(AstSchemaTriggerRefs schemaTriggerRefs)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTriggerName.AstTriggerName1 result = new AstTriggerName.AstTriggerName1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// trigger_target
    /// 	 : schema_object_ref
    /// 	 | all_server_database
    /// </summary>
    public abstract partial class AstTriggerTarget : AstRule
    {
        
        protected static string _rule = "trigger_target\r\n\t : schema_object_ref\r\n\t | all_server_database";
        
        /// <summary>
        /// trigger_target : schema_object_ref
        /// </summary>
        public partial class AstTriggerTarget1 : AstTriggerTarget
        {
            
            internal AstTriggerTarget1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTriggerTarget1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTriggerTarget1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTriggerTarget1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTriggerTarget(this);
            }
        }
        /// <summary>
        /// trigger_target : all_server_database
        /// </summary>
        public partial class AstTriggerTarget2 : AstTriggerTarget
        {
            
            internal AstTriggerTarget2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTriggerTarget2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTriggerTarget2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTriggerTarget2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTriggerTarget(this);
            }
        }
        

        
        internal AstTriggerTarget(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstTriggerTarget(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTriggerTarget(Position p) : 
                base(p)
        {
        }
        
        internal AstTriggerTarget(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTriggerTarget Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTriggerTarget.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSchemaObjectRef), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstAllServerDatabase), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// trigger_target : 
        ///    schema_object_ref 
        /// </summary>
        public static AstTriggerTarget TriggerTarget(AstSchemaObjectRef schemaObjectRef)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTriggerTarget.AstTriggerTarget1 result = new AstTriggerTarget.AstTriggerTarget1(arguments);
            return result;
        }
        
        /// <summary>
        /// trigger_target : 
        ///    all_server_database 
        /// </summary>
        public static AstTriggerTarget TriggerTarget(AstAllServerDatabase allServerDatabase)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTriggerTarget.AstTriggerTarget2 result = new AstTriggerTarget.AstTriggerTarget2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_column_master_key
    /// 	 : CREATE  COLUMN  MASTER  KEY  key_name = id_  WITH  LR_BRACKET  KEY_STORE_PROVIDER_NAME  EQUAL  key_store_provider_name = stringtext  COMMA  KEY_PATH  EQUAL  key_path = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstCreateColumnMasterKey : AstDdlClause
    {
        
        protected static string _rule = "create_column_master_key\r\n\t : CREATE  COLUMN  MASTER  KEY  key_name = id_  WITH  " +
            "LR_BRACKET  KEY_STORE_PROVIDER_NAME  EQUAL  key_store_provider_name = stringtext" +
            "  COMMA  KEY_PATH  EQUAL  key_path = stringtext  RR_BRACKET";
        
        internal AstCreateColumnMasterKey(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateColumnMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateColumnMasterKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateColumnMasterKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnMasterKey(this);
        }
        
        /// <summary>
        /// create_column_master_key : 
        ///    CREATE COLUMN MASTER KEY key_name=id_ WITH ( KEY_STORE_PROVIDER_NAME EQUAL key_store_provider_name=stringtext , KEY_PATH EQUAL key_path=stringtext ) 
        /// </summary>
        public static AstCreateColumnMasterKey CreateColumnMasterKey(AstId keyName, AstStringtext keyStoreProviderName, AstStringtext keyPath)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateColumnMasterKey result = new AstCreateColumnMasterKey(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session_with
    /// 	 : WITH  LR_BRACKET  (COMMA?  session_arg_max_memory)?  (COMMA?  session_arg_event_retention_mode)?  (COMMA?  session_arg_max_dispatch)?  (COMMA?  session_arg_max_event_size)?  (COMMA?  session_arg_memory_partition)?  (COMMA?  session_arg_track_causality)?  (COMMA?  session_arg_startup_state)?  RR_BRACKET
    /// </summary>
    public partial class AstCreateOrAlterEventSessionWith : AstRule
    {
        
        protected static string _rule = @"create_or_alter_event_session_with
	 : WITH  LR_BRACKET  (COMMA?  session_arg_max_memory)?  (COMMA?  session_arg_event_retention_mode)?  (COMMA?  session_arg_max_dispatch)?  (COMMA?  session_arg_max_event_size)?  (COMMA?  session_arg_memory_partition)?  (COMMA?  session_arg_track_causality)?  (COMMA?  session_arg_startup_state)?  RR_BRACKET";
        
        internal AstCreateOrAlterEventSessionWith(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateOrAlterEventSessionWith(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateOrAlterEventSessionWith(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateOrAlterEventSessionWith(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSessionWith(this);
        }
        
        /// <summary>
        /// create_or_alter_event_session_with : 
        ///    WITH ( COMMA? session_arg_max_memory COMMA? session_arg_event_retention_mode COMMA? session_arg_max_dispatch COMMA? session_arg_max_event_size COMMA? session_arg_memory_partition COMMA? session_arg_track_causality COMMA? session_arg_startup_state ) 
        /// </summary>
        public static AstCreateOrAlterEventSessionWith CreateOrAlterEventSessionWith(AstSessionArgMaxMemory sessionArgMaxMemory, AstSessionArgEventRetentionMode sessionArgEventRetentionMode, AstSessionArgMaxDispatch sessionArgMaxDispatch, AstSessionArgMaxEventSize sessionArgMaxEventSize, AstSessionArgMemoryPartition sessionArgMemoryPartition, AstSessionArgTrackCausality sessionArgTrackCausality, AstSessionArgStartupState sessionArgStartupState)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateOrAlterEventSessionWith result = new AstCreateOrAlterEventSessionWith(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// session_arg_max_dispatch
    /// 	 : MAX_DISPATCH_LATENCY  EQUAL  (decimal  SECONDS | INFINITE)
    /// </summary>
    public partial class AstSessionArgMaxDispatch : AstRule
    {
        
        protected static string _rule = "session_arg_max_dispatch\r\n\t : MAX_DISPATCH_LATENCY  EQUAL  (decimal  SECONDS | IN" +
            "FINITE)";
        
        internal AstSessionArgMaxDispatch(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSessionArgMaxDispatch(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSessionArgMaxDispatch(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSessionArgMaxDispatch(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSessionArgMaxDispatch(this);
        }
        
        /// <summary>
        /// session_arg_max_dispatch : 
        ///    MAX_DISPATCH_LATENCY EQUAL decimal SECONDS 
        /// </summary>
        public static AstSessionArgMaxDispatch SessionArgMaxDispatch(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSessionArgMaxDispatch result = new AstSessionArgMaxDispatch(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// target_parameter_value
    /// 	 : (LR_BRACKET?  decimal  RR_BRACKET? | stringtext)
    /// </summary>
    public partial class AstTargetParameterValue : AstRule
    {
        
        protected static string _rule = "target_parameter_value\r\n\t : (LR_BRACKET?  decimal  RR_BRACKET? | stringtext)";
        
        internal AstTargetParameterValue(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTargetParameterValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTargetParameterValue(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTargetParameterValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetParameterValue(this);
        }
        
        /// <summary>
        /// target_parameter_value : 
        ///    LR_BRACKET? decimal RR_BRACKET? 
        /// </summary>
        public static AstTargetParameterValue TargetParameterValue(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTargetParameterValue result = new AstTargetParameterValue(arguments);
            return result;
        }
        
        /// <summary>
        /// target_parameter_value : 
        ///    stringtext 
        /// </summary>
        public static AstTargetParameterValue TargetParameterValue(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTargetParameterValue result = new AstTargetParameterValue(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// event_session_predicate_expression
    /// 	 : (COMMA?  and_or?  NOT?  (event_session_predicate_factor | LR_BRACKET  event_session_predicate_expression  RR_BRACKET))+
    /// </summary>
    public partial class AstEventSessionPredicateExpression : AstRule
    {
        
        protected static string _rule = "event_session_predicate_expression\r\n\t : (COMMA?  and_or?  NOT?  (event_session_pr" +
            "edicate_factor | LR_BRACKET  event_session_predicate_expression  RR_BRACKET))+";
        
        internal AstEventSessionPredicateExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstEventSessionPredicateExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstEventSessionPredicateExpression(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstEventSessionPredicateExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionPredicateExpression(this);
        }
        
        /// <summary>
        /// event_session_predicate_expression : 
        ///    COMMA? and_or? NOT? event_session_predicate_factor+ 
        /// </summary>
        public static AstEventSessionPredicateExpression EventSessionPredicateExpression(AstAndOr andOr, AstEventSessionPredicateFactor eventSessionPredicateFactor)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventSessionPredicateExpression result = new AstEventSessionPredicateExpression(arguments);
            return result;
        }
        
        /// <summary>
        /// event_session_predicate_expression : 
        ///    COMMA? and_or? NOT? ( event_session_predicate_expression RR_BRACKET+ 
        /// </summary>
        public static AstEventSessionPredicateExpression EventSessionPredicateExpression(AstAndOr andOr, AstEventSessionPredicateExpression eventSessionPredicateExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventSessionPredicateExpression result = new AstEventSessionPredicateExpression(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// event_session_predicate_factor
    /// 	 : event_session_predicate_leaf
    /// 	 | LR_BRACKET  event_session_predicate_expression  RR_BRACKET
    /// </summary>
    public abstract partial class AstEventSessionPredicateFactor : AstRule
    {
        
        protected static string _rule = "event_session_predicate_factor\r\n\t : event_session_predicate_leaf\r\n\t | LR_BRACKET " +
            " event_session_predicate_expression  RR_BRACKET";
        
        /// <summary>
        /// event_session_predicate_factor : event_session_predicate_leaf
        /// </summary>
        public partial class AstEventSessionPredicateFactor1 : AstEventSessionPredicateFactor
        {
            
            internal AstEventSessionPredicateFactor1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstEventSessionPredicateFactor1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstEventSessionPredicateFactor1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstEventSessionPredicateFactor1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateFactor(this);
            }
        }
        /// <summary>
        /// event_session_predicate_factor : LR_BRACKET  event_session_predicate_expression  RR_BRACKET
        /// </summary>
        public partial class AstEventSessionPredicateFactor2 : AstEventSessionPredicateFactor
        {
            
            internal AstEventSessionPredicateFactor2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstEventSessionPredicateFactor2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstEventSessionPredicateFactor2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstEventSessionPredicateFactor2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateFactor(this);
            }
        }
        

        
        internal AstEventSessionPredicateFactor(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstEventSessionPredicateFactor(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEventSessionPredicateFactor(Position p) : 
                base(p)
        {
        }
        
        internal AstEventSessionPredicateFactor(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstEventSessionPredicateFactor Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstEventSessionPredicateFactor.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstEventSessionPredicateLeaf), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstEventSessionPredicateExpression), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// event_session_predicate_factor : 
        ///    event_session_predicate_leaf 
        /// </summary>
        public static AstEventSessionPredicateFactor EventSessionPredicateFactor(AstEventSessionPredicateLeaf eventSessionPredicateLeaf)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventSessionPredicateFactor.AstEventSessionPredicateFactor1 result = new AstEventSessionPredicateFactor.AstEventSessionPredicateFactor1(arguments);
            return result;
        }
        
        /// <summary>
        /// event_session_predicate_factor : 
        ///    ( event_session_predicate_expression ) 
        /// </summary>
        public static AstEventSessionPredicateFactor EventSessionPredicateFactor(AstEventSessionPredicateExpression eventSessionPredicateExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventSessionPredicateFactor.AstEventSessionPredicateFactor2 result = new AstEventSessionPredicateFactor.AstEventSessionPredicateFactor2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// event_session_predicate_leaf
    /// 	 : (event_field_id | (event_field_id | full_predicate_source_ref)  event_session_predicate_leaf_ope  decimal_string)
    /// 	 | source1 = full_predicate_source_ref  LR_BRACKET  (event_field_id | source2 = full_predicate_source_ref  COMMA  decimal_string)  RR_BRACKET
    /// </summary>
    public abstract partial class AstEventSessionPredicateLeaf : AstRule
    {
        
        protected static string _rule = @"event_session_predicate_leaf
	 : (event_field_id | (event_field_id | full_predicate_source_ref)  event_session_predicate_leaf_ope  decimal_string)
	 | source1 = full_predicate_source_ref  LR_BRACKET  (event_field_id | source2 = full_predicate_source_ref  COMMA  decimal_string)  RR_BRACKET";
        
        /// <summary>
        /// event_session_predicate_leaf : (event_field_id | (event_field_id | full_predicate_source_ref)  event_session_predicate_leaf_ope  decimal_string)
        /// </summary>
        public partial class AstEventSessionPredicateLeaf1 : AstEventSessionPredicateLeaf
        {
            
            internal AstEventSessionPredicateLeaf1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstEventSessionPredicateLeaf1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstEventSessionPredicateLeaf1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstEventSessionPredicateLeaf1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeaf(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf : source1 = full_predicate_source_ref  LR_BRACKET  (event_field_id | source2 = full_predicate_source_ref  COMMA  decimal_string)  RR_BRACKET
        /// </summary>
        public partial class AstEventSessionPredicateLeaf2 : AstEventSessionPredicateLeaf
        {
            
            internal AstEventSessionPredicateLeaf2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstEventSessionPredicateLeaf2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstEventSessionPredicateLeaf2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstEventSessionPredicateLeaf2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeaf(this);
            }
        }
        

        
        internal AstEventSessionPredicateLeaf(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstEventSessionPredicateLeaf(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEventSessionPredicateLeaf(Position p) : 
                base(p)
        {
        }
        
        internal AstEventSessionPredicateLeaf(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstEventSessionPredicateLeaf Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstEventSessionPredicateLeaf.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 5))
            {
                if (AstRoot.Eval(list[0], typeof(AstEventFieldId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstEventFieldId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstFullPredicateSourceRef), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstEventSessionPredicateLeafOpe), false, false))
                            {
                                if (AstRoot.Eval(list[4], typeof(AstDecimalString), false, false))
                                {
                                    return 1;
                                }
                            }
                        }
                    }
                }
            }
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstFullPredicateSourceRef), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstEventFieldId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstFullPredicateSourceRef), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstDecimalString), false, false))
                            {
                                return 2;
                            }
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// event_session_predicate_leaf : 
        ///    event_field_id 
        /// </summary>
        public static AstEventSessionPredicateLeaf EventSessionPredicateLeaf(AstEventFieldId eventFieldId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf1 result = new AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf1(arguments);
            return result;
        }
        
        /// <summary>
        /// event_session_predicate_leaf : 
        ///    event_field_id event_session_predicate_leaf_ope decimal_string 
        /// </summary>
        public static AstEventSessionPredicateLeaf EventSessionPredicateLeaf(AstEventFieldId eventFieldId, AstEventSessionPredicateLeafOpe eventSessionPredicateLeafOpe, AstDecimalString decimalString)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf1 result = new AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf1(arguments);
            return result;
        }
        
        /// <summary>
        /// event_session_predicate_leaf : 
        ///    full_predicate_source_ref event_session_predicate_leaf_ope decimal_string 
        /// </summary>
        public static AstEventSessionPredicateLeaf EventSessionPredicateLeaf(AstFullPredicateSourceRef fullPredicateSourceRef, AstEventSessionPredicateLeafOpe eventSessionPredicateLeafOpe, AstDecimalString decimalString)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf1 result = new AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf1(arguments);
            return result;
        }
        
        /// <summary>
        /// event_session_predicate_leaf : 
        ///    source1=full_predicate_source_ref ( event_field_id ) 
        /// </summary>
        public static AstEventSessionPredicateLeaf EventSessionPredicateLeaf(AstFullPredicateSourceRef source1, AstEventFieldId eventFieldId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf2 result = new AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf2(arguments);
            return result;
        }
        
        /// <summary>
        /// event_session_predicate_leaf : 
        ///    source1=full_predicate_source_ref ( source2=full_predicate_source_ref , decimal_string ) 
        /// </summary>
        public static AstEventSessionPredicateLeaf EventSessionPredicateLeaf(AstFullPredicateSourceRef source1, AstFullPredicateSourceRef source2, AstDecimalString decimalString)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf2 result = new AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_external_data_source
    /// 	 : ALTER  EXTERNAL  DATA  SOURCE  data_source_id  SET  (LOCATION  EQUAL  location = stringtext  COMMA? | RESOURCE_MANAGER_LOCATION  EQUAL  resource_manager_location = stringtext  COMMA? | CREDENTIAL  EQUAL  credential_id)+
    /// 	 | ALTER  EXTERNAL  DATA  SOURCE  data_source_id  WITH  LR_BRACKET  TYPE  EQUAL  BLOB_STORAGE  COMMA  LOCATION  EQUAL  location = stringtext  (COMMA  CREDENTIAL  EQUAL  credential_id)?  RR_BRACKET
    /// </summary>
    public abstract partial class AstAlterExternalDataSource : AstDdlClause
    {
        
        protected static string _rule = @"alter_external_data_source
	 : ALTER  EXTERNAL  DATA  SOURCE  data_source_id  SET  (LOCATION  EQUAL  location = stringtext  COMMA? | RESOURCE_MANAGER_LOCATION  EQUAL  resource_manager_location = stringtext  COMMA? | CREDENTIAL  EQUAL  credential_id)+
	 | ALTER  EXTERNAL  DATA  SOURCE  data_source_id  WITH  LR_BRACKET  TYPE  EQUAL  BLOB_STORAGE  COMMA  LOCATION  EQUAL  location = stringtext  (COMMA  CREDENTIAL  EQUAL  credential_id)?  RR_BRACKET";
        
        /// <summary>
        /// alter_external_data_source : ALTER  EXTERNAL  DATA  SOURCE  data_source_id  SET  (LOCATION  EQUAL  location = stringtext  COMMA? | RESOURCE_MANAGER_LOCATION  EQUAL  resource_manager_location = stringtext  COMMA? | CREDENTIAL  EQUAL  credential_id)+
        /// </summary>
        public partial class AstAlterExternalDataSource1 : AstAlterExternalDataSource
        {
            
            internal AstAlterExternalDataSource1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterExternalDataSource1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterExternalDataSource1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterExternalDataSource1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterExternalDataSource(this);
            }
        }
        /// <summary>
        /// alter_external_data_source : ALTER  EXTERNAL  DATA  SOURCE  data_source_id  WITH  LR_BRACKET  TYPE  EQUAL  BLOB_STORAGE  COMMA  LOCATION  EQUAL  location = stringtext  (COMMA  CREDENTIAL  EQUAL  credential_id)?  RR_BRACKET
        /// </summary>
        public partial class AstAlterExternalDataSource2 : AstAlterExternalDataSource
        {
            
            internal AstAlterExternalDataSource2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterExternalDataSource2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterExternalDataSource2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterExternalDataSource2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterExternalDataSource(this);
            }
        }
        

        
        internal AstAlterExternalDataSource(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAlterExternalDataSource(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterExternalDataSource(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterExternalDataSource(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterExternalDataSource Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterExternalDataSource.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstDataSourceId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstStringtext), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstCredentialId), false, false))
                            {
                                return 1;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstDataSourceId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstCredentialId), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_external_data_source : 
        ///    ALTER EXTERNAL DATA SOURCE data_source_id SET LOCATION EQUAL location=stringtext COMMA? 
        /// </summary>
        public static AstAlterExternalDataSource AlterExternalDataSource(AstDataSourceId dataSourceId, AstStringtext location)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterExternalDataSource.AstAlterExternalDataSource1 result = new AstAlterExternalDataSource.AstAlterExternalDataSource1(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_external_data_source : 
        ///    ALTER EXTERNAL DATA SOURCE data_source_id SET CREDENTIAL EQUAL credential_id 
        /// </summary>
        public static AstAlterExternalDataSource AlterExternalDataSource(AstDataSourceId dataSourceId, AstCredentialId credentialId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterExternalDataSource.AstAlterExternalDataSource1 result = new AstAlterExternalDataSource.AstAlterExternalDataSource1(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_external_data_source : 
        ///    ALTER EXTERNAL DATA SOURCE data_source_id WITH ( TYPE EQUAL BLOB_STORAGE , LOCATION EQUAL location=stringtext , CREDENTIAL EQUAL credential_id ) 
        /// </summary>
        public static AstAlterExternalDataSource AlterExternalDataSource(AstDataSourceId dataSourceId, AstStringtext location, AstCredentialId credentialId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterExternalDataSource.AstAlterExternalDataSource2 result = new AstAlterExternalDataSource.AstAlterExternalDataSource2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// code_content
    /// 	 : stringtext
    /// 	 | binary_
    /// 	 | NONE
    /// </summary>
    public abstract partial class AstCodeContent : AstRule
    {
        
        protected static string _rule = "code_content\r\n\t : stringtext\r\n\t | binary_\r\n\t | NONE";
        
        /// <summary>
        /// code_content : stringtext
        /// </summary>
        public partial class AstCodeContent1 : AstCodeContent
        {
            
            internal AstCodeContent1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCodeContent1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCodeContent1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCodeContent1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCodeContent(this);
            }
        }
        /// <summary>
        /// code_content : binary_
        /// </summary>
        public partial class AstCodeContent2 : AstCodeContent
        {
            
            internal AstCodeContent2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCodeContent2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCodeContent2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCodeContent2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCodeContent(this);
            }
        }
        /// <summary>
        /// code_content : NONE
        /// </summary>
        public partial class AstCodeContent3 : AstCodeContent
        {
            
            internal AstCodeContent3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCodeContent3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCodeContent3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCodeContent3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCodeContent(this);
            }
        }
        

        
        internal AstCodeContent(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCodeContent(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCodeContent(Position p) : 
                base(p)
        {
        }
        
        internal AstCodeContent(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCodeContent Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCodeContent.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstBinary), false, false))
                {
                    return 2;
                }
            }
            if ((list.Count == 0))
            {
                return 3;
            }
            return 0;
        }
        
        /// <summary>
        /// code_content : 
        ///    stringtext 
        /// </summary>
        public static AstCodeContent CodeContent(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCodeContent.AstCodeContent1 result = new AstCodeContent.AstCodeContent1(arguments);
            return result;
        }
        
        /// <summary>
        /// code_content : 
        ///    binary_ 
        /// </summary>
        public static AstCodeContent CodeContent(AstBinary binary)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCodeContent.AstCodeContent2 result = new AstCodeContent.AstCodeContent2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_external_resource_pool
    /// 	 : CREATE  EXTERNAL  RESOURCE  POOL  pool_id  WITH  external_resource_with
    /// </summary>
    public partial class AstCreateExternalResourcePool : AstDdlClause
    {
        
        protected static string _rule = "create_external_resource_pool\r\n\t : CREATE  EXTERNAL  RESOURCE  POOL  pool_id  WIT" +
            "H  external_resource_with";
        
        internal AstCreateExternalResourcePool(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateExternalResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateExternalResourcePool(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateExternalResourcePool(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateExternalResourcePool(this);
        }
        
        /// <summary>
        /// create_external_resource_pool : 
        ///    CREATE EXTERNAL RESOURCE POOL pool_id WITH external_resource_with 
        /// </summary>
        public static AstCreateExternalResourcePool CreateExternalResourcePool(AstPoolId poolId, AstExternalResourceWith externalResourceWith)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateExternalResourcePool result = new AstCreateExternalResourcePool(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// fulltext_languageList
    /// 	 : stringtext
    /// 	 | decimal
    /// 	 | binary_
    /// </summary>
    public abstract partial class AstFulltextLanguageList : AstRule
    {
        
        protected static string _rule = "fulltext_languageList\r\n\t : stringtext\r\n\t | decimal\r\n\t | binary_";
        
        /// <summary>
        /// fulltext_languageList : stringtext
        /// </summary>
        public partial class AstFulltextLanguageList1 : AstFulltextLanguageList
        {
            
            internal AstFulltextLanguageList1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstFulltextLanguageList1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstFulltextLanguageList1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstFulltextLanguageList1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFulltextLanguageList(this);
            }
        }
        /// <summary>
        /// fulltext_languageList : decimal
        /// </summary>
        public partial class AstFulltextLanguageList2 : AstFulltextLanguageList
        {
            
            internal AstFulltextLanguageList2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstFulltextLanguageList2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstFulltextLanguageList2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstFulltextLanguageList2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFulltextLanguageList(this);
            }
        }
        /// <summary>
        /// fulltext_languageList : binary_
        /// </summary>
        public partial class AstFulltextLanguageList3 : AstFulltextLanguageList
        {
            
            internal AstFulltextLanguageList3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstFulltextLanguageList3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstFulltextLanguageList3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstFulltextLanguageList3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFulltextLanguageList(this);
            }
        }
        

        
        internal AstFulltextLanguageList(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstFulltextLanguageList(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFulltextLanguageList(Position p) : 
                base(p)
        {
        }
        
        internal AstFulltextLanguageList(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstFulltextLanguageList Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstFulltextLanguageList.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstBinary), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// fulltext_languageList : 
        ///    stringtext 
        /// </summary>
        public static AstFulltextLanguageList FulltextLanguageList(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFulltextLanguageList.AstFulltextLanguageList1 result = new AstFulltextLanguageList.AstFulltextLanguageList1(arguments);
            return result;
        }
        
        /// <summary>
        /// fulltext_languageList : 
        ///    decimal 
        /// </summary>
        public static AstFulltextLanguageList FulltextLanguageList(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFulltextLanguageList.AstFulltextLanguageList2 result = new AstFulltextLanguageList.AstFulltextLanguageList2(arguments);
            return result;
        }
        
        /// <summary>
        /// fulltext_languageList : 
        ///    binary_ 
        /// </summary>
        public static AstFulltextLanguageList FulltextLanguageList(AstBinary binary)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFulltextLanguageList.AstFulltextLanguageList3 result = new AstFulltextLanguageList.AstFulltextLanguageList3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_login_sql_server_infos
    /// 	 : enable_disable?
    /// 	 | WITH  alter_login_sql_server_settings
    /// 	 | add_drop  CREDENTIAL  credential_id
    /// </summary>
    public abstract partial class AstAlterLoginSqlServerInfos : AstRule
    {
        
        protected static string _rule = "alter_login_sql_server_infos\r\n\t : enable_disable?\r\n\t | WITH  alter_login_sql_serv" +
            "er_settings\r\n\t | add_drop  CREDENTIAL  credential_id";
        
        /// <summary>
        /// alter_login_sql_server_infos : enable_disable?
        /// </summary>
        public partial class AstAlterLoginSqlServerInfos1 : AstAlterLoginSqlServerInfos
        {
            
            internal AstAlterLoginSqlServerInfos1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterLoginSqlServerInfos1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterLoginSqlServerInfos1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterLoginSqlServerInfos1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginSqlServerInfos(this);
            }
        }
        /// <summary>
        /// alter_login_sql_server_infos : WITH  alter_login_sql_server_settings
        /// </summary>
        public partial class AstAlterLoginSqlServerInfos2 : AstAlterLoginSqlServerInfos
        {
            
            internal AstAlterLoginSqlServerInfos2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterLoginSqlServerInfos2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterLoginSqlServerInfos2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterLoginSqlServerInfos2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginSqlServerInfos(this);
            }
        }
        /// <summary>
        /// alter_login_sql_server_infos : add_drop  CREDENTIAL  credential_id
        /// </summary>
        public partial class AstAlterLoginSqlServerInfos3 : AstAlterLoginSqlServerInfos
        {
            
            internal AstAlterLoginSqlServerInfos3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterLoginSqlServerInfos3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterLoginSqlServerInfos3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterLoginSqlServerInfos3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginSqlServerInfos(this);
            }
        }
        

        
        internal AstAlterLoginSqlServerInfos(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAlterLoginSqlServerInfos(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterLoginSqlServerInfos(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterLoginSqlServerInfos(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterLoginSqlServerInfos Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterLoginSqlServerInfos.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstAddDrop), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstCredentialId), false, false))
                    {
                        return 3;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstEnableDisable), true, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterLoginSqlServerSettings), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_login_sql_server_infos : 
        ///    enable_disable? 
        /// </summary>
        public static AstAlterLoginSqlServerInfos AlterLoginSqlServerInfos(AstEnableDisable enableDisable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos1 result = new AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos1(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_login_sql_server_infos : 
        ///    WITH alter_login_sql_server_settings 
        /// </summary>
        public static AstAlterLoginSqlServerInfos AlterLoginSqlServerInfos(AstAlterLoginSqlServerSettings alterLoginSqlServerSettings)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos2 result = new AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos2(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_login_sql_server_infos : 
        ///    add_drop CREDENTIAL credential_id 
        /// </summary>
        public static AstAlterLoginSqlServerInfos AlterLoginSqlServerInfos(AstAddDrop addDrop, AstCredentialId credentialId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos3 result = new AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// pwd_value
    /// 	 : stringtext
    /// 	 | binary_  HASHED
    /// </summary>
    public abstract partial class AstPwdValue : AstRule
    {
        
        protected static string _rule = "pwd_value\r\n\t : stringtext\r\n\t | binary_  HASHED";
        
        /// <summary>
        /// pwd_value : stringtext
        /// </summary>
        public partial class AstPwdValue1 : AstPwdValue
        {
            
            internal AstPwdValue1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPwdValue1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPwdValue1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPwdValue1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPwdValue(this);
            }
        }
        /// <summary>
        /// pwd_value : binary_  HASHED
        /// </summary>
        public partial class AstPwdValue2 : AstPwdValue
        {
            
            internal AstPwdValue2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPwdValue2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPwdValue2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPwdValue2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPwdValue(this);
            }
        }
        

        
        internal AstPwdValue(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstPwdValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPwdValue(Position p) : 
                base(p)
        {
        }
        
        internal AstPwdValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstPwdValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstPwdValue.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstBinary), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// pwd_value : 
        ///    stringtext 
        /// </summary>
        public static AstPwdValue PwdValue(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPwdValue.AstPwdValue1 result = new AstPwdValue.AstPwdValue1(arguments);
            return result;
        }
        
        /// <summary>
        /// pwd_value : 
        ///    binary_ HASHED 
        /// </summary>
        public static AstPwdValue PwdValue(AstBinary binary)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPwdValue.AstPwdValue2 result = new AstPwdValue.AstPwdValue2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_login_sql_server_settings
    /// 	 : ((PASSWORD  EQUAL  (password = stringtext | password_hash = binary_  HASHED))  pwd_strategies?)?  (COMMA?  SID  EQUAL  sid = binary_)?  (COMMA?  DEFAULT_DATABASE  EQUAL  database_id)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  language)?  (COMMA?  CHECK_EXPIRATION  EQUAL  check_expiration = on_off)?  (COMMA?  CHECK_POLICY  EQUAL  check_policy = on_off)?  (COMMA?  CREDENTIAL  EQUAL  credential_id)?
    /// </summary>
    public partial class AstCreateLoginSqlServerSettings : AstRule
    {
        
        protected static string _rule = @"create_login_sql_server_settings
	 : ((PASSWORD  EQUAL  (password = stringtext | password_hash = binary_  HASHED))  pwd_strategies?)?  (COMMA?  SID  EQUAL  sid = binary_)?  (COMMA?  DEFAULT_DATABASE  EQUAL  database_id)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  language)?  (COMMA?  CHECK_EXPIRATION  EQUAL  check_expiration = on_off)?  (COMMA?  CHECK_POLICY  EQUAL  check_policy = on_off)?  (COMMA?  CREDENTIAL  EQUAL  credential_id)?";
        
        internal AstCreateLoginSqlServerSettings(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateLoginSqlServerSettings(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateLoginSqlServerSettings(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateLoginSqlServerSettings(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginSqlServerSettings(this);
        }
        
        /// <summary>
        /// create_login_sql_server_settings : 
        ///    PASSWORD EQUAL password=stringtext pwd_strategies? COMMA? SID EQUAL sid=binary_ COMMA? DEFAULT_DATABASE EQUAL database_id COMMA? DEFAULT_LANGUAGE EQUAL language COMMA? CHECK_EXPIRATION EQUAL check_expiration=on_off COMMA? CHECK_POLICY EQUAL check_policy=on_off COMMA? CREDENTIAL EQUAL credential_id 
        /// </summary>
        public static AstCreateLoginSqlServerSettings CreateLoginSqlServerSettings(AstStringtext password, AstPwdStrategies pwdStrategies, AstBinary sid, AstDatabaseId databaseId, AstLanguage language, AstOnOff checkExpiration, AstOnOff checkPolicy, AstCredentialId credentialId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateLoginSqlServerSettings result = new AstCreateLoginSqlServerSettings(arguments);
            return result;
        }
        
        /// <summary>
        /// create_login_sql_server_settings : 
        ///    PASSWORD EQUAL password_hash=binary_ HASHED pwd_strategies? COMMA? SID EQUAL sid=binary_ COMMA? DEFAULT_DATABASE EQUAL database_id COMMA? DEFAULT_LANGUAGE EQUAL language COMMA? CHECK_EXPIRATION EQUAL check_expiration=on_off COMMA? CHECK_POLICY EQUAL check_policy=on_off COMMA? CREDENTIAL EQUAL credential_id 
        /// </summary>
        public static AstCreateLoginSqlServerSettings CreateLoginSqlServerSettings(AstBinary passwordHash, AstPwdStrategies pwdStrategies, AstBinary sid, AstDatabaseId databaseId, AstLanguage language, AstOnOff checkExpiration, AstOnOff checkPolicy, AstCredentialId credentialId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateLoginSqlServerSettings result = new AstCreateLoginSqlServerSettings(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_login_sql_server_from
    /// 	 : WINDOWS  (WITH  (COMMA?  DEFAULT_DATABASE  EQUAL  database_id)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  default_language = stringtext)?)
    /// 	 | CERTIFICATE  certificate_id
    /// 	 | ASYMMETRIC  KEY  asym_key_id
    /// </summary>
    public abstract partial class AstCreateLoginSqlServerFrom : AstRule
    {
        
        protected static string _rule = "create_login_sql_server_from\r\n\t : WINDOWS  (WITH  (COMMA?  DEFAULT_DATABASE  EQUA" +
            "L  database_id)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  default_language = stringtex" +
            "t)?)\r\n\t | CERTIFICATE  certificate_id\r\n\t | ASYMMETRIC  KEY  asym_key_id";
        
        /// <summary>
        /// create_login_sql_server_from : WINDOWS  (WITH  (COMMA?  DEFAULT_DATABASE  EQUAL  database_id)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  default_language = stringtext)?)
        /// </summary>
        public partial class AstCreateLoginSqlServerFrom1 : AstCreateLoginSqlServerFrom
        {
            
            internal AstCreateLoginSqlServerFrom1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateLoginSqlServerFrom1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateLoginSqlServerFrom1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateLoginSqlServerFrom1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateLoginSqlServerFrom(this);
            }
        }
        /// <summary>
        /// create_login_sql_server_from : CERTIFICATE  certificate_id
        /// </summary>
        public partial class AstCreateLoginSqlServerFrom2 : AstCreateLoginSqlServerFrom
        {
            
            internal AstCreateLoginSqlServerFrom2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateLoginSqlServerFrom2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateLoginSqlServerFrom2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateLoginSqlServerFrom2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateLoginSqlServerFrom(this);
            }
        }
        /// <summary>
        /// create_login_sql_server_from : ASYMMETRIC  KEY  asym_key_id
        /// </summary>
        public partial class AstCreateLoginSqlServerFrom3 : AstCreateLoginSqlServerFrom
        {
            
            internal AstCreateLoginSqlServerFrom3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateLoginSqlServerFrom3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateLoginSqlServerFrom3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateLoginSqlServerFrom3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateLoginSqlServerFrom(this);
            }
        }
        

        
        internal AstCreateLoginSqlServerFrom(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCreateLoginSqlServerFrom(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateLoginSqlServerFrom(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateLoginSqlServerFrom(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateLoginSqlServerFrom Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateLoginSqlServerFrom.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstDatabaseId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstCertificateId), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstAsymKeyId), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_login_sql_server_from : 
        ///    WINDOWS WITH COMMA? DEFAULT_DATABASE EQUAL database_id COMMA? DEFAULT_LANGUAGE EQUAL default_language=stringtext 
        /// </summary>
        public static AstCreateLoginSqlServerFrom CreateLoginSqlServerFrom(AstDatabaseId databaseId, AstStringtext defaultLanguage)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom1 result = new AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom1(arguments);
            return result;
        }
        
        /// <summary>
        /// create_login_sql_server_from : 
        ///    CERTIFICATE certificate_id 
        /// </summary>
        public static AstCreateLoginSqlServerFrom CreateLoginSqlServerFrom(AstCertificateId certificateId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom2 result = new AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom2(arguments);
            return result;
        }
        
        /// <summary>
        /// create_login_sql_server_from : 
        ///    ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public static AstCreateLoginSqlServerFrom CreateLoginSqlServerFrom(AstAsymKeyId asymKeyId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom3 result = new AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_login_azure_sql_infos
    /// 	 : enable_disable?
    /// 	 | WITH  alter_login_azure_sql_with
    /// </summary>
    public abstract partial class AstAlterLoginAzureSqlInfos : AstRule
    {
        
        protected static string _rule = "alter_login_azure_sql_infos\r\n\t : enable_disable?\r\n\t | WITH  alter_login_azure_sql" +
            "_with";
        
        /// <summary>
        /// alter_login_azure_sql_infos : enable_disable?
        /// </summary>
        public partial class AstAlterLoginAzureSqlInfos1 : AstAlterLoginAzureSqlInfos
        {
            
            internal AstAlterLoginAzureSqlInfos1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterLoginAzureSqlInfos1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterLoginAzureSqlInfos1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterLoginAzureSqlInfos1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginAzureSqlInfos(this);
            }
        }
        /// <summary>
        /// alter_login_azure_sql_infos : WITH  alter_login_azure_sql_with
        /// </summary>
        public partial class AstAlterLoginAzureSqlInfos2 : AstAlterLoginAzureSqlInfos
        {
            
            internal AstAlterLoginAzureSqlInfos2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterLoginAzureSqlInfos2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterLoginAzureSqlInfos2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterLoginAzureSqlInfos2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginAzureSqlInfos(this);
            }
        }
        

        
        internal AstAlterLoginAzureSqlInfos(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAlterLoginAzureSqlInfos(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterLoginAzureSqlInfos(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterLoginAzureSqlInfos(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterLoginAzureSqlInfos Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterLoginAzureSqlInfos.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstEnableDisable), true, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterLoginAzureSqlWith), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_login_azure_sql_infos : 
        ///    enable_disable? 
        /// </summary>
        public static AstAlterLoginAzureSqlInfos AlterLoginAzureSqlInfos(AstEnableDisable enableDisable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterLoginAzureSqlInfos.AstAlterLoginAzureSqlInfos1 result = new AstAlterLoginAzureSqlInfos.AstAlterLoginAzureSqlInfos1(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_login_azure_sql_infos : 
        ///    WITH alter_login_azure_sql_with 
        /// </summary>
        public static AstAlterLoginAzureSqlInfos AlterLoginAzureSqlInfos(AstAlterLoginAzureSqlWith alterLoginAzureSqlWith)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterLoginAzureSqlInfos.AstAlterLoginAzureSqlInfos2 result = new AstAlterLoginAzureSqlInfos.AstAlterLoginAzureSqlInfos2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_login_azure_sql_with
    /// 	 : PASSWORD  EQUAL  password = stringtext  (OLD_PASSWORD  EQUAL  old_password = stringtext)?
    /// 	 | NAME  EQUAL  login_id
    /// </summary>
    public abstract partial class AstAlterLoginAzureSqlWith : AstRule
    {
        
        protected static string _rule = "alter_login_azure_sql_with\r\n\t : PASSWORD  EQUAL  password = stringtext  (OLD_PASS" +
            "WORD  EQUAL  old_password = stringtext)?\r\n\t | NAME  EQUAL  login_id";
        
        /// <summary>
        /// alter_login_azure_sql_with : PASSWORD  EQUAL  password = stringtext  (OLD_PASSWORD  EQUAL  old_password = stringtext)?
        /// </summary>
        public partial class AstAlterLoginAzureSqlWith1 : AstAlterLoginAzureSqlWith
        {
            
            internal AstAlterLoginAzureSqlWith1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterLoginAzureSqlWith1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterLoginAzureSqlWith1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterLoginAzureSqlWith1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginAzureSqlWith(this);
            }
        }
        /// <summary>
        /// alter_login_azure_sql_with : NAME  EQUAL  login_id
        /// </summary>
        public partial class AstAlterLoginAzureSqlWith2 : AstAlterLoginAzureSqlWith
        {
            
            internal AstAlterLoginAzureSqlWith2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterLoginAzureSqlWith2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterLoginAzureSqlWith2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterLoginAzureSqlWith2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginAzureSqlWith(this);
            }
        }
        

        
        internal AstAlterLoginAzureSqlWith(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAlterLoginAzureSqlWith(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterLoginAzureSqlWith(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterLoginAzureSqlWith(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterLoginAzureSqlWith Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterLoginAzureSqlWith.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstLoginId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_login_azure_sql_with : 
        ///    PASSWORD EQUAL password=stringtext OLD_PASSWORD EQUAL old_password=stringtext 
        /// </summary>
        public static AstAlterLoginAzureSqlWith AlterLoginAzureSqlWith(AstStringtext password, AstStringtext oldPassword)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterLoginAzureSqlWith.AstAlterLoginAzureSqlWith1 result = new AstAlterLoginAzureSqlWith.AstAlterLoginAzureSqlWith1(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_login_azure_sql_with : 
        ///    NAME EQUAL login_id 
        /// </summary>
        public static AstAlterLoginAzureSqlWith AlterLoginAzureSqlWith(AstLoginId loginId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterLoginAzureSqlWith.AstAlterLoginAzureSqlWith2 result = new AstAlterLoginAzureSqlWith.AstAlterLoginAzureSqlWith2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_master_key_sql_server
    /// 	 : ALTER  MASTER  KEY  (regenerate_mater_key | add_drop  add_master_key)
    /// </summary>
    public partial class AstAlterMasterKeySqlServer : AstDdlClause
    {
        
        protected static string _rule = "alter_master_key_sql_server\r\n\t : ALTER  MASTER  KEY  (regenerate_mater_key | add_" +
            "drop  add_master_key)";
        
        internal AstAlterMasterKeySqlServer(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterMasterKeySqlServer(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterMasterKeySqlServer(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterMasterKeySqlServer(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterMasterKeySqlServer(this);
        }
        
        /// <summary>
        /// alter_master_key_sql_server : 
        ///    ALTER MASTER KEY regenerate_mater_key 
        /// </summary>
        public static AstAlterMasterKeySqlServer AlterMasterKeySqlServer(AstRegenerateMaterKey regenerateMaterKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterMasterKeySqlServer result = new AstAlterMasterKeySqlServer(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_master_key_sql_server : 
        ///    ALTER MASTER KEY add_drop add_master_key 
        /// </summary>
        public static AstAlterMasterKeySqlServer AlterMasterKeySqlServer(AstAddDrop addDrop, AstAddMasterKey addMasterKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterMasterKeySqlServer result = new AstAlterMasterKeySqlServer(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_master_key_azure_sql
    /// 	 : ALTER  MASTER  KEY  (regenerate_mater_key | ADD  add_master_key | DROP  encryption_by_pwd)
    /// </summary>
    public partial class AstAlterMasterKeyAzureSql : AstDdlClause
    {
        
        protected static string _rule = "alter_master_key_azure_sql\r\n\t : ALTER  MASTER  KEY  (regenerate_mater_key | ADD  " +
            "add_master_key | DROP  encryption_by_pwd)";
        
        internal AstAlterMasterKeyAzureSql(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterMasterKeyAzureSql(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterMasterKeyAzureSql(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterMasterKeyAzureSql(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterMasterKeyAzureSql(this);
        }
        
        /// <summary>
        /// alter_master_key_azure_sql : 
        ///    ALTER MASTER KEY regenerate_mater_key 
        /// </summary>
        public static AstAlterMasterKeyAzureSql AlterMasterKeyAzureSql(AstRegenerateMaterKey regenerateMaterKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterMasterKeyAzureSql result = new AstAlterMasterKeyAzureSql(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_master_key_azure_sql : 
        ///    ALTER MASTER KEY ADD add_master_key 
        /// </summary>
        public static AstAlterMasterKeyAzureSql AlterMasterKeyAzureSql(AstAddMasterKey addMasterKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterMasterKeyAzureSql result = new AstAlterMasterKeyAzureSql(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_master_key_azure_sql : 
        ///    ALTER MASTER KEY DROP encryption_by_pwd 
        /// </summary>
        public static AstAlterMasterKeyAzureSql AlterMasterKeyAzureSql(AstEncryptionByPwd encryptionByPwd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterMasterKeyAzureSql result = new AstAlterMasterKeyAzureSql(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// add_master_key
    /// 	 : ENCRYPTION  BY  (SERVICE  MASTER  KEY | PASSWORD  EQUAL  encryption_password = stringtext)
    /// </summary>
    public partial class AstAddMasterKey : AstRule
    {
        
        protected static string _rule = "add_master_key\r\n\t : ENCRYPTION  BY  (SERVICE  MASTER  KEY | PASSWORD  EQUAL  encr" +
            "yption_password = stringtext)";
        
        internal AstAddMasterKey(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAddMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAddMasterKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAddMasterKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAddMasterKey(this);
        }
        
        /// <summary>
        /// add_master_key : 
        ///    ENCRYPTION BY PASSWORD EQUAL encryption_password=stringtext 
        /// </summary>
        public static AstAddMasterKey AddMasterKey(AstStringtext encryptionPassword)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAddMasterKey result = new AstAddMasterKey(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// message_validation_value
    /// 	 : message_validation_value_enum
    /// 	 | VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_id
    /// </summary>
    public abstract partial class AstMessageValidationValue : AstRule
    {
        
        protected static string _rule = "message_validation_value\r\n\t : message_validation_value_enum\r\n\t | VALID_XML  WITH " +
            " SCHEMA  COLLECTION  schema_collection_id";
        
        /// <summary>
        /// message_validation_value : message_validation_value_enum
        /// </summary>
        public partial class AstMessageValidationValue1 : AstMessageValidationValue
        {
            
            internal AstMessageValidationValue1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstMessageValidationValue1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstMessageValidationValue1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstMessageValidationValue1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMessageValidationValue(this);
            }
        }
        /// <summary>
        /// message_validation_value : VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_id
        /// </summary>
        public partial class AstMessageValidationValue2 : AstMessageValidationValue
        {
            
            internal AstMessageValidationValue2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstMessageValidationValue2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstMessageValidationValue2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstMessageValidationValue2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMessageValidationValue(this);
            }
        }
        

        
        internal AstMessageValidationValue(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstMessageValidationValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstMessageValidationValue(Position p) : 
                base(p)
        {
        }
        
        internal AstMessageValidationValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstMessageValidationValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstMessageValidationValue.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstMessageValidationValueEnum), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstSchemaCollectionId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// message_validation_value : 
        ///    message_validation_value_enum 
        /// </summary>
        public static AstMessageValidationValue MessageValidationValue(AstMessageValidationValueEnum messageValidationValueEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstMessageValidationValue.AstMessageValidationValue1 result = new AstMessageValidationValue.AstMessageValidationValue1(arguments);
            return result;
        }
        
        /// <summary>
        /// message_validation_value : 
        ///    VALID_XML WITH SCHEMA COLLECTION schema_collection_id 
        /// </summary>
        public static AstMessageValidationValue MessageValidationValue(AstSchemaCollectionId schemaCollectionId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstMessageValidationValue.AstMessageValidationValue2 result = new AstMessageValidationValue.AstMessageValidationValue2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_resource_governor
    /// 	 : ALTER  RESOURCE  GOVERNOR  (disable_reconfigure | WITH  LR_BRACKET  CLASSIFIER_FUNCTION  EQUAL  (schema_func_proc_ref | NULL_)  RR_BRACKET | RESET  STATISTICS | WITH  LR_BRACKET  MAX_OUTSTANDING_IO_PER_VOLUME  EQUAL  max_outstanding_io_per_volume = decimal  RR_BRACKET)
    /// </summary>
    public partial class AstAlterResourceGovernor : AstDdlClause
    {
        
        protected static string _rule = @"alter_resource_governor
	 : ALTER  RESOURCE  GOVERNOR  (disable_reconfigure | WITH  LR_BRACKET  CLASSIFIER_FUNCTION  EQUAL  (schema_func_proc_ref | NULL_)  RR_BRACKET | RESET  STATISTICS | WITH  LR_BRACKET  MAX_OUTSTANDING_IO_PER_VOLUME  EQUAL  max_outstanding_io_per_volume = decimal  RR_BRACKET)";
        
        internal AstAlterResourceGovernor(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterResourceGovernor(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterResourceGovernor(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterResourceGovernor(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterResourceGovernor(this);
        }
        
        /// <summary>
        /// alter_resource_governor : 
        ///    ALTER RESOURCE GOVERNOR disable_reconfigure 
        /// </summary>
        public static AstAlterResourceGovernor AlterResourceGovernor(AstDisableReconfigure disableReconfigure)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterResourceGovernor result = new AstAlterResourceGovernor(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_resource_governor : 
        ///    ALTER RESOURCE GOVERNOR WITH ( CLASSIFIER_FUNCTION EQUAL schema_func_proc_ref ) 
        /// </summary>
        public static AstAlterResourceGovernor AlterResourceGovernor(AstSchemaFuncProcRef schemaFuncProcRef)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterResourceGovernor result = new AstAlterResourceGovernor(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_resource_governor : 
        ///    ALTER RESOURCE GOVERNOR WITH ( MAX_OUTSTANDING_IO_PER_VOLUME EQUAL max_outstanding_io_per_volume=decimal ) 
        /// </summary>
        public static AstAlterResourceGovernor AlterResourceGovernor(AstDecimal maxOutstandingIoPerVolume)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterResourceGovernor result = new AstAlterResourceGovernor(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_db_role
    /// 	 : ALTER  ROLE  old_role_name = role_id  (add_drop  MEMBER  database_id | WITH  NAME  EQUAL  new_role_name = role_id)
    /// </summary>
    public partial class AstAlterDbRole : AstDdlClause
    {
        
        protected static string _rule = "alter_db_role\r\n\t : ALTER  ROLE  old_role_name = role_id  (add_drop  MEMBER  datab" +
            "ase_id | WITH  NAME  EQUAL  new_role_name = role_id)";
        
        internal AstAlterDbRole(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterDbRole(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterDbRole(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterDbRole(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterDbRole(this);
        }
        
        /// <summary>
        /// alter_db_role : 
        ///    ALTER ROLE old_role_name=role_id add_drop MEMBER database_id 
        /// </summary>
        public static AstAlterDbRole AlterDbRole(AstRoleId oldRoleName, AstAddDrop addDrop, AstDatabaseId databaseId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterDbRole result = new AstAlterDbRole(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_db_role : 
        ///    ALTER ROLE old_role_name=role_id WITH NAME EQUAL new_role_name=role_id 
        /// </summary>
        public static AstAlterDbRole AlterDbRole(AstRoleId oldRoleName, AstRoleId newRoleName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterDbRole result = new AstAlterDbRole(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_schema_name
    /// 	 : schema_id  schema_authorization?
    /// 	 | schema_id?  schema_authorization
    /// </summary>
    public abstract partial class AstCreateSchemaName : AstRule
    {
        
        protected static string _rule = "create_schema_name\r\n\t : schema_id  schema_authorization?\r\n\t | schema_id?  schema_" +
            "authorization";
        
        /// <summary>
        /// create_schema_name : schema_id  schema_authorization?
        /// </summary>
        public partial class AstCreateSchemaName1 : AstCreateSchemaName
        {
            
            internal AstCreateSchemaName1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateSchemaName1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateSchemaName1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateSchemaName1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSchemaName(this);
            }
        }
        /// <summary>
        /// create_schema_name : schema_id?  schema_authorization
        /// </summary>
        public partial class AstCreateSchemaName2 : AstCreateSchemaName
        {
            
            internal AstCreateSchemaName2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateSchemaName2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateSchemaName2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateSchemaName2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSchemaName(this);
            }
        }
        

        
        internal AstCreateSchemaName(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCreateSchemaName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateSchemaName(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateSchemaName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateSchemaName Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateSchemaName.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstSchemaId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstSchemaAuthorization), true, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstSchemaId), true, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstSchemaAuthorization), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_schema_name : 
        ///    schema_id schema_authorization? 
        /// </summary>
        public static AstCreateSchemaName CreateSchemaName(AstSchemaId schemaId, AstSchemaAuthorization schemaAuthorization)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateSchemaName.AstCreateSchemaName1 result = new AstCreateSchemaName.AstCreateSchemaName1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_schema_target
    /// 	 : create_table
    /// 	 | create_view
    /// 	 | grant_deny  enum_dml  ON  (SCHEMA  DOUBLE_COLON)?  object_id  TO  owner_id
    /// 	 | REVOKE  enum_dml  ON  (SCHEMA  DOUBLE_COLON)?  object_id  FROM  owner_id
    /// </summary>
    public abstract partial class AstCreateSchemaTarget : AstRule
    {
        
        protected static string _rule = "create_schema_target\r\n\t : create_table\r\n\t | create_view\r\n\t | grant_deny  enum_dml" +
            "  ON  (SCHEMA  DOUBLE_COLON)?  object_id  TO  owner_id\r\n\t | REVOKE  enum_dml  ON" +
            "  (SCHEMA  DOUBLE_COLON)?  object_id  FROM  owner_id";
        
        /// <summary>
        /// create_schema_target : create_table
        /// </summary>
        public partial class AstCreateSchemaTarget1 : AstCreateSchemaTarget
        {
            
            internal AstCreateSchemaTarget1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateSchemaTarget1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateSchemaTarget1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateSchemaTarget1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSchemaTarget(this);
            }
        }
        /// <summary>
        /// create_schema_target : create_view
        /// </summary>
        public partial class AstCreateSchemaTarget2 : AstCreateSchemaTarget
        {
            
            internal AstCreateSchemaTarget2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateSchemaTarget2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateSchemaTarget2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateSchemaTarget2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSchemaTarget(this);
            }
        }
        /// <summary>
        /// create_schema_target : grant_deny  enum_dml  ON  (SCHEMA  DOUBLE_COLON)?  object_id  TO  owner_id
        /// </summary>
        public partial class AstCreateSchemaTarget3 : AstCreateSchemaTarget
        {
            
            internal AstCreateSchemaTarget3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateSchemaTarget3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateSchemaTarget3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateSchemaTarget3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSchemaTarget(this);
            }
        }
        /// <summary>
        /// create_schema_target : REVOKE  enum_dml  ON  (SCHEMA  DOUBLE_COLON)?  object_id  FROM  owner_id
        /// </summary>
        public partial class AstCreateSchemaTarget4 : AstCreateSchemaTarget
        {
            
            internal AstCreateSchemaTarget4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateSchemaTarget4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateSchemaTarget4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateSchemaTarget4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSchemaTarget(this);
            }
        }
        

        
        internal AstCreateSchemaTarget(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCreateSchemaTarget(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateSchemaTarget(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateSchemaTarget(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateSchemaTarget Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateSchemaTarget.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstGrantDeny), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstEnumDml), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstObjectId), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstOwnerId), false, false))
                            {
                                return 3;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstEnumDml), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstObjectId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOwnerId), false, false))
                        {
                            return 4;
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstCreateTable), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateView), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_schema_target : 
        ///    create_table 
        /// </summary>
        public static AstCreateSchemaTarget CreateSchemaTarget(AstCreateTable createTable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateSchemaTarget.AstCreateSchemaTarget1 result = new AstCreateSchemaTarget.AstCreateSchemaTarget1(arguments);
            return result;
        }
        
        /// <summary>
        /// create_schema_target : 
        ///    create_view 
        /// </summary>
        public static AstCreateSchemaTarget CreateSchemaTarget(AstCreateView createView)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateSchemaTarget.AstCreateSchemaTarget2 result = new AstCreateSchemaTarget.AstCreateSchemaTarget2(arguments);
            return result;
        }
        
        /// <summary>
        /// create_schema_target : 
        ///    grant_deny enum_dml ON SCHEMA :: object_id TO owner_id 
        /// </summary>
        public static AstCreateSchemaTarget CreateSchemaTarget(AstGrantDeny grantDeny, AstEnumDml enumDml, AstObjectId objectId, AstOwnerId ownerId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateSchemaTarget.AstCreateSchemaTarget3 result = new AstCreateSchemaTarget.AstCreateSchemaTarget3(arguments);
            return result;
        }
        
        /// <summary>
        /// create_schema_target : 
        ///    REVOKE enum_dml ON SCHEMA :: object_id FROM owner_id 
        /// </summary>
        public static AstCreateSchemaTarget CreateSchemaTarget(AstEnumDml enumDml, AstObjectId objectId, AstOwnerId ownerId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateSchemaTarget.AstCreateSchemaTarget4 result = new AstCreateSchemaTarget.AstCreateSchemaTarget4(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// schema_table_ref_impact
    /// 	 : AFTER  insert_update
    /// 	 | BEFORE  update_delate
    /// </summary>
    public abstract partial class AstSchemaTableRefImpact : AstRule
    {
        
        protected static string _rule = "schema_table_ref_impact\r\n\t : AFTER  insert_update\r\n\t | BEFORE  update_delate";
        
        /// <summary>
        /// schema_table_ref_impact : AFTER  insert_update
        /// </summary>
        public partial class AstSchemaTableRefImpact1 : AstSchemaTableRefImpact
        {
            
            internal AstSchemaTableRefImpact1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSchemaTableRefImpact1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSchemaTableRefImpact1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSchemaTableRefImpact1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSchemaTableRefImpact(this);
            }
        }
        /// <summary>
        /// schema_table_ref_impact : BEFORE  update_delate
        /// </summary>
        public partial class AstSchemaTableRefImpact2 : AstSchemaTableRefImpact
        {
            
            internal AstSchemaTableRefImpact2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSchemaTableRefImpact2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSchemaTableRefImpact2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSchemaTableRefImpact2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSchemaTableRefImpact(this);
            }
        }
        

        
        internal AstSchemaTableRefImpact(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstSchemaTableRefImpact(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSchemaTableRefImpact(Position p) : 
                base(p)
        {
        }
        
        internal AstSchemaTableRefImpact(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSchemaTableRefImpact Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSchemaTableRefImpact.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstInsertUpdate), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstUpdateDelate), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// schema_table_ref_impact : 
        ///    AFTER insert_update 
        /// </summary>
        public static AstSchemaTableRefImpact SchemaTableRefImpact(AstInsertUpdate insertUpdate)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSchemaTableRefImpact.AstSchemaTableRefImpact1 result = new AstSchemaTableRefImpact.AstSchemaTableRefImpact1(arguments);
            return result;
        }
        
        /// <summary>
        /// schema_table_ref_impact : 
        ///    BEFORE update_delate 
        /// </summary>
        public static AstSchemaTableRefImpact SchemaTableRefImpact(AstUpdateDelate updateDelate)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSchemaTableRefImpact.AstSchemaTableRefImpact2 result = new AstSchemaTableRefImpact.AstSchemaTableRefImpact2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_sequence_restart
    /// 	 : RESTART  (WITH  decimal)?
    /// </summary>
    public partial class AstAlterSequenceRestart : AstRule
    {
        
        protected static string _rule = "alter_sequence_restart\r\n\t : RESTART  (WITH  decimal)?";
        
        internal AstAlterSequenceRestart(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterSequenceRestart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterSequenceRestart(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterSequenceRestart(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSequenceRestart(this);
        }
        
        /// <summary>
        /// alter_sequence_restart : 
        ///    RESTART WITH decimal 
        /// </summary>
        public static AstAlterSequenceRestart AlterSequenceRestart(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterSequenceRestart result = new AstAlterSequenceRestart(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_sequence_increment
    /// 	 : INCREMENT  BY  sequnce_increment = decimal
    /// </summary>
    public partial class AstAlterSequenceIncrement : AstRule
    {
        
        protected static string _rule = "alter_sequence_increment\r\n\t : INCREMENT  BY  sequnce_increment = decimal";
        
        internal AstAlterSequenceIncrement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterSequenceIncrement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterSequenceIncrement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterSequenceIncrement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSequenceIncrement(this);
        }
        
        /// <summary>
        /// alter_sequence_increment : 
        ///    INCREMENT BY sequnce_increment=decimal 
        /// </summary>
        public static AstAlterSequenceIncrement AlterSequenceIncrement(AstDecimal sequnceIncrement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterSequenceIncrement result = new AstAlterSequenceIncrement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// sequence_cache
    /// 	 : (CACHE  decimal | NO  CACHE)
    /// </summary>
    public partial class AstSequenceCache : AstRule
    {
        
        protected static string _rule = "sequence_cache\r\n\t : (CACHE  decimal | NO  CACHE)";
        
        internal AstSequenceCache(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSequenceCache(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSequenceCache(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSequenceCache(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSequenceCache(this);
        }
        
        /// <summary>
        /// sequence_cache : 
        ///    CACHE decimal 
        /// </summary>
        public static AstSequenceCache SequenceCache(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSequenceCache result = new AstSequenceCache(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_sequence_max_value
    /// 	 : (MAXVALUE  decimal | NO  MAXVALUE)?
    /// </summary>
    public partial class AstAlterSequenceMaxValue : AstRule
    {
        
        protected static string _rule = "alter_sequence_max_value\r\n\t : (MAXVALUE  decimal | NO  MAXVALUE)?";
        
        internal AstAlterSequenceMaxValue(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterSequenceMaxValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterSequenceMaxValue(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterSequenceMaxValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSequenceMaxValue(this);
        }
        
        /// <summary>
        /// alter_sequence_max_value : 
        ///    MAXVALUE decimal 
        /// </summary>
        public static AstAlterSequenceMaxValue AlterSequenceMaxValue(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterSequenceMaxValue result = new AstAlterSequenceMaxValue(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_sequence_min_value
    /// 	 : MINVALUE  decimal
    /// 	 | NO  MINVALUE
    /// </summary>
    public abstract partial class AstAlterSequenceMinValue : AstRule
    {
        
        protected static string _rule = "alter_sequence_min_value\r\n\t : MINVALUE  decimal\r\n\t | NO  MINVALUE";
        
        /// <summary>
        /// alter_sequence_min_value : MINVALUE  decimal
        /// </summary>
        public partial class AstAlterSequenceMinValue1 : AstAlterSequenceMinValue
        {
            
            internal AstAlterSequenceMinValue1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterSequenceMinValue1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterSequenceMinValue1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterSequenceMinValue1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterSequenceMinValue(this);
            }
        }
        /// <summary>
        /// alter_sequence_min_value : NO  MINVALUE
        /// </summary>
        public partial class AstAlterSequenceMinValue2 : AstAlterSequenceMinValue
        {
            
            internal AstAlterSequenceMinValue2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterSequenceMinValue2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterSequenceMinValue2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterSequenceMinValue2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterSequenceMinValue(this);
            }
        }
        

        
        internal AstAlterSequenceMinValue(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAlterSequenceMinValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterSequenceMinValue(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterSequenceMinValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterSequenceMinValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterSequenceMinValue.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
            }
            if ((list.Count == 0))
            {
                return 2;
            }
            return 0;
        }
        
        /// <summary>
        /// alter_sequence_min_value : 
        ///    MINVALUE decimal 
        /// </summary>
        public static AstAlterSequenceMinValue AlterSequenceMinValue(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterSequenceMinValue.AstAlterSequenceMinValue1 result = new AstAlterSequenceMinValue.AstAlterSequenceMinValue1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_sequence_min_value
    /// 	 : MINVALUE  real?
    /// 	 | NO  MINVALUE
    /// </summary>
    public abstract partial class AstCreateSequenceMinValue : AstRule
    {
        
        protected static string _rule = "create_sequence_min_value\r\n\t : MINVALUE  real?\r\n\t | NO  MINVALUE";
        
        /// <summary>
        /// create_sequence_min_value : MINVALUE  real?
        /// </summary>
        public partial class AstCreateSequenceMinValue1 : AstCreateSequenceMinValue
        {
            
            internal AstCreateSequenceMinValue1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateSequenceMinValue1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateSequenceMinValue1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateSequenceMinValue1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSequenceMinValue(this);
            }
        }
        /// <summary>
        /// create_sequence_min_value : NO  MINVALUE
        /// </summary>
        public partial class AstCreateSequenceMinValue2 : AstCreateSequenceMinValue
        {
            
            internal AstCreateSequenceMinValue2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateSequenceMinValue2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateSequenceMinValue2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateSequenceMinValue2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSequenceMinValue(this);
            }
        }
        

        
        internal AstCreateSequenceMinValue(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCreateSequenceMinValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateSequenceMinValue(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateSequenceMinValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateSequenceMinValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateSequenceMinValue.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstReal), true, false))
                {
                    return 1;
                }
            }
            if ((list.Count == 0))
            {
                return 2;
            }
            return 0;
        }
        
        /// <summary>
        /// create_sequence_min_value : 
        ///    MINVALUE real? 
        /// </summary>
        public static AstCreateSequenceMinValue CreateSequenceMinValue(AstReal real)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateSequenceMinValue.AstCreateSequenceMinValue1 result = new AstCreateSequenceMinValue.AstCreateSequenceMinValue1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_sequence_max_value
    /// 	 : MAXVALUE  real?
    /// 	 | NO  MAXVALUE
    /// </summary>
    public abstract partial class AstCreateSequenceMaxValue : AstRule
    {
        
        protected static string _rule = "create_sequence_max_value\r\n\t : MAXVALUE  real?\r\n\t | NO  MAXVALUE";
        
        /// <summary>
        /// create_sequence_max_value : MAXVALUE  real?
        /// </summary>
        public partial class AstCreateSequenceMaxValue1 : AstCreateSequenceMaxValue
        {
            
            internal AstCreateSequenceMaxValue1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateSequenceMaxValue1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateSequenceMaxValue1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateSequenceMaxValue1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSequenceMaxValue(this);
            }
        }
        /// <summary>
        /// create_sequence_max_value : NO  MAXVALUE
        /// </summary>
        public partial class AstCreateSequenceMaxValue2 : AstCreateSequenceMaxValue
        {
            
            internal AstCreateSequenceMaxValue2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateSequenceMaxValue2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateSequenceMaxValue2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateSequenceMaxValue2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSequenceMaxValue(this);
            }
        }
        

        
        internal AstCreateSequenceMaxValue(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCreateSequenceMaxValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateSequenceMaxValue(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateSequenceMaxValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateSequenceMaxValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateSequenceMaxValue.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstReal), true, false))
                {
                    return 1;
                }
            }
            if ((list.Count == 0))
            {
                return 2;
            }
            return 0;
        }
        
        /// <summary>
        /// create_sequence_max_value : 
        ///    MAXVALUE real? 
        /// </summary>
        public static AstCreateSequenceMaxValue CreateSequenceMaxValue(AstReal real)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateSequenceMaxValue.AstCreateSequenceMaxValue1 result = new AstCreateSequenceMaxValue.AstCreateSequenceMaxValue1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_server_audit_infos
    /// 	 : (TO  server_audit_file)?  with_server_audit_file?  where_server_audit_condition?
    /// 	 | REMOVE  WHERE
    /// 	 | MODIFY  NAME  EQUAL  audit_id
    /// </summary>
    public abstract partial class AstAlterServerAuditInfos : AstRule
    {
        
        protected static string _rule = "alter_server_audit_infos\r\n\t : (TO  server_audit_file)?  with_server_audit_file?  " +
            "where_server_audit_condition?\r\n\t | REMOVE  WHERE\r\n\t | MODIFY  NAME  EQUAL  audit" +
            "_id";
        
        /// <summary>
        /// alter_server_audit_infos : (TO  server_audit_file)?  with_server_audit_file?  where_server_audit_condition?
        /// </summary>
        public partial class AstAlterServerAuditInfos1 : AstAlterServerAuditInfos
        {
            
            internal AstAlterServerAuditInfos1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterServerAuditInfos1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterServerAuditInfos1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterServerAuditInfos1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerAuditInfos(this);
            }
        }
        /// <summary>
        /// alter_server_audit_infos : REMOVE  WHERE
        /// </summary>
        public partial class AstAlterServerAuditInfos2 : AstAlterServerAuditInfos
        {
            
            internal AstAlterServerAuditInfos2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterServerAuditInfos2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterServerAuditInfos2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterServerAuditInfos2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerAuditInfos(this);
            }
        }
        /// <summary>
        /// alter_server_audit_infos : MODIFY  NAME  EQUAL  audit_id
        /// </summary>
        public partial class AstAlterServerAuditInfos3 : AstAlterServerAuditInfos
        {
            
            internal AstAlterServerAuditInfos3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterServerAuditInfos3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterServerAuditInfos3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterServerAuditInfos3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerAuditInfos(this);
            }
        }
        

        
        internal AstAlterServerAuditInfos(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAlterServerAuditInfos(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterServerAuditInfos(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterServerAuditInfos(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterServerAuditInfos Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterServerAuditInfos.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstServerAuditFile), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstWithServerAuditFile), true, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstWhereServerAuditCondition), true, false))
                        {
                            return 1;
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAuditId), false, false))
                {
                    return 3;
                }
            }
            if ((list.Count == 0))
            {
                return 2;
            }
            return 0;
        }
        
        /// <summary>
        /// alter_server_audit_infos : 
        ///    TO server_audit_file with_server_audit_file? where_server_audit_condition? 
        /// </summary>
        public static AstAlterServerAuditInfos AlterServerAuditInfos(AstServerAuditFile serverAuditFile, AstWithServerAuditFile withServerAuditFile, AstWhereServerAuditCondition whereServerAuditCondition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServerAuditInfos.AstAlterServerAuditInfos1 result = new AstAlterServerAuditInfos.AstAlterServerAuditInfos1(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_server_audit_infos : 
        ///    MODIFY NAME EQUAL audit_id 
        /// </summary>
        public static AstAlterServerAuditInfos AlterServerAuditInfos(AstAuditId auditId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServerAuditInfos.AstAlterServerAuditInfos3 result = new AstAlterServerAuditInfos.AstAlterServerAuditInfos3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// server_audit_file_info
    /// 	 : QUEUE_DELAY  EQUAL  queue_delay = decimal
    /// 	 | ON_FAILURE  EQUAL  continue_shutdown
    /// 	 | STATE  EQUAL  on_off
    /// </summary>
    public abstract partial class AstServerAuditFileInfo : AstRule
    {
        
        protected static string _rule = "server_audit_file_info\r\n\t : QUEUE_DELAY  EQUAL  queue_delay = decimal\r\n\t | ON_FAI" +
            "LURE  EQUAL  continue_shutdown\r\n\t | STATE  EQUAL  on_off";
        
        /// <summary>
        /// server_audit_file_info : QUEUE_DELAY  EQUAL  queue_delay = decimal
        /// </summary>
        public partial class AstServerAuditFileInfo1 : AstServerAuditFileInfo
        {
            
            internal AstServerAuditFileInfo1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstServerAuditFileInfo1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstServerAuditFileInfo1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstServerAuditFileInfo1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileInfo(this);
            }
        }
        /// <summary>
        /// server_audit_file_info : ON_FAILURE  EQUAL  continue_shutdown
        /// </summary>
        public partial class AstServerAuditFileInfo2 : AstServerAuditFileInfo
        {
            
            internal AstServerAuditFileInfo2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstServerAuditFileInfo2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstServerAuditFileInfo2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstServerAuditFileInfo2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileInfo(this);
            }
        }
        /// <summary>
        /// server_audit_file_info : STATE  EQUAL  on_off
        /// </summary>
        public partial class AstServerAuditFileInfo3 : AstServerAuditFileInfo
        {
            
            internal AstServerAuditFileInfo3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstServerAuditFileInfo3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstServerAuditFileInfo3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstServerAuditFileInfo3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileInfo(this);
            }
        }
        

        
        internal AstServerAuditFileInfo(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstServerAuditFileInfo(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServerAuditFileInfo(Position p) : 
                base(p)
        {
        }
        
        internal AstServerAuditFileInfo(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstServerAuditFileInfo Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstServerAuditFileInfo.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstContinueShutdown), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// server_audit_file_info : 
        ///    QUEUE_DELAY EQUAL queue_delay=decimal 
        /// </summary>
        public static AstServerAuditFileInfo ServerAuditFileInfo(AstDecimal queueDelay)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerAuditFileInfo.AstServerAuditFileInfo1 result = new AstServerAuditFileInfo.AstServerAuditFileInfo1(arguments);
            return result;
        }
        
        /// <summary>
        /// server_audit_file_info : 
        ///    ON_FAILURE EQUAL continue_shutdown 
        /// </summary>
        public static AstServerAuditFileInfo ServerAuditFileInfo(AstContinueShutdown continueShutdown)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerAuditFileInfo.AstServerAuditFileInfo2 result = new AstServerAuditFileInfo.AstServerAuditFileInfo2(arguments);
            return result;
        }
        
        /// <summary>
        /// server_audit_file_info : 
        ///    STATE EQUAL on_off 
        /// </summary>
        public static AstServerAuditFileInfo ServerAuditFileInfo(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerAuditFileInfo.AstServerAuditFileInfo3 result = new AstServerAuditFileInfo.AstServerAuditFileInfo3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// server_audit_file
    /// 	 : FILE  LR_BRACKET  server_audit_file_specs?  RR_BRACKET
    /// 	 | APPLICATION_LOG
    /// 	 | SECURITY_LOG
    /// </summary>
    public abstract partial class AstServerAuditFile : AstRule
    {
        
        protected static string _rule = "server_audit_file\r\n\t : FILE  LR_BRACKET  server_audit_file_specs?  RR_BRACKET\r\n\t " +
            "| APPLICATION_LOG\r\n\t | SECURITY_LOG";
        
        /// <summary>
        /// server_audit_file : FILE  LR_BRACKET  server_audit_file_specs?  RR_BRACKET
        /// </summary>
        public partial class AstServerAuditFile1 : AstServerAuditFile
        {
            
            internal AstServerAuditFile1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstServerAuditFile1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstServerAuditFile1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstServerAuditFile1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFile(this);
            }
        }
        /// <summary>
        /// server_audit_file : APPLICATION_LOG
        /// </summary>
        public partial class AstServerAuditFile2 : AstServerAuditFile
        {
            
            internal AstServerAuditFile2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstServerAuditFile2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstServerAuditFile2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstServerAuditFile2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFile(this);
            }
        }
        /// <summary>
        /// server_audit_file : SECURITY_LOG
        /// </summary>
        public partial class AstServerAuditFile3 : AstServerAuditFile
        {
            
            internal AstServerAuditFile3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstServerAuditFile3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstServerAuditFile3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstServerAuditFile3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFile(this);
            }
        }
        

        
        internal AstServerAuditFile(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstServerAuditFile(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServerAuditFile(Position p) : 
                base(p)
        {
        }
        
        internal AstServerAuditFile(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstServerAuditFile Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstServerAuditFile.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstServerAuditFileSpecs), true, false))
                {
                    return 1;
                }
            }
            if ((list.Count == 0))
            {
                return 2;
                return 3;
            }
            return 0;
        }
        
        /// <summary>
        /// server_audit_file : 
        ///    FILE ( server_audit_file_specs? ) 
        /// </summary>
        public static AstServerAuditFile ServerAuditFile(AstServerAuditFileSpecs serverAuditFileSpecs)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerAuditFile.AstServerAuditFile1 result = new AstServerAuditFile.AstServerAuditFile1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// server_audit_file_spec
    /// 	 : FILEPATH  EQUAL  filepath = stringtext
    /// 	 | MAXSIZE  EQUAL  decimal_size_unlimited
    /// 	 | MAX_ROLLOVER_FILES  EQUAL  max_rollover_files = decimal_unlimited
    /// 	 | MAX_FILES  EQUAL  max_files = decimal
    /// 	 | RESERVE_DISK_SPACE  EQUAL  on_off
    /// </summary>
    public abstract partial class AstServerAuditFileSpec : AstRule
    {
        
        protected static string _rule = @"server_audit_file_spec
	 : FILEPATH  EQUAL  filepath = stringtext
	 | MAXSIZE  EQUAL  decimal_size_unlimited
	 | MAX_ROLLOVER_FILES  EQUAL  max_rollover_files = decimal_unlimited
	 | MAX_FILES  EQUAL  max_files = decimal
	 | RESERVE_DISK_SPACE  EQUAL  on_off";
        
        /// <summary>
        /// server_audit_file_spec : FILEPATH  EQUAL  filepath = stringtext
        /// </summary>
        public partial class AstServerAuditFileSpec1 : AstServerAuditFileSpec
        {
            
            internal AstServerAuditFileSpec1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstServerAuditFileSpec1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstServerAuditFileSpec1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstServerAuditFileSpec1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileSpec(this);
            }
        }
        /// <summary>
        /// server_audit_file_spec : MAXSIZE  EQUAL  decimal_size_unlimited
        /// </summary>
        public partial class AstServerAuditFileSpec2 : AstServerAuditFileSpec
        {
            
            internal AstServerAuditFileSpec2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstServerAuditFileSpec2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstServerAuditFileSpec2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstServerAuditFileSpec2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileSpec(this);
            }
        }
        /// <summary>
        /// server_audit_file_spec : MAX_ROLLOVER_FILES  EQUAL  max_rollover_files = decimal_unlimited
        /// </summary>
        public partial class AstServerAuditFileSpec3 : AstServerAuditFileSpec
        {
            
            internal AstServerAuditFileSpec3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstServerAuditFileSpec3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstServerAuditFileSpec3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstServerAuditFileSpec3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileSpec(this);
            }
        }
        /// <summary>
        /// server_audit_file_spec : MAX_FILES  EQUAL  max_files = decimal
        /// </summary>
        public partial class AstServerAuditFileSpec4 : AstServerAuditFileSpec
        {
            
            internal AstServerAuditFileSpec4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstServerAuditFileSpec4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstServerAuditFileSpec4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstServerAuditFileSpec4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileSpec(this);
            }
        }
        /// <summary>
        /// server_audit_file_spec : RESERVE_DISK_SPACE  EQUAL  on_off
        /// </summary>
        public partial class AstServerAuditFileSpec5 : AstServerAuditFileSpec
        {
            
            internal AstServerAuditFileSpec5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstServerAuditFileSpec5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstServerAuditFileSpec5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstServerAuditFileSpec5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileSpec(this);
            }
        }
        

        
        internal AstServerAuditFileSpec(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstServerAuditFileSpec(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServerAuditFileSpec(Position p) : 
                base(p)
        {
        }
        
        internal AstServerAuditFileSpec(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstServerAuditFileSpec Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstServerAuditFileSpec.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimalSizeUnlimited), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimalUnlimited), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// server_audit_file_spec : 
        ///    FILEPATH EQUAL filepath=stringtext 
        /// </summary>
        public static AstServerAuditFileSpec ServerAuditFileSpec(AstStringtext filepath)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerAuditFileSpec.AstServerAuditFileSpec1 result = new AstServerAuditFileSpec.AstServerAuditFileSpec1(arguments);
            return result;
        }
        
        /// <summary>
        /// server_audit_file_spec : 
        ///    MAXSIZE EQUAL decimal_size_unlimited 
        /// </summary>
        public static AstServerAuditFileSpec ServerAuditFileSpec(AstDecimalSizeUnlimited decimalSizeUnlimited)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerAuditFileSpec.AstServerAuditFileSpec2 result = new AstServerAuditFileSpec.AstServerAuditFileSpec2(arguments);
            return result;
        }
        
        /// <summary>
        /// server_audit_file_spec : 
        ///    MAX_ROLLOVER_FILES EQUAL max_rollover_files=decimal_unlimited 
        /// </summary>
        public static AstServerAuditFileSpec ServerAuditFileSpec(AstDecimalUnlimited maxRolloverFiles)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerAuditFileSpec.AstServerAuditFileSpec3 result = new AstServerAuditFileSpec.AstServerAuditFileSpec3(arguments);
            return result;
        }
        
        /// <summary>
        /// server_audit_file_spec : 
        ///    MAX_FILES EQUAL max_files=decimal 
        /// </summary>
        public static AstServerAuditFileSpec ServerAuditFileSpec(AstDecimal maxFiles)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerAuditFileSpec.AstServerAuditFileSpec4 result = new AstServerAuditFileSpec.AstServerAuditFileSpec4(arguments);
            return result;
        }
        
        /// <summary>
        /// server_audit_file_spec : 
        ///    RESERVE_DISK_SPACE EQUAL on_off 
        /// </summary>
        public static AstServerAuditFileSpec ServerAuditFileSpec(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerAuditFileSpec.AstServerAuditFileSpec5 result = new AstServerAuditFileSpec.AstServerAuditFileSpec5(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// decimal_unlimited
    /// 	 : decimal
    /// 	 | UNLIMITED
    /// </summary>
    public abstract partial class AstDecimalUnlimited : AstRule
    {
        
        protected static string _rule = "decimal_unlimited\r\n\t : decimal\r\n\t | UNLIMITED";
        
        /// <summary>
        /// decimal_unlimited : decimal
        /// </summary>
        public partial class AstDecimalUnlimited1 : AstDecimalUnlimited
        {
            
            internal AstDecimalUnlimited1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDecimalUnlimited1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDecimalUnlimited1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDecimalUnlimited1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecimalUnlimited(this);
            }
        }
        /// <summary>
        /// decimal_unlimited : UNLIMITED
        /// </summary>
        public partial class AstDecimalUnlimited2 : AstDecimalUnlimited
        {
            
            internal AstDecimalUnlimited2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDecimalUnlimited2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDecimalUnlimited2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDecimalUnlimited2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecimalUnlimited(this);
            }
        }
        

        
        internal AstDecimalUnlimited(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstDecimalUnlimited(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDecimalUnlimited(Position p) : 
                base(p)
        {
        }
        
        internal AstDecimalUnlimited(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDecimalUnlimited Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDecimalUnlimited.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
            }
            if ((list.Count == 0))
            {
                return 2;
            }
            return 0;
        }
        
        /// <summary>
        /// decimal_unlimited : 
        ///    decimal 
        /// </summary>
        public static AstDecimalUnlimited DecimalUnlimited(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDecimalUnlimited.AstDecimalUnlimited1 result = new AstDecimalUnlimited.AstDecimalUnlimited1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// decimal_size_unlimited
    /// 	 : (decimal  size_unity | UNLIMITED)
    /// </summary>
    public partial class AstDecimalSizeUnlimited : AstRule
    {
        
        protected static string _rule = "decimal_size_unlimited\r\n\t : (decimal  size_unity | UNLIMITED)";
        
        internal AstDecimalSizeUnlimited(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDecimalSizeUnlimited(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDecimalSizeUnlimited(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDecimalSizeUnlimited(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecimalSizeUnlimited(this);
        }
        
        /// <summary>
        /// decimal_size_unlimited : 
        ///    decimal size_unity 
        /// </summary>
        public static AstDecimalSizeUnlimited DecimalSizeUnlimited(AstDecimal @decimal, AstSizeUnity sizeUnity)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDecimalSizeUnlimited result = new AstDecimalSizeUnlimited(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_server_audit_condition
    /// 	 : COMMA?  (NOT?)  event_field_id  audit_operator  decimal_string
    /// 	 | COMMA?  and_or  NOT?  audit_operator  decimal_string
    /// </summary>
    public abstract partial class AstAlterServerAuditCondition : AstRule
    {
        
        protected static string _rule = "alter_server_audit_condition\r\n\t : COMMA?  (NOT?)  event_field_id  audit_operator " +
            " decimal_string\r\n\t | COMMA?  and_or  NOT?  audit_operator  decimal_string";
        
        /// <summary>
        /// alter_server_audit_condition : COMMA?  (NOT?)  event_field_id  audit_operator  decimal_string
        /// </summary>
        public partial class AstAlterServerAuditCondition1 : AstAlterServerAuditCondition
        {
            
            internal AstAlterServerAuditCondition1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterServerAuditCondition1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterServerAuditCondition1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterServerAuditCondition1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerAuditCondition(this);
            }
        }
        /// <summary>
        /// alter_server_audit_condition : COMMA?  and_or  NOT?  audit_operator  decimal_string
        /// </summary>
        public partial class AstAlterServerAuditCondition2 : AstAlterServerAuditCondition
        {
            
            internal AstAlterServerAuditCondition2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterServerAuditCondition2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterServerAuditCondition2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterServerAuditCondition2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerAuditCondition(this);
            }
        }
        

        
        internal AstAlterServerAuditCondition(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAlterServerAuditCondition(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterServerAuditCondition(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterServerAuditCondition(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterServerAuditCondition Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterServerAuditCondition.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstEventFieldId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAuditOperator), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstDecimalString), false, false))
                        {
                            return 1;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstAndOr), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAuditOperator), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstDecimalString), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_server_audit_condition : 
        ///    COMMA? NOT() event_field_id audit_operator decimal_string 
        /// </summary>
        public static AstAlterServerAuditCondition AlterServerAuditCondition(AstEventFieldId eventFieldId, AstAuditOperator auditOperator, AstDecimalString decimalString)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServerAuditCondition.AstAlterServerAuditCondition1 result = new AstAlterServerAuditCondition.AstAlterServerAuditCondition1(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_server_audit_condition : 
        ///    COMMA? and_or NOT? audit_operator decimal_string 
        /// </summary>
        public static AstAlterServerAuditCondition AlterServerAuditCondition(AstAndOr andOr, AstAuditOperator auditOperator, AstDecimalString decimalString)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServerAuditCondition.AstAlterServerAuditCondition2 result = new AstAlterServerAuditCondition.AstAlterServerAuditCondition2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_server_audit_to_infos
    /// 	 : (TO  server_audit_file)?  (WITH  LR_BRACKET  create_server_audit_withs?  RR_BRACKET)?  where_server_audit_condition?
    /// 	 | REMOVE  WHERE
    /// 	 | MODIFY  NAME  EQUAL  audit_id
    /// </summary>
    public abstract partial class AstCreateServerAuditToInfos : AstRule
    {
        
        protected static string _rule = "create_server_audit_to_infos\r\n\t : (TO  server_audit_file)?  (WITH  LR_BRACKET  cr" +
            "eate_server_audit_withs?  RR_BRACKET)?  where_server_audit_condition?\r\n\t | REMOV" +
            "E  WHERE\r\n\t | MODIFY  NAME  EQUAL  audit_id";
        
        /// <summary>
        /// create_server_audit_to_infos : (TO  server_audit_file)?  (WITH  LR_BRACKET  create_server_audit_withs?  RR_BRACKET)?  where_server_audit_condition?
        /// </summary>
        public partial class AstCreateServerAuditToInfos1 : AstCreateServerAuditToInfos
        {
            
            internal AstCreateServerAuditToInfos1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateServerAuditToInfos1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateServerAuditToInfos1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateServerAuditToInfos1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditToInfos(this);
            }
        }
        /// <summary>
        /// create_server_audit_to_infos : REMOVE  WHERE
        /// </summary>
        public partial class AstCreateServerAuditToInfos2 : AstCreateServerAuditToInfos
        {
            
            internal AstCreateServerAuditToInfos2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateServerAuditToInfos2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateServerAuditToInfos2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateServerAuditToInfos2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditToInfos(this);
            }
        }
        /// <summary>
        /// create_server_audit_to_infos : MODIFY  NAME  EQUAL  audit_id
        /// </summary>
        public partial class AstCreateServerAuditToInfos3 : AstCreateServerAuditToInfos
        {
            
            internal AstCreateServerAuditToInfos3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateServerAuditToInfos3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateServerAuditToInfos3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateServerAuditToInfos3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditToInfos(this);
            }
        }
        

        
        internal AstCreateServerAuditToInfos(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCreateServerAuditToInfos(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateServerAuditToInfos(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateServerAuditToInfos(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateServerAuditToInfos Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateServerAuditToInfos.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstServerAuditFile), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstCreateServerAuditWiths), true, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstWhereServerAuditCondition), true, false))
                        {
                            return 1;
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAuditId), false, false))
                {
                    return 3;
                }
            }
            if ((list.Count == 0))
            {
                return 2;
            }
            return 0;
        }
        
        /// <summary>
        /// create_server_audit_to_infos : 
        ///    TO server_audit_file WITH ( create_server_audit_withs? ) where_server_audit_condition? 
        /// </summary>
        public static AstCreateServerAuditToInfos CreateServerAuditToInfos(AstServerAuditFile serverAuditFile, AstCreateServerAuditWiths createServerAuditWiths, AstWhereServerAuditCondition whereServerAuditCondition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateServerAuditToInfos.AstCreateServerAuditToInfos1 result = new AstCreateServerAuditToInfos.AstCreateServerAuditToInfos1(arguments);
            return result;
        }
        
        /// <summary>
        /// create_server_audit_to_infos : 
        ///    MODIFY NAME EQUAL audit_id 
        /// </summary>
        public static AstCreateServerAuditToInfos CreateServerAuditToInfos(AstAuditId auditId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateServerAuditToInfos.AstCreateServerAuditToInfos3 result = new AstCreateServerAuditToInfos.AstCreateServerAuditToInfos3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_server_audit_with
    /// 	 : QUEUE_DELAY  EQUAL  queue_delay = decimal
    /// 	 | ON_FAILURE  EQUAL  continue_shutdown
    /// 	 | STATE  EQUAL  state = on_off
    /// 	 | audit1 = audit_guid_id  EQUAL  audit2 = audit_guid_id
    /// </summary>
    public abstract partial class AstCreateServerAuditWith : AstRule
    {
        
        protected static string _rule = "create_server_audit_with\r\n\t : QUEUE_DELAY  EQUAL  queue_delay = decimal\r\n\t | ON_F" +
            "AILURE  EQUAL  continue_shutdown\r\n\t | STATE  EQUAL  state = on_off\r\n\t | audit1 =" +
            " audit_guid_id  EQUAL  audit2 = audit_guid_id";
        
        /// <summary>
        /// create_server_audit_with : QUEUE_DELAY  EQUAL  queue_delay = decimal
        /// </summary>
        public partial class AstCreateServerAuditWith1 : AstCreateServerAuditWith
        {
            
            internal AstCreateServerAuditWith1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateServerAuditWith1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateServerAuditWith1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateServerAuditWith1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditWith(this);
            }
        }
        /// <summary>
        /// create_server_audit_with : ON_FAILURE  EQUAL  continue_shutdown
        /// </summary>
        public partial class AstCreateServerAuditWith2 : AstCreateServerAuditWith
        {
            
            internal AstCreateServerAuditWith2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateServerAuditWith2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateServerAuditWith2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateServerAuditWith2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditWith(this);
            }
        }
        /// <summary>
        /// create_server_audit_with : STATE  EQUAL  state = on_off
        /// </summary>
        public partial class AstCreateServerAuditWith3 : AstCreateServerAuditWith
        {
            
            internal AstCreateServerAuditWith3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateServerAuditWith3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateServerAuditWith3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateServerAuditWith3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditWith(this);
            }
        }
        /// <summary>
        /// create_server_audit_with : audit1 = audit_guid_id  EQUAL  audit2 = audit_guid_id
        /// </summary>
        public partial class AstCreateServerAuditWith4 : AstCreateServerAuditWith
        {
            
            internal AstCreateServerAuditWith4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateServerAuditWith4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateServerAuditWith4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateServerAuditWith4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditWith(this);
            }
        }
        

        
        internal AstCreateServerAuditWith(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCreateServerAuditWith(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateServerAuditWith(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateServerAuditWith(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateServerAuditWith Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateServerAuditWith.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstAuditGuidId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAuditGuidId), false, false))
                    {
                        return 4;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstContinueShutdown), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_server_audit_with : 
        ///    QUEUE_DELAY EQUAL queue_delay=decimal 
        /// </summary>
        public static AstCreateServerAuditWith CreateServerAuditWith(AstDecimal queueDelay)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateServerAuditWith.AstCreateServerAuditWith1 result = new AstCreateServerAuditWith.AstCreateServerAuditWith1(arguments);
            return result;
        }
        
        /// <summary>
        /// create_server_audit_with : 
        ///    ON_FAILURE EQUAL continue_shutdown 
        /// </summary>
        public static AstCreateServerAuditWith CreateServerAuditWith(AstContinueShutdown continueShutdown)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateServerAuditWith.AstCreateServerAuditWith2 result = new AstCreateServerAuditWith.AstCreateServerAuditWith2(arguments);
            return result;
        }
        
        /// <summary>
        /// create_server_audit_with : 
        ///    STATE EQUAL state=on_off 
        /// </summary>
        public static AstCreateServerAuditWith CreateServerAuditWith(AstOnOff state)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateServerAuditWith.AstCreateServerAuditWith3 result = new AstCreateServerAuditWith.AstCreateServerAuditWith3(arguments);
            return result;
        }
        
        /// <summary>
        /// create_server_audit_with : 
        ///    audit1=audit_guid_id EQUAL audit2=audit_guid_id 
        /// </summary>
        public static AstCreateServerAuditWith CreateServerAuditWith(AstAuditGuidId audit1, AstAuditGuidId audit2)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateServerAuditWith.AstCreateServerAuditWith4 result = new AstCreateServerAuditWith.AstCreateServerAuditWith4(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_server_configuration
    /// 	 : ALTER  SERVER  CONFIGURATION  SET  (server_config_process_affinity | server_config_diagnostic_log | server_config_failover | HADR  CLUSTER  CONTEXT  EQUAL  (stringtext | LOCAL) | server_config_buffer_pool_ext | SET  SOFTNUMA  on_off)
    /// </summary>
    public partial class AstAlterServerConfiguration : AstDdlClause
    {
        
        protected static string _rule = @"alter_server_configuration
	 : ALTER  SERVER  CONFIGURATION  SET  (server_config_process_affinity | server_config_diagnostic_log | server_config_failover | HADR  CLUSTER  CONTEXT  EQUAL  (stringtext | LOCAL) | server_config_buffer_pool_ext | SET  SOFTNUMA  on_off)";
        
        internal AstAlterServerConfiguration(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterServerConfiguration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterServerConfiguration(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterServerConfiguration(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerConfiguration(this);
        }
        
        /// <summary>
        /// alter_server_configuration : 
        ///    ALTER SERVER CONFIGURATION SET server_config_process_affinity 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(AstServerConfigProcessAffinity serverConfigProcessAffinity)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServerConfiguration result = new AstAlterServerConfiguration(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_server_configuration : 
        ///    ALTER SERVER CONFIGURATION SET server_config_diagnostic_log 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(AstServerConfigDiagnosticLog serverConfigDiagnosticLog)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServerConfiguration result = new AstAlterServerConfiguration(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_server_configuration : 
        ///    ALTER SERVER CONFIGURATION SET server_config_failover 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(AstServerConfigFailover serverConfigFailover)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServerConfiguration result = new AstAlterServerConfiguration(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_server_configuration : 
        ///    ALTER SERVER CONFIGURATION SET HADR CLUSTER CONTEXT EQUAL stringtext 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServerConfiguration result = new AstAlterServerConfiguration(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_server_configuration : 
        ///    ALTER SERVER CONFIGURATION SET server_config_buffer_pool_ext 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(AstServerConfigBufferPoolExt serverConfigBufferPoolExt)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServerConfiguration result = new AstAlterServerConfiguration(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_server_configuration : 
        ///    ALTER SERVER CONFIGURATION SET SET SOFTNUMA on_off 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServerConfiguration result = new AstAlterServerConfiguration(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// server_config_process_affinity
    /// 	 : PROCESS  AFFINITY  (CPU  EQUAL  (AUTO | decimal_range  decimal_ranges) | NUMANODE  EQUAL  decimal_range  decimal_ranges)
    /// </summary>
    public partial class AstServerConfigProcessAffinity : AstRule
    {
        
        protected static string _rule = "server_config_process_affinity\r\n\t : PROCESS  AFFINITY  (CPU  EQUAL  (AUTO | decim" +
            "al_range  decimal_ranges) | NUMANODE  EQUAL  decimal_range  decimal_ranges)";
        
        internal AstServerConfigProcessAffinity(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstServerConfigProcessAffinity(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstServerConfigProcessAffinity(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstServerConfigProcessAffinity(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerConfigProcessAffinity(this);
        }
        
        /// <summary>
        /// server_config_process_affinity : 
        ///    PROCESS AFFINITY CPU EQUAL decimal_range decimal_ranges 
        /// </summary>
        public static AstServerConfigProcessAffinity ServerConfigProcessAffinity(AstDecimalRange decimalRange, AstDecimalRanges decimalRanges)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerConfigProcessAffinity result = new AstServerConfigProcessAffinity(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// server_config_diagnostic_log
    /// 	 : DIAGNOSTICS  LOG  (on_off | PATH  EQUAL  string_or_default | MAX_SIZE  EQUAL  size_value | MAX_FILES  EQUAL  decimal_default)
    /// </summary>
    public partial class AstServerConfigDiagnosticLog : AstRule
    {
        
        protected static string _rule = "server_config_diagnostic_log\r\n\t : DIAGNOSTICS  LOG  (on_off | PATH  EQUAL  string" +
            "_or_default | MAX_SIZE  EQUAL  size_value | MAX_FILES  EQUAL  decimal_default)";
        
        internal AstServerConfigDiagnosticLog(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstServerConfigDiagnosticLog(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstServerConfigDiagnosticLog(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstServerConfigDiagnosticLog(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerConfigDiagnosticLog(this);
        }
        
        /// <summary>
        /// server_config_diagnostic_log : 
        ///    DIAGNOSTICS LOG on_off 
        /// </summary>
        public static AstServerConfigDiagnosticLog ServerConfigDiagnosticLog(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerConfigDiagnosticLog result = new AstServerConfigDiagnosticLog(arguments);
            return result;
        }
        
        /// <summary>
        /// server_config_diagnostic_log : 
        ///    DIAGNOSTICS LOG PATH EQUAL string_or_default 
        /// </summary>
        public static AstServerConfigDiagnosticLog ServerConfigDiagnosticLog(AstStringOrDefault stringOrDefault)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerConfigDiagnosticLog result = new AstServerConfigDiagnosticLog(arguments);
            return result;
        }
        
        /// <summary>
        /// server_config_diagnostic_log : 
        ///    DIAGNOSTICS LOG MAX_SIZE EQUAL size_value 
        /// </summary>
        public static AstServerConfigDiagnosticLog ServerConfigDiagnosticLog(AstSizeValue sizeValue)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerConfigDiagnosticLog result = new AstServerConfigDiagnosticLog(arguments);
            return result;
        }
        
        /// <summary>
        /// server_config_diagnostic_log : 
        ///    DIAGNOSTICS LOG MAX_FILES EQUAL decimal_default 
        /// </summary>
        public static AstServerConfigDiagnosticLog ServerConfigDiagnosticLog(AstDecimalDefault decimalDefault)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerConfigDiagnosticLog result = new AstServerConfigDiagnosticLog(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// server_config_failover
    /// 	 : FAILOVER  CLUSTER  PROPERTY  (VERBOSELOGGING  EQUAL  verboselogging = string_or_default | SQLDUMPERFLAGS  EQUAL  sqldumperflags = string_or_default | SQLDUMPERPATH  EQUAL  sqldumperpath = string_or_default | SQLDUMPERTIMEOUT  sqldumpertimeout = string_or_default | FAILURECONDITIONLEVEL  EQUAL  failure = string_or_default | HEALTHCHECKTIMEOUT  EQUAL  health = decimal_default)
    /// </summary>
    public partial class AstServerConfigFailover : AstRule
    {
        
        protected static string _rule = @"server_config_failover
	 : FAILOVER  CLUSTER  PROPERTY  (VERBOSELOGGING  EQUAL  verboselogging = string_or_default | SQLDUMPERFLAGS  EQUAL  sqldumperflags = string_or_default | SQLDUMPERPATH  EQUAL  sqldumperpath = string_or_default | SQLDUMPERTIMEOUT  sqldumpertimeout = string_or_default | FAILURECONDITIONLEVEL  EQUAL  failure = string_or_default | HEALTHCHECKTIMEOUT  EQUAL  health = decimal_default)";
        
        internal AstServerConfigFailover(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstServerConfigFailover(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstServerConfigFailover(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstServerConfigFailover(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerConfigFailover(this);
        }
        
        /// <summary>
        /// server_config_failover : 
        ///    FAILOVER CLUSTER PROPERTY VERBOSELOGGING EQUAL verboselogging=string_or_default 
        /// </summary>
        public static AstServerConfigFailover ServerConfigFailover(AstStringOrDefault verboselogging)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerConfigFailover result = new AstServerConfigFailover(arguments);
            return result;
        }
        
        /// <summary>
        /// server_config_failover : 
        ///    FAILOVER CLUSTER PROPERTY HEALTHCHECKTIMEOUT EQUAL health=decimal_default 
        /// </summary>
        public static AstServerConfigFailover ServerConfigFailover(AstDecimalDefault health)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerConfigFailover result = new AstServerConfigFailover(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// server_config_buffer_pool_ext
    /// 	 : BUFFER  POOL  EXTENSION  (ON  LR_BRACKET  FILENAME  EQUAL  filename = stringtext  COMMA  SIZE  EQUAL  size = decimal  size_unity  RR_BRACKET | OFF)
    /// </summary>
    public partial class AstServerConfigBufferPoolExt : AstRule
    {
        
        protected static string _rule = "server_config_buffer_pool_ext\r\n\t : BUFFER  POOL  EXTENSION  (ON  LR_BRACKET  FILE" +
            "NAME  EQUAL  filename = stringtext  COMMA  SIZE  EQUAL  size = decimal  size_uni" +
            "ty  RR_BRACKET | OFF)";
        
        internal AstServerConfigBufferPoolExt(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstServerConfigBufferPoolExt(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstServerConfigBufferPoolExt(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstServerConfigBufferPoolExt(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerConfigBufferPoolExt(this);
        }
        
        /// <summary>
        /// server_config_buffer_pool_ext : 
        ///    BUFFER POOL EXTENSION ON ( FILENAME EQUAL filename=stringtext , SIZE EQUAL size=decimal size_unity ) 
        /// </summary>
        public static AstServerConfigBufferPoolExt ServerConfigBufferPoolExt(AstStringtext filename, AstDecimal size, AstSizeUnity sizeUnity)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServerConfigBufferPoolExt result = new AstServerConfigBufferPoolExt(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// string_or_default
    /// 	 : stringtext
    /// 	 | DEFAULT
    /// </summary>
    public abstract partial class AstStringOrDefault : AstRule
    {
        
        protected static string _rule = "string_or_default\r\n\t : stringtext\r\n\t | DEFAULT";
        
        /// <summary>
        /// string_or_default : stringtext
        /// </summary>
        public partial class AstStringOrDefault1 : AstStringOrDefault
        {
            
            internal AstStringOrDefault1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstStringOrDefault1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstStringOrDefault1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstStringOrDefault1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringOrDefault(this);
            }
        }
        /// <summary>
        /// string_or_default : DEFAULT
        /// </summary>
        public partial class AstStringOrDefault2 : AstStringOrDefault
        {
            
            internal AstStringOrDefault2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstStringOrDefault2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstStringOrDefault2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstStringOrDefault2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringOrDefault(this);
            }
        }
        

        
        internal AstStringOrDefault(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstStringOrDefault(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstStringOrDefault(Position p) : 
                base(p)
        {
        }
        
        internal AstStringOrDefault(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstStringOrDefault Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstStringOrDefault.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
            }
            if ((list.Count == 0))
            {
                return 2;
            }
            return 0;
        }
        
        /// <summary>
        /// string_or_default : 
        ///    stringtext 
        /// </summary>
        public static AstStringOrDefault StringOrDefault(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstStringOrDefault.AstStringOrDefault1 result = new AstStringOrDefault.AstStringOrDefault1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// contract
    /// 	 : modified_contract_id
    /// 	 | DEFAULT
    /// </summary>
    public abstract partial class AstContract : AstRule
    {
        
        protected static string _rule = "contract\r\n\t : modified_contract_id\r\n\t | DEFAULT";
        
        /// <summary>
        /// contract : modified_contract_id
        /// </summary>
        public partial class AstContract1 : AstContract
        {
            
            internal AstContract1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstContract1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstContract1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstContract1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitContract(this);
            }
        }
        /// <summary>
        /// contract : DEFAULT
        /// </summary>
        public partial class AstContract2 : AstContract
        {
            
            internal AstContract2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstContract2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstContract2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstContract2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitContract(this);
            }
        }
        

        
        internal AstContract(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstContract(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstContract(Position p) : 
                base(p)
        {
        }
        
        internal AstContract(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstContract Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstContract.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstModifiedContractId), false, false))
                {
                    return 1;
                }
            }
            if ((list.Count == 0))
            {
                return 2;
            }
            return 0;
        }
        
        /// <summary>
        /// contract : 
        ///    modified_contract_id 
        /// </summary>
        public static AstContract Contract(AstModifiedContractId modifiedContractId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstContract.AstContract1 result = new AstContract.AstContract1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_service_master_key
    /// 	 : ALTER  SERVICE  MASTER  KEY  (FORCE?  REGENERATE | (WITH  (OLD_ACCOUNT  EQUAL  acold_account_name = stringtext  COMMA  OLD_PASSWORD  EQUAL  old_password = stringtext | NEW_ACCOUNT  EQUAL  new_account_name = stringtext  COMMA  NEW_PASSWORD  EQUAL  new_password = stringtext)?))
    /// </summary>
    public partial class AstAlterServiceMasterKey : AstDdlClause
    {
        
        protected static string _rule = @"alter_service_master_key
	 : ALTER  SERVICE  MASTER  KEY  (FORCE?  REGENERATE | (WITH  (OLD_ACCOUNT  EQUAL  acold_account_name = stringtext  COMMA  OLD_PASSWORD  EQUAL  old_password = stringtext | NEW_ACCOUNT  EQUAL  new_account_name = stringtext  COMMA  NEW_PASSWORD  EQUAL  new_password = stringtext)?))";
        
        internal AstAlterServiceMasterKey(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterServiceMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterServiceMasterKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterServiceMasterKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServiceMasterKey(this);
        }
        
        /// <summary>
        /// alter_service_master_key : 
        ///    ALTER SERVICE MASTER KEY WITH OLD_ACCOUNT EQUAL acold_account_name=stringtext , OLD_PASSWORD EQUAL old_password=stringtext 
        /// </summary>
        public static AstAlterServiceMasterKey AlterServiceMasterKey(AstStringtext acoldAccountName, AstStringtext oldPassword)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterServiceMasterKey result = new AstAlterServiceMasterKey(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_user_item
    /// 	 : NAME  EQUAL  user_id
    /// 	 | DEFAULT_SCHEMA  EQUAL  (schema_id | NULL_)
    /// 	 | LOGIN  EQUAL  login_id
    /// 	 | PASSWORD  EQUAL  newpwd = stringtext  (OLD_PASSWORD  EQUAL  oldpwd = stringtext)+
    /// 	 | DEFAULT_LANGUAGE  EQUAL  (NONE | lcid = decimal | language)
    /// 	 | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
    /// </summary>
    public abstract partial class AstAlterUserItem : AstRule
    {
        
        protected static string _rule = @"alter_user_item
	 : NAME  EQUAL  user_id
	 | DEFAULT_SCHEMA  EQUAL  (schema_id | NULL_)
	 | LOGIN  EQUAL  login_id
	 | PASSWORD  EQUAL  newpwd = stringtext  (OLD_PASSWORD  EQUAL  oldpwd = stringtext)+
	 | DEFAULT_LANGUAGE  EQUAL  (NONE | lcid = decimal | language)
	 | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off";
        
        /// <summary>
        /// alter_user_item : NAME  EQUAL  user_id
        /// </summary>
        public partial class AstAlterUserItem1 : AstAlterUserItem
        {
            
            internal AstAlterUserItem1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterUserItem1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterUserItem1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterUserItem1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserItem(this);
            }
        }
        /// <summary>
        /// alter_user_item : DEFAULT_SCHEMA  EQUAL  (schema_id | NULL_)
        /// </summary>
        public partial class AstAlterUserItem2 : AstAlterUserItem
        {
            
            internal AstAlterUserItem2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterUserItem2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterUserItem2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterUserItem2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserItem(this);
            }
        }
        /// <summary>
        /// alter_user_item : LOGIN  EQUAL  login_id
        /// </summary>
        public partial class AstAlterUserItem3 : AstAlterUserItem
        {
            
            internal AstAlterUserItem3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterUserItem3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterUserItem3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterUserItem3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserItem(this);
            }
        }
        /// <summary>
        /// alter_user_item : PASSWORD  EQUAL  newpwd = stringtext  (OLD_PASSWORD  EQUAL  oldpwd = stringtext)+
        /// </summary>
        public partial class AstAlterUserItem4 : AstAlterUserItem
        {
            
            internal AstAlterUserItem4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterUserItem4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterUserItem4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterUserItem4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserItem(this);
            }
        }
        /// <summary>
        /// alter_user_item : DEFAULT_LANGUAGE  EQUAL  (NONE | lcid = decimal | language)
        /// </summary>
        public partial class AstAlterUserItem5 : AstAlterUserItem
        {
            
            internal AstAlterUserItem5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterUserItem5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterUserItem5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterUserItem5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserItem(this);
            }
        }
        /// <summary>
        /// alter_user_item : ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
        /// </summary>
        public partial class AstAlterUserItem6 : AstAlterUserItem
        {
            
            internal AstAlterUserItem6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterUserItem6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterUserItem6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterUserItem6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserItem(this);
            }
        }
        

        
        internal AstAlterUserItem(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAlterUserItem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterUserItem(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterUserItem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterUserItem Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterUserItem.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        return 4;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstLanguage), false, false))
                    {
                        return 5;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstUserId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstSchemaId), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstLoginId), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 6;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_user_item : 
        ///    NAME EQUAL user_id 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(AstUserId userId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserItem.AstAlterUserItem1 result = new AstAlterUserItem.AstAlterUserItem1(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_user_item : 
        ///    DEFAULT_SCHEMA EQUAL schema_id 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(AstSchemaId schemaId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserItem.AstAlterUserItem2 result = new AstAlterUserItem.AstAlterUserItem2(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_user_item : 
        ///    LOGIN EQUAL login_id 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(AstLoginId loginId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserItem.AstAlterUserItem3 result = new AstAlterUserItem.AstAlterUserItem3(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_user_item : 
        ///    PASSWORD EQUAL newpwd=stringtext OLD_PASSWORD EQUAL oldpwd=stringtext 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(AstStringtext newpwd, AstStringtext oldpwd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserItem.AstAlterUserItem4 result = new AstAlterUserItem.AstAlterUserItem4(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_user_item : 
        ///    DEFAULT_LANGUAGE EQUAL lcid=decimal 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(AstDecimal lcid)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserItem.AstAlterUserItem5 result = new AstAlterUserItem.AstAlterUserItem5(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_user_item : 
        ///    DEFAULT_LANGUAGE EQUAL language 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(AstLanguage language)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserItem.AstAlterUserItem5 result = new AstAlterUserItem.AstAlterUserItem5(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_user_item : 
        ///    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserItem.AstAlterUserItem6 result = new AstAlterUserItem.AstAlterUserItem6(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_user
    /// 	 : CREATE  USER  user_id  create_user_with_login
    /// 	 | CREATE  USER  create_user_windows_principal_id
    /// 	 | CREATE  USER  user_id  create_user_without_login?
    /// </summary>
    public abstract partial class AstCreateUser : AstDdlClause
    {
        
        protected static string _rule = "create_user\r\n\t : CREATE  USER  user_id  create_user_with_login\r\n\t | CREATE  USER " +
            " create_user_windows_principal_id\r\n\t | CREATE  USER  user_id  create_user_withou" +
            "t_login?";
        
        /// <summary>
        /// create_user : CREATE  USER  user_id  create_user_with_login
        /// </summary>
        public partial class AstCreateUser1 : AstCreateUser
        {
            
            internal AstCreateUser1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateUser1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateUser1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateUser1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUser(this);
            }
        }
        /// <summary>
        /// create_user : CREATE  USER  create_user_windows_principal_id
        /// </summary>
        public partial class AstCreateUser2 : AstCreateUser
        {
            
            internal AstCreateUser2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateUser2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateUser2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateUser2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUser(this);
            }
        }
        /// <summary>
        /// create_user : CREATE  USER  user_id  create_user_without_login?
        /// </summary>
        public partial class AstCreateUser3 : AstCreateUser
        {
            
            internal AstCreateUser3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateUser3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateUser3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateUser3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUser(this);
            }
        }
        

        
        internal AstCreateUser(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCreateUser(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateUser(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateUser(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateUser Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateUser.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstUserId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstCreateUserWithLogin), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstUserId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstCreateUserWithoutLogin), true, false))
                    {
                        return 3;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstCreateUserWindowsPrincipalId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_user : 
        ///    CREATE USER user_id create_user_with_login 
        /// </summary>
        public static AstCreateUser CreateUser(AstUserId userId, AstCreateUserWithLogin createUserWithLogin)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUser.AstCreateUser1 result = new AstCreateUser.AstCreateUser1(arguments);
            return result;
        }
        
        /// <summary>
        /// create_user : 
        ///    CREATE USER create_user_windows_principal_id 
        /// </summary>
        public static AstCreateUser CreateUser(AstCreateUserWindowsPrincipalId createUserWindowsPrincipalId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUser.AstCreateUser2 result = new AstCreateUser.AstCreateUser2(arguments);
            return result;
        }
        
        /// <summary>
        /// create_user : 
        ///    CREATE USER user_id create_user_without_login? 
        /// </summary>
        public static AstCreateUser CreateUser(AstUserId userId, AstCreateUserWithoutLogin createUserWithoutLogin)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUser.AstCreateUser3 result = new AstCreateUser.AstCreateUser3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_user_with_login
    /// 	 : (for_from  LOGIN  login_id)?  (WITH  user_settings_short*)?
    /// </summary>
    public partial class AstCreateUserWithLogin : AstRule
    {
        
        protected static string _rule = "create_user_with_login\r\n\t : (for_from  LOGIN  login_id)?  (WITH  user_settings_sh" +
            "ort*)?";
        
        internal AstCreateUserWithLogin(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateUserWithLogin(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateUserWithLogin(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateUserWithLogin(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateUserWithLogin(this);
        }
        
        /// <summary>
        /// create_user_with_login : 
        ///    for_from LOGIN login_id WITH user_settings_short* 
        /// </summary>
        public static AstCreateUserWithLogin CreateUserWithLogin(AstForFrom forFrom, AstLoginId loginId, IEnumerable<AstUserSettingsShort> userSettingsShort)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUserWithLogin result = new AstCreateUserWithLogin(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_user_without_login
    /// 	 : WITHOUT  LOGIN  user_settings_short*
    /// 	 | for_from  CERTIFICATE  certificate_id
    /// 	 | for_from  ASYMMETRIC  KEY  asym_key_id
    /// </summary>
    public abstract partial class AstCreateUserWithoutLogin : AstRule
    {
        
        protected static string _rule = "create_user_without_login\r\n\t : WITHOUT  LOGIN  user_settings_short*\r\n\t | for_from" +
            "  CERTIFICATE  certificate_id\r\n\t | for_from  ASYMMETRIC  KEY  asym_key_id";
        
        /// <summary>
        /// create_user_without_login : WITHOUT  LOGIN  user_settings_short*
        /// </summary>
        public partial class AstCreateUserWithoutLogin1 : AstCreateUserWithoutLogin
        {
            
            internal AstCreateUserWithoutLogin1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateUserWithoutLogin1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateUserWithoutLogin1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateUserWithoutLogin1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserWithoutLogin(this);
            }
        }
        /// <summary>
        /// create_user_without_login : for_from  CERTIFICATE  certificate_id
        /// </summary>
        public partial class AstCreateUserWithoutLogin2 : AstCreateUserWithoutLogin
        {
            
            internal AstCreateUserWithoutLogin2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateUserWithoutLogin2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateUserWithoutLogin2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateUserWithoutLogin2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserWithoutLogin(this);
            }
        }
        /// <summary>
        /// create_user_without_login : for_from  ASYMMETRIC  KEY  asym_key_id
        /// </summary>
        public partial class AstCreateUserWithoutLogin3 : AstCreateUserWithoutLogin
        {
            
            internal AstCreateUserWithoutLogin3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateUserWithoutLogin3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateUserWithoutLogin3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateUserWithoutLogin3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserWithoutLogin(this);
            }
        }
        

        
        internal AstCreateUserWithoutLogin(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCreateUserWithoutLogin(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateUserWithoutLogin(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateUserWithoutLogin(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateUserWithoutLogin Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateUserWithoutLogin.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstForFrom), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstCertificateId), false, false))
                    {
                        return 2;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstForFrom), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAsymKeyId), false, false))
                    {
                        return 3;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstUserSettingsShort), true, true))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_user_without_login : 
        ///    WITHOUT LOGIN user_settings_short* 
        /// </summary>
        public static AstCreateUserWithoutLogin CreateUserWithoutLogin(IEnumerable<AstUserSettingsShort> userSettingsShort)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUserWithoutLogin.AstCreateUserWithoutLogin1 result = new AstCreateUserWithoutLogin.AstCreateUserWithoutLogin1(arguments);
            return result;
        }
        
        /// <summary>
        /// create_user_without_login : 
        ///    for_from CERTIFICATE certificate_id 
        /// </summary>
        public static AstCreateUserWithoutLogin CreateUserWithoutLogin(AstForFrom forFrom, AstCertificateId certificateId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUserWithoutLogin.AstCreateUserWithoutLogin2 result = new AstCreateUserWithoutLogin.AstCreateUserWithoutLogin2(arguments);
            return result;
        }
        
        /// <summary>
        /// create_user_without_login : 
        ///    for_from ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public static AstCreateUserWithoutLogin CreateUserWithoutLogin(AstForFrom forFrom, AstAsymKeyId asymKeyId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUserWithoutLogin.AstCreateUserWithoutLogin3 result = new AstCreateUserWithoutLogin.AstCreateUserWithoutLogin3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_user_windows_principal_id
    /// 	 : windows_principal_id  (WITH  user_settings*)?
    /// 	 | user_id  WITH  PASSWORD  EQUAL  password = stringtext  user_settings*
    /// 	 | user_id  FROM  EXTERNAL  PROVIDER
    /// </summary>
    public abstract partial class AstCreateUserWindowsPrincipalId : AstRule
    {
        
        protected static string _rule = "create_user_windows_principal_id\r\n\t : windows_principal_id  (WITH  user_settings*" +
            ")?\r\n\t | user_id  WITH  PASSWORD  EQUAL  password = stringtext  user_settings*\r\n\t" +
            " | user_id  FROM  EXTERNAL  PROVIDER";
        
        /// <summary>
        /// create_user_windows_principal_id : windows_principal_id  (WITH  user_settings*)?
        /// </summary>
        public partial class AstCreateUserWindowsPrincipalId1 : AstCreateUserWindowsPrincipalId
        {
            
            internal AstCreateUserWindowsPrincipalId1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateUserWindowsPrincipalId1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateUserWindowsPrincipalId1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateUserWindowsPrincipalId1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserWindowsPrincipalId(this);
            }
        }
        /// <summary>
        /// create_user_windows_principal_id : user_id  WITH  PASSWORD  EQUAL  password = stringtext  user_settings*
        /// </summary>
        public partial class AstCreateUserWindowsPrincipalId2 : AstCreateUserWindowsPrincipalId
        {
            
            internal AstCreateUserWindowsPrincipalId2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateUserWindowsPrincipalId2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateUserWindowsPrincipalId2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateUserWindowsPrincipalId2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserWindowsPrincipalId(this);
            }
        }
        /// <summary>
        /// create_user_windows_principal_id : user_id  FROM  EXTERNAL  PROVIDER
        /// </summary>
        public partial class AstCreateUserWindowsPrincipalId3 : AstCreateUserWindowsPrincipalId
        {
            
            internal AstCreateUserWindowsPrincipalId3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateUserWindowsPrincipalId3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateUserWindowsPrincipalId3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateUserWindowsPrincipalId3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserWindowsPrincipalId(this);
            }
        }
        

        
        internal AstCreateUserWindowsPrincipalId(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCreateUserWindowsPrincipalId(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateUserWindowsPrincipalId(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateUserWindowsPrincipalId(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateUserWindowsPrincipalId Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateUserWindowsPrincipalId.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstUserId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstUserSettings), true, true))
                        {
                            return 2;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstWindowsPrincipalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstUserSettings), true, true))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstUserId), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_user_windows_principal_id : 
        ///    windows_principal_id WITH user_settings* 
        /// </summary>
        public static AstCreateUserWindowsPrincipalId CreateUserWindowsPrincipalId(AstWindowsPrincipalId windowsPrincipalId, IEnumerable<AstUserSettings> userSettings)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId1 result = new AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId1(arguments);
            return result;
        }
        
        /// <summary>
        /// create_user_windows_principal_id : 
        ///    user_id WITH PASSWORD EQUAL password=stringtext user_settings* 
        /// </summary>
        public static AstCreateUserWindowsPrincipalId CreateUserWindowsPrincipalId(AstUserId userId, AstStringtext password, IEnumerable<AstUserSettings> userSettings)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId2 result = new AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId2(arguments);
            return result;
        }
        
        /// <summary>
        /// create_user_windows_principal_id : 
        ///    user_id FROM EXTERNAL PROVIDER 
        /// </summary>
        public static AstCreateUserWindowsPrincipalId CreateUserWindowsPrincipalId(AstUserId userId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId3 result = new AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// user_settings_short
    /// 	 : COMMA?  DEFAULT_SCHEMA  EQUAL  schema_id
    /// 	 | COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
    /// </summary>
    public abstract partial class AstUserSettingsShort : AstRule
    {
        
        protected static string _rule = "user_settings_short\r\n\t : COMMA?  DEFAULT_SCHEMA  EQUAL  schema_id\r\n\t | COMMA?  AL" +
            "LOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off";
        
        /// <summary>
        /// user_settings_short : COMMA?  DEFAULT_SCHEMA  EQUAL  schema_id
        /// </summary>
        public partial class AstUserSettingsShort1 : AstUserSettingsShort
        {
            
            internal AstUserSettingsShort1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUserSettingsShort1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUserSettingsShort1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUserSettingsShort1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserSettingsShort(this);
            }
        }
        /// <summary>
        /// user_settings_short : COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
        /// </summary>
        public partial class AstUserSettingsShort2 : AstUserSettingsShort
        {
            
            internal AstUserSettingsShort2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUserSettingsShort2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUserSettingsShort2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUserSettingsShort2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserSettingsShort(this);
            }
        }
        

        
        internal AstUserSettingsShort(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstUserSettingsShort(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUserSettingsShort(Position p) : 
                base(p)
        {
        }
        
        internal AstUserSettingsShort(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstUserSettingsShort Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstUserSettingsShort.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSchemaId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// user_settings_short : 
        ///    COMMA? DEFAULT_SCHEMA EQUAL schema_id 
        /// </summary>
        public static AstUserSettingsShort UserSettingsShort(AstSchemaId schemaId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUserSettingsShort.AstUserSettingsShort1 result = new AstUserSettingsShort.AstUserSettingsShort1(arguments);
            return result;
        }
        
        /// <summary>
        /// user_settings_short : 
        ///    COMMA? ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public static AstUserSettingsShort UserSettingsShort(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUserSettingsShort.AstUserSettingsShort2 result = new AstUserSettingsShort.AstUserSettingsShort2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// user_settings
    /// 	 : COMMA?  DEFAULT_SCHEMA  EQUAL  schema_id
    /// 	 | COMMA?  DEFAULT_LANGUAGE  EQUAL  (NONE | decimal | language)
    /// 	 | COMMA?  SID  EQUAL  binary_
    /// 	 | COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
    /// </summary>
    public abstract partial class AstUserSettings : AstRule
    {
        
        protected static string _rule = "user_settings\r\n\t : COMMA?  DEFAULT_SCHEMA  EQUAL  schema_id\r\n\t | COMMA?  DEFAULT_" +
            "LANGUAGE  EQUAL  (NONE | decimal | language)\r\n\t | COMMA?  SID  EQUAL  binary_\r\n\t" +
            " | COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off";
        
        /// <summary>
        /// user_settings : COMMA?  DEFAULT_SCHEMA  EQUAL  schema_id
        /// </summary>
        public partial class AstUserSettings1 : AstUserSettings
        {
            
            internal AstUserSettings1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUserSettings1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUserSettings1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUserSettings1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserSettings(this);
            }
        }
        /// <summary>
        /// user_settings : COMMA?  DEFAULT_LANGUAGE  EQUAL  (NONE | decimal | language)
        /// </summary>
        public partial class AstUserSettings2 : AstUserSettings
        {
            
            internal AstUserSettings2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUserSettings2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUserSettings2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUserSettings2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserSettings(this);
            }
        }
        /// <summary>
        /// user_settings : COMMA?  SID  EQUAL  binary_
        /// </summary>
        public partial class AstUserSettings3 : AstUserSettings
        {
            
            internal AstUserSettings3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUserSettings3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUserSettings3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUserSettings3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserSettings(this);
            }
        }
        /// <summary>
        /// user_settings : COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
        /// </summary>
        public partial class AstUserSettings4 : AstUserSettings
        {
            
            internal AstUserSettings4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUserSettings4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUserSettings4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUserSettings4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserSettings(this);
            }
        }
        

        
        internal AstUserSettings(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstUserSettings(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUserSettings(Position p) : 
                base(p)
        {
        }
        
        internal AstUserSettings(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstUserSettings Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstUserSettings.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstLanguage), false, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSchemaId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstBinary), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// user_settings : 
        ///    COMMA? DEFAULT_SCHEMA EQUAL schema_id 
        /// </summary>
        public static AstUserSettings UserSettings(AstSchemaId schemaId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUserSettings.AstUserSettings1 result = new AstUserSettings.AstUserSettings1(arguments);
            return result;
        }
        
        /// <summary>
        /// user_settings : 
        ///    COMMA? DEFAULT_LANGUAGE EQUAL decimal 
        /// </summary>
        public static AstUserSettings UserSettings(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUserSettings.AstUserSettings2 result = new AstUserSettings.AstUserSettings2(arguments);
            return result;
        }
        
        /// <summary>
        /// user_settings : 
        ///    COMMA? DEFAULT_LANGUAGE EQUAL language 
        /// </summary>
        public static AstUserSettings UserSettings(AstLanguage language)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUserSettings.AstUserSettings2 result = new AstUserSettings.AstUserSettings2(arguments);
            return result;
        }
        
        /// <summary>
        /// user_settings : 
        ///    COMMA? SID EQUAL binary_ 
        /// </summary>
        public static AstUserSettings UserSettings(AstBinary binary)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUserSettings.AstUserSettings3 result = new AstUserSettings.AstUserSettings3(arguments);
            return result;
        }
        
        /// <summary>
        /// user_settings : 
        ///    COMMA? ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public static AstUserSettings UserSettings(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUserSettings.AstUserSettings4 result = new AstUserSettings.AstUserSettings4(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_user_azure_sql_dw
    /// 	 : CREATE  USER  user_id  (for_from  LOGIN  login_id | WITHOUT  LOGIN)?  (WITH  DEFAULT_SCHEMA  EQUAL  schema_id)?
    /// 	 | CREATE  USER  user_id  FROM  EXTERNAL  PROVIDER  (WITH  DEFAULT_SCHEMA  EQUAL  schema_id)?
    /// </summary>
    public abstract partial class AstCreateUserAzureSqlDw : AstDdlClause
    {
        
        protected static string _rule = "create_user_azure_sql_dw\r\n\t : CREATE  USER  user_id  (for_from  LOGIN  login_id |" +
            " WITHOUT  LOGIN)?  (WITH  DEFAULT_SCHEMA  EQUAL  schema_id)?\r\n\t | CREATE  USER  " +
            "user_id  FROM  EXTERNAL  PROVIDER  (WITH  DEFAULT_SCHEMA  EQUAL  schema_id)?";
        
        /// <summary>
        /// create_user_azure_sql_dw : CREATE  USER  user_id  (for_from  LOGIN  login_id | WITHOUT  LOGIN)?  (WITH  DEFAULT_SCHEMA  EQUAL  schema_id)?
        /// </summary>
        public partial class AstCreateUserAzureSqlDw1 : AstCreateUserAzureSqlDw
        {
            
            internal AstCreateUserAzureSqlDw1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateUserAzureSqlDw1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateUserAzureSqlDw1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateUserAzureSqlDw1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserAzureSqlDw(this);
            }
        }
        /// <summary>
        /// create_user_azure_sql_dw : CREATE  USER  user_id  FROM  EXTERNAL  PROVIDER  (WITH  DEFAULT_SCHEMA  EQUAL  schema_id)?
        /// </summary>
        public partial class AstCreateUserAzureSqlDw2 : AstCreateUserAzureSqlDw
        {
            
            internal AstCreateUserAzureSqlDw2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateUserAzureSqlDw2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateUserAzureSqlDw2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateUserAzureSqlDw2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserAzureSqlDw(this);
            }
        }
        

        
        internal AstCreateUserAzureSqlDw(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCreateUserAzureSqlDw(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateUserAzureSqlDw(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateUserAzureSqlDw(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateUserAzureSqlDw Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateUserAzureSqlDw.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstUserId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstForFrom), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstLoginId), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstSchemaId), false, false))
                            {
                                return 1;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstUserId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstSchemaId), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_user_azure_sql_dw : 
        ///    CREATE USER user_id for_from LOGIN login_id WITH DEFAULT_SCHEMA EQUAL schema_id 
        /// </summary>
        public static AstCreateUserAzureSqlDw CreateUserAzureSqlDw(AstUserId userId, AstForFrom forFrom, AstLoginId loginId, AstSchemaId schemaId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUserAzureSqlDw.AstCreateUserAzureSqlDw1 result = new AstCreateUserAzureSqlDw.AstCreateUserAzureSqlDw1(arguments);
            return result;
        }
        
        /// <summary>
        /// create_user_azure_sql_dw : 
        ///    CREATE USER user_id WITHOUT LOGIN WITH DEFAULT_SCHEMA EQUAL schema_id 
        /// </summary>
        public static AstCreateUserAzureSqlDw CreateUserAzureSqlDw(AstUserId userId, AstSchemaId schemaId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateUserAzureSqlDw.AstCreateUserAzureSqlDw1 result = new AstCreateUserAzureSqlDw.AstCreateUserAzureSqlDw1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_user_azure_sql_info
    /// 	 : (NAME  EQUAL  user_id | DEFAULT_SCHEMA  EQUAL  schema_id | LOGIN  EQUAL  login_id | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off)+
    /// </summary>
    public partial class AstAlterUserAzureSqlInfo : AstRule
    {
        
        protected static string _rule = "alter_user_azure_sql_info\r\n\t : (NAME  EQUAL  user_id | DEFAULT_SCHEMA  EQUAL  sch" +
            "ema_id | LOGIN  EQUAL  login_id | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on" +
            "_off)+";
        
        internal AstAlterUserAzureSqlInfo(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterUserAzureSqlInfo(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterUserAzureSqlInfo(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterUserAzureSqlInfo(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterUserAzureSqlInfo(this);
        }
        
        /// <summary>
        /// alter_user_azure_sql_info : 
        ///    NAME EQUAL user_id 
        /// </summary>
        public static AstAlterUserAzureSqlInfo AlterUserAzureSqlInfo(AstUserId userId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserAzureSqlInfo result = new AstAlterUserAzureSqlInfo(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_user_azure_sql_info : 
        ///    DEFAULT_SCHEMA EQUAL schema_id 
        /// </summary>
        public static AstAlterUserAzureSqlInfo AlterUserAzureSqlInfo(AstSchemaId schemaId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserAzureSqlInfo result = new AstAlterUserAzureSqlInfo(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_user_azure_sql_info : 
        ///    LOGIN EQUAL login_id 
        /// </summary>
        public static AstAlterUserAzureSqlInfo AlterUserAzureSqlInfo(AstLoginId loginId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserAzureSqlInfo result = new AstAlterUserAzureSqlInfo(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_user_azure_sql_info : 
        ///    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public static AstAlterUserAzureSqlInfo AlterUserAzureSqlInfo(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterUserAzureSqlInfo result = new AstAlterUserAzureSqlInfo(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_workload_group_using
    /// 	 : USING  (workload_group_pool_id | DEFAULT_DOUBLE_QUOTE)
    /// </summary>
    public partial class AstAlterWorkloadGroupUsing : AstRule
    {
        
        protected static string _rule = "alter_workload_group_using\r\n\t : USING  (workload_group_pool_id | DEFAULT_DOUBLE_Q" +
            "UOTE)";
        
        internal AstAlterWorkloadGroupUsing(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterWorkloadGroupUsing(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterWorkloadGroupUsing(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterWorkloadGroupUsing(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterWorkloadGroupUsing(this);
        }
        
        /// <summary>
        /// alter_workload_group_using : 
        ///    USING workload_group_pool_id 
        /// </summary>
        public static AstAlterWorkloadGroupUsing AlterWorkloadGroupUsing(AstWorkloadGroupPoolId workloadGroupPoolId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterWorkloadGroupUsing result = new AstAlterWorkloadGroupUsing(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// queue_settings
    /// 	 : WITH  (STATUS  EQUAL  status = on_off  COMMA?)?  (RETENTION  EQUAL  retention = on_off  COMMA?)?  (ACTIVATION  LR_BRACKET  (((STATUS  EQUAL  activation_status = on_off  COMMA?)?  (PROCEDURE_NAME  EQUAL  func_proc_name_database_schema_ref  COMMA?)?  (MAX_QUEUE_READERS  EQUAL  max_readers = decimal  COMMA?)?  (EXECUTE  AS  (SELF | username = stringtext | OWNER)  COMMA?)?) | DROP)  RR_BRACKET  COMMA?)?  (POISON_MESSAGE_HANDLING  LR_BRACKET  (STATUS  EQUAL  on_off)  RR_BRACKET)?
    /// </summary>
    public partial class AstQueueSettings : AstRule
    {
        
        protected static string _rule = @"queue_settings
	 : WITH  (STATUS  EQUAL  status = on_off  COMMA?)?  (RETENTION  EQUAL  retention = on_off  COMMA?)?  (ACTIVATION  LR_BRACKET  (((STATUS  EQUAL  activation_status = on_off  COMMA?)?  (PROCEDURE_NAME  EQUAL  func_proc_name_database_schema_ref  COMMA?)?  (MAX_QUEUE_READERS  EQUAL  max_readers = decimal  COMMA?)?  (EXECUTE  AS  (SELF | username = stringtext | OWNER)  COMMA?)?) | DROP)  RR_BRACKET  COMMA?)?  (POISON_MESSAGE_HANDLING  LR_BRACKET  (STATUS  EQUAL  on_off)  RR_BRACKET)?";
        
        internal AstQueueSettings(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstQueueSettings(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstQueueSettings(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstQueueSettings(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueSettings(this);
        }
        
        /// <summary>
        /// queue_settings : 
        ///    WITH STATUS EQUAL status=on_off COMMA? RETENTION EQUAL retention=on_off COMMA? ACTIVATION ( STATUS EQUAL activation_status=on_off COMMA? PROCEDURE_NAME EQUAL func_proc_name_database_schema_ref COMMA? MAX_QUEUE_READERS EQUAL max_readers=decimal COMMA? EXECUTE AS SELF COMMA? ) COMMA? POISON_MESSAGE_HANDLING ( STATUS EQUAL on_off ) 
        /// </summary>
        public static AstQueueSettings QueueSettings(AstOnOff status, AstOnOff retention, AstOnOff activationStatus, AstFuncProcNameDatabaseSchemaRef funcProcNameDatabaseSchemaRef, AstDecimal maxReaders, AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueueSettings result = new AstQueueSettings(arguments);
            return result;
        }
        
        /// <summary>
        /// queue_settings : 
        ///    WITH STATUS EQUAL status=on_off COMMA? RETENTION EQUAL retention=on_off COMMA? ACTIVATION ( STATUS EQUAL activation_status=on_off COMMA? PROCEDURE_NAME EQUAL func_proc_name_database_schema_ref COMMA? MAX_QUEUE_READERS EQUAL max_readers=decimal COMMA? EXECUTE AS username=stringtext COMMA? ) COMMA? POISON_MESSAGE_HANDLING ( STATUS EQUAL on_off ) 
        /// </summary>
        public static AstQueueSettings QueueSettings(AstOnOff status, AstOnOff retention, AstOnOff activationStatus, AstFuncProcNameDatabaseSchemaRef funcProcNameDatabaseSchemaRef, AstDecimal maxReaders, AstStringtext username, AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueueSettings result = new AstQueueSettings(arguments);
            return result;
        }
        
        /// <summary>
        /// queue_settings : 
        ///    WITH STATUS EQUAL status=on_off COMMA? RETENTION EQUAL retention=on_off COMMA? ACTIVATION ( DROP ) COMMA? POISON_MESSAGE_HANDLING ( STATUS EQUAL on_off ) 
        /// </summary>
        public static AstQueueSettings QueueSettings(AstOnOff status, AstOnOff retention, AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueueSettings result = new AstQueueSettings(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_queue
    /// 	 : ALTER  QUEUE  (complete_table_ref | queue_id)  (queue_settings | queue_action)
    /// </summary>
    public partial class AstAlterQueue : AstAnotherStatement
    {
        
        protected static string _rule = "alter_queue\r\n\t : ALTER  QUEUE  (complete_table_ref | queue_id)  (queue_settings |" +
            " queue_action)";
        
        internal AstAlterQueue(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAlterQueue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterQueue(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterQueue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterQueue(this);
        }
        
        /// <summary>
        /// alter_queue : 
        ///    ALTER QUEUE complete_table_ref queue_settings 
        /// </summary>
        public static AstAlterQueue AlterQueue(AstCompleteTableRef completeTableRef, AstQueueSettings queueSettings)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterQueue result = new AstAlterQueue(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_queue : 
        ///    ALTER QUEUE queue_id queue_settings 
        /// </summary>
        public static AstAlterQueue AlterQueue(AstQueueId queueId, AstQueueSettings queueSettings)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterQueue result = new AstAlterQueue(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_queue : 
        ///    ALTER QUEUE complete_table_ref queue_action 
        /// </summary>
        public static AstAlterQueue AlterQueue(AstCompleteTableRef completeTableRef, AstQueueAction queueAction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterQueue result = new AstAlterQueue(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_queue : 
        ///    ALTER QUEUE queue_id queue_action 
        /// </summary>
        public static AstAlterQueue AlterQueue(AstQueueId queueId, AstQueueAction queueAction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterQueue result = new AstAlterQueue(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// queue_action
    /// 	 : REBUILD  (WITH  LR_BRACKET  queue_rebuild_options  RR_BRACKET)?
    /// 	 | REORGANIZE  (WITH  LOB_COMPACTION  EQUAL  on_off)?
    /// 	 | MOVE  TO  (id_ | DEFAULT)
    /// </summary>
    public abstract partial class AstQueueAction : AstRule
    {
        
        protected static string _rule = "queue_action\r\n\t : REBUILD  (WITH  LR_BRACKET  queue_rebuild_options  RR_BRACKET)?" +
            "\r\n\t | REORGANIZE  (WITH  LOB_COMPACTION  EQUAL  on_off)?\r\n\t | MOVE  TO  (id_ | D" +
            "EFAULT)";
        
        /// <summary>
        /// queue_action : REBUILD  (WITH  LR_BRACKET  queue_rebuild_options  RR_BRACKET)?
        /// </summary>
        public partial class AstQueueAction1 : AstQueueAction
        {
            
            internal AstQueueAction1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstQueueAction1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstQueueAction1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstQueueAction1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueueAction(this);
            }
        }
        /// <summary>
        /// queue_action : REORGANIZE  (WITH  LOB_COMPACTION  EQUAL  on_off)?
        /// </summary>
        public partial class AstQueueAction2 : AstQueueAction
        {
            
            internal AstQueueAction2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstQueueAction2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstQueueAction2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstQueueAction2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueueAction(this);
            }
        }
        /// <summary>
        /// queue_action : MOVE  TO  (id_ | DEFAULT)
        /// </summary>
        public partial class AstQueueAction3 : AstQueueAction
        {
            
            internal AstQueueAction3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstQueueAction3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstQueueAction3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstQueueAction3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueueAction(this);
            }
        }
        

        
        internal AstQueueAction(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstQueueAction(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstQueueAction(Position p) : 
                base(p)
        {
        }
        
        internal AstQueueAction(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstQueueAction Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstQueueAction.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstQueueRebuildOptions), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// queue_action : 
        ///    REBUILD WITH ( queue_rebuild_options ) 
        /// </summary>
        public static AstQueueAction QueueAction(AstQueueRebuildOptions queueRebuildOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueueAction.AstQueueAction1 result = new AstQueueAction.AstQueueAction1(arguments);
            return result;
        }
        
        /// <summary>
        /// queue_action : 
        ///    REORGANIZE WITH LOB_COMPACTION EQUAL on_off 
        /// </summary>
        public static AstQueueAction QueueAction(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueueAction.AstQueueAction2 result = new AstQueueAction.AstQueueAction2(arguments);
            return result;
        }
        
        /// <summary>
        /// queue_action : 
        ///    MOVE TO id_ 
        /// </summary>
        public static AstQueueAction QueueAction(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueueAction.AstQueueAction3 result = new AstQueueAction.AstQueueAction3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// conversation_statement
    /// 	 : begin_conversation_timer
    /// 	 | begin_conversation_dialog
    /// 	 | end_conversation
    /// 	 | get_conversation
    /// 	 | send_conversation
    /// 	 | waitfor_conversation
    /// </summary>
    public abstract partial class AstConversationStatement : AstRule
    {
        
        protected static string _rule = "conversation_statement\r\n\t : begin_conversation_timer\r\n\t | begin_conversation_dial" +
            "og\r\n\t | end_conversation\r\n\t | get_conversation\r\n\t | send_conversation\r\n\t | waitf" +
            "or_conversation";
        
        /// <summary>
        /// conversation_statement : begin_conversation_timer
        /// </summary>
        public partial class AstConversationStatement1 : AstConversationStatement
        {
            
            internal AstConversationStatement1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConversationStatement1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConversationStatement1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConversationStatement1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConversationStatement(this);
            }
        }
        /// <summary>
        /// conversation_statement : begin_conversation_dialog
        /// </summary>
        public partial class AstConversationStatement2 : AstConversationStatement
        {
            
            internal AstConversationStatement2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConversationStatement2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConversationStatement2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConversationStatement2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConversationStatement(this);
            }
        }
        /// <summary>
        /// conversation_statement : end_conversation
        /// </summary>
        public partial class AstConversationStatement3 : AstConversationStatement
        {
            
            internal AstConversationStatement3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConversationStatement3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConversationStatement3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConversationStatement3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConversationStatement(this);
            }
        }
        /// <summary>
        /// conversation_statement : get_conversation
        /// </summary>
        public partial class AstConversationStatement4 : AstConversationStatement
        {
            
            internal AstConversationStatement4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConversationStatement4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConversationStatement4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConversationStatement4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConversationStatement(this);
            }
        }
        /// <summary>
        /// conversation_statement : send_conversation
        /// </summary>
        public partial class AstConversationStatement5 : AstConversationStatement
        {
            
            internal AstConversationStatement5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConversationStatement5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConversationStatement5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConversationStatement5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConversationStatement(this);
            }
        }
        /// <summary>
        /// conversation_statement : waitfor_conversation
        /// </summary>
        public partial class AstConversationStatement6 : AstConversationStatement
        {
            
            internal AstConversationStatement6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConversationStatement6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConversationStatement6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConversationStatement6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConversationStatement(this);
            }
        }
        

        
        internal AstConversationStatement(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstConversationStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstConversationStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstConversationStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstConversationStatement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstConversationStatement.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstBeginConversationTimer), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstBeginConversationDialog), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstEndConversation), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstGetConversation), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstSendConversation), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstWaitforConversation), false, false))
                {
                    return 6;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// conversation_statement : 
        ///    begin_conversation_timer 
        /// </summary>
        public static AstConversationStatement ConversationStatement(AstBeginConversationTimer beginConversationTimer)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConversationStatement.AstConversationStatement1 result = new AstConversationStatement.AstConversationStatement1(arguments);
            return result;
        }
        
        /// <summary>
        /// conversation_statement : 
        ///    begin_conversation_dialog 
        /// </summary>
        public static AstConversationStatement ConversationStatement(AstBeginConversationDialog beginConversationDialog)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConversationStatement.AstConversationStatement2 result = new AstConversationStatement.AstConversationStatement2(arguments);
            return result;
        }
        
        /// <summary>
        /// conversation_statement : 
        ///    end_conversation 
        /// </summary>
        public static AstConversationStatement ConversationStatement(AstEndConversation endConversation)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConversationStatement.AstConversationStatement3 result = new AstConversationStatement.AstConversationStatement3(arguments);
            return result;
        }
        
        /// <summary>
        /// conversation_statement : 
        ///    get_conversation 
        /// </summary>
        public static AstConversationStatement ConversationStatement(AstGetConversation getConversation)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConversationStatement.AstConversationStatement4 result = new AstConversationStatement.AstConversationStatement4(arguments);
            return result;
        }
        
        /// <summary>
        /// conversation_statement : 
        ///    send_conversation 
        /// </summary>
        public static AstConversationStatement ConversationStatement(AstSendConversation sendConversation)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConversationStatement.AstConversationStatement5 result = new AstConversationStatement.AstConversationStatement5(arguments);
            return result;
        }
        
        /// <summary>
        /// conversation_statement : 
        ///    waitfor_conversation 
        /// </summary>
        public static AstConversationStatement ConversationStatement(AstWaitforConversation waitforConversation)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConversationStatement.AstConversationStatement6 result = new AstConversationStatement.AstConversationStatement6(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// when_matche
    /// 	 : (WHEN  MATCHED  (AND  search_condition)?  THEN  merge_matched)+
    /// 	 | (WHEN  NOT  MATCHED  (BY  TARGET)?  (AND  search_condition)?  THEN  merge_not_matched)
    /// 	 | (WHEN  NOT  MATCHED  BY  SOURCE  (AND  search_condition)?  THEN  merge_matched)+
    /// </summary>
    public abstract partial class AstWhenMatche : AstRule
    {
        
        protected static string _rule = @"when_matche
	 : (WHEN  MATCHED  (AND  search_condition)?  THEN  merge_matched)+
	 | (WHEN  NOT  MATCHED  (BY  TARGET)?  (AND  search_condition)?  THEN  merge_not_matched)
	 | (WHEN  NOT  MATCHED  BY  SOURCE  (AND  search_condition)?  THEN  merge_matched)+";
        
        /// <summary>
        /// when_matche : (WHEN  MATCHED  (AND  search_condition)?  THEN  merge_matched)+
        /// </summary>
        public partial class AstWhenMatche1 : AstWhenMatche
        {
            
            internal AstWhenMatche1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstWhenMatche1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstWhenMatche1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstWhenMatche1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWhenMatche(this);
            }
        }
        /// <summary>
        /// when_matche : (WHEN  NOT  MATCHED  (BY  TARGET)?  (AND  search_condition)?  THEN  merge_not_matched)
        /// </summary>
        public partial class AstWhenMatche2 : AstWhenMatche
        {
            
            internal AstWhenMatche2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstWhenMatche2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstWhenMatche2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstWhenMatche2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWhenMatche(this);
            }
        }
        /// <summary>
        /// when_matche : (WHEN  NOT  MATCHED  BY  SOURCE  (AND  search_condition)?  THEN  merge_matched)+
        /// </summary>
        public partial class AstWhenMatche3 : AstWhenMatche
        {
            
            internal AstWhenMatche3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstWhenMatche3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstWhenMatche3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstWhenMatche3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWhenMatche(this);
            }
        }
        

        
        internal AstWhenMatche(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstWhenMatche(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWhenMatche(Position p) : 
                base(p)
        {
        }
        
        internal AstWhenMatche(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstWhenMatche Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstWhenMatche.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstSearchCondition), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstMergeMatched), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstSearchCondition), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstMergeNotMatched), false, false))
                    {
                        return 2;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstSearchCondition), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstMergeMatched), false, false))
                    {
                        return 3;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// when_matche : 
        ///    WHEN MATCHED AND search_condition THEN merge_matched+ 
        /// </summary>
        public static AstWhenMatche WhenMatche(AstSearchCondition searchCondition, AstMergeMatched mergeMatched)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstWhenMatche.AstWhenMatche1 result = new AstWhenMatche.AstWhenMatche1(arguments);
            return result;
        }
        
        /// <summary>
        /// when_matche : 
        ///    WHEN NOT MATCHED BY TARGET AND search_condition THEN merge_not_matched 
        /// </summary>
        public static AstWhenMatche WhenMatche(AstSearchCondition searchCondition, AstMergeNotMatched mergeNotMatched)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstWhenMatche.AstWhenMatche2 result = new AstWhenMatche.AstWhenMatche2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// merge_matched
    /// 	 : UPDATE  SET  update_elem_merges
    /// 	 | DELETE
    /// </summary>
    public abstract partial class AstMergeMatched : AstRule
    {
        
        protected static string _rule = "merge_matched\r\n\t : UPDATE  SET  update_elem_merges\r\n\t | DELETE";
        
        /// <summary>
        /// merge_matched : UPDATE  SET  update_elem_merges
        /// </summary>
        public partial class AstMergeMatched1 : AstMergeMatched
        {
            
            internal AstMergeMatched1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstMergeMatched1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstMergeMatched1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstMergeMatched1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMergeMatched(this);
            }
        }
        /// <summary>
        /// merge_matched : DELETE
        /// </summary>
        public partial class AstMergeMatched2 : AstMergeMatched
        {
            
            internal AstMergeMatched2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstMergeMatched2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstMergeMatched2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstMergeMatched2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMergeMatched(this);
            }
        }
        

        
        internal AstMergeMatched(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstMergeMatched(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstMergeMatched(Position p) : 
                base(p)
        {
        }
        
        internal AstMergeMatched(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstMergeMatched Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstMergeMatched.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstUpdateElemMerges), false, false))
                {
                    return 1;
                }
            }
            if ((list.Count == 0))
            {
                return 2;
            }
            return 0;
        }
        
        /// <summary>
        /// merge_matched : 
        ///    UPDATE SET update_elem_merges 
        /// </summary>
        public static AstMergeMatched MergeMatched(AstUpdateElemMerges updateElemMerges)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstMergeMatched.AstMergeMatched1 result = new AstMergeMatched.AstMergeMatched1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// merge_not_matched
    /// 	 : INSERT  (LR_BRACKET  column_name_list  RR_BRACKET)?  (table_value_constructor | DEFAULT  VALUES)
    /// </summary>
    public partial class AstMergeNotMatched : AstRule
    {
        
        protected static string _rule = "merge_not_matched\r\n\t : INSERT  (LR_BRACKET  column_name_list  RR_BRACKET)?  (tabl" +
            "e_value_constructor | DEFAULT  VALUES)";
        
        internal AstMergeNotMatched(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstMergeNotMatched(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstMergeNotMatched(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstMergeNotMatched(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMergeNotMatched(this);
        }
        
        /// <summary>
        /// merge_not_matched : 
        ///    INSERT ( column_name_list ) table_value_constructor 
        /// </summary>
        public static AstMergeNotMatched MergeNotMatched(AstColumnNameList columnNameList, AstTableValueConstructor tableValueConstructor)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstMergeNotMatched result = new AstMergeNotMatched(arguments);
            return result;
        }
        
        /// <summary>
        /// merge_not_matched : 
        ///    INSERT ( column_name_list ) DEFAULT VALUES 
        /// </summary>
        public static AstMergeNotMatched MergeNotMatched(AstColumnNameList columnNameList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstMergeNotMatched result = new AstMergeNotMatched(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// delete_statement_from
    /// 	 : ddl_object
    /// 	 | rowset_function_limited
    /// 	 | table_var = local_id
    /// </summary>
    public abstract partial class AstDeleteStatementFrom : AstRule
    {
        
        protected static string _rule = "delete_statement_from\r\n\t : ddl_object\r\n\t | rowset_function_limited\r\n\t | table_var" +
            " = local_id";
        
        /// <summary>
        /// delete_statement_from : ddl_object
        /// </summary>
        public partial class AstDeleteStatementFrom1 : AstDeleteStatementFrom
        {
            
            internal AstDeleteStatementFrom1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDeleteStatementFrom1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDeleteStatementFrom1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDeleteStatementFrom1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeleteStatementFrom(this);
            }
        }
        /// <summary>
        /// delete_statement_from : rowset_function_limited
        /// </summary>
        public partial class AstDeleteStatementFrom2 : AstDeleteStatementFrom
        {
            
            internal AstDeleteStatementFrom2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDeleteStatementFrom2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDeleteStatementFrom2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDeleteStatementFrom2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeleteStatementFrom(this);
            }
        }
        /// <summary>
        /// delete_statement_from : table_var = local_id
        /// </summary>
        public partial class AstDeleteStatementFrom3 : AstDeleteStatementFrom
        {
            
            internal AstDeleteStatementFrom3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDeleteStatementFrom3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDeleteStatementFrom3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDeleteStatementFrom3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeleteStatementFrom(this);
            }
        }
        

        
        internal AstDeleteStatementFrom(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstDeleteStatementFrom(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDeleteStatementFrom(Position p) : 
                base(p)
        {
        }
        
        internal AstDeleteStatementFrom(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDeleteStatementFrom Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDeleteStatementFrom.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDdlObject), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstRowsetFunctionLimited), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// delete_statement_from : 
        ///    ddl_object 
        /// </summary>
        public static AstDeleteStatementFrom DeleteStatementFrom(AstDdlObject ddlObject)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDeleteStatementFrom.AstDeleteStatementFrom1 result = new AstDeleteStatementFrom.AstDeleteStatementFrom1(arguments);
            return result;
        }
        
        /// <summary>
        /// delete_statement_from : 
        ///    rowset_function_limited 
        /// </summary>
        public static AstDeleteStatementFrom DeleteStatementFrom(AstRowsetFunctionLimited rowsetFunctionLimited)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDeleteStatementFrom.AstDeleteStatementFrom2 result = new AstDeleteStatementFrom.AstDeleteStatementFrom2(arguments);
            return result;
        }
        
        /// <summary>
        /// delete_statement_from : 
        ///    table_var=local_id 
        /// </summary>
        public static AstDeleteStatementFrom DeleteStatementFrom(AstLocalId tableVar)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDeleteStatementFrom.AstDeleteStatementFrom3 result = new AstDeleteStatementFrom.AstDeleteStatementFrom3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// insert_statement_value
    /// 	 : table_value_constructor
    /// 	 | derived_table
    /// 	 | execute_statement
    /// 	 | DEFAULT  VALUES
    /// </summary>
    public abstract partial class AstInsertStatementValue : AstRule
    {
        
        protected static string _rule = "insert_statement_value\r\n\t : table_value_constructor\r\n\t | derived_table\r\n\t | execu" +
            "te_statement\r\n\t | DEFAULT  VALUES";
        
        /// <summary>
        /// insert_statement_value : table_value_constructor
        /// </summary>
        public partial class AstInsertStatementValue1 : AstInsertStatementValue
        {
            
            internal AstInsertStatementValue1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstInsertStatementValue1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstInsertStatementValue1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstInsertStatementValue1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitInsertStatementValue(this);
            }
        }
        /// <summary>
        /// insert_statement_value : derived_table
        /// </summary>
        public partial class AstInsertStatementValue2 : AstInsertStatementValue
        {
            
            internal AstInsertStatementValue2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstInsertStatementValue2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstInsertStatementValue2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstInsertStatementValue2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitInsertStatementValue(this);
            }
        }
        /// <summary>
        /// insert_statement_value : execute_statement
        /// </summary>
        public partial class AstInsertStatementValue3 : AstInsertStatementValue
        {
            
            internal AstInsertStatementValue3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstInsertStatementValue3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstInsertStatementValue3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstInsertStatementValue3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitInsertStatementValue(this);
            }
        }
        /// <summary>
        /// insert_statement_value : DEFAULT  VALUES
        /// </summary>
        public partial class AstInsertStatementValue4 : AstInsertStatementValue
        {
            
            internal AstInsertStatementValue4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstInsertStatementValue4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstInsertStatementValue4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstInsertStatementValue4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitInsertStatementValue(this);
            }
        }
        

        
        internal AstInsertStatementValue(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstInsertStatementValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstInsertStatementValue(Position p) : 
                base(p)
        {
        }
        
        internal AstInsertStatementValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstInsertStatementValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstInsertStatementValue.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstTableValueConstructor), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDerivedTable), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstExecuteStatement), false, false))
                {
                    return 3;
                }
            }
            if ((list.Count == 0))
            {
                return 4;
            }
            return 0;
        }
        
        /// <summary>
        /// insert_statement_value : 
        ///    table_value_constructor 
        /// </summary>
        public static AstInsertStatementValue InsertStatementValue(AstTableValueConstructor tableValueConstructor)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstInsertStatementValue.AstInsertStatementValue1 result = new AstInsertStatementValue.AstInsertStatementValue1(arguments);
            return result;
        }
        
        /// <summary>
        /// insert_statement_value : 
        ///    derived_table 
        /// </summary>
        public static AstInsertStatementValue InsertStatementValue(AstDerivedTable derivedTable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstInsertStatementValue.AstInsertStatementValue2 result = new AstInsertStatementValue.AstInsertStatementValue2(arguments);
            return result;
        }
        
        /// <summary>
        /// insert_statement_value : 
        ///    execute_statement 
        /// </summary>
        public static AstInsertStatementValue InsertStatementValue(AstExecuteStatement executeStatement)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstInsertStatementValue.AstInsertStatementValue3 result = new AstInsertStatementValue.AstInsertStatementValue3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// receive_mode
    /// 	 : receive_mode_enum
    /// 	 | top_clause
    /// </summary>
    public abstract partial class AstReceiveMode : AstRule
    {
        
        protected static string _rule = "receive_mode\r\n\t : receive_mode_enum\r\n\t | top_clause";
        
        /// <summary>
        /// receive_mode : receive_mode_enum
        /// </summary>
        public partial class AstReceiveMode1 : AstReceiveMode
        {
            
            internal AstReceiveMode1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstReceiveMode1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstReceiveMode1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstReceiveMode1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitReceiveMode(this);
            }
        }
        /// <summary>
        /// receive_mode : top_clause
        /// </summary>
        public partial class AstReceiveMode2 : AstReceiveMode
        {
            
            internal AstReceiveMode2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstReceiveMode2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstReceiveMode2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstReceiveMode2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitReceiveMode(this);
            }
        }
        

        
        internal AstReceiveMode(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstReceiveMode(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstReceiveMode(Position p) : 
                base(p)
        {
        }
        
        internal AstReceiveMode(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstReceiveMode Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstReceiveMode.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstReceiveModeEnum), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstTopClause), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// receive_mode : 
        ///    receive_mode_enum 
        /// </summary>
        public static AstReceiveMode ReceiveMode(AstReceiveModeEnum receiveModeEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstReceiveMode.AstReceiveMode1 result = new AstReceiveMode.AstReceiveMode1(arguments);
            return result;
        }
        
        /// <summary>
        /// receive_mode : 
        ///    top_clause 
        /// </summary>
        public static AstReceiveMode ReceiveMode(AstTopClause topClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstReceiveMode.AstReceiveMode2 result = new AstReceiveMode.AstReceiveMode2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// time
    /// 	 : (local_id | constant)
    /// </summary>
    public partial class AstTime : AstRule
    {
        
        protected static string _rule = "time\r\n\t : (local_id | constant)";
        
        internal AstTime(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTime(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTime(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTime(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTime(this);
        }
        
        /// <summary>
        /// time : 
        ///    local_id 
        /// </summary>
        public static AstTime Time(AstLocalId localId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTime result = new AstTime(arguments);
            return result;
        }
        
        /// <summary>
        /// time : 
        ///    constant 
        /// </summary>
        public static AstTime Time(AstConstant constant)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTime result = new AstTime(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// relational_index_option
    /// 	 : rebuild_index_option
    /// 	 | DROP_EXISTING  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// </summary>
    public abstract partial class AstRelationalIndexOption : AstRule
    {
        
        protected static string _rule = "relational_index_option\r\n\t : rebuild_index_option\r\n\t | DROP_EXISTING  EQUAL  on_o" +
            "ff\r\n\t | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off";
        
        /// <summary>
        /// relational_index_option : rebuild_index_option
        /// </summary>
        public partial class AstRelationalIndexOption1 : AstRelationalIndexOption
        {
            
            internal AstRelationalIndexOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRelationalIndexOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRelationalIndexOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRelationalIndexOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRelationalIndexOption(this);
            }
        }
        /// <summary>
        /// relational_index_option : DROP_EXISTING  EQUAL  on_off
        /// </summary>
        public partial class AstRelationalIndexOption2 : AstRelationalIndexOption
        {
            
            internal AstRelationalIndexOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRelationalIndexOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRelationalIndexOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRelationalIndexOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRelationalIndexOption(this);
            }
        }
        /// <summary>
        /// relational_index_option : OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
        /// </summary>
        public partial class AstRelationalIndexOption3 : AstRelationalIndexOption
        {
            
            internal AstRelationalIndexOption3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRelationalIndexOption3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRelationalIndexOption3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRelationalIndexOption3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRelationalIndexOption(this);
            }
        }
        

        
        internal AstRelationalIndexOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstRelationalIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRelationalIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstRelationalIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstRelationalIndexOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstRelationalIndexOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstRebuildIndexOption), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// relational_index_option : 
        ///    rebuild_index_option 
        /// </summary>
        public static AstRelationalIndexOption RelationalIndexOption(AstRebuildIndexOption rebuildIndexOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRelationalIndexOption.AstRelationalIndexOption1 result = new AstRelationalIndexOption.AstRelationalIndexOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// relational_index_option : 
        ///    DROP_EXISTING EQUAL on_off 
        /// </summary>
        public static AstRelationalIndexOption RelationalIndexOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRelationalIndexOption.AstRelationalIndexOption2 result = new AstRelationalIndexOption.AstRelationalIndexOption2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// index_status
    /// 	 : index_status_enum
    /// 	 | RESUME  resumable_index_options?
    /// 	 | reorganize_partition
    /// 	 | set_index_options
    /// 	 | rebuild_partition
    /// </summary>
    public abstract partial class AstIndexStatus : AstRule
    {
        
        protected static string _rule = "index_status\r\n\t : index_status_enum\r\n\t | RESUME  resumable_index_options?\r\n\t | re" +
            "organize_partition\r\n\t | set_index_options\r\n\t | rebuild_partition";
        
        /// <summary>
        /// index_status : index_status_enum
        /// </summary>
        public partial class AstIndexStatus1 : AstIndexStatus
        {
            
            internal AstIndexStatus1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstIndexStatus1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstIndexStatus1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstIndexStatus1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexStatus(this);
            }
        }
        /// <summary>
        /// index_status : RESUME  resumable_index_options?
        /// </summary>
        public partial class AstIndexStatus2 : AstIndexStatus
        {
            
            internal AstIndexStatus2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstIndexStatus2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstIndexStatus2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstIndexStatus2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexStatus(this);
            }
        }
        /// <summary>
        /// index_status : reorganize_partition
        /// </summary>
        public partial class AstIndexStatus3 : AstIndexStatus
        {
            
            internal AstIndexStatus3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstIndexStatus3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstIndexStatus3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstIndexStatus3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexStatus(this);
            }
        }
        /// <summary>
        /// index_status : set_index_options
        /// </summary>
        public partial class AstIndexStatus4 : AstIndexStatus
        {
            
            internal AstIndexStatus4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstIndexStatus4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstIndexStatus4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstIndexStatus4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexStatus(this);
            }
        }
        /// <summary>
        /// index_status : rebuild_partition
        /// </summary>
        public partial class AstIndexStatus5 : AstIndexStatus
        {
            
            internal AstIndexStatus5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstIndexStatus5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstIndexStatus5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstIndexStatus5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexStatus(this);
            }
        }
        

        
        internal AstIndexStatus(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstIndexStatus(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstIndexStatus(Position p) : 
                base(p)
        {
        }
        
        internal AstIndexStatus(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstIndexStatus Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstIndexStatus.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstIndexStatusEnum), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstResumableIndexOptions), true, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstReorganizePartition), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstSetIndexOptions), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstRebuildPartition), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// index_status : 
        ///    index_status_enum 
        /// </summary>
        public static AstIndexStatus IndexStatus(AstIndexStatusEnum indexStatusEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstIndexStatus.AstIndexStatus1 result = new AstIndexStatus.AstIndexStatus1(arguments);
            return result;
        }
        
        /// <summary>
        /// index_status : 
        ///    RESUME resumable_index_options? 
        /// </summary>
        public static AstIndexStatus IndexStatus(AstResumableIndexOptions resumableIndexOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstIndexStatus.AstIndexStatus2 result = new AstIndexStatus.AstIndexStatus2(arguments);
            return result;
        }
        
        /// <summary>
        /// index_status : 
        ///    reorganize_partition 
        /// </summary>
        public static AstIndexStatus IndexStatus(AstReorganizePartition reorganizePartition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstIndexStatus.AstIndexStatus3 result = new AstIndexStatus.AstIndexStatus3(arguments);
            return result;
        }
        
        /// <summary>
        /// index_status : 
        ///    set_index_options 
        /// </summary>
        public static AstIndexStatus IndexStatus(AstSetIndexOptions setIndexOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstIndexStatus.AstIndexStatus4 result = new AstIndexStatus.AstIndexStatus4(arguments);
            return result;
        }
        
        /// <summary>
        /// index_status : 
        ///    rebuild_partition 
        /// </summary>
        public static AstIndexStatus IndexStatus(AstRebuildPartition rebuildPartition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstIndexStatus.AstIndexStatus5 result = new AstIndexStatus.AstIndexStatus5(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// index_name
    /// 	 : (id_ | ALL)
    /// </summary>
    public partial class AstIndexName : AstRule
    {
        
        protected static string _rule = "index_name\r\n\t : (id_ | ALL)";
        
        internal AstIndexName(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstIndexName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstIndexName(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstIndexName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIndexName(this);
        }
        
        /// <summary>
        /// index_name : 
        ///    id_ 
        /// </summary>
        public static AstIndexName IndexName(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstIndexName result = new AstIndexName(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// resumable_index_option
    /// 	 : MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | MAX_DURATION  EQUAL  max_duration = decimal  MINUTES?
    /// 	 | low_priority_lock_wait
    /// </summary>
    public abstract partial class AstResumableIndexOption : AstRule
    {
        
        protected static string _rule = "resumable_index_option\r\n\t : MAXDOP  EQUAL  max_degree_of_parallelism = decimal\r\n\t" +
            " | MAX_DURATION  EQUAL  max_duration = decimal  MINUTES?\r\n\t | low_priority_lock_" +
            "wait";
        
        /// <summary>
        /// resumable_index_option : MAXDOP  EQUAL  max_degree_of_parallelism = decimal
        /// </summary>
        public partial class AstResumableIndexOption1 : AstResumableIndexOption
        {
            
            internal AstResumableIndexOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstResumableIndexOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstResumableIndexOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstResumableIndexOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitResumableIndexOption(this);
            }
        }
        /// <summary>
        /// resumable_index_option : MAX_DURATION  EQUAL  max_duration = decimal  MINUTES?
        /// </summary>
        public partial class AstResumableIndexOption2 : AstResumableIndexOption
        {
            
            internal AstResumableIndexOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstResumableIndexOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstResumableIndexOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstResumableIndexOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitResumableIndexOption(this);
            }
        }
        /// <summary>
        /// resumable_index_option : low_priority_lock_wait
        /// </summary>
        public partial class AstResumableIndexOption3 : AstResumableIndexOption
        {
            
            internal AstResumableIndexOption3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstResumableIndexOption3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstResumableIndexOption3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstResumableIndexOption3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitResumableIndexOption(this);
            }
        }
        

        
        internal AstResumableIndexOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstResumableIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstResumableIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstResumableIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstResumableIndexOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstResumableIndexOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstLowPriorityLockWait), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// resumable_index_option : 
        ///    MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public static AstResumableIndexOption ResumableIndexOption(AstDecimal maxDegreeOfParallelism)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstResumableIndexOption.AstResumableIndexOption1 result = new AstResumableIndexOption.AstResumableIndexOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// resumable_index_option : 
        ///    low_priority_lock_wait 
        /// </summary>
        public static AstResumableIndexOption ResumableIndexOption(AstLowPriorityLockWait lowPriorityLockWait)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstResumableIndexOption.AstResumableIndexOption3 result = new AstResumableIndexOption.AstResumableIndexOption3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// reorganize_option
    /// 	 : LOB_COMPACTION  EQUAL  on_off
    /// 	 | COMPRESS_ALL_ROW_GROUPS  EQUAL  on_off
    /// </summary>
    public abstract partial class AstReorganizeOption : AstRule
    {
        
        protected static string _rule = "reorganize_option\r\n\t : LOB_COMPACTION  EQUAL  on_off\r\n\t | COMPRESS_ALL_ROW_GROUPS" +
            "  EQUAL  on_off";
        
        /// <summary>
        /// reorganize_option : LOB_COMPACTION  EQUAL  on_off
        /// </summary>
        public partial class AstReorganizeOption1 : AstReorganizeOption
        {
            
            internal AstReorganizeOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstReorganizeOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstReorganizeOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstReorganizeOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitReorganizeOption(this);
            }
        }
        /// <summary>
        /// reorganize_option : COMPRESS_ALL_ROW_GROUPS  EQUAL  on_off
        /// </summary>
        public partial class AstReorganizeOption2 : AstReorganizeOption
        {
            
            internal AstReorganizeOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstReorganizeOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstReorganizeOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstReorganizeOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitReorganizeOption(this);
            }
        }
        

        
        internal AstReorganizeOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstReorganizeOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstReorganizeOption(Position p) : 
                base(p)
        {
        }
        
        internal AstReorganizeOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstReorganizeOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstReorganizeOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// reorganize_option : 
        ///    LOB_COMPACTION EQUAL on_off 
        /// </summary>
        public static AstReorganizeOption ReorganizeOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstReorganizeOption.AstReorganizeOption1 result = new AstReorganizeOption.AstReorganizeOption1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// set_index_option
    /// 	 : ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES?
    /// </summary>
    public abstract partial class AstSetIndexOption : AstRule
    {
        
        protected static string _rule = @"set_index_option
	 : ALLOW_ROW_LOCKS  EQUAL  on_off
	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
	 | IGNORE_DUP_KEY  EQUAL  on_off
	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
	 | COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES?";
        
        /// <summary>
        /// set_index_option : ALLOW_ROW_LOCKS  EQUAL  on_off
        /// </summary>
        public partial class AstSetIndexOption1 : AstSetIndexOption
        {
            
            internal AstSetIndexOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSetIndexOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSetIndexOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSetIndexOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetIndexOption(this);
            }
        }
        /// <summary>
        /// set_index_option : ALLOW_PAGE_LOCKS  EQUAL  on_off
        /// </summary>
        public partial class AstSetIndexOption2 : AstSetIndexOption
        {
            
            internal AstSetIndexOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSetIndexOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSetIndexOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSetIndexOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetIndexOption(this);
            }
        }
        /// <summary>
        /// set_index_option : OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
        /// </summary>
        public partial class AstSetIndexOption3 : AstSetIndexOption
        {
            
            internal AstSetIndexOption3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSetIndexOption3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSetIndexOption3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSetIndexOption3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetIndexOption(this);
            }
        }
        /// <summary>
        /// set_index_option : IGNORE_DUP_KEY  EQUAL  on_off
        /// </summary>
        public partial class AstSetIndexOption4 : AstSetIndexOption
        {
            
            internal AstSetIndexOption4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSetIndexOption4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSetIndexOption4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSetIndexOption4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetIndexOption(this);
            }
        }
        /// <summary>
        /// set_index_option : STATISTICS_NORECOMPUTE  EQUAL  on_off
        /// </summary>
        public partial class AstSetIndexOption5 : AstSetIndexOption
        {
            
            internal AstSetIndexOption5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSetIndexOption5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSetIndexOption5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSetIndexOption5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetIndexOption(this);
            }
        }
        /// <summary>
        /// set_index_option : COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES?
        /// </summary>
        public partial class AstSetIndexOption6 : AstSetIndexOption
        {
            
            internal AstSetIndexOption6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSetIndexOption6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSetIndexOption6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSetIndexOption6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetIndexOption(this);
            }
        }
        

        
        internal AstSetIndexOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstSetIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSetIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstSetIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSetIndexOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSetIndexOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 6;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// set_index_option : 
        ///    ALLOW_ROW_LOCKS EQUAL on_off 
        /// </summary>
        public static AstSetIndexOption SetIndexOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetIndexOption.AstSetIndexOption1 result = new AstSetIndexOption.AstSetIndexOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// set_index_option : 
        ///    COMPRESSION_DELAY EQUAL delay=decimal MINUTES? 
        /// </summary>
        public static AstSetIndexOption SetIndexOption(AstDecimal delay)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetIndexOption.AstSetIndexOption6 result = new AstSetIndexOption.AstSetIndexOption6(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// rebuild_partition
    /// 	 : REBUILD  (PARTITION  EQUAL  ALL)?  rebuild_index_options?
    /// 	 | REBUILD  PARTITION  EQUAL  decimal  single_partition_rebuild_index_options?
    /// </summary>
    public abstract partial class AstRebuildPartition : AstRule
    {
        
        protected static string _rule = "rebuild_partition\r\n\t : REBUILD  (PARTITION  EQUAL  ALL)?  rebuild_index_options?\r" +
            "\n\t | REBUILD  PARTITION  EQUAL  decimal  single_partition_rebuild_index_options?" +
            "";
        
        /// <summary>
        /// rebuild_partition : REBUILD  (PARTITION  EQUAL  ALL)?  rebuild_index_options?
        /// </summary>
        public partial class AstRebuildPartition1 : AstRebuildPartition
        {
            
            internal AstRebuildPartition1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRebuildPartition1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRebuildPartition1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRebuildPartition1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildPartition(this);
            }
        }
        /// <summary>
        /// rebuild_partition : REBUILD  PARTITION  EQUAL  decimal  single_partition_rebuild_index_options?
        /// </summary>
        public partial class AstRebuildPartition2 : AstRebuildPartition
        {
            
            internal AstRebuildPartition2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRebuildPartition2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRebuildPartition2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRebuildPartition2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildPartition(this);
            }
        }
        

        
        internal AstRebuildPartition(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstRebuildPartition(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRebuildPartition(Position p) : 
                base(p)
        {
        }
        
        internal AstRebuildPartition(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstRebuildPartition Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstRebuildPartition.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstSinglePartitionRebuildIndexOptions), true, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstRebuildIndexOptions), true, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// rebuild_partition : 
        ///    REBUILD PARTITION EQUAL ALL rebuild_index_options? 
        /// </summary>
        public static AstRebuildPartition RebuildPartition(AstRebuildIndexOptions rebuildIndexOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRebuildPartition.AstRebuildPartition1 result = new AstRebuildPartition.AstRebuildPartition1(arguments);
            return result;
        }
        
        /// <summary>
        /// rebuild_partition : 
        ///    REBUILD PARTITION EQUAL decimal single_partition_rebuild_index_options? 
        /// </summary>
        public static AstRebuildPartition RebuildPartition(AstDecimal @decimal, AstSinglePartitionRebuildIndexOptions singlePartitionRebuildIndexOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRebuildPartition.AstRebuildPartition2 result = new AstRebuildPartition.AstRebuildPartition2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// rebuild_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  decimal
    /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | STATISTICS_INCREMENTAL  EQUAL  on_off
    /// 	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | MAX_DURATION  EQUAL  times = decimal  MINUTES?
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// </summary>
    public abstract partial class AstRebuildIndexOption : AstRule
    {
        
        protected static string _rule = @"rebuild_index_option
	 : PAD_INDEX  EQUAL  on_off
	 | FILLFACTOR  EQUAL  decimal
	 | SORT_IN_TEMPDB  EQUAL  on_off
	 | IGNORE_DUP_KEY  EQUAL  on_off
	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
	 | STATISTICS_INCREMENTAL  EQUAL  on_off
	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
	 | RESUMABLE  EQUAL  on_off
	 | MAX_DURATION  EQUAL  times = decimal  MINUTES?
	 | ALLOW_ROW_LOCKS  EQUAL  on_off
	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
	 | DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions?
	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?";
        
        /// <summary>
        /// rebuild_index_option : PAD_INDEX  EQUAL  on_off
        /// </summary>
        public partial class AstRebuildIndexOption1 : AstRebuildIndexOption
        {
            
            internal AstRebuildIndexOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRebuildIndexOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRebuildIndexOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRebuildIndexOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : FILLFACTOR  EQUAL  decimal
        /// </summary>
        public partial class AstRebuildIndexOption2 : AstRebuildIndexOption
        {
            
            internal AstRebuildIndexOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRebuildIndexOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRebuildIndexOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRebuildIndexOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : SORT_IN_TEMPDB  EQUAL  on_off
        /// </summary>
        public partial class AstRebuildIndexOption3 : AstRebuildIndexOption
        {
            
            internal AstRebuildIndexOption3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRebuildIndexOption3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRebuildIndexOption3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRebuildIndexOption3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : IGNORE_DUP_KEY  EQUAL  on_off
        /// </summary>
        public partial class AstRebuildIndexOption4 : AstRebuildIndexOption
        {
            
            internal AstRebuildIndexOption4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRebuildIndexOption4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRebuildIndexOption4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRebuildIndexOption4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : STATISTICS_NORECOMPUTE  EQUAL  on_off
        /// </summary>
        public partial class AstRebuildIndexOption5 : AstRebuildIndexOption
        {
            
            internal AstRebuildIndexOption5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRebuildIndexOption5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRebuildIndexOption5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRebuildIndexOption5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : STATISTICS_INCREMENTAL  EQUAL  on_off
        /// </summary>
        public partial class AstRebuildIndexOption6 : AstRebuildIndexOption
        {
            
            internal AstRebuildIndexOption6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRebuildIndexOption6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRebuildIndexOption6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRebuildIndexOption6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
        /// </summary>
        public partial class AstRebuildIndexOption7 : AstRebuildIndexOption
        {
            
            internal AstRebuildIndexOption7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRebuildIndexOption7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRebuildIndexOption7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRebuildIndexOption7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : RESUMABLE  EQUAL  on_off
        /// </summary>
        public partial class AstRebuildIndexOption8 : AstRebuildIndexOption
        {
            
            internal AstRebuildIndexOption8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRebuildIndexOption8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRebuildIndexOption8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRebuildIndexOption8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : MAX_DURATION  EQUAL  times = decimal  MINUTES?
        /// </summary>
        public partial class AstRebuildIndexOption9 : AstRebuildIndexOption
        {
            
            internal AstRebuildIndexOption9(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRebuildIndexOption9(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRebuildIndexOption9(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRebuildIndexOption9(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : ALLOW_ROW_LOCKS  EQUAL  on_off
        /// </summary>
        public partial class AstRebuildIndexOption10 : AstRebuildIndexOption
        {
            
            internal AstRebuildIndexOption10(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRebuildIndexOption10(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRebuildIndexOption10(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRebuildIndexOption10(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : ALLOW_PAGE_LOCKS  EQUAL  on_off
        /// </summary>
        public partial class AstRebuildIndexOption11 : AstRebuildIndexOption
        {
            
            internal AstRebuildIndexOption11(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRebuildIndexOption11(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRebuildIndexOption11(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRebuildIndexOption11(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : MAXDOP  EQUAL  max_degree_of_parallelism = decimal
        /// </summary>
        public partial class AstRebuildIndexOption12 : AstRebuildIndexOption
        {
            
            internal AstRebuildIndexOption12(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRebuildIndexOption12(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRebuildIndexOption12(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRebuildIndexOption12(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions?
        /// </summary>
        public partial class AstRebuildIndexOption13 : AstRebuildIndexOption
        {
            
            internal AstRebuildIndexOption13(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRebuildIndexOption13(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRebuildIndexOption13(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRebuildIndexOption13(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : XML_COMPRESSION  EQUAL  on_off  on_partitions?
        /// </summary>
        public partial class AstRebuildIndexOption14 : AstRebuildIndexOption
        {
            
            internal AstRebuildIndexOption14(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRebuildIndexOption14(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRebuildIndexOption14(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRebuildIndexOption14(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        

        
        internal AstRebuildIndexOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstRebuildIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRebuildIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstRebuildIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstRebuildIndexOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstRebuildIndexOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstDatacompressionMode), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnPartitions), true, false))
                    {
                        return 13;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnPartitions), true, false))
                    {
                        return 14;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstLowPriorityLockWait), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 8;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 9;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 10;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 11;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 12;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// rebuild_index_option : 
        ///    PAD_INDEX EQUAL on_off 
        /// </summary>
        public static AstRebuildIndexOption RebuildIndexOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRebuildIndexOption.AstRebuildIndexOption1 result = new AstRebuildIndexOption.AstRebuildIndexOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// rebuild_index_option : 
        ///    FILLFACTOR EQUAL decimal 
        /// </summary>
        public static AstRebuildIndexOption RebuildIndexOption(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRebuildIndexOption.AstRebuildIndexOption2 result = new AstRebuildIndexOption.AstRebuildIndexOption2(arguments);
            return result;
        }
        
        /// <summary>
        /// rebuild_index_option : 
        ///    ONLINE EQUAL ON ( low_priority_lock_wait ) 
        /// </summary>
        public static AstRebuildIndexOption RebuildIndexOption(AstLowPriorityLockWait lowPriorityLockWait)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRebuildIndexOption.AstRebuildIndexOption7 result = new AstRebuildIndexOption.AstRebuildIndexOption7(arguments);
            return result;
        }
        
        /// <summary>
        /// rebuild_index_option : 
        ///    DATA_COMPRESSION EQUAL datacompression_mode on_partitions? 
        /// </summary>
        public static AstRebuildIndexOption RebuildIndexOption(AstDatacompressionMode datacompressionMode, AstOnPartitions onPartitions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRebuildIndexOption.AstRebuildIndexOption13 result = new AstRebuildIndexOption.AstRebuildIndexOption13(arguments);
            return result;
        }
        
        /// <summary>
        /// rebuild_index_option : 
        ///    XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public static AstRebuildIndexOption RebuildIndexOption(AstOnOff onOff, AstOnPartitions onPartitions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRebuildIndexOption.AstRebuildIndexOption14 result = new AstRebuildIndexOption.AstRebuildIndexOption14(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// single_partition_rebuild_index_option
    /// 	 : SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// 	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
    /// </summary>
    public abstract partial class AstSinglePartitionRebuildIndexOption : AstRule
    {
        
        protected static string _rule = @"single_partition_rebuild_index_option
	 : SORT_IN_TEMPDB  EQUAL  on_off
	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
	 | RESUMABLE  EQUAL  on_off
	 | DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions?
	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)";
        
        /// <summary>
        /// single_partition_rebuild_index_option : SORT_IN_TEMPDB  EQUAL  on_off
        /// </summary>
        public partial class AstSinglePartitionRebuildIndexOption1 : AstSinglePartitionRebuildIndexOption
        {
            
            internal AstSinglePartitionRebuildIndexOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSinglePartitionRebuildIndexOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSinglePartitionRebuildIndexOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSinglePartitionRebuildIndexOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSinglePartitionRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// single_partition_rebuild_index_option : MAXDOP  EQUAL  max_degree_of_parallelism = decimal
        /// </summary>
        public partial class AstSinglePartitionRebuildIndexOption2 : AstSinglePartitionRebuildIndexOption
        {
            
            internal AstSinglePartitionRebuildIndexOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSinglePartitionRebuildIndexOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSinglePartitionRebuildIndexOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSinglePartitionRebuildIndexOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSinglePartitionRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// single_partition_rebuild_index_option : RESUMABLE  EQUAL  on_off
        /// </summary>
        public partial class AstSinglePartitionRebuildIndexOption3 : AstSinglePartitionRebuildIndexOption
        {
            
            internal AstSinglePartitionRebuildIndexOption3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSinglePartitionRebuildIndexOption3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSinglePartitionRebuildIndexOption3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSinglePartitionRebuildIndexOption3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSinglePartitionRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// single_partition_rebuild_index_option : DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions?
        /// </summary>
        public partial class AstSinglePartitionRebuildIndexOption4 : AstSinglePartitionRebuildIndexOption
        {
            
            internal AstSinglePartitionRebuildIndexOption4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSinglePartitionRebuildIndexOption4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSinglePartitionRebuildIndexOption4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSinglePartitionRebuildIndexOption4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSinglePartitionRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// single_partition_rebuild_index_option : XML_COMPRESSION  EQUAL  on_off  on_partitions?
        /// </summary>
        public partial class AstSinglePartitionRebuildIndexOption5 : AstSinglePartitionRebuildIndexOption
        {
            
            internal AstSinglePartitionRebuildIndexOption5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSinglePartitionRebuildIndexOption5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSinglePartitionRebuildIndexOption5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSinglePartitionRebuildIndexOption5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSinglePartitionRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// single_partition_rebuild_index_option : ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
        /// </summary>
        public partial class AstSinglePartitionRebuildIndexOption6 : AstSinglePartitionRebuildIndexOption
        {
            
            internal AstSinglePartitionRebuildIndexOption6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSinglePartitionRebuildIndexOption6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSinglePartitionRebuildIndexOption6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSinglePartitionRebuildIndexOption6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSinglePartitionRebuildIndexOption(this);
            }
        }
        

        
        internal AstSinglePartitionRebuildIndexOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstSinglePartitionRebuildIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSinglePartitionRebuildIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstSinglePartitionRebuildIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSinglePartitionRebuildIndexOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSinglePartitionRebuildIndexOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstDatacompressionMode), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnPartitions), true, false))
                    {
                        return 4;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnPartitions), true, false))
                    {
                        return 5;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstLowPriorityLockWait), false, false))
                {
                    return 6;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// single_partition_rebuild_index_option : 
        ///    SORT_IN_TEMPDB EQUAL on_off 
        /// </summary>
        public static AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption1 result = new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// single_partition_rebuild_index_option : 
        ///    MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public static AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption(AstDecimal maxDegreeOfParallelism)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption2 result = new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption2(arguments);
            return result;
        }
        
        /// <summary>
        /// single_partition_rebuild_index_option : 
        ///    DATA_COMPRESSION EQUAL datacompression_mode on_partitions? 
        /// </summary>
        public static AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption(AstDatacompressionMode datacompressionMode, AstOnPartitions onPartitions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption4 result = new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption4(arguments);
            return result;
        }
        
        /// <summary>
        /// single_partition_rebuild_index_option : 
        ///    XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public static AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption(AstOnOff onOff, AstOnPartitions onPartitions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption5 result = new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption5(arguments);
            return result;
        }
        
        /// <summary>
        /// single_partition_rebuild_index_option : 
        ///    ONLINE EQUAL ON ( low_priority_lock_wait ) 
        /// </summary>
        public static AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption(AstLowPriorityLockWait lowPriorityLockWait)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption6 result = new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption6(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// partition_nums
    /// 	 : partition_number = decimal  (TO  to_partition_number = decimal)?
    /// </summary>
    public partial class AstPartitionNums : AstRule
    {
        
        protected static string _rule = "partition_nums\r\n\t : partition_number = decimal  (TO  to_partition_number = decima" +
            "l)?";
        
        internal AstPartitionNums(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstPartitionNums(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstPartitionNums(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstPartitionNums(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionNums(this);
        }
        
        /// <summary>
        /// partition_nums : 
        ///    partition_number=decimal TO to_partition_number=decimal 
        /// </summary>
        public static AstPartitionNums PartitionNums(AstDecimal partitionNumber, AstDecimal toPartitionNumber)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPartitionNums result = new AstPartitionNums(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// columnstore_index_option
    /// 	 : DROP_EXISTING  EQUAL  drop_existing = on_off
    /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | ONLINE  EQUAL  online = on_off
    /// 	 | COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES?
    /// 	 | DATA_COMPRESSION  EQUAL  datacompression_column_mode  on_partitions?
    /// </summary>
    public abstract partial class AstColumnstoreIndexOption : AstRule
    {
        
        protected static string _rule = @"columnstore_index_option
	 : DROP_EXISTING  EQUAL  drop_existing = on_off
	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
	 | ONLINE  EQUAL  online = on_off
	 | COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES?
	 | DATA_COMPRESSION  EQUAL  datacompression_column_mode  on_partitions?";
        
        /// <summary>
        /// columnstore_index_option : DROP_EXISTING  EQUAL  drop_existing = on_off
        /// </summary>
        public partial class AstColumnstoreIndexOption1 : AstColumnstoreIndexOption
        {
            
            internal AstColumnstoreIndexOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnstoreIndexOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnstoreIndexOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnstoreIndexOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnstoreIndexOption(this);
            }
        }
        /// <summary>
        /// columnstore_index_option : MAXDOP  EQUAL  max_degree_of_parallelism = decimal
        /// </summary>
        public partial class AstColumnstoreIndexOption2 : AstColumnstoreIndexOption
        {
            
            internal AstColumnstoreIndexOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnstoreIndexOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnstoreIndexOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnstoreIndexOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnstoreIndexOption(this);
            }
        }
        /// <summary>
        /// columnstore_index_option : ONLINE  EQUAL  online = on_off
        /// </summary>
        public partial class AstColumnstoreIndexOption3 : AstColumnstoreIndexOption
        {
            
            internal AstColumnstoreIndexOption3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnstoreIndexOption3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnstoreIndexOption3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnstoreIndexOption3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnstoreIndexOption(this);
            }
        }
        /// <summary>
        /// columnstore_index_option : COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES?
        /// </summary>
        public partial class AstColumnstoreIndexOption4 : AstColumnstoreIndexOption
        {
            
            internal AstColumnstoreIndexOption4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnstoreIndexOption4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnstoreIndexOption4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnstoreIndexOption4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnstoreIndexOption(this);
            }
        }
        /// <summary>
        /// columnstore_index_option : DATA_COMPRESSION  EQUAL  datacompression_column_mode  on_partitions?
        /// </summary>
        public partial class AstColumnstoreIndexOption5 : AstColumnstoreIndexOption
        {
            
            internal AstColumnstoreIndexOption5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnstoreIndexOption5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnstoreIndexOption5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnstoreIndexOption5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnstoreIndexOption(this);
            }
        }
        

        
        internal AstColumnstoreIndexOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstColumnstoreIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstColumnstoreIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstColumnstoreIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstColumnstoreIndexOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstColumnstoreIndexOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstDatacompressionColumnMode), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnPartitions), true, false))
                    {
                        return 5;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// columnstore_index_option : 
        ///    DROP_EXISTING EQUAL drop_existing=on_off 
        /// </summary>
        public static AstColumnstoreIndexOption ColumnstoreIndexOption(AstOnOff dropExisting)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnstoreIndexOption.AstColumnstoreIndexOption1 result = new AstColumnstoreIndexOption.AstColumnstoreIndexOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// columnstore_index_option : 
        ///    MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public static AstColumnstoreIndexOption ColumnstoreIndexOption(AstDecimal maxDegreeOfParallelism)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnstoreIndexOption.AstColumnstoreIndexOption2 result = new AstColumnstoreIndexOption.AstColumnstoreIndexOption2(arguments);
            return result;
        }
        
        /// <summary>
        /// columnstore_index_option : 
        ///    DATA_COMPRESSION EQUAL datacompression_column_mode on_partitions? 
        /// </summary>
        public static AstColumnstoreIndexOption ColumnstoreIndexOption(AstDatacompressionColumnMode datacompressionColumnMode, AstOnPartitions onPartitions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnstoreIndexOption.AstColumnstoreIndexOption5 result = new AstColumnstoreIndexOption.AstColumnstoreIndexOption5(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// xml_index_option
    /// 	 : PAD_INDEX  EQUAL  pad_index = on_off
    /// 	 | FILLFACTOR  EQUAL  fillfactor = decimal
    /// 	 | SORT_IN_TEMPDB  EQUAL  sort_in_tempdb = on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  ignore_dup_key = on_off
    /// 	 | DROP_EXISTING  EQUAL  drop_existing = on_off
    /// 	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  allow_row_loks = on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  allow_page_locks = on_off
    /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | XML_COMPRESSION  EQUAL  xml_compression = on_off
    /// </summary>
    public abstract partial class AstXmlIndexOption : AstRule
    {
        
        protected static string _rule = @"xml_index_option
	 : PAD_INDEX  EQUAL  pad_index = on_off
	 | FILLFACTOR  EQUAL  fillfactor = decimal
	 | SORT_IN_TEMPDB  EQUAL  sort_in_tempdb = on_off
	 | IGNORE_DUP_KEY  EQUAL  ignore_dup_key = on_off
	 | DROP_EXISTING  EQUAL  drop_existing = on_off
	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
	 | ALLOW_ROW_LOCKS  EQUAL  allow_row_loks = on_off
	 | ALLOW_PAGE_LOCKS  EQUAL  allow_page_locks = on_off
	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
	 | XML_COMPRESSION  EQUAL  xml_compression = on_off";
        
        /// <summary>
        /// xml_index_option : PAD_INDEX  EQUAL  pad_index = on_off
        /// </summary>
        public partial class AstXmlIndexOption1 : AstXmlIndexOption
        {
            
            internal AstXmlIndexOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstXmlIndexOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstXmlIndexOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstXmlIndexOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : FILLFACTOR  EQUAL  fillfactor = decimal
        /// </summary>
        public partial class AstXmlIndexOption2 : AstXmlIndexOption
        {
            
            internal AstXmlIndexOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstXmlIndexOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstXmlIndexOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstXmlIndexOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : SORT_IN_TEMPDB  EQUAL  sort_in_tempdb = on_off
        /// </summary>
        public partial class AstXmlIndexOption3 : AstXmlIndexOption
        {
            
            internal AstXmlIndexOption3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstXmlIndexOption3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstXmlIndexOption3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstXmlIndexOption3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : IGNORE_DUP_KEY  EQUAL  ignore_dup_key = on_off
        /// </summary>
        public partial class AstXmlIndexOption4 : AstXmlIndexOption
        {
            
            internal AstXmlIndexOption4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstXmlIndexOption4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstXmlIndexOption4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstXmlIndexOption4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : DROP_EXISTING  EQUAL  drop_existing = on_off
        /// </summary>
        public partial class AstXmlIndexOption5 : AstXmlIndexOption
        {
            
            internal AstXmlIndexOption5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstXmlIndexOption5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstXmlIndexOption5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstXmlIndexOption5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
        /// </summary>
        public partial class AstXmlIndexOption6 : AstXmlIndexOption
        {
            
            internal AstXmlIndexOption6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstXmlIndexOption6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstXmlIndexOption6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstXmlIndexOption6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : ALLOW_ROW_LOCKS  EQUAL  allow_row_loks = on_off
        /// </summary>
        public partial class AstXmlIndexOption7 : AstXmlIndexOption
        {
            
            internal AstXmlIndexOption7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstXmlIndexOption7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstXmlIndexOption7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstXmlIndexOption7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : ALLOW_PAGE_LOCKS  EQUAL  allow_page_locks = on_off
        /// </summary>
        public partial class AstXmlIndexOption8 : AstXmlIndexOption
        {
            
            internal AstXmlIndexOption8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstXmlIndexOption8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstXmlIndexOption8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstXmlIndexOption8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : MAXDOP  EQUAL  max_degree_of_parallelism = decimal
        /// </summary>
        public partial class AstXmlIndexOption9 : AstXmlIndexOption
        {
            
            internal AstXmlIndexOption9(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstXmlIndexOption9(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstXmlIndexOption9(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstXmlIndexOption9(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : XML_COMPRESSION  EQUAL  xml_compression = on_off
        /// </summary>
        public partial class AstXmlIndexOption10 : AstXmlIndexOption
        {
            
            internal AstXmlIndexOption10(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstXmlIndexOption10(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstXmlIndexOption10(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstXmlIndexOption10(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        

        
        internal AstXmlIndexOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstXmlIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstXmlIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstXmlIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstXmlIndexOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstXmlIndexOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstLowPriorityLockWait), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 8;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 9;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 10;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// xml_index_option : 
        ///    PAD_INDEX EQUAL pad_index=on_off 
        /// </summary>
        public static AstXmlIndexOption XmlIndexOption(AstOnOff padIndex)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstXmlIndexOption.AstXmlIndexOption1 result = new AstXmlIndexOption.AstXmlIndexOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// xml_index_option : 
        ///    FILLFACTOR EQUAL fillfactor=decimal 
        /// </summary>
        public static AstXmlIndexOption XmlIndexOption(AstDecimal fillfactor)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstXmlIndexOption.AstXmlIndexOption2 result = new AstXmlIndexOption.AstXmlIndexOption2(arguments);
            return result;
        }
        
        /// <summary>
        /// xml_index_option : 
        ///    ONLINE EQUAL ON ( low_priority_lock_wait ) 
        /// </summary>
        public static AstXmlIndexOption XmlIndexOption(AstLowPriorityLockWait lowPriorityLockWait)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstXmlIndexOption.AstXmlIndexOption6 result = new AstXmlIndexOption.AstXmlIndexOption6(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_or_alter_trigger
    /// 	 : create_or_alter_dml_trigger
    /// 	 | create_or_alter_ddl_trigger
    /// </summary>
    public abstract partial class AstCreateOrAlterTrigger : AstBatchLevelStatement
    {
        
        protected static string _rule = "create_or_alter_trigger\r\n\t : create_or_alter_dml_trigger\r\n\t | create_or_alter_ddl" +
            "_trigger";
        
        /// <summary>
        /// create_or_alter_trigger : create_or_alter_dml_trigger
        /// </summary>
        public partial class AstCreateOrAlterTrigger1 : AstCreateOrAlterTrigger
        {
            
            internal AstCreateOrAlterTrigger1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateOrAlterTrigger1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateOrAlterTrigger1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateOrAlterTrigger1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateOrAlterTrigger(this);
            }
        }
        /// <summary>
        /// create_or_alter_trigger : create_or_alter_ddl_trigger
        /// </summary>
        public partial class AstCreateOrAlterTrigger2 : AstCreateOrAlterTrigger
        {
            
            internal AstCreateOrAlterTrigger2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateOrAlterTrigger2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateOrAlterTrigger2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateOrAlterTrigger2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateOrAlterTrigger(this);
            }
        }
        

        
        internal AstCreateOrAlterTrigger(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCreateOrAlterTrigger(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateOrAlterTrigger(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateOrAlterTrigger(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateOrAlterTrigger Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateOrAlterTrigger.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstCreateOrAlterDmlTrigger), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateOrAlterDdlTrigger), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_or_alter_trigger : 
        ///    create_or_alter_dml_trigger 
        /// </summary>
        public static AstCreateOrAlterTrigger CreateOrAlterTrigger(AstCreateOrAlterDmlTrigger createOrAlterDmlTrigger)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateOrAlterTrigger.AstCreateOrAlterTrigger1 result = new AstCreateOrAlterTrigger.AstCreateOrAlterTrigger1(arguments);
            return result;
        }
        
        /// <summary>
        /// create_or_alter_trigger : 
        ///    create_or_alter_ddl_trigger 
        /// </summary>
        public static AstCreateOrAlterTrigger CreateOrAlterTrigger(AstCreateOrAlterDdlTrigger createOrAlterDdlTrigger)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateOrAlterTrigger.AstCreateOrAlterTrigger2 result = new AstCreateOrAlterTrigger.AstCreateOrAlterTrigger2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// for_after_instead
    /// 	 : FOR
    /// 	 | AFTER
    /// 	 | INSTEAD  OF
    /// </summary>
    public abstract partial class AstForAfterInstead : AstRule
    {
        
        protected static string _rule = "for_after_instead\r\n\t : FOR\r\n\t | AFTER\r\n\t | INSTEAD  OF";
        
        /// <summary>
        /// for_after_instead : FOR
        /// </summary>
        public partial class AstForAfterInstead1 : AstForAfterInstead
        {
            
            internal AstForAfterInstead1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstForAfterInstead1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstForAfterInstead1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstForAfterInstead1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForAfterInstead(this);
            }
        }
        /// <summary>
        /// for_after_instead : AFTER
        /// </summary>
        public partial class AstForAfterInstead2 : AstForAfterInstead
        {
            
            internal AstForAfterInstead2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstForAfterInstead2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstForAfterInstead2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstForAfterInstead2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForAfterInstead(this);
            }
        }
        /// <summary>
        /// for_after_instead : INSTEAD  OF
        /// </summary>
        public partial class AstForAfterInstead3 : AstForAfterInstead
        {
            
            internal AstForAfterInstead3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstForAfterInstead3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstForAfterInstead3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstForAfterInstead3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForAfterInstead(this);
            }
        }
        

        
        internal AstForAfterInstead(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstForAfterInstead(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstForAfterInstead(Position p) : 
                base(p)
        {
        }
        
        internal AstForAfterInstead(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstForAfterInstead Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstForAfterInstead.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 0))
            {
                return 1;
                return 2;
                return 3;
            }
            return 0;
        }
    }
    
    /// <summary>
    /// dml_trigger_option
    /// 	 : ENCRYPTION
    /// 	 | execute_clause
    /// </summary>
    public abstract partial class AstDmlTriggerOption : AstRule
    {
        
        protected static string _rule = "dml_trigger_option\r\n\t : ENCRYPTION\r\n\t | execute_clause";
        
        /// <summary>
        /// dml_trigger_option : ENCRYPTION
        /// </summary>
        public partial class AstDmlTriggerOption1 : AstDmlTriggerOption
        {
            
            internal AstDmlTriggerOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDmlTriggerOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDmlTriggerOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDmlTriggerOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDmlTriggerOption(this);
            }
        }
        /// <summary>
        /// dml_trigger_option : execute_clause
        /// </summary>
        public partial class AstDmlTriggerOption2 : AstDmlTriggerOption
        {
            
            internal AstDmlTriggerOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDmlTriggerOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDmlTriggerOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDmlTriggerOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDmlTriggerOption(this);
            }
        }
        

        
        internal AstDmlTriggerOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstDmlTriggerOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDmlTriggerOption(Position p) : 
                base(p)
        {
        }
        
        internal AstDmlTriggerOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDmlTriggerOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDmlTriggerOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstExecuteClause), false, false))
                {
                    return 2;
                }
            }
            if ((list.Count == 0))
            {
                return 1;
            }
            return 0;
        }
        
        /// <summary>
        /// dml_trigger_option : 
        ///    execute_clause 
        /// </summary>
        public static AstDmlTriggerOption DmlTriggerOption(AstExecuteClause executeClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDmlTriggerOption.AstDmlTriggerOption2 result = new AstDmlTriggerOption.AstDmlTriggerOption2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_or_alter_function
    /// 	 : ((CREATE  (OR  ALTER)?) | ALTER)  FUNCTION  funcName = schema_func_proc_ref  ((LR_BRACKET  procedure_params  RR_BRACKET) | LR_BRACKET  RR_BRACKET)  (func_body_returns_select | func_body_returns_table | func_body_returns_scalar)  SEMI?
    /// </summary>
    public partial class AstCreateOrAlterFunction : AstBatchLevelStatement
    {
        
        protected static string _rule = @"create_or_alter_function
	 : ((CREATE  (OR  ALTER)?) | ALTER)  FUNCTION  funcName = schema_func_proc_ref  ((LR_BRACKET  procedure_params  RR_BRACKET) | LR_BRACKET  RR_BRACKET)  (func_body_returns_select | func_body_returns_table | func_body_returns_scalar)  SEMI?";
        
        internal AstCreateOrAlterFunction(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateOrAlterFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateOrAlterFunction(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateOrAlterFunction(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterFunction(this);
        }
        
        /// <summary>
        /// create_or_alter_function : 
        ///    CREATE OR ALTER FUNCTION funcName=schema_func_proc_ref ( procedure_params ) func_body_returns_select SEMI? 
        /// </summary>
        public static AstCreateOrAlterFunction CreateOrAlterFunction(AstSchemaFuncProcRef funcName, AstProcedureParams procedureParams, AstFuncBodyReturnsSelect funcBodyReturnsSelect)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateOrAlterFunction result = new AstCreateOrAlterFunction(arguments);
            return result;
        }
        
        /// <summary>
        /// create_or_alter_function : 
        ///    CREATE OR ALTER FUNCTION funcName=schema_func_proc_ref ( ) func_body_returns_select SEMI? 
        /// </summary>
        public static AstCreateOrAlterFunction CreateOrAlterFunction(AstSchemaFuncProcRef funcName, AstFuncBodyReturnsSelect funcBodyReturnsSelect)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateOrAlterFunction result = new AstCreateOrAlterFunction(arguments);
            return result;
        }
        
        /// <summary>
        /// create_or_alter_function : 
        ///    CREATE OR ALTER FUNCTION funcName=schema_func_proc_ref ( procedure_params ) func_body_returns_table SEMI? 
        /// </summary>
        public static AstCreateOrAlterFunction CreateOrAlterFunction(AstSchemaFuncProcRef funcName, AstProcedureParams procedureParams, AstFuncBodyReturnsTable funcBodyReturnsTable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateOrAlterFunction result = new AstCreateOrAlterFunction(arguments);
            return result;
        }
        
        /// <summary>
        /// create_or_alter_function : 
        ///    CREATE OR ALTER FUNCTION funcName=schema_func_proc_ref ( ) func_body_returns_table SEMI? 
        /// </summary>
        public static AstCreateOrAlterFunction CreateOrAlterFunction(AstSchemaFuncProcRef funcName, AstFuncBodyReturnsTable funcBodyReturnsTable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateOrAlterFunction result = new AstCreateOrAlterFunction(arguments);
            return result;
        }
        
        /// <summary>
        /// create_or_alter_function : 
        ///    CREATE OR ALTER FUNCTION funcName=schema_func_proc_ref ( procedure_params ) func_body_returns_scalar SEMI? 
        /// </summary>
        public static AstCreateOrAlterFunction CreateOrAlterFunction(AstSchemaFuncProcRef funcName, AstProcedureParams procedureParams, AstFuncBodyReturnsScalar funcBodyReturnsScalar)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateOrAlterFunction result = new AstCreateOrAlterFunction(arguments);
            return result;
        }
        
        /// <summary>
        /// create_or_alter_function : 
        ///    CREATE OR ALTER FUNCTION funcName=schema_func_proc_ref ( ) func_body_returns_scalar SEMI? 
        /// </summary>
        public static AstCreateOrAlterFunction CreateOrAlterFunction(AstSchemaFuncProcRef funcName, AstFuncBodyReturnsScalar funcBodyReturnsScalar)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateOrAlterFunction result = new AstCreateOrAlterFunction(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// procedure_option
    /// 	 : procedure_option_enum
    /// 	 | execute_clause
    /// </summary>
    public abstract partial class AstProcedureOption : AstRule
    {
        
        protected static string _rule = "procedure_option\r\n\t : procedure_option_enum\r\n\t | execute_clause";
        
        /// <summary>
        /// procedure_option : procedure_option_enum
        /// </summary>
        public partial class AstProcedureOption1 : AstProcedureOption
        {
            
            internal AstProcedureOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstProcedureOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstProcedureOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstProcedureOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitProcedureOption(this);
            }
        }
        /// <summary>
        /// procedure_option : execute_clause
        /// </summary>
        public partial class AstProcedureOption2 : AstProcedureOption
        {
            
            internal AstProcedureOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstProcedureOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstProcedureOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstProcedureOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitProcedureOption(this);
            }
        }
        

        
        internal AstProcedureOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstProcedureOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstProcedureOption(Position p) : 
                base(p)
        {
        }
        
        internal AstProcedureOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstProcedureOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstProcedureOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstProcedureOptionEnum), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstExecuteClause), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// procedure_option : 
        ///    procedure_option_enum 
        /// </summary>
        public static AstProcedureOption ProcedureOption(AstProcedureOptionEnum procedureOptionEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstProcedureOption.AstProcedureOption1 result = new AstProcedureOption.AstProcedureOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// procedure_option : 
        ///    execute_clause 
        /// </summary>
        public static AstProcedureOption ProcedureOption(AstExecuteClause executeClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstProcedureOption.AstProcedureOption2 result = new AstProcedureOption.AstProcedureOption2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// function_option
    /// 	 : function_option_enum
    /// 	 | execute_clause
    /// </summary>
    public abstract partial class AstFunctionOption : AstRule
    {
        
        protected static string _rule = "function_option\r\n\t : function_option_enum\r\n\t | execute_clause";
        
        /// <summary>
        /// function_option : function_option_enum
        /// </summary>
        public partial class AstFunctionOption1 : AstFunctionOption
        {
            
            internal AstFunctionOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstFunctionOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstFunctionOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstFunctionOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionOption(this);
            }
        }
        /// <summary>
        /// function_option : execute_clause
        /// </summary>
        public partial class AstFunctionOption2 : AstFunctionOption
        {
            
            internal AstFunctionOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstFunctionOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstFunctionOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstFunctionOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionOption(this);
            }
        }
        

        
        internal AstFunctionOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstFunctionOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFunctionOption(Position p) : 
                base(p)
        {
        }
        
        internal AstFunctionOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstFunctionOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstFunctionOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstFunctionOptionEnum), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstExecuteClause), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// function_option : 
        ///    function_option_enum 
        /// </summary>
        public static AstFunctionOption FunctionOption(AstFunctionOptionEnum functionOptionEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFunctionOption.AstFunctionOption1 result = new AstFunctionOption.AstFunctionOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// function_option : 
        ///    execute_clause 
        /// </summary>
        public static AstFunctionOption FunctionOption(AstExecuteClause executeClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFunctionOption.AstFunctionOption2 result = new AstFunctionOption.AstFunctionOption2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// statistics_with
    /// 	 : FULLSCAN
    /// 	 | SAMPLE  decimal  percent_row
    /// 	 | STATS_STREAM
    /// </summary>
    public abstract partial class AstStatisticsWith : AstRule
    {
        
        protected static string _rule = "statistics_with\r\n\t : FULLSCAN\r\n\t | SAMPLE  decimal  percent_row\r\n\t | STATS_STREAM" +
            "";
        
        /// <summary>
        /// statistics_with : FULLSCAN
        /// </summary>
        public partial class AstStatisticsWith1 : AstStatisticsWith
        {
            
            internal AstStatisticsWith1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstStatisticsWith1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstStatisticsWith1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstStatisticsWith1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStatisticsWith(this);
            }
        }
        /// <summary>
        /// statistics_with : SAMPLE  decimal  percent_row
        /// </summary>
        public partial class AstStatisticsWith2 : AstStatisticsWith
        {
            
            internal AstStatisticsWith2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstStatisticsWith2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstStatisticsWith2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstStatisticsWith2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStatisticsWith(this);
            }
        }
        /// <summary>
        /// statistics_with : STATS_STREAM
        /// </summary>
        public partial class AstStatisticsWith3 : AstStatisticsWith
        {
            
            internal AstStatisticsWith3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstStatisticsWith3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstStatisticsWith3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstStatisticsWith3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStatisticsWith(this);
            }
        }
        

        
        internal AstStatisticsWith(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstStatisticsWith(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstStatisticsWith(Position p) : 
                base(p)
        {
        }
        
        internal AstStatisticsWith(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstStatisticsWith Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstStatisticsWith.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstPercentRow), false, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 0))
            {
                return 1;
                return 3;
            }
            return 0;
        }
        
        /// <summary>
        /// statistics_with : 
        ///    SAMPLE decimal percent_row 
        /// </summary>
        public static AstStatisticsWith StatisticsWith(AstDecimal @decimal, AstPercentRow percentRow)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstStatisticsWith.AstStatisticsWith2 result = new AstStatisticsWith.AstStatisticsWith2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// update_statistics_option
    /// 	 : (FULLSCAN  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
    /// 	 | (SAMPLE  number = decimal  percent_row  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
    /// 	 | RESAMPLE  on_partitions?
    /// 	 | STATS_STREAM  EQUAL  stats_stream_ = expression
    /// 	 | ROWCOUNT  EQUAL  decimal
    /// 	 | PAGECOUNT  EQUAL  decimal
    /// 	 | ALL
    /// 	 | COLUMNS
    /// 	 | INDEX
    /// 	 | NORECOMPUTE
    /// 	 | INCREMENTAL  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  max_dregree_of_parallelism = decimal
    /// 	 | AUTO_DROP  EQUAL  on_off
    /// </summary>
    public abstract partial class AstUpdateStatisticsOption : AstRule
    {
        
        protected static string _rule = @"update_statistics_option
	 : (FULLSCAN  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
	 | (SAMPLE  number = decimal  percent_row  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
	 | RESAMPLE  on_partitions?
	 | STATS_STREAM  EQUAL  stats_stream_ = expression
	 | ROWCOUNT  EQUAL  decimal
	 | PAGECOUNT  EQUAL  decimal
	 | ALL
	 | COLUMNS
	 | INDEX
	 | NORECOMPUTE
	 | INCREMENTAL  EQUAL  on_off
	 | MAXDOP  EQUAL  max_dregree_of_parallelism = decimal
	 | AUTO_DROP  EQUAL  on_off";
        
        /// <summary>
        /// update_statistics_option : (FULLSCAN  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
        /// </summary>
        public partial class AstUpdateStatisticsOption1 : AstUpdateStatisticsOption
        {
            
            internal AstUpdateStatisticsOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateStatisticsOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateStatisticsOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateStatisticsOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : (SAMPLE  number = decimal  percent_row  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
        /// </summary>
        public partial class AstUpdateStatisticsOption2 : AstUpdateStatisticsOption
        {
            
            internal AstUpdateStatisticsOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateStatisticsOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateStatisticsOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateStatisticsOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : RESAMPLE  on_partitions?
        /// </summary>
        public partial class AstUpdateStatisticsOption3 : AstUpdateStatisticsOption
        {
            
            internal AstUpdateStatisticsOption3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateStatisticsOption3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateStatisticsOption3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateStatisticsOption3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : STATS_STREAM  EQUAL  stats_stream_ = expression
        /// </summary>
        public partial class AstUpdateStatisticsOption4 : AstUpdateStatisticsOption
        {
            
            internal AstUpdateStatisticsOption4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateStatisticsOption4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateStatisticsOption4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateStatisticsOption4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : ROWCOUNT  EQUAL  decimal
        /// </summary>
        public partial class AstUpdateStatisticsOption5 : AstUpdateStatisticsOption
        {
            
            internal AstUpdateStatisticsOption5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateStatisticsOption5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateStatisticsOption5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateStatisticsOption5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : PAGECOUNT  EQUAL  decimal
        /// </summary>
        public partial class AstUpdateStatisticsOption6 : AstUpdateStatisticsOption
        {
            
            internal AstUpdateStatisticsOption6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateStatisticsOption6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateStatisticsOption6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateStatisticsOption6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : ALL
        /// </summary>
        public partial class AstUpdateStatisticsOption7 : AstUpdateStatisticsOption
        {
            
            internal AstUpdateStatisticsOption7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateStatisticsOption7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateStatisticsOption7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateStatisticsOption7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : COLUMNS
        /// </summary>
        public partial class AstUpdateStatisticsOption8 : AstUpdateStatisticsOption
        {
            
            internal AstUpdateStatisticsOption8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateStatisticsOption8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateStatisticsOption8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateStatisticsOption8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : INDEX
        /// </summary>
        public partial class AstUpdateStatisticsOption9 : AstUpdateStatisticsOption
        {
            
            internal AstUpdateStatisticsOption9(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateStatisticsOption9(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateStatisticsOption9(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateStatisticsOption9(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : NORECOMPUTE
        /// </summary>
        public partial class AstUpdateStatisticsOption10 : AstUpdateStatisticsOption
        {
            
            internal AstUpdateStatisticsOption10(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateStatisticsOption10(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateStatisticsOption10(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateStatisticsOption10(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : INCREMENTAL  EQUAL  on_off
        /// </summary>
        public partial class AstUpdateStatisticsOption11 : AstUpdateStatisticsOption
        {
            
            internal AstUpdateStatisticsOption11(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateStatisticsOption11(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateStatisticsOption11(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateStatisticsOption11(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : MAXDOP  EQUAL  max_dregree_of_parallelism = decimal
        /// </summary>
        public partial class AstUpdateStatisticsOption12 : AstUpdateStatisticsOption
        {
            
            internal AstUpdateStatisticsOption12(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateStatisticsOption12(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateStatisticsOption12(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateStatisticsOption12(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : AUTO_DROP  EQUAL  on_off
        /// </summary>
        public partial class AstUpdateStatisticsOption13 : AstUpdateStatisticsOption
        {
            
            internal AstUpdateStatisticsOption13(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateStatisticsOption13(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateStatisticsOption13(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateStatisticsOption13(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        

        
        internal AstUpdateStatisticsOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstUpdateStatisticsOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUpdateStatisticsOption(Position p) : 
                base(p)
        {
        }
        
        internal AstUpdateStatisticsOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstUpdateStatisticsOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstUpdateStatisticsOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstPercentRow), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOnOff), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnPartitions), true, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 11;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 12;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 13;
                }
            }
            if ((list.Count == 0))
            {
                return 7;
                return 8;
                return 9;
                return 10;
            }
            return 0;
        }
        
        /// <summary>
        /// update_statistics_option : 
        ///    FULLSCAN COMMA? PERSIST_SAMPLE_PERCENT EQUAL on_off 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateStatisticsOption.AstUpdateStatisticsOption1 result = new AstUpdateStatisticsOption.AstUpdateStatisticsOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// update_statistics_option : 
        ///    SAMPLE number=decimal percent_row COMMA? PERSIST_SAMPLE_PERCENT EQUAL on_off 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(AstDecimal number, AstPercentRow percentRow, AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateStatisticsOption.AstUpdateStatisticsOption2 result = new AstUpdateStatisticsOption.AstUpdateStatisticsOption2(arguments);
            return result;
        }
        
        /// <summary>
        /// update_statistics_option : 
        ///    RESAMPLE on_partitions? 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(AstOnPartitions onPartitions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateStatisticsOption.AstUpdateStatisticsOption3 result = new AstUpdateStatisticsOption.AstUpdateStatisticsOption3(arguments);
            return result;
        }
        
        /// <summary>
        /// update_statistics_option : 
        ///    STATS_STREAM EQUAL stats_stream_=expression 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(AstExpression statsStream)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateStatisticsOption.AstUpdateStatisticsOption4 result = new AstUpdateStatisticsOption.AstUpdateStatisticsOption4(arguments);
            return result;
        }
        
        /// <summary>
        /// update_statistics_option : 
        ///    ROWCOUNT EQUAL decimal 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateStatisticsOption.AstUpdateStatisticsOption5 result = new AstUpdateStatisticsOption.AstUpdateStatisticsOption5(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// table_indices
    /// 	 : INDEX  id_  UNIQUE?  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// 	 | INDEX  id_  CLUSTERED  COLUMNSTORE
    /// 	 | INDEX  id_  NONCLUSTERED?  COLUMNSTORE  LR_BRACKET  column_name_list  RR_BRACKET  create_table_index_options?  (ON  group_id)?
    /// </summary>
    public abstract partial class AstTableIndices : AstRule
    {
        
        protected static string _rule = @"table_indices
	 : INDEX  id_  UNIQUE?  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET
	 | INDEX  id_  CLUSTERED  COLUMNSTORE
	 | INDEX  id_  NONCLUSTERED?  COLUMNSTORE  LR_BRACKET  column_name_list  RR_BRACKET  create_table_index_options?  (ON  group_id)?";
        
        /// <summary>
        /// table_indices : INDEX  id_  UNIQUE?  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET
        /// </summary>
        public partial class AstTableIndices1 : AstTableIndices
        {
            
            internal AstTableIndices1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableIndices1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableIndices1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableIndices1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableIndices(this);
            }
        }
        /// <summary>
        /// table_indices : INDEX  id_  CLUSTERED  COLUMNSTORE
        /// </summary>
        public partial class AstTableIndices2 : AstTableIndices
        {
            
            internal AstTableIndices2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableIndices2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableIndices2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableIndices2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableIndices(this);
            }
        }
        /// <summary>
        /// table_indices : INDEX  id_  NONCLUSTERED?  COLUMNSTORE  LR_BRACKET  column_name_list  RR_BRACKET  create_table_index_options?  (ON  group_id)?
        /// </summary>
        public partial class AstTableIndices3 : AstTableIndices
        {
            
            internal AstTableIndices3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableIndices3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableIndices3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableIndices3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableIndices(this);
            }
        }
        

        
        internal AstTableIndices(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstTableIndices(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableIndices(Position p) : 
                base(p)
        {
        }
        
        internal AstTableIndices(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTableIndices Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTableIndices.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstColumnNameList), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstCreateTableIndexOptions), true, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstGroupId), false, false))
                            {
                                return 3;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstClustered), true, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstColumnNameListWithOrder), false, false))
                        {
                            return 1;
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// table_indices : 
        ///    INDEX id_ UNIQUE? clustered? ( column_name_list_with_order ) 
        /// </summary>
        public static AstTableIndices TableIndices(AstId id, AstClustered clustered, AstColumnNameListWithOrder columnNameListWithOrder)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableIndices.AstTableIndices1 result = new AstTableIndices.AstTableIndices1(arguments);
            return result;
        }
        
        /// <summary>
        /// table_indices : 
        ///    INDEX id_ CLUSTERED COLUMNSTORE 
        /// </summary>
        public static AstTableIndices TableIndices(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableIndices.AstTableIndices2 result = new AstTableIndices.AstTableIndices2(arguments);
            return result;
        }
        
        /// <summary>
        /// table_indices : 
        ///    INDEX id_ NONCLUSTERED? COLUMNSTORE ( column_name_list ) create_table_index_options? ON group_id 
        /// </summary>
        public static AstTableIndices TableIndices(AstId id, AstColumnNameList columnNameList, AstCreateTableIndexOptions createTableIndexOptions, AstGroupId groupId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableIndices.AstTableIndices3 result = new AstTableIndices.AstTableIndices3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// tbl_option
    /// 	 : WITH  LR_BRACKET  tableoptions  RR_BRACKET
    /// 	 | tableoptions
    /// </summary>
    public abstract partial class AstTblOption : AstRule
    {
        
        protected static string _rule = "tbl_option\r\n\t : WITH  LR_BRACKET  tableoptions  RR_BRACKET\r\n\t | tableoptions";
        
        /// <summary>
        /// tbl_option : WITH  LR_BRACKET  tableoptions  RR_BRACKET
        /// </summary>
        public partial class AstTblOption1 : AstTblOption
        {
            
            internal AstTblOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTblOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTblOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTblOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTblOption(this);
            }
        }
        /// <summary>
        /// tbl_option : tableoptions
        /// </summary>
        public partial class AstTblOption2 : AstTblOption
        {
            
            internal AstTblOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTblOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTblOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTblOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTblOption(this);
            }
        }
        

        
        internal AstTblOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstTblOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTblOption(Position p) : 
                base(p)
        {
        }
        
        internal AstTblOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTblOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTblOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstTableoptions), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstTableoptions), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// tbl_option : 
        ///    WITH ( tableoptions ) 
        /// </summary>
        public static AstTblOption TblOption(AstTableoptions tableoptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTblOption.AstTblOption1 result = new AstTblOption.AstTblOption1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// tableoption
    /// 	 : table_opt_varname  EQUAL  table_opt_var_value
    /// 	 | tableoption_cluster_mode
    /// 	 | FILLFACTOR  EQUAL  decimal
    /// 	 | distribution
    /// 	 | DATA_COMPRESSION  EQUAL  compression_mode  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// </summary>
    public abstract partial class AstTableoption : AstRule
    {
        
        protected static string _rule = @"tableoption
	 : table_opt_varname  EQUAL  table_opt_var_value
	 | tableoption_cluster_mode
	 | FILLFACTOR  EQUAL  decimal
	 | distribution
	 | DATA_COMPRESSION  EQUAL  compression_mode  on_partitions?
	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?";
        
        /// <summary>
        /// tableoption : table_opt_varname  EQUAL  table_opt_var_value
        /// </summary>
        public partial class AstTableoption1 : AstTableoption
        {
            
            internal AstTableoption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableoption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableoption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableoption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableoption(this);
            }
        }
        /// <summary>
        /// tableoption : tableoption_cluster_mode
        /// </summary>
        public partial class AstTableoption2 : AstTableoption
        {
            
            internal AstTableoption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableoption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableoption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableoption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableoption(this);
            }
        }
        /// <summary>
        /// tableoption : FILLFACTOR  EQUAL  decimal
        /// </summary>
        public partial class AstTableoption3 : AstTableoption
        {
            
            internal AstTableoption3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableoption3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableoption3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableoption3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableoption(this);
            }
        }
        /// <summary>
        /// tableoption : distribution
        /// </summary>
        public partial class AstTableoption4 : AstTableoption
        {
            
            internal AstTableoption4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableoption4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableoption4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableoption4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableoption(this);
            }
        }
        /// <summary>
        /// tableoption : DATA_COMPRESSION  EQUAL  compression_mode  on_partitions?
        /// </summary>
        public partial class AstTableoption5 : AstTableoption
        {
            
            internal AstTableoption5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableoption5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableoption5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableoption5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableoption(this);
            }
        }
        /// <summary>
        /// tableoption : XML_COMPRESSION  EQUAL  on_off  on_partitions?
        /// </summary>
        public partial class AstTableoption6 : AstTableoption
        {
            
            internal AstTableoption6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableoption6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableoption6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableoption6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableoption(this);
            }
        }
        

        
        internal AstTableoption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstTableoption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableoption(Position p) : 
                base(p)
        {
        }
        
        internal AstTableoption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTableoption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTableoption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstTableOptVarname), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstTableOptVarValue), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstCompressionMode), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnPartitions), true, false))
                    {
                        return 5;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnPartitions), true, false))
                    {
                        return 6;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstTableoptionClusterMode), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstDistribution), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// tableoption : 
        ///    table_opt_varname EQUAL table_opt_var_value 
        /// </summary>
        public static AstTableoption Tableoption(AstTableOptVarname tableOptVarname, AstTableOptVarValue tableOptVarValue)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableoption.AstTableoption1 result = new AstTableoption.AstTableoption1(arguments);
            return result;
        }
        
        /// <summary>
        /// tableoption : 
        ///    tableoption_cluster_mode 
        /// </summary>
        public static AstTableoption Tableoption(AstTableoptionClusterMode tableoptionClusterMode)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableoption.AstTableoption2 result = new AstTableoption.AstTableoption2(arguments);
            return result;
        }
        
        /// <summary>
        /// tableoption : 
        ///    FILLFACTOR EQUAL decimal 
        /// </summary>
        public static AstTableoption Tableoption(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableoption.AstTableoption3 result = new AstTableoption.AstTableoption3(arguments);
            return result;
        }
        
        /// <summary>
        /// tableoption : 
        ///    distribution 
        /// </summary>
        public static AstTableoption Tableoption(AstDistribution distribution)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableoption.AstTableoption4 result = new AstTableoption.AstTableoption4(arguments);
            return result;
        }
        
        /// <summary>
        /// tableoption : 
        ///    DATA_COMPRESSION EQUAL compression_mode on_partitions? 
        /// </summary>
        public static AstTableoption Tableoption(AstCompressionMode compressionMode, AstOnPartitions onPartitions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableoption.AstTableoption5 result = new AstTableoption.AstTableoption5(arguments);
            return result;
        }
        
        /// <summary>
        /// tableoption : 
        ///    XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public static AstTableoption Tableoption(AstOnOff onOff, AstOnPartitions onPartitions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableoption.AstTableoption6 result = new AstTableoption.AstTableoption6(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// table_opt_varname
    /// 	 : (simple_id | keyword)
    /// </summary>
    public partial class AstTableOptVarname : AstRule
    {
        
        protected static string _rule = "table_opt_varname\r\n\t : (simple_id | keyword)";
        
        internal AstTableOptVarname(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTableOptVarname(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTableOptVarname(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTableOptVarname(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableOptVarname(this);
        }
        
        /// <summary>
        /// table_opt_varname : 
        ///    simple_id 
        /// </summary>
        public static AstTableOptVarname TableOptVarname(AstSimpleId simpleId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableOptVarname result = new AstTableOptVarname(arguments);
            return result;
        }
        
        /// <summary>
        /// table_opt_varname : 
        ///    keyword 
        /// </summary>
        public static AstTableOptVarname TableOptVarname(AstKeyword keyword)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableOptVarname result = new AstTableOptVarname(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// table_opt_var_value
    /// 	 : (simple_id | keyword | on_off | decimal)
    /// </summary>
    public partial class AstTableOptVarValue : AstRule
    {
        
        protected static string _rule = "table_opt_var_value\r\n\t : (simple_id | keyword | on_off | decimal)";
        
        internal AstTableOptVarValue(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTableOptVarValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTableOptVarValue(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTableOptVarValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableOptVarValue(this);
        }
        
        /// <summary>
        /// table_opt_var_value : 
        ///    simple_id 
        /// </summary>
        public static AstTableOptVarValue TableOptVarValue(AstSimpleId simpleId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableOptVarValue result = new AstTableOptVarValue(arguments);
            return result;
        }
        
        /// <summary>
        /// table_opt_var_value : 
        ///    keyword 
        /// </summary>
        public static AstTableOptVarValue TableOptVarValue(AstKeyword keyword)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableOptVarValue result = new AstTableOptVarValue(arguments);
            return result;
        }
        
        /// <summary>
        /// table_opt_var_value : 
        ///    on_off 
        /// </summary>
        public static AstTableOptVarValue TableOptVarValue(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableOptVarValue result = new AstTableOptVarValue(arguments);
            return result;
        }
        
        /// <summary>
        /// table_opt_var_value : 
        ///    decimal 
        /// </summary>
        public static AstTableOptVarValue TableOptVarValue(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableOptVarValue result = new AstTableOptVarValue(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// distribution
    /// 	 : DISTRIBUTION  EQUAL  HASH  LR_BRACKET  id_  RR_BRACKET
    /// 	 | CLUSTERED  INDEX  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// </summary>
    public abstract partial class AstDistribution : AstRule
    {
        
        protected static string _rule = "distribution\r\n\t : DISTRIBUTION  EQUAL  HASH  LR_BRACKET  id_  RR_BRACKET\r\n\t | CLU" +
            "STERED  INDEX  LR_BRACKET  column_name_list_with_order  RR_BRACKET";
        
        /// <summary>
        /// distribution : DISTRIBUTION  EQUAL  HASH  LR_BRACKET  id_  RR_BRACKET
        /// </summary>
        public partial class AstDistribution1 : AstDistribution
        {
            
            internal AstDistribution1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDistribution1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDistribution1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDistribution1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDistribution(this);
            }
        }
        /// <summary>
        /// distribution : CLUSTERED  INDEX  LR_BRACKET  column_name_list_with_order  RR_BRACKET
        /// </summary>
        public partial class AstDistribution2 : AstDistribution
        {
            
            internal AstDistribution2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDistribution2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDistribution2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDistribution2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDistribution(this);
            }
        }
        

        
        internal AstDistribution(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstDistribution(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDistribution(Position p) : 
                base(p)
        {
        }
        
        internal AstDistribution(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDistribution Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDistribution.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstColumnNameListWithOrder), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// distribution : 
        ///    DISTRIBUTION EQUAL HASH ( id_ ) 
        /// </summary>
        public static AstDistribution Distribution(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDistribution.AstDistribution1 result = new AstDistribution.AstDistribution1(arguments);
            return result;
        }
        
        /// <summary>
        /// distribution : 
        ///    CLUSTERED INDEX ( column_name_list_with_order ) 
        /// </summary>
        public static AstDistribution Distribution(AstColumnNameListWithOrder columnNameListWithOrder)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDistribution.AstDistribution2 result = new AstDistribution.AstDistribution2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_table_constraint
    /// 	 : (CONSTRAINT  constraint_id)?  alter_table_constraint_foreign
    /// 	 | CHECK  LR_BRACKET  search_condition  RR_BRACKET
    /// </summary>
    public abstract partial class AstAlterTableConstraint : AstRule
    {
        
        protected static string _rule = "alter_table_constraint\r\n\t : (CONSTRAINT  constraint_id)?  alter_table_constraint_" +
            "foreign\r\n\t | CHECK  LR_BRACKET  search_condition  RR_BRACKET";
        
        /// <summary>
        /// alter_table_constraint : (CONSTRAINT  constraint_id)?  alter_table_constraint_foreign
        /// </summary>
        public partial class AstAlterTableConstraint1 : AstAlterTableConstraint
        {
            
            internal AstAlterTableConstraint1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterTableConstraint1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterTableConstraint1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterTableConstraint1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableConstraint(this);
            }
        }
        /// <summary>
        /// alter_table_constraint : CHECK  LR_BRACKET  search_condition  RR_BRACKET
        /// </summary>
        public partial class AstAlterTableConstraint2 : AstAlterTableConstraint
        {
            
            internal AstAlterTableConstraint2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterTableConstraint2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterTableConstraint2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterTableConstraint2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableConstraint(this);
            }
        }
        

        
        internal AstAlterTableConstraint(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAlterTableConstraint(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterTableConstraint(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterTableConstraint(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterTableConstraint Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterTableConstraint.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstConstraintId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAlterTableConstraintForeign), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSearchCondition), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_table_constraint : 
        ///    CONSTRAINT constraint_id alter_table_constraint_foreign 
        /// </summary>
        public static AstAlterTableConstraint AlterTableConstraint(AstConstraintId constraintId, AstAlterTableConstraintForeign alterTableConstraintForeign)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterTableConstraint.AstAlterTableConstraint1 result = new AstAlterTableConstraint.AstAlterTableConstraint1(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_table_constraint : 
        ///    CHECK ( search_condition ) 
        /// </summary>
        public static AstAlterTableConstraint AlterTableConstraint(AstSearchCondition searchCondition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterTableConstraint.AstAlterTableConstraint2 result = new AstAlterTableConstraint.AstAlterTableConstraint2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// constraint_delete_or_update
    /// 	 : on_delete
    /// 	 | on_update
    /// </summary>
    public abstract partial class AstConstraintDeleteOrUpdate : AstRule
    {
        
        protected static string _rule = "constraint_delete_or_update\r\n\t : on_delete\r\n\t | on_update";
        
        /// <summary>
        /// constraint_delete_or_update : on_delete
        /// </summary>
        public partial class AstConstraintDeleteOrUpdate1 : AstConstraintDeleteOrUpdate
        {
            
            internal AstConstraintDeleteOrUpdate1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConstraintDeleteOrUpdate1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConstraintDeleteOrUpdate1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConstraintDeleteOrUpdate1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstraintDeleteOrUpdate(this);
            }
        }
        /// <summary>
        /// constraint_delete_or_update : on_update
        /// </summary>
        public partial class AstConstraintDeleteOrUpdate2 : AstConstraintDeleteOrUpdate
        {
            
            internal AstConstraintDeleteOrUpdate2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConstraintDeleteOrUpdate2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConstraintDeleteOrUpdate2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConstraintDeleteOrUpdate2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstraintDeleteOrUpdate(this);
            }
        }
        

        
        internal AstConstraintDeleteOrUpdate(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstConstraintDeleteOrUpdate(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstConstraintDeleteOrUpdate(Position p) : 
                base(p)
        {
        }
        
        internal AstConstraintDeleteOrUpdate(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstConstraintDeleteOrUpdate Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstConstraintDeleteOrUpdate.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnDelete), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnUpdate), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// constraint_delete_or_update : 
        ///    on_delete 
        /// </summary>
        public static AstConstraintDeleteOrUpdate ConstraintDeleteOrUpdate(AstOnDelete onDelete)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstraintDeleteOrUpdate.AstConstraintDeleteOrUpdate1 result = new AstConstraintDeleteOrUpdate.AstConstraintDeleteOrUpdate1(arguments);
            return result;
        }
        
        /// <summary>
        /// constraint_delete_or_update : 
        ///    on_update 
        /// </summary>
        public static AstConstraintDeleteOrUpdate ConstraintDeleteOrUpdate(AstOnUpdate onUpdate)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstraintDeleteOrUpdate.AstConstraintDeleteOrUpdate2 result = new AstConstraintDeleteOrUpdate.AstConstraintDeleteOrUpdate2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// switch_partition
    /// 	 : (PARTITION?  source_partition_number_expression = expression)?  TO  target_table = full_table_ref  (PARTITION  target_partition_number_expression = expression)?  (WITH  low_priority_lock_wait)?
    /// </summary>
    public partial class AstSwitchPartition : AstRule
    {
        
        protected static string _rule = "switch_partition\r\n\t : (PARTITION?  source_partition_number_expression = expressio" +
            "n)?  TO  target_table = full_table_ref  (PARTITION  target_partition_number_expr" +
            "ession = expression)?  (WITH  low_priority_lock_wait)?";
        
        internal AstSwitchPartition(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSwitchPartition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSwitchPartition(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSwitchPartition(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSwitchPartition(this);
        }
        
        /// <summary>
        /// switch_partition : 
        ///    PARTITION? source_partition_number_expression=expression TO target_table=full_table_ref PARTITION target_partition_number_expression=expression WITH low_priority_lock_wait 
        /// </summary>
        public static AstSwitchPartition SwitchPartition(AstExpression sourcePartitionNumberExpression, AstFullTableRef targetTable, AstExpression targetPartitionNumberExpression, AstLowPriorityLockWait lowPriorityLockWait)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSwitchPartition result = new AstSwitchPartition(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// low_priority_lock_wait
    /// 	 : WAIT_AT_LOW_PRIORITY  LR_BRACKET  MAX_DURATION  EQUAL  max_duration = time  MINUTES?  COMMA  ABORT_AFTER_WAIT  EQUAL  abort_after_wait = abord_after_mode  RR_BRACKET
    /// </summary>
    public partial class AstLowPriorityLockWait : AstRule
    {
        
        protected static string _rule = "low_priority_lock_wait\r\n\t : WAIT_AT_LOW_PRIORITY  LR_BRACKET  MAX_DURATION  EQUAL" +
            "  max_duration = time  MINUTES?  COMMA  ABORT_AFTER_WAIT  EQUAL  abort_after_wai" +
            "t = abord_after_mode  RR_BRACKET";
        
        internal AstLowPriorityLockWait(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstLowPriorityLockWait(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstLowPriorityLockWait(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstLowPriorityLockWait(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLowPriorityLockWait(this);
        }
        
        /// <summary>
        /// low_priority_lock_wait : 
        ///    WAIT_AT_LOW_PRIORITY ( MAX_DURATION EQUAL max_duration=time MINUTES? , ABORT_AFTER_WAIT EQUAL abort_after_wait=abord_after_mode ) 
        /// </summary>
        public static AstLowPriorityLockWait LowPriorityLockWait(AstTime maxDuration, AstAbordAfterMode abortAfterWait)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstLowPriorityLockWait result = new AstLowPriorityLockWait(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_database_new_infos
    /// 	 : MODIFY  NAME  EQUAL  database_id
    /// 	 | COLLATE  collation_id
    /// 	 | SET  database_optionspec  (WITH  termination)?
    /// 	 | add_or_modify_files
    /// 	 | add_or_modify_filegroups
    /// </summary>
    public abstract partial class AstAlterDatabaseNewInfos : AstRule
    {
        
        protected static string _rule = "alter_database_new_infos\r\n\t : MODIFY  NAME  EQUAL  database_id\r\n\t | COLLATE  coll" +
            "ation_id\r\n\t | SET  database_optionspec  (WITH  termination)?\r\n\t | add_or_modify_" +
            "files\r\n\t | add_or_modify_filegroups";
        
        /// <summary>
        /// alter_database_new_infos : MODIFY  NAME  EQUAL  database_id
        /// </summary>
        public partial class AstAlterDatabaseNewInfos1 : AstAlterDatabaseNewInfos
        {
            
            internal AstAlterDatabaseNewInfos1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterDatabaseNewInfos1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterDatabaseNewInfos1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterDatabaseNewInfos1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterDatabaseNewInfos(this);
            }
        }
        /// <summary>
        /// alter_database_new_infos : COLLATE  collation_id
        /// </summary>
        public partial class AstAlterDatabaseNewInfos2 : AstAlterDatabaseNewInfos
        {
            
            internal AstAlterDatabaseNewInfos2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterDatabaseNewInfos2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterDatabaseNewInfos2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterDatabaseNewInfos2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterDatabaseNewInfos(this);
            }
        }
        /// <summary>
        /// alter_database_new_infos : SET  database_optionspec  (WITH  termination)?
        /// </summary>
        public partial class AstAlterDatabaseNewInfos3 : AstAlterDatabaseNewInfos
        {
            
            internal AstAlterDatabaseNewInfos3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterDatabaseNewInfos3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterDatabaseNewInfos3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterDatabaseNewInfos3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterDatabaseNewInfos(this);
            }
        }
        /// <summary>
        /// alter_database_new_infos : add_or_modify_files
        /// </summary>
        public partial class AstAlterDatabaseNewInfos4 : AstAlterDatabaseNewInfos
        {
            
            internal AstAlterDatabaseNewInfos4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterDatabaseNewInfos4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterDatabaseNewInfos4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterDatabaseNewInfos4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterDatabaseNewInfos(this);
            }
        }
        /// <summary>
        /// alter_database_new_infos : add_or_modify_filegroups
        /// </summary>
        public partial class AstAlterDatabaseNewInfos5 : AstAlterDatabaseNewInfos
        {
            
            internal AstAlterDatabaseNewInfos5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterDatabaseNewInfos5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterDatabaseNewInfos5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterDatabaseNewInfos5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterDatabaseNewInfos(this);
            }
        }
        

        
        internal AstAlterDatabaseNewInfos(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAlterDatabaseNewInfos(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterDatabaseNewInfos(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterDatabaseNewInfos(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterDatabaseNewInfos Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterDatabaseNewInfos.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstDatabaseOptionspec), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstTermination), false, false))
                    {
                        return 3;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDatabaseId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstCollationId), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstAddOrModifyFiles), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstAddOrModifyFilegroups), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_database_new_infos : 
        ///    MODIFY NAME EQUAL database_id 
        /// </summary>
        public static AstAlterDatabaseNewInfos AlterDatabaseNewInfos(AstDatabaseId databaseId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos1 result = new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos1(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_database_new_infos : 
        ///    COLLATE collation_id 
        /// </summary>
        public static AstAlterDatabaseNewInfos AlterDatabaseNewInfos(AstCollationId collationId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos2 result = new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos2(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_database_new_infos : 
        ///    SET database_optionspec WITH termination 
        /// </summary>
        public static AstAlterDatabaseNewInfos AlterDatabaseNewInfos(AstDatabaseOptionspec databaseOptionspec, AstTermination termination)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos3 result = new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos3(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_database_new_infos : 
        ///    add_or_modify_files 
        /// </summary>
        public static AstAlterDatabaseNewInfos AlterDatabaseNewInfos(AstAddOrModifyFiles addOrModifyFiles)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos4 result = new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos4(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_database_new_infos : 
        ///    add_or_modify_filegroups 
        /// </summary>
        public static AstAlterDatabaseNewInfos AlterDatabaseNewInfos(AstAddOrModifyFilegroups addOrModifyFilegroups)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos5 result = new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos5(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// add_or_modify_files
    /// 	 : ADD  FILE  filespecs  (TO  FILEGROUP  file_group_id)?
    /// 	 | ADD  LOG  FILE  filespecs
    /// 	 | REMOVE  FILE  file_group_id
    /// 	 | MODIFY  FILE  filespec
    /// </summary>
    public abstract partial class AstAddOrModifyFiles : AstRule
    {
        
        protected static string _rule = "add_or_modify_files\r\n\t : ADD  FILE  filespecs  (TO  FILEGROUP  file_group_id)?\r\n\t" +
            " | ADD  LOG  FILE  filespecs\r\n\t | REMOVE  FILE  file_group_id\r\n\t | MODIFY  FILE " +
            " filespec";
        
        /// <summary>
        /// add_or_modify_files : ADD  FILE  filespecs  (TO  FILEGROUP  file_group_id)?
        /// </summary>
        public partial class AstAddOrModifyFiles1 : AstAddOrModifyFiles
        {
            
            internal AstAddOrModifyFiles1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAddOrModifyFiles1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAddOrModifyFiles1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAddOrModifyFiles1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFiles(this);
            }
        }
        /// <summary>
        /// add_or_modify_files : ADD  LOG  FILE  filespecs
        /// </summary>
        public partial class AstAddOrModifyFiles2 : AstAddOrModifyFiles
        {
            
            internal AstAddOrModifyFiles2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAddOrModifyFiles2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAddOrModifyFiles2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAddOrModifyFiles2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFiles(this);
            }
        }
        /// <summary>
        /// add_or_modify_files : REMOVE  FILE  file_group_id
        /// </summary>
        public partial class AstAddOrModifyFiles3 : AstAddOrModifyFiles
        {
            
            internal AstAddOrModifyFiles3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAddOrModifyFiles3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAddOrModifyFiles3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAddOrModifyFiles3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFiles(this);
            }
        }
        /// <summary>
        /// add_or_modify_files : MODIFY  FILE  filespec
        /// </summary>
        public partial class AstAddOrModifyFiles4 : AstAddOrModifyFiles
        {
            
            internal AstAddOrModifyFiles4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAddOrModifyFiles4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAddOrModifyFiles4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAddOrModifyFiles4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFiles(this);
            }
        }
        

        
        internal AstAddOrModifyFiles(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAddOrModifyFiles(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAddOrModifyFiles(Position p) : 
                base(p)
        {
        }
        
        internal AstAddOrModifyFiles(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAddOrModifyFiles Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAddOrModifyFiles.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstFilespecs), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFileGroupId), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstFilespecs), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstFileGroupId), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstFilespec), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// add_or_modify_files : 
        ///    ADD FILE filespecs TO FILEGROUP file_group_id 
        /// </summary>
        public static AstAddOrModifyFiles AddOrModifyFiles(AstFilespecs filespecs, AstFileGroupId fileGroupId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAddOrModifyFiles.AstAddOrModifyFiles1 result = new AstAddOrModifyFiles.AstAddOrModifyFiles1(arguments);
            return result;
        }
        
        /// <summary>
        /// add_or_modify_files : 
        ///    ADD LOG FILE filespecs 
        /// </summary>
        public static AstAddOrModifyFiles AddOrModifyFiles(AstFilespecs filespecs)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAddOrModifyFiles.AstAddOrModifyFiles2 result = new AstAddOrModifyFiles.AstAddOrModifyFiles2(arguments);
            return result;
        }
        
        /// <summary>
        /// add_or_modify_files : 
        ///    REMOVE FILE file_group_id 
        /// </summary>
        public static AstAddOrModifyFiles AddOrModifyFiles(AstFileGroupId fileGroupId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAddOrModifyFiles.AstAddOrModifyFiles3 result = new AstAddOrModifyFiles.AstAddOrModifyFiles3(arguments);
            return result;
        }
        
        /// <summary>
        /// add_or_modify_files : 
        ///    MODIFY FILE filespec 
        /// </summary>
        public static AstAddOrModifyFiles AddOrModifyFiles(AstFilespec filespec)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAddOrModifyFiles.AstAddOrModifyFiles4 result = new AstAddOrModifyFiles.AstAddOrModifyFiles4(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// add_or_modify_filegroups
    /// 	 : ADD  FILEGROUP  file_group_id  filegroup_predicate?
    /// 	 | REMOVE  FILEGROUP  file_group_id
    /// 	 | MODIFY  FILEGROUP  file_group_id  (filegroup_updatability_option | DEFAULT | NAME  EQUAL  new_name = file_group_id | AUTOGROW_SINGLE_FILE | AUTOGROW_ALL_FILES)
    /// </summary>
    public abstract partial class AstAddOrModifyFilegroups : AstRule
    {
        
        protected static string _rule = @"add_or_modify_filegroups
	 : ADD  FILEGROUP  file_group_id  filegroup_predicate?
	 | REMOVE  FILEGROUP  file_group_id
	 | MODIFY  FILEGROUP  file_group_id  (filegroup_updatability_option | DEFAULT | NAME  EQUAL  new_name = file_group_id | AUTOGROW_SINGLE_FILE | AUTOGROW_ALL_FILES)";
        
        /// <summary>
        /// add_or_modify_filegroups : ADD  FILEGROUP  file_group_id  filegroup_predicate?
        /// </summary>
        public partial class AstAddOrModifyFilegroups1 : AstAddOrModifyFilegroups
        {
            
            internal AstAddOrModifyFilegroups1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAddOrModifyFilegroups1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAddOrModifyFilegroups1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAddOrModifyFilegroups1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFilegroups(this);
            }
        }
        /// <summary>
        /// add_or_modify_filegroups : REMOVE  FILEGROUP  file_group_id
        /// </summary>
        public partial class AstAddOrModifyFilegroups2 : AstAddOrModifyFilegroups
        {
            
            internal AstAddOrModifyFilegroups2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAddOrModifyFilegroups2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAddOrModifyFilegroups2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAddOrModifyFilegroups2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFilegroups(this);
            }
        }
        /// <summary>
        /// add_or_modify_filegroups : MODIFY  FILEGROUP  file_group_id  (filegroup_updatability_option | DEFAULT | NAME  EQUAL  new_name = file_group_id | AUTOGROW_SINGLE_FILE | AUTOGROW_ALL_FILES)
        /// </summary>
        public partial class AstAddOrModifyFilegroups3 : AstAddOrModifyFilegroups
        {
            
            internal AstAddOrModifyFilegroups3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAddOrModifyFilegroups3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAddOrModifyFilegroups3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAddOrModifyFilegroups3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFilegroups(this);
            }
        }
        

        
        internal AstAddOrModifyFilegroups(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAddOrModifyFilegroups(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAddOrModifyFilegroups(Position p) : 
                base(p)
        {
        }
        
        internal AstAddOrModifyFilegroups(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAddOrModifyFilegroups Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAddOrModifyFilegroups.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstFileGroupId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFilegroupUpdatabilityOption), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstFileGroupId), false, false))
                        {
                            return 3;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstFileGroupId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFilegroupPredicate), true, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstFileGroupId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// add_or_modify_filegroups : 
        ///    ADD FILEGROUP file_group_id filegroup_predicate? 
        /// </summary>
        public static AstAddOrModifyFilegroups AddOrModifyFilegroups(AstFileGroupId fileGroupId, AstFilegroupPredicate filegroupPredicate)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAddOrModifyFilegroups.AstAddOrModifyFilegroups1 result = new AstAddOrModifyFilegroups.AstAddOrModifyFilegroups1(arguments);
            return result;
        }
        
        /// <summary>
        /// add_or_modify_filegroups : 
        ///    REMOVE FILEGROUP file_group_id 
        /// </summary>
        public static AstAddOrModifyFilegroups AddOrModifyFilegroups(AstFileGroupId fileGroupId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAddOrModifyFilegroups.AstAddOrModifyFilegroups2 result = new AstAddOrModifyFilegroups.AstAddOrModifyFilegroups2(arguments);
            return result;
        }
        
        /// <summary>
        /// add_or_modify_filegroups : 
        ///    MODIFY FILEGROUP file_group_id filegroup_updatability_option 
        /// </summary>
        public static AstAddOrModifyFilegroups AddOrModifyFilegroups(AstFileGroupId fileGroupId, AstFilegroupUpdatabilityOption filegroupUpdatabilityOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAddOrModifyFilegroups.AstAddOrModifyFilegroups3 result = new AstAddOrModifyFilegroups.AstAddOrModifyFilegroups3(arguments);
            return result;
        }
        
        /// <summary>
        /// add_or_modify_filegroups : 
        ///    MODIFY FILEGROUP file_group_id NAME EQUAL new_name=file_group_id 
        /// </summary>
        public static AstAddOrModifyFilegroups AddOrModifyFilegroups(AstFileGroupId fileGroupId, AstFileGroupId newName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAddOrModifyFilegroups.AstAddOrModifyFilegroups3 result = new AstAddOrModifyFilegroups.AstAddOrModifyFilegroups3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// database_optionspec
    /// 	 : auto_option
    /// 	 | change_tracking
    /// 	 | containment_option
    /// 	 | cursor_option
    /// 	 | database_mirroring_option
    /// 	 | date_correlation_optimization_option
    /// 	 | db_encryption_option
    /// 	 | db_state_option
    /// 	 | db_update_option
    /// 	 | db_user_access_option
    /// 	 | delayed_durability_option
    /// 	 | external_access_option
    /// 	 | FILESTREAM  database_filestream_option
    /// 	 | hadr_options
    /// 	 | mixed_page_allocation_option
    /// 	 | parameterization_option
    /// 	 | recovery_option
    /// 	 | service_broker_option
    /// 	 | snapshot_option
    /// 	 | sql_option
    /// 	 | target_recovery_time_option
    /// 	 | termination
    /// </summary>
    public abstract partial class AstDatabaseOptionspec : AstRule
    {
        
        protected static string _rule = @"database_optionspec
	 : auto_option
	 | change_tracking
	 | containment_option
	 | cursor_option
	 | database_mirroring_option
	 | date_correlation_optimization_option
	 | db_encryption_option
	 | db_state_option
	 | db_update_option
	 | db_user_access_option
	 | delayed_durability_option
	 | external_access_option
	 | FILESTREAM  database_filestream_option
	 | hadr_options
	 | mixed_page_allocation_option
	 | parameterization_option
	 | recovery_option
	 | service_broker_option
	 | snapshot_option
	 | sql_option
	 | target_recovery_time_option
	 | termination";
        
        /// <summary>
        /// database_optionspec : auto_option
        /// </summary>
        public partial class AstDatabaseOptionspec1 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : change_tracking
        /// </summary>
        public partial class AstDatabaseOptionspec2 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : containment_option
        /// </summary>
        public partial class AstDatabaseOptionspec3 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : cursor_option
        /// </summary>
        public partial class AstDatabaseOptionspec4 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : database_mirroring_option
        /// </summary>
        public partial class AstDatabaseOptionspec5 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : date_correlation_optimization_option
        /// </summary>
        public partial class AstDatabaseOptionspec6 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : db_encryption_option
        /// </summary>
        public partial class AstDatabaseOptionspec7 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : db_state_option
        /// </summary>
        public partial class AstDatabaseOptionspec8 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : db_update_option
        /// </summary>
        public partial class AstDatabaseOptionspec9 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec9(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec9(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec9(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec9(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : db_user_access_option
        /// </summary>
        public partial class AstDatabaseOptionspec10 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec10(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec10(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec10(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec10(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : delayed_durability_option
        /// </summary>
        public partial class AstDatabaseOptionspec11 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec11(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec11(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec11(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec11(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : external_access_option
        /// </summary>
        public partial class AstDatabaseOptionspec12 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec12(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec12(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec12(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec12(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : FILESTREAM  database_filestream_option
        /// </summary>
        public partial class AstDatabaseOptionspec13 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec13(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec13(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec13(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec13(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : hadr_options
        /// </summary>
        public partial class AstDatabaseOptionspec14 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec14(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec14(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec14(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec14(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : mixed_page_allocation_option
        /// </summary>
        public partial class AstDatabaseOptionspec15 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec15(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec15(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec15(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec15(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : parameterization_option
        /// </summary>
        public partial class AstDatabaseOptionspec16 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec16(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec16(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec16(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec16(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : recovery_option
        /// </summary>
        public partial class AstDatabaseOptionspec17 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec17(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec17(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec17(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec17(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : service_broker_option
        /// </summary>
        public partial class AstDatabaseOptionspec18 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec18(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec18(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec18(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec18(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : snapshot_option
        /// </summary>
        public partial class AstDatabaseOptionspec19 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec19(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec19(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec19(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec19(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : sql_option
        /// </summary>
        public partial class AstDatabaseOptionspec20 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec20(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec20(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec20(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec20(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : target_recovery_time_option
        /// </summary>
        public partial class AstDatabaseOptionspec21 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec21(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec21(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec21(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec21(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : termination
        /// </summary>
        public partial class AstDatabaseOptionspec22 : AstDatabaseOptionspec
        {
            
            internal AstDatabaseOptionspec22(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseOptionspec22(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseOptionspec22(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseOptionspec22(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        

        
        internal AstDatabaseOptionspec(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstDatabaseOptionspec(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDatabaseOptionspec(Position p) : 
                base(p)
        {
        }
        
        internal AstDatabaseOptionspec(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDatabaseOptionspec Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDatabaseOptionspec.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAutoOption), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstChangeTracking), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstContainmentOption), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstCursorOption), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstDatabaseMirroringOption), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstDateCorrelationOptimizationOption), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstDbEncryptionOption), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstDbStateOption), false, false))
                {
                    return 8;
                }
                if (AstRoot.Eval(list[0], typeof(AstDbUpdateOption), false, false))
                {
                    return 9;
                }
                if (AstRoot.Eval(list[0], typeof(AstDbUserAccessOption), false, false))
                {
                    return 10;
                }
                if (AstRoot.Eval(list[0], typeof(AstDelayedDurabilityOption), false, false))
                {
                    return 11;
                }
                if (AstRoot.Eval(list[0], typeof(AstExternalAccessOption), false, false))
                {
                    return 12;
                }
                if (AstRoot.Eval(list[0], typeof(AstDatabaseFilestreamOption), false, false))
                {
                    return 13;
                }
                if (AstRoot.Eval(list[0], typeof(AstHadrOptions), false, false))
                {
                    return 14;
                }
                if (AstRoot.Eval(list[0], typeof(AstMixedPageAllocationOption), false, false))
                {
                    return 15;
                }
                if (AstRoot.Eval(list[0], typeof(AstParameterizationOption), false, false))
                {
                    return 16;
                }
                if (AstRoot.Eval(list[0], typeof(AstRecoveryOption), false, false))
                {
                    return 17;
                }
                if (AstRoot.Eval(list[0], typeof(AstServiceBrokerOption), false, false))
                {
                    return 18;
                }
                if (AstRoot.Eval(list[0], typeof(AstSnapshotOption), false, false))
                {
                    return 19;
                }
                if (AstRoot.Eval(list[0], typeof(AstSqlOption), false, false))
                {
                    return 20;
                }
                if (AstRoot.Eval(list[0], typeof(AstTargetRecoveryTimeOption), false, false))
                {
                    return 21;
                }
                if (AstRoot.Eval(list[0], typeof(AstTermination), false, false))
                {
                    return 22;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    auto_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstAutoOption autoOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec1 result = new AstDatabaseOptionspec.AstDatabaseOptionspec1(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    change_tracking 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstChangeTracking changeTracking)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec2 result = new AstDatabaseOptionspec.AstDatabaseOptionspec2(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    containment_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstContainmentOption containmentOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec3 result = new AstDatabaseOptionspec.AstDatabaseOptionspec3(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    cursor_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstCursorOption cursorOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec4 result = new AstDatabaseOptionspec.AstDatabaseOptionspec4(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    database_mirroring_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstDatabaseMirroringOption databaseMirroringOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec5 result = new AstDatabaseOptionspec.AstDatabaseOptionspec5(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    date_correlation_optimization_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstDateCorrelationOptimizationOption dateCorrelationOptimizationOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec6 result = new AstDatabaseOptionspec.AstDatabaseOptionspec6(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    db_encryption_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstDbEncryptionOption dbEncryptionOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec7 result = new AstDatabaseOptionspec.AstDatabaseOptionspec7(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    db_state_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstDbStateOption dbStateOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec8 result = new AstDatabaseOptionspec.AstDatabaseOptionspec8(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    db_update_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstDbUpdateOption dbUpdateOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec9 result = new AstDatabaseOptionspec.AstDatabaseOptionspec9(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    db_user_access_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstDbUserAccessOption dbUserAccessOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec10 result = new AstDatabaseOptionspec.AstDatabaseOptionspec10(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    delayed_durability_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstDelayedDurabilityOption delayedDurabilityOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec11 result = new AstDatabaseOptionspec.AstDatabaseOptionspec11(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    external_access_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstExternalAccessOption externalAccessOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec12 result = new AstDatabaseOptionspec.AstDatabaseOptionspec12(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    FILESTREAM database_filestream_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstDatabaseFilestreamOption databaseFilestreamOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec13 result = new AstDatabaseOptionspec.AstDatabaseOptionspec13(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    hadr_options 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstHadrOptions hadrOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec14 result = new AstDatabaseOptionspec.AstDatabaseOptionspec14(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    mixed_page_allocation_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstMixedPageAllocationOption mixedPageAllocationOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec15 result = new AstDatabaseOptionspec.AstDatabaseOptionspec15(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    parameterization_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstParameterizationOption parameterizationOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec16 result = new AstDatabaseOptionspec.AstDatabaseOptionspec16(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    recovery_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstRecoveryOption recoveryOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec17 result = new AstDatabaseOptionspec.AstDatabaseOptionspec17(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    service_broker_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstServiceBrokerOption serviceBrokerOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec18 result = new AstDatabaseOptionspec.AstDatabaseOptionspec18(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    snapshot_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstSnapshotOption snapshotOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec19 result = new AstDatabaseOptionspec.AstDatabaseOptionspec19(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    sql_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstSqlOption sqlOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec20 result = new AstDatabaseOptionspec.AstDatabaseOptionspec20(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    target_recovery_time_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstTargetRecoveryTimeOption targetRecoveryTimeOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec21 result = new AstDatabaseOptionspec.AstDatabaseOptionspec21(arguments);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    termination 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(AstTermination termination)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseOptionspec.AstDatabaseOptionspec22 result = new AstDatabaseOptionspec.AstDatabaseOptionspec22(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// auto_option
    /// 	 : AUTO_CLOSE  on_off
    /// 	 | AUTO_CREATE_STATISTICS  statistic_value
    /// 	 | AUTO_SHRINK  on_off
    /// 	 | AUTO_UPDATE_STATISTICS  on_off
    /// 	 | AUTO_UPDATE_STATISTICS_ASYNC  on_off
    /// </summary>
    public abstract partial class AstAutoOption : AstRule
    {
        
        protected static string _rule = "auto_option\r\n\t : AUTO_CLOSE  on_off\r\n\t | AUTO_CREATE_STATISTICS  statistic_value\r" +
            "\n\t | AUTO_SHRINK  on_off\r\n\t | AUTO_UPDATE_STATISTICS  on_off\r\n\t | AUTO_UPDATE_ST" +
            "ATISTICS_ASYNC  on_off";
        
        /// <summary>
        /// auto_option : AUTO_CLOSE  on_off
        /// </summary>
        public partial class AstAutoOption1 : AstAutoOption
        {
            
            internal AstAutoOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAutoOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAutoOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAutoOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAutoOption(this);
            }
        }
        /// <summary>
        /// auto_option : AUTO_CREATE_STATISTICS  statistic_value
        /// </summary>
        public partial class AstAutoOption2 : AstAutoOption
        {
            
            internal AstAutoOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAutoOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAutoOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAutoOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAutoOption(this);
            }
        }
        /// <summary>
        /// auto_option : AUTO_SHRINK  on_off
        /// </summary>
        public partial class AstAutoOption3 : AstAutoOption
        {
            
            internal AstAutoOption3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAutoOption3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAutoOption3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAutoOption3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAutoOption(this);
            }
        }
        /// <summary>
        /// auto_option : AUTO_UPDATE_STATISTICS  on_off
        /// </summary>
        public partial class AstAutoOption4 : AstAutoOption
        {
            
            internal AstAutoOption4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAutoOption4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAutoOption4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAutoOption4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAutoOption(this);
            }
        }
        /// <summary>
        /// auto_option : AUTO_UPDATE_STATISTICS_ASYNC  on_off
        /// </summary>
        public partial class AstAutoOption5 : AstAutoOption
        {
            
            internal AstAutoOption5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAutoOption5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAutoOption5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAutoOption5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAutoOption(this);
            }
        }
        

        
        internal AstAutoOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAutoOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAutoOption(Position p) : 
                base(p)
        {
        }
        
        internal AstAutoOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAutoOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAutoOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstStatisticValue), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// auto_option : 
        ///    AUTO_CLOSE on_off 
        /// </summary>
        public static AstAutoOption AutoOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAutoOption.AstAutoOption1 result = new AstAutoOption.AstAutoOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// auto_option : 
        ///    AUTO_CREATE_STATISTICS statistic_value 
        /// </summary>
        public static AstAutoOption AutoOption(AstStatisticValue statisticValue)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAutoOption.AstAutoOption2 result = new AstAutoOption.AstAutoOption2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// change_tracking
    /// 	 : CHANGE_TRACKING  EQUAL  (OFF | ON  change_tracking_option_list)
    /// </summary>
    public partial class AstChangeTracking : AstRule
    {
        
        protected static string _rule = "change_tracking\r\n\t : CHANGE_TRACKING  EQUAL  (OFF | ON  change_tracking_option_li" +
            "st)";
        
        internal AstChangeTracking(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstChangeTracking(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstChangeTracking(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstChangeTracking(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTracking(this);
        }
        
        /// <summary>
        /// change_tracking : 
        ///    CHANGE_TRACKING EQUAL ON change_tracking_option_list 
        /// </summary>
        public static AstChangeTracking ChangeTracking(AstChangeTrackingOptionList changeTrackingOptionList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstChangeTracking result = new AstChangeTracking(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// change_tracking_option_list
    /// 	 : AUTO_CLEANUP  EQUAL  on_off
    /// 	 | CHANGE_RETENTION  EQUAL  period
    /// </summary>
    public abstract partial class AstChangeTrackingOptionList : AstRule
    {
        
        protected static string _rule = "change_tracking_option_list\r\n\t : AUTO_CLEANUP  EQUAL  on_off\r\n\t | CHANGE_RETENTIO" +
            "N  EQUAL  period";
        
        /// <summary>
        /// change_tracking_option_list : AUTO_CLEANUP  EQUAL  on_off
        /// </summary>
        public partial class AstChangeTrackingOptionList1 : AstChangeTrackingOptionList
        {
            
            internal AstChangeTrackingOptionList1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstChangeTrackingOptionList1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstChangeTrackingOptionList1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstChangeTrackingOptionList1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangeTrackingOptionList(this);
            }
        }
        /// <summary>
        /// change_tracking_option_list : CHANGE_RETENTION  EQUAL  period
        /// </summary>
        public partial class AstChangeTrackingOptionList2 : AstChangeTrackingOptionList
        {
            
            internal AstChangeTrackingOptionList2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstChangeTrackingOptionList2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstChangeTrackingOptionList2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstChangeTrackingOptionList2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangeTrackingOptionList(this);
            }
        }
        

        
        internal AstChangeTrackingOptionList(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstChangeTrackingOptionList(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstChangeTrackingOptionList(Position p) : 
                base(p)
        {
        }
        
        internal AstChangeTrackingOptionList(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstChangeTrackingOptionList Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstChangeTrackingOptionList.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstPeriod), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// change_tracking_option_list : 
        ///    AUTO_CLEANUP EQUAL on_off 
        /// </summary>
        public static AstChangeTrackingOptionList ChangeTrackingOptionList(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstChangeTrackingOptionList.AstChangeTrackingOptionList1 result = new AstChangeTrackingOptionList.AstChangeTrackingOptionList1(arguments);
            return result;
        }
        
        /// <summary>
        /// change_tracking_option_list : 
        ///    CHANGE_RETENTION EQUAL period 
        /// </summary>
        public static AstChangeTrackingOptionList ChangeTrackingOptionList(AstPeriod period)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstChangeTrackingOptionList.AstChangeTrackingOptionList2 result = new AstChangeTrackingOptionList.AstChangeTrackingOptionList2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// cursor_option
    /// 	 : CURSOR_CLOSE_ON_COMMIT  on_off
    /// 	 | CURSOR_DEFAULT  local_global
    /// </summary>
    public abstract partial class AstCursorOption : AstRule
    {
        
        protected static string _rule = "cursor_option\r\n\t : CURSOR_CLOSE_ON_COMMIT  on_off\r\n\t | CURSOR_DEFAULT  local_glob" +
            "al";
        
        /// <summary>
        /// cursor_option : CURSOR_CLOSE_ON_COMMIT  on_off
        /// </summary>
        public partial class AstCursorOption1 : AstCursorOption
        {
            
            internal AstCursorOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCursorOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCursorOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCursorOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorOption(this);
            }
        }
        /// <summary>
        /// cursor_option : CURSOR_DEFAULT  local_global
        /// </summary>
        public partial class AstCursorOption2 : AstCursorOption
        {
            
            internal AstCursorOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCursorOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCursorOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCursorOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorOption(this);
            }
        }
        

        
        internal AstCursorOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCursorOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCursorOption(Position p) : 
                base(p)
        {
        }
        
        internal AstCursorOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCursorOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCursorOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalGlobal), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// cursor_option : 
        ///    CURSOR_CLOSE_ON_COMMIT on_off 
        /// </summary>
        public static AstCursorOption CursorOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCursorOption.AstCursorOption1 result = new AstCursorOption.AstCursorOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// cursor_option : 
        ///    CURSOR_DEFAULT local_global 
        /// </summary>
        public static AstCursorOption CursorOption(AstLocalGlobal localGlobal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCursorOption.AstCursorOption2 result = new AstCursorOption.AstCursorOption2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// listener_ip
    /// 	 : LISTENER_IP  EQUAL  (ALL | ipv4 | ipv6 | stringtext)
    /// </summary>
    public partial class AstListenerIp : AstRule
    {
        
        protected static string _rule = "listener_ip\r\n\t : LISTENER_IP  EQUAL  (ALL | ipv4 | ipv6 | stringtext)";
        
        internal AstListenerIp(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstListenerIp(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstListenerIp(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstListenerIp(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitListenerIp(this);
        }
        
        /// <summary>
        /// listener_ip : 
        ///    LISTENER_IP EQUAL ipv4 
        /// </summary>
        public static AstListenerIp ListenerIp(AstIpv4 ipv4)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstListenerIp result = new AstListenerIp(arguments);
            return result;
        }
        
        /// <summary>
        /// listener_ip : 
        ///    LISTENER_IP EQUAL ipv6 
        /// </summary>
        public static AstListenerIp ListenerIp(AstIpv6 ipv6)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstListenerIp result = new AstListenerIp(arguments);
            return result;
        }
        
        /// <summary>
        /// listener_ip : 
        ///    LISTENER_IP EQUAL stringtext 
        /// </summary>
        public static AstListenerIp ListenerIp(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstListenerIp result = new AstListenerIp(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// authentication_configuration
    /// 	 : AUTHENTICATION  EQUAL  (WINDOWS  authentication_mode?  (CERTIFICATE  certificate_id)? | CERTIFICATE  certificate_id  WINDOWS?  authentication_mode?)
    /// </summary>
    public partial class AstAuthenticationConfiguration : AstRule
    {
        
        protected static string _rule = "authentication_configuration\r\n\t : AUTHENTICATION  EQUAL  (WINDOWS  authentication" +
            "_mode?  (CERTIFICATE  certificate_id)? | CERTIFICATE  certificate_id  WINDOWS?  " +
            "authentication_mode?)";
        
        internal AstAuthenticationConfiguration(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstAuthenticationConfiguration(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAuthenticationConfiguration(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAuthenticationConfiguration(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuthenticationConfiguration(this);
        }
        
        /// <summary>
        /// authentication_configuration : 
        ///    AUTHENTICATION EQUAL WINDOWS authentication_mode? CERTIFICATE certificate_id 
        /// </summary>
        public static AstAuthenticationConfiguration AuthenticationConfiguration(AstAuthenticationMode authenticationMode, AstCertificateId certificateId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAuthenticationConfiguration result = new AstAuthenticationConfiguration(arguments);
            return result;
        }
        
        /// <summary>
        /// authentication_configuration : 
        ///    AUTHENTICATION EQUAL CERTIFICATE certificate_id WINDOWS? authentication_mode? 
        /// </summary>
        public static AstAuthenticationConfiguration AuthenticationConfiguration(AstCertificateId certificateId, AstAuthenticationMode authenticationMode)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAuthenticationConfiguration result = new AstAuthenticationConfiguration(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// mirroring_set_option
    /// 	 : mirroring_partner  partner_option
    /// 	 | mirroring_witness  witness_option
    /// </summary>
    public abstract partial class AstMirroringSetOption : AstRule
    {
        
        protected static string _rule = "mirroring_set_option\r\n\t : mirroring_partner  partner_option\r\n\t | mirroring_witnes" +
            "s  witness_option";
        
        /// <summary>
        /// mirroring_set_option : mirroring_partner  partner_option
        /// </summary>
        public partial class AstMirroringSetOption1 : AstMirroringSetOption
        {
            
            internal AstMirroringSetOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstMirroringSetOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstMirroringSetOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstMirroringSetOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMirroringSetOption(this);
            }
        }
        /// <summary>
        /// mirroring_set_option : mirroring_witness  witness_option
        /// </summary>
        public partial class AstMirroringSetOption2 : AstMirroringSetOption
        {
            
            internal AstMirroringSetOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstMirroringSetOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstMirroringSetOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstMirroringSetOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMirroringSetOption(this);
            }
        }
        

        
        internal AstMirroringSetOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstMirroringSetOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstMirroringSetOption(Position p) : 
                base(p)
        {
        }
        
        internal AstMirroringSetOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstMirroringSetOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstMirroringSetOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstMirroringPartner), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstPartnerOption), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstMirroringWitness), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstWitnessOption), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// mirroring_set_option : 
        ///    mirroring_partner partner_option 
        /// </summary>
        public static AstMirroringSetOption MirroringSetOption(AstMirroringPartner mirroringPartner, AstPartnerOption partnerOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstMirroringSetOption.AstMirroringSetOption1 result = new AstMirroringSetOption.AstMirroringSetOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// mirroring_set_option : 
        ///    mirroring_witness witness_option 
        /// </summary>
        public static AstMirroringSetOption MirroringSetOption(AstMirroringWitness mirroringWitness, AstWitnessOption witnessOption)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstMirroringSetOption.AstMirroringSetOption2 result = new AstMirroringSetOption.AstMirroringSetOption2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// partner_option
    /// 	 : witness_partner_equal  partner_server
    /// 	 | TIMEOUT  decimal
    /// 	 | partner_option_enum
    /// </summary>
    public abstract partial class AstPartnerOption : AstRule
    {
        
        protected static string _rule = "partner_option\r\n\t : witness_partner_equal  partner_server\r\n\t | TIMEOUT  decimal\r\n" +
            "\t | partner_option_enum";
        
        /// <summary>
        /// partner_option : witness_partner_equal  partner_server
        /// </summary>
        public partial class AstPartnerOption1 : AstPartnerOption
        {
            
            internal AstPartnerOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPartnerOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPartnerOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPartnerOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPartnerOption(this);
            }
        }
        /// <summary>
        /// partner_option : TIMEOUT  decimal
        /// </summary>
        public partial class AstPartnerOption2 : AstPartnerOption
        {
            
            internal AstPartnerOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPartnerOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPartnerOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPartnerOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPartnerOption(this);
            }
        }
        /// <summary>
        /// partner_option : partner_option_enum
        /// </summary>
        public partial class AstPartnerOption3 : AstPartnerOption
        {
            
            internal AstPartnerOption3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPartnerOption3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPartnerOption3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPartnerOption3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPartnerOption(this);
            }
        }
        

        
        internal AstPartnerOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstPartnerOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPartnerOption(Position p) : 
                base(p)
        {
        }
        
        internal AstPartnerOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstPartnerOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstPartnerOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstWitnessPartnerEqual), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstPartnerServer), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstPartnerOptionEnum), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// partner_option : 
        ///    witness_partner_equal partner_server 
        /// </summary>
        public static AstPartnerOption PartnerOption(AstWitnessPartnerEqual witnessPartnerEqual, AstPartnerServer partnerServer)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPartnerOption.AstPartnerOption1 result = new AstPartnerOption.AstPartnerOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// partner_option : 
        ///    TIMEOUT decimal 
        /// </summary>
        public static AstPartnerOption PartnerOption(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPartnerOption.AstPartnerOption2 result = new AstPartnerOption.AstPartnerOption2(arguments);
            return result;
        }
        
        /// <summary>
        /// partner_option : 
        ///    partner_option_enum 
        /// </summary>
        public static AstPartnerOption PartnerOption(AstPartnerOptionEnum partnerOptionEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPartnerOption.AstPartnerOption3 result = new AstPartnerOption.AstPartnerOption3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// witness_option
    /// 	 : witness_partner_equal  witness_server
    /// 	 | OFF
    /// </summary>
    public abstract partial class AstWitnessOption : AstRule
    {
        
        protected static string _rule = "witness_option\r\n\t : witness_partner_equal  witness_server\r\n\t | OFF";
        
        /// <summary>
        /// witness_option : witness_partner_equal  witness_server
        /// </summary>
        public partial class AstWitnessOption1 : AstWitnessOption
        {
            
            internal AstWitnessOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstWitnessOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstWitnessOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstWitnessOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWitnessOption(this);
            }
        }
        /// <summary>
        /// witness_option : OFF
        /// </summary>
        public partial class AstWitnessOption2 : AstWitnessOption
        {
            
            internal AstWitnessOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstWitnessOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstWitnessOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstWitnessOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWitnessOption(this);
            }
        }
        

        
        internal AstWitnessOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstWitnessOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWitnessOption(Position p) : 
                base(p)
        {
        }
        
        internal AstWitnessOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstWitnessOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstWitnessOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstWitnessPartnerEqual), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstWitnessServer), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 0))
            {
                return 2;
            }
            return 0;
        }
        
        /// <summary>
        /// witness_option : 
        ///    witness_partner_equal witness_server 
        /// </summary>
        public static AstWitnessOption WitnessOption(AstWitnessPartnerEqual witnessPartnerEqual, AstWitnessServer witnessServer)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstWitnessOption.AstWitnessOption1 result = new AstWitnessOption.AstWitnessOption1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// partner_server_tcp_prefix
    /// 	 : TCP  COLON  DOUBLE_FORWARD_SLASH
    /// </summary>
    public partial class AstPartnerServerTcpPrefix : AstRule
    {
        
        protected static string _rule = "partner_server_tcp_prefix\r\n\t : TCP  COLON  DOUBLE_FORWARD_SLASH";
        
        internal AstPartnerServerTcpPrefix(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstPartnerServerTcpPrefix(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstPartnerServerTcpPrefix(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstPartnerServerTcpPrefix(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartnerServerTcpPrefix(this);
        }
    }
    
    /// <summary>
    /// external_access_option
    /// 	 : DB_CHAINING  on_off
    /// 	 | TRUSTWORTHY  on_off
    /// 	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
    /// 	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
    /// 	 | NESTED_TRIGGERS  EQUAL  on_off
    /// 	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
    /// 	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal
    /// </summary>
    public abstract partial class AstExternalAccessOption : AstRule
    {
        
        protected static string _rule = @"external_access_option
	 : DB_CHAINING  on_off
	 | TRUSTWORTHY  on_off
	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
	 | NESTED_TRIGGERS  EQUAL  on_off
	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal";
        
        /// <summary>
        /// external_access_option : DB_CHAINING  on_off
        /// </summary>
        public partial class AstExternalAccessOption1 : AstExternalAccessOption
        {
            
            internal AstExternalAccessOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExternalAccessOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExternalAccessOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExternalAccessOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        /// <summary>
        /// external_access_option : TRUSTWORTHY  on_off
        /// </summary>
        public partial class AstExternalAccessOption2 : AstExternalAccessOption
        {
            
            internal AstExternalAccessOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExternalAccessOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExternalAccessOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExternalAccessOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        /// <summary>
        /// external_access_option : DEFAULT_LANGUAGE  EQUAL  id_or_string
        /// </summary>
        public partial class AstExternalAccessOption3 : AstExternalAccessOption
        {
            
            internal AstExternalAccessOption3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExternalAccessOption3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExternalAccessOption3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExternalAccessOption3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        /// <summary>
        /// external_access_option : DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
        /// </summary>
        public partial class AstExternalAccessOption4 : AstExternalAccessOption
        {
            
            internal AstExternalAccessOption4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExternalAccessOption4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExternalAccessOption4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExternalAccessOption4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        /// <summary>
        /// external_access_option : NESTED_TRIGGERS  EQUAL  on_off
        /// </summary>
        public partial class AstExternalAccessOption5 : AstExternalAccessOption
        {
            
            internal AstExternalAccessOption5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExternalAccessOption5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExternalAccessOption5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExternalAccessOption5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        /// <summary>
        /// external_access_option : TRANSFORM_NOISE_WORDS  EQUAL  on_off
        /// </summary>
        public partial class AstExternalAccessOption6 : AstExternalAccessOption
        {
            
            internal AstExternalAccessOption6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExternalAccessOption6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExternalAccessOption6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExternalAccessOption6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        /// <summary>
        /// external_access_option : TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal
        /// </summary>
        public partial class AstExternalAccessOption7 : AstExternalAccessOption
        {
            
            internal AstExternalAccessOption7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExternalAccessOption7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExternalAccessOption7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExternalAccessOption7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        

        
        internal AstExternalAccessOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstExternalAccessOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExternalAccessOption(Position p) : 
                base(p)
        {
        }
        
        internal AstExternalAccessOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExternalAccessOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExternalAccessOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstIdOrString), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstIdOrString), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 7;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// external_access_option : 
        ///    DB_CHAINING on_off 
        /// </summary>
        public static AstExternalAccessOption ExternalAccessOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExternalAccessOption.AstExternalAccessOption1 result = new AstExternalAccessOption.AstExternalAccessOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// external_access_option : 
        ///    DEFAULT_LANGUAGE EQUAL id_or_string 
        /// </summary>
        public static AstExternalAccessOption ExternalAccessOption(AstIdOrString idOrString)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExternalAccessOption.AstExternalAccessOption3 result = new AstExternalAccessOption.AstExternalAccessOption3(arguments);
            return result;
        }
        
        /// <summary>
        /// external_access_option : 
        ///    TWO_DIGIT_YEAR_CUTOFF EQUAL decimal 
        /// </summary>
        public static AstExternalAccessOption ExternalAccessOption(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExternalAccessOption.AstExternalAccessOption7 result = new AstExternalAccessOption.AstExternalAccessOption7(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// hadr_options
    /// 	 : HADR  ((AVAILABILITY  GROUP  EQUAL  group_id | OFF) | suspend_resume)
    /// </summary>
    public partial class AstHadrOptions : AstRule
    {
        
        protected static string _rule = "hadr_options\r\n\t : HADR  ((AVAILABILITY  GROUP  EQUAL  group_id | OFF) | suspend_r" +
            "esume)";
        
        internal AstHadrOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstHadrOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstHadrOptions(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstHadrOptions(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitHadrOptions(this);
        }
        
        /// <summary>
        /// hadr_options : 
        ///    HADR AVAILABILITY GROUP EQUAL group_id 
        /// </summary>
        public static AstHadrOptions HadrOptions(AstGroupId groupId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstHadrOptions result = new AstHadrOptions(arguments);
            return result;
        }
        
        /// <summary>
        /// hadr_options : 
        ///    HADR suspend_resume 
        /// </summary>
        public static AstHadrOptions HadrOptions(AstSuspendResume suspendResume)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstHadrOptions result = new AstHadrOptions(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// recovery_option
    /// 	 : recovery_option_enum
    /// 	 | TORN_PAGE_DETECTION  on_off
    /// 	 | ACCELERATED_DATABASE_RECOVERY  EQUAL  on_off
    /// </summary>
    public abstract partial class AstRecoveryOption : AstRule
    {
        
        protected static string _rule = "recovery_option\r\n\t : recovery_option_enum\r\n\t | TORN_PAGE_DETECTION  on_off\r\n\t | A" +
            "CCELERATED_DATABASE_RECOVERY  EQUAL  on_off";
        
        /// <summary>
        /// recovery_option : recovery_option_enum
        /// </summary>
        public partial class AstRecoveryOption1 : AstRecoveryOption
        {
            
            internal AstRecoveryOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRecoveryOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRecoveryOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRecoveryOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRecoveryOption(this);
            }
        }
        /// <summary>
        /// recovery_option : TORN_PAGE_DETECTION  on_off
        /// </summary>
        public partial class AstRecoveryOption2 : AstRecoveryOption
        {
            
            internal AstRecoveryOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRecoveryOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRecoveryOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRecoveryOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRecoveryOption(this);
            }
        }
        /// <summary>
        /// recovery_option : ACCELERATED_DATABASE_RECOVERY  EQUAL  on_off
        /// </summary>
        public partial class AstRecoveryOption3 : AstRecoveryOption
        {
            
            internal AstRecoveryOption3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRecoveryOption3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRecoveryOption3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRecoveryOption3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRecoveryOption(this);
            }
        }
        

        
        internal AstRecoveryOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstRecoveryOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRecoveryOption(Position p) : 
                base(p)
        {
        }
        
        internal AstRecoveryOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstRecoveryOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstRecoveryOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstRecoveryOptionEnum), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// recovery_option : 
        ///    recovery_option_enum 
        /// </summary>
        public static AstRecoveryOption RecoveryOption(AstRecoveryOptionEnum recoveryOptionEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRecoveryOption.AstRecoveryOption1 result = new AstRecoveryOption.AstRecoveryOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// recovery_option : 
        ///    TORN_PAGE_DETECTION on_off 
        /// </summary>
        public static AstRecoveryOption RecoveryOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRecoveryOption.AstRecoveryOption2 result = new AstRecoveryOption.AstRecoveryOption2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// service_broker_option
    /// 	 : ENABLE_BROKER
    /// 	 | DISABLE_BROKER
    /// 	 | NEW_BROKER
    /// 	 | ERROR_BROKER_CONVERSATIONS
    /// 	 | HONOR_BROKER_PRIORITY  on_off
    /// </summary>
    public abstract partial class AstServiceBrokerOption : AstRule
    {
        
        protected static string _rule = "service_broker_option\r\n\t : ENABLE_BROKER\r\n\t | DISABLE_BROKER\r\n\t | NEW_BROKER\r\n\t |" +
            " ERROR_BROKER_CONVERSATIONS\r\n\t | HONOR_BROKER_PRIORITY  on_off";
        
        /// <summary>
        /// service_broker_option : ENABLE_BROKER
        /// </summary>
        public partial class AstServiceBrokerOption1 : AstServiceBrokerOption
        {
            
            internal AstServiceBrokerOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstServiceBrokerOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstServiceBrokerOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstServiceBrokerOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceBrokerOption(this);
            }
        }
        /// <summary>
        /// service_broker_option : DISABLE_BROKER
        /// </summary>
        public partial class AstServiceBrokerOption2 : AstServiceBrokerOption
        {
            
            internal AstServiceBrokerOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstServiceBrokerOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstServiceBrokerOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstServiceBrokerOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceBrokerOption(this);
            }
        }
        /// <summary>
        /// service_broker_option : NEW_BROKER
        /// </summary>
        public partial class AstServiceBrokerOption3 : AstServiceBrokerOption
        {
            
            internal AstServiceBrokerOption3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstServiceBrokerOption3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstServiceBrokerOption3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstServiceBrokerOption3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceBrokerOption(this);
            }
        }
        /// <summary>
        /// service_broker_option : ERROR_BROKER_CONVERSATIONS
        /// </summary>
        public partial class AstServiceBrokerOption4 : AstServiceBrokerOption
        {
            
            internal AstServiceBrokerOption4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstServiceBrokerOption4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstServiceBrokerOption4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstServiceBrokerOption4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceBrokerOption(this);
            }
        }
        /// <summary>
        /// service_broker_option : HONOR_BROKER_PRIORITY  on_off
        /// </summary>
        public partial class AstServiceBrokerOption5 : AstServiceBrokerOption
        {
            
            internal AstServiceBrokerOption5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstServiceBrokerOption5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstServiceBrokerOption5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstServiceBrokerOption5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceBrokerOption(this);
            }
        }
        

        
        internal AstServiceBrokerOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstServiceBrokerOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServiceBrokerOption(Position p) : 
                base(p)
        {
        }
        
        internal AstServiceBrokerOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstServiceBrokerOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstServiceBrokerOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 5;
                }
            }
            if ((list.Count == 0))
            {
                return 1;
                return 2;
                return 3;
                return 4;
            }
            return 0;
        }
        
        /// <summary>
        /// service_broker_option : 
        ///    HONOR_BROKER_PRIORITY on_off 
        /// </summary>
        public static AstServiceBrokerOption ServiceBrokerOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServiceBrokerOption.AstServiceBrokerOption5 result = new AstServiceBrokerOption.AstServiceBrokerOption5(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// snapshot_option
    /// 	 : ALLOW_SNAPSHOT_ISOLATION  on_off
    /// 	 | READ_COMMITTED_SNAPSHOT  on_off
    /// 	 | MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = on_off
    /// </summary>
    public abstract partial class AstSnapshotOption : AstRule
    {
        
        protected static string _rule = "snapshot_option\r\n\t : ALLOW_SNAPSHOT_ISOLATION  on_off\r\n\t | READ_COMMITTED_SNAPSHO" +
            "T  on_off\r\n\t | MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = on_off";
        
        /// <summary>
        /// snapshot_option : ALLOW_SNAPSHOT_ISOLATION  on_off
        /// </summary>
        public partial class AstSnapshotOption1 : AstSnapshotOption
        {
            
            internal AstSnapshotOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSnapshotOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSnapshotOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSnapshotOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSnapshotOption(this);
            }
        }
        /// <summary>
        /// snapshot_option : READ_COMMITTED_SNAPSHOT  on_off
        /// </summary>
        public partial class AstSnapshotOption2 : AstSnapshotOption
        {
            
            internal AstSnapshotOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSnapshotOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSnapshotOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSnapshotOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSnapshotOption(this);
            }
        }
        /// <summary>
        /// snapshot_option : MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = on_off
        /// </summary>
        public partial class AstSnapshotOption3 : AstSnapshotOption
        {
            
            internal AstSnapshotOption3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSnapshotOption3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSnapshotOption3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSnapshotOption3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSnapshotOption(this);
            }
        }
        

        
        internal AstSnapshotOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstSnapshotOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSnapshotOption(Position p) : 
                base(p)
        {
        }
        
        internal AstSnapshotOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSnapshotOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSnapshotOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// snapshot_option : 
        ///    ALLOW_SNAPSHOT_ISOLATION on_off 
        /// </summary>
        public static AstSnapshotOption SnapshotOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSnapshotOption.AstSnapshotOption1 result = new AstSnapshotOption.AstSnapshotOption1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// sql_option
    /// 	 : ANSI_NULL_DEFAULT  on_off
    /// 	 | ANSI_NULLS  on_off
    /// 	 | ANSI_PADDING  on_off
    /// 	 | ANSI_WARNINGS  on_off
    /// 	 | ARITHABORT  on_off
    /// 	 | COMPATIBILITY_LEVEL  EQUAL  decimal
    /// 	 | CONCAT_NULL_YIELDS_NULL  on_off
    /// 	 | NUMERIC_ROUNDABORT  on_off
    /// 	 | QUOTED_IDENTIFIER  on_off
    /// 	 | RECURSIVE_TRIGGERS  on_off
    /// </summary>
    public abstract partial class AstSqlOption : AstRule
    {
        
        protected static string _rule = @"sql_option
	 : ANSI_NULL_DEFAULT  on_off
	 | ANSI_NULLS  on_off
	 | ANSI_PADDING  on_off
	 | ANSI_WARNINGS  on_off
	 | ARITHABORT  on_off
	 | COMPATIBILITY_LEVEL  EQUAL  decimal
	 | CONCAT_NULL_YIELDS_NULL  on_off
	 | NUMERIC_ROUNDABORT  on_off
	 | QUOTED_IDENTIFIER  on_off
	 | RECURSIVE_TRIGGERS  on_off";
        
        /// <summary>
        /// sql_option : ANSI_NULL_DEFAULT  on_off
        /// </summary>
        public partial class AstSqlOption1 : AstSqlOption
        {
            
            internal AstSqlOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSqlOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSqlOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSqlOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : ANSI_NULLS  on_off
        /// </summary>
        public partial class AstSqlOption2 : AstSqlOption
        {
            
            internal AstSqlOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSqlOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSqlOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSqlOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : ANSI_PADDING  on_off
        /// </summary>
        public partial class AstSqlOption3 : AstSqlOption
        {
            
            internal AstSqlOption3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSqlOption3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSqlOption3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSqlOption3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : ANSI_WARNINGS  on_off
        /// </summary>
        public partial class AstSqlOption4 : AstSqlOption
        {
            
            internal AstSqlOption4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSqlOption4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSqlOption4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSqlOption4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : ARITHABORT  on_off
        /// </summary>
        public partial class AstSqlOption5 : AstSqlOption
        {
            
            internal AstSqlOption5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSqlOption5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSqlOption5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSqlOption5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : COMPATIBILITY_LEVEL  EQUAL  decimal
        /// </summary>
        public partial class AstSqlOption6 : AstSqlOption
        {
            
            internal AstSqlOption6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSqlOption6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSqlOption6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSqlOption6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : CONCAT_NULL_YIELDS_NULL  on_off
        /// </summary>
        public partial class AstSqlOption7 : AstSqlOption
        {
            
            internal AstSqlOption7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSqlOption7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSqlOption7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSqlOption7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : NUMERIC_ROUNDABORT  on_off
        /// </summary>
        public partial class AstSqlOption8 : AstSqlOption
        {
            
            internal AstSqlOption8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSqlOption8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSqlOption8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSqlOption8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : QUOTED_IDENTIFIER  on_off
        /// </summary>
        public partial class AstSqlOption9 : AstSqlOption
        {
            
            internal AstSqlOption9(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSqlOption9(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSqlOption9(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSqlOption9(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : RECURSIVE_TRIGGERS  on_off
        /// </summary>
        public partial class AstSqlOption10 : AstSqlOption
        {
            
            internal AstSqlOption10(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSqlOption10(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSqlOption10(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSqlOption10(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        

        
        internal AstSqlOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstSqlOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSqlOption(Position p) : 
                base(p)
        {
        }
        
        internal AstSqlOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSqlOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSqlOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 8;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 9;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 10;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// sql_option : 
        ///    ANSI_NULL_DEFAULT on_off 
        /// </summary>
        public static AstSqlOption SqlOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSqlOption.AstSqlOption1 result = new AstSqlOption.AstSqlOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// sql_option : 
        ///    COMPATIBILITY_LEVEL EQUAL decimal 
        /// </summary>
        public static AstSqlOption SqlOption(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSqlOption.AstSqlOption6 result = new AstSqlOption.AstSqlOption6(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// termination
    /// 	 : ROLLBACK  AFTER  seconds = decimal
    /// 	 | ROLLBACK  IMMEDIATE
    /// 	 | NO_WAIT
    /// </summary>
    public abstract partial class AstTermination : AstRule
    {
        
        protected static string _rule = "termination\r\n\t : ROLLBACK  AFTER  seconds = decimal\r\n\t | ROLLBACK  IMMEDIATE\r\n\t |" +
            " NO_WAIT";
        
        /// <summary>
        /// termination : ROLLBACK  AFTER  seconds = decimal
        /// </summary>
        public partial class AstTermination1 : AstTermination
        {
            
            internal AstTermination1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTermination1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTermination1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTermination1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTermination(this);
            }
        }
        /// <summary>
        /// termination : ROLLBACK  IMMEDIATE
        /// </summary>
        public partial class AstTermination2 : AstTermination
        {
            
            internal AstTermination2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTermination2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTermination2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTermination2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTermination(this);
            }
        }
        /// <summary>
        /// termination : NO_WAIT
        /// </summary>
        public partial class AstTermination3 : AstTermination
        {
            
            internal AstTermination3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTermination3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTermination3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTermination3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTermination(this);
            }
        }
        

        
        internal AstTermination(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstTermination(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTermination(Position p) : 
                base(p)
        {
        }
        
        internal AstTermination(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTermination Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTermination.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
            }
            if ((list.Count == 0))
            {
                return 2;
                return 3;
            }
            return 0;
        }
        
        /// <summary>
        /// termination : 
        ///    ROLLBACK AFTER seconds=decimal 
        /// </summary>
        public static AstTermination Termination(AstDecimal seconds)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTermination.AstTermination1 result = new AstTermination.AstTermination1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// drop_trigger
    /// 	 : drop_dml_trigger
    /// 	 | drop_ddl_trigger
    /// </summary>
    public abstract partial class AstDropTrigger : AstRule
    {
        
        protected static string _rule = "drop_trigger\r\n\t : drop_dml_trigger\r\n\t | drop_ddl_trigger";
        
        /// <summary>
        /// drop_trigger : drop_dml_trigger
        /// </summary>
        public partial class AstDropTrigger1 : AstDropTrigger
        {
            
            internal AstDropTrigger1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDropTrigger1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDropTrigger1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDropTrigger1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDropTrigger(this);
            }
        }
        /// <summary>
        /// drop_trigger : drop_ddl_trigger
        /// </summary>
        public partial class AstDropTrigger2 : AstDropTrigger
        {
            
            internal AstDropTrigger2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDropTrigger2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDropTrigger2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDropTrigger2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDropTrigger(this);
            }
        }
        

        
        internal AstDropTrigger(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstDropTrigger(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDropTrigger(Position p) : 
                base(p)
        {
        }
        
        internal AstDropTrigger(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDropTrigger Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDropTrigger.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDropDmlTrigger), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropDdlTrigger), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// drop_trigger : 
        ///    drop_dml_trigger 
        /// </summary>
        public static AstDropTrigger DropTrigger(AstDropDmlTrigger dropDmlTrigger)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDropTrigger.AstDropTrigger1 result = new AstDropTrigger.AstDropTrigger1(arguments);
            return result;
        }
        
        /// <summary>
        /// drop_trigger : 
        ///    drop_ddl_trigger 
        /// </summary>
        public static AstDropTrigger DropTrigger(AstDropDdlTrigger dropDdlTrigger)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDropTrigger.AstDropTrigger2 result = new AstDropTrigger.AstDropTrigger2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// if_exists
    /// 	 : IF  EXISTS
    /// </summary>
    public partial class AstIfExists : AstRule
    {
        
        protected static string _rule = "if_exists\r\n\t : IF  EXISTS";
        
        internal AstIfExists(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstIfExists(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstIfExists(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstIfExists(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIfExists(this);
        }
    }
    
    /// <summary>
    /// create_type
    /// 	 : CREATE  TYPE  name = schema_type_ref  (FROM  data_type  default_value)?  (AS  TABLE  LR_BRACKET  column_def_table_constraints  RR_BRACKET)?
    /// </summary>
    public partial class AstCreateType : AstDdlClause
    {
        
        protected static string _rule = "create_type\r\n\t : CREATE  TYPE  name = schema_type_ref  (FROM  data_type  default_" +
            "value)?  (AS  TABLE  LR_BRACKET  column_def_table_constraints  RR_BRACKET)?";
        
        internal AstCreateType(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCreateType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateType(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateType(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateType(this);
        }
        
        /// <summary>
        /// create_type : 
        ///    CREATE TYPE name=schema_type_ref FROM data_type default_value AS TABLE ( column_def_table_constraints ) 
        /// </summary>
        public static AstCreateType CreateType(AstSchemaTypeRef name, AstDataType dataType, AstDefaultValue defaultValue, AstColumnDefTableConstraints columnDefTableConstraints)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateType result = new AstCreateType(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// drop_type
    /// 	 : DROP  TYPE  (IF  EXISTS)?  name = schema_type_ref
    /// </summary>
    public partial class AstDropType : AstDdlClause
    {
        
        protected static string _rule = "drop_type\r\n\t : DROP  TYPE  (IF  EXISTS)?  name = schema_type_ref";
        
        internal AstDropType(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDropType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropType(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropType(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropType(this);
        }
        
        /// <summary>
        /// drop_type : 
        ///    DROP TYPE IF EXISTS name=schema_type_ref 
        /// </summary>
        public static AstDropType DropType(AstSchemaTypeRef name)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDropType result = new AstDropType(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// rowset_function_limited
    /// 	 : openquery
    /// 	 | opendatasource
    /// </summary>
    public abstract partial class AstRowsetFunctionLimited : AstRule
    {
        
        protected static string _rule = "rowset_function_limited\r\n\t : openquery\r\n\t | opendatasource";
        
        /// <summary>
        /// rowset_function_limited : openquery
        /// </summary>
        public partial class AstRowsetFunctionLimited1 : AstRowsetFunctionLimited
        {
            
            internal AstRowsetFunctionLimited1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRowsetFunctionLimited1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRowsetFunctionLimited1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRowsetFunctionLimited1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRowsetFunctionLimited(this);
            }
        }
        /// <summary>
        /// rowset_function_limited : opendatasource
        /// </summary>
        public partial class AstRowsetFunctionLimited2 : AstRowsetFunctionLimited
        {
            
            internal AstRowsetFunctionLimited2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRowsetFunctionLimited2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRowsetFunctionLimited2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRowsetFunctionLimited2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRowsetFunctionLimited(this);
            }
        }
        

        
        internal AstRowsetFunctionLimited(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstRowsetFunctionLimited(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRowsetFunctionLimited(Position p) : 
                base(p)
        {
        }
        
        internal AstRowsetFunctionLimited(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstRowsetFunctionLimited Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstRowsetFunctionLimited.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOpenquery), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOpendatasource), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// rowset_function_limited : 
        ///    openquery 
        /// </summary>
        public static AstRowsetFunctionLimited RowsetFunctionLimited(AstOpenquery openquery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRowsetFunctionLimited.AstRowsetFunctionLimited1 result = new AstRowsetFunctionLimited.AstRowsetFunctionLimited1(arguments);
            return result;
        }
        
        /// <summary>
        /// rowset_function_limited : 
        ///    opendatasource 
        /// </summary>
        public static AstRowsetFunctionLimited RowsetFunctionLimited(AstOpendatasource opendatasource)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRowsetFunctionLimited.AstRowsetFunctionLimited2 result = new AstRowsetFunctionLimited.AstRowsetFunctionLimited2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// declare_statement
    /// 	 : DECLARE  local_id  AS?  (table_type_definition | full_table_ref)  SEMI?
    /// 	 | DECLARE  loc += declare_locals  SEMI?
    /// 	 | DECLARE  local_id  AS?  xml_type_definition  SEMI?
    /// 	 | WITH  XMLNAMESPACES  LR_BRACKET  xml_dec += xml_declarations  RR_BRACKET  SEMI?
    /// </summary>
    public abstract partial class AstDeclareStatement : AstAnotherStatement
    {
        
        protected static string _rule = @"declare_statement
	 : DECLARE  local_id  AS?  (table_type_definition | full_table_ref)  SEMI?
	 | DECLARE  loc += declare_locals  SEMI?
	 | DECLARE  local_id  AS?  xml_type_definition  SEMI?
	 | WITH  XMLNAMESPACES  LR_BRACKET  xml_dec += xml_declarations  RR_BRACKET  SEMI?";
        
        /// <summary>
        /// declare_statement : DECLARE  local_id  AS?  (table_type_definition | full_table_ref)  SEMI?
        /// </summary>
        public partial class AstDeclareStatement1 : AstDeclareStatement
        {
            
            internal AstDeclareStatement1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDeclareStatement1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDeclareStatement1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDeclareStatement1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareStatement(this);
            }
        }
        /// <summary>
        /// declare_statement : DECLARE  loc += declare_locals  SEMI?
        /// </summary>
        public partial class AstDeclareStatement2 : AstDeclareStatement
        {
            
            internal AstDeclareStatement2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDeclareStatement2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDeclareStatement2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDeclareStatement2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareStatement(this);
            }
        }
        /// <summary>
        /// declare_statement : DECLARE  local_id  AS?  xml_type_definition  SEMI?
        /// </summary>
        public partial class AstDeclareStatement3 : AstDeclareStatement
        {
            
            internal AstDeclareStatement3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDeclareStatement3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDeclareStatement3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDeclareStatement3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareStatement(this);
            }
        }
        /// <summary>
        /// declare_statement : WITH  XMLNAMESPACES  LR_BRACKET  xml_dec += xml_declarations  RR_BRACKET  SEMI?
        /// </summary>
        public partial class AstDeclareStatement4 : AstDeclareStatement
        {
            
            internal AstDeclareStatement4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDeclareStatement4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDeclareStatement4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDeclareStatement4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareStatement(this);
            }
        }
        

        
        internal AstDeclareStatement(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstDeclareStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDeclareStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstDeclareStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDeclareStatement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDeclareStatement.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstTableTypeDefinition), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstFullTableRef), false, false))
                        {
                            return 1;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstXmlTypeDefinition), false, false))
                    {
                        return 3;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDeclareLocals), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstXmlDeclarations), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// declare_statement : 
        ///    DECLARE local_id AS? table_type_definition SEMI? 
        /// </summary>
        public static AstDeclareStatement DeclareStatement(AstLocalId localId, AstTableTypeDefinition tableTypeDefinition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDeclareStatement.AstDeclareStatement1 result = new AstDeclareStatement.AstDeclareStatement1(arguments);
            return result;
        }
        
        /// <summary>
        /// declare_statement : 
        ///    DECLARE local_id AS? full_table_ref SEMI? 
        /// </summary>
        public static AstDeclareStatement DeclareStatement(AstLocalId localId, AstFullTableRef fullTableRef)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDeclareStatement.AstDeclareStatement1 result = new AstDeclareStatement.AstDeclareStatement1(arguments);
            return result;
        }
        
        /// <summary>
        /// declare_statement : 
        ///    DECLARE loc=declare_locals SEMI? 
        /// </summary>
        public static AstDeclareStatement DeclareStatement(AstDeclareLocals loc)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDeclareStatement.AstDeclareStatement2 result = new AstDeclareStatement.AstDeclareStatement2(arguments);
            return result;
        }
        
        /// <summary>
        /// declare_statement : 
        ///    DECLARE local_id AS? xml_type_definition SEMI? 
        /// </summary>
        public static AstDeclareStatement DeclareStatement(AstLocalId localId, AstXmlTypeDefinition xmlTypeDefinition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDeclareStatement.AstDeclareStatement3 result = new AstDeclareStatement.AstDeclareStatement3(arguments);
            return result;
        }
        
        /// <summary>
        /// declare_statement : 
        ///    WITH XMLNAMESPACES ( xml_dec=xml_declarations ) SEMI? 
        /// </summary>
        public static AstDeclareStatement DeclareStatement(AstXmlDeclarations xmlDec)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDeclareStatement.AstDeclareStatement4 result = new AstDeclareStatement.AstDeclareStatement4(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// xml_declaration
    /// 	 : xml_namespace_uri = stringtext  AS  id_
    /// 	 | DEFAULT  stringtext
    /// </summary>
    public abstract partial class AstXmlDeclaration : AstRule
    {
        
        protected static string _rule = "xml_declaration\r\n\t : xml_namespace_uri = stringtext  AS  id_\r\n\t | DEFAULT  string" +
            "text";
        
        /// <summary>
        /// xml_declaration : xml_namespace_uri = stringtext  AS  id_
        /// </summary>
        public partial class AstXmlDeclaration1 : AstXmlDeclaration
        {
            
            internal AstXmlDeclaration1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstXmlDeclaration1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstXmlDeclaration1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstXmlDeclaration1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlDeclaration(this);
            }
        }
        /// <summary>
        /// xml_declaration : DEFAULT  stringtext
        /// </summary>
        public partial class AstXmlDeclaration2 : AstXmlDeclaration
        {
            
            internal AstXmlDeclaration2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstXmlDeclaration2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstXmlDeclaration2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstXmlDeclaration2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlDeclaration(this);
            }
        }
        

        
        internal AstXmlDeclaration(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstXmlDeclaration(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstXmlDeclaration(Position p) : 
                base(p)
        {
        }
        
        internal AstXmlDeclaration(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstXmlDeclaration Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstXmlDeclaration.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstId), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// xml_declaration : 
        ///    xml_namespace_uri=stringtext AS id_ 
        /// </summary>
        public static AstXmlDeclaration XmlDeclaration(AstStringtext xmlNamespaceUri, AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstXmlDeclaration.AstXmlDeclaration1 result = new AstXmlDeclaration.AstXmlDeclaration1(arguments);
            return result;
        }
        
        /// <summary>
        /// xml_declaration : 
        ///    DEFAULT stringtext 
        /// </summary>
        public static AstXmlDeclaration XmlDeclaration(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstXmlDeclaration.AstXmlDeclaration2 result = new AstXmlDeclaration.AstXmlDeclaration2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// cursor_statement
    /// 	 : CLOSE  GLOBAL?  cursor_name  SEMI?
    /// 	 | DEALLOCATE  GLOBAL?  CURSOR?  cursor_name  SEMI?
    /// 	 | declare_cursor
    /// 	 | fetch_cursor
    /// 	 | OPEN  GLOBAL?  cursor_name  SEMI?
    /// </summary>
    public abstract partial class AstCursorStatement : AstAnotherStatement
    {
        
        protected static string _rule = "cursor_statement\r\n\t : CLOSE  GLOBAL?  cursor_name  SEMI?\r\n\t | DEALLOCATE  GLOBAL?" +
            "  CURSOR?  cursor_name  SEMI?\r\n\t | declare_cursor\r\n\t | fetch_cursor\r\n\t | OPEN  G" +
            "LOBAL?  cursor_name  SEMI?";
        
        /// <summary>
        /// cursor_statement : CLOSE  GLOBAL?  cursor_name  SEMI?
        /// </summary>
        public partial class AstCursorStatement1 : AstCursorStatement
        {
            
            internal AstCursorStatement1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCursorStatement1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCursorStatement1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCursorStatement1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorStatement(this);
            }
        }
        /// <summary>
        /// cursor_statement : DEALLOCATE  GLOBAL?  CURSOR?  cursor_name  SEMI?
        /// </summary>
        public partial class AstCursorStatement2 : AstCursorStatement
        {
            
            internal AstCursorStatement2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCursorStatement2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCursorStatement2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCursorStatement2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorStatement(this);
            }
        }
        /// <summary>
        /// cursor_statement : declare_cursor
        /// </summary>
        public partial class AstCursorStatement3 : AstCursorStatement
        {
            
            internal AstCursorStatement3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCursorStatement3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCursorStatement3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCursorStatement3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorStatement(this);
            }
        }
        /// <summary>
        /// cursor_statement : fetch_cursor
        /// </summary>
        public partial class AstCursorStatement4 : AstCursorStatement
        {
            
            internal AstCursorStatement4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCursorStatement4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCursorStatement4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCursorStatement4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorStatement(this);
            }
        }
        /// <summary>
        /// cursor_statement : OPEN  GLOBAL?  cursor_name  SEMI?
        /// </summary>
        public partial class AstCursorStatement5 : AstCursorStatement
        {
            
            internal AstCursorStatement5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCursorStatement5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCursorStatement5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCursorStatement5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorStatement(this);
            }
        }
        

        
        internal AstCursorStatement(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCursorStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCursorStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstCursorStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCursorStatement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCursorStatement.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstCursorName), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstCursorName), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstDeclareCursor), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstFetchCursor), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstCursorName), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// cursor_statement : 
        ///    CLOSE GLOBAL? cursor_name SEMI? 
        /// </summary>
        public static AstCursorStatement CursorStatement(AstCursorName cursorName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCursorStatement.AstCursorStatement1 result = new AstCursorStatement.AstCursorStatement1(arguments);
            return result;
        }
        
        /// <summary>
        /// cursor_statement : 
        ///    declare_cursor 
        /// </summary>
        public static AstCursorStatement CursorStatement(AstDeclareCursor declareCursor)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCursorStatement.AstCursorStatement3 result = new AstCursorStatement.AstCursorStatement3(arguments);
            return result;
        }
        
        /// <summary>
        /// cursor_statement : 
        ///    fetch_cursor 
        /// </summary>
        public static AstCursorStatement CursorStatement(AstFetchCursor fetchCursor)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCursorStatement.AstCursorStatement4 result = new AstCursorStatement.AstCursorStatement4(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// backup_to
    /// 	 : TO  (logical_device_ids  TO  disk_tape_url_values)
    /// </summary>
    public partial class AstBackupTo : AstRule
    {
        
        protected static string _rule = "backup_to\r\n\t : TO  (logical_device_ids  TO  disk_tape_url_values)";
        
        internal AstBackupTo(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstBackupTo(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBackupTo(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBackupTo(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupTo(this);
        }
        
        /// <summary>
        /// backup_to : 
        ///    TO logical_device_ids TO disk_tape_url_values 
        /// </summary>
        public static AstBackupTo BackupTo(AstLogicalDeviceIds logicalDeviceIds, AstDiskTapeUrlValues diskTapeUrlValues)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupTo result = new AstBackupTo(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// backup_to_mirror
    /// 	 : MIRROR  TO  (logical_device_ids | disk_tape_url_values)
    /// </summary>
    public partial class AstBackupToMirror : AstRule
    {
        
        protected static string _rule = "backup_to_mirror\r\n\t : MIRROR  TO  (logical_device_ids | disk_tape_url_values)";
        
        internal AstBackupToMirror(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstBackupToMirror(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBackupToMirror(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBackupToMirror(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupToMirror(this);
        }
        
        /// <summary>
        /// backup_to_mirror : 
        ///    MIRROR TO logical_device_ids 
        /// </summary>
        public static AstBackupToMirror BackupToMirror(AstLogicalDeviceIds logicalDeviceIds)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupToMirror result = new AstBackupToMirror(arguments);
            return result;
        }
        
        /// <summary>
        /// backup_to_mirror : 
        ///    MIRROR TO disk_tape_url_values 
        /// </summary>
        public static AstBackupToMirror BackupToMirror(AstDiskTapeUrlValues diskTapeUrlValues)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupToMirror result = new AstBackupToMirror(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// backup_certificate_private_key
    /// 	 : FILE  EQUAL  private_key_file = stringtext
    /// 	 | by_password_crypt
    /// </summary>
    public abstract partial class AstBackupCertificatePrivateKey : AstRule
    {
        
        protected static string _rule = "backup_certificate_private_key\r\n\t : FILE  EQUAL  private_key_file = stringtext\r\n\t" +
            " | by_password_crypt";
        
        /// <summary>
        /// backup_certificate_private_key : FILE  EQUAL  private_key_file = stringtext
        /// </summary>
        public partial class AstBackupCertificatePrivateKey1 : AstBackupCertificatePrivateKey
        {
            
            internal AstBackupCertificatePrivateKey1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupCertificatePrivateKey1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupCertificatePrivateKey1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupCertificatePrivateKey1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupCertificatePrivateKey(this);
            }
        }
        /// <summary>
        /// backup_certificate_private_key : by_password_crypt
        /// </summary>
        public partial class AstBackupCertificatePrivateKey2 : AstBackupCertificatePrivateKey
        {
            
            internal AstBackupCertificatePrivateKey2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupCertificatePrivateKey2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupCertificatePrivateKey2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupCertificatePrivateKey2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupCertificatePrivateKey(this);
            }
        }
        

        
        internal AstBackupCertificatePrivateKey(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstBackupCertificatePrivateKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBackupCertificatePrivateKey(Position p) : 
                base(p)
        {
        }
        
        internal AstBackupCertificatePrivateKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstBackupCertificatePrivateKey Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstBackupCertificatePrivateKey.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstByPasswordCrypt), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// backup_certificate_private_key : 
        ///    FILE EQUAL private_key_file=stringtext 
        /// </summary>
        public static AstBackupCertificatePrivateKey BackupCertificatePrivateKey(AstStringtext privateKeyFile)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupCertificatePrivateKey.AstBackupCertificatePrivateKey1 result = new AstBackupCertificatePrivateKey.AstBackupCertificatePrivateKey1(arguments);
            return result;
        }
        
        /// <summary>
        /// backup_certificate_private_key : 
        ///    by_password_crypt 
        /// </summary>
        public static AstBackupCertificatePrivateKey BackupCertificatePrivateKey(AstByPasswordCrypt byPasswordCrypt)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupCertificatePrivateKey.AstBackupCertificatePrivateKey2 result = new AstBackupCertificatePrivateKey.AstBackupCertificatePrivateKey2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// backup_setting
    /// 	 : DIFFERENTIAL
    /// 	 | COPY_ONLY
    /// 	 | CREDENTIAL
    /// 	 | FILE_SNAPSHOT
    /// 	 | NO_CHECKSUM
    /// 	 | CHECKSUM
    /// 	 | STOP_ON_ERROR
    /// 	 | CONTINUE_AFTER_ERROR
    /// 	 | RESTART
    /// 	 | DESCRIPTION  EQUAL  string_id
    /// 	 | NAME  EQUAL  backup_id
    /// 	 | EXPIREDATE  EQUAL  string_id
    /// 	 | RETAINDAYS  EQUAL  decimal_id
    /// 	 | MEDIADESCRIPTION  EQUAL  string_id
    /// 	 | MEDIANAME  EQUAL  stringtext
    /// 	 | BLOCKSIZE  EQUAL  decimal_id
    /// 	 | BUFFERCOUNT  EQUAL  decimal_id
    /// 	 | MAXTRANSFER  EQUAL  decimal_id
    /// 	 | STATS  (EQUAL  decimal)?
    /// 	 | ENCRYPTION  LR_BRACKET  ALGORITHM  EQUAL  algorithm_short  COMMA  SERVER  CERTIFICATE  EQUAL  (encryptor_id | SERVER  ASYMMETRIC  KEY  EQUAL  encryptor_id)  RR_BRACKET
    /// 	 | compression
    /// 	 | rewind
    /// 	 | load_moun_load
    /// 	 | init_no_init
    /// 	 | no_skip
    /// 	 | format_noformat
    /// </summary>
    public abstract partial class AstBackupSetting : AstRule
    {
        
        protected static string _rule = @"backup_setting
	 : DIFFERENTIAL
	 | COPY_ONLY
	 | CREDENTIAL
	 | FILE_SNAPSHOT
	 | NO_CHECKSUM
	 | CHECKSUM
	 | STOP_ON_ERROR
	 | CONTINUE_AFTER_ERROR
	 | RESTART
	 | DESCRIPTION  EQUAL  string_id
	 | NAME  EQUAL  backup_id
	 | EXPIREDATE  EQUAL  string_id
	 | RETAINDAYS  EQUAL  decimal_id
	 | MEDIADESCRIPTION  EQUAL  string_id
	 | MEDIANAME  EQUAL  stringtext
	 | BLOCKSIZE  EQUAL  decimal_id
	 | BUFFERCOUNT  EQUAL  decimal_id
	 | MAXTRANSFER  EQUAL  decimal_id
	 | STATS  (EQUAL  decimal)?
	 | ENCRYPTION  LR_BRACKET  ALGORITHM  EQUAL  algorithm_short  COMMA  SERVER  CERTIFICATE  EQUAL  (encryptor_id | SERVER  ASYMMETRIC  KEY  EQUAL  encryptor_id)  RR_BRACKET
	 | compression
	 | rewind
	 | load_moun_load
	 | init_no_init
	 | no_skip
	 | format_noformat";
        
        /// <summary>
        /// backup_setting : DIFFERENTIAL
        /// </summary>
        public partial class AstBackupSetting1 : AstBackupSetting
        {
            
            internal AstBackupSetting1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : COPY_ONLY
        /// </summary>
        public partial class AstBackupSetting2 : AstBackupSetting
        {
            
            internal AstBackupSetting2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : CREDENTIAL
        /// </summary>
        public partial class AstBackupSetting3 : AstBackupSetting
        {
            
            internal AstBackupSetting3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : FILE_SNAPSHOT
        /// </summary>
        public partial class AstBackupSetting4 : AstBackupSetting
        {
            
            internal AstBackupSetting4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : NO_CHECKSUM
        /// </summary>
        public partial class AstBackupSetting5 : AstBackupSetting
        {
            
            internal AstBackupSetting5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : CHECKSUM
        /// </summary>
        public partial class AstBackupSetting6 : AstBackupSetting
        {
            
            internal AstBackupSetting6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : STOP_ON_ERROR
        /// </summary>
        public partial class AstBackupSetting7 : AstBackupSetting
        {
            
            internal AstBackupSetting7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : CONTINUE_AFTER_ERROR
        /// </summary>
        public partial class AstBackupSetting8 : AstBackupSetting
        {
            
            internal AstBackupSetting8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : RESTART
        /// </summary>
        public partial class AstBackupSetting9 : AstBackupSetting
        {
            
            internal AstBackupSetting9(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting9(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting9(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting9(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : DESCRIPTION  EQUAL  string_id
        /// </summary>
        public partial class AstBackupSetting10 : AstBackupSetting
        {
            
            internal AstBackupSetting10(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting10(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting10(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting10(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : NAME  EQUAL  backup_id
        /// </summary>
        public partial class AstBackupSetting11 : AstBackupSetting
        {
            
            internal AstBackupSetting11(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting11(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting11(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting11(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : EXPIREDATE  EQUAL  string_id
        /// </summary>
        public partial class AstBackupSetting12 : AstBackupSetting
        {
            
            internal AstBackupSetting12(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting12(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting12(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting12(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : RETAINDAYS  EQUAL  decimal_id
        /// </summary>
        public partial class AstBackupSetting13 : AstBackupSetting
        {
            
            internal AstBackupSetting13(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting13(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting13(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting13(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : MEDIADESCRIPTION  EQUAL  string_id
        /// </summary>
        public partial class AstBackupSetting14 : AstBackupSetting
        {
            
            internal AstBackupSetting14(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting14(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting14(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting14(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : MEDIANAME  EQUAL  stringtext
        /// </summary>
        public partial class AstBackupSetting15 : AstBackupSetting
        {
            
            internal AstBackupSetting15(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting15(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting15(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting15(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : BLOCKSIZE  EQUAL  decimal_id
        /// </summary>
        public partial class AstBackupSetting16 : AstBackupSetting
        {
            
            internal AstBackupSetting16(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting16(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting16(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting16(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : BUFFERCOUNT  EQUAL  decimal_id
        /// </summary>
        public partial class AstBackupSetting17 : AstBackupSetting
        {
            
            internal AstBackupSetting17(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting17(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting17(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting17(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : MAXTRANSFER  EQUAL  decimal_id
        /// </summary>
        public partial class AstBackupSetting18 : AstBackupSetting
        {
            
            internal AstBackupSetting18(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting18(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting18(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting18(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : STATS  (EQUAL  decimal)?
        /// </summary>
        public partial class AstBackupSetting19 : AstBackupSetting
        {
            
            internal AstBackupSetting19(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting19(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting19(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting19(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : ENCRYPTION  LR_BRACKET  ALGORITHM  EQUAL  algorithm_short  COMMA  SERVER  CERTIFICATE  EQUAL  (encryptor_id | SERVER  ASYMMETRIC  KEY  EQUAL  encryptor_id)  RR_BRACKET
        /// </summary>
        public partial class AstBackupSetting20 : AstBackupSetting
        {
            
            internal AstBackupSetting20(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting20(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting20(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting20(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : compression
        /// </summary>
        public partial class AstBackupSetting21 : AstBackupSetting
        {
            
            internal AstBackupSetting21(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting21(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting21(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting21(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : rewind
        /// </summary>
        public partial class AstBackupSetting22 : AstBackupSetting
        {
            
            internal AstBackupSetting22(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting22(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting22(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting22(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : load_moun_load
        /// </summary>
        public partial class AstBackupSetting23 : AstBackupSetting
        {
            
            internal AstBackupSetting23(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting23(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting23(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting23(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : init_no_init
        /// </summary>
        public partial class AstBackupSetting24 : AstBackupSetting
        {
            
            internal AstBackupSetting24(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting24(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting24(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting24(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : no_skip
        /// </summary>
        public partial class AstBackupSetting25 : AstBackupSetting
        {
            
            internal AstBackupSetting25(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting25(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting25(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting25(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : format_noformat
        /// </summary>
        public partial class AstBackupSetting26 : AstBackupSetting
        {
            
            internal AstBackupSetting26(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBackupSetting26(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBackupSetting26(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBackupSetting26(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        

        
        internal AstBackupSetting(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstBackupSetting(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBackupSetting(Position p) : 
                base(p)
        {
        }
        
        internal AstBackupSetting(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstBackupSetting Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstBackupSetting.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstAlgorithmShort), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstEncryptorId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstEncryptorId), false, false))
                        {
                            return 20;
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringId), false, false))
                {
                    return 10;
                }
                if (AstRoot.Eval(list[0], typeof(AstBackupId), false, false))
                {
                    return 11;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringId), false, false))
                {
                    return 12;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimalId), false, false))
                {
                    return 13;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringId), false, false))
                {
                    return 14;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 15;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimalId), false, false))
                {
                    return 16;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimalId), false, false))
                {
                    return 17;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimalId), false, false))
                {
                    return 18;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 19;
                }
                if (AstRoot.Eval(list[0], typeof(AstCompression), false, false))
                {
                    return 21;
                }
                if (AstRoot.Eval(list[0], typeof(AstRewind), false, false))
                {
                    return 22;
                }
                if (AstRoot.Eval(list[0], typeof(AstLoadMounLoad), false, false))
                {
                    return 23;
                }
                if (AstRoot.Eval(list[0], typeof(AstInitNoInit), false, false))
                {
                    return 24;
                }
                if (AstRoot.Eval(list[0], typeof(AstNoSkip), false, false))
                {
                    return 25;
                }
                if (AstRoot.Eval(list[0], typeof(AstFormatNoformat), false, false))
                {
                    return 26;
                }
            }
            if ((list.Count == 0))
            {
                return 1;
                return 2;
                return 3;
                return 4;
                return 5;
                return 6;
                return 7;
                return 8;
                return 9;
            }
            return 0;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    DESCRIPTION EQUAL string_id 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstStringId stringId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting.AstBackupSetting10 result = new AstBackupSetting.AstBackupSetting10(arguments);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    NAME EQUAL backup_id 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstBackupId backupId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting.AstBackupSetting11 result = new AstBackupSetting.AstBackupSetting11(arguments);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    RETAINDAYS EQUAL decimal_id 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstDecimalId decimalId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting.AstBackupSetting13 result = new AstBackupSetting.AstBackupSetting13(arguments);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    MEDIANAME EQUAL stringtext 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting.AstBackupSetting15 result = new AstBackupSetting.AstBackupSetting15(arguments);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    STATS EQUAL decimal 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting.AstBackupSetting19 result = new AstBackupSetting.AstBackupSetting19(arguments);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    ENCRYPTION ( ALGORITHM EQUAL algorithm_short , SERVER CERTIFICATE EQUAL encryptor_id ) 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstAlgorithmShort algorithmShort, AstEncryptorId encryptorId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting.AstBackupSetting20 result = new AstBackupSetting.AstBackupSetting20(arguments);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    compression 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstCompression compression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting.AstBackupSetting21 result = new AstBackupSetting.AstBackupSetting21(arguments);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    rewind 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstRewind rewind)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting.AstBackupSetting22 result = new AstBackupSetting.AstBackupSetting22(arguments);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    load_moun_load 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstLoadMounLoad loadMounLoad)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting.AstBackupSetting23 result = new AstBackupSetting.AstBackupSetting23(arguments);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    init_no_init 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstInitNoInit initNoInit)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting.AstBackupSetting24 result = new AstBackupSetting.AstBackupSetting24(arguments);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    no_skip 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstNoSkip noSkip)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting.AstBackupSetting25 result = new AstBackupSetting.AstBackupSetting25(arguments);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    format_noformat 
        /// </summary>
        public static AstBackupSetting BackupSetting(AstFormatNoformat formatNoformat)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBackupSetting.AstBackupSetting26 result = new AstBackupSetting.AstBackupSetting26(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// kill_statement
    /// 	 : KILL  (kill_process | kill_query_notification | kill_stats_job)
    /// </summary>
    public partial class AstKillStatement : AstAnotherStatement
    {
        
        protected static string _rule = "kill_statement\r\n\t : KILL  (kill_process | kill_query_notification | kill_stats_jo" +
            "b)";
        
        internal AstKillStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstKillStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstKillStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstKillStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillStatement(this);
        }
        
        /// <summary>
        /// kill_statement : 
        ///    KILL kill_process 
        /// </summary>
        public static AstKillStatement KillStatement(AstKillProcess killProcess)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstKillStatement result = new AstKillStatement(arguments);
            return result;
        }
        
        /// <summary>
        /// kill_statement : 
        ///    KILL kill_query_notification 
        /// </summary>
        public static AstKillStatement KillStatement(AstKillQueryNotification killQueryNotification)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstKillStatement result = new AstKillStatement(arguments);
            return result;
        }
        
        /// <summary>
        /// kill_statement : 
        ///    KILL kill_stats_job 
        /// </summary>
        public static AstKillStatement KillStatement(AstKillStatsJob killStatsJob)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstKillStatement result = new AstKillStatement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// kill_process
    /// 	 : (session = decimal_string | UOW)  (WITH  STATUSONLY)?
    /// </summary>
    public partial class AstKillProcess : AstRule
    {
        
        protected static string _rule = "kill_process\r\n\t : (session = decimal_string | UOW)  (WITH  STATUSONLY)?";
        
        internal AstKillProcess(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstKillProcess(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstKillProcess(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstKillProcess(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillProcess(this);
        }
        
        /// <summary>
        /// kill_process : 
        ///    session=decimal_string WITH STATUSONLY 
        /// </summary>
        public static AstKillProcess KillProcess(AstDecimalString session)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstKillProcess result = new AstKillProcess(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// kill_query_notification
    /// 	 : QUERY  NOTIFICATION  SUBSCRIPTION  (ALL | subscription = decimal)
    /// </summary>
    public partial class AstKillQueryNotification : AstRule
    {
        
        protected static string _rule = "kill_query_notification\r\n\t : QUERY  NOTIFICATION  SUBSCRIPTION  (ALL | subscripti" +
            "on = decimal)";
        
        internal AstKillQueryNotification(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstKillQueryNotification(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstKillQueryNotification(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstKillQueryNotification(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillQueryNotification(this);
        }
        
        /// <summary>
        /// kill_query_notification : 
        ///    QUERY NOTIFICATION SUBSCRIPTION subscription=decimal 
        /// </summary>
        public static AstKillQueryNotification KillQueryNotification(AstDecimal subscription)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstKillQueryNotification result = new AstKillQueryNotification(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// kill_stats_job
    /// 	 : STATS  JOB  job = decimal
    /// </summary>
    public partial class AstKillStatsJob : AstRule
    {
        
        protected static string _rule = "kill_stats_job\r\n\t : STATS  JOB  job = decimal";
        
        internal AstKillStatsJob(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstKillStatsJob(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstKillStatsJob(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstKillStatsJob(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillStatsJob(this);
        }
        
        /// <summary>
        /// kill_stats_job : 
        ///    STATS JOB job=decimal 
        /// </summary>
        public static AstKillStatsJob KillStatsJob(AstDecimal job)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstKillStatsJob result = new AstKillStatsJob(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// execute_body
    /// 	 : (return_status = local_id  EQUAL)?  (func_proc_name_server_database_schema | execute_var_string)  execute_statement_arg?
    /// 	 | LR_BRACKET  execute_var_strings  RR_BRACKET  (AS?  login_user  EQUAL  stringtext)?  (AT_KEYWORD  server_id)?
    /// </summary>
    public abstract partial class AstExecuteBody : AstRule
    {
        
        protected static string _rule = "execute_body\r\n\t : (return_status = local_id  EQUAL)?  (func_proc_name_server_data" +
            "base_schema | execute_var_string)  execute_statement_arg?\r\n\t | LR_BRACKET  execu" +
            "te_var_strings  RR_BRACKET  (AS?  login_user  EQUAL  stringtext)?  (AT_KEYWORD  " +
            "server_id)?";
        
        /// <summary>
        /// execute_body : (return_status = local_id  EQUAL)?  (func_proc_name_server_database_schema | execute_var_string)  execute_statement_arg?
        /// </summary>
        public partial class AstExecuteBody1 : AstExecuteBody
        {
            
            internal AstExecuteBody1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExecuteBody1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExecuteBody1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExecuteBody1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteBody(this);
            }
        }
        /// <summary>
        /// execute_body : LR_BRACKET  execute_var_strings  RR_BRACKET  (AS?  login_user  EQUAL  stringtext)?  (AT_KEYWORD  server_id)?
        /// </summary>
        public partial class AstExecuteBody2 : AstExecuteBody
        {
            
            internal AstExecuteBody2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExecuteBody2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExecuteBody2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExecuteBody2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteBody(this);
            }
        }
        

        
        internal AstExecuteBody(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstExecuteBody(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExecuteBody(Position p) : 
                base(p)
        {
        }
        
        internal AstExecuteBody(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExecuteBody Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExecuteBody.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFuncProcNameServerDatabaseSchema), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExecuteVarString), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstExecuteStatementArg), true, false))
                            {
                                return 1;
                            }
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExecuteVarStrings), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstLoginUser), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstStringtext), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstServerId), false, false))
                            {
                                return 2;
                            }
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// execute_body : 
        ///    return_status=local_id EQUAL func_proc_name_server_database_schema execute_statement_arg? 
        /// </summary>
        public static AstExecuteBody ExecuteBody(AstLocalId returnStatus, AstFuncProcNameServerDatabaseSchema funcProcNameServerDatabaseSchema, AstExecuteStatementArg executeStatementArg)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteBody.AstExecuteBody1 result = new AstExecuteBody.AstExecuteBody1(arguments);
            return result;
        }
        
        /// <summary>
        /// execute_body : 
        ///    return_status=local_id EQUAL execute_var_string execute_statement_arg? 
        /// </summary>
        public static AstExecuteBody ExecuteBody(AstLocalId returnStatus, AstExecuteVarString executeVarString, AstExecuteStatementArg executeStatementArg)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteBody.AstExecuteBody1 result = new AstExecuteBody.AstExecuteBody1(arguments);
            return result;
        }
        
        /// <summary>
        /// execute_body : 
        ///    ( execute_var_strings ) AS? login_user EQUAL stringtext AT_KEYWORD server_id 
        /// </summary>
        public static AstExecuteBody ExecuteBody(AstExecuteVarStrings executeVarStrings, AstLoginUser loginUser, AstStringtext stringtext, AstServerId serverId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteBody.AstExecuteBody2 result = new AstExecuteBody.AstExecuteBody2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// execute_statement_arg
    /// 	 : execute_statement_arg_unnamed  execute_statement_args?
    /// 	 | execute_statement_arg_nameds
    /// </summary>
    public abstract partial class AstExecuteStatementArg : AstRule
    {
        
        protected static string _rule = "execute_statement_arg\r\n\t : execute_statement_arg_unnamed  execute_statement_args?" +
            "\r\n\t | execute_statement_arg_nameds";
        
        /// <summary>
        /// execute_statement_arg : execute_statement_arg_unnamed  execute_statement_args?
        /// </summary>
        public partial class AstExecuteStatementArg1 : AstExecuteStatementArg
        {
            
            internal AstExecuteStatementArg1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExecuteStatementArg1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExecuteStatementArg1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExecuteStatementArg1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteStatementArg(this);
            }
        }
        /// <summary>
        /// execute_statement_arg : execute_statement_arg_nameds
        /// </summary>
        public partial class AstExecuteStatementArg2 : AstExecuteStatementArg
        {
            
            internal AstExecuteStatementArg2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExecuteStatementArg2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExecuteStatementArg2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExecuteStatementArg2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteStatementArg(this);
            }
        }
        

        
        internal AstExecuteStatementArg(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstExecuteStatementArg(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExecuteStatementArg(Position p) : 
                base(p)
        {
        }
        
        internal AstExecuteStatementArg(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExecuteStatementArg Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExecuteStatementArg.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstExecuteStatementArgUnnamed), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExecuteStatementArgs), true, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstExecuteStatementArgNameds), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// execute_statement_arg : 
        ///    execute_statement_arg_unnamed execute_statement_args? 
        /// </summary>
        public static AstExecuteStatementArg ExecuteStatementArg(AstExecuteStatementArgUnnamed executeStatementArgUnnamed, AstExecuteStatementArgs executeStatementArgs)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteStatementArg.AstExecuteStatementArg1 result = new AstExecuteStatementArg.AstExecuteStatementArg1(arguments);
            return result;
        }
        
        /// <summary>
        /// execute_statement_arg : 
        ///    execute_statement_arg_nameds 
        /// </summary>
        public static AstExecuteStatementArg ExecuteStatementArg(AstExecuteStatementArgNameds executeStatementArgNameds)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteStatementArg.AstExecuteStatementArg2 result = new AstExecuteStatementArg.AstExecuteStatementArg2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// execute_statement_arg_named
    /// 	 : name = local_id  EQUAL  value = execute_parameter
    /// </summary>
    public partial class AstExecuteStatementArgNamed : AstRule
    {
        
        protected static string _rule = "execute_statement_arg_named\r\n\t : name = local_id  EQUAL  value = execute_paramete" +
            "r";
        
        internal AstExecuteStatementArgNamed(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstExecuteStatementArgNamed(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExecuteStatementArgNamed(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExecuteStatementArgNamed(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgNamed(this);
        }
        
        /// <summary>
        /// execute_statement_arg_named : 
        ///    name=local_id EQUAL value=execute_parameter 
        /// </summary>
        public static AstExecuteStatementArgNamed ExecuteStatementArgNamed(AstLocalId name, AstExecuteParameter value)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteStatementArgNamed result = new AstExecuteStatementArgNamed(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// execute_statement_arg_unnamed
    /// 	 : value = execute_parameter
    /// </summary>
    public partial class AstExecuteStatementArgUnnamed : AstRule
    {
        
        protected static string _rule = "execute_statement_arg_unnamed\r\n\t : value = execute_parameter";
        
        internal AstExecuteStatementArgUnnamed(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstExecuteStatementArgUnnamed(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExecuteStatementArgUnnamed(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExecuteStatementArgUnnamed(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgUnnamed(this);
        }
        
        /// <summary>
        /// execute_statement_arg_unnamed : 
        ///    value=execute_parameter 
        /// </summary>
        public static AstExecuteStatementArgUnnamed ExecuteStatementArgUnnamed(AstExecuteParameter value)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteStatementArgUnnamed result = new AstExecuteStatementArgUnnamed(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// execute_parameter
    /// 	 : (constant | local_id  output_out? | id_ | DEFAULT | NULL_)
    /// </summary>
    public partial class AstExecuteParameter : AstRule
    {
        
        protected static string _rule = "execute_parameter\r\n\t : (constant | local_id  output_out? | id_ | DEFAULT | NULL_)" +
            "";
        
        internal AstExecuteParameter(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstExecuteParameter(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExecuteParameter(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExecuteParameter(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteParameter(this);
        }
        
        /// <summary>
        /// execute_parameter : 
        ///    constant 
        /// </summary>
        public static AstExecuteParameter ExecuteParameter(AstConstant constant)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteParameter result = new AstExecuteParameter(arguments);
            return result;
        }
        
        /// <summary>
        /// execute_parameter : 
        ///    local_id output_out? 
        /// </summary>
        public static AstExecuteParameter ExecuteParameter(AstLocalId localId, AstOutputOut outputOut)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteParameter result = new AstExecuteParameter(arguments);
            return result;
        }
        
        /// <summary>
        /// execute_parameter : 
        ///    id_ 
        /// </summary>
        public static AstExecuteParameter ExecuteParameter(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteParameter result = new AstExecuteParameter(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// execute_var_string
    /// 	 : source = local_id  output_out?  (PLUS  more = local_id  (PLUS  execute_var_string)?)?
    /// 	 | stringtext  (PLUS  local_id  (PLUS  execute_var_string)?)?
    /// </summary>
    public abstract partial class AstExecuteVarString : AstRule
    {
        
        protected static string _rule = "execute_var_string\r\n\t : source = local_id  output_out?  (PLUS  more = local_id  (" +
            "PLUS  execute_var_string)?)?\r\n\t | stringtext  (PLUS  local_id  (PLUS  execute_va" +
            "r_string)?)?";
        
        /// <summary>
        /// execute_var_string : source = local_id  output_out?  (PLUS  more = local_id  (PLUS  execute_var_string)?)?
        /// </summary>
        public partial class AstExecuteVarString1 : AstExecuteVarString
        {
            
            internal AstExecuteVarString1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExecuteVarString1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExecuteVarString1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExecuteVarString1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteVarString(this);
            }
        }
        /// <summary>
        /// execute_var_string : stringtext  (PLUS  local_id  (PLUS  execute_var_string)?)?
        /// </summary>
        public partial class AstExecuteVarString2 : AstExecuteVarString
        {
            
            internal AstExecuteVarString2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExecuteVarString2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExecuteVarString2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExecuteVarString2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteVarString(this);
            }
        }
        

        
        internal AstExecuteVarString(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstExecuteVarString(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExecuteVarString(Position p) : 
                base(p)
        {
        }
        
        internal AstExecuteVarString(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExecuteVarString Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExecuteVarString.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOutputOut), true, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstLocalId), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstExecuteVarString), false, false))
                            {
                                return 1;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstLocalId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExecuteVarString), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// execute_var_string : 
        ///    source=local_id output_out? PLUS more=local_id PLUS execute_var_string 
        /// </summary>
        public static AstExecuteVarString ExecuteVarString(AstLocalId source, AstOutputOut outputOut, AstLocalId more, AstExecuteVarString executeVarString)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteVarString.AstExecuteVarString1 result = new AstExecuteVarString.AstExecuteVarString1(arguments);
            return result;
        }
        
        /// <summary>
        /// execute_var_string : 
        ///    stringtext PLUS local_id PLUS execute_var_string 
        /// </summary>
        public static AstExecuteVarString ExecuteVarString(AstStringtext stringtext, AstLocalId localId, AstExecuteVarString executeVarString)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteVarString.AstExecuteVarString2 result = new AstExecuteVarString.AstExecuteVarString2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// security_statement
    /// 	 : execute_clause  SEMI?
    /// 	 | GRANT  (ALL  PRIVILEGES? | grant_permission  (LR_BRACKET  column_name_list  RR_BRACKET)?)  (ON  (class_type_for_grant  DOUBLE_COLON)?  table = full_table_ref)?  TO  to_principal_rincipal_ids  (WITH  GRANT  OPTION)?  (AS  as_principal = principal_id)?  SEMI?
    /// 	 | REVERT  (LR_BRACKET  WITH  COOKIE  EQUAL  local_id  RR_BRACKET)?  SEMI?
    /// 	 | open_key
    /// 	 | close_key
    /// 	 | create_key
    /// 	 | create_certificate
    /// </summary>
    public abstract partial class AstSecurityStatement : AstAnotherStatement
    {
        
        protected static string _rule = @"security_statement
	 : execute_clause  SEMI?
	 | GRANT  (ALL  PRIVILEGES? | grant_permission  (LR_BRACKET  column_name_list  RR_BRACKET)?)  (ON  (class_type_for_grant  DOUBLE_COLON)?  table = full_table_ref)?  TO  to_principal_rincipal_ids  (WITH  GRANT  OPTION)?  (AS  as_principal = principal_id)?  SEMI?
	 | REVERT  (LR_BRACKET  WITH  COOKIE  EQUAL  local_id  RR_BRACKET)?  SEMI?
	 | open_key
	 | close_key
	 | create_key
	 | create_certificate";
        
        /// <summary>
        /// security_statement : execute_clause  SEMI?
        /// </summary>
        public partial class AstSecurityStatement1 : AstSecurityStatement
        {
            
            internal AstSecurityStatement1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSecurityStatement1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSecurityStatement1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSecurityStatement1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        /// <summary>
        /// security_statement : GRANT  (ALL  PRIVILEGES? | grant_permission  (LR_BRACKET  column_name_list  RR_BRACKET)?)  (ON  (class_type_for_grant  DOUBLE_COLON)?  table = full_table_ref)?  TO  to_principal_rincipal_ids  (WITH  GRANT  OPTION)?  (AS  as_principal = principal_id)?  SEMI?
        /// </summary>
        public partial class AstSecurityStatement2 : AstSecurityStatement
        {
            
            internal AstSecurityStatement2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSecurityStatement2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSecurityStatement2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSecurityStatement2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        /// <summary>
        /// security_statement : REVERT  (LR_BRACKET  WITH  COOKIE  EQUAL  local_id  RR_BRACKET)?  SEMI?
        /// </summary>
        public partial class AstSecurityStatement3 : AstSecurityStatement
        {
            
            internal AstSecurityStatement3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSecurityStatement3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSecurityStatement3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSecurityStatement3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        /// <summary>
        /// security_statement : open_key
        /// </summary>
        public partial class AstSecurityStatement4 : AstSecurityStatement
        {
            
            internal AstSecurityStatement4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSecurityStatement4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSecurityStatement4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSecurityStatement4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        /// <summary>
        /// security_statement : close_key
        /// </summary>
        public partial class AstSecurityStatement5 : AstSecurityStatement
        {
            
            internal AstSecurityStatement5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSecurityStatement5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSecurityStatement5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSecurityStatement5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        /// <summary>
        /// security_statement : create_key
        /// </summary>
        public partial class AstSecurityStatement6 : AstSecurityStatement
        {
            
            internal AstSecurityStatement6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSecurityStatement6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSecurityStatement6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSecurityStatement6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        /// <summary>
        /// security_statement : create_certificate
        /// </summary>
        public partial class AstSecurityStatement7 : AstSecurityStatement
        {
            
            internal AstSecurityStatement7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSecurityStatement7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSecurityStatement7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSecurityStatement7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        

        
        internal AstSecurityStatement(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstSecurityStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSecurityStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstSecurityStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSecurityStatement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSecurityStatement.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 6))
            {
                if (AstRoot.Eval(list[0], typeof(AstGrantPermission), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstColumnNameList), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstClassTypeForGrant), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstFullTableRef), false, false))
                            {
                                if (AstRoot.Eval(list[4], typeof(AstToPrincipalRincipalIds), false, false))
                                {
                                    if (AstRoot.Eval(list[5], typeof(AstPrincipalId), false, false))
                                    {
                                        return 2;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstExecuteClause), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOpenKey), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstCloseKey), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateKey), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateCertificate), false, false))
                {
                    return 7;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// security_statement : 
        ///    execute_clause SEMI? 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(AstExecuteClause executeClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSecurityStatement.AstSecurityStatement1 result = new AstSecurityStatement.AstSecurityStatement1(arguments);
            return result;
        }
        
        /// <summary>
        /// security_statement : 
        ///    GRANT ALL PRIVILEGES? ON class_type_for_grant :: table=full_table_ref TO to_principal_rincipal_ids WITH GRANT OPTION AS as_principal=principal_id SEMI? 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(AstClassTypeForGrant classTypeForGrant, AstFullTableRef table, AstToPrincipalRincipalIds toPrincipalRincipalIds, AstPrincipalId asPrincipal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSecurityStatement.AstSecurityStatement2 result = new AstSecurityStatement.AstSecurityStatement2(arguments);
            return result;
        }
        
        /// <summary>
        /// security_statement : 
        ///    GRANT grant_permission ( column_name_list ) ON class_type_for_grant :: table=full_table_ref TO to_principal_rincipal_ids WITH GRANT OPTION AS as_principal=principal_id SEMI? 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(AstGrantPermission grantPermission, AstColumnNameList columnNameList, AstClassTypeForGrant classTypeForGrant, AstFullTableRef table, AstToPrincipalRincipalIds toPrincipalRincipalIds, AstPrincipalId asPrincipal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSecurityStatement.AstSecurityStatement2 result = new AstSecurityStatement.AstSecurityStatement2(arguments);
            return result;
        }
        
        /// <summary>
        /// security_statement : 
        ///    REVERT ( WITH COOKIE EQUAL local_id ) SEMI? 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(AstLocalId localId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSecurityStatement.AstSecurityStatement3 result = new AstSecurityStatement.AstSecurityStatement3(arguments);
            return result;
        }
        
        /// <summary>
        /// security_statement : 
        ///    open_key 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(AstOpenKey openKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSecurityStatement.AstSecurityStatement4 result = new AstSecurityStatement.AstSecurityStatement4(arguments);
            return result;
        }
        
        /// <summary>
        /// security_statement : 
        ///    close_key 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(AstCloseKey closeKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSecurityStatement.AstSecurityStatement5 result = new AstSecurityStatement.AstSecurityStatement5(arguments);
            return result;
        }
        
        /// <summary>
        /// security_statement : 
        ///    create_key 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(AstCreateKey createKey)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSecurityStatement.AstSecurityStatement6 result = new AstSecurityStatement.AstSecurityStatement6(arguments);
            return result;
        }
        
        /// <summary>
        /// security_statement : 
        ///    create_certificate 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(AstCreateCertificate createCertificate)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSecurityStatement.AstSecurityStatement7 result = new AstSecurityStatement.AstSecurityStatement7(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// existing_keys
    /// 	 : ASSEMBLY  assembly_id
    /// 	 | EXECUTABLE?  FILE  EQUAL  path_to_file = stringtext  (WITH  PRIVATE  KEY  LR_BRACKET  private_key_options  RR_BRACKET)?
    /// </summary>
    public abstract partial class AstExistingKeys : AstRule
    {
        
        protected static string _rule = "existing_keys\r\n\t : ASSEMBLY  assembly_id\r\n\t | EXECUTABLE?  FILE  EQUAL  path_to_f" +
            "ile = stringtext  (WITH  PRIVATE  KEY  LR_BRACKET  private_key_options  RR_BRACK" +
            "ET)?";
        
        /// <summary>
        /// existing_keys : ASSEMBLY  assembly_id
        /// </summary>
        public partial class AstExistingKeys1 : AstExistingKeys
        {
            
            internal AstExistingKeys1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExistingKeys1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExistingKeys1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExistingKeys1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExistingKeys(this);
            }
        }
        /// <summary>
        /// existing_keys : EXECUTABLE?  FILE  EQUAL  path_to_file = stringtext  (WITH  PRIVATE  KEY  LR_BRACKET  private_key_options  RR_BRACKET)?
        /// </summary>
        public partial class AstExistingKeys2 : AstExistingKeys
        {
            
            internal AstExistingKeys2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExistingKeys2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExistingKeys2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExistingKeys2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExistingKeys(this);
            }
        }
        

        
        internal AstExistingKeys(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstExistingKeys(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExistingKeys(Position p) : 
                base(p)
        {
        }
        
        internal AstExistingKeys(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExistingKeys Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExistingKeys.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstPrivateKeyOptions), false, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAssemblyId), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// existing_keys : 
        ///    ASSEMBLY assembly_id 
        /// </summary>
        public static AstExistingKeys ExistingKeys(AstAssemblyId assemblyId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExistingKeys.AstExistingKeys1 result = new AstExistingKeys.AstExistingKeys1(arguments);
            return result;
        }
        
        /// <summary>
        /// existing_keys : 
        ///    EXECUTABLE? FILE EQUAL path_to_file=stringtext WITH PRIVATE KEY ( private_key_options ) 
        /// </summary>
        public static AstExistingKeys ExistingKeys(AstStringtext pathToFile, AstPrivateKeyOptions privateKeyOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExistingKeys.AstExistingKeys2 result = new AstExistingKeys.AstExistingKeys2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// private_key_options
    /// 	 : (FILE | binary_)  EQUAL  path = stringtext  (COMMA  encryption_decryption  BY  PASSWORD  EQUAL  password = stringtext)?
    /// </summary>
    public partial class AstPrivateKeyOptions : AstRule
    {
        
        protected static string _rule = "private_key_options\r\n\t : (FILE | binary_)  EQUAL  path = stringtext  (COMMA  encr" +
            "yption_decryption  BY  PASSWORD  EQUAL  password = stringtext)?";
        
        internal AstPrivateKeyOptions(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstPrivateKeyOptions(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstPrivateKeyOptions(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstPrivateKeyOptions(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrivateKeyOptions(this);
        }
        
        /// <summary>
        /// private_key_options : 
        ///    FILE EQUAL path=stringtext , encryption_decryption BY PASSWORD EQUAL password=stringtext 
        /// </summary>
        public static AstPrivateKeyOptions PrivateKeyOptions(AstStringtext path, AstEncryptionDecryption encryptionDecryption, AstStringtext password)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPrivateKeyOptions result = new AstPrivateKeyOptions(arguments);
            return result;
        }
        
        /// <summary>
        /// private_key_options : 
        ///    binary_ EQUAL path=stringtext , encryption_decryption BY PASSWORD EQUAL password=stringtext 
        /// </summary>
        public static AstPrivateKeyOptions PrivateKeyOptions(AstBinary binary, AstStringtext path, AstEncryptionDecryption encryptionDecryption, AstStringtext password)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPrivateKeyOptions result = new AstPrivateKeyOptions(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// open_key
    /// 	 : OPEN  SYMMETRIC  KEY  symmetric_key_id  DECRYPTION  BY  decryption_mechanism
    /// 	 | OPEN  MASTER  KEY  decryption_by_pwd
    /// </summary>
    public abstract partial class AstOpenKey : AstRule
    {
        
        protected static string _rule = "open_key\r\n\t : OPEN  SYMMETRIC  KEY  symmetric_key_id  DECRYPTION  BY  decryption_" +
            "mechanism\r\n\t | OPEN  MASTER  KEY  decryption_by_pwd";
        
        /// <summary>
        /// open_key : OPEN  SYMMETRIC  KEY  symmetric_key_id  DECRYPTION  BY  decryption_mechanism
        /// </summary>
        public partial class AstOpenKey1 : AstOpenKey
        {
            
            internal AstOpenKey1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstOpenKey1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstOpenKey1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstOpenKey1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOpenKey(this);
            }
        }
        /// <summary>
        /// open_key : OPEN  MASTER  KEY  decryption_by_pwd
        /// </summary>
        public partial class AstOpenKey2 : AstOpenKey
        {
            
            internal AstOpenKey2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstOpenKey2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstOpenKey2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstOpenKey2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOpenKey(this);
            }
        }
        

        
        internal AstOpenKey(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstOpenKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstOpenKey(Position p) : 
                base(p)
        {
        }
        
        internal AstOpenKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstOpenKey Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstOpenKey.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstSymmetricKeyId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecryptionMechanism), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecryptionByPwd), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// open_key : 
        ///    OPEN SYMMETRIC KEY symmetric_key_id DECRYPTION BY decryption_mechanism 
        /// </summary>
        public static AstOpenKey OpenKey(AstSymmetricKeyId symmetricKeyId, AstDecryptionMechanism decryptionMechanism)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstOpenKey.AstOpenKey1 result = new AstOpenKey.AstOpenKey1(arguments);
            return result;
        }
        
        /// <summary>
        /// open_key : 
        ///    OPEN MASTER KEY decryption_by_pwd 
        /// </summary>
        public static AstOpenKey OpenKey(AstDecryptionByPwd decryptionByPwd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstOpenKey.AstOpenKey2 result = new AstOpenKey.AstOpenKey2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// close_key
    /// 	 : CLOSE  SYMMETRIC  KEY  symmetric_key_id
    /// 	 | CLOSE  ALL  SYMMETRIC  KEYS
    /// 	 | CLOSE  MASTER  KEY
    /// </summary>
    public abstract partial class AstCloseKey : AstRule
    {
        
        protected static string _rule = "close_key\r\n\t : CLOSE  SYMMETRIC  KEY  symmetric_key_id\r\n\t | CLOSE  ALL  SYMMETRIC" +
            "  KEYS\r\n\t | CLOSE  MASTER  KEY";
        
        /// <summary>
        /// close_key : CLOSE  SYMMETRIC  KEY  symmetric_key_id
        /// </summary>
        public partial class AstCloseKey1 : AstCloseKey
        {
            
            internal AstCloseKey1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCloseKey1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCloseKey1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCloseKey1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCloseKey(this);
            }
        }
        /// <summary>
        /// close_key : CLOSE  ALL  SYMMETRIC  KEYS
        /// </summary>
        public partial class AstCloseKey2 : AstCloseKey
        {
            
            internal AstCloseKey2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCloseKey2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCloseKey2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCloseKey2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCloseKey(this);
            }
        }
        /// <summary>
        /// close_key : CLOSE  MASTER  KEY
        /// </summary>
        public partial class AstCloseKey3 : AstCloseKey
        {
            
            internal AstCloseKey3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCloseKey3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCloseKey3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCloseKey3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCloseKey(this);
            }
        }
        

        
        internal AstCloseKey(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCloseKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCloseKey(Position p) : 
                base(p)
        {
        }
        
        internal AstCloseKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCloseKey Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCloseKey.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSymmetricKeyId), false, false))
                {
                    return 1;
                }
            }
            if ((list.Count == 0))
            {
                return 2;
                return 3;
            }
            return 0;
        }
        
        /// <summary>
        /// close_key : 
        ///    CLOSE SYMMETRIC KEY symmetric_key_id 
        /// </summary>
        public static AstCloseKey CloseKey(AstSymmetricKeyId symmetricKeyId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCloseKey.AstCloseKey1 result = new AstCloseKey.AstCloseKey1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_key
    /// 	 : CREATE  MASTER  KEY  encryption_by_pwd
    /// 	 | CREATE  SYMMETRIC  KEY  symmetric_key_id  (AUTHORIZATION  user_id)?  (FROM  PROVIDER  provider_id)?  WITH  ((key_options | ENCRYPTION  BY  encryption_mechanism)  COMMA?)+
    /// </summary>
    public abstract partial class AstCreateKey : AstRule
    {
        
        protected static string _rule = "create_key\r\n\t : CREATE  MASTER  KEY  encryption_by_pwd\r\n\t | CREATE  SYMMETRIC  KE" +
            "Y  symmetric_key_id  (AUTHORIZATION  user_id)?  (FROM  PROVIDER  provider_id)?  " +
            "WITH  ((key_options | ENCRYPTION  BY  encryption_mechanism)  COMMA?)+";
        
        /// <summary>
        /// create_key : CREATE  MASTER  KEY  encryption_by_pwd
        /// </summary>
        public partial class AstCreateKey1 : AstCreateKey
        {
            
            internal AstCreateKey1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateKey1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateKey1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateKey1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateKey(this);
            }
        }
        /// <summary>
        /// create_key : CREATE  SYMMETRIC  KEY  symmetric_key_id  (AUTHORIZATION  user_id)?  (FROM  PROVIDER  provider_id)?  WITH  ((key_options | ENCRYPTION  BY  encryption_mechanism)  COMMA?)+
        /// </summary>
        public partial class AstCreateKey2 : AstCreateKey
        {
            
            internal AstCreateKey2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateKey2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateKey2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateKey2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateKey(this);
            }
        }
        

        
        internal AstCreateKey(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCreateKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateKey(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateKey Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateKey.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 5))
            {
                if (AstRoot.Eval(list[0], typeof(AstSymmetricKeyId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstUserId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstProviderId), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstKeyOptions), false, false))
                            {
                                if (AstRoot.Eval(list[4], typeof(AstEncryptionMechanism), false, false))
                                {
                                    return 2;
                                }
                            }
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstEncryptionByPwd), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_key : 
        ///    CREATE MASTER KEY encryption_by_pwd 
        /// </summary>
        public static AstCreateKey CreateKey(AstEncryptionByPwd encryptionByPwd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateKey.AstCreateKey1 result = new AstCreateKey.AstCreateKey1(arguments);
            return result;
        }
        
        /// <summary>
        /// create_key : 
        ///    CREATE SYMMETRIC KEY symmetric_key_id AUTHORIZATION user_id FROM PROVIDER provider_id WITH key_options COMMA? 
        /// </summary>
        public static AstCreateKey CreateKey(AstSymmetricKeyId symmetricKeyId, AstUserId userId, AstProviderId providerId, AstKeyOptions keyOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateKey.AstCreateKey2 result = new AstCreateKey.AstCreateKey2(arguments);
            return result;
        }
        
        /// <summary>
        /// create_key : 
        ///    CREATE SYMMETRIC KEY symmetric_key_id AUTHORIZATION user_id FROM PROVIDER provider_id WITH ENCRYPTION BY encryption_mechanism COMMA? 
        /// </summary>
        public static AstCreateKey CreateKey(AstSymmetricKeyId symmetricKeyId, AstUserId userId, AstProviderId providerId, AstEncryptionMechanism encryptionMechanism)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateKey.AstCreateKey2 result = new AstCreateKey.AstCreateKey2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// key_options
    /// 	 : KEY_SOURCE  EQUAL  pass_phrase = stringtext
    /// 	 | ALGORITHM  EQUAL  algorithm
    /// 	 | IDENTITY_VALUE  EQUAL  identity_phrase = stringtext
    /// 	 | PROVIDER_KEY_NAME  EQUAL  key_name_in_provider = stringtext
    /// 	 | CREATION_DISPOSITION  EQUAL  (CREATE_NEW | OPEN_EXISTING)
    /// </summary>
    public abstract partial class AstKeyOptions : AstRule
    {
        
        protected static string _rule = @"key_options
	 : KEY_SOURCE  EQUAL  pass_phrase = stringtext
	 | ALGORITHM  EQUAL  algorithm
	 | IDENTITY_VALUE  EQUAL  identity_phrase = stringtext
	 | PROVIDER_KEY_NAME  EQUAL  key_name_in_provider = stringtext
	 | CREATION_DISPOSITION  EQUAL  (CREATE_NEW | OPEN_EXISTING)";
        
        /// <summary>
        /// key_options : KEY_SOURCE  EQUAL  pass_phrase = stringtext
        /// </summary>
        public partial class AstKeyOptions1 : AstKeyOptions
        {
            
            internal AstKeyOptions1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstKeyOptions1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstKeyOptions1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstKeyOptions1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKeyOptions(this);
            }
        }
        /// <summary>
        /// key_options : ALGORITHM  EQUAL  algorithm
        /// </summary>
        public partial class AstKeyOptions2 : AstKeyOptions
        {
            
            internal AstKeyOptions2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstKeyOptions2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstKeyOptions2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstKeyOptions2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKeyOptions(this);
            }
        }
        /// <summary>
        /// key_options : IDENTITY_VALUE  EQUAL  identity_phrase = stringtext
        /// </summary>
        public partial class AstKeyOptions3 : AstKeyOptions
        {
            
            internal AstKeyOptions3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstKeyOptions3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstKeyOptions3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstKeyOptions3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKeyOptions(this);
            }
        }
        /// <summary>
        /// key_options : PROVIDER_KEY_NAME  EQUAL  key_name_in_provider = stringtext
        /// </summary>
        public partial class AstKeyOptions4 : AstKeyOptions
        {
            
            internal AstKeyOptions4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstKeyOptions4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstKeyOptions4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstKeyOptions4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKeyOptions(this);
            }
        }
        /// <summary>
        /// key_options : CREATION_DISPOSITION  EQUAL  (CREATE_NEW | OPEN_EXISTING)
        /// </summary>
        public partial class AstKeyOptions5 : AstKeyOptions
        {
            
            internal AstKeyOptions5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstKeyOptions5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstKeyOptions5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstKeyOptions5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKeyOptions(this);
            }
        }
        

        
        internal AstKeyOptions(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstKeyOptions(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstKeyOptions(Position p) : 
                base(p)
        {
        }
        
        internal AstKeyOptions(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstKeyOptions Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstKeyOptions.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlgorithm), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 4;
                }
            }
            if ((list.Count == 0))
            {
                return 5;
            }
            return 0;
        }
        
        /// <summary>
        /// key_options : 
        ///    KEY_SOURCE EQUAL pass_phrase=stringtext 
        /// </summary>
        public static AstKeyOptions KeyOptions(AstStringtext passPhrase)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstKeyOptions.AstKeyOptions1 result = new AstKeyOptions.AstKeyOptions1(arguments);
            return result;
        }
        
        /// <summary>
        /// key_options : 
        ///    ALGORITHM EQUAL algorithm 
        /// </summary>
        public static AstKeyOptions KeyOptions(AstAlgorithm algorithm)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstKeyOptions.AstKeyOptions2 result = new AstKeyOptions.AstKeyOptions2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// encryption_mechanism
    /// 	 : CERTIFICATE  certificate_id
    /// 	 | ASYMMETRIC  KEY  asym_key_id
    /// 	 | SYMMETRIC  KEY  symmetric_key_id
    /// 	 | PASSWORD  EQUAL  stringtext
    /// </summary>
    public abstract partial class AstEncryptionMechanism : AstRule
    {
        
        protected static string _rule = "encryption_mechanism\r\n\t : CERTIFICATE  certificate_id\r\n\t | ASYMMETRIC  KEY  asym_" +
            "key_id\r\n\t | SYMMETRIC  KEY  symmetric_key_id\r\n\t | PASSWORD  EQUAL  stringtext";
        
        /// <summary>
        /// encryption_mechanism : CERTIFICATE  certificate_id
        /// </summary>
        public partial class AstEncryptionMechanism1 : AstEncryptionMechanism
        {
            
            internal AstEncryptionMechanism1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstEncryptionMechanism1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstEncryptionMechanism1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstEncryptionMechanism1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEncryptionMechanism(this);
            }
        }
        /// <summary>
        /// encryption_mechanism : ASYMMETRIC  KEY  asym_key_id
        /// </summary>
        public partial class AstEncryptionMechanism2 : AstEncryptionMechanism
        {
            
            internal AstEncryptionMechanism2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstEncryptionMechanism2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstEncryptionMechanism2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstEncryptionMechanism2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEncryptionMechanism(this);
            }
        }
        /// <summary>
        /// encryption_mechanism : SYMMETRIC  KEY  symmetric_key_id
        /// </summary>
        public partial class AstEncryptionMechanism3 : AstEncryptionMechanism
        {
            
            internal AstEncryptionMechanism3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstEncryptionMechanism3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstEncryptionMechanism3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstEncryptionMechanism3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEncryptionMechanism(this);
            }
        }
        /// <summary>
        /// encryption_mechanism : PASSWORD  EQUAL  stringtext
        /// </summary>
        public partial class AstEncryptionMechanism4 : AstEncryptionMechanism
        {
            
            internal AstEncryptionMechanism4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstEncryptionMechanism4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstEncryptionMechanism4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstEncryptionMechanism4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEncryptionMechanism(this);
            }
        }
        

        
        internal AstEncryptionMechanism(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstEncryptionMechanism(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEncryptionMechanism(Position p) : 
                base(p)
        {
        }
        
        internal AstEncryptionMechanism(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstEncryptionMechanism Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstEncryptionMechanism.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstCertificateId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstAsymKeyId), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstSymmetricKeyId), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// encryption_mechanism : 
        ///    CERTIFICATE certificate_id 
        /// </summary>
        public static AstEncryptionMechanism EncryptionMechanism(AstCertificateId certificateId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEncryptionMechanism.AstEncryptionMechanism1 result = new AstEncryptionMechanism.AstEncryptionMechanism1(arguments);
            return result;
        }
        
        /// <summary>
        /// encryption_mechanism : 
        ///    ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public static AstEncryptionMechanism EncryptionMechanism(AstAsymKeyId asymKeyId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEncryptionMechanism.AstEncryptionMechanism2 result = new AstEncryptionMechanism.AstEncryptionMechanism2(arguments);
            return result;
        }
        
        /// <summary>
        /// encryption_mechanism : 
        ///    SYMMETRIC KEY symmetric_key_id 
        /// </summary>
        public static AstEncryptionMechanism EncryptionMechanism(AstSymmetricKeyId symmetricKeyId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEncryptionMechanism.AstEncryptionMechanism3 result = new AstEncryptionMechanism.AstEncryptionMechanism3(arguments);
            return result;
        }
        
        /// <summary>
        /// encryption_mechanism : 
        ///    PASSWORD EQUAL stringtext 
        /// </summary>
        public static AstEncryptionMechanism EncryptionMechanism(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEncryptionMechanism.AstEncryptionMechanism4 result = new AstEncryptionMechanism.AstEncryptionMechanism4(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// decryption_mechanism
    /// 	 : CERTIFICATE  certificate_id  (WITH  PASSWORD  EQUAL  stringtext)?
    /// 	 | ASYMMETRIC  KEY  asym_key_id  (WITH  PASSWORD  EQUAL  stringtext)?
    /// 	 | SYMMETRIC  KEY  symmetric_key_id
    /// 	 | PASSWORD  EQUAL  stringtext
    /// </summary>
    public abstract partial class AstDecryptionMechanism : AstRule
    {
        
        protected static string _rule = "decryption_mechanism\r\n\t : CERTIFICATE  certificate_id  (WITH  PASSWORD  EQUAL  st" +
            "ringtext)?\r\n\t | ASYMMETRIC  KEY  asym_key_id  (WITH  PASSWORD  EQUAL  stringtext" +
            ")?\r\n\t | SYMMETRIC  KEY  symmetric_key_id\r\n\t | PASSWORD  EQUAL  stringtext";
        
        /// <summary>
        /// decryption_mechanism : CERTIFICATE  certificate_id  (WITH  PASSWORD  EQUAL  stringtext)?
        /// </summary>
        public partial class AstDecryptionMechanism1 : AstDecryptionMechanism
        {
            
            internal AstDecryptionMechanism1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDecryptionMechanism1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDecryptionMechanism1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDecryptionMechanism1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecryptionMechanism(this);
            }
        }
        /// <summary>
        /// decryption_mechanism : ASYMMETRIC  KEY  asym_key_id  (WITH  PASSWORD  EQUAL  stringtext)?
        /// </summary>
        public partial class AstDecryptionMechanism2 : AstDecryptionMechanism
        {
            
            internal AstDecryptionMechanism2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDecryptionMechanism2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDecryptionMechanism2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDecryptionMechanism2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecryptionMechanism(this);
            }
        }
        /// <summary>
        /// decryption_mechanism : SYMMETRIC  KEY  symmetric_key_id
        /// </summary>
        public partial class AstDecryptionMechanism3 : AstDecryptionMechanism
        {
            
            internal AstDecryptionMechanism3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDecryptionMechanism3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDecryptionMechanism3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDecryptionMechanism3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecryptionMechanism(this);
            }
        }
        /// <summary>
        /// decryption_mechanism : PASSWORD  EQUAL  stringtext
        /// </summary>
        public partial class AstDecryptionMechanism4 : AstDecryptionMechanism
        {
            
            internal AstDecryptionMechanism4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDecryptionMechanism4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDecryptionMechanism4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDecryptionMechanism4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecryptionMechanism(this);
            }
        }
        

        
        internal AstDecryptionMechanism(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstDecryptionMechanism(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDecryptionMechanism(Position p) : 
                base(p)
        {
        }
        
        internal AstDecryptionMechanism(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDecryptionMechanism Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDecryptionMechanism.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstCertificateId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstAsymKeyId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSymmetricKeyId), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// decryption_mechanism : 
        ///    CERTIFICATE certificate_id WITH PASSWORD EQUAL stringtext 
        /// </summary>
        public static AstDecryptionMechanism DecryptionMechanism(AstCertificateId certificateId, AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDecryptionMechanism.AstDecryptionMechanism1 result = new AstDecryptionMechanism.AstDecryptionMechanism1(arguments);
            return result;
        }
        
        /// <summary>
        /// decryption_mechanism : 
        ///    ASYMMETRIC KEY asym_key_id WITH PASSWORD EQUAL stringtext 
        /// </summary>
        public static AstDecryptionMechanism DecryptionMechanism(AstAsymKeyId asymKeyId, AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDecryptionMechanism.AstDecryptionMechanism2 result = new AstDecryptionMechanism.AstDecryptionMechanism2(arguments);
            return result;
        }
        
        /// <summary>
        /// decryption_mechanism : 
        ///    SYMMETRIC KEY symmetric_key_id 
        /// </summary>
        public static AstDecryptionMechanism DecryptionMechanism(AstSymmetricKeyId symmetricKeyId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDecryptionMechanism.AstDecryptionMechanism3 result = new AstDecryptionMechanism.AstDecryptionMechanism3(arguments);
            return result;
        }
        
        /// <summary>
        /// decryption_mechanism : 
        ///    PASSWORD EQUAL stringtext 
        /// </summary>
        public static AstDecryptionMechanism DecryptionMechanism(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDecryptionMechanism.AstDecryptionMechanism4 result = new AstDecryptionMechanism.AstDecryptionMechanism4(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// grant_permission
    /// 	 : grant_permission_enum
    /// 	 | grant_permission_alter
    /// 	 | grant_permission_create
    /// </summary>
    public abstract partial class AstGrantPermission : AstRule
    {
        
        protected static string _rule = "grant_permission\r\n\t : grant_permission_enum\r\n\t | grant_permission_alter\r\n\t | gran" +
            "t_permission_create";
        
        /// <summary>
        /// grant_permission : grant_permission_enum
        /// </summary>
        public partial class AstGrantPermission1 : AstGrantPermission
        {
            
            internal AstGrantPermission1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstGrantPermission1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstGrantPermission1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstGrantPermission1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGrantPermission(this);
            }
        }
        /// <summary>
        /// grant_permission : grant_permission_alter
        /// </summary>
        public partial class AstGrantPermission2 : AstGrantPermission
        {
            
            internal AstGrantPermission2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstGrantPermission2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstGrantPermission2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstGrantPermission2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGrantPermission(this);
            }
        }
        /// <summary>
        /// grant_permission : grant_permission_create
        /// </summary>
        public partial class AstGrantPermission3 : AstGrantPermission
        {
            
            internal AstGrantPermission3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstGrantPermission3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstGrantPermission3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstGrantPermission3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGrantPermission(this);
            }
        }
        

        
        internal AstGrantPermission(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstGrantPermission(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstGrantPermission(Position p) : 
                base(p)
        {
        }
        
        internal AstGrantPermission(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstGrantPermission Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstGrantPermission.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstGrantPermissionEnum), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstGrantPermissionAlter), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstGrantPermissionCreate), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// grant_permission : 
        ///    grant_permission_enum 
        /// </summary>
        public static AstGrantPermission GrantPermission(AstGrantPermissionEnum grantPermissionEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstGrantPermission.AstGrantPermission1 result = new AstGrantPermission.AstGrantPermission1(arguments);
            return result;
        }
        
        /// <summary>
        /// grant_permission : 
        ///    grant_permission_alter 
        /// </summary>
        public static AstGrantPermission GrantPermission(AstGrantPermissionAlter grantPermissionAlter)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstGrantPermission.AstGrantPermission2 result = new AstGrantPermission.AstGrantPermission2(arguments);
            return result;
        }
        
        /// <summary>
        /// grant_permission : 
        ///    grant_permission_create 
        /// </summary>
        public static AstGrantPermission GrantPermission(AstGrantPermissionCreate grantPermissionCreate)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstGrantPermission.AstGrantPermission3 result = new AstGrantPermission.AstGrantPermission3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// set_statement
    /// 	 : SET  local_id  (DOT  member_name = id_)?  EQUAL  expression  SEMI?
    /// 	 | SET  local_id  assignment_operator  expression  SEMI?
    /// 	 | SET  local_id  EQUAL  CURSOR  declare_set_cursor_common  (FOR  (READ  ONLY | UPDATE  (OF  column_name_list)?))?  SEMI?
    /// 	 | set_special
    /// </summary>
    public abstract partial class AstSetStatement : AstAnotherStatement
    {
        
        protected static string _rule = @"set_statement
	 : SET  local_id  (DOT  member_name = id_)?  EQUAL  expression  SEMI?
	 | SET  local_id  assignment_operator  expression  SEMI?
	 | SET  local_id  EQUAL  CURSOR  declare_set_cursor_common  (FOR  (READ  ONLY | UPDATE  (OF  column_name_list)?))?  SEMI?
	 | set_special";
        
        /// <summary>
        /// set_statement : SET  local_id  (DOT  member_name = id_)?  EQUAL  expression  SEMI?
        /// </summary>
        public partial class AstSetStatement1 : AstSetStatement
        {
            
            internal AstSetStatement1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSetStatement1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSetStatement1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSetStatement1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetStatement(this);
            }
        }
        /// <summary>
        /// set_statement : SET  local_id  assignment_operator  expression  SEMI?
        /// </summary>
        public partial class AstSetStatement2 : AstSetStatement
        {
            
            internal AstSetStatement2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSetStatement2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSetStatement2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSetStatement2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetStatement(this);
            }
        }
        /// <summary>
        /// set_statement : SET  local_id  EQUAL  CURSOR  declare_set_cursor_common  (FOR  (READ  ONLY | UPDATE  (OF  column_name_list)?))?  SEMI?
        /// </summary>
        public partial class AstSetStatement3 : AstSetStatement
        {
            
            internal AstSetStatement3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSetStatement3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSetStatement3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSetStatement3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetStatement(this);
            }
        }
        /// <summary>
        /// set_statement : set_special
        /// </summary>
        public partial class AstSetStatement4 : AstSetStatement
        {
            
            internal AstSetStatement4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSetStatement4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSetStatement4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSetStatement4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetStatement(this);
            }
        }
        

        
        internal AstSetStatement(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstSetStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSetStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstSetStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSetStatement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSetStatement.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 1;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAssignmentOperator), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 2;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDeclareSetCursorCommon), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstColumnNameList), false, false))
                        {
                            return 3;
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSetSpecial), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// set_statement : 
        ///    SET local_id . member_name=id_ EQUAL expression SEMI? 
        /// </summary>
        public static AstSetStatement SetStatement(AstLocalId localId, AstId memberName, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetStatement.AstSetStatement1 result = new AstSetStatement.AstSetStatement1(arguments);
            return result;
        }
        
        /// <summary>
        /// set_statement : 
        ///    SET local_id assignment_operator expression SEMI? 
        /// </summary>
        public static AstSetStatement SetStatement(AstLocalId localId, AstAssignmentOperator assignmentOperator, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetStatement.AstSetStatement2 result = new AstSetStatement.AstSetStatement2(arguments);
            return result;
        }
        
        /// <summary>
        /// set_statement : 
        ///    SET local_id EQUAL CURSOR declare_set_cursor_common FOR READ ONLY SEMI? 
        /// </summary>
        public static AstSetStatement SetStatement(AstLocalId localId, AstDeclareSetCursorCommon declareSetCursorCommon)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetStatement.AstSetStatement3 result = new AstSetStatement.AstSetStatement3(arguments);
            return result;
        }
        
        /// <summary>
        /// set_statement : 
        ///    SET local_id EQUAL CURSOR declare_set_cursor_common FOR UPDATE OF column_name_list SEMI? 
        /// </summary>
        public static AstSetStatement SetStatement(AstLocalId localId, AstDeclareSetCursorCommon declareSetCursorCommon, AstColumnNameList columnNameList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetStatement.AstSetStatement3 result = new AstSetStatement.AstSetStatement3(arguments);
            return result;
        }
        
        /// <summary>
        /// set_statement : 
        ///    set_special 
        /// </summary>
        public static AstSetStatement SetStatement(AstSetSpecial setSpecial)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetStatement.AstSetStatement4 result = new AstSetStatement.AstSetStatement4(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// transaction_statement
    /// 	 : BEGIN  DISTRIBUTED  transaction  transaction_ref?
    /// 	 | BEGIN  transaction  (transaction_ref  (WITH  MARK  mark = stringtext)?)?
    /// 	 | COMMIT  transaction  (transaction_ref  (WITH  LR_BRACKET  DELAYED_DURABILITY  EQUAL  on_off  RR_BRACKET)?)?
    /// 	 | COMMIT  WORK?
    /// 	 | COMMIT  transaction_id
    /// 	 | ROLLBACK  transaction_id
    /// 	 | ROLLBACK  transaction  transaction_ref?
    /// 	 | ROLLBACK  WORK?
    /// 	 | SAVE  transaction  transaction_ref?
    /// </summary>
    public abstract partial class AstTransactionStatement : AstAnotherStatement
    {
        
        protected static string _rule = @"transaction_statement
	 : BEGIN  DISTRIBUTED  transaction  transaction_ref?
	 | BEGIN  transaction  (transaction_ref  (WITH  MARK  mark = stringtext)?)?
	 | COMMIT  transaction  (transaction_ref  (WITH  LR_BRACKET  DELAYED_DURABILITY  EQUAL  on_off  RR_BRACKET)?)?
	 | COMMIT  WORK?
	 | COMMIT  transaction_id
	 | ROLLBACK  transaction_id
	 | ROLLBACK  transaction  transaction_ref?
	 | ROLLBACK  WORK?
	 | SAVE  transaction  transaction_ref?";
        
        /// <summary>
        /// transaction_statement : BEGIN  DISTRIBUTED  transaction  transaction_ref?
        /// </summary>
        public partial class AstTransactionStatement1 : AstTransactionStatement
        {
            
            internal AstTransactionStatement1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTransactionStatement1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTransactionStatement1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTransactionStatement1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : BEGIN  transaction  (transaction_ref  (WITH  MARK  mark = stringtext)?)?
        /// </summary>
        public partial class AstTransactionStatement2 : AstTransactionStatement
        {
            
            internal AstTransactionStatement2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTransactionStatement2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTransactionStatement2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTransactionStatement2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : COMMIT  transaction  (transaction_ref  (WITH  LR_BRACKET  DELAYED_DURABILITY  EQUAL  on_off  RR_BRACKET)?)?
        /// </summary>
        public partial class AstTransactionStatement3 : AstTransactionStatement
        {
            
            internal AstTransactionStatement3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTransactionStatement3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTransactionStatement3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTransactionStatement3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : COMMIT  WORK?
        /// </summary>
        public partial class AstTransactionStatement4 : AstTransactionStatement
        {
            
            internal AstTransactionStatement4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTransactionStatement4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTransactionStatement4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTransactionStatement4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : COMMIT  transaction_id
        /// </summary>
        public partial class AstTransactionStatement5 : AstTransactionStatement
        {
            
            internal AstTransactionStatement5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTransactionStatement5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTransactionStatement5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTransactionStatement5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : ROLLBACK  transaction_id
        /// </summary>
        public partial class AstTransactionStatement6 : AstTransactionStatement
        {
            
            internal AstTransactionStatement6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTransactionStatement6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTransactionStatement6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTransactionStatement6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : ROLLBACK  transaction  transaction_ref?
        /// </summary>
        public partial class AstTransactionStatement7 : AstTransactionStatement
        {
            
            internal AstTransactionStatement7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTransactionStatement7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTransactionStatement7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTransactionStatement7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : ROLLBACK  WORK?
        /// </summary>
        public partial class AstTransactionStatement8 : AstTransactionStatement
        {
            
            internal AstTransactionStatement8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTransactionStatement8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTransactionStatement8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTransactionStatement8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : SAVE  transaction  transaction_ref?
        /// </summary>
        public partial class AstTransactionStatement9 : AstTransactionStatement
        {
            
            internal AstTransactionStatement9(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTransactionStatement9(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTransactionStatement9(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTransactionStatement9(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        

        
        internal AstTransactionStatement(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstTransactionStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTransactionStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstTransactionStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTransactionStatement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTransactionStatement.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstTransaction), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstTransactionRef), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstStringtext), false, false))
                        {
                            return 2;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstTransaction), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstTransactionRef), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOnOff), false, false))
                        {
                            return 3;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstTransaction), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstTransactionRef), true, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstTransaction), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstTransactionRef), true, false))
                    {
                        return 7;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstTransaction), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstTransactionRef), true, false))
                    {
                        return 9;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstTransactionId), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstTransactionId), false, false))
                {
                    return 6;
                }
            }
            if ((list.Count == 0))
            {
                return 4;
                return 8;
            }
            return 0;
        }
        
        /// <summary>
        /// transaction_statement : 
        ///    BEGIN DISTRIBUTED transaction transaction_ref? 
        /// </summary>
        public static AstTransactionStatement TransactionStatement(AstTransaction transaction, AstTransactionRef transactionRef)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTransactionStatement.AstTransactionStatement1 result = new AstTransactionStatement.AstTransactionStatement1(arguments);
            return result;
        }
        
        /// <summary>
        /// transaction_statement : 
        ///    BEGIN transaction transaction_ref WITH MARK mark=stringtext 
        /// </summary>
        public static AstTransactionStatement TransactionStatement(AstTransaction transaction, AstTransactionRef transactionRef, AstStringtext mark)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTransactionStatement.AstTransactionStatement2 result = new AstTransactionStatement.AstTransactionStatement2(arguments);
            return result;
        }
        
        /// <summary>
        /// transaction_statement : 
        ///    COMMIT transaction transaction_ref WITH ( DELAYED_DURABILITY EQUAL on_off ) 
        /// </summary>
        public static AstTransactionStatement TransactionStatement(AstTransaction transaction, AstTransactionRef transactionRef, AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTransactionStatement.AstTransactionStatement3 result = new AstTransactionStatement.AstTransactionStatement3(arguments);
            return result;
        }
        
        /// <summary>
        /// transaction_statement : 
        ///    COMMIT transaction_id 
        /// </summary>
        public static AstTransactionStatement TransactionStatement(AstTransactionId transactionId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTransactionStatement.AstTransactionStatement5 result = new AstTransactionStatement.AstTransactionStatement5(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// go_statement
    /// 	 : GO  (count = decimal)?
    /// </summary>
    public partial class AstGoStatement : AstRule
    {
        
        protected static string _rule = "go_statement\r\n\t : GO  (count = decimal)?";
        
        internal AstGoStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstGoStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstGoStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstGoStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGoStatement(this);
        }
        
        /// <summary>
        /// go_statement : 
        ///    GO count=decimal()? 
        /// </summary>
        public static AstGoStatement GoStatement(AstDecimal count)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstGoStatement result = new AstGoStatement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// setuser_statement
    /// 	 : SETUSER  user = stringtext
    /// </summary>
    public partial class AstSetuserStatement : AstAnotherStatement
    {
        
        protected static string _rule = "setuser_statement\r\n\t : SETUSER  user = stringtext";
        
        internal AstSetuserStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSetuserStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSetuserStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSetuserStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetuserStatement(this);
        }
        
        /// <summary>
        /// setuser_statement : 
        ///    SETUSER user=stringtext 
        /// </summary>
        public static AstSetuserStatement SetuserStatement(AstStringtext user)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetuserStatement result = new AstSetuserStatement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// reconfigure_statement
    /// 	 : RECONFIGURE  (WITH  OVERRIDE)?
    /// </summary>
    public partial class AstReconfigureStatement : AstAnotherStatement
    {
        
        protected static string _rule = "reconfigure_statement\r\n\t : RECONFIGURE  (WITH  OVERRIDE)?";
        
        internal AstReconfigureStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstReconfigureStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstReconfigureStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstReconfigureStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReconfigureStatement(this);
        }
    }
    
    /// <summary>
    /// shutdown_statement
    /// 	 : SHUTDOWN  (WITH  NOWAIT)?
    /// </summary>
    public partial class AstShutdownStatement : AstAnotherStatement
    {
        
        protected static string _rule = "shutdown_statement\r\n\t : SHUTDOWN  (WITH  NOWAIT)?";
        
        internal AstShutdownStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstShutdownStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstShutdownStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstShutdownStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitShutdownStatement(this);
        }
    }
    
    /// <summary>
    /// checkpoint_statement
    /// 	 : CHECKPOINT  (checkPointDuration = decimal)?
    /// </summary>
    public partial class AstCheckpointStatement : AstAnotherStatement
    {
        
        protected static string _rule = "checkpoint_statement\r\n\t : CHECKPOINT  (checkPointDuration = decimal)?";
        
        internal AstCheckpointStatement(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCheckpointStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCheckpointStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCheckpointStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCheckpointStatement(this);
        }
        
        /// <summary>
        /// checkpoint_statement : 
        ///    CHECKPOINT checkPointDuration=decimal()? 
        /// </summary>
        public static AstCheckpointStatement CheckpointStatement(AstDecimal checkPointDuration)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCheckpointStatement result = new AstCheckpointStatement(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// dbcc_special
    /// 	 : DBCC  SHRINKLOG  (LR_BRACKET  SIZE  EQUAL  (constant_expression | id_ | DEFAULT)  RR_BRACKET)?  SEMI?
    /// </summary>
    public partial class AstDbccSpecial : AstRule
    {
        
        protected static string _rule = "dbcc_special\r\n\t : DBCC  SHRINKLOG  (LR_BRACKET  SIZE  EQUAL  (constant_expression" +
            " | id_ | DEFAULT)  RR_BRACKET)?  SEMI?";
        
        internal AstDbccSpecial(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDbccSpecial(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDbccSpecial(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDbccSpecial(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccSpecial(this);
        }
        
        /// <summary>
        /// dbcc_special : 
        ///    DBCC SHRINKLOG ( SIZE EQUAL constant_expression ) SEMI? 
        /// </summary>
        public static AstDbccSpecial DbccSpecial(AstConstantExpression constantExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDbccSpecial result = new AstDbccSpecial(arguments);
            return result;
        }
        
        /// <summary>
        /// dbcc_special : 
        ///    DBCC SHRINKLOG ( SIZE EQUAL id_ ) SEMI? 
        /// </summary>
        public static AstDbccSpecial DbccSpecial(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDbccSpecial result = new AstDbccSpecial(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// dbcc_clause
    /// 	 : DBCC  name = dbcc_command  (LR_BRACKET  expression_list  RR_BRACKET)?  (WITH  dbcc_options)?  SEMI?
    /// </summary>
    public partial class AstDbccClause : AstRule
    {
        
        protected static string _rule = "dbcc_clause\r\n\t : DBCC  name = dbcc_command  (LR_BRACKET  expression_list  RR_BRAC" +
            "KET)?  (WITH  dbcc_options)?  SEMI?";
        
        internal AstDbccClause(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDbccClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDbccClause(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDbccClause(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccClause(this);
        }
        
        /// <summary>
        /// dbcc_clause : 
        ///    DBCC name=dbcc_command ( expression_list ) WITH dbcc_options SEMI? 
        /// </summary>
        public static AstDbccClause DbccClause(AstDbccCommand name, AstExpressionList expressionList, AstDbccOptions dbccOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDbccClause result = new AstDbccClause(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// dbcc_command
    /// 	 : simple_id
    /// 	 | keyword
    /// </summary>
    public abstract partial class AstDbccCommand : AstRule
    {
        
        protected static string _rule = "dbcc_command\r\n\t : simple_id\r\n\t | keyword";
        
        /// <summary>
        /// dbcc_command : simple_id
        /// </summary>
        public partial class AstDbccCommand1 : AstDbccCommand
        {
            
            internal AstDbccCommand1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDbccCommand1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDbccCommand1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDbccCommand1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDbccCommand(this);
            }
        }
        /// <summary>
        /// dbcc_command : keyword
        /// </summary>
        public partial class AstDbccCommand2 : AstDbccCommand
        {
            
            internal AstDbccCommand2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDbccCommand2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDbccCommand2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDbccCommand2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDbccCommand(this);
            }
        }
        

        
        internal AstDbccCommand(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstDbccCommand(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDbccCommand(Position p) : 
                base(p)
        {
        }
        
        internal AstDbccCommand(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDbccCommand Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDbccCommand.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSimpleId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstKeyword), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// dbcc_command : 
        ///    simple_id 
        /// </summary>
        public static AstDbccCommand DbccCommand(AstSimpleId simpleId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDbccCommand.AstDbccCommand1 result = new AstDbccCommand.AstDbccCommand1(arguments);
            return result;
        }
        
        /// <summary>
        /// dbcc_command : 
        ///    keyword 
        /// </summary>
        public static AstDbccCommand DbccCommand(AstKeyword keyword)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDbccCommand.AstDbccCommand2 result = new AstDbccCommand.AstDbccCommand2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// execute_clause_mode
    /// 	 : execute_clause_mode_enum
    /// 	 | stringtext
    /// </summary>
    public abstract partial class AstExecuteClauseMode : AstRule
    {
        
        protected static string _rule = "execute_clause_mode\r\n\t : execute_clause_mode_enum\r\n\t | stringtext";
        
        /// <summary>
        /// execute_clause_mode : execute_clause_mode_enum
        /// </summary>
        public partial class AstExecuteClauseMode1 : AstExecuteClauseMode
        {
            
            internal AstExecuteClauseMode1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExecuteClauseMode1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExecuteClauseMode1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExecuteClauseMode1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteClauseMode(this);
            }
        }
        /// <summary>
        /// execute_clause_mode : stringtext
        /// </summary>
        public partial class AstExecuteClauseMode2 : AstExecuteClauseMode
        {
            
            internal AstExecuteClauseMode2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExecuteClauseMode2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExecuteClauseMode2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExecuteClauseMode2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteClauseMode(this);
            }
        }
        

        
        internal AstExecuteClauseMode(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstExecuteClauseMode(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExecuteClauseMode(Position p) : 
                base(p)
        {
        }
        
        internal AstExecuteClauseMode(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExecuteClauseMode Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExecuteClauseMode.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstExecuteClauseModeEnum), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// execute_clause_mode : 
        ///    execute_clause_mode_enum 
        /// </summary>
        public static AstExecuteClauseMode ExecuteClauseMode(AstExecuteClauseModeEnum executeClauseModeEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteClauseMode.AstExecuteClauseMode1 result = new AstExecuteClauseMode.AstExecuteClauseMode1(arguments);
            return result;
        }
        
        /// <summary>
        /// execute_clause_mode : 
        ///    stringtext 
        /// </summary>
        public static AstExecuteClauseMode ExecuteClauseMode(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExecuteClauseMode.AstExecuteClauseMode2 result = new AstExecuteClauseMode.AstExecuteClauseMode2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// table_type_indice
    /// 	 : (((PRIMARY  KEY | INDEX  id_)  clustered?) | UNIQUE)  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// 	 | CHECK  LR_BRACKET  search_condition  RR_BRACKET
    /// </summary>
    public abstract partial class AstTableTypeIndice : AstRule
    {
        
        protected static string _rule = "table_type_indice\r\n\t : (((PRIMARY  KEY | INDEX  id_)  clustered?) | UNIQUE)  LR_B" +
            "RACKET  column_name_list_with_order  RR_BRACKET\r\n\t | CHECK  LR_BRACKET  search_c" +
            "ondition  RR_BRACKET";
        
        /// <summary>
        /// table_type_indice : (((PRIMARY  KEY | INDEX  id_)  clustered?) | UNIQUE)  LR_BRACKET  column_name_list_with_order  RR_BRACKET
        /// </summary>
        public partial class AstTableTypeIndice1 : AstTableTypeIndice
        {
            
            internal AstTableTypeIndice1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableTypeIndice1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableTypeIndice1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableTypeIndice1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableTypeIndice(this);
            }
        }
        /// <summary>
        /// table_type_indice : CHECK  LR_BRACKET  search_condition  RR_BRACKET
        /// </summary>
        public partial class AstTableTypeIndice2 : AstTableTypeIndice
        {
            
            internal AstTableTypeIndice2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableTypeIndice2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableTypeIndice2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableTypeIndice2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableTypeIndice(this);
            }
        }
        

        
        internal AstTableTypeIndice(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstTableTypeIndice(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableTypeIndice(Position p) : 
                base(p)
        {
        }
        
        internal AstTableTypeIndice(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTableTypeIndice Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTableTypeIndice.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstClustered), true, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstColumnNameListWithOrder), false, false))
                        {
                            return 1;
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSearchCondition), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// table_type_indice : 
        ///    PRIMARY KEY clustered? ( column_name_list_with_order ) 
        /// </summary>
        public static AstTableTypeIndice TableTypeIndice(AstClustered clustered, AstColumnNameListWithOrder columnNameListWithOrder)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableTypeIndice.AstTableTypeIndice1 result = new AstTableTypeIndice.AstTableTypeIndice1(arguments);
            return result;
        }
        
        /// <summary>
        /// table_type_indice : 
        ///    INDEX id_ clustered? ( column_name_list_with_order ) 
        /// </summary>
        public static AstTableTypeIndice TableTypeIndice(AstId id, AstClustered clustered, AstColumnNameListWithOrder columnNameListWithOrder)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableTypeIndice.AstTableTypeIndice1 result = new AstTableTypeIndice.AstTableTypeIndice1(arguments);
            return result;
        }
        
        /// <summary>
        /// table_type_indice : 
        ///    UNIQUE ( column_name_list_with_order ) 
        /// </summary>
        public static AstTableTypeIndice TableTypeIndice(AstColumnNameListWithOrder columnNameListWithOrder)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableTypeIndice.AstTableTypeIndice1 result = new AstTableTypeIndice.AstTableTypeIndice1(arguments);
            return result;
        }
        
        /// <summary>
        /// table_type_indice : 
        ///    CHECK ( search_condition ) 
        /// </summary>
        public static AstTableTypeIndice TableTypeIndice(AstSearchCondition searchCondition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableTypeIndice.AstTableTypeIndice2 result = new AstTableTypeIndice.AstTableTypeIndice2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// xml_schema_collection
    /// 	 : left = ID  DOT  right = ID
    /// </summary>
    public partial class AstXmlSchemaCollection : AstRule
    {
        
        protected static string _rule = "xml_schema_collection\r\n\t : left = ID  DOT  right = ID";
        
        internal AstXmlSchemaCollection(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstXmlSchemaCollection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstXmlSchemaCollection(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstXmlSchemaCollection(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlSchemaCollection(this);
        }
        
        /// <summary>
        /// xml_schema_collection : 
        ///    left=ID . right=ID 
        /// </summary>
        public static AstXmlSchemaCollection XmlSchemaCollection(String left, String right)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstXmlSchemaCollection result = new AstXmlSchemaCollection(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// column_def_table_constraint
    /// 	 : column_definition
    /// 	 | materialized_column_definition
    /// 	 | table_constraint
    /// </summary>
    public abstract partial class AstColumnDefTableConstraint : AstRule
    {
        
        protected static string _rule = "column_def_table_constraint\r\n\t : column_definition\r\n\t | materialized_column_defin" +
            "ition\r\n\t | table_constraint";
        
        /// <summary>
        /// column_def_table_constraint : column_definition
        /// </summary>
        public partial class AstColumnDefTableConstraint1 : AstColumnDefTableConstraint
        {
            
            internal AstColumnDefTableConstraint1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnDefTableConstraint1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnDefTableConstraint1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnDefTableConstraint1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefTableConstraint(this);
            }
        }
        /// <summary>
        /// column_def_table_constraint : materialized_column_definition
        /// </summary>
        public partial class AstColumnDefTableConstraint2 : AstColumnDefTableConstraint
        {
            
            internal AstColumnDefTableConstraint2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnDefTableConstraint2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnDefTableConstraint2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnDefTableConstraint2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefTableConstraint(this);
            }
        }
        /// <summary>
        /// column_def_table_constraint : table_constraint
        /// </summary>
        public partial class AstColumnDefTableConstraint3 : AstColumnDefTableConstraint
        {
            
            internal AstColumnDefTableConstraint3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnDefTableConstraint3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnDefTableConstraint3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnDefTableConstraint3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefTableConstraint(this);
            }
        }
        

        
        internal AstColumnDefTableConstraint(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstColumnDefTableConstraint(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstColumnDefTableConstraint(Position p) : 
                base(p)
        {
        }
        
        internal AstColumnDefTableConstraint(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstColumnDefTableConstraint Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstColumnDefTableConstraint.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstColumnDefinition), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstMaterializedColumnDefinition), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstTableConstraint), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// column_def_table_constraint : 
        ///    column_definition 
        /// </summary>
        public static AstColumnDefTableConstraint ColumnDefTableConstraint(AstColumnDefinition columnDefinition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnDefTableConstraint.AstColumnDefTableConstraint1 result = new AstColumnDefTableConstraint.AstColumnDefTableConstraint1(arguments);
            return result;
        }
        
        /// <summary>
        /// column_def_table_constraint : 
        ///    materialized_column_definition 
        /// </summary>
        public static AstColumnDefTableConstraint ColumnDefTableConstraint(AstMaterializedColumnDefinition materializedColumnDefinition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnDefTableConstraint.AstColumnDefTableConstraint2 result = new AstColumnDefTableConstraint.AstColumnDefTableConstraint2(arguments);
            return result;
        }
        
        /// <summary>
        /// column_def_table_constraint : 
        ///    table_constraint 
        /// </summary>
        public static AstColumnDefTableConstraint ColumnDefTableConstraint(AstTableConstraint tableConstraint)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnDefTableConstraint.AstColumnDefTableConstraint3 result = new AstColumnDefTableConstraint.AstColumnDefTableConstraint3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// column_definition_element
    /// 	 : FILESTREAM
    /// 	 | COLLATE  collation_id
    /// 	 | SPARSE
    /// 	 | MASKED  WITH  LR_BRACKET  FUNCTION  EQUAL  mask_function = stringtext  RR_BRACKET
    /// 	 | (CONSTRAINT  constraint_id)?  DEFAULT  constant_expr = expression
    /// 	 | IDENTITY  (LR_BRACKET  seed = decimal  COMMA  increment = decimal  RR_BRACKET)?
    /// 	 | NOT  FOR  REPLICATION
    /// 	 | GENERATED  ALWAYS  AS  generation_mode  start_end  HIDDEN_KEYWORD?
    /// 	 | ROWGUIDCOL
    /// 	 | ENCRYPTED  WITH  LR_BRACKET  column_encryption_key_id  EQUAL  key_name = stringtext  COMMA  ENCRYPTION_TYPE  EQUAL  encryption_mode  COMMA  ALGORITHM  EQUAL  algo = stringtext  RR_BRACKET
    /// 	 | column_constraint
    /// </summary>
    public abstract partial class AstColumnDefinitionElement : AstRule
    {
        
        protected static string _rule = @"column_definition_element
	 : FILESTREAM
	 | COLLATE  collation_id
	 | SPARSE
	 | MASKED  WITH  LR_BRACKET  FUNCTION  EQUAL  mask_function = stringtext  RR_BRACKET
	 | (CONSTRAINT  constraint_id)?  DEFAULT  constant_expr = expression
	 | IDENTITY  (LR_BRACKET  seed = decimal  COMMA  increment = decimal  RR_BRACKET)?
	 | NOT  FOR  REPLICATION
	 | GENERATED  ALWAYS  AS  generation_mode  start_end  HIDDEN_KEYWORD?
	 | ROWGUIDCOL
	 | ENCRYPTED  WITH  LR_BRACKET  column_encryption_key_id  EQUAL  key_name = stringtext  COMMA  ENCRYPTION_TYPE  EQUAL  encryption_mode  COMMA  ALGORITHM  EQUAL  algo = stringtext  RR_BRACKET
	 | column_constraint";
        
        /// <summary>
        /// column_definition_element : FILESTREAM
        /// </summary>
        public partial class AstColumnDefinitionElement1 : AstColumnDefinitionElement
        {
            
            internal AstColumnDefinitionElement1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnDefinitionElement1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnDefinitionElement1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnDefinitionElement1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : COLLATE  collation_id
        /// </summary>
        public partial class AstColumnDefinitionElement2 : AstColumnDefinitionElement
        {
            
            internal AstColumnDefinitionElement2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnDefinitionElement2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnDefinitionElement2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnDefinitionElement2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : SPARSE
        /// </summary>
        public partial class AstColumnDefinitionElement3 : AstColumnDefinitionElement
        {
            
            internal AstColumnDefinitionElement3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnDefinitionElement3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnDefinitionElement3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnDefinitionElement3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : MASKED  WITH  LR_BRACKET  FUNCTION  EQUAL  mask_function = stringtext  RR_BRACKET
        /// </summary>
        public partial class AstColumnDefinitionElement4 : AstColumnDefinitionElement
        {
            
            internal AstColumnDefinitionElement4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnDefinitionElement4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnDefinitionElement4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnDefinitionElement4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : (CONSTRAINT  constraint_id)?  DEFAULT  constant_expr = expression
        /// </summary>
        public partial class AstColumnDefinitionElement5 : AstColumnDefinitionElement
        {
            
            internal AstColumnDefinitionElement5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnDefinitionElement5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnDefinitionElement5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnDefinitionElement5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : IDENTITY  (LR_BRACKET  seed = decimal  COMMA  increment = decimal  RR_BRACKET)?
        /// </summary>
        public partial class AstColumnDefinitionElement6 : AstColumnDefinitionElement
        {
            
            internal AstColumnDefinitionElement6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnDefinitionElement6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnDefinitionElement6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnDefinitionElement6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : NOT  FOR  REPLICATION
        /// </summary>
        public partial class AstColumnDefinitionElement7 : AstColumnDefinitionElement
        {
            
            internal AstColumnDefinitionElement7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnDefinitionElement7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnDefinitionElement7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnDefinitionElement7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : GENERATED  ALWAYS  AS  generation_mode  start_end  HIDDEN_KEYWORD?
        /// </summary>
        public partial class AstColumnDefinitionElement8 : AstColumnDefinitionElement
        {
            
            internal AstColumnDefinitionElement8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnDefinitionElement8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnDefinitionElement8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnDefinitionElement8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : ROWGUIDCOL
        /// </summary>
        public partial class AstColumnDefinitionElement9 : AstColumnDefinitionElement
        {
            
            internal AstColumnDefinitionElement9(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnDefinitionElement9(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnDefinitionElement9(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnDefinitionElement9(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : ENCRYPTED  WITH  LR_BRACKET  column_encryption_key_id  EQUAL  key_name = stringtext  COMMA  ENCRYPTION_TYPE  EQUAL  encryption_mode  COMMA  ALGORITHM  EQUAL  algo = stringtext  RR_BRACKET
        /// </summary>
        public partial class AstColumnDefinitionElement10 : AstColumnDefinitionElement
        {
            
            internal AstColumnDefinitionElement10(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnDefinitionElement10(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnDefinitionElement10(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnDefinitionElement10(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : column_constraint
        /// </summary>
        public partial class AstColumnDefinitionElement11 : AstColumnDefinitionElement
        {
            
            internal AstColumnDefinitionElement11(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnDefinitionElement11(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnDefinitionElement11(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnDefinitionElement11(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        

        
        internal AstColumnDefinitionElement(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstColumnDefinitionElement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstColumnDefinitionElement(Position p) : 
                base(p)
        {
        }
        
        internal AstColumnDefinitionElement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstColumnDefinitionElement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstColumnDefinitionElement.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstColumnEncryptionKeyId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstEncryptionMode), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstStringtext), false, false))
                            {
                                return 10;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstConstraintId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 5;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimal), false, false))
                    {
                        return 6;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstGenerationMode), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStartEnd), false, false))
                    {
                        return 8;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstCollationId), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstColumnConstraint), false, false))
                {
                    return 11;
                }
            }
            if ((list.Count == 0))
            {
                return 1;
                return 3;
                return 7;
                return 9;
            }
            return 0;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    COLLATE collation_id 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(AstCollationId collationId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnDefinitionElement.AstColumnDefinitionElement2 result = new AstColumnDefinitionElement.AstColumnDefinitionElement2(arguments);
            return result;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    MASKED WITH ( FUNCTION EQUAL mask_function=stringtext ) 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(AstStringtext maskFunction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnDefinitionElement.AstColumnDefinitionElement4 result = new AstColumnDefinitionElement.AstColumnDefinitionElement4(arguments);
            return result;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    CONSTRAINT constraint_id DEFAULT constant_expr=expression 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(AstConstraintId constraintId, AstExpression constantExpr)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnDefinitionElement.AstColumnDefinitionElement5 result = new AstColumnDefinitionElement.AstColumnDefinitionElement5(arguments);
            return result;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    IDENTITY ( seed=decimal , increment=decimal ) 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(AstDecimal seed, AstDecimal increment)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnDefinitionElement.AstColumnDefinitionElement6 result = new AstColumnDefinitionElement.AstColumnDefinitionElement6(arguments);
            return result;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    GENERATED ALWAYS AS generation_mode start_end HIDDEN_KEYWORD? 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(AstGenerationMode generationMode, AstStartEnd startEnd)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnDefinitionElement.AstColumnDefinitionElement8 result = new AstColumnDefinitionElement.AstColumnDefinitionElement8(arguments);
            return result;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    ENCRYPTED WITH ( column_encryption_key_id EQUAL key_name=stringtext , ENCRYPTION_TYPE EQUAL encryption_mode , ALGORITHM EQUAL algo=stringtext ) 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(AstColumnEncryptionKeyId columnEncryptionKeyId, AstStringtext keyName, AstEncryptionMode encryptionMode, AstStringtext algo)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnDefinitionElement.AstColumnDefinitionElement10 result = new AstColumnDefinitionElement.AstColumnDefinitionElement10(arguments);
            return result;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    column_constraint 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(AstColumnConstraint columnConstraint)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnDefinitionElement.AstColumnDefinitionElement11 result = new AstColumnDefinitionElement.AstColumnDefinitionElement11(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// column_constraint
    /// 	 : (CONSTRAINT  constraint_id)?  (null_notnull | (primary_key_unique  clustered?  primary_key_options) | ((FOREIGN  KEY)?  foreign_key_options) | check_constraint)
    /// </summary>
    public partial class AstColumnConstraint : AstRule
    {
        
        protected static string _rule = "column_constraint\r\n\t : (CONSTRAINT  constraint_id)?  (null_notnull | (primary_key" +
            "_unique  clustered?  primary_key_options) | ((FOREIGN  KEY)?  foreign_key_option" +
            "s) | check_constraint)";
        
        internal AstColumnConstraint(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstColumnConstraint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstColumnConstraint(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstColumnConstraint(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnConstraint(this);
        }
        
        /// <summary>
        /// column_constraint : 
        ///    CONSTRAINT constraint_id null_notnull 
        /// </summary>
        public static AstColumnConstraint ColumnConstraint(AstConstraintId constraintId, AstNullNotnull nullNotnull)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnConstraint result = new AstColumnConstraint(arguments);
            return result;
        }
        
        /// <summary>
        /// column_constraint : 
        ///    CONSTRAINT constraint_id primary_key_unique clustered? primary_key_options 
        /// </summary>
        public static AstColumnConstraint ColumnConstraint(AstConstraintId constraintId, AstPrimaryKeyUnique primaryKeyUnique, AstClustered clustered, AstPrimaryKeyOptions primaryKeyOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnConstraint result = new AstColumnConstraint(arguments);
            return result;
        }
        
        /// <summary>
        /// column_constraint : 
        ///    CONSTRAINT constraint_id FOREIGN KEY foreign_key_options 
        /// </summary>
        public static AstColumnConstraint ColumnConstraint(AstConstraintId constraintId, AstForeignKeyOptions foreignKeyOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnConstraint result = new AstColumnConstraint(arguments);
            return result;
        }
        
        /// <summary>
        /// column_constraint : 
        ///    CONSTRAINT constraint_id check_constraint 
        /// </summary>
        public static AstColumnConstraint ColumnConstraint(AstConstraintId constraintId, AstCheckConstraint checkConstraint)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnConstraint result = new AstColumnConstraint(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// on_partition_or_filegroup
    /// 	 : ON  ((partition_scheme_id  LR_BRACKET  partition_column_id  RR_BRACKET) | file_group_id | DEFAULT_DOUBLE_QUOTE)
    /// </summary>
    public partial class AstOnPartitionOrFilegroup : AstRule
    {
        
        protected static string _rule = "on_partition_or_filegroup\r\n\t : ON  ((partition_scheme_id  LR_BRACKET  partition_c" +
            "olumn_id  RR_BRACKET) | file_group_id | DEFAULT_DOUBLE_QUOTE)";
        
        internal AstOnPartitionOrFilegroup(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstOnPartitionOrFilegroup(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstOnPartitionOrFilegroup(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstOnPartitionOrFilegroup(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnPartitionOrFilegroup(this);
        }
        
        /// <summary>
        /// on_partition_or_filegroup : 
        ///    ON partition_scheme_id ( partition_column_id ) 
        /// </summary>
        public static AstOnPartitionOrFilegroup OnPartitionOrFilegroup(AstPartitionSchemeId partitionSchemeId, AstPartitionColumnId partitionColumnId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstOnPartitionOrFilegroup result = new AstOnPartitionOrFilegroup(arguments);
            return result;
        }
        
        /// <summary>
        /// on_partition_or_filegroup : 
        ///    ON file_group_id 
        /// </summary>
        public static AstOnPartitionOrFilegroup OnPartitionOrFilegroup(AstFileGroupId fileGroupId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstOnPartitionOrFilegroup result = new AstOnPartitionOrFilegroup(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// table_constraint
    /// 	 : (CONSTRAINT  constraint_id)?  ((primary_key_unique  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET  primary_key_options) | (FOREIGN  KEY  LR_BRACKET  fk = column_name_list  RR_BRACKET  foreign_key_options) | (CONNECTION  LR_BRACKET  connection_nodes  RR_BRACKET) | (DEFAULT  LR_BRACKET?  ((stringtext | PLUS | function_call | decimal)+ | NEXT  VALUE  FOR  full_table_ref)  RR_BRACKET?  FOR  id_) | check_constraint)
    /// </summary>
    public partial class AstTableConstraint : AstRule
    {
        
        protected static string _rule = @"table_constraint
	 : (CONSTRAINT  constraint_id)?  ((primary_key_unique  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET  primary_key_options) | (FOREIGN  KEY  LR_BRACKET  fk = column_name_list  RR_BRACKET  foreign_key_options) | (CONNECTION  LR_BRACKET  connection_nodes  RR_BRACKET) | (DEFAULT  LR_BRACKET?  ((stringtext | PLUS | function_call | decimal)+ | NEXT  VALUE  FOR  full_table_ref)  RR_BRACKET?  FOR  id_) | check_constraint)";
        
        internal AstTableConstraint(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTableConstraint(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTableConstraint(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTableConstraint(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableConstraint(this);
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id primary_key_unique clustered? ( column_name_list_with_order ) primary_key_options 
        /// </summary>
        public static AstTableConstraint TableConstraint(AstConstraintId constraintId, AstPrimaryKeyUnique primaryKeyUnique, AstClustered clustered, AstColumnNameListWithOrder columnNameListWithOrder, AstPrimaryKeyOptions primaryKeyOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableConstraint result = new AstTableConstraint(arguments);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id FOREIGN KEY ( fk=column_name_list ) foreign_key_options 
        /// </summary>
        public static AstTableConstraint TableConstraint(AstConstraintId constraintId, AstColumnNameList fk, AstForeignKeyOptions foreignKeyOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableConstraint result = new AstTableConstraint(arguments);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id CONNECTION ( connection_nodes ) 
        /// </summary>
        public static AstTableConstraint TableConstraint(AstConstraintId constraintId, AstConnectionNodes connectionNodes)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableConstraint result = new AstTableConstraint(arguments);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id DEFAULT LR_BRACKET? stringtext RR_BRACKET? FOR id_ 
        /// </summary>
        public static AstTableConstraint TableConstraint(AstConstraintId constraintId, AstStringtext stringtext, AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableConstraint result = new AstTableConstraint(arguments);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id DEFAULT LR_BRACKET? PLUS RR_BRACKET? FOR id_ 
        /// </summary>
        public static AstTableConstraint TableConstraint(AstConstraintId constraintId, AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableConstraint result = new AstTableConstraint(arguments);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id DEFAULT LR_BRACKET? function_call RR_BRACKET? FOR id_ 
        /// </summary>
        public static AstTableConstraint TableConstraint(AstConstraintId constraintId, AstFunctionCall functionCall, AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableConstraint result = new AstTableConstraint(arguments);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id DEFAULT LR_BRACKET? decimal RR_BRACKET? FOR id_ 
        /// </summary>
        public static AstTableConstraint TableConstraint(AstConstraintId constraintId, AstDecimal @decimal, AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableConstraint result = new AstTableConstraint(arguments);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id DEFAULT LR_BRACKET? NEXT VALUE FOR full_table_ref RR_BRACKET? FOR id_ 
        /// </summary>
        public static AstTableConstraint TableConstraint(AstConstraintId constraintId, AstFullTableRef fullTableRef, AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableConstraint result = new AstTableConstraint(arguments);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id check_constraint 
        /// </summary>
        public static AstTableConstraint TableConstraint(AstConstraintId constraintId, AstCheckConstraint checkConstraint)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableConstraint result = new AstTableConstraint(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// connection_node
    /// 	 : from_node_table = id_  TO  to_node_table = id_
    /// </summary>
    public partial class AstConnectionNode : AstRule
    {
        
        protected static string _rule = "connection_node\r\n\t : from_node_table = id_  TO  to_node_table = id_";
        
        internal AstConnectionNode(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstConnectionNode(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstConnectionNode(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstConnectionNode(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConnectionNode(this);
        }
        
        /// <summary>
        /// connection_node : 
        ///    from_node_table=id_ TO to_node_table=id_ 
        /// </summary>
        public static AstConnectionNode ConnectionNode(AstId fromNodeTable, AstId toNodeTable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConnectionNode result = new AstConnectionNode(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// alter_table_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  decimal
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | DATA_COMPRESSION  EQUAL  index_strategy  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// 	 | distribution
    /// 	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | MAX_DURATION  EQUAL  times = decimal  MINUTES?
    /// </summary>
    public abstract partial class AstAlterTableIndexOption : AstRule
    {
        
        protected static string _rule = @"alter_table_index_option
	 : PAD_INDEX  EQUAL  on_off
	 | FILLFACTOR  EQUAL  decimal
	 | IGNORE_DUP_KEY  EQUAL  on_off
	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
	 | ALLOW_ROW_LOCKS  EQUAL  on_off
	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
	 | SORT_IN_TEMPDB  EQUAL  on_off
	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
	 | DATA_COMPRESSION  EQUAL  index_strategy  on_partitions?
	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
	 | distribution
	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
	 | RESUMABLE  EQUAL  on_off
	 | MAX_DURATION  EQUAL  times = decimal  MINUTES?";
        
        /// <summary>
        /// alter_table_index_option : PAD_INDEX  EQUAL  on_off
        /// </summary>
        public partial class AstAlterTableIndexOption1 : AstAlterTableIndexOption
        {
            
            internal AstAlterTableIndexOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterTableIndexOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterTableIndexOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterTableIndexOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : FILLFACTOR  EQUAL  decimal
        /// </summary>
        public partial class AstAlterTableIndexOption2 : AstAlterTableIndexOption
        {
            
            internal AstAlterTableIndexOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterTableIndexOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterTableIndexOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterTableIndexOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : IGNORE_DUP_KEY  EQUAL  on_off
        /// </summary>
        public partial class AstAlterTableIndexOption3 : AstAlterTableIndexOption
        {
            
            internal AstAlterTableIndexOption3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterTableIndexOption3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterTableIndexOption3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterTableIndexOption3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : STATISTICS_NORECOMPUTE  EQUAL  on_off
        /// </summary>
        public partial class AstAlterTableIndexOption4 : AstAlterTableIndexOption
        {
            
            internal AstAlterTableIndexOption4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterTableIndexOption4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterTableIndexOption4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterTableIndexOption4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : ALLOW_ROW_LOCKS  EQUAL  on_off
        /// </summary>
        public partial class AstAlterTableIndexOption5 : AstAlterTableIndexOption
        {
            
            internal AstAlterTableIndexOption5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterTableIndexOption5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterTableIndexOption5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterTableIndexOption5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : ALLOW_PAGE_LOCKS  EQUAL  on_off
        /// </summary>
        public partial class AstAlterTableIndexOption6 : AstAlterTableIndexOption
        {
            
            internal AstAlterTableIndexOption6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterTableIndexOption6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterTableIndexOption6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterTableIndexOption6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
        /// </summary>
        public partial class AstAlterTableIndexOption7 : AstAlterTableIndexOption
        {
            
            internal AstAlterTableIndexOption7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterTableIndexOption7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterTableIndexOption7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterTableIndexOption7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : SORT_IN_TEMPDB  EQUAL  on_off
        /// </summary>
        public partial class AstAlterTableIndexOption8 : AstAlterTableIndexOption
        {
            
            internal AstAlterTableIndexOption8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterTableIndexOption8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterTableIndexOption8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterTableIndexOption8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : MAXDOP  EQUAL  max_degree_of_parallelism = decimal
        /// </summary>
        public partial class AstAlterTableIndexOption9 : AstAlterTableIndexOption
        {
            
            internal AstAlterTableIndexOption9(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterTableIndexOption9(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterTableIndexOption9(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterTableIndexOption9(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : DATA_COMPRESSION  EQUAL  index_strategy  on_partitions?
        /// </summary>
        public partial class AstAlterTableIndexOption10 : AstAlterTableIndexOption
        {
            
            internal AstAlterTableIndexOption10(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterTableIndexOption10(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterTableIndexOption10(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterTableIndexOption10(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : XML_COMPRESSION  EQUAL  on_off  on_partitions?
        /// </summary>
        public partial class AstAlterTableIndexOption11 : AstAlterTableIndexOption
        {
            
            internal AstAlterTableIndexOption11(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterTableIndexOption11(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterTableIndexOption11(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterTableIndexOption11(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : distribution
        /// </summary>
        public partial class AstAlterTableIndexOption12 : AstAlterTableIndexOption
        {
            
            internal AstAlterTableIndexOption12(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterTableIndexOption12(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterTableIndexOption12(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterTableIndexOption12(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
        /// </summary>
        public partial class AstAlterTableIndexOption13 : AstAlterTableIndexOption
        {
            
            internal AstAlterTableIndexOption13(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterTableIndexOption13(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterTableIndexOption13(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterTableIndexOption13(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : RESUMABLE  EQUAL  on_off
        /// </summary>
        public partial class AstAlterTableIndexOption14 : AstAlterTableIndexOption
        {
            
            internal AstAlterTableIndexOption14(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterTableIndexOption14(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterTableIndexOption14(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterTableIndexOption14(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : MAX_DURATION  EQUAL  times = decimal  MINUTES?
        /// </summary>
        public partial class AstAlterTableIndexOption15 : AstAlterTableIndexOption
        {
            
            internal AstAlterTableIndexOption15(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAlterTableIndexOption15(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAlterTableIndexOption15(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAlterTableIndexOption15(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        

        
        internal AstAlterTableIndexOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAlterTableIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterTableIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterTableIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterTableIndexOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterTableIndexOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstIndexStrategy), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnPartitions), true, false))
                    {
                        return 10;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnPartitions), true, false))
                    {
                        return 11;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 8;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 9;
                }
                if (AstRoot.Eval(list[0], typeof(AstDistribution), false, false))
                {
                    return 12;
                }
                if (AstRoot.Eval(list[0], typeof(AstLowPriorityLockWait), false, false))
                {
                    return 13;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 14;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 15;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_table_index_option : 
        ///    PAD_INDEX EQUAL on_off 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterTableIndexOption.AstAlterTableIndexOption1 result = new AstAlterTableIndexOption.AstAlterTableIndexOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_table_index_option : 
        ///    FILLFACTOR EQUAL decimal 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterTableIndexOption.AstAlterTableIndexOption2 result = new AstAlterTableIndexOption.AstAlterTableIndexOption2(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_table_index_option : 
        ///    DATA_COMPRESSION EQUAL index_strategy on_partitions? 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(AstIndexStrategy indexStrategy, AstOnPartitions onPartitions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterTableIndexOption.AstAlterTableIndexOption10 result = new AstAlterTableIndexOption.AstAlterTableIndexOption10(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_table_index_option : 
        ///    XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(AstOnOff onOff, AstOnPartitions onPartitions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterTableIndexOption.AstAlterTableIndexOption11 result = new AstAlterTableIndexOption.AstAlterTableIndexOption11(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_table_index_option : 
        ///    distribution 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(AstDistribution distribution)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterTableIndexOption.AstAlterTableIndexOption12 result = new AstAlterTableIndexOption.AstAlterTableIndexOption12(arguments);
            return result;
        }
        
        /// <summary>
        /// alter_table_index_option : 
        ///    ONLINE EQUAL ON ( low_priority_lock_wait ) 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(AstLowPriorityLockWait lowPriorityLockWait)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAlterTableIndexOption.AstAlterTableIndexOption13 result = new AstAlterTableIndexOption.AstAlterTableIndexOption13(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// declare_set_cursor_common_partial
    /// 	 : local_global
    /// 	 | declare_set_cursor_common_partial_enum
    /// </summary>
    public abstract partial class AstDeclareSetCursorCommonPartial : AstRule
    {
        
        protected static string _rule = "declare_set_cursor_common_partial\r\n\t : local_global\r\n\t | declare_set_cursor_commo" +
            "n_partial_enum";
        
        /// <summary>
        /// declare_set_cursor_common_partial : local_global
        /// </summary>
        public partial class AstDeclareSetCursorCommonPartial1 : AstDeclareSetCursorCommonPartial
        {
            
            internal AstDeclareSetCursorCommonPartial1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDeclareSetCursorCommonPartial1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDeclareSetCursorCommonPartial1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDeclareSetCursorCommonPartial1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareSetCursorCommonPartial(this);
            }
        }
        /// <summary>
        /// declare_set_cursor_common_partial : declare_set_cursor_common_partial_enum
        /// </summary>
        public partial class AstDeclareSetCursorCommonPartial2 : AstDeclareSetCursorCommonPartial
        {
            
            internal AstDeclareSetCursorCommonPartial2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDeclareSetCursorCommonPartial2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDeclareSetCursorCommonPartial2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDeclareSetCursorCommonPartial2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareSetCursorCommonPartial(this);
            }
        }
        

        
        internal AstDeclareSetCursorCommonPartial(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstDeclareSetCursorCommonPartial(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDeclareSetCursorCommonPartial(Position p) : 
                base(p)
        {
        }
        
        internal AstDeclareSetCursorCommonPartial(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDeclareSetCursorCommonPartial Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDeclareSetCursorCommonPartial.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalGlobal), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDeclareSetCursorCommonPartialEnum), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// declare_set_cursor_common_partial : 
        ///    local_global 
        /// </summary>
        public static AstDeclareSetCursorCommonPartial DeclareSetCursorCommonPartial(AstLocalGlobal localGlobal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDeclareSetCursorCommonPartial.AstDeclareSetCursorCommonPartial1 result = new AstDeclareSetCursorCommonPartial.AstDeclareSetCursorCommonPartial1(arguments);
            return result;
        }
        
        /// <summary>
        /// declare_set_cursor_common_partial : 
        ///    declare_set_cursor_common_partial_enum 
        /// </summary>
        public static AstDeclareSetCursorCommonPartial DeclareSetCursorCommonPartial(AstDeclareSetCursorCommonPartialEnum declareSetCursorCommonPartialEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDeclareSetCursorCommonPartial.AstDeclareSetCursorCommonPartial2 result = new AstDeclareSetCursorCommonPartial.AstDeclareSetCursorCommonPartial2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// set_special
    /// 	 : SET  left = id_  set_special_set_value  SEMI?
    /// 	 | SET  STATISTICS  statistic_kind  statistics = on_off  SEMI?
    /// 	 | SET  ROWCOUNT  (local_id | decimal)  SEMI?
    /// 	 | SET  TEXTSIZE  decimal  SEMI?
    /// 	 | SET  TRANSACTION  ISOLATION  LEVEL  (transaction_isolation | decimal)  SEMI?
    /// 	 | SET  IDENTITY_INSERT  full_table_ref  identity_insert = on_off  SEMI?
    /// 	 | SET  special_lists  list = on_off
    /// 	 | SET  modify_method
    /// </summary>
    public abstract partial class AstSetSpecial : AstRule
    {
        
        protected static string _rule = @"set_special
	 : SET  left = id_  set_special_set_value  SEMI?
	 | SET  STATISTICS  statistic_kind  statistics = on_off  SEMI?
	 | SET  ROWCOUNT  (local_id | decimal)  SEMI?
	 | SET  TEXTSIZE  decimal  SEMI?
	 | SET  TRANSACTION  ISOLATION  LEVEL  (transaction_isolation | decimal)  SEMI?
	 | SET  IDENTITY_INSERT  full_table_ref  identity_insert = on_off  SEMI?
	 | SET  special_lists  list = on_off
	 | SET  modify_method";
        
        /// <summary>
        /// set_special : SET  left = id_  set_special_set_value  SEMI?
        /// </summary>
        public partial class AstSetSpecial1 : AstSetSpecial
        {
            
            internal AstSetSpecial1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSetSpecial1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSetSpecial1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSetSpecial1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET  STATISTICS  statistic_kind  statistics = on_off  SEMI?
        /// </summary>
        public partial class AstSetSpecial2 : AstSetSpecial
        {
            
            internal AstSetSpecial2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSetSpecial2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSetSpecial2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSetSpecial2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET  ROWCOUNT  (local_id | decimal)  SEMI?
        /// </summary>
        public partial class AstSetSpecial3 : AstSetSpecial
        {
            
            internal AstSetSpecial3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSetSpecial3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSetSpecial3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSetSpecial3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET  TEXTSIZE  decimal  SEMI?
        /// </summary>
        public partial class AstSetSpecial4 : AstSetSpecial
        {
            
            internal AstSetSpecial4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSetSpecial4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSetSpecial4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSetSpecial4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET  TRANSACTION  ISOLATION  LEVEL  (transaction_isolation | decimal)  SEMI?
        /// </summary>
        public partial class AstSetSpecial5 : AstSetSpecial
        {
            
            internal AstSetSpecial5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSetSpecial5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSetSpecial5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSetSpecial5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET  IDENTITY_INSERT  full_table_ref  identity_insert = on_off  SEMI?
        /// </summary>
        public partial class AstSetSpecial6 : AstSetSpecial
        {
            
            internal AstSetSpecial6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSetSpecial6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSetSpecial6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSetSpecial6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET  special_lists  list = on_off
        /// </summary>
        public partial class AstSetSpecial7 : AstSetSpecial
        {
            
            internal AstSetSpecial7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSetSpecial7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSetSpecial7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSetSpecial7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET  modify_method
        /// </summary>
        public partial class AstSetSpecial8 : AstSetSpecial
        {
            
            internal AstSetSpecial8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSetSpecial8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSetSpecial8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSetSpecial8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        

        
        internal AstSetSpecial(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstSetSpecial(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSetSpecial(Position p) : 
                base(p)
        {
        }
        
        internal AstSetSpecial(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSetSpecial Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSetSpecial.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstSetSpecialSetValue), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstStatisticKind), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnOff), false, false))
                    {
                        return 2;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimal), false, false))
                    {
                        return 3;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstTransactionIsolation), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimal), false, false))
                    {
                        return 5;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstFullTableRef), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnOff), false, false))
                    {
                        return 6;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstSpecialLists), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnOff), false, false))
                    {
                        return 7;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstModifyMethod), false, false))
                {
                    return 8;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET left=id_ set_special_set_value SEMI? 
        /// </summary>
        public static AstSetSpecial SetSpecial(AstId left, AstSetSpecialSetValue setSpecialSetValue)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecial.AstSetSpecial1 result = new AstSetSpecial.AstSetSpecial1(arguments);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET STATISTICS statistic_kind statistics=on_off SEMI? 
        /// </summary>
        public static AstSetSpecial SetSpecial(AstStatisticKind statisticKind, AstOnOff statistics)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecial.AstSetSpecial2 result = new AstSetSpecial.AstSetSpecial2(arguments);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET ROWCOUNT local_id SEMI? 
        /// </summary>
        public static AstSetSpecial SetSpecial(AstLocalId localId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecial.AstSetSpecial3 result = new AstSetSpecial.AstSetSpecial3(arguments);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET ROWCOUNT decimal SEMI? 
        /// </summary>
        public static AstSetSpecial SetSpecial(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecial.AstSetSpecial3 result = new AstSetSpecial.AstSetSpecial3(arguments);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET TRANSACTION ISOLATION LEVEL transaction_isolation SEMI? 
        /// </summary>
        public static AstSetSpecial SetSpecial(AstTransactionIsolation transactionIsolation)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecial.AstSetSpecial5 result = new AstSetSpecial.AstSetSpecial5(arguments);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET IDENTITY_INSERT full_table_ref identity_insert=on_off SEMI? 
        /// </summary>
        public static AstSetSpecial SetSpecial(AstFullTableRef fullTableRef, AstOnOff identityInsert)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecial.AstSetSpecial6 result = new AstSetSpecial.AstSetSpecial6(arguments);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET special_lists list=on_off 
        /// </summary>
        public static AstSetSpecial SetSpecial(AstSpecialLists specialLists, AstOnOff list)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecial.AstSetSpecial7 result = new AstSetSpecial.AstSetSpecial7(arguments);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET modify_method 
        /// </summary>
        public static AstSetSpecial SetSpecial(AstModifyMethod modifyMethod)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecial.AstSetSpecial8 result = new AstSetSpecial.AstSetSpecial8(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// set_special_set_value
    /// 	 : (id_ | constant_local_id | on_off)
    /// </summary>
    public partial class AstSetSpecialSetValue : AstRule
    {
        
        protected static string _rule = "set_special_set_value\r\n\t : (id_ | constant_local_id | on_off)";
        
        internal AstSetSpecialSetValue(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSetSpecialSetValue(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSetSpecialSetValue(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSetSpecialSetValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetSpecialSetValue(this);
        }
        
        /// <summary>
        /// set_special_set_value : 
        ///    id_ 
        /// </summary>
        public static AstSetSpecialSetValue SetSpecialSetValue(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecialSetValue result = new AstSetSpecialSetValue(arguments);
            return result;
        }
        
        /// <summary>
        /// set_special_set_value : 
        ///    constant_local_id 
        /// </summary>
        public static AstSetSpecialSetValue SetSpecialSetValue(AstConstantLocalId constantLocalId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecialSetValue result = new AstSetSpecialSetValue(arguments);
            return result;
        }
        
        /// <summary>
        /// set_special_set_value : 
        ///    on_off 
        /// </summary>
        public static AstSetSpecialSetValue SetSpecialSetValue(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSetSpecialSetValue result = new AstSetSpecialSetValue(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// constant_local_id
    /// 	 : constant
    /// 	 | local_id
    /// </summary>
    public abstract partial class AstConstantLocalId : AstRule
    {
        
        protected static string _rule = "constant_local_id\r\n\t : constant\r\n\t | local_id";
        
        /// <summary>
        /// constant_local_id : constant
        /// </summary>
        public partial class AstConstantLocalId1 : AstConstantLocalId
        {
            
            internal AstConstantLocalId1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConstantLocalId1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConstantLocalId1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConstantLocalId1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantLocalId(this);
            }
        }
        /// <summary>
        /// constant_local_id : local_id
        /// </summary>
        public partial class AstConstantLocalId2 : AstConstantLocalId
        {
            
            internal AstConstantLocalId2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConstantLocalId2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConstantLocalId2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConstantLocalId2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantLocalId(this);
            }
        }
        

        
        internal AstConstantLocalId(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstConstantLocalId(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstConstantLocalId(Position p) : 
                base(p)
        {
        }
        
        internal AstConstantLocalId(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstConstantLocalId Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstConstantLocalId.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstConstant), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// constant_local_id : 
        ///    constant 
        /// </summary>
        public static AstConstantLocalId ConstantLocalId(AstConstant constant)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstantLocalId.AstConstantLocalId1 result = new AstConstantLocalId.AstConstantLocalId1(arguments);
            return result;
        }
        
        /// <summary>
        /// constant_local_id : 
        ///    local_id 
        /// </summary>
        public static AstConstantLocalId ConstantLocalId(AstLocalId localId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstantLocalId.AstConstantLocalId2 result = new AstConstantLocalId.AstConstantLocalId2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// expression
    /// 	 : primitive_expression
    /// 	 | function_call
    /// 	 | expression  DOT  (value_call | query_call | exist_call | modify_call)
    /// 	 | expression  DOT  hierarchyid_call
    /// 	 | expression  COLLATE  id_
    /// 	 | case_expression
    /// 	 | full_column_name
    /// 	 | bracket_expression
    /// 	 | unary_operator_expression
    /// 	 | left = expression  op = expression_operator  right = expression
    /// 	 | expression  time_zone
    /// 	 | over_clause
    /// 	 | DOLLAR_ACTION
    /// </summary>
    public abstract partial class AstExpression : AstRule
    {
        
        protected static string _rule = @"expression
	 : primitive_expression
	 | function_call
	 | expression  DOT  (value_call | query_call | exist_call | modify_call)
	 | expression  DOT  hierarchyid_call
	 | expression  COLLATE  id_
	 | case_expression
	 | full_column_name
	 | bracket_expression
	 | unary_operator_expression
	 | left = expression  op = expression_operator  right = expression
	 | expression  time_zone
	 | over_clause
	 | DOLLAR_ACTION";
        
        /// <summary>
        /// expression : primitive_expression
        /// </summary>
        public partial class AstExpression1 : AstExpression
        {
            
            internal AstExpression1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExpression1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExpression1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExpression1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : function_call
        /// </summary>
        public partial class AstExpression2 : AstExpression
        {
            
            internal AstExpression2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExpression2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExpression2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExpression2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : expression  DOT  (value_call | query_call | exist_call | modify_call)
        /// </summary>
        public partial class AstExpression3 : AstExpression
        {
            
            internal AstExpression3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExpression3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExpression3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExpression3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : expression  DOT  hierarchyid_call
        /// </summary>
        public partial class AstExpression4 : AstExpression
        {
            
            internal AstExpression4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExpression4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExpression4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExpression4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : expression  COLLATE  id_
        /// </summary>
        public partial class AstExpression5 : AstExpression
        {
            
            internal AstExpression5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExpression5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExpression5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExpression5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : case_expression
        /// </summary>
        public partial class AstExpression6 : AstExpression
        {
            
            internal AstExpression6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExpression6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExpression6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExpression6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : full_column_name
        /// </summary>
        public partial class AstExpression7 : AstExpression
        {
            
            internal AstExpression7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExpression7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExpression7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExpression7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : bracket_expression
        /// </summary>
        public partial class AstExpression8 : AstExpression
        {
            
            internal AstExpression8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExpression8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExpression8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExpression8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : unary_operator_expression
        /// </summary>
        public partial class AstExpression9 : AstExpression
        {
            
            internal AstExpression9(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExpression9(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExpression9(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExpression9(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : left = expression  op = expression_operator  right = expression
        /// </summary>
        public partial class AstExpression10 : AstExpression
        {
            
            internal AstExpression10(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExpression10(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExpression10(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExpression10(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : expression  time_zone
        /// </summary>
        public partial class AstExpression11 : AstExpression
        {
            
            internal AstExpression11(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExpression11(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExpression11(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExpression11(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : over_clause
        /// </summary>
        public partial class AstExpression12 : AstExpression
        {
            
            internal AstExpression12(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExpression12(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExpression12(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExpression12(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : DOLLAR_ACTION
        /// </summary>
        public partial class AstExpression13 : AstExpression
        {
            
            internal AstExpression13(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExpression13(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExpression13(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExpression13(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        

        
        internal AstExpression(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExpression Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExpression.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 5))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstValueCall), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstQueryCall), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstExistCall), false, false))
                            {
                                if (AstRoot.Eval(list[4], typeof(AstModifyCall), false, false))
                                {
                                    return 3;
                                }
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpressionOperator), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 10;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstHierarchyidCall), false, false))
                    {
                        return 4;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstId), false, false))
                    {
                        return 5;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstTimeZone), false, false))
                    {
                        return 11;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstPrimitiveExpression), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstFunctionCall), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstCaseExpression), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstFullColumnName), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstBracketExpression), false, false))
                {
                    return 8;
                }
                if (AstRoot.Eval(list[0], typeof(AstUnaryOperatorExpression), false, false))
                {
                    return 9;
                }
                if (AstRoot.Eval(list[0], typeof(AstOverClause), false, false))
                {
                    return 12;
                }
            }
            if ((list.Count == 0))
            {
                return 13;
            }
            return 0;
        }
        
        /// <summary>
        /// expression : 
        ///    primitive_expression 
        /// </summary>
        public static AstExpression Expression(AstPrimitiveExpression primitiveExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression.AstExpression1 result = new AstExpression.AstExpression1(arguments);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    function_call 
        /// </summary>
        public static AstExpression Expression(AstFunctionCall functionCall)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression.AstExpression2 result = new AstExpression.AstExpression2(arguments);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    expression . value_call 
        /// </summary>
        public static AstExpression Expression(AstExpression expression, AstValueCall valueCall)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression.AstExpression3 result = new AstExpression.AstExpression3(arguments);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    expression . query_call 
        /// </summary>
        public static AstExpression Expression(AstExpression expression, AstQueryCall queryCall)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression.AstExpression3 result = new AstExpression.AstExpression3(arguments);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    expression . exist_call 
        /// </summary>
        public static AstExpression Expression(AstExpression expression, AstExistCall existCall)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression.AstExpression3 result = new AstExpression.AstExpression3(arguments);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    expression . modify_call 
        /// </summary>
        public static AstExpression Expression(AstExpression expression, AstModifyCall modifyCall)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression.AstExpression3 result = new AstExpression.AstExpression3(arguments);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    expression . hierarchyid_call 
        /// </summary>
        public static AstExpression Expression(AstExpression expression, AstHierarchyidCall hierarchyidCall)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression.AstExpression4 result = new AstExpression.AstExpression4(arguments);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    expression COLLATE id_ 
        /// </summary>
        public static AstExpression Expression(AstExpression expression, AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression.AstExpression5 result = new AstExpression.AstExpression5(arguments);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    case_expression 
        /// </summary>
        public static AstExpression Expression(AstCaseExpression caseExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression.AstExpression6 result = new AstExpression.AstExpression6(arguments);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    full_column_name 
        /// </summary>
        public static AstExpression Expression(AstFullColumnName fullColumnName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression.AstExpression7 result = new AstExpression.AstExpression7(arguments);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    bracket_expression 
        /// </summary>
        public static AstExpression Expression(AstBracketExpression bracketExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression.AstExpression8 result = new AstExpression.AstExpression8(arguments);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    unary_operator_expression 
        /// </summary>
        public static AstExpression Expression(AstUnaryOperatorExpression unaryOperatorExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression.AstExpression9 result = new AstExpression.AstExpression9(arguments);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    left=expression op=expression_operator right=expression 
        /// </summary>
        public static AstExpression Expression(AstExpression left, AstExpressionOperator op, AstExpression right)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression.AstExpression10 result = new AstExpression.AstExpression10(arguments);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    expression time_zone 
        /// </summary>
        public static AstExpression Expression(AstExpression expression, AstTimeZone timeZone)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression.AstExpression11 result = new AstExpression.AstExpression11(arguments);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    over_clause 
        /// </summary>
        public static AstExpression Expression(AstOverClause overClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpression.AstExpression12 result = new AstExpression.AstExpression12(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// primitive_expression
    /// 	 : DEFAULT
    /// 	 | NULL_
    /// 	 | local_id
    /// 	 | constant
    /// </summary>
    public abstract partial class AstPrimitiveExpression : AstRule
    {
        
        protected static string _rule = "primitive_expression\r\n\t : DEFAULT\r\n\t | NULL_\r\n\t | local_id\r\n\t | constant";
        
        /// <summary>
        /// primitive_expression : DEFAULT
        /// </summary>
        public partial class AstPrimitiveExpression1 : AstPrimitiveExpression
        {
            
            internal AstPrimitiveExpression1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPrimitiveExpression1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPrimitiveExpression1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPrimitiveExpression1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrimitiveExpression(this);
            }
        }
        /// <summary>
        /// primitive_expression : NULL_
        /// </summary>
        public partial class AstPrimitiveExpression2 : AstPrimitiveExpression
        {
            
            internal AstPrimitiveExpression2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPrimitiveExpression2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPrimitiveExpression2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPrimitiveExpression2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrimitiveExpression(this);
            }
        }
        /// <summary>
        /// primitive_expression : local_id
        /// </summary>
        public partial class AstPrimitiveExpression3 : AstPrimitiveExpression
        {
            
            internal AstPrimitiveExpression3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPrimitiveExpression3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPrimitiveExpression3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPrimitiveExpression3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrimitiveExpression(this);
            }
        }
        /// <summary>
        /// primitive_expression : constant
        /// </summary>
        public partial class AstPrimitiveExpression4 : AstPrimitiveExpression
        {
            
            internal AstPrimitiveExpression4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPrimitiveExpression4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPrimitiveExpression4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPrimitiveExpression4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrimitiveExpression(this);
            }
        }
        

        
        internal AstPrimitiveExpression(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstPrimitiveExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPrimitiveExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstPrimitiveExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstPrimitiveExpression Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstPrimitiveExpression.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstConstant), false, false))
                {
                    return 4;
                }
            }
            if ((list.Count == 0))
            {
                return 1;
                return 2;
            }
            return 0;
        }
        
        /// <summary>
        /// primitive_expression : 
        ///    local_id 
        /// </summary>
        public static AstPrimitiveExpression PrimitiveExpression(AstLocalId localId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPrimitiveExpression.AstPrimitiveExpression3 result = new AstPrimitiveExpression.AstPrimitiveExpression3(arguments);
            return result;
        }
        
        /// <summary>
        /// primitive_expression : 
        ///    constant 
        /// </summary>
        public static AstPrimitiveExpression PrimitiveExpression(AstConstant constant)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPrimitiveExpression.AstPrimitiveExpression4 result = new AstPrimitiveExpression.AstPrimitiveExpression4(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// case_expression
    /// 	 : CASE  caseExpr = expression  switch_section+  (ELSE  elseExpr = expression)?  END
    /// 	 | CASE  switch_search_condition_section+  (ELSE  elseExpr = expression)?  END
    /// </summary>
    public abstract partial class AstCaseExpression : AstRule
    {
        
        protected static string _rule = "case_expression\r\n\t : CASE  caseExpr = expression  switch_section+  (ELSE  elseExp" +
            "r = expression)?  END\r\n\t | CASE  switch_search_condition_section+  (ELSE  elseEx" +
            "pr = expression)?  END";
        
        /// <summary>
        /// case_expression : CASE  caseExpr = expression  switch_section+  (ELSE  elseExpr = expression)?  END
        /// </summary>
        public partial class AstCaseExpression1 : AstCaseExpression
        {
            
            internal AstCaseExpression1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCaseExpression1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCaseExpression1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCaseExpression1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCaseExpression(this);
            }
        }
        /// <summary>
        /// case_expression : CASE  switch_search_condition_section+  (ELSE  elseExpr = expression)?  END
        /// </summary>
        public partial class AstCaseExpression2 : AstCaseExpression
        {
            
            internal AstCaseExpression2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCaseExpression2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCaseExpression2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCaseExpression2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCaseExpression(this);
            }
        }
        

        
        internal AstCaseExpression(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCaseExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCaseExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstCaseExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCaseExpression Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCaseExpression.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstSwitchSection), false, true))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 1;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstSwitchSearchConditionSection), false, true))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// case_expression : 
        ///    CASE caseExpr=expression switch_section+ ELSE elseExpr=expression END 
        /// </summary>
        public static AstCaseExpression CaseExpression(AstExpression caseExpr, IEnumerable<AstSwitchSection> switchSection, AstExpression elseExpr)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCaseExpression.AstCaseExpression1 result = new AstCaseExpression.AstCaseExpression1(arguments);
            return result;
        }
        
        /// <summary>
        /// case_expression : 
        ///    CASE switch_search_condition_section+ ELSE elseExpr=expression END 
        /// </summary>
        public static AstCaseExpression CaseExpression(IEnumerable<AstSwitchSearchConditionSection> switchSearchConditionSection, AstExpression elseExpr)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCaseExpression.AstCaseExpression2 result = new AstCaseExpression.AstCaseExpression2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// unary_operator_expression
    /// 	 : BIT_NOT  expression
    /// 	 | plus_minus  expression
    /// </summary>
    public abstract partial class AstUnaryOperatorExpression : AstRule
    {
        
        protected static string _rule = "unary_operator_expression\r\n\t : BIT_NOT  expression\r\n\t | plus_minus  expression";
        
        /// <summary>
        /// unary_operator_expression : BIT_NOT  expression
        /// </summary>
        public partial class AstUnaryOperatorExpression1 : AstUnaryOperatorExpression
        {
            
            internal AstUnaryOperatorExpression1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUnaryOperatorExpression1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUnaryOperatorExpression1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUnaryOperatorExpression1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUnaryOperatorExpression(this);
            }
        }
        /// <summary>
        /// unary_operator_expression : plus_minus  expression
        /// </summary>
        public partial class AstUnaryOperatorExpression2 : AstUnaryOperatorExpression
        {
            
            internal AstUnaryOperatorExpression2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUnaryOperatorExpression2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUnaryOperatorExpression2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUnaryOperatorExpression2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUnaryOperatorExpression(this);
            }
        }
        

        
        internal AstUnaryOperatorExpression(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstUnaryOperatorExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUnaryOperatorExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstUnaryOperatorExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstUnaryOperatorExpression Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstUnaryOperatorExpression.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstPlusMinus), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// unary_operator_expression : 
        ///    BIT_NOT expression 
        /// </summary>
        public static AstUnaryOperatorExpression UnaryOperatorExpression(AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUnaryOperatorExpression.AstUnaryOperatorExpression1 result = new AstUnaryOperatorExpression.AstUnaryOperatorExpression1(arguments);
            return result;
        }
        
        /// <summary>
        /// unary_operator_expression : 
        ///    plus_minus expression 
        /// </summary>
        public static AstUnaryOperatorExpression UnaryOperatorExpression(AstPlusMinus plusMinus, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUnaryOperatorExpression.AstUnaryOperatorExpression2 result = new AstUnaryOperatorExpression.AstUnaryOperatorExpression2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// bracket_expression
    /// 	 : LR_BRACKET  expression  RR_BRACKET
    /// 	 | LR_BRACKET  subquery  RR_BRACKET
    /// </summary>
    public abstract partial class AstBracketExpression : AstRule
    {
        
        protected static string _rule = "bracket_expression\r\n\t : LR_BRACKET  expression  RR_BRACKET\r\n\t | LR_BRACKET  subqu" +
            "ery  RR_BRACKET";
        
        /// <summary>
        /// bracket_expression : LR_BRACKET  expression  RR_BRACKET
        /// </summary>
        public partial class AstBracketExpression1 : AstBracketExpression
        {
            
            internal AstBracketExpression1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBracketExpression1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBracketExpression1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBracketExpression1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBracketExpression(this);
            }
        }
        /// <summary>
        /// bracket_expression : LR_BRACKET  subquery  RR_BRACKET
        /// </summary>
        public partial class AstBracketExpression2 : AstBracketExpression
        {
            
            internal AstBracketExpression2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBracketExpression2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBracketExpression2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBracketExpression2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBracketExpression(this);
            }
        }
        

        
        internal AstBracketExpression(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstBracketExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBracketExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstBracketExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstBracketExpression Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstBracketExpression.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstSubquery), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// bracket_expression : 
        ///    ( expression ) 
        /// </summary>
        public static AstBracketExpression BracketExpression(AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBracketExpression.AstBracketExpression1 result = new AstBracketExpression.AstBracketExpression1(arguments);
            return result;
        }
        
        /// <summary>
        /// bracket_expression : 
        ///    ( subquery ) 
        /// </summary>
        public static AstBracketExpression BracketExpression(AstSubquery subquery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBracketExpression.AstBracketExpression2 result = new AstBracketExpression.AstBracketExpression2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// constant_expression
    /// 	 : NULL_
    /// 	 | constant
    /// 	 | function_call
    /// 	 | local_id
    /// 	 | LR_BRACKET  constant_expression  RR_BRACKET
    /// </summary>
    public abstract partial class AstConstantExpression : AstRule
    {
        
        protected static string _rule = "constant_expression\r\n\t : NULL_\r\n\t | constant\r\n\t | function_call\r\n\t | local_id\r\n\t " +
            "| LR_BRACKET  constant_expression  RR_BRACKET";
        
        /// <summary>
        /// constant_expression : NULL_
        /// </summary>
        public partial class AstConstantExpression1 : AstConstantExpression
        {
            
            internal AstConstantExpression1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConstantExpression1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConstantExpression1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConstantExpression1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantExpression(this);
            }
        }
        /// <summary>
        /// constant_expression : constant
        /// </summary>
        public partial class AstConstantExpression2 : AstConstantExpression
        {
            
            internal AstConstantExpression2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConstantExpression2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConstantExpression2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConstantExpression2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantExpression(this);
            }
        }
        /// <summary>
        /// constant_expression : function_call
        /// </summary>
        public partial class AstConstantExpression3 : AstConstantExpression
        {
            
            internal AstConstantExpression3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConstantExpression3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConstantExpression3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConstantExpression3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantExpression(this);
            }
        }
        /// <summary>
        /// constant_expression : local_id
        /// </summary>
        public partial class AstConstantExpression4 : AstConstantExpression
        {
            
            internal AstConstantExpression4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConstantExpression4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConstantExpression4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConstantExpression4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantExpression(this);
            }
        }
        /// <summary>
        /// constant_expression : LR_BRACKET  constant_expression  RR_BRACKET
        /// </summary>
        public partial class AstConstantExpression5 : AstConstantExpression
        {
            
            internal AstConstantExpression5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConstantExpression5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConstantExpression5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConstantExpression5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantExpression(this);
            }
        }
        

        
        internal AstConstantExpression(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstConstantExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstConstantExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstConstantExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstConstantExpression Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstConstantExpression.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstConstant), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstFunctionCall), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstConstantExpression), false, false))
                {
                    return 5;
                }
            }
            if ((list.Count == 0))
            {
                return 1;
            }
            return 0;
        }
        
        /// <summary>
        /// constant_expression : 
        ///    constant 
        /// </summary>
        public static AstConstantExpression ConstantExpression(AstConstant constant)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstantExpression.AstConstantExpression2 result = new AstConstantExpression.AstConstantExpression2(arguments);
            return result;
        }
        
        /// <summary>
        /// constant_expression : 
        ///    function_call 
        /// </summary>
        public static AstConstantExpression ConstantExpression(AstFunctionCall functionCall)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstantExpression.AstConstantExpression3 result = new AstConstantExpression.AstConstantExpression3(arguments);
            return result;
        }
        
        /// <summary>
        /// constant_expression : 
        ///    local_id 
        /// </summary>
        public static AstConstantExpression ConstantExpression(AstLocalId localId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstantExpression.AstConstantExpression4 result = new AstConstantExpression.AstConstantExpression4(arguments);
            return result;
        }
        
        /// <summary>
        /// constant_expression : 
        ///    ( constant_expression ) 
        /// </summary>
        public static AstConstantExpression ConstantExpression(AstConstantExpression constantExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstantExpression.AstConstantExpression5 result = new AstConstantExpression.AstConstantExpression5(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// common_table_expression
    /// 	 : expression_name = id_  (LR_BRACKET  columns = column_name_list  RR_BRACKET)?  AS  LR_BRACKET  cte_query = select_statement  RR_BRACKET
    /// </summary>
    public partial class AstCommonTableExpression : AstRule
    {
        
        protected static string _rule = "common_table_expression\r\n\t : expression_name = id_  (LR_BRACKET  columns = column" +
            "_name_list  RR_BRACKET)?  AS  LR_BRACKET  cte_query = select_statement  RR_BRACK" +
            "ET";
        
        internal AstCommonTableExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstCommonTableExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCommonTableExpression(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCommonTableExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCommonTableExpression(this);
        }
        
        /// <summary>
        /// common_table_expression : 
        ///    expression_name=id_ ( columns=column_name_list ) AS ( cte_query=select_statement ) 
        /// </summary>
        public static AstCommonTableExpression CommonTableExpression(AstId expressionName, AstColumnNameList columns, AstSelectStatement cteQuery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCommonTableExpression result = new AstCommonTableExpression(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// update_elem
    /// 	 : local_id  EQUAL  full_column_name  (EQUAL | assignment_operator)  expression
    /// 	 | (full_column_name | local_id)  (EQUAL | assignment_operator)  expression
    /// 	 | udt_column_id  DOT  method_id  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    public abstract partial class AstUpdateElem : AstRule
    {
        
        protected static string _rule = "update_elem\r\n\t : local_id  EQUAL  full_column_name  (EQUAL | assignment_operator)" +
            "  expression\r\n\t | (full_column_name | local_id)  (EQUAL | assignment_operator)  " +
            "expression\r\n\t | udt_column_id  DOT  method_id  LR_BRACKET  expression_list  RR_B" +
            "RACKET";
        
        /// <summary>
        /// update_elem : local_id  EQUAL  full_column_name  (EQUAL | assignment_operator)  expression
        /// </summary>
        public partial class AstUpdateElem1 : AstUpdateElem
        {
            
            internal AstUpdateElem1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateElem1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateElem1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateElem1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateElem(this);
            }
        }
        /// <summary>
        /// update_elem : (full_column_name | local_id)  (EQUAL | assignment_operator)  expression
        /// </summary>
        public partial class AstUpdateElem2 : AstUpdateElem
        {
            
            internal AstUpdateElem2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateElem2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateElem2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateElem2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateElem(this);
            }
        }
        /// <summary>
        /// update_elem : udt_column_id  DOT  method_id  LR_BRACKET  expression_list  RR_BRACKET
        /// </summary>
        public partial class AstUpdateElem3 : AstUpdateElem
        {
            
            internal AstUpdateElem3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateElem3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateElem3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateElem3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateElem(this);
            }
        }
        

        
        internal AstUpdateElem(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstUpdateElem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUpdateElem(Position p) : 
                base(p)
        {
        }
        
        internal AstUpdateElem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstUpdateElem Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstUpdateElem.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFullColumnName), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstAssignmentOperator), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstExpression), false, false))
                            {
                                return 1;
                            }
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstFullColumnName), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstLocalId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstAssignmentOperator), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstExpression), false, false))
                            {
                                return 2;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstUdtColumnId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstMethodId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpressionList), false, false))
                        {
                            return 3;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// update_elem : 
        ///    local_id EQUAL full_column_name EQUAL expression 
        /// </summary>
        public static AstUpdateElem UpdateElem(AstLocalId localId, AstFullColumnName fullColumnName, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElem.AstUpdateElem1 result = new AstUpdateElem.AstUpdateElem1(arguments);
            return result;
        }
        
        /// <summary>
        /// update_elem : 
        ///    local_id EQUAL full_column_name assignment_operator expression 
        /// </summary>
        public static AstUpdateElem UpdateElem(AstLocalId localId, AstFullColumnName fullColumnName, AstAssignmentOperator assignmentOperator, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElem.AstUpdateElem1 result = new AstUpdateElem.AstUpdateElem1(arguments);
            return result;
        }
        
        /// <summary>
        /// update_elem : 
        ///    full_column_name EQUAL expression 
        /// </summary>
        public static AstUpdateElem UpdateElem(AstFullColumnName fullColumnName, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElem.AstUpdateElem2 result = new AstUpdateElem.AstUpdateElem2(arguments);
            return result;
        }
        
        /// <summary>
        /// update_elem : 
        ///    local_id EQUAL expression 
        /// </summary>
        public static AstUpdateElem UpdateElem(AstLocalId localId, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElem.AstUpdateElem2 result = new AstUpdateElem.AstUpdateElem2(arguments);
            return result;
        }
        
        /// <summary>
        /// update_elem : 
        ///    full_column_name assignment_operator expression 
        /// </summary>
        public static AstUpdateElem UpdateElem(AstFullColumnName fullColumnName, AstAssignmentOperator assignmentOperator, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElem.AstUpdateElem2 result = new AstUpdateElem.AstUpdateElem2(arguments);
            return result;
        }
        
        /// <summary>
        /// update_elem : 
        ///    local_id assignment_operator expression 
        /// </summary>
        public static AstUpdateElem UpdateElem(AstLocalId localId, AstAssignmentOperator assignmentOperator, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElem.AstUpdateElem2 result = new AstUpdateElem.AstUpdateElem2(arguments);
            return result;
        }
        
        /// <summary>
        /// update_elem : 
        ///    udt_column_id . method_id ( expression_list ) 
        /// </summary>
        public static AstUpdateElem UpdateElem(AstUdtColumnId udtColumnId, AstMethodId methodId, AstExpressionList expressionList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElem.AstUpdateElem3 result = new AstUpdateElem.AstUpdateElem3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// update_elem_merge
    /// 	 : (full_column_name | local_id)  (EQUAL | assignment_operator)  expression
    /// 	 | udt_column_id  DOT  method_id  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    public abstract partial class AstUpdateElemMerge : AstRule
    {
        
        protected static string _rule = "update_elem_merge\r\n\t : (full_column_name | local_id)  (EQUAL | assignment_operato" +
            "r)  expression\r\n\t | udt_column_id  DOT  method_id  LR_BRACKET  expression_list  " +
            "RR_BRACKET";
        
        /// <summary>
        /// update_elem_merge : (full_column_name | local_id)  (EQUAL | assignment_operator)  expression
        /// </summary>
        public partial class AstUpdateElemMerge1 : AstUpdateElemMerge
        {
            
            internal AstUpdateElemMerge1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateElemMerge1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateElemMerge1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateElemMerge1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateElemMerge(this);
            }
        }
        /// <summary>
        /// update_elem_merge : udt_column_id  DOT  method_id  LR_BRACKET  expression_list  RR_BRACKET
        /// </summary>
        public partial class AstUpdateElemMerge2 : AstUpdateElemMerge
        {
            
            internal AstUpdateElemMerge2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateElemMerge2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateElemMerge2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateElemMerge2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateElemMerge(this);
            }
        }
        

        
        internal AstUpdateElemMerge(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstUpdateElemMerge(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUpdateElemMerge(Position p) : 
                base(p)
        {
        }
        
        internal AstUpdateElemMerge(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstUpdateElemMerge Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstUpdateElemMerge.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstFullColumnName), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstLocalId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstAssignmentOperator), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstExpression), false, false))
                            {
                                return 1;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstUdtColumnId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstMethodId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpressionList), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// update_elem_merge : 
        ///    full_column_name EQUAL expression 
        /// </summary>
        public static AstUpdateElemMerge UpdateElemMerge(AstFullColumnName fullColumnName, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElemMerge.AstUpdateElemMerge1 result = new AstUpdateElemMerge.AstUpdateElemMerge1(arguments);
            return result;
        }
        
        /// <summary>
        /// update_elem_merge : 
        ///    local_id EQUAL expression 
        /// </summary>
        public static AstUpdateElemMerge UpdateElemMerge(AstLocalId localId, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElemMerge.AstUpdateElemMerge1 result = new AstUpdateElemMerge.AstUpdateElemMerge1(arguments);
            return result;
        }
        
        /// <summary>
        /// update_elem_merge : 
        ///    full_column_name assignment_operator expression 
        /// </summary>
        public static AstUpdateElemMerge UpdateElemMerge(AstFullColumnName fullColumnName, AstAssignmentOperator assignmentOperator, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElemMerge.AstUpdateElemMerge1 result = new AstUpdateElemMerge.AstUpdateElemMerge1(arguments);
            return result;
        }
        
        /// <summary>
        /// update_elem_merge : 
        ///    local_id assignment_operator expression 
        /// </summary>
        public static AstUpdateElemMerge UpdateElemMerge(AstLocalId localId, AstAssignmentOperator assignmentOperator, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElemMerge.AstUpdateElemMerge1 result = new AstUpdateElemMerge.AstUpdateElemMerge1(arguments);
            return result;
        }
        
        /// <summary>
        /// update_elem_merge : 
        ///    udt_column_id . method_id ( expression_list ) 
        /// </summary>
        public static AstUpdateElemMerge UpdateElemMerge(AstUdtColumnId udtColumnId, AstMethodId methodId, AstExpressionList expressionList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateElemMerge.AstUpdateElemMerge2 result = new AstUpdateElemMerge.AstUpdateElemMerge2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// search_condition
    /// 	 : NOT*  (predicate | LR_BRACKET  search_condition  RR_BRACKET)
    /// 	 | left = search_condition  AND  right = search_condition
    /// 	 | left = search_condition  OR  right = search_condition
    /// </summary>
    public abstract partial class AstSearchCondition : AstRule
    {
        
        protected static string _rule = "search_condition\r\n\t : NOT*  (predicate | LR_BRACKET  search_condition  RR_BRACKET" +
            ")\r\n\t | left = search_condition  AND  right = search_condition\r\n\t | left = search" +
            "_condition  OR  right = search_condition";
        
        /// <summary>
        /// search_condition : NOT*  (predicate | LR_BRACKET  search_condition  RR_BRACKET)
        /// </summary>
        public partial class AstSearchCondition1 : AstSearchCondition
        {
            
            internal AstSearchCondition1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSearchCondition1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSearchCondition1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSearchCondition1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSearchCondition(this);
            }
        }
        /// <summary>
        /// search_condition : left = search_condition  AND  right = search_condition
        /// </summary>
        public partial class AstSearchCondition2 : AstSearchCondition
        {
            
            internal AstSearchCondition2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSearchCondition2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSearchCondition2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSearchCondition2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSearchCondition(this);
            }
        }
        /// <summary>
        /// search_condition : left = search_condition  OR  right = search_condition
        /// </summary>
        public partial class AstSearchCondition3 : AstSearchCondition
        {
            
            internal AstSearchCondition3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSearchCondition3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSearchCondition3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSearchCondition3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSearchCondition(this);
            }
        }
        

        
        internal AstSearchCondition(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstSearchCondition(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSearchCondition(Position p) : 
                base(p)
        {
        }
        
        internal AstSearchCondition(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSearchCondition Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSearchCondition.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstPredicate), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstSearchCondition), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstSearchCondition), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstSearchCondition), false, false))
                    {
                        return 2;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstSearchCondition), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstSearchCondition), false, false))
                    {
                        return 3;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// search_condition : 
        ///    NOT* predicate 
        /// </summary>
        public static AstSearchCondition SearchCondition(AstPredicate predicate)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSearchCondition.AstSearchCondition1 result = new AstSearchCondition.AstSearchCondition1(arguments);
            return result;
        }
        
        /// <summary>
        /// search_condition : 
        ///    NOT* ( search_condition ) 
        /// </summary>
        public static AstSearchCondition SearchCondition(AstSearchCondition searchCondition)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSearchCondition.AstSearchCondition1 result = new AstSearchCondition.AstSearchCondition1(arguments);
            return result;
        }
        
        /// <summary>
        /// search_condition : 
        ///    left=search_condition AND right=search_condition 
        /// </summary>
        public static AstSearchCondition SearchCondition(AstSearchCondition left, AstSearchCondition right)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSearchCondition.AstSearchCondition2 result = new AstSearchCondition.AstSearchCondition2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// predicate
    /// 	 : EXISTS  LR_BRACKET  subquery  RR_BRACKET
    /// 	 | freetext_predicate
    /// 	 | predicate_binary
    /// 	 | predicate_multi_assign
    /// 	 | expression  comparison_operator  all_some_any  LR_BRACKET  subquery  RR_BRACKET
    /// 	 | predicate_tier
    /// 	 | predicate_not_in
    /// 	 | predicate_not_like
    /// 	 | expression  IS  null_notnull
    /// </summary>
    public abstract partial class AstPredicate : AstRule
    {
        
        protected static string _rule = @"predicate
	 : EXISTS  LR_BRACKET  subquery  RR_BRACKET
	 | freetext_predicate
	 | predicate_binary
	 | predicate_multi_assign
	 | expression  comparison_operator  all_some_any  LR_BRACKET  subquery  RR_BRACKET
	 | predicate_tier
	 | predicate_not_in
	 | predicate_not_like
	 | expression  IS  null_notnull";
        
        /// <summary>
        /// predicate : EXISTS  LR_BRACKET  subquery  RR_BRACKET
        /// </summary>
        public partial class AstPredicate1 : AstPredicate
        {
            
            internal AstPredicate1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPredicate1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPredicate1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPredicate1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicate(this);
            }
        }
        /// <summary>
        /// predicate : freetext_predicate
        /// </summary>
        public partial class AstPredicate2 : AstPredicate
        {
            
            internal AstPredicate2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPredicate2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPredicate2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPredicate2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicate(this);
            }
        }
        /// <summary>
        /// predicate : predicate_binary
        /// </summary>
        public partial class AstPredicate3 : AstPredicate
        {
            
            internal AstPredicate3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPredicate3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPredicate3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPredicate3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicate(this);
            }
        }
        /// <summary>
        /// predicate : predicate_multi_assign
        /// </summary>
        public partial class AstPredicate4 : AstPredicate
        {
            
            internal AstPredicate4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPredicate4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPredicate4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPredicate4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicate(this);
            }
        }
        /// <summary>
        /// predicate : expression  comparison_operator  all_some_any  LR_BRACKET  subquery  RR_BRACKET
        /// </summary>
        public partial class AstPredicate5 : AstPredicate
        {
            
            internal AstPredicate5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPredicate5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPredicate5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPredicate5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicate(this);
            }
        }
        /// <summary>
        /// predicate : predicate_tier
        /// </summary>
        public partial class AstPredicate6 : AstPredicate
        {
            
            internal AstPredicate6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPredicate6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPredicate6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPredicate6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicate(this);
            }
        }
        /// <summary>
        /// predicate : predicate_not_in
        /// </summary>
        public partial class AstPredicate7 : AstPredicate
        {
            
            internal AstPredicate7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPredicate7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPredicate7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPredicate7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicate(this);
            }
        }
        /// <summary>
        /// predicate : predicate_not_like
        /// </summary>
        public partial class AstPredicate8 : AstPredicate
        {
            
            internal AstPredicate8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPredicate8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPredicate8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPredicate8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicate(this);
            }
        }
        /// <summary>
        /// predicate : expression  IS  null_notnull
        /// </summary>
        public partial class AstPredicate9 : AstPredicate
        {
            
            internal AstPredicate9(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPredicate9(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPredicate9(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPredicate9(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicate(this);
            }
        }
        

        
        internal AstPredicate(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstPredicate(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPredicate(Position p) : 
                base(p)
        {
        }
        
        internal AstPredicate(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstPredicate Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstPredicate.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstComparisonOperator), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstAllSomeAny), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstSubquery), false, false))
                            {
                                return 5;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstNullNotnull), false, false))
                    {
                        return 9;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSubquery), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstFreetextPredicate), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstPredicateBinary), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstPredicateMultiAssign), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstPredicateTier), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstPredicateNotIn), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstPredicateNotLike), false, false))
                {
                    return 8;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// predicate : 
        ///    EXISTS ( subquery ) 
        /// </summary>
        public static AstPredicate Predicate(AstSubquery subquery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPredicate.AstPredicate1 result = new AstPredicate.AstPredicate1(arguments);
            return result;
        }
        
        /// <summary>
        /// predicate : 
        ///    freetext_predicate 
        /// </summary>
        public static AstPredicate Predicate(AstFreetextPredicate freetextPredicate)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPredicate.AstPredicate2 result = new AstPredicate.AstPredicate2(arguments);
            return result;
        }
        
        /// <summary>
        /// predicate : 
        ///    predicate_binary 
        /// </summary>
        public static AstPredicate Predicate(AstPredicateBinary predicateBinary)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPredicate.AstPredicate3 result = new AstPredicate.AstPredicate3(arguments);
            return result;
        }
        
        /// <summary>
        /// predicate : 
        ///    predicate_multi_assign 
        /// </summary>
        public static AstPredicate Predicate(AstPredicateMultiAssign predicateMultiAssign)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPredicate.AstPredicate4 result = new AstPredicate.AstPredicate4(arguments);
            return result;
        }
        
        /// <summary>
        /// predicate : 
        ///    expression comparison_operator all_some_any ( subquery ) 
        /// </summary>
        public static AstPredicate Predicate(AstExpression expression, AstComparisonOperator comparisonOperator, AstAllSomeAny allSomeAny, AstSubquery subquery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPredicate.AstPredicate5 result = new AstPredicate.AstPredicate5(arguments);
            return result;
        }
        
        /// <summary>
        /// predicate : 
        ///    predicate_tier 
        /// </summary>
        public static AstPredicate Predicate(AstPredicateTier predicateTier)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPredicate.AstPredicate6 result = new AstPredicate.AstPredicate6(arguments);
            return result;
        }
        
        /// <summary>
        /// predicate : 
        ///    predicate_not_in 
        /// </summary>
        public static AstPredicate Predicate(AstPredicateNotIn predicateNotIn)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPredicate.AstPredicate7 result = new AstPredicate.AstPredicate7(arguments);
            return result;
        }
        
        /// <summary>
        /// predicate : 
        ///    predicate_not_like 
        /// </summary>
        public static AstPredicate Predicate(AstPredicateNotLike predicateNotLike)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPredicate.AstPredicate8 result = new AstPredicate.AstPredicate8(arguments);
            return result;
        }
        
        /// <summary>
        /// predicate : 
        ///    expression IS null_notnull 
        /// </summary>
        public static AstPredicate Predicate(AstExpression expression, AstNullNotnull nullNotnull)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPredicate.AstPredicate9 result = new AstPredicate.AstPredicate9(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// query_expression
    /// 	 : (query_specification | LR_BRACKET  left = query_expression  RR_BRACKET  (UNION  ALL?  right = query_expression)?)
    /// 	 | query_specification  select_order_by_clause?  unions += sql_union
    /// </summary>
    public abstract partial class AstQueryExpression : AstRule
    {
        
        protected static string _rule = "query_expression\r\n\t : (query_specification | LR_BRACKET  left = query_expression " +
            " RR_BRACKET  (UNION  ALL?  right = query_expression)?)\r\n\t | query_specification " +
            " select_order_by_clause?  unions += sql_union";
        
        /// <summary>
        /// query_expression : (query_specification | LR_BRACKET  left = query_expression  RR_BRACKET  (UNION  ALL?  right = query_expression)?)
        /// </summary>
        public partial class AstQueryExpression1 : AstQueryExpression
        {
            
            internal AstQueryExpression1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstQueryExpression1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstQueryExpression1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstQueryExpression1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueryExpression(this);
            }
        }
        /// <summary>
        /// query_expression : query_specification  select_order_by_clause?  unions += sql_union
        /// </summary>
        public partial class AstQueryExpression2 : AstQueryExpression
        {
            
            internal AstQueryExpression2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstQueryExpression2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstQueryExpression2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstQueryExpression2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueryExpression(this);
            }
        }
        

        
        internal AstQueryExpression(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstQueryExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstQueryExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstQueryExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstQueryExpression Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstQueryExpression.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstQuerySpecification), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstQueryExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstQueryExpression), false, false))
                        {
                            return 1;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstQuerySpecification), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstSelectOrderByClause), true, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstSqlUnion), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// query_expression : 
        ///    query_specification 
        /// </summary>
        public static AstQueryExpression QueryExpression(AstQuerySpecification querySpecification)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueryExpression.AstQueryExpression1 result = new AstQueryExpression.AstQueryExpression1(arguments);
            return result;
        }
        
        /// <summary>
        /// query_expression : 
        ///    ( left=query_expression ) UNION ALL? right=query_expression 
        /// </summary>
        public static AstQueryExpression QueryExpression(AstQueryExpression left, AstQueryExpression right)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueryExpression.AstQueryExpression1 result = new AstQueryExpression.AstQueryExpression1(arguments);
            return result;
        }
        
        /// <summary>
        /// query_expression : 
        ///    query_specification select_order_by_clause? unions=sql_union 
        /// </summary>
        public static AstQueryExpression QueryExpression(AstQuerySpecification querySpecification, AstSelectOrderByClause selectOrderByClause, AstSqlUnion unions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueryExpression.AstQueryExpression2 result = new AstQueryExpression.AstQueryExpression2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// top_clause
    /// 	 : TOP  (top_percent | top_count)  (WITH  TIES)?
    /// </summary>
    public partial class AstTopClause : AstRule
    {
        
        protected static string _rule = "top_clause\r\n\t : TOP  (top_percent | top_count)  (WITH  TIES)?";
        
        internal AstTopClause(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstTopClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTopClause(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTopClause(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTopClause(this);
        }
        
        /// <summary>
        /// top_clause : 
        ///    TOP top_percent WITH TIES 
        /// </summary>
        public static AstTopClause TopClause(AstTopPercent topPercent)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTopClause result = new AstTopClause(arguments);
            return result;
        }
        
        /// <summary>
        /// top_clause : 
        ///    TOP top_count WITH TIES 
        /// </summary>
        public static AstTopClause TopClause(AstTopCount topCount)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTopClause result = new AstTopClause(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// top_percent
    /// 	 : percent_constant  PERCENT
    /// 	 | LR_BRACKET  topper_expression = expression  RR_BRACKET  PERCENT
    /// </summary>
    public abstract partial class AstTopPercent : AstRule
    {
        
        protected static string _rule = "top_percent\r\n\t : percent_constant  PERCENT\r\n\t | LR_BRACKET  topper_expression = e" +
            "xpression  RR_BRACKET  PERCENT";
        
        /// <summary>
        /// top_percent : percent_constant  PERCENT
        /// </summary>
        public partial class AstTopPercent1 : AstTopPercent
        {
            
            internal AstTopPercent1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTopPercent1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTopPercent1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTopPercent1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTopPercent(this);
            }
        }
        /// <summary>
        /// top_percent : LR_BRACKET  topper_expression = expression  RR_BRACKET  PERCENT
        /// </summary>
        public partial class AstTopPercent2 : AstTopPercent
        {
            
            internal AstTopPercent2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTopPercent2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTopPercent2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTopPercent2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTopPercent(this);
            }
        }
        

        
        internal AstTopPercent(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstTopPercent(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTopPercent(Position p) : 
                base(p)
        {
        }
        
        internal AstTopPercent(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTopPercent Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTopPercent.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstPercentConstant), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// top_percent : 
        ///    percent_constant PERCENT 
        /// </summary>
        public static AstTopPercent TopPercent(AstPercentConstant percentConstant)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTopPercent.AstTopPercent1 result = new AstTopPercent.AstTopPercent1(arguments);
            return result;
        }
        
        /// <summary>
        /// top_percent : 
        ///    ( topper_expression=expression ) PERCENT 
        /// </summary>
        public static AstTopPercent TopPercent(AstExpression topperExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTopPercent.AstTopPercent2 result = new AstTopPercent.AstTopPercent2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// percent_constant
    /// 	 : real
    /// 	 | float
    /// 	 | decimal
    /// </summary>
    public abstract partial class AstPercentConstant : AstRule
    {
        
        protected static string _rule = "percent_constant\r\n\t : real\r\n\t | float\r\n\t | decimal";
        
        /// <summary>
        /// percent_constant : real
        /// </summary>
        public partial class AstPercentConstant1 : AstPercentConstant
        {
            
            internal AstPercentConstant1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPercentConstant1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPercentConstant1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPercentConstant1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPercentConstant(this);
            }
        }
        /// <summary>
        /// percent_constant : float
        /// </summary>
        public partial class AstPercentConstant2 : AstPercentConstant
        {
            
            internal AstPercentConstant2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPercentConstant2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPercentConstant2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPercentConstant2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPercentConstant(this);
            }
        }
        /// <summary>
        /// percent_constant : decimal
        /// </summary>
        public partial class AstPercentConstant3 : AstPercentConstant
        {
            
            internal AstPercentConstant3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstPercentConstant3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstPercentConstant3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstPercentConstant3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPercentConstant(this);
            }
        }
        

        
        internal AstPercentConstant(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstPercentConstant(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPercentConstant(Position p) : 
                base(p)
        {
        }
        
        internal AstPercentConstant(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstPercentConstant Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstPercentConstant.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstReal), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstFloat), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// percent_constant : 
        ///    real 
        /// </summary>
        public static AstPercentConstant PercentConstant(AstReal real)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPercentConstant.AstPercentConstant1 result = new AstPercentConstant.AstPercentConstant1(arguments);
            return result;
        }
        
        /// <summary>
        /// percent_constant : 
        ///    float 
        /// </summary>
        public static AstPercentConstant PercentConstant(AstFloat @float)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPercentConstant.AstPercentConstant2 result = new AstPercentConstant.AstPercentConstant2(arguments);
            return result;
        }
        
        /// <summary>
        /// percent_constant : 
        ///    decimal 
        /// </summary>
        public static AstPercentConstant PercentConstant(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstPercentConstant.AstPercentConstant3 result = new AstPercentConstant.AstPercentConstant3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// top_count
    /// 	 : count_constant = decimal
    /// 	 | LR_BRACKET  topcount_expression = expression  RR_BRACKET
    /// </summary>
    public abstract partial class AstTopCount : AstRule
    {
        
        protected static string _rule = "top_count\r\n\t : count_constant = decimal\r\n\t | LR_BRACKET  topcount_expression = ex" +
            "pression  RR_BRACKET";
        
        /// <summary>
        /// top_count : count_constant = decimal
        /// </summary>
        public partial class AstTopCount1 : AstTopCount
        {
            
            internal AstTopCount1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTopCount1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTopCount1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTopCount1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTopCount(this);
            }
        }
        /// <summary>
        /// top_count : LR_BRACKET  topcount_expression = expression  RR_BRACKET
        /// </summary>
        public partial class AstTopCount2 : AstTopCount
        {
            
            internal AstTopCount2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTopCount2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTopCount2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTopCount2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTopCount(this);
            }
        }
        

        
        internal AstTopCount(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstTopCount(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTopCount(Position p) : 
                base(p)
        {
        }
        
        internal AstTopCount(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTopCount Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTopCount.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// top_count : 
        ///    count_constant=decimal 
        /// </summary>
        public static AstTopCount TopCount(AstDecimal countConstant)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTopCount.AstTopCount1 result = new AstTopCount.AstTopCount1(arguments);
            return result;
        }
        
        /// <summary>
        /// top_count : 
        ///    ( topcount_expression=expression ) 
        /// </summary>
        public static AstTopCount TopCount(AstExpression topcountExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTopCount.AstTopCount2 result = new AstTopCount.AstTopCount2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// for_clause
    /// 	 : FOR  BROWSE
    /// 	 | for_clause_xml_raw
    /// 	 | FOR  XML  EXPLICIT  xml_common_directives?  (COMMA  XMLDATA)?
    /// 	 | FOR  XML  PATH  (LR_BRACKET  stringtext  RR_BRACKET)?  xml_common_directives?  (COMMA  ELEMENTS  absent_xsinil?)?
    /// 	 | for_clause_json
    /// </summary>
    public abstract partial class AstForClause : AstRule
    {
        
        protected static string _rule = @"for_clause
	 : FOR  BROWSE
	 | for_clause_xml_raw
	 | FOR  XML  EXPLICIT  xml_common_directives?  (COMMA  XMLDATA)?
	 | FOR  XML  PATH  (LR_BRACKET  stringtext  RR_BRACKET)?  xml_common_directives?  (COMMA  ELEMENTS  absent_xsinil?)?
	 | for_clause_json";
        
        /// <summary>
        /// for_clause : FOR  BROWSE
        /// </summary>
        public partial class AstForClause1 : AstForClause
        {
            
            internal AstForClause1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstForClause1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstForClause1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstForClause1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForClause(this);
            }
        }
        /// <summary>
        /// for_clause : for_clause_xml_raw
        /// </summary>
        public partial class AstForClause2 : AstForClause
        {
            
            internal AstForClause2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstForClause2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstForClause2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstForClause2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForClause(this);
            }
        }
        /// <summary>
        /// for_clause : FOR  XML  EXPLICIT  xml_common_directives?  (COMMA  XMLDATA)?
        /// </summary>
        public partial class AstForClause3 : AstForClause
        {
            
            internal AstForClause3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstForClause3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstForClause3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstForClause3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForClause(this);
            }
        }
        /// <summary>
        /// for_clause : FOR  XML  PATH  (LR_BRACKET  stringtext  RR_BRACKET)?  xml_common_directives?  (COMMA  ELEMENTS  absent_xsinil?)?
        /// </summary>
        public partial class AstForClause4 : AstForClause
        {
            
            internal AstForClause4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstForClause4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstForClause4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstForClause4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForClause(this);
            }
        }
        /// <summary>
        /// for_clause : for_clause_json
        /// </summary>
        public partial class AstForClause5 : AstForClause
        {
            
            internal AstForClause5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstForClause5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstForClause5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstForClause5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForClause(this);
            }
        }
        

        
        internal AstForClause(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstForClause(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstForClause(Position p) : 
                base(p)
        {
        }
        
        internal AstForClause(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstForClause Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstForClause.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstXmlCommonDirectives), true, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstAbsentXsinil), true, false))
                        {
                            return 4;
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstForClauseXmlRaw), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstXmlCommonDirectives), true, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstForClauseJson), false, false))
                {
                    return 5;
                }
            }
            if ((list.Count == 0))
            {
                return 1;
            }
            return 0;
        }
        
        /// <summary>
        /// for_clause : 
        ///    for_clause_xml_raw 
        /// </summary>
        public static AstForClause ForClause(AstForClauseXmlRaw forClauseXmlRaw)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstForClause.AstForClause2 result = new AstForClause.AstForClause2(arguments);
            return result;
        }
        
        /// <summary>
        /// for_clause : 
        ///    FOR XML EXPLICIT xml_common_directives? , XMLDATA 
        /// </summary>
        public static AstForClause ForClause(AstXmlCommonDirectives xmlCommonDirectives)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstForClause.AstForClause3 result = new AstForClause.AstForClause3(arguments);
            return result;
        }
        
        /// <summary>
        /// for_clause : 
        ///    FOR XML PATH ( stringtext ) xml_common_directives? , ELEMENTS absent_xsinil? 
        /// </summary>
        public static AstForClause ForClause(AstStringtext stringtext, AstXmlCommonDirectives xmlCommonDirectives, AstAbsentXsinil absentXsinil)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstForClause.AstForClause4 result = new AstForClause.AstForClause4(arguments);
            return result;
        }
        
        /// <summary>
        /// for_clause : 
        ///    for_clause_json 
        /// </summary>
        public static AstForClause ForClause(AstForClauseJson forClauseJson)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstForClause.AstForClause5 result = new AstForClause.AstForClause5(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// xml_common_directive
    /// 	 : BINARY_KEYWORD  BASE64
    /// 	 | TYPE
    /// 	 | ROOT  (LR_BRACKET  stringtext  RR_BRACKET)?
    /// </summary>
    public abstract partial class AstXmlCommonDirective : AstRule
    {
        
        protected static string _rule = "xml_common_directive\r\n\t : BINARY_KEYWORD  BASE64\r\n\t | TYPE\r\n\t | ROOT  (LR_BRACKET" +
            "  stringtext  RR_BRACKET)?";
        
        /// <summary>
        /// xml_common_directive : BINARY_KEYWORD  BASE64
        /// </summary>
        public partial class AstXmlCommonDirective1 : AstXmlCommonDirective
        {
            
            internal AstXmlCommonDirective1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstXmlCommonDirective1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstXmlCommonDirective1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstXmlCommonDirective1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlCommonDirective(this);
            }
        }
        /// <summary>
        /// xml_common_directive : TYPE
        /// </summary>
        public partial class AstXmlCommonDirective2 : AstXmlCommonDirective
        {
            
            internal AstXmlCommonDirective2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstXmlCommonDirective2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstXmlCommonDirective2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstXmlCommonDirective2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlCommonDirective(this);
            }
        }
        /// <summary>
        /// xml_common_directive : ROOT  (LR_BRACKET  stringtext  RR_BRACKET)?
        /// </summary>
        public partial class AstXmlCommonDirective3 : AstXmlCommonDirective
        {
            
            internal AstXmlCommonDirective3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstXmlCommonDirective3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstXmlCommonDirective3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstXmlCommonDirective3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlCommonDirective(this);
            }
        }
        

        
        internal AstXmlCommonDirective(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstXmlCommonDirective(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstXmlCommonDirective(Position p) : 
                base(p)
        {
        }
        
        internal AstXmlCommonDirective(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstXmlCommonDirective Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstXmlCommonDirective.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 3;
                }
            }
            if ((list.Count == 0))
            {
                return 1;
                return 2;
            }
            return 0;
        }
        
        /// <summary>
        /// xml_common_directive : 
        ///    ROOT ( stringtext ) 
        /// </summary>
        public static AstXmlCommonDirective XmlCommonDirective(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstXmlCommonDirective.AstXmlCommonDirective3 result = new AstXmlCommonDirective.AstXmlCommonDirective3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// clause_json_info
    /// 	 : ROOT  (LR_BRACKET  stringtext  RR_BRACKET)
    /// 	 | INCLUDE_NULL_VALUES
    /// 	 | WITHOUT_ARRAY_WRAPPER
    /// </summary>
    public abstract partial class AstClauseJsonInfo : AstRule
    {
        
        protected static string _rule = "clause_json_info\r\n\t : ROOT  (LR_BRACKET  stringtext  RR_BRACKET)\r\n\t | INCLUDE_NUL" +
            "L_VALUES\r\n\t | WITHOUT_ARRAY_WRAPPER";
        
        /// <summary>
        /// clause_json_info : ROOT  (LR_BRACKET  stringtext  RR_BRACKET)
        /// </summary>
        public partial class AstClauseJsonInfo1 : AstClauseJsonInfo
        {
            
            internal AstClauseJsonInfo1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstClauseJsonInfo1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstClauseJsonInfo1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstClauseJsonInfo1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClauseJsonInfo(this);
            }
        }
        /// <summary>
        /// clause_json_info : INCLUDE_NULL_VALUES
        /// </summary>
        public partial class AstClauseJsonInfo2 : AstClauseJsonInfo
        {
            
            internal AstClauseJsonInfo2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstClauseJsonInfo2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstClauseJsonInfo2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstClauseJsonInfo2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClauseJsonInfo(this);
            }
        }
        /// <summary>
        /// clause_json_info : WITHOUT_ARRAY_WRAPPER
        /// </summary>
        public partial class AstClauseJsonInfo3 : AstClauseJsonInfo
        {
            
            internal AstClauseJsonInfo3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstClauseJsonInfo3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstClauseJsonInfo3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstClauseJsonInfo3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClauseJsonInfo(this);
            }
        }
        

        
        internal AstClauseJsonInfo(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstClauseJsonInfo(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstClauseJsonInfo(Position p) : 
                base(p)
        {
        }
        
        internal AstClauseJsonInfo(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstClauseJsonInfo Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstClauseJsonInfo.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
            }
            if ((list.Count == 0))
            {
                return 2;
                return 3;
            }
            return 0;
        }
        
        /// <summary>
        /// clause_json_info : 
        ///    ROOT ( stringtext ) 
        /// </summary>
        public static AstClauseJsonInfo ClauseJsonInfo(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstClauseJsonInfo.AstClauseJsonInfo1 result = new AstClauseJsonInfo.AstClauseJsonInfo1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// order_by_expression
    /// 	 : order_by = expression  (ascending = ASC | descending = DESC)?
    /// </summary>
    public partial class AstOrderByExpression : AstRule
    {
        
        protected static string _rule = "order_by_expression\r\n\t : order_by = expression  (ascending = ASC | descending = D" +
            "ESC)?";
        
        internal AstOrderByExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstOrderByExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstOrderByExpression(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstOrderByExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOrderByExpression(this);
        }
        
        /// <summary>
        /// order_by_expression : 
        ///    order_by=expression ascending=ASC 
        /// </summary>
        public static AstOrderByExpression OrderByExpression(AstExpression orderBy)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstOrderByExpression result = new AstOrderByExpression(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// grouping_sets_item
    /// 	 : grouping_sets_list
    /// 	 | LR_BRACKET  grouping_sets_list?  RR_BRACKET
    /// </summary>
    public abstract partial class AstGroupingSetsItem : AstRule
    {
        
        protected static string _rule = "grouping_sets_item\r\n\t : grouping_sets_list\r\n\t | LR_BRACKET  grouping_sets_list?  " +
            "RR_BRACKET";
        
        /// <summary>
        /// grouping_sets_item : grouping_sets_list
        /// </summary>
        public partial class AstGroupingSetsItem1 : AstGroupingSetsItem
        {
            
            internal AstGroupingSetsItem1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstGroupingSetsItem1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstGroupingSetsItem1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstGroupingSetsItem1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGroupingSetsItem(this);
            }
        }
        /// <summary>
        /// grouping_sets_item : LR_BRACKET  grouping_sets_list?  RR_BRACKET
        /// </summary>
        public partial class AstGroupingSetsItem2 : AstGroupingSetsItem
        {
            
            internal AstGroupingSetsItem2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstGroupingSetsItem2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstGroupingSetsItem2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstGroupingSetsItem2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGroupingSetsItem(this);
            }
        }
        

        
        internal AstGroupingSetsItem(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstGroupingSetsItem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstGroupingSetsItem(Position p) : 
                base(p)
        {
        }
        
        internal AstGroupingSetsItem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstGroupingSetsItem Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstGroupingSetsItem.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstGroupingSetsList), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstGroupingSetsList), true, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// grouping_sets_item : 
        ///    grouping_sets_list 
        /// </summary>
        public static AstGroupingSetsItem GroupingSetsItem(AstGroupingSetsList groupingSetsList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstGroupingSetsItem.AstGroupingSetsItem1 result = new AstGroupingSetsItem.AstGroupingSetsItem1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// update_option
    /// 	 : FAST  number_rows = decimal
    /// 	 | MAXDOP  number_of_processors = decimal
    /// 	 | MAXRECURSION  number_recursion = decimal
    /// 	 | USE  PLAN  stringtext
    /// 	 | OPTIMIZE  FOR  LR_BRACKET  optimize_for_args  RR_BRACKET
    /// 	 | update_option_enum
    /// </summary>
    public abstract partial class AstUpdateOption : AstRule
    {
        
        protected static string _rule = "update_option\r\n\t : FAST  number_rows = decimal\r\n\t | MAXDOP  number_of_processors " +
            "= decimal\r\n\t | MAXRECURSION  number_recursion = decimal\r\n\t | USE  PLAN  stringte" +
            "xt\r\n\t | OPTIMIZE  FOR  LR_BRACKET  optimize_for_args  RR_BRACKET\r\n\t | update_opt" +
            "ion_enum";
        
        /// <summary>
        /// update_option : FAST  number_rows = decimal
        /// </summary>
        public partial class AstUpdateOption1 : AstUpdateOption
        {
            
            internal AstUpdateOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOption(this);
            }
        }
        /// <summary>
        /// update_option : MAXDOP  number_of_processors = decimal
        /// </summary>
        public partial class AstUpdateOption2 : AstUpdateOption
        {
            
            internal AstUpdateOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOption(this);
            }
        }
        /// <summary>
        /// update_option : MAXRECURSION  number_recursion = decimal
        /// </summary>
        public partial class AstUpdateOption3 : AstUpdateOption
        {
            
            internal AstUpdateOption3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateOption3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateOption3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateOption3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOption(this);
            }
        }
        /// <summary>
        /// update_option : USE  PLAN  stringtext
        /// </summary>
        public partial class AstUpdateOption4 : AstUpdateOption
        {
            
            internal AstUpdateOption4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateOption4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateOption4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateOption4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOption(this);
            }
        }
        /// <summary>
        /// update_option : OPTIMIZE  FOR  LR_BRACKET  optimize_for_args  RR_BRACKET
        /// </summary>
        public partial class AstUpdateOption5 : AstUpdateOption
        {
            
            internal AstUpdateOption5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateOption5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateOption5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateOption5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOption(this);
            }
        }
        /// <summary>
        /// update_option : update_option_enum
        /// </summary>
        public partial class AstUpdateOption6 : AstUpdateOption
        {
            
            internal AstUpdateOption6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUpdateOption6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUpdateOption6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUpdateOption6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOption(this);
            }
        }
        

        
        internal AstUpdateOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstUpdateOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUpdateOption(Position p) : 
                base(p)
        {
        }
        
        internal AstUpdateOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstUpdateOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstUpdateOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstOptimizeForArgs), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstUpdateOptionEnum), false, false))
                {
                    return 6;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// update_option : 
        ///    FAST number_rows=decimal 
        /// </summary>
        public static AstUpdateOption UpdateOption(AstDecimal numberRows)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateOption.AstUpdateOption1 result = new AstUpdateOption.AstUpdateOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// update_option : 
        ///    USE PLAN stringtext 
        /// </summary>
        public static AstUpdateOption UpdateOption(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateOption.AstUpdateOption4 result = new AstUpdateOption.AstUpdateOption4(arguments);
            return result;
        }
        
        /// <summary>
        /// update_option : 
        ///    OPTIMIZE FOR ( optimize_for_args ) 
        /// </summary>
        public static AstUpdateOption UpdateOption(AstOptimizeForArgs optimizeForArgs)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateOption.AstUpdateOption5 result = new AstUpdateOption.AstUpdateOption5(arguments);
            return result;
        }
        
        /// <summary>
        /// update_option : 
        ///    update_option_enum 
        /// </summary>
        public static AstUpdateOption UpdateOption(AstUpdateOptionEnum updateOptionEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUpdateOption.AstUpdateOption6 result = new AstUpdateOption.AstUpdateOption6(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// asterisk
    /// 	 : star_asterisk
    /// 	 | table_asterisk
    /// 	 | updated_asterisk
    /// </summary>
    public abstract partial class AstAsterisk : AstRule
    {
        
        protected static string _rule = "asterisk\r\n\t : star_asterisk\r\n\t | table_asterisk\r\n\t | updated_asterisk";
        
        /// <summary>
        /// asterisk : star_asterisk
        /// </summary>
        public partial class AstAsterisk1 : AstAsterisk
        {
            
            internal AstAsterisk1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAsterisk1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAsterisk1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAsterisk1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsterisk(this);
            }
        }
        /// <summary>
        /// asterisk : table_asterisk
        /// </summary>
        public partial class AstAsterisk2 : AstAsterisk
        {
            
            internal AstAsterisk2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAsterisk2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAsterisk2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAsterisk2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsterisk(this);
            }
        }
        /// <summary>
        /// asterisk : updated_asterisk
        /// </summary>
        public partial class AstAsterisk3 : AstAsterisk
        {
            
            internal AstAsterisk3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAsterisk3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAsterisk3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAsterisk3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsterisk(this);
            }
        }
        

        
        internal AstAsterisk(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAsterisk(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAsterisk(Position p) : 
                base(p)
        {
        }
        
        internal AstAsterisk(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAsterisk Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAsterisk.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStarAsterisk), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstTableAsterisk), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstUpdatedAsterisk), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// asterisk : 
        ///    star_asterisk 
        /// </summary>
        public static AstAsterisk Asterisk(AstStarAsterisk starAsterisk)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAsterisk.AstAsterisk1 result = new AstAsterisk.AstAsterisk1(arguments);
            return result;
        }
        
        /// <summary>
        /// asterisk : 
        ///    table_asterisk 
        /// </summary>
        public static AstAsterisk Asterisk(AstTableAsterisk tableAsterisk)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAsterisk.AstAsterisk2 result = new AstAsterisk.AstAsterisk2(arguments);
            return result;
        }
        
        /// <summary>
        /// asterisk : 
        ///    updated_asterisk 
        /// </summary>
        public static AstAsterisk Asterisk(AstUpdatedAsterisk updatedAsterisk)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAsterisk.AstAsterisk3 result = new AstAsterisk.AstAsterisk3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// column_elem_target
    /// 	 : full_column_name
    /// 	 | DOLLAR  IDENTITY
    /// 	 | DOLLAR  ROWGUID
    /// 	 | NULL_
    /// </summary>
    public abstract partial class AstColumnElemTarget : AstRule
    {
        
        protected static string _rule = "column_elem_target\r\n\t : full_column_name\r\n\t | DOLLAR  IDENTITY\r\n\t | DOLLAR  ROWGU" +
            "ID\r\n\t | NULL_";
        
        /// <summary>
        /// column_elem_target : full_column_name
        /// </summary>
        public partial class AstColumnElemTarget1 : AstColumnElemTarget
        {
            
            internal AstColumnElemTarget1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnElemTarget1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnElemTarget1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnElemTarget1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnElemTarget(this);
            }
        }
        /// <summary>
        /// column_elem_target : DOLLAR  IDENTITY
        /// </summary>
        public partial class AstColumnElemTarget2 : AstColumnElemTarget
        {
            
            internal AstColumnElemTarget2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnElemTarget2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnElemTarget2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnElemTarget2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnElemTarget(this);
            }
        }
        /// <summary>
        /// column_elem_target : DOLLAR  ROWGUID
        /// </summary>
        public partial class AstColumnElemTarget3 : AstColumnElemTarget
        {
            
            internal AstColumnElemTarget3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnElemTarget3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnElemTarget3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnElemTarget3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnElemTarget(this);
            }
        }
        /// <summary>
        /// column_elem_target : NULL_
        /// </summary>
        public partial class AstColumnElemTarget4 : AstColumnElemTarget
        {
            
            internal AstColumnElemTarget4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstColumnElemTarget4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstColumnElemTarget4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstColumnElemTarget4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnElemTarget(this);
            }
        }
        

        
        internal AstColumnElemTarget(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstColumnElemTarget(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstColumnElemTarget(Position p) : 
                base(p)
        {
        }
        
        internal AstColumnElemTarget(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstColumnElemTarget Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstColumnElemTarget.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstFullColumnName), false, false))
                {
                    return 1;
                }
            }
            if ((list.Count == 0))
            {
                return 2;
                return 3;
                return 4;
            }
            return 0;
        }
        
        /// <summary>
        /// column_elem_target : 
        ///    full_column_name 
        /// </summary>
        public static AstColumnElemTarget ColumnElemTarget(AstFullColumnName fullColumnName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstColumnElemTarget.AstColumnElemTarget1 result = new AstColumnElemTarget.AstColumnElemTarget1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// udt_elem
    /// 	 : udt_column_id  DOT  non_static_attr_id  udt_method_arguments  as_column_alias?
    /// 	 | udt_column_id  DOUBLE_COLON  static_attr_id  udt_method_arguments?  as_column_alias?
    /// </summary>
    public abstract partial class AstUdtElem : AstRule
    {
        
        protected static string _rule = "udt_elem\r\n\t : udt_column_id  DOT  non_static_attr_id  udt_method_arguments  as_co" +
            "lumn_alias?\r\n\t | udt_column_id  DOUBLE_COLON  static_attr_id  udt_method_argumen" +
            "ts?  as_column_alias?";
        
        /// <summary>
        /// udt_elem : udt_column_id  DOT  non_static_attr_id  udt_method_arguments  as_column_alias?
        /// </summary>
        public partial class AstUdtElem1 : AstUdtElem
        {
            
            internal AstUdtElem1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUdtElem1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUdtElem1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUdtElem1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUdtElem(this);
            }
        }
        /// <summary>
        /// udt_elem : udt_column_id  DOUBLE_COLON  static_attr_id  udt_method_arguments?  as_column_alias?
        /// </summary>
        public partial class AstUdtElem2 : AstUdtElem
        {
            
            internal AstUdtElem2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstUdtElem2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstUdtElem2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstUdtElem2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUdtElem(this);
            }
        }
        

        
        internal AstUdtElem(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstUdtElem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUdtElem(Position p) : 
                base(p)
        {
        }
        
        internal AstUdtElem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstUdtElem Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstUdtElem.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstUdtColumnId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstNonStaticAttrId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstUdtMethodArguments), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstAsColumnAlias), true, false))
                            {
                                return 1;
                            }
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstUdtColumnId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStaticAttrId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstUdtMethodArguments), true, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstAsColumnAlias), true, false))
                            {
                                return 2;
                            }
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// udt_elem : 
        ///    udt_column_id . non_static_attr_id udt_method_arguments as_column_alias? 
        /// </summary>
        public static AstUdtElem UdtElem(AstUdtColumnId udtColumnId, AstNonStaticAttrId nonStaticAttrId, AstUdtMethodArguments udtMethodArguments, AstAsColumnAlias asColumnAlias)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUdtElem.AstUdtElem1 result = new AstUdtElem.AstUdtElem1(arguments);
            return result;
        }
        
        /// <summary>
        /// udt_elem : 
        ///    udt_column_id :: static_attr_id udt_method_arguments? as_column_alias? 
        /// </summary>
        public static AstUdtElem UdtElem(AstUdtColumnId udtColumnId, AstStaticAttrId staticAttrId, AstUdtMethodArguments udtMethodArguments, AstAsColumnAlias asColumnAlias)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstUdtElem.AstUdtElem2 result = new AstUdtElem.AstUdtElem2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// expression_elem
    /// 	 : leftAlias = column_alias  eq = EQUAL  leftAssignment = expression
    /// 	 | expressionAs = expression  as_column_alias?
    /// </summary>
    public abstract partial class AstExpressionElem : AstRule
    {
        
        protected static string _rule = "expression_elem\r\n\t : leftAlias = column_alias  eq = EQUAL  leftAssignment = expre" +
            "ssion\r\n\t | expressionAs = expression  as_column_alias?";
        
        /// <summary>
        /// expression_elem : leftAlias = column_alias  eq = EQUAL  leftAssignment = expression
        /// </summary>
        public partial class AstExpressionElem1 : AstExpressionElem
        {
            
            internal AstExpressionElem1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExpressionElem1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExpressionElem1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExpressionElem1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpressionElem(this);
            }
        }
        /// <summary>
        /// expression_elem : expressionAs = expression  as_column_alias?
        /// </summary>
        public partial class AstExpressionElem2 : AstExpressionElem
        {
            
            internal AstExpressionElem2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstExpressionElem2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstExpressionElem2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstExpressionElem2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpressionElem(this);
            }
        }
        

        
        internal AstExpressionElem(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstExpressionElem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExpressionElem(Position p) : 
                base(p)
        {
        }
        
        internal AstExpressionElem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExpressionElem Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExpressionElem.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstColumnAlias), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAsColumnAlias), true, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// expression_elem : 
        ///    leftAlias=column_alias eq=EQUAL leftAssignment=expression 
        /// </summary>
        public static AstExpressionElem ExpressionElem(AstColumnAlias leftAlias, AstExpression leftAssignment)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpressionElem.AstExpressionElem1 result = new AstExpressionElem.AstExpressionElem1(arguments);
            return result;
        }
        
        /// <summary>
        /// expression_elem : 
        ///    expressionAs=expression as_column_alias? 
        /// </summary>
        public static AstExpressionElem ExpressionElem(AstExpression expressionAs, AstAsColumnAlias asColumnAlias)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExpressionElem.AstExpressionElem2 result = new AstExpressionElem.AstExpressionElem2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// select_list_elem
    /// 	 : asterisk
    /// 	 | column_elem
    /// 	 | udt_elem
    /// 	 | expression_assign_elem
    /// 	 | expression_elem
    /// </summary>
    public abstract partial class AstSelectListElem : AstRule
    {
        
        protected static string _rule = "select_list_elem\r\n\t : asterisk\r\n\t | column_elem\r\n\t | udt_elem\r\n\t | expression_ass" +
            "ign_elem\r\n\t | expression_elem";
        
        /// <summary>
        /// select_list_elem : asterisk
        /// </summary>
        public partial class AstSelectListElem1 : AstSelectListElem
        {
            
            internal AstSelectListElem1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSelectListElem1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSelectListElem1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSelectListElem1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSelectListElem(this);
            }
        }
        /// <summary>
        /// select_list_elem : column_elem
        /// </summary>
        public partial class AstSelectListElem2 : AstSelectListElem
        {
            
            internal AstSelectListElem2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSelectListElem2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSelectListElem2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSelectListElem2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSelectListElem(this);
            }
        }
        /// <summary>
        /// select_list_elem : udt_elem
        /// </summary>
        public partial class AstSelectListElem3 : AstSelectListElem
        {
            
            internal AstSelectListElem3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSelectListElem3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSelectListElem3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSelectListElem3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSelectListElem(this);
            }
        }
        /// <summary>
        /// select_list_elem : expression_assign_elem
        /// </summary>
        public partial class AstSelectListElem4 : AstSelectListElem
        {
            
            internal AstSelectListElem4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSelectListElem4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSelectListElem4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSelectListElem4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSelectListElem(this);
            }
        }
        /// <summary>
        /// select_list_elem : expression_elem
        /// </summary>
        public partial class AstSelectListElem5 : AstSelectListElem
        {
            
            internal AstSelectListElem5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSelectListElem5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSelectListElem5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSelectListElem5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSelectListElem(this);
            }
        }
        

        
        internal AstSelectListElem(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstSelectListElem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSelectListElem(Position p) : 
                base(p)
        {
        }
        
        internal AstSelectListElem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSelectListElem Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSelectListElem.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAsterisk), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstColumnElem), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstUdtElem), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpressionAssignElem), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpressionElem), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// select_list_elem : 
        ///    asterisk 
        /// </summary>
        public static AstSelectListElem SelectListElem(AstAsterisk asterisk)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSelectListElem.AstSelectListElem1 result = new AstSelectListElem.AstSelectListElem1(arguments);
            return result;
        }
        
        /// <summary>
        /// select_list_elem : 
        ///    column_elem 
        /// </summary>
        public static AstSelectListElem SelectListElem(AstColumnElem columnElem)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSelectListElem.AstSelectListElem2 result = new AstSelectListElem.AstSelectListElem2(arguments);
            return result;
        }
        
        /// <summary>
        /// select_list_elem : 
        ///    udt_elem 
        /// </summary>
        public static AstSelectListElem SelectListElem(AstUdtElem udtElem)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSelectListElem.AstSelectListElem3 result = new AstSelectListElem.AstSelectListElem3(arguments);
            return result;
        }
        
        /// <summary>
        /// select_list_elem : 
        ///    expression_assign_elem 
        /// </summary>
        public static AstSelectListElem SelectListElem(AstExpressionAssignElem expressionAssignElem)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSelectListElem.AstSelectListElem4 result = new AstSelectListElem.AstSelectListElem4(arguments);
            return result;
        }
        
        /// <summary>
        /// select_list_elem : 
        ///    expression_elem 
        /// </summary>
        public static AstSelectListElem SelectListElem(AstExpressionElem expressionElem)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSelectListElem.AstSelectListElem5 result = new AstSelectListElem.AstSelectListElem5(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// table_source
    /// 	 : table_source_item_joined
    /// 	 | LR_BRACKET  table_source  RR_BRACKET
    /// </summary>
    public abstract partial class AstTableSource : AstRule
    {
        
        protected static string _rule = "table_source\r\n\t : table_source_item_joined\r\n\t | LR_BRACKET  table_source  RR_BRAC" +
            "KET";
        
        /// <summary>
        /// table_source : table_source_item_joined
        /// </summary>
        public partial class AstTableSource1 : AstTableSource
        {
            
            internal AstTableSource1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableSource1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableSource1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableSource1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSource(this);
            }
        }
        /// <summary>
        /// table_source : LR_BRACKET  table_source  RR_BRACKET
        /// </summary>
        public partial class AstTableSource2 : AstTableSource
        {
            
            internal AstTableSource2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableSource2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableSource2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableSource2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSource(this);
            }
        }
        

        
        internal AstTableSource(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstTableSource(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableSource(Position p) : 
                base(p)
        {
        }
        
        internal AstTableSource(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTableSource Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTableSource.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstTableSourceItemJoined), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstTableSource), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// table_source : 
        ///    table_source_item_joined 
        /// </summary>
        public static AstTableSource TableSource(AstTableSourceItemJoined tableSourceItemJoined)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSource.AstTableSource1 result = new AstTableSource.AstTableSource1(arguments);
            return result;
        }
        
        /// <summary>
        /// table_source : 
        ///    ( table_source ) 
        /// </summary>
        public static AstTableSource TableSource(AstTableSource tableSource)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSource.AstTableSource2 result = new AstTableSource.AstTableSource2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// table_source_item_joined
    /// 	 : table_source_item  joins += join_part
    /// 	 | LR_BRACKET  table_source_item_joined  RR_BRACKET  joins += join_part
    /// </summary>
    public abstract partial class AstTableSourceItemJoined : AstRule
    {
        
        protected static string _rule = "table_source_item_joined\r\n\t : table_source_item  joins += join_part\r\n\t | LR_BRACK" +
            "ET  table_source_item_joined  RR_BRACKET  joins += join_part";
        
        /// <summary>
        /// table_source_item_joined : table_source_item  joins += join_part
        /// </summary>
        public partial class AstTableSourceItemJoined1 : AstTableSourceItemJoined
        {
            
            internal AstTableSourceItemJoined1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableSourceItemJoined1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableSourceItemJoined1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableSourceItemJoined1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItemJoined(this);
            }
        }
        /// <summary>
        /// table_source_item_joined : LR_BRACKET  table_source_item_joined  RR_BRACKET  joins += join_part
        /// </summary>
        public partial class AstTableSourceItemJoined2 : AstTableSourceItemJoined
        {
            
            internal AstTableSourceItemJoined2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableSourceItemJoined2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableSourceItemJoined2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableSourceItemJoined2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItemJoined(this);
            }
        }
        

        
        internal AstTableSourceItemJoined(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstTableSourceItemJoined(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableSourceItemJoined(Position p) : 
                base(p)
        {
        }
        
        internal AstTableSourceItemJoined(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTableSourceItemJoined Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTableSourceItemJoined.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstTableSourceItem), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstJoinPart), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstTableSourceItemJoined), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstJoinPart), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// table_source_item_joined : 
        ///    table_source_item joins=join_part 
        /// </summary>
        public static AstTableSourceItemJoined TableSourceItemJoined(AstTableSourceItem tableSourceItem, AstJoinPart joins)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItemJoined.AstTableSourceItemJoined1 result = new AstTableSourceItemJoined.AstTableSourceItemJoined1(arguments);
            return result;
        }
        
        /// <summary>
        /// table_source_item_joined : 
        ///    ( table_source_item_joined ) joins=join_part 
        /// </summary>
        public static AstTableSourceItemJoined TableSourceItemJoined(AstTableSourceItemJoined tableSourceItemJoined, AstJoinPart joins)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItemJoined.AstTableSourceItemJoined2 result = new AstTableSourceItemJoined.AstTableSourceItemJoined2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// table_source_item
    /// 	 : complete_table_ref  deprecated_table_hint  as_table_alias
    /// 	 | complete_table_ref  as_table_alias?  (with_table_hints | deprecated_table_hint | sybase_legacy_hints)?
    /// 	 | rowset_function  as_table_alias?
    /// 	 | LR_BRACKET  derived_table  RR_BRACKET  (as_table_alias  column_alias_list?)?
    /// 	 | change_table  as_table_alias?
    /// 	 | nodes_method  (as_table_alias  column_alias_list?)?
    /// 	 | function_call  (as_table_alias  column_alias_list?)?
    /// 	 | loc_id = local_id  as_table_alias?
    /// 	 | loc_id_call = local_id  DOT  loc_fcall = function_call  (as_table_alias  column_alias_list?)?
    /// 	 | open_xml
    /// 	 | open_json
    /// 	 | DOUBLE_COLON  oldstyle_fcall = function_call  as_table_alias?
    /// </summary>
    public abstract partial class AstTableSourceItem : AstRule
    {
        
        protected static string _rule = @"table_source_item
	 : complete_table_ref  deprecated_table_hint  as_table_alias
	 | complete_table_ref  as_table_alias?  (with_table_hints | deprecated_table_hint | sybase_legacy_hints)?
	 | rowset_function  as_table_alias?
	 | LR_BRACKET  derived_table  RR_BRACKET  (as_table_alias  column_alias_list?)?
	 | change_table  as_table_alias?
	 | nodes_method  (as_table_alias  column_alias_list?)?
	 | function_call  (as_table_alias  column_alias_list?)?
	 | loc_id = local_id  as_table_alias?
	 | loc_id_call = local_id  DOT  loc_fcall = function_call  (as_table_alias  column_alias_list?)?
	 | open_xml
	 | open_json
	 | DOUBLE_COLON  oldstyle_fcall = function_call  as_table_alias?";
        
        /// <summary>
        /// table_source_item : complete_table_ref  deprecated_table_hint  as_table_alias
        /// </summary>
        public partial class AstTableSourceItem1 : AstTableSourceItem
        {
            
            internal AstTableSourceItem1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableSourceItem1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableSourceItem1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableSourceItem1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : complete_table_ref  as_table_alias?  (with_table_hints | deprecated_table_hint | sybase_legacy_hints)?
        /// </summary>
        public partial class AstTableSourceItem2 : AstTableSourceItem
        {
            
            internal AstTableSourceItem2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableSourceItem2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableSourceItem2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableSourceItem2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : rowset_function  as_table_alias?
        /// </summary>
        public partial class AstTableSourceItem3 : AstTableSourceItem
        {
            
            internal AstTableSourceItem3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableSourceItem3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableSourceItem3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableSourceItem3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : LR_BRACKET  derived_table  RR_BRACKET  (as_table_alias  column_alias_list?)?
        /// </summary>
        public partial class AstTableSourceItem4 : AstTableSourceItem
        {
            
            internal AstTableSourceItem4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableSourceItem4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableSourceItem4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableSourceItem4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : change_table  as_table_alias?
        /// </summary>
        public partial class AstTableSourceItem5 : AstTableSourceItem
        {
            
            internal AstTableSourceItem5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableSourceItem5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableSourceItem5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableSourceItem5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : nodes_method  (as_table_alias  column_alias_list?)?
        /// </summary>
        public partial class AstTableSourceItem6 : AstTableSourceItem
        {
            
            internal AstTableSourceItem6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableSourceItem6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableSourceItem6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableSourceItem6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : function_call  (as_table_alias  column_alias_list?)?
        /// </summary>
        public partial class AstTableSourceItem7 : AstTableSourceItem
        {
            
            internal AstTableSourceItem7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableSourceItem7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableSourceItem7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableSourceItem7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : loc_id = local_id  as_table_alias?
        /// </summary>
        public partial class AstTableSourceItem8 : AstTableSourceItem
        {
            
            internal AstTableSourceItem8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableSourceItem8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableSourceItem8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableSourceItem8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : loc_id_call = local_id  DOT  loc_fcall = function_call  (as_table_alias  column_alias_list?)?
        /// </summary>
        public partial class AstTableSourceItem9 : AstTableSourceItem
        {
            
            internal AstTableSourceItem9(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableSourceItem9(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableSourceItem9(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableSourceItem9(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : open_xml
        /// </summary>
        public partial class AstTableSourceItem10 : AstTableSourceItem
        {
            
            internal AstTableSourceItem10(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableSourceItem10(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableSourceItem10(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableSourceItem10(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : open_json
        /// </summary>
        public partial class AstTableSourceItem11 : AstTableSourceItem
        {
            
            internal AstTableSourceItem11(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableSourceItem11(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableSourceItem11(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableSourceItem11(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : DOUBLE_COLON  oldstyle_fcall = function_call  as_table_alias?
        /// </summary>
        public partial class AstTableSourceItem12 : AstTableSourceItem
        {
            
            internal AstTableSourceItem12(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableSourceItem12(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableSourceItem12(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableSourceItem12(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        

        
        internal AstTableSourceItem(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstTableSourceItem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableSourceItem(Position p) : 
                base(p)
        {
        }
        
        internal AstTableSourceItem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTableSourceItem Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTableSourceItem.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 5))
            {
                if (AstRoot.Eval(list[0], typeof(AstCompleteTableRef), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAsTableAlias), true, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstWithTableHints), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstDeprecatedTableHint), false, false))
                            {
                                if (AstRoot.Eval(list[4], typeof(AstSybaseLegacyHints), false, false))
                                {
                                    return 2;
                                }
                            }
                        }
                    }
                }
            }
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFunctionCall), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstAsTableAlias), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstColumnAliasList), true, false))
                            {
                                return 9;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstCompleteTableRef), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDeprecatedTableHint), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstAsTableAlias), false, false))
                        {
                            return 1;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstDerivedTable), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAsTableAlias), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstColumnAliasList), true, false))
                        {
                            return 4;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstNodesMethod), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAsTableAlias), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstColumnAliasList), true, false))
                        {
                            return 6;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstFunctionCall), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAsTableAlias), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstColumnAliasList), true, false))
                        {
                            return 7;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstRowsetFunction), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAsTableAlias), true, false))
                    {
                        return 3;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstChangeTable), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAsTableAlias), true, false))
                    {
                        return 5;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAsTableAlias), true, false))
                    {
                        return 8;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstFunctionCall), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAsTableAlias), true, false))
                    {
                        return 12;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOpenXml), false, false))
                {
                    return 10;
                }
                if (AstRoot.Eval(list[0], typeof(AstOpenJson), false, false))
                {
                    return 11;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    complete_table_ref deprecated_table_hint as_table_alias 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstCompleteTableRef completeTableRef, AstDeprecatedTableHint deprecatedTableHint, AstAsTableAlias asTableAlias)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem.AstTableSourceItem1 result = new AstTableSourceItem.AstTableSourceItem1(arguments);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    complete_table_ref as_table_alias? with_table_hints 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstCompleteTableRef completeTableRef, AstAsTableAlias asTableAlias, AstWithTableHints withTableHints)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem.AstTableSourceItem2 result = new AstTableSourceItem.AstTableSourceItem2(arguments);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    complete_table_ref as_table_alias? deprecated_table_hint 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstCompleteTableRef completeTableRef, AstAsTableAlias asTableAlias, AstDeprecatedTableHint deprecatedTableHint)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem.AstTableSourceItem2 result = new AstTableSourceItem.AstTableSourceItem2(arguments);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    complete_table_ref as_table_alias? sybase_legacy_hints 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstCompleteTableRef completeTableRef, AstAsTableAlias asTableAlias, AstSybaseLegacyHints sybaseLegacyHints)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem.AstTableSourceItem2 result = new AstTableSourceItem.AstTableSourceItem2(arguments);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    rowset_function as_table_alias? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstRowsetFunction rowsetFunction, AstAsTableAlias asTableAlias)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem.AstTableSourceItem3 result = new AstTableSourceItem.AstTableSourceItem3(arguments);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    ( derived_table ) as_table_alias column_alias_list? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstDerivedTable derivedTable, AstAsTableAlias asTableAlias, AstColumnAliasList columnAliasList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem.AstTableSourceItem4 result = new AstTableSourceItem.AstTableSourceItem4(arguments);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    change_table as_table_alias? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstChangeTable changeTable, AstAsTableAlias asTableAlias)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem.AstTableSourceItem5 result = new AstTableSourceItem.AstTableSourceItem5(arguments);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    nodes_method as_table_alias column_alias_list? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstNodesMethod nodesMethod, AstAsTableAlias asTableAlias, AstColumnAliasList columnAliasList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem.AstTableSourceItem6 result = new AstTableSourceItem.AstTableSourceItem6(arguments);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    function_call as_table_alias column_alias_list? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstFunctionCall functionCall, AstAsTableAlias asTableAlias, AstColumnAliasList columnAliasList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem.AstTableSourceItem7 result = new AstTableSourceItem.AstTableSourceItem7(arguments);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    loc_id=local_id as_table_alias? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstLocalId locId, AstAsTableAlias asTableAlias)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem.AstTableSourceItem8 result = new AstTableSourceItem.AstTableSourceItem8(arguments);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    loc_id_call=local_id . loc_fcall=function_call as_table_alias column_alias_list? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstLocalId locIdCall, AstFunctionCall locFcall, AstAsTableAlias asTableAlias, AstColumnAliasList columnAliasList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem.AstTableSourceItem9 result = new AstTableSourceItem.AstTableSourceItem9(arguments);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    open_xml 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstOpenXml openXml)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem.AstTableSourceItem10 result = new AstTableSourceItem.AstTableSourceItem10(arguments);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    open_json 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstOpenJson openJson)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem.AstTableSourceItem11 result = new AstTableSourceItem.AstTableSourceItem11(arguments);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    :: oldstyle_fcall=function_call as_table_alias? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(AstFunctionCall oldstyleFcall, AstAsTableAlias asTableAlias)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableSourceItem.AstTableSourceItem12 result = new AstTableSourceItem.AstTableSourceItem12(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// change_table
    /// 	 : change_table_changes
    /// 	 | change_table_version
    /// </summary>
    public abstract partial class AstChangeTable : AstRule
    {
        
        protected static string _rule = "change_table\r\n\t : change_table_changes\r\n\t | change_table_version";
        
        /// <summary>
        /// change_table : change_table_changes
        /// </summary>
        public partial class AstChangeTable1 : AstChangeTable
        {
            
            internal AstChangeTable1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstChangeTable1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstChangeTable1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstChangeTable1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangeTable(this);
            }
        }
        /// <summary>
        /// change_table : change_table_version
        /// </summary>
        public partial class AstChangeTable2 : AstChangeTable
        {
            
            internal AstChangeTable2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstChangeTable2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstChangeTable2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstChangeTable2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangeTable(this);
            }
        }
        

        
        internal AstChangeTable(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstChangeTable(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstChangeTable(Position p) : 
                base(p)
        {
        }
        
        internal AstChangeTable(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstChangeTable Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstChangeTable.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstChangeTableChanges), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstChangeTableVersion), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// change_table : 
        ///    change_table_changes 
        /// </summary>
        public static AstChangeTable ChangeTable(AstChangeTableChanges changeTableChanges)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstChangeTable.AstChangeTable1 result = new AstChangeTable.AstChangeTable1(arguments);
            return result;
        }
        
        /// <summary>
        /// change_table : 
        ///    change_table_version 
        /// </summary>
        public static AstChangeTable ChangeTable(AstChangeTableVersion changeTableVersion)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstChangeTable.AstChangeTable2 result = new AstChangeTable.AstChangeTable2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// change_table_changes
    /// 	 : CHANGETABLE  LR_BRACKET  CHANGES  changetable = full_table_ref  COMMA  (NULL_ | decimal_local_id)  RR_BRACKET
    /// </summary>
    public partial class AstChangeTableChanges : AstChangeTable
    {
        
        protected static string _rule = "change_table_changes\r\n\t : CHANGETABLE  LR_BRACKET  CHANGES  changetable = full_ta" +
            "ble_ref  COMMA  (NULL_ | decimal_local_id)  RR_BRACKET";
        
        internal AstChangeTableChanges(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstChangeTableChanges(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstChangeTableChanges(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstChangeTableChanges(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTableChanges(this);
        }
        
        /// <summary>
        /// change_table_changes : 
        ///    CHANGETABLE ( CHANGES changetable=full_table_ref , NULL_ ) 
        /// </summary>
        public static AstChangeTableChanges ChangeTableChanges(AstFullTableRef changetable)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstChangeTableChanges result = new AstChangeTableChanges(arguments);
            return result;
        }
        
        /// <summary>
        /// change_table_changes : 
        ///    CHANGETABLE ( CHANGES changetable=full_table_ref , decimal_local_id ) 
        /// </summary>
        public static AstChangeTableChanges ChangeTableChanges(AstFullTableRef changetable, AstDecimalLocalId decimalLocalId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstChangeTableChanges result = new AstChangeTableChanges(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// change_table_version
    /// 	 : CHANGETABLE  LR_BRACKET  VERSION  versiontable = full_table_ref  COMMA  pk_columns = full_column_name_list  COMMA  pk_values = select_list  RR_BRACKET
    /// </summary>
    public partial class AstChangeTableVersion : AstChangeTable
    {
        
        protected static string _rule = "change_table_version\r\n\t : CHANGETABLE  LR_BRACKET  VERSION  versiontable = full_t" +
            "able_ref  COMMA  pk_columns = full_column_name_list  COMMA  pk_values = select_l" +
            "ist  RR_BRACKET";
        
        internal AstChangeTableVersion(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstChangeTableVersion(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstChangeTableVersion(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstChangeTableVersion(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTableVersion(this);
        }
        
        /// <summary>
        /// change_table_version : 
        ///    CHANGETABLE ( VERSION versiontable=full_table_ref , pk_columns=full_column_name_list , pk_values=select_list ) 
        /// </summary>
        public static AstChangeTableVersion ChangeTableVersion(AstFullTableRef versiontable, AstFullColumnNameList pkColumns, AstSelectList pkValues)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstChangeTableVersion result = new AstChangeTableVersion(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// join_part
    /// 	 : join_on
    /// 	 | cross_join
    /// 	 | apply_enum
    /// 	 | pivot
    /// 	 | unpivot
    /// </summary>
    public abstract partial class AstJoinPart : AstRule
    {
        
        protected static string _rule = "join_part\r\n\t : join_on\r\n\t | cross_join\r\n\t | apply_enum\r\n\t | pivot\r\n\t | unpivot";
        
        /// <summary>
        /// join_part : join_on
        /// </summary>
        public partial class AstJoinPart1 : AstJoinPart
        {
            
            internal AstJoinPart1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstJoinPart1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstJoinPart1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstJoinPart1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitJoinPart(this);
            }
        }
        /// <summary>
        /// join_part : cross_join
        /// </summary>
        public partial class AstJoinPart2 : AstJoinPart
        {
            
            internal AstJoinPart2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstJoinPart2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstJoinPart2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstJoinPart2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitJoinPart(this);
            }
        }
        /// <summary>
        /// join_part : apply_enum
        /// </summary>
        public partial class AstJoinPart3 : AstJoinPart
        {
            
            internal AstJoinPart3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstJoinPart3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstJoinPart3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstJoinPart3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitJoinPart(this);
            }
        }
        /// <summary>
        /// join_part : pivot
        /// </summary>
        public partial class AstJoinPart4 : AstJoinPart
        {
            
            internal AstJoinPart4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstJoinPart4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstJoinPart4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstJoinPart4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitJoinPart(this);
            }
        }
        /// <summary>
        /// join_part : unpivot
        /// </summary>
        public partial class AstJoinPart5 : AstJoinPart
        {
            
            internal AstJoinPart5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstJoinPart5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstJoinPart5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstJoinPart5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitJoinPart(this);
            }
        }
        

        
        internal AstJoinPart(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstJoinPart(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstJoinPart(Position p) : 
                base(p)
        {
        }
        
        internal AstJoinPart(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstJoinPart Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstJoinPart.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstJoinOn), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstCrossJoin), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstApplyEnum), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstPivot), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstUnpivot), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// join_part : 
        ///    join_on 
        /// </summary>
        public static AstJoinPart JoinPart(AstJoinOn joinOn)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstJoinPart.AstJoinPart1 result = new AstJoinPart.AstJoinPart1(arguments);
            return result;
        }
        
        /// <summary>
        /// join_part : 
        ///    cross_join 
        /// </summary>
        public static AstJoinPart JoinPart(AstCrossJoin crossJoin)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstJoinPart.AstJoinPart2 result = new AstJoinPart.AstJoinPart2(arguments);
            return result;
        }
        
        /// <summary>
        /// join_part : 
        ///    apply_enum 
        /// </summary>
        public static AstJoinPart JoinPart(AstApplyEnum applyEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstJoinPart.AstJoinPart3 result = new AstJoinPart.AstJoinPart3(arguments);
            return result;
        }
        
        /// <summary>
        /// join_part : 
        ///    pivot 
        /// </summary>
        public static AstJoinPart JoinPart(AstPivot pivot)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstJoinPart.AstJoinPart4 result = new AstJoinPart.AstJoinPart4(arguments);
            return result;
        }
        
        /// <summary>
        /// join_part : 
        ///    unpivot 
        /// </summary>
        public static AstJoinPart JoinPart(AstUnpivot unpivot)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstJoinPart.AstJoinPart5 result = new AstJoinPart.AstJoinPart5(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// rowset_function
    /// 	 : (OPENROWSET  LR_BRACKET  providerName = stringtext  COMMA  connectionString = stringtext  COMMA  sql = stringtext  RR_BRACKET)
    /// 	 | (OPENROWSET  LR_BRACKET  BULK  data_file = stringtext  COMMA  (bulk_options | id_)  RR_BRACKET)
    /// </summary>
    public abstract partial class AstRowsetFunction : AstRule
    {
        
        protected static string _rule = "rowset_function\r\n\t : (OPENROWSET  LR_BRACKET  providerName = stringtext  COMMA  c" +
            "onnectionString = stringtext  COMMA  sql = stringtext  RR_BRACKET)\r\n\t | (OPENROW" +
            "SET  LR_BRACKET  BULK  data_file = stringtext  COMMA  (bulk_options | id_)  RR_B" +
            "RACKET)";
        
        /// <summary>
        /// rowset_function : (OPENROWSET  LR_BRACKET  providerName = stringtext  COMMA  connectionString = stringtext  COMMA  sql = stringtext  RR_BRACKET)
        /// </summary>
        public partial class AstRowsetFunction1 : AstRowsetFunction
        {
            
            internal AstRowsetFunction1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRowsetFunction1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRowsetFunction1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRowsetFunction1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRowsetFunction(this);
            }
        }
        /// <summary>
        /// rowset_function : (OPENROWSET  LR_BRACKET  BULK  data_file = stringtext  COMMA  (bulk_options | id_)  RR_BRACKET)
        /// </summary>
        public partial class AstRowsetFunction2 : AstRowsetFunction
        {
            
            internal AstRowsetFunction2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRowsetFunction2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRowsetFunction2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRowsetFunction2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRowsetFunction(this);
            }
        }
        

        
        internal AstRowsetFunction(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstRowsetFunction(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRowsetFunction(Position p) : 
                base(p)
        {
        }
        
        internal AstRowsetFunction(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstRowsetFunction Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstRowsetFunction.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstStringtext), false, false))
                        {
                            return 1;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstBulkOptions), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstId), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// rowset_function : 
        ///    OPENROWSET ( providerName=stringtext , connectionString=stringtext , sql=stringtext ) 
        /// </summary>
        public static AstRowsetFunction RowsetFunction(AstStringtext providerName, AstStringtext connectionString, AstStringtext sql)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRowsetFunction.AstRowsetFunction1 result = new AstRowsetFunction.AstRowsetFunction1(arguments);
            return result;
        }
        
        /// <summary>
        /// rowset_function : 
        ///    OPENROWSET ( BULK data_file=stringtext , bulk_options ) 
        /// </summary>
        public static AstRowsetFunction RowsetFunction(AstStringtext dataFile, AstBulkOptions bulkOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRowsetFunction.AstRowsetFunction2 result = new AstRowsetFunction.AstRowsetFunction2(arguments);
            return result;
        }
        
        /// <summary>
        /// rowset_function : 
        ///    OPENROWSET ( BULK data_file=stringtext , id_ ) 
        /// </summary>
        public static AstRowsetFunction RowsetFunction(AstStringtext dataFile, AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRowsetFunction.AstRowsetFunction2 result = new AstRowsetFunction.AstRowsetFunction2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// derived_table
    /// 	 : subquery
    /// 	 | LR_BRACKET  subqueries  RR_BRACKET
    /// 	 | table_value_constructor
    /// 	 | LR_BRACKET  table_value_constructor  RR_BRACKET
    /// </summary>
    public abstract partial class AstDerivedTable : AstRule
    {
        
        protected static string _rule = "derived_table\r\n\t : subquery\r\n\t | LR_BRACKET  subqueries  RR_BRACKET\r\n\t | table_va" +
            "lue_constructor\r\n\t | LR_BRACKET  table_value_constructor  RR_BRACKET";
        
        /// <summary>
        /// derived_table : subquery
        /// </summary>
        public partial class AstDerivedTable1 : AstDerivedTable
        {
            
            internal AstDerivedTable1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDerivedTable1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDerivedTable1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDerivedTable1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDerivedTable(this);
            }
        }
        /// <summary>
        /// derived_table : LR_BRACKET  subqueries  RR_BRACKET
        /// </summary>
        public partial class AstDerivedTable2 : AstDerivedTable
        {
            
            internal AstDerivedTable2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDerivedTable2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDerivedTable2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDerivedTable2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDerivedTable(this);
            }
        }
        /// <summary>
        /// derived_table : table_value_constructor
        /// </summary>
        public partial class AstDerivedTable3 : AstDerivedTable
        {
            
            internal AstDerivedTable3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDerivedTable3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDerivedTable3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDerivedTable3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDerivedTable(this);
            }
        }
        /// <summary>
        /// derived_table : LR_BRACKET  table_value_constructor  RR_BRACKET
        /// </summary>
        public partial class AstDerivedTable4 : AstDerivedTable
        {
            
            internal AstDerivedTable4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDerivedTable4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDerivedTable4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDerivedTable4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDerivedTable(this);
            }
        }
        

        
        internal AstDerivedTable(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstDerivedTable(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDerivedTable(Position p) : 
                base(p)
        {
        }
        
        internal AstDerivedTable(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDerivedTable Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDerivedTable.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSubquery), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstSubqueries), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstTableValueConstructor), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstTableValueConstructor), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// derived_table : 
        ///    subquery 
        /// </summary>
        public static AstDerivedTable DerivedTable(AstSubquery subquery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDerivedTable.AstDerivedTable1 result = new AstDerivedTable.AstDerivedTable1(arguments);
            return result;
        }
        
        /// <summary>
        /// derived_table : 
        ///    ( subqueries ) 
        /// </summary>
        public static AstDerivedTable DerivedTable(AstSubqueries subqueries)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDerivedTable.AstDerivedTable2 result = new AstDerivedTable.AstDerivedTable2(arguments);
            return result;
        }
        
        /// <summary>
        /// derived_table : 
        ///    table_value_constructor 
        /// </summary>
        public static AstDerivedTable DerivedTable(AstTableValueConstructor tableValueConstructor)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDerivedTable.AstDerivedTable3 result = new AstDerivedTable.AstDerivedTable3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// function_call
    /// 	 : ranking_windowed_function
    /// 	 | aggregate_windowed_function
    /// 	 | analytic_windowed_function
    /// 	 | built_in_functions
    /// 	 | scalar_function_name  LR_BRACKET  expression_list?  RR_BRACKET
    /// 	 | freetext_function
    /// 	 | partition_function
    /// 	 | hierarchyid_static_method
    /// </summary>
    public abstract partial class AstFunctionCall : AstRule
    {
        
        protected static string _rule = @"function_call
	 : ranking_windowed_function
	 | aggregate_windowed_function
	 | analytic_windowed_function
	 | built_in_functions
	 | scalar_function_name  LR_BRACKET  expression_list?  RR_BRACKET
	 | freetext_function
	 | partition_function
	 | hierarchyid_static_method";
        
        /// <summary>
        /// function_call : ranking_windowed_function
        /// </summary>
        public partial class AstFunctionCall1 : AstFunctionCall
        {
            
            internal AstFunctionCall1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstFunctionCall1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstFunctionCall1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstFunctionCall1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : aggregate_windowed_function
        /// </summary>
        public partial class AstFunctionCall2 : AstFunctionCall
        {
            
            internal AstFunctionCall2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstFunctionCall2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstFunctionCall2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstFunctionCall2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : analytic_windowed_function
        /// </summary>
        public partial class AstFunctionCall3 : AstFunctionCall
        {
            
            internal AstFunctionCall3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstFunctionCall3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstFunctionCall3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstFunctionCall3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : built_in_functions
        /// </summary>
        public partial class AstFunctionCall4 : AstFunctionCall
        {
            
            internal AstFunctionCall4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstFunctionCall4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstFunctionCall4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstFunctionCall4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : scalar_function_name  LR_BRACKET  expression_list?  RR_BRACKET
        /// </summary>
        public partial class AstFunctionCall5 : AstFunctionCall
        {
            
            internal AstFunctionCall5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstFunctionCall5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstFunctionCall5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstFunctionCall5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : freetext_function
        /// </summary>
        public partial class AstFunctionCall6 : AstFunctionCall
        {
            
            internal AstFunctionCall6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstFunctionCall6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstFunctionCall6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstFunctionCall6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : partition_function
        /// </summary>
        public partial class AstFunctionCall7 : AstFunctionCall
        {
            
            internal AstFunctionCall7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstFunctionCall7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstFunctionCall7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstFunctionCall7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : hierarchyid_static_method
        /// </summary>
        public partial class AstFunctionCall8 : AstFunctionCall
        {
            
            internal AstFunctionCall8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstFunctionCall8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstFunctionCall8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstFunctionCall8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        

        
        internal AstFunctionCall(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstFunctionCall(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFunctionCall(Position p) : 
                base(p)
        {
        }
        
        internal AstFunctionCall(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstFunctionCall Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstFunctionCall.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstScalarFunctionName), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpressionList), true, false))
                    {
                        return 5;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstRankingWindowedFunction), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstAggregateWindowedFunction), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstAnalyticWindowedFunction), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstBuiltInFunctions), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstFreetextFunction), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstPartitionFunction), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstHierarchyidStaticMethod), false, false))
                {
                    return 8;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// function_call : 
        ///    ranking_windowed_function 
        /// </summary>
        public static AstFunctionCall FunctionCall(AstRankingWindowedFunction rankingWindowedFunction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFunctionCall.AstFunctionCall1 result = new AstFunctionCall.AstFunctionCall1(arguments);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    aggregate_windowed_function 
        /// </summary>
        public static AstFunctionCall FunctionCall(AstAggregateWindowedFunction aggregateWindowedFunction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFunctionCall.AstFunctionCall2 result = new AstFunctionCall.AstFunctionCall2(arguments);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    analytic_windowed_function 
        /// </summary>
        public static AstFunctionCall FunctionCall(AstAnalyticWindowedFunction analyticWindowedFunction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFunctionCall.AstFunctionCall3 result = new AstFunctionCall.AstFunctionCall3(arguments);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    built_in_functions 
        /// </summary>
        public static AstFunctionCall FunctionCall(AstBuiltInFunctions builtInFunctions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFunctionCall.AstFunctionCall4 result = new AstFunctionCall.AstFunctionCall4(arguments);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    scalar_function_name ( expression_list? ) 
        /// </summary>
        public static AstFunctionCall FunctionCall(AstScalarFunctionName scalarFunctionName, AstExpressionList expressionList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFunctionCall.AstFunctionCall5 result = new AstFunctionCall.AstFunctionCall5(arguments);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    freetext_function 
        /// </summary>
        public static AstFunctionCall FunctionCall(AstFreetextFunction freetextFunction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFunctionCall.AstFunctionCall6 result = new AstFunctionCall.AstFunctionCall6(arguments);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    partition_function 
        /// </summary>
        public static AstFunctionCall FunctionCall(AstPartitionFunction partitionFunction)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFunctionCall.AstFunctionCall7 result = new AstFunctionCall.AstFunctionCall7(arguments);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    hierarchyid_static_method 
        /// </summary>
        public static AstFunctionCall FunctionCall(AstHierarchyidStaticMethod hierarchyidStaticMethod)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFunctionCall.AstFunctionCall8 result = new AstFunctionCall.AstFunctionCall8(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// freetext_function
    /// 	 : containstable_freetexttable  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  (COMMA  expression)?  RR_BRACKET
    /// 	 | semantic_table  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression  RR_BRACKET
    /// 	 | SEMANTICSIMILARITYDETAILSTABLE  LR_BRACKET  full_table_ref  COMMA  name1 = full_column_name  COMMA  expr1 = expression  COMMA  name2 = full_column_name  COMMA  expr2 = expression  RR_BRACKET
    /// </summary>
    public abstract partial class AstFreetextFunction : AstRule
    {
        
        protected static string _rule = @"freetext_function
	 : containstable_freetexttable  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  (COMMA  expression)?  RR_BRACKET
	 | semantic_table  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression  RR_BRACKET
	 | SEMANTICSIMILARITYDETAILSTABLE  LR_BRACKET  full_table_ref  COMMA  name1 = full_column_name  COMMA  expr1 = expression  COMMA  name2 = full_column_name  COMMA  expr2 = expression  RR_BRACKET";
        
        /// <summary>
        /// freetext_function : containstable_freetexttable  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  (COMMA  expression)?  RR_BRACKET
        /// </summary>
        public partial class AstFreetextFunction1 : AstFreetextFunction
        {
            
            internal AstFreetextFunction1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstFreetextFunction1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstFreetextFunction1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstFreetextFunction1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFreetextFunction(this);
            }
        }
        /// <summary>
        /// freetext_function : semantic_table  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression  RR_BRACKET
        /// </summary>
        public partial class AstFreetextFunction2 : AstFreetextFunction
        {
            
            internal AstFreetextFunction2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstFreetextFunction2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstFreetextFunction2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstFreetextFunction2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFreetextFunction(this);
            }
        }
        /// <summary>
        /// freetext_function : SEMANTICSIMILARITYDETAILSTABLE  LR_BRACKET  full_table_ref  COMMA  name1 = full_column_name  COMMA  expr1 = expression  COMMA  name2 = full_column_name  COMMA  expr2 = expression  RR_BRACKET
        /// </summary>
        public partial class AstFreetextFunction3 : AstFreetextFunction
        {
            
            internal AstFreetextFunction3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstFreetextFunction3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstFreetextFunction3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstFreetextFunction3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFreetextFunction(this);
            }
        }
        

        
        internal AstFreetextFunction(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstFreetextFunction(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFreetextFunction(Position p) : 
                base(p)
        {
        }
        
        internal AstFreetextFunction(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstFreetextFunction Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstFreetextFunction.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 5))
            {
                if (AstRoot.Eval(list[0], typeof(AstFullTableRef), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFullColumnName), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstFullColumnName), false, false))
                            {
                                if (AstRoot.Eval(list[4], typeof(AstExpression), false, false))
                                {
                                    return 3;
                                }
                            }
                        }
                    }
                }
            }
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstContainstableFreetexttable), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFreetextTableAndcolumnNames), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpressionLanguage), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstExpression), false, false))
                            {
                                return 1;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstSemanticTable), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFreetextTableAndcolumnNames), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// freetext_function : 
        ///    containstable_freetexttable ( freetext_table_andcolumn_names , expression_language , expression ) 
        /// </summary>
        public static AstFreetextFunction FreetextFunction(AstContainstableFreetexttable containstableFreetexttable, AstFreetextTableAndcolumnNames freetextTableAndcolumnNames, AstExpressionLanguage expressionLanguage, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFreetextFunction.AstFreetextFunction1 result = new AstFreetextFunction.AstFreetextFunction1(arguments);
            return result;
        }
        
        /// <summary>
        /// freetext_function : 
        ///    semantic_table ( freetext_table_andcolumn_names , expression ) 
        /// </summary>
        public static AstFreetextFunction FreetextFunction(AstSemanticTable semanticTable, AstFreetextTableAndcolumnNames freetextTableAndcolumnNames, AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFreetextFunction.AstFreetextFunction2 result = new AstFreetextFunction.AstFreetextFunction2(arguments);
            return result;
        }
        
        /// <summary>
        /// freetext_function : 
        ///    SEMANTICSIMILARITYDETAILSTABLE ( full_table_ref , name1=full_column_name , expr1=expression , name2=full_column_name , expr2=expression ) 
        /// </summary>
        public static AstFreetextFunction FreetextFunction(AstFullTableRef fullTableRef, AstFullColumnName name1, AstExpression expr1, AstFullColumnName name2, AstExpression expr2)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFreetextFunction.AstFreetextFunction3 result = new AstFreetextFunction.AstFreetextFunction3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// freetext_predicate
    /// 	 : CONTAINS  LR_BRACKET  (full_column_name | full_column_names | STAR | PROPERTY  LR_BRACKET  full_column_name  COMMA  property = expression  RR_BRACKET)  COMMA  rule = expression  RR_BRACKET
    /// 	 | FREETEXT  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  RR_BRACKET
    /// </summary>
    public abstract partial class AstFreetextPredicate : AstRule
    {
        
        protected static string _rule = @"freetext_predicate
	 : CONTAINS  LR_BRACKET  (full_column_name | full_column_names | STAR | PROPERTY  LR_BRACKET  full_column_name  COMMA  property = expression  RR_BRACKET)  COMMA  rule = expression  RR_BRACKET
	 | FREETEXT  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  RR_BRACKET";
        
        /// <summary>
        /// freetext_predicate : CONTAINS  LR_BRACKET  (full_column_name | full_column_names | STAR | PROPERTY  LR_BRACKET  full_column_name  COMMA  property = expression  RR_BRACKET)  COMMA  rule = expression  RR_BRACKET
        /// </summary>
        public partial class AstFreetextPredicate1 : AstFreetextPredicate
        {
            
            internal AstFreetextPredicate1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstFreetextPredicate1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstFreetextPredicate1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstFreetextPredicate1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFreetextPredicate(this);
            }
        }
        /// <summary>
        /// freetext_predicate : FREETEXT  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  RR_BRACKET
        /// </summary>
        public partial class AstFreetextPredicate2 : AstFreetextPredicate
        {
            
            internal AstFreetextPredicate2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstFreetextPredicate2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstFreetextPredicate2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstFreetextPredicate2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFreetextPredicate(this);
            }
        }
        

        
        internal AstFreetextPredicate(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstFreetextPredicate(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFreetextPredicate(Position p) : 
                base(p)
        {
        }
        
        internal AstFreetextPredicate(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstFreetextPredicate Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstFreetextPredicate.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 5))
            {
                if (AstRoot.Eval(list[0], typeof(AstFullColumnName), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFullColumnNames), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstFullColumnName), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstExpression), false, false))
                            {
                                if (AstRoot.Eval(list[4], typeof(AstExpression), false, false))
                                {
                                    return 1;
                                }
                            }
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstFreetextTableAndcolumnNames), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpressionLanguage), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// freetext_predicate : 
        ///    CONTAINS ( full_column_name , rule=expression ) 
        /// </summary>
        public static AstFreetextPredicate FreetextPredicate(AstFullColumnName fullColumnName, AstExpression rule)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFreetextPredicate.AstFreetextPredicate1 result = new AstFreetextPredicate.AstFreetextPredicate1(arguments);
            return result;
        }
        
        /// <summary>
        /// freetext_predicate : 
        ///    CONTAINS ( full_column_names , rule=expression ) 
        /// </summary>
        public static AstFreetextPredicate FreetextPredicate(AstFullColumnNames fullColumnNames, AstExpression rule)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFreetextPredicate.AstFreetextPredicate1 result = new AstFreetextPredicate.AstFreetextPredicate1(arguments);
            return result;
        }
        
        /// <summary>
        /// freetext_predicate : 
        ///    CONTAINS ( STAR , rule=expression ) 
        /// </summary>
        public static AstFreetextPredicate FreetextPredicate(AstExpression rule)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFreetextPredicate.AstFreetextPredicate1 result = new AstFreetextPredicate.AstFreetextPredicate1(arguments);
            return result;
        }
        
        /// <summary>
        /// freetext_predicate : 
        ///    CONTAINS ( PROPERTY ( full_column_name , property=expression ) , rule=expression ) 
        /// </summary>
        public static AstFreetextPredicate FreetextPredicate(AstFullColumnName fullColumnName, AstExpression property, AstExpression rule)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFreetextPredicate.AstFreetextPredicate1 result = new AstFreetextPredicate.AstFreetextPredicate1(arguments);
            return result;
        }
        
        /// <summary>
        /// freetext_predicate : 
        ///    FREETEXT ( freetext_table_andcolumn_names , expression_language ) 
        /// </summary>
        public static AstFreetextPredicate FreetextPredicate(AstFreetextTableAndcolumnNames freetextTableAndcolumnNames, AstExpressionLanguage expressionLanguage)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstFreetextPredicate.AstFreetextPredicate2 result = new AstFreetextPredicate.AstFreetextPredicate2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// built_in_functions
    /// 	 : APP_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | APPLOCK_MODE  LR_BRACKET  database_principal = expression  COMMA  resource_name = expression  COMMA  lock_owner = expression  RR_BRACKET
    /// 	 | APPLOCK_TEST  LR_BRACKET  database_principal = expression  COMMA  resource_name = expression  COMMA  lockmode = expression  COMMA  lock_owner = expression  RR_BRACKET
    /// 	 | ASSEMBLYPROPERTY  LR_BRACKET  assemblyName = expression  COMMA  propertyName = expression  RR_BRACKET
    /// 	 | COL_LENGTH  LR_BRACKET  table = expression  COMMA  column = expression  RR_BRACKET
    /// 	 | COL_NAME  LR_BRACKET  table = expression  COMMA  column = expression  RR_BRACKET
    /// 	 | COLUMNPROPERTY  LR_BRACKET  id = expression  COMMA  column = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | DATABASEPROPERTYEX  LR_BRACKET  database = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | DB_ID  LR_BRACKET  databaseName = expression  RR_BRACKET
    /// 	 | DB_NAME  LR_BRACKET  database = expression  RR_BRACKET
    /// 	 | FILE_ID  LR_BRACKET  file_name = expression  RR_BRACKET
    /// 	 | FILE_IDEX  LR_BRACKET  file_name = expression  RR_BRACKET
    /// 	 | FILE_NAME  LR_BRACKET  file = expression  RR_BRACKET
    /// 	 | FILEGROUP_ID  LR_BRACKET  filegroup_name = expression  RR_BRACKET
    /// 	 | FILEGROUP_NAME  LR_BRACKET  filegroup_id = expression  RR_BRACKET
    /// 	 | FILEGROUPPROPERTY  LR_BRACKET  filegroup = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | FILEPROPERTY  LR_BRACKET  file = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | FILEPROPERTYEX  LR_BRACKET  name = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | FULLTEXTCATALOGPROPERTY  LR_BRACKET  catalog = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | FULLTEXTSERVICEPROPERTY  LR_BRACKET  property = expression  RR_BRACKET
    /// 	 | INDEX_COL  LR_BRACKET  tableOrView = expression  COMMA  index = expression  COMMA  key = expression  RR_BRACKET
    /// 	 | INDEXKEY_PROPERTY  LR_BRACKET  object = expression  COMMA  index = expression  COMMA  key = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | INDEXPROPERTY  LR_BRACKET  object = expression  COMMA  index_or_statistics = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | NEXT  VALUE  FOR  sequenceName = full_table_ref  (OVER  LR_BRACKET  order_by_clause  RR_BRACKET)?
    /// 	 | OBJECT_DEFINITION  LR_BRACKET  object = expression  RR_BRACKET
    /// 	 | OBJECT_ID  LR_BRACKET  objectName = expression  (COMMA  object_type = expression)?  RR_BRACKET
    /// 	 | OBJECT_NAME  LR_BRACKET  object = expression  (COMMA  database = expression)?  RR_BRACKET
    /// 	 | OBJECT_SCHEMA_NAME  LR_BRACKET  target_object = expression  (COMMA  database = expression)?  RR_BRACKET
    /// 	 | OBJECTPROPERTY  LR_BRACKET  id = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | OBJECTPROPERTYEX  LR_BRACKET  id = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | ORIGINAL_DB_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | PARSENAME  LR_BRACKET  objectName = expression  COMMA  object_piece = expression  RR_BRACKET
    /// 	 | SCHEMA_ID  LR_BRACKET  schemaName = expression  RR_BRACKET
    /// 	 | SCHEMA_NAME  LR_BRACKET  schemaId = expression  RR_BRACKET
    /// 	 | SCOPE_IDENTITY  LR_BRACKET  RR_BRACKET
    /// 	 | SERVERPROPERTY  LR_BRACKET  property = expression  RR_BRACKET
    /// 	 | STATS_DATE  LR_BRACKET  target_object = expression  COMMA  stats = expression  RR_BRACKET
    /// 	 | TYPE_ID  LR_BRACKET  type_name = expression  RR_BRACKET
    /// 	 | TYPE_NAME  LR_BRACKET  type = expression  RR_BRACKET
    /// 	 | TYPEPROPERTY  LR_BRACKET  type = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | ASCII  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | CHAR  LR_BRACKET  integer_expression = expression  RR_BRACKET
    /// 	 | CHARINDEX  LR_BRACKET  expressionToFind = expression  COMMA  expressionToSearch = expression  (COMMA  start_location = expression)?  RR_BRACKET
    /// 	 | CONCAT  LR_BRACKET  expressions  RR_BRACKET
    /// 	 | CONCAT_WS  LR_BRACKET  expressions  RR_BRACKET
    /// 	 | DIFFERENCE  LR_BRACKET  character_expression_1 = expression  COMMA  character_expression_2 = expression  RR_BRACKET
    /// 	 | FORMAT  LR_BRACKET  expressions  RR_BRACKET
    /// 	 | LEFT  LR_BRACKET  character_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
    /// 	 | LEN  LR_BRACKET  string_expression = expression  RR_BRACKET
    /// 	 | LOWER  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | LTRIM  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | NCHAR  LR_BRACKET  integer_expression = expression  RR_BRACKET
    /// 	 | PATINDEX  LR_BRACKET  pattern = expression  COMMA  string_expression = expression  RR_BRACKET
    /// 	 | QUOTENAME  LR_BRACKET  character_string = expression  (COMMA  quote_character = expression)?  RR_BRACKET
    /// 	 | REPLACE  LR_BRACKET  input = expression  COMMA  replacing = expression  COMMA  with = expression  RR_BRACKET
    /// 	 | REPLICATE  LR_BRACKET  string_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
    /// 	 | REVERSE  LR_BRACKET  string_expression = expression  RR_BRACKET
    /// 	 | RIGHT  LR_BRACKET  character_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
    /// 	 | RTRIM  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | SOUNDEX  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | SPACE_KEYWORD  LR_BRACKET  integer_expression = expression  RR_BRACKET
    /// 	 | STR  LR_BRACKET  float_expression = expression  (COMMA  length_expression = expression  (COMMA  decimal_expr = expression)?)?  RR_BRACKET
    /// 	 | STRING_AGG  LR_BRACKET  expr = expression  COMMA  separator = expression  RR_BRACKET  (WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET)?
    /// 	 | STRING_ESCAPE  LR_BRACKET  text_ = expression  COMMA  type_ = expression  RR_BRACKET
    /// 	 | STUFF  LR_BRACKET  str = expression  COMMA  from = decimal  COMMA  to = decimal  COMMA  str_with = expression  RR_BRACKET
    /// 	 | SUBSTRING  LR_BRACKET  string_expression = expression  COMMA  start_ = expression  COMMA  length = expression  RR_BRACKET
    /// 	 | TRANSLATE  LR_BRACKET  inputString = expression  COMMA  characters = expression  COMMA  translations = expression  RR_BRACKET
    /// 	 | TRIM  LR_BRACKET  (characters = expression  FROM)?  string_ = expression  RR_BRACKET
    /// 	 | UNICODE  LR_BRACKET  ncharacter_expression = expression  RR_BRACKET
    /// 	 | UPPER  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | BINARY_CHECKSUM  LR_BRACKET  (star = STAR | expressions)  RR_BRACKET
    /// 	 | CHECKSUM  LR_BRACKET  (star = STAR | expressions)  RR_BRACKET
    /// 	 | COMPRESS  LR_BRACKET  expr = expression  RR_BRACKET
    /// 	 | CONNECTIONPROPERTY  LR_BRACKET  cnx_property = stringtext  RR_BRACKET
    /// 	 | CONTEXT_INFO  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_REQUEST_ID  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_TRANSACTION_ID  LR_BRACKET  RR_BRACKET
    /// 	 | DECOMPRESS  LR_BRACKET  expr = expression  RR_BRACKET
    /// 	 | ERROR_LINE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_MESSAGE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_NUMBER  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_PROCEDURE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_SEVERITY  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_STATE  LR_BRACKET  RR_BRACKET
    /// 	 | FORMATMESSAGE  LR_BRACKET  (msg_number = decimal | msg_string = stringtext | msg_variable = local_id)  COMMA  expressions  RR_BRACKET
    /// 	 | GET_FILESTREAM_TRANSACTION_CONTEXT  LR_BRACKET  RR_BRACKET
    /// 	 | GETANSINULL  LR_BRACKET  (database_name = stringtext)?  RR_BRACKET
    /// 	 | HOST_ID  LR_BRACKET  RR_BRACKET
    /// 	 | HOST_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | ISNULL  LR_BRACKET  left = expression  COMMA  right = expression  RR_BRACKET
    /// 	 | ISNUMERIC  LR_BRACKET  expression  RR_BRACKET
    /// 	 | MIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET
    /// 	 | NEWID  LR_BRACKET  RR_BRACKET
    /// 	 | NEWSEQUENTIALID  LR_BRACKET  RR_BRACKET
    /// 	 | ROWCOUNT_BIG  LR_BRACKET  RR_BRACKET
    /// 	 | SESSION_CONTEXT  LR_BRACKET  session_key = stringtext  RR_BRACKET
    /// 	 | XACT_STATE  LR_BRACKET  RR_BRACKET
    /// 	 | CAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET
    /// 	 | TRY_CAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET
    /// 	 | CONVERT  LR_BRACKET  convert_data_type = data_type  COMMA  expression2  RR_BRACKET
    /// 	 | COALESCE  LR_BRACKET  expression_list  RR_BRACKET
    /// 	 | CURRENT_DATE  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_TIMESTAMP
    /// 	 | CURRENT_USER
    /// 	 | DATEADD  LR_BRACKET  datepart = ID  COMMA  number = expression  COMMA  date = expression  RR_BRACKET
    /// 	 | DATEDIFF  LR_BRACKET  datepart = ID  COMMA  date_first = expression  COMMA  date_second = expression  RR_BRACKET
    /// 	 | DATENAME  LR_BRACKET  datepart = ID  COMMA  date = expression  RR_BRACKET
    /// 	 | DATEPART  LR_BRACKET  datepart = ID  COMMA  date = expression  RR_BRACKET
    /// 	 | GETDATE  LR_BRACKET  RR_BRACKET
    /// 	 | GETUTCDATE  LR_BRACKET  RR_BRACKET
    /// 	 | IDENTITY  LR_BRACKET  data_type  (COMMA  seed = decimal)?  (COMMA  increment = decimal)?  RR_BRACKET
    /// 	 | MIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET
    /// 	 | NULLIF  LR_BRACKET  left = expression  COMMA  right = expression  RR_BRACKET
    /// 	 | SESSION_USER
    /// 	 | SYSTEM_USER
    /// 	 | USER
    /// 	 | PARSE  LR_BRACKET  str = expression  AS  data_type  (USING  culture = expression)?  RR_BRACKET
    /// 	 | xml_data_type_methods
    /// 	 | IIF  LR_BRACKET  cond = search_condition  COMMA  left = expression  COMMA  right = expression  RR_BRACKET
    /// </summary>
    public abstract partial class AstBuiltInFunctions : AstRule
    {
        
        protected static string _rule = "built_in_functions\r\n\t : APP_NAME  LR_BRACKET  RR_BRACKET\r\n\t | APPLOCK_MODE  LR_BR" +
            "ACKET  database_principal = expression  COMMA  resource_name = expression  COMMA" +
            "  lock_owner = expression  RR_BRACKET\r\n\t | APPLOCK_TEST  LR_BRACKET  database_pr" +
            "incipal = expression  COMMA  resource_name = expression  COMMA  lockmode = expre" +
            "ssion  COMMA  lock_owner = expression  RR_BRACKET\r\n\t | ASSEMBLYPROPERTY  LR_BRAC" +
            "KET  assemblyName = expression  COMMA  propertyName = expression  RR_BRACKET\r\n\t " +
            "| COL_LENGTH  LR_BRACKET  table = expression  COMMA  column = expression  RR_BRA" +
            "CKET\r\n\t | COL_NAME  LR_BRACKET  table = expression  COMMA  column = expression  " +
            "RR_BRACKET\r\n\t | COLUMNPROPERTY  LR_BRACKET  id = expression  COMMA  column = exp" +
            "ression  COMMA  property = expression  RR_BRACKET\r\n\t | DATABASEPROPERTYEX  LR_BR" +
            "ACKET  database = expression  COMMA  property = expression  RR_BRACKET\r\n\t | DB_I" +
            "D  LR_BRACKET  databaseName = expression  RR_BRACKET\r\n\t | DB_NAME  LR_BRACKET  d" +
            "atabase = expression  RR_BRACKET\r\n\t | FILE_ID  LR_BRACKET  file_name = expressio" +
            "n  RR_BRACKET\r\n\t | FILE_IDEX  LR_BRACKET  file_name = expression  RR_BRACKET\r\n\t " +
            "| FILE_NAME  LR_BRACKET  file = expression  RR_BRACKET\r\n\t | FILEGROUP_ID  LR_BRA" +
            "CKET  filegroup_name = expression  RR_BRACKET\r\n\t | FILEGROUP_NAME  LR_BRACKET  f" +
            "ilegroup_id = expression  RR_BRACKET\r\n\t | FILEGROUPPROPERTY  LR_BRACKET  filegro" +
            "up = expression  COMMA  property = expression  RR_BRACKET\r\n\t | FILEPROPERTY  LR_" +
            "BRACKET  file = expression  COMMA  property = expression  RR_BRACKET\r\n\t | FILEPR" +
            "OPERTYEX  LR_BRACKET  name = expression  COMMA  property = expression  RR_BRACKE" +
            "T\r\n\t | FULLTEXTCATALOGPROPERTY  LR_BRACKET  catalog = expression  COMMA  propert" +
            "y = expression  RR_BRACKET\r\n\t | FULLTEXTSERVICEPROPERTY  LR_BRACKET  property = " +
            "expression  RR_BRACKET\r\n\t | INDEX_COL  LR_BRACKET  tableOrView = expression  COM" +
            "MA  index = expression  COMMA  key = expression  RR_BRACKET\r\n\t | INDEXKEY_PROPER" +
            "TY  LR_BRACKET  object = expression  COMMA  index = expression  COMMA  key = exp" +
            "ression  COMMA  property = expression  RR_BRACKET\r\n\t | INDEXPROPERTY  LR_BRACKET" +
            "  object = expression  COMMA  index_or_statistics = expression  COMMA  property " +
            "= expression  RR_BRACKET\r\n\t | NEXT  VALUE  FOR  sequenceName = full_table_ref  (" +
            "OVER  LR_BRACKET  order_by_clause  RR_BRACKET)?\r\n\t | OBJECT_DEFINITION  LR_BRACK" +
            "ET  object = expression  RR_BRACKET\r\n\t | OBJECT_ID  LR_BRACKET  objectName = exp" +
            "ression  (COMMA  object_type = expression)?  RR_BRACKET\r\n\t | OBJECT_NAME  LR_BRA" +
            "CKET  object = expression  (COMMA  database = expression)?  RR_BRACKET\r\n\t | OBJE" +
            "CT_SCHEMA_NAME  LR_BRACKET  target_object = expression  (COMMA  database = expre" +
            "ssion)?  RR_BRACKET\r\n\t | OBJECTPROPERTY  LR_BRACKET  id = expression  COMMA  pro" +
            "perty = expression  RR_BRACKET\r\n\t | OBJECTPROPERTYEX  LR_BRACKET  id = expressio" +
            "n  COMMA  property = expression  RR_BRACKET\r\n\t | ORIGINAL_DB_NAME  LR_BRACKET  R" +
            "R_BRACKET\r\n\t | PARSENAME  LR_BRACKET  objectName = expression  COMMA  object_pie" +
            "ce = expression  RR_BRACKET\r\n\t | SCHEMA_ID  LR_BRACKET  schemaName = expression " +
            " RR_BRACKET\r\n\t | SCHEMA_NAME  LR_BRACKET  schemaId = expression  RR_BRACKET\r\n\t |" +
            " SCOPE_IDENTITY  LR_BRACKET  RR_BRACKET\r\n\t | SERVERPROPERTY  LR_BRACKET  propert" +
            "y = expression  RR_BRACKET\r\n\t | STATS_DATE  LR_BRACKET  target_object = expressi" +
            "on  COMMA  stats = expression  RR_BRACKET\r\n\t | TYPE_ID  LR_BRACKET  type_name = " +
            "expression  RR_BRACKET\r\n\t | TYPE_NAME  LR_BRACKET  type = expression  RR_BRACKET" +
            "\r\n\t | TYPEPROPERTY  LR_BRACKET  type = expression  COMMA  property = expression " +
            " RR_BRACKET\r\n\t | ASCII  LR_BRACKET  character_expression = expression  RR_BRACKE" +
            "T\r\n\t | CHAR  LR_BRACKET  integer_expression = expression  RR_BRACKET\r\n\t | CHARIN" +
            "DEX  LR_BRACKET  expressionToFind = expression  COMMA  expressionToSearch = expr" +
            "ession  (COMMA  start_location = expression)?  RR_BRACKET\r\n\t | CONCAT  LR_BRACKE" +
            "T  expressions  RR_BRACKET\r\n\t | CONCAT_WS  LR_BRACKET  expressions  RR_BRACKET\r\n" +
            "\t | DIFFERENCE  LR_BRACKET  character_expression_1 = expression  COMMA  characte" +
            "r_expression_2 = expression  RR_BRACKET\r\n\t | FORMAT  LR_BRACKET  expressions  RR" +
            "_BRACKET\r\n\t | LEFT  LR_BRACKET  character_expression = expression  COMMA  intege" +
            "r_expression = expression  RR_BRACKET\r\n\t | LEN  LR_BRACKET  string_expression = " +
            "expression  RR_BRACKET\r\n\t | LOWER  LR_BRACKET  character_expression = expression" +
            "  RR_BRACKET\r\n\t | LTRIM  LR_BRACKET  character_expression = expression  RR_BRACK" +
            "ET\r\n\t | NCHAR  LR_BRACKET  integer_expression = expression  RR_BRACKET\r\n\t | PATI" +
            "NDEX  LR_BRACKET  pattern = expression  COMMA  string_expression = expression  R" +
            "R_BRACKET\r\n\t | QUOTENAME  LR_BRACKET  character_string = expression  (COMMA  quo" +
            "te_character = expression)?  RR_BRACKET\r\n\t | REPLACE  LR_BRACKET  input = expres" +
            "sion  COMMA  replacing = expression  COMMA  with = expression  RR_BRACKET\r\n\t | R" +
            "EPLICATE  LR_BRACKET  string_expression = expression  COMMA  integer_expression " +
            "= expression  RR_BRACKET\r\n\t | REVERSE  LR_BRACKET  string_expression = expressio" +
            "n  RR_BRACKET\r\n\t | RIGHT  LR_BRACKET  character_expression = expression  COMMA  " +
            "integer_expression = expression  RR_BRACKET\r\n\t | RTRIM  LR_BRACKET  character_ex" +
            "pression = expression  RR_BRACKET\r\n\t | SOUNDEX  LR_BRACKET  character_expression" +
            " = expression  RR_BRACKET\r\n\t | SPACE_KEYWORD  LR_BRACKET  integer_expression = e" +
            "xpression  RR_BRACKET\r\n\t | STR  LR_BRACKET  float_expression = expression  (COMM" +
            "A  length_expression = expression  (COMMA  decimal_expr = expression)?)?  RR_BRA" +
            "CKET\r\n\t | STRING_AGG  LR_BRACKET  expr = expression  COMMA  separator = expressi" +
            "on  RR_BRACKET  (WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET)?\r\n\t | S" +
            "TRING_ESCAPE  LR_BRACKET  text_ = expression  COMMA  type_ = expression  RR_BRAC" +
            "KET\r\n\t | STUFF  LR_BRACKET  str = expression  COMMA  from = decimal  COMMA  to =" +
            " decimal  COMMA  str_with = expression  RR_BRACKET\r\n\t | SUBSTRING  LR_BRACKET  s" +
            "tring_expression = expression  COMMA  start_ = expression  COMMA  length = expre" +
            "ssion  RR_BRACKET\r\n\t | TRANSLATE  LR_BRACKET  inputString = expression  COMMA  c" +
            "haracters = expression  COMMA  translations = expression  RR_BRACKET\r\n\t | TRIM  " +
            "LR_BRACKET  (characters = expression  FROM)?  string_ = expression  RR_BRACKET\r\n" +
            "\t | UNICODE  LR_BRACKET  ncharacter_expression = expression  RR_BRACKET\r\n\t | UPP" +
            "ER  LR_BRACKET  character_expression = expression  RR_BRACKET\r\n\t | BINARY_CHECKS" +
            "UM  LR_BRACKET  (star = STAR | expressions)  RR_BRACKET\r\n\t | CHECKSUM  LR_BRACKE" +
            "T  (star = STAR | expressions)  RR_BRACKET\r\n\t | COMPRESS  LR_BRACKET  expr = exp" +
            "ression  RR_BRACKET\r\n\t | CONNECTIONPROPERTY  LR_BRACKET  cnx_property = stringte" +
            "xt  RR_BRACKET\r\n\t | CONTEXT_INFO  LR_BRACKET  RR_BRACKET\r\n\t | CURRENT_REQUEST_ID" +
            "  LR_BRACKET  RR_BRACKET\r\n\t | CURRENT_TRANSACTION_ID  LR_BRACKET  RR_BRACKET\r\n\t " +
            "| DECOMPRESS  LR_BRACKET  expr = expression  RR_BRACKET\r\n\t | ERROR_LINE  LR_BRAC" +
            "KET  RR_BRACKET\r\n\t | ERROR_MESSAGE  LR_BRACKET  RR_BRACKET\r\n\t | ERROR_NUMBER  LR" +
            "_BRACKET  RR_BRACKET\r\n\t | ERROR_PROCEDURE  LR_BRACKET  RR_BRACKET\r\n\t | ERROR_SEV" +
            "ERITY  LR_BRACKET  RR_BRACKET\r\n\t | ERROR_STATE  LR_BRACKET  RR_BRACKET\r\n\t | FORM" +
            "ATMESSAGE  LR_BRACKET  (msg_number = decimal | msg_string = stringtext | msg_var" +
            "iable = local_id)  COMMA  expressions  RR_BRACKET\r\n\t | GET_FILESTREAM_TRANSACTIO" +
            "N_CONTEXT  LR_BRACKET  RR_BRACKET\r\n\t | GETANSINULL  LR_BRACKET  (database_name =" +
            " stringtext)?  RR_BRACKET\r\n\t | HOST_ID  LR_BRACKET  RR_BRACKET\r\n\t | HOST_NAME  L" +
            "R_BRACKET  RR_BRACKET\r\n\t | ISNULL  LR_BRACKET  left = expression  COMMA  right =" +
            " expression  RR_BRACKET\r\n\t | ISNUMERIC  LR_BRACKET  expression  RR_BRACKET\r\n\t | " +
            "MIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET\r\n\t | NEWID  LR_BRACKET  RR_BRACKET" +
            "\r\n\t | NEWSEQUENTIALID  LR_BRACKET  RR_BRACKET\r\n\t | ROWCOUNT_BIG  LR_BRACKET  RR_" +
            "BRACKET\r\n\t | SESSION_CONTEXT  LR_BRACKET  session_key = stringtext  RR_BRACKET\r\n" +
            "\t | XACT_STATE  LR_BRACKET  RR_BRACKET\r\n\t | CAST  LR_BRACKET  expression  AS  da" +
            "ta_type  RR_BRACKET\r\n\t | TRY_CAST  LR_BRACKET  expression  AS  data_type  RR_BRA" +
            "CKET\r\n\t | CONVERT  LR_BRACKET  convert_data_type = data_type  COMMA  expression2" +
            "  RR_BRACKET\r\n\t | COALESCE  LR_BRACKET  expression_list  RR_BRACKET\r\n\t | CURRENT" +
            "_DATE  LR_BRACKET  RR_BRACKET\r\n\t | CURRENT_TIMESTAMP\r\n\t | CURRENT_USER\r\n\t | DATE" +
            "ADD  LR_BRACKET  datepart = ID  COMMA  number = expression  COMMA  date = expres" +
            "sion  RR_BRACKET\r\n\t | DATEDIFF  LR_BRACKET  datepart = ID  COMMA  date_first = e" +
            "xpression  COMMA  date_second = expression  RR_BRACKET\r\n\t | DATENAME  LR_BRACKET" +
            "  datepart = ID  COMMA  date = expression  RR_BRACKET\r\n\t | DATEPART  LR_BRACKET " +
            " datepart = ID  COMMA  date = expression  RR_BRACKET\r\n\t | GETDATE  LR_BRACKET  R" +
            "R_BRACKET\r\n\t | GETUTCDATE  LR_BRACKET  RR_BRACKET\r\n\t | IDENTITY  LR_BRACKET  dat" +
            "a_type  (COMMA  seed = decimal)?  (COMMA  increment = decimal)?  RR_BRACKET\r\n\t |" +
            " MIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET\r\n\t | NULLIF  LR_BRACKET  left = e" +
            "xpression  COMMA  right = expression  RR_BRACKET\r\n\t | SESSION_USER\r\n\t | SYSTEM_U" +
            "SER\r\n\t | USER\r\n\t | PARSE  LR_BRACKET  str = expression  AS  data_type  (USING  c" +
            "ulture = expression)?  RR_BRACKET\r\n\t | xml_data_type_methods\r\n\t | IIF  LR_BRACKE" +
            "T  cond = search_condition  COMMA  left = expression  COMMA  right = expression " +
            " RR_BRACKET";
        
        /// <summary>
        /// built_in_functions : APP_NAME  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions1 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : APPLOCK_MODE  LR_BRACKET  database_principal = expression  COMMA  resource_name = expression  COMMA  lock_owner = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions2 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : APPLOCK_TEST  LR_BRACKET  database_principal = expression  COMMA  resource_name = expression  COMMA  lockmode = expression  COMMA  lock_owner = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions3 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ASSEMBLYPROPERTY  LR_BRACKET  assemblyName = expression  COMMA  propertyName = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions4 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : COL_LENGTH  LR_BRACKET  table = expression  COMMA  column = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions5 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : COL_NAME  LR_BRACKET  table = expression  COMMA  column = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions6 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : COLUMNPROPERTY  LR_BRACKET  id = expression  COMMA  column = expression  COMMA  property = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions7 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DATABASEPROPERTYEX  LR_BRACKET  database = expression  COMMA  property = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions8 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DB_ID  LR_BRACKET  databaseName = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions9 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions9(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions9(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions9(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions9(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DB_NAME  LR_BRACKET  database = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions10 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions10(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions10(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions10(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions10(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILE_ID  LR_BRACKET  file_name = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions11 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions11(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions11(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions11(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions11(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILE_IDEX  LR_BRACKET  file_name = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions12 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions12(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions12(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions12(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions12(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILE_NAME  LR_BRACKET  file = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions13 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions13(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions13(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions13(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions13(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILEGROUP_ID  LR_BRACKET  filegroup_name = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions14 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions14(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions14(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions14(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions14(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILEGROUP_NAME  LR_BRACKET  filegroup_id = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions15 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions15(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions15(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions15(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions15(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILEGROUPPROPERTY  LR_BRACKET  filegroup = expression  COMMA  property = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions16 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions16(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions16(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions16(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions16(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILEPROPERTY  LR_BRACKET  file = expression  COMMA  property = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions17 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions17(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions17(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions17(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions17(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILEPROPERTYEX  LR_BRACKET  name = expression  COMMA  property = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions18 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions18(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions18(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions18(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions18(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FULLTEXTCATALOGPROPERTY  LR_BRACKET  catalog = expression  COMMA  property = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions19 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions19(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions19(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions19(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions19(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FULLTEXTSERVICEPROPERTY  LR_BRACKET  property = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions20 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions20(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions20(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions20(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions20(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : INDEX_COL  LR_BRACKET  tableOrView = expression  COMMA  index = expression  COMMA  key = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions21 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions21(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions21(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions21(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions21(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : INDEXKEY_PROPERTY  LR_BRACKET  object = expression  COMMA  index = expression  COMMA  key = expression  COMMA  property = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions22 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions22(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions22(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions22(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions22(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : INDEXPROPERTY  LR_BRACKET  object = expression  COMMA  index_or_statistics = expression  COMMA  property = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions23 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions23(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions23(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions23(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions23(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : NEXT  VALUE  FOR  sequenceName = full_table_ref  (OVER  LR_BRACKET  order_by_clause  RR_BRACKET)?
        /// </summary>
        public partial class AstBuiltInFunctions24 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions24(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions24(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions24(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions24(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : OBJECT_DEFINITION  LR_BRACKET  object = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions25 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions25(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions25(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions25(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions25(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : OBJECT_ID  LR_BRACKET  objectName = expression  (COMMA  object_type = expression)?  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions26 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions26(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions26(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions26(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions26(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : OBJECT_NAME  LR_BRACKET  object = expression  (COMMA  database = expression)?  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions27 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions27(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions27(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions27(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions27(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : OBJECT_SCHEMA_NAME  LR_BRACKET  target_object = expression  (COMMA  database = expression)?  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions28 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions28(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions28(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions28(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions28(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : OBJECTPROPERTY  LR_BRACKET  id = expression  COMMA  property = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions29 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions29(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions29(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions29(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions29(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : OBJECTPROPERTYEX  LR_BRACKET  id = expression  COMMA  property = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions30 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions30(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions30(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions30(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions30(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ORIGINAL_DB_NAME  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions31 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions31(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions31(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions31(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions31(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : PARSENAME  LR_BRACKET  objectName = expression  COMMA  object_piece = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions32 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions32(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions32(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions32(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions32(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SCHEMA_ID  LR_BRACKET  schemaName = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions33 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions33(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions33(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions33(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions33(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SCHEMA_NAME  LR_BRACKET  schemaId = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions34 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions34(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions34(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions34(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions34(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SCOPE_IDENTITY  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions35 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions35(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions35(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions35(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions35(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SERVERPROPERTY  LR_BRACKET  property = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions36 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions36(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions36(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions36(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions36(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : STATS_DATE  LR_BRACKET  target_object = expression  COMMA  stats = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions37 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions37(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions37(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions37(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions37(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : TYPE_ID  LR_BRACKET  type_name = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions38 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions38(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions38(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions38(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions38(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : TYPE_NAME  LR_BRACKET  type = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions39 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions39(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions39(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions39(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions39(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : TYPEPROPERTY  LR_BRACKET  type = expression  COMMA  property = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions40 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions40(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions40(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions40(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions40(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ASCII  LR_BRACKET  character_expression = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions41 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions41(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions41(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions41(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions41(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CHAR  LR_BRACKET  integer_expression = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions42 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions42(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions42(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions42(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions42(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CHARINDEX  LR_BRACKET  expressionToFind = expression  COMMA  expressionToSearch = expression  (COMMA  start_location = expression)?  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions43 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions43(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions43(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions43(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions43(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CONCAT  LR_BRACKET  expressions  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions44 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions44(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions44(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions44(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions44(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CONCAT_WS  LR_BRACKET  expressions  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions45 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions45(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions45(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions45(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions45(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DIFFERENCE  LR_BRACKET  character_expression_1 = expression  COMMA  character_expression_2 = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions46 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions46(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions46(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions46(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions46(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FORMAT  LR_BRACKET  expressions  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions47 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions47(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions47(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions47(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions47(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : LEFT  LR_BRACKET  character_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions48 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions48(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions48(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions48(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions48(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : LEN  LR_BRACKET  string_expression = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions49 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions49(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions49(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions49(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions49(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : LOWER  LR_BRACKET  character_expression = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions50 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions50(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions50(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions50(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions50(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : LTRIM  LR_BRACKET  character_expression = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions51 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions51(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions51(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions51(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions51(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : NCHAR  LR_BRACKET  integer_expression = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions52 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions52(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions52(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions52(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions52(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : PATINDEX  LR_BRACKET  pattern = expression  COMMA  string_expression = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions53 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions53(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions53(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions53(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions53(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : QUOTENAME  LR_BRACKET  character_string = expression  (COMMA  quote_character = expression)?  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions54 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions54(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions54(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions54(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions54(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : REPLACE  LR_BRACKET  input = expression  COMMA  replacing = expression  COMMA  with = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions55 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions55(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions55(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions55(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions55(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : REPLICATE  LR_BRACKET  string_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions56 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions56(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions56(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions56(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions56(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : REVERSE  LR_BRACKET  string_expression = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions57 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions57(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions57(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions57(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions57(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : RIGHT  LR_BRACKET  character_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions58 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions58(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions58(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions58(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions58(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : RTRIM  LR_BRACKET  character_expression = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions59 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions59(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions59(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions59(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions59(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SOUNDEX  LR_BRACKET  character_expression = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions60 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions60(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions60(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions60(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions60(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SPACE_KEYWORD  LR_BRACKET  integer_expression = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions61 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions61(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions61(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions61(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions61(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : STR  LR_BRACKET  float_expression = expression  (COMMA  length_expression = expression  (COMMA  decimal_expr = expression)?)?  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions62 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions62(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions62(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions62(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions62(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : STRING_AGG  LR_BRACKET  expr = expression  COMMA  separator = expression  RR_BRACKET  (WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET)?
        /// </summary>
        public partial class AstBuiltInFunctions63 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions63(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions63(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions63(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions63(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : STRING_ESCAPE  LR_BRACKET  text_ = expression  COMMA  type_ = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions64 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions64(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions64(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions64(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions64(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : STUFF  LR_BRACKET  str = expression  COMMA  from = decimal  COMMA  to = decimal  COMMA  str_with = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions65 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions65(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions65(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions65(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions65(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SUBSTRING  LR_BRACKET  string_expression = expression  COMMA  start_ = expression  COMMA  length = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions66 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions66(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions66(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions66(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions66(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : TRANSLATE  LR_BRACKET  inputString = expression  COMMA  characters = expression  COMMA  translations = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions67 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions67(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions67(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions67(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions67(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : TRIM  LR_BRACKET  (characters = expression  FROM)?  string_ = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions68 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions68(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions68(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions68(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions68(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : UNICODE  LR_BRACKET  ncharacter_expression = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions69 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions69(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions69(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions69(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions69(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : UPPER  LR_BRACKET  character_expression = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions70 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions70(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions70(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions70(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions70(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : BINARY_CHECKSUM  LR_BRACKET  (star = STAR | expressions)  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions71 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions71(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions71(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions71(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions71(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CHECKSUM  LR_BRACKET  (star = STAR | expressions)  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions72 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions72(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions72(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions72(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions72(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : COMPRESS  LR_BRACKET  expr = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions73 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions73(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions73(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions73(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions73(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CONNECTIONPROPERTY  LR_BRACKET  cnx_property = stringtext  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions74 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions74(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions74(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions74(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions74(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CONTEXT_INFO  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions75 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions75(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions75(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions75(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions75(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CURRENT_REQUEST_ID  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions76 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions76(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions76(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions76(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions76(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CURRENT_TRANSACTION_ID  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions77 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions77(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions77(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions77(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions77(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DECOMPRESS  LR_BRACKET  expr = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions78 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions78(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions78(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions78(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions78(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ERROR_LINE  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions79 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions79(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions79(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions79(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions79(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ERROR_MESSAGE  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions80 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions80(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions80(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions80(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions80(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ERROR_NUMBER  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions81 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions81(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions81(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions81(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions81(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ERROR_PROCEDURE  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions82 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions82(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions82(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions82(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions82(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ERROR_SEVERITY  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions83 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions83(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions83(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions83(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions83(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ERROR_STATE  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions84 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions84(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions84(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions84(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions84(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FORMATMESSAGE  LR_BRACKET  (msg_number = decimal | msg_string = stringtext | msg_variable = local_id)  COMMA  expressions  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions85 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions85(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions85(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions85(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions85(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : GET_FILESTREAM_TRANSACTION_CONTEXT  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions86 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions86(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions86(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions86(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions86(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : GETANSINULL  LR_BRACKET  (database_name = stringtext)?  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions87 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions87(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions87(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions87(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions87(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : HOST_ID  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions88 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions88(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions88(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions88(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions88(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : HOST_NAME  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions89 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions89(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions89(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions89(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions89(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ISNULL  LR_BRACKET  left = expression  COMMA  right = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions90 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions90(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions90(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions90(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions90(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ISNUMERIC  LR_BRACKET  expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions91 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions91(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions91(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions91(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions91(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : MIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions92 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions92(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions92(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions92(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions92(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : NEWID  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions93 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions93(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions93(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions93(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions93(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : NEWSEQUENTIALID  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions94 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions94(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions94(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions94(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions94(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ROWCOUNT_BIG  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions95 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions95(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions95(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions95(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions95(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SESSION_CONTEXT  LR_BRACKET  session_key = stringtext  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions96 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions96(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions96(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions96(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions96(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : XACT_STATE  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions97 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions97(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions97(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions97(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions97(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions98 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions98(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions98(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions98(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions98(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : TRY_CAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions99 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions99(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions99(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions99(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions99(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CONVERT  LR_BRACKET  convert_data_type = data_type  COMMA  expression2  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions100 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions100(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions100(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions100(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions100(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : COALESCE  LR_BRACKET  expression_list  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions101 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions101(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions101(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions101(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions101(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CURRENT_DATE  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions102 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions102(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions102(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions102(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions102(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CURRENT_TIMESTAMP
        /// </summary>
        public partial class AstBuiltInFunctions103 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions103(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions103(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions103(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions103(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CURRENT_USER
        /// </summary>
        public partial class AstBuiltInFunctions104 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions104(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions104(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions104(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions104(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DATEADD  LR_BRACKET  datepart = ID  COMMA  number = expression  COMMA  date = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions105 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions105(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions105(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions105(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions105(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DATEDIFF  LR_BRACKET  datepart = ID  COMMA  date_first = expression  COMMA  date_second = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions106 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions106(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions106(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions106(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions106(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DATENAME  LR_BRACKET  datepart = ID  COMMA  date = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions107 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions107(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions107(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions107(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions107(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DATEPART  LR_BRACKET  datepart = ID  COMMA  date = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions108 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions108(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions108(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions108(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions108(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : GETDATE  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions109 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions109(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions109(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions109(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions109(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : GETUTCDATE  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions110 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions110(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions110(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions110(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions110(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : IDENTITY  LR_BRACKET  data_type  (COMMA  seed = decimal)?  (COMMA  increment = decimal)?  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions111 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions111(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions111(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions111(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions111(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : MIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions112 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions112(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions112(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions112(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions112(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : NULLIF  LR_BRACKET  left = expression  COMMA  right = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions113 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions113(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions113(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions113(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions113(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SESSION_USER
        /// </summary>
        public partial class AstBuiltInFunctions114 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions114(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions114(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions114(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions114(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SYSTEM_USER
        /// </summary>
        public partial class AstBuiltInFunctions115 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions115(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions115(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions115(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions115(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : USER
        /// </summary>
        public partial class AstBuiltInFunctions116 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions116(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions116(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions116(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions116(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : PARSE  LR_BRACKET  str = expression  AS  data_type  (USING  culture = expression)?  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions117 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions117(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions117(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions117(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions117(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : xml_data_type_methods
        /// </summary>
        public partial class AstBuiltInFunctions118 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions118(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions118(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions118(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions118(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : IIF  LR_BRACKET  cond = search_condition  COMMA  left = expression  COMMA  right = expression  RR_BRACKET
        /// </summary>
        public partial class AstBuiltInFunctions119 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions119(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstBuiltInFunctions119(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstBuiltInFunctions119(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstBuiltInFunctions119(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        

        
        internal AstBuiltInFunctions(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstBuiltInFunctions(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBuiltInFunctions(Position p) : 
                base(p)
        {
        }
        
        internal AstBuiltInFunctions(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstBuiltInFunctions Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstBuiltInFunctions.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstExpression), false, false))
                            {
                                return 3;
                            }
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstExpression), false, false))
                            {
                                return 22;
                            }
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimal), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstDecimal), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstExpression), false, false))
                            {
                                return 65;
                            }
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstLocalId), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstExpressions), false, false))
                            {
                                return 85;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 2;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 7;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 21;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 23;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 43;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 55;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 62;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOrderByClause), false, false))
                        {
                            return 63;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 66;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 67;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstDataType), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimal), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstDecimal), false, false))
                        {
                            return 111;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDataType), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 117;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstSearchCondition), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 119;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 4;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 5;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 6;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 8;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 16;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 17;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 18;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 19;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstFullTableRef), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOrderByClause), false, false))
                    {
                        return 24;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 26;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 27;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 28;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 29;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 30;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 32;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 37;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 40;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 46;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 48;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 53;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 54;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 56;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 58;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 64;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 68;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 90;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDataType), false, false))
                    {
                        return 98;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDataType), false, false))
                    {
                        return 99;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstDataType), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression2), false, false))
                    {
                        return 100;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 105;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 106;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 113;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 9;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 10;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 11;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 12;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 13;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 14;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 15;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 20;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 25;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 33;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 34;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 36;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 38;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 39;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 41;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 42;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpressions), false, false))
                {
                    return 44;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpressions), false, false))
                {
                    return 45;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpressions), false, false))
                {
                    return 47;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 49;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 50;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 51;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 52;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 57;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 59;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 60;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 61;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 69;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 70;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpressions), false, false))
                {
                    return 71;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpressions), false, false))
                {
                    return 72;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 73;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 74;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 78;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 87;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 91;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 96;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpressionList), false, false))
                {
                    return 101;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 107;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 108;
                }
                if (AstRoot.Eval(list[0], typeof(AstXmlDataTypeMethods), false, false))
                {
                    return 118;
                }
            }
            if ((list.Count == 0))
            {
                return 1;
                return 31;
                return 35;
                return 75;
                return 76;
                return 77;
                return 79;
                return 80;
                return 81;
                return 82;
                return 83;
                return 84;
                return 86;
                return 88;
                return 89;
                return 92;
                return 93;
                return 94;
                return 95;
                return 97;
                return 102;
                return 103;
                return 104;
                return 109;
                return 110;
                return 112;
                return 114;
                return 115;
                return 116;
            }
            return 0;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    APPLOCK_MODE ( database_principal=expression , resource_name=expression , lock_owner=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstExpression databasePrincipal, AstExpression resourceName, AstExpression lockOwner)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions2 result = new AstBuiltInFunctions.AstBuiltInFunctions2(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    APPLOCK_TEST ( database_principal=expression , resource_name=expression , lockmode=expression , lock_owner=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstExpression databasePrincipal, AstExpression resourceName, AstExpression lockmode, AstExpression lockOwner)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions3 result = new AstBuiltInFunctions.AstBuiltInFunctions3(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    ASSEMBLYPROPERTY ( assemblyName=expression , propertyName=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstExpression assemblyName, AstExpression propertyName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions4 result = new AstBuiltInFunctions.AstBuiltInFunctions4(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    DB_ID ( databaseName=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstExpression databaseName)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions9 result = new AstBuiltInFunctions.AstBuiltInFunctions9(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    NEXT VALUE FOR sequenceName=full_table_ref OVER ( order_by_clause ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstFullTableRef sequenceName, AstOrderByClause orderByClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions24 result = new AstBuiltInFunctions.AstBuiltInFunctions24(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    CONCAT ( expressions ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstExpressions expressions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions44 result = new AstBuiltInFunctions.AstBuiltInFunctions44(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    STRING_AGG ( expr=expression , separator=expression ) WITHIN GROUP ( order_by_clause ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstExpression expr, AstExpression separator, AstOrderByClause orderByClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions63 result = new AstBuiltInFunctions.AstBuiltInFunctions63(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    STUFF ( str=expression , from=decimal , to=decimal , str_with=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstExpression str, AstDecimal from, AstDecimal to, AstExpression strWith)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions65 result = new AstBuiltInFunctions.AstBuiltInFunctions65(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    CONNECTIONPROPERTY ( cnx_property=stringtext ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstStringtext cnxProperty)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions74 result = new AstBuiltInFunctions.AstBuiltInFunctions74(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    FORMATMESSAGE ( msg_number=decimal , expressions ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstDecimal msgNumber, AstExpressions expressions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions85 result = new AstBuiltInFunctions.AstBuiltInFunctions85(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    FORMATMESSAGE ( msg_string=stringtext , expressions ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstStringtext msgString, AstExpressions expressions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions85 result = new AstBuiltInFunctions.AstBuiltInFunctions85(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    FORMATMESSAGE ( msg_variable=local_id , expressions ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstLocalId msgVariable, AstExpressions expressions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions85 result = new AstBuiltInFunctions.AstBuiltInFunctions85(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    CAST ( expression AS data_type ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstExpression expression, AstDataType dataType)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions98 result = new AstBuiltInFunctions.AstBuiltInFunctions98(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    CONVERT ( convert_data_type=data_type , expression2 ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstDataType convertDataType, AstExpression2 expression2)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions100 result = new AstBuiltInFunctions.AstBuiltInFunctions100(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    COALESCE ( expression_list ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstExpressionList expressionList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions101 result = new AstBuiltInFunctions.AstBuiltInFunctions101(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    DATEADD ( datepart=ID , number=expression , date=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(String datepart, AstExpression number, AstExpression date)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions105 result = new AstBuiltInFunctions.AstBuiltInFunctions105(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    DATENAME ( datepart=ID , date=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(String datepart, AstExpression date)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions107 result = new AstBuiltInFunctions.AstBuiltInFunctions107(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    IDENTITY ( data_type , seed=decimal , increment=decimal ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstDataType dataType, AstDecimal seed, AstDecimal increment)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions111 result = new AstBuiltInFunctions.AstBuiltInFunctions111(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    PARSE ( str=expression AS data_type USING culture=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstExpression str, AstDataType dataType, AstExpression culture)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions117 result = new AstBuiltInFunctions.AstBuiltInFunctions117(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    xml_data_type_methods 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstXmlDataTypeMethods xmlDataTypeMethods)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions118 result = new AstBuiltInFunctions.AstBuiltInFunctions118(arguments);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    IIF ( cond=search_condition , left=expression , right=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(AstSearchCondition cond, AstExpression left, AstExpression right)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstBuiltInFunctions.AstBuiltInFunctions119 result = new AstBuiltInFunctions.AstBuiltInFunctions119(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// xml_data_type_methods
    /// 	 : value_method
    /// 	 | query_method
    /// 	 | exist_method
    /// 	 | modify_method
    /// </summary>
    public abstract partial class AstXmlDataTypeMethods : AstRule
    {
        
        protected static string _rule = "xml_data_type_methods\r\n\t : value_method\r\n\t | query_method\r\n\t | exist_method\r\n\t | " +
            "modify_method";
        
        /// <summary>
        /// xml_data_type_methods : value_method
        /// </summary>
        public partial class AstXmlDataTypeMethods1 : AstXmlDataTypeMethods
        {
            
            internal AstXmlDataTypeMethods1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstXmlDataTypeMethods1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstXmlDataTypeMethods1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstXmlDataTypeMethods1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlDataTypeMethods(this);
            }
        }
        /// <summary>
        /// xml_data_type_methods : query_method
        /// </summary>
        public partial class AstXmlDataTypeMethods2 : AstXmlDataTypeMethods
        {
            
            internal AstXmlDataTypeMethods2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstXmlDataTypeMethods2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstXmlDataTypeMethods2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstXmlDataTypeMethods2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlDataTypeMethods(this);
            }
        }
        /// <summary>
        /// xml_data_type_methods : exist_method
        /// </summary>
        public partial class AstXmlDataTypeMethods3 : AstXmlDataTypeMethods
        {
            
            internal AstXmlDataTypeMethods3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstXmlDataTypeMethods3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstXmlDataTypeMethods3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstXmlDataTypeMethods3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlDataTypeMethods(this);
            }
        }
        /// <summary>
        /// xml_data_type_methods : modify_method
        /// </summary>
        public partial class AstXmlDataTypeMethods4 : AstXmlDataTypeMethods
        {
            
            internal AstXmlDataTypeMethods4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstXmlDataTypeMethods4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstXmlDataTypeMethods4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstXmlDataTypeMethods4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlDataTypeMethods(this);
            }
        }
        

        
        internal AstXmlDataTypeMethods(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstXmlDataTypeMethods(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstXmlDataTypeMethods(Position p) : 
                base(p)
        {
        }
        
        internal AstXmlDataTypeMethods(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstXmlDataTypeMethods Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstXmlDataTypeMethods.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstValueMethod), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstQueryMethod), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstExistMethod), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstModifyMethod), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// xml_data_type_methods : 
        ///    value_method 
        /// </summary>
        public static AstXmlDataTypeMethods XmlDataTypeMethods(AstValueMethod valueMethod)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstXmlDataTypeMethods.AstXmlDataTypeMethods1 result = new AstXmlDataTypeMethods.AstXmlDataTypeMethods1(arguments);
            return result;
        }
        
        /// <summary>
        /// xml_data_type_methods : 
        ///    query_method 
        /// </summary>
        public static AstXmlDataTypeMethods XmlDataTypeMethods(AstQueryMethod queryMethod)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstXmlDataTypeMethods.AstXmlDataTypeMethods2 result = new AstXmlDataTypeMethods.AstXmlDataTypeMethods2(arguments);
            return result;
        }
        
        /// <summary>
        /// xml_data_type_methods : 
        ///    exist_method 
        /// </summary>
        public static AstXmlDataTypeMethods XmlDataTypeMethods(AstExistMethod existMethod)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstXmlDataTypeMethods.AstXmlDataTypeMethods3 result = new AstXmlDataTypeMethods.AstXmlDataTypeMethods3(arguments);
            return result;
        }
        
        /// <summary>
        /// xml_data_type_methods : 
        ///    modify_method 
        /// </summary>
        public static AstXmlDataTypeMethods XmlDataTypeMethods(AstModifyMethod modifyMethod)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstXmlDataTypeMethods.AstXmlDataTypeMethods4 result = new AstXmlDataTypeMethods.AstXmlDataTypeMethods4(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// value_method
    /// 	 : (loc = local_id | value = full_column_name | eventdata = EVENTDATA  LR_BRACKET  RR_BRACKET | query = query_method | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = value_call
    /// </summary>
    public partial class AstValueMethod : AstXmlDataTypeMethods
    {
        
        protected static string _rule = "value_method\r\n\t : (loc = local_id | value = full_column_name | eventdata = EVENTD" +
            "ATA  LR_BRACKET  RR_BRACKET | query = query_method | LR_BRACKET  subquery  RR_BR" +
            "ACKET)  DOT  call = value_call";
        
        internal AstValueMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstValueMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstValueMethod(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstValueMethod(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitValueMethod(this);
        }
        
        /// <summary>
        /// value_method : 
        ///    loc=local_id . call=value_call 
        /// </summary>
        public static AstValueMethod ValueMethod(AstLocalId loc, AstValueCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstValueMethod result = new AstValueMethod(arguments);
            return result;
        }
        
        /// <summary>
        /// value_method : 
        ///    value=full_column_name . call=value_call 
        /// </summary>
        public static AstValueMethod ValueMethod(AstFullColumnName value, AstValueCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstValueMethod result = new AstValueMethod(arguments);
            return result;
        }
        
        /// <summary>
        /// value_method : 
        ///    eventdata=EVENTDATA ( ) . call=value_call 
        /// </summary>
        public static AstValueMethod ValueMethod(AstValueCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstValueMethod result = new AstValueMethod(arguments);
            return result;
        }
        
        /// <summary>
        /// value_method : 
        ///    query=query_method . call=value_call 
        /// </summary>
        public static AstValueMethod ValueMethod(AstQueryMethod query, AstValueCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstValueMethod result = new AstValueMethod(arguments);
            return result;
        }
        
        /// <summary>
        /// value_method : 
        ///    ( subquery ) . call=value_call 
        /// </summary>
        public static AstValueMethod ValueMethod(AstSubquery subquery, AstValueCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstValueMethod result = new AstValueMethod(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// value_call
    /// 	 : VALUE  LR_BRACKET  xquery = stringtext  COMMA  sqltype = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstValueCall : AstRule
    {
        
        protected static string _rule = "value_call\r\n\t : VALUE  LR_BRACKET  xquery = stringtext  COMMA  sqltype = stringte" +
            "xt  RR_BRACKET";
        
        internal AstValueCall(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstValueCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstValueCall(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstValueCall(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitValueCall(this);
        }
        
        /// <summary>
        /// value_call : 
        ///    VALUE ( xquery=stringtext , sqltype=stringtext ) 
        /// </summary>
        public static AstValueCall ValueCall(AstStringtext xquery, AstStringtext sqltype)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstValueCall result = new AstValueCall(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// query_method
    /// 	 : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = query_call
    /// </summary>
    public partial class AstQueryMethod : AstXmlDataTypeMethods
    {
        
        protected static string _rule = "query_method\r\n\t : (loc = local_id | value = full_column_name | LR_BRACKET  subque" +
            "ry  RR_BRACKET)  DOT  call = query_call";
        
        internal AstQueryMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstQueryMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstQueryMethod(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstQueryMethod(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueryMethod(this);
        }
        
        /// <summary>
        /// query_method : 
        ///    loc=local_id . call=query_call 
        /// </summary>
        public static AstQueryMethod QueryMethod(AstLocalId loc, AstQueryCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueryMethod result = new AstQueryMethod(arguments);
            return result;
        }
        
        /// <summary>
        /// query_method : 
        ///    value=full_column_name . call=query_call 
        /// </summary>
        public static AstQueryMethod QueryMethod(AstFullColumnName value, AstQueryCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueryMethod result = new AstQueryMethod(arguments);
            return result;
        }
        
        /// <summary>
        /// query_method : 
        ///    ( subquery ) . call=query_call 
        /// </summary>
        public static AstQueryMethod QueryMethod(AstSubquery subquery, AstQueryCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueryMethod result = new AstQueryMethod(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// query_call
    /// 	 : QUERY  LR_BRACKET  xquery = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstQueryCall : AstRule
    {
        
        protected static string _rule = "query_call\r\n\t : QUERY  LR_BRACKET  xquery = stringtext  RR_BRACKET";
        
        internal AstQueryCall(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstQueryCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstQueryCall(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstQueryCall(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueryCall(this);
        }
        
        /// <summary>
        /// query_call : 
        ///    QUERY ( xquery=stringtext ) 
        /// </summary>
        public static AstQueryCall QueryCall(AstStringtext xquery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstQueryCall result = new AstQueryCall(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// exist_method
    /// 	 : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = exist_call
    /// </summary>
    public partial class AstExistMethod : AstXmlDataTypeMethods
    {
        
        protected static string _rule = "exist_method\r\n\t : (loc = local_id | value = full_column_name | LR_BRACKET  subque" +
            "ry  RR_BRACKET)  DOT  call = exist_call";
        
        internal AstExistMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstExistMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExistMethod(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExistMethod(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExistMethod(this);
        }
        
        /// <summary>
        /// exist_method : 
        ///    loc=local_id . call=exist_call 
        /// </summary>
        public static AstExistMethod ExistMethod(AstLocalId loc, AstExistCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExistMethod result = new AstExistMethod(arguments);
            return result;
        }
        
        /// <summary>
        /// exist_method : 
        ///    value=full_column_name . call=exist_call 
        /// </summary>
        public static AstExistMethod ExistMethod(AstFullColumnName value, AstExistCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExistMethod result = new AstExistMethod(arguments);
            return result;
        }
        
        /// <summary>
        /// exist_method : 
        ///    ( subquery ) . call=exist_call 
        /// </summary>
        public static AstExistMethod ExistMethod(AstSubquery subquery, AstExistCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExistMethod result = new AstExistMethod(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// exist_call
    /// 	 : EXIST  LR_BRACKET  xquery = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstExistCall : AstRule
    {
        
        protected static string _rule = "exist_call\r\n\t : EXIST  LR_BRACKET  xquery = stringtext  RR_BRACKET";
        
        internal AstExistCall(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstExistCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExistCall(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExistCall(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExistCall(this);
        }
        
        /// <summary>
        /// exist_call : 
        ///    EXIST ( xquery=stringtext ) 
        /// </summary>
        public static AstExistCall ExistCall(AstStringtext xquery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstExistCall result = new AstExistCall(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// modify_method
    /// 	 : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = modify_call
    /// </summary>
    public partial class AstModifyMethod : AstXmlDataTypeMethods
    {
        
        protected static string _rule = "modify_method\r\n\t : (loc = local_id | value = full_column_name | LR_BRACKET  subqu" +
            "ery  RR_BRACKET)  DOT  call = modify_call";
        
        internal AstModifyMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstModifyMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstModifyMethod(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstModifyMethod(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModifyMethod(this);
        }
        
        /// <summary>
        /// modify_method : 
        ///    loc=local_id . call=modify_call 
        /// </summary>
        public static AstModifyMethod ModifyMethod(AstLocalId loc, AstModifyCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstModifyMethod result = new AstModifyMethod(arguments);
            return result;
        }
        
        /// <summary>
        /// modify_method : 
        ///    value=full_column_name . call=modify_call 
        /// </summary>
        public static AstModifyMethod ModifyMethod(AstFullColumnName value, AstModifyCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstModifyMethod result = new AstModifyMethod(arguments);
            return result;
        }
        
        /// <summary>
        /// modify_method : 
        ///    ( subquery ) . call=modify_call 
        /// </summary>
        public static AstModifyMethod ModifyMethod(AstSubquery subquery, AstModifyCall call)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstModifyMethod result = new AstModifyMethod(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// modify_call
    /// 	 : MODIFY  LR_BRACKET  xml_dml = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstModifyCall : AstRule
    {
        
        protected static string _rule = "modify_call\r\n\t : MODIFY  LR_BRACKET  xml_dml = stringtext  RR_BRACKET";
        
        internal AstModifyCall(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstModifyCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstModifyCall(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstModifyCall(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModifyCall(this);
        }
        
        /// <summary>
        /// modify_call : 
        ///    MODIFY ( xml_dml=stringtext ) 
        /// </summary>
        public static AstModifyCall ModifyCall(AstStringtext xmlDml)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstModifyCall result = new AstModifyCall(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// hierarchyid_call
    /// 	 : GETANCESTOR  LR_BRACKET  n = expression  RR_BRACKET
    /// 	 | GETDESCENDANT  LR_BRACKET  child1 = expression  COMMA  child2 = expression  RR_BRACKET
    /// 	 | GETLEVEL  LR_BRACKET  RR_BRACKET
    /// 	 | ISDESCENDANTOF  LR_BRACKET  parent_ = expression  RR_BRACKET
    /// 	 | GETREPARENTEDVALUE  LR_BRACKET  oldroot = expression  COMMA  newroot = expression  RR_BRACKET
    /// 	 | TOSTRING  LR_BRACKET  RR_BRACKET
    /// </summary>
    public abstract partial class AstHierarchyidCall : AstRule
    {
        
        protected static string _rule = @"hierarchyid_call
	 : GETANCESTOR  LR_BRACKET  n = expression  RR_BRACKET
	 | GETDESCENDANT  LR_BRACKET  child1 = expression  COMMA  child2 = expression  RR_BRACKET
	 | GETLEVEL  LR_BRACKET  RR_BRACKET
	 | ISDESCENDANTOF  LR_BRACKET  parent_ = expression  RR_BRACKET
	 | GETREPARENTEDVALUE  LR_BRACKET  oldroot = expression  COMMA  newroot = expression  RR_BRACKET
	 | TOSTRING  LR_BRACKET  RR_BRACKET";
        
        /// <summary>
        /// hierarchyid_call : GETANCESTOR  LR_BRACKET  n = expression  RR_BRACKET
        /// </summary>
        public partial class AstHierarchyidCall1 : AstHierarchyidCall
        {
            
            internal AstHierarchyidCall1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstHierarchyidCall1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstHierarchyidCall1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstHierarchyidCall1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidCall(this);
            }
        }
        /// <summary>
        /// hierarchyid_call : GETDESCENDANT  LR_BRACKET  child1 = expression  COMMA  child2 = expression  RR_BRACKET
        /// </summary>
        public partial class AstHierarchyidCall2 : AstHierarchyidCall
        {
            
            internal AstHierarchyidCall2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstHierarchyidCall2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstHierarchyidCall2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstHierarchyidCall2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidCall(this);
            }
        }
        /// <summary>
        /// hierarchyid_call : GETLEVEL  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstHierarchyidCall3 : AstHierarchyidCall
        {
            
            internal AstHierarchyidCall3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstHierarchyidCall3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstHierarchyidCall3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstHierarchyidCall3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidCall(this);
            }
        }
        /// <summary>
        /// hierarchyid_call : ISDESCENDANTOF  LR_BRACKET  parent_ = expression  RR_BRACKET
        /// </summary>
        public partial class AstHierarchyidCall4 : AstHierarchyidCall
        {
            
            internal AstHierarchyidCall4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstHierarchyidCall4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstHierarchyidCall4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstHierarchyidCall4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidCall(this);
            }
        }
        /// <summary>
        /// hierarchyid_call : GETREPARENTEDVALUE  LR_BRACKET  oldroot = expression  COMMA  newroot = expression  RR_BRACKET
        /// </summary>
        public partial class AstHierarchyidCall5 : AstHierarchyidCall
        {
            
            internal AstHierarchyidCall5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstHierarchyidCall5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstHierarchyidCall5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstHierarchyidCall5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidCall(this);
            }
        }
        /// <summary>
        /// hierarchyid_call : TOSTRING  LR_BRACKET  RR_BRACKET
        /// </summary>
        public partial class AstHierarchyidCall6 : AstHierarchyidCall
        {
            
            internal AstHierarchyidCall6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstHierarchyidCall6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstHierarchyidCall6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstHierarchyidCall6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidCall(this);
            }
        }
        

        
        internal AstHierarchyidCall(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstHierarchyidCall(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstHierarchyidCall(Position p) : 
                base(p)
        {
        }
        
        internal AstHierarchyidCall(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstHierarchyidCall Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstHierarchyidCall.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 2;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 5;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 4;
                }
            }
            if ((list.Count == 0))
            {
                return 3;
                return 6;
            }
            return 0;
        }
        
        /// <summary>
        /// hierarchyid_call : 
        ///    GETANCESTOR ( n=expression ) 
        /// </summary>
        public static AstHierarchyidCall HierarchyidCall(AstExpression n)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstHierarchyidCall.AstHierarchyidCall1 result = new AstHierarchyidCall.AstHierarchyidCall1(arguments);
            return result;
        }
        
        /// <summary>
        /// hierarchyid_call : 
        ///    GETDESCENDANT ( child1=expression , child2=expression ) 
        /// </summary>
        public static AstHierarchyidCall HierarchyidCall(AstExpression child1, AstExpression child2)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstHierarchyidCall.AstHierarchyidCall2 result = new AstHierarchyidCall.AstHierarchyidCall2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// hierarchyid_static_method
    /// 	 : HIERARCHYID  DOUBLE_COLON  (GETROOT  LR_BRACKET  RR_BRACKET | PARSE  LR_BRACKET  input = expression  RR_BRACKET)
    /// </summary>
    public partial class AstHierarchyidStaticMethod : AstRule
    {
        
        protected static string _rule = "hierarchyid_static_method\r\n\t : HIERARCHYID  DOUBLE_COLON  (GETROOT  LR_BRACKET  R" +
            "R_BRACKET | PARSE  LR_BRACKET  input = expression  RR_BRACKET)";
        
        internal AstHierarchyidStaticMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstHierarchyidStaticMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstHierarchyidStaticMethod(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstHierarchyidStaticMethod(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitHierarchyidStaticMethod(this);
        }
        
        /// <summary>
        /// hierarchyid_static_method : 
        ///    HIERARCHYID :: PARSE ( input=expression ) 
        /// </summary>
        public static AstHierarchyidStaticMethod HierarchyidStaticMethod(AstExpression input)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstHierarchyidStaticMethod result = new AstHierarchyidStaticMethod(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// nodes_method
    /// 	 : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  NODES  LR_BRACKET  xquery = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstNodesMethod : AstRule
    {
        
        protected static string _rule = "nodes_method\r\n\t : (loc = local_id | value = full_column_name | LR_BRACKET  subque" +
            "ry  RR_BRACKET)  DOT  NODES  LR_BRACKET  xquery = stringtext  RR_BRACKET";
        
        internal AstNodesMethod(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstNodesMethod(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstNodesMethod(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstNodesMethod(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNodesMethod(this);
        }
        
        /// <summary>
        /// nodes_method : 
        ///    loc=local_id . NODES ( xquery=stringtext ) 
        /// </summary>
        public static AstNodesMethod NodesMethod(AstLocalId loc, AstStringtext xquery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstNodesMethod result = new AstNodesMethod(arguments);
            return result;
        }
        
        /// <summary>
        /// nodes_method : 
        ///    value=full_column_name . NODES ( xquery=stringtext ) 
        /// </summary>
        public static AstNodesMethod NodesMethod(AstFullColumnName value, AstStringtext xquery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstNodesMethod result = new AstNodesMethod(arguments);
            return result;
        }
        
        /// <summary>
        /// nodes_method : 
        ///    ( subquery ) . NODES ( xquery=stringtext ) 
        /// </summary>
        public static AstNodesMethod NodesMethod(AstSubquery subquery, AstStringtext xquery)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstNodesMethod result = new AstNodesMethod(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// table_hint
    /// 	 : NOEXPAND
    /// 	 | INDEX  (LR_BRACKET  index_values  RR_BRACKET | EQUAL  LR_BRACKET  index_value  RR_BRACKET | EQUAL  index_value)
    /// 	 | FORCESEEK  (LR_BRACKET  index_value  LR_BRACKET  column_name_list  RR_BRACKET  RR_BRACKET)?
    /// 	 | FORCESCAN
    /// 	 | HOLDLOCK
    /// 	 | NOLOCK
    /// 	 | NOWAIT
    /// 	 | PAGLOCK
    /// 	 | READCOMMITTED
    /// 	 | READCOMMITTEDLOCK
    /// 	 | READPAST
    /// 	 | READUNCOMMITTED
    /// 	 | REPEATABLEREAD
    /// 	 | ROWLOCK
    /// 	 | SERIALIZABLE
    /// 	 | SNAPSHOT
    /// 	 | SPATIAL_WINDOW_MAX_CELLS  EQUAL  decimal
    /// 	 | TABLOCK
    /// 	 | TABLOCKX
    /// 	 | UPDLOCK
    /// 	 | XLOCK
    /// 	 | KEEPIDENTITY
    /// 	 | KEEPDEFAULTS
    /// 	 | IGNORE_CONSTRAINTS
    /// 	 | IGNORE_TRIGGERS
    /// </summary>
    public abstract partial class AstTableHint : AstRule
    {
        
        protected static string _rule = @"table_hint
	 : NOEXPAND
	 | INDEX  (LR_BRACKET  index_values  RR_BRACKET | EQUAL  LR_BRACKET  index_value  RR_BRACKET | EQUAL  index_value)
	 | FORCESEEK  (LR_BRACKET  index_value  LR_BRACKET  column_name_list  RR_BRACKET  RR_BRACKET)?
	 | FORCESCAN
	 | HOLDLOCK
	 | NOLOCK
	 | NOWAIT
	 | PAGLOCK
	 | READCOMMITTED
	 | READCOMMITTEDLOCK
	 | READPAST
	 | READUNCOMMITTED
	 | REPEATABLEREAD
	 | ROWLOCK
	 | SERIALIZABLE
	 | SNAPSHOT
	 | SPATIAL_WINDOW_MAX_CELLS  EQUAL  decimal
	 | TABLOCK
	 | TABLOCKX
	 | UPDLOCK
	 | XLOCK
	 | KEEPIDENTITY
	 | KEEPDEFAULTS
	 | IGNORE_CONSTRAINTS
	 | IGNORE_TRIGGERS";
        
        /// <summary>
        /// table_hint : NOEXPAND
        /// </summary>
        public partial class AstTableHint1 : AstTableHint
        {
            
            internal AstTableHint1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : INDEX  (LR_BRACKET  index_values  RR_BRACKET | EQUAL  LR_BRACKET  index_value  RR_BRACKET | EQUAL  index_value)
        /// </summary>
        public partial class AstTableHint2 : AstTableHint
        {
            
            internal AstTableHint2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : FORCESEEK  (LR_BRACKET  index_value  LR_BRACKET  column_name_list  RR_BRACKET  RR_BRACKET)?
        /// </summary>
        public partial class AstTableHint3 : AstTableHint
        {
            
            internal AstTableHint3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : FORCESCAN
        /// </summary>
        public partial class AstTableHint4 : AstTableHint
        {
            
            internal AstTableHint4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : HOLDLOCK
        /// </summary>
        public partial class AstTableHint5 : AstTableHint
        {
            
            internal AstTableHint5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : NOLOCK
        /// </summary>
        public partial class AstTableHint6 : AstTableHint
        {
            
            internal AstTableHint6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : NOWAIT
        /// </summary>
        public partial class AstTableHint7 : AstTableHint
        {
            
            internal AstTableHint7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : PAGLOCK
        /// </summary>
        public partial class AstTableHint8 : AstTableHint
        {
            
            internal AstTableHint8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : READCOMMITTED
        /// </summary>
        public partial class AstTableHint9 : AstTableHint
        {
            
            internal AstTableHint9(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint9(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint9(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint9(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : READCOMMITTEDLOCK
        /// </summary>
        public partial class AstTableHint10 : AstTableHint
        {
            
            internal AstTableHint10(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint10(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint10(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint10(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : READPAST
        /// </summary>
        public partial class AstTableHint11 : AstTableHint
        {
            
            internal AstTableHint11(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint11(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint11(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint11(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : READUNCOMMITTED
        /// </summary>
        public partial class AstTableHint12 : AstTableHint
        {
            
            internal AstTableHint12(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint12(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint12(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint12(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : REPEATABLEREAD
        /// </summary>
        public partial class AstTableHint13 : AstTableHint
        {
            
            internal AstTableHint13(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint13(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint13(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint13(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : ROWLOCK
        /// </summary>
        public partial class AstTableHint14 : AstTableHint
        {
            
            internal AstTableHint14(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint14(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint14(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint14(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : SERIALIZABLE
        /// </summary>
        public partial class AstTableHint15 : AstTableHint
        {
            
            internal AstTableHint15(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint15(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint15(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint15(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : SNAPSHOT
        /// </summary>
        public partial class AstTableHint16 : AstTableHint
        {
            
            internal AstTableHint16(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint16(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint16(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint16(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : SPATIAL_WINDOW_MAX_CELLS  EQUAL  decimal
        /// </summary>
        public partial class AstTableHint17 : AstTableHint
        {
            
            internal AstTableHint17(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint17(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint17(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint17(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : TABLOCK
        /// </summary>
        public partial class AstTableHint18 : AstTableHint
        {
            
            internal AstTableHint18(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint18(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint18(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint18(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : TABLOCKX
        /// </summary>
        public partial class AstTableHint19 : AstTableHint
        {
            
            internal AstTableHint19(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint19(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint19(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint19(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : UPDLOCK
        /// </summary>
        public partial class AstTableHint20 : AstTableHint
        {
            
            internal AstTableHint20(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint20(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint20(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint20(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : XLOCK
        /// </summary>
        public partial class AstTableHint21 : AstTableHint
        {
            
            internal AstTableHint21(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint21(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint21(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint21(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : KEEPIDENTITY
        /// </summary>
        public partial class AstTableHint22 : AstTableHint
        {
            
            internal AstTableHint22(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint22(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint22(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint22(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : KEEPDEFAULTS
        /// </summary>
        public partial class AstTableHint23 : AstTableHint
        {
            
            internal AstTableHint23(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint23(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint23(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint23(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : IGNORE_CONSTRAINTS
        /// </summary>
        public partial class AstTableHint24 : AstTableHint
        {
            
            internal AstTableHint24(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint24(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint24(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint24(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : IGNORE_TRIGGERS
        /// </summary>
        public partial class AstTableHint25 : AstTableHint
        {
            
            internal AstTableHint25(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstTableHint25(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstTableHint25(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstTableHint25(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        

        
        internal AstTableHint(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstTableHint(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableHint(Position p) : 
                base(p)
        {
        }
        
        internal AstTableHint(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTableHint Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTableHint.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstIndexValues), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstIndexValue), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstIndexValue), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstIndexValue), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstColumnNameList), false, false))
                    {
                        return 3;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 17;
                }
            }
            if ((list.Count == 0))
            {
                return 1;
                return 4;
                return 5;
                return 6;
                return 7;
                return 8;
                return 9;
                return 10;
                return 11;
                return 12;
                return 13;
                return 14;
                return 15;
                return 16;
                return 18;
                return 19;
                return 20;
                return 21;
                return 22;
                return 23;
                return 24;
                return 25;
            }
            return 0;
        }
        
        /// <summary>
        /// table_hint : 
        ///    INDEX ( index_values ) 
        /// </summary>
        public static AstTableHint TableHint(AstIndexValues indexValues)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableHint.AstTableHint2 result = new AstTableHint.AstTableHint2(arguments);
            return result;
        }
        
        /// <summary>
        /// table_hint : 
        ///    INDEX EQUAL ( index_value ) 
        /// </summary>
        public static AstTableHint TableHint(AstIndexValue indexValue)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableHint.AstTableHint2 result = new AstTableHint.AstTableHint2(arguments);
            return result;
        }
        
        /// <summary>
        /// table_hint : 
        ///    FORCESEEK ( index_value ( column_name_list ) ) 
        /// </summary>
        public static AstTableHint TableHint(AstIndexValue indexValue, AstColumnNameList columnNameList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableHint.AstTableHint3 result = new AstTableHint.AstTableHint3(arguments);
            return result;
        }
        
        /// <summary>
        /// table_hint : 
        ///    SPATIAL_WINDOW_MAX_CELLS EQUAL decimal 
        /// </summary>
        public static AstTableHint TableHint(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstTableHint.AstTableHint17 result = new AstTableHint.AstTableHint17(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// index_value
    /// 	 : id_
    /// 	 | decimal
    /// </summary>
    public abstract partial class AstIndexValue : AstRule
    {
        
        protected static string _rule = "index_value\r\n\t : id_\r\n\t | decimal";
        
        /// <summary>
        /// index_value : id_
        /// </summary>
        public partial class AstIndexValue1 : AstIndexValue
        {
            
            internal AstIndexValue1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstIndexValue1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstIndexValue1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstIndexValue1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexValue(this);
            }
        }
        /// <summary>
        /// index_value : decimal
        /// </summary>
        public partial class AstIndexValue2 : AstIndexValue
        {
            
            internal AstIndexValue2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstIndexValue2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstIndexValue2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstIndexValue2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexValue(this);
            }
        }
        

        
        internal AstIndexValue(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstIndexValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstIndexValue(Position p) : 
                base(p)
        {
        }
        
        internal AstIndexValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstIndexValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstIndexValue.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// index_value : 
        ///    id_ 
        /// </summary>
        public static AstIndexValue IndexValue(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstIndexValue.AstIndexValue1 result = new AstIndexValue.AstIndexValue1(arguments);
            return result;
        }
        
        /// <summary>
        /// index_value : 
        ///    decimal 
        /// </summary>
        public static AstIndexValue IndexValue(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstIndexValue.AstIndexValue2 result = new AstIndexValue.AstIndexValue2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// ranking_windowed_function
    /// 	 : ranking_windowed  LR_BRACKET  RR_BRACKET  over_clause
    /// 	 | NTILE  LR_BRACKET  expression  RR_BRACKET  over_clause
    /// </summary>
    public abstract partial class AstRankingWindowedFunction : AstRule
    {
        
        protected static string _rule = "ranking_windowed_function\r\n\t : ranking_windowed  LR_BRACKET  RR_BRACKET  over_cla" +
            "use\r\n\t | NTILE  LR_BRACKET  expression  RR_BRACKET  over_clause";
        
        /// <summary>
        /// ranking_windowed_function : ranking_windowed  LR_BRACKET  RR_BRACKET  over_clause
        /// </summary>
        public partial class AstRankingWindowedFunction1 : AstRankingWindowedFunction
        {
            
            internal AstRankingWindowedFunction1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRankingWindowedFunction1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRankingWindowedFunction1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRankingWindowedFunction1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRankingWindowedFunction(this);
            }
        }
        /// <summary>
        /// ranking_windowed_function : NTILE  LR_BRACKET  expression  RR_BRACKET  over_clause
        /// </summary>
        public partial class AstRankingWindowedFunction2 : AstRankingWindowedFunction
        {
            
            internal AstRankingWindowedFunction2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstRankingWindowedFunction2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstRankingWindowedFunction2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstRankingWindowedFunction2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRankingWindowedFunction(this);
            }
        }
        

        
        internal AstRankingWindowedFunction(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstRankingWindowedFunction(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRankingWindowedFunction(Position p) : 
                base(p)
        {
        }
        
        internal AstRankingWindowedFunction(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstRankingWindowedFunction Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstRankingWindowedFunction.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstRankingWindowed), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOverClause), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOverClause), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// ranking_windowed_function : 
        ///    ranking_windowed ( ) over_clause 
        /// </summary>
        public static AstRankingWindowedFunction RankingWindowedFunction(AstRankingWindowed rankingWindowed, AstOverClause overClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRankingWindowedFunction.AstRankingWindowedFunction1 result = new AstRankingWindowedFunction.AstRankingWindowedFunction1(arguments);
            return result;
        }
        
        /// <summary>
        /// ranking_windowed_function : 
        ///    NTILE ( expression ) over_clause 
        /// </summary>
        public static AstRankingWindowedFunction RankingWindowedFunction(AstExpression expression, AstOverClause overClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstRankingWindowedFunction.AstRankingWindowedFunction2 result = new AstRankingWindowedFunction.AstRankingWindowedFunction2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// aggregate_windowed_function
    /// 	 : agg_function  LR_BRACKET  all_distinct_expression  RR_BRACKET  over_clause?
    /// 	 | count_count_big  LR_BRACKET  (STAR | all_distinct_expression)  RR_BRACKET  over_clause?
    /// 	 | CHECKSUM_AGG  LR_BRACKET  all_distinct_expression  RR_BRACKET
    /// 	 | GROUPING  LR_BRACKET  expression  RR_BRACKET
    /// 	 | GROUPING_ID  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    public abstract partial class AstAggregateWindowedFunction : AstRule
    {
        
        protected static string _rule = @"aggregate_windowed_function
	 : agg_function  LR_BRACKET  all_distinct_expression  RR_BRACKET  over_clause?
	 | count_count_big  LR_BRACKET  (STAR | all_distinct_expression)  RR_BRACKET  over_clause?
	 | CHECKSUM_AGG  LR_BRACKET  all_distinct_expression  RR_BRACKET
	 | GROUPING  LR_BRACKET  expression  RR_BRACKET
	 | GROUPING_ID  LR_BRACKET  expression_list  RR_BRACKET";
        
        /// <summary>
        /// aggregate_windowed_function : agg_function  LR_BRACKET  all_distinct_expression  RR_BRACKET  over_clause?
        /// </summary>
        public partial class AstAggregateWindowedFunction1 : AstAggregateWindowedFunction
        {
            
            internal AstAggregateWindowedFunction1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAggregateWindowedFunction1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAggregateWindowedFunction1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAggregateWindowedFunction1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAggregateWindowedFunction(this);
            }
        }
        /// <summary>
        /// aggregate_windowed_function : count_count_big  LR_BRACKET  (STAR | all_distinct_expression)  RR_BRACKET  over_clause?
        /// </summary>
        public partial class AstAggregateWindowedFunction2 : AstAggregateWindowedFunction
        {
            
            internal AstAggregateWindowedFunction2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAggregateWindowedFunction2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAggregateWindowedFunction2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAggregateWindowedFunction2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAggregateWindowedFunction(this);
            }
        }
        /// <summary>
        /// aggregate_windowed_function : CHECKSUM_AGG  LR_BRACKET  all_distinct_expression  RR_BRACKET
        /// </summary>
        public partial class AstAggregateWindowedFunction3 : AstAggregateWindowedFunction
        {
            
            internal AstAggregateWindowedFunction3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAggregateWindowedFunction3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAggregateWindowedFunction3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAggregateWindowedFunction3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAggregateWindowedFunction(this);
            }
        }
        /// <summary>
        /// aggregate_windowed_function : GROUPING  LR_BRACKET  expression  RR_BRACKET
        /// </summary>
        public partial class AstAggregateWindowedFunction4 : AstAggregateWindowedFunction
        {
            
            internal AstAggregateWindowedFunction4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAggregateWindowedFunction4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAggregateWindowedFunction4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAggregateWindowedFunction4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAggregateWindowedFunction(this);
            }
        }
        /// <summary>
        /// aggregate_windowed_function : GROUPING_ID  LR_BRACKET  expression_list  RR_BRACKET
        /// </summary>
        public partial class AstAggregateWindowedFunction5 : AstAggregateWindowedFunction
        {
            
            internal AstAggregateWindowedFunction5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAggregateWindowedFunction5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAggregateWindowedFunction5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAggregateWindowedFunction5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAggregateWindowedFunction(this);
            }
        }
        

        
        internal AstAggregateWindowedFunction(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAggregateWindowedFunction(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAggregateWindowedFunction(Position p) : 
                base(p)
        {
        }
        
        internal AstAggregateWindowedFunction(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAggregateWindowedFunction Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAggregateWindowedFunction.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstAggFunction), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAllDistinctExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOverClause), true, false))
                        {
                            return 1;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstCountCountBig), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAllDistinctExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOverClause), true, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAllDistinctExpression), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpressionList), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// aggregate_windowed_function : 
        ///    agg_function ( all_distinct_expression ) over_clause? 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(AstAggFunction aggFunction, AstAllDistinctExpression allDistinctExpression, AstOverClause overClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAggregateWindowedFunction.AstAggregateWindowedFunction1 result = new AstAggregateWindowedFunction.AstAggregateWindowedFunction1(arguments);
            return result;
        }
        
        /// <summary>
        /// aggregate_windowed_function : 
        ///    count_count_big ( STAR ) over_clause? 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(AstCountCountBig countCountBig, AstOverClause overClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAggregateWindowedFunction.AstAggregateWindowedFunction2 result = new AstAggregateWindowedFunction.AstAggregateWindowedFunction2(arguments);
            return result;
        }
        
        /// <summary>
        /// aggregate_windowed_function : 
        ///    count_count_big ( all_distinct_expression ) over_clause? 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(AstCountCountBig countCountBig, AstAllDistinctExpression allDistinctExpression, AstOverClause overClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAggregateWindowedFunction.AstAggregateWindowedFunction2 result = new AstAggregateWindowedFunction.AstAggregateWindowedFunction2(arguments);
            return result;
        }
        
        /// <summary>
        /// aggregate_windowed_function : 
        ///    CHECKSUM_AGG ( all_distinct_expression ) 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(AstAllDistinctExpression allDistinctExpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAggregateWindowedFunction.AstAggregateWindowedFunction3 result = new AstAggregateWindowedFunction.AstAggregateWindowedFunction3(arguments);
            return result;
        }
        
        /// <summary>
        /// aggregate_windowed_function : 
        ///    GROUPING ( expression ) 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAggregateWindowedFunction.AstAggregateWindowedFunction4 result = new AstAggregateWindowedFunction.AstAggregateWindowedFunction4(arguments);
            return result;
        }
        
        /// <summary>
        /// aggregate_windowed_function : 
        ///    GROUPING_ID ( expression_list ) 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(AstExpressionList expressionList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAggregateWindowedFunction.AstAggregateWindowedFunction5 result = new AstAggregateWindowedFunction.AstAggregateWindowedFunction5(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// analytic_windowed_function
    /// 	 : first_last_value  LR_BRACKET  expression  RR_BRACKET  over_clause
    /// 	 | lag_lead  LR_BRACKET  expression  (COMMA  expression2)?  RR_BRACKET  over_clause
    /// 	 | cume_percent  LR_BRACKET  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  order_by_clause  RR_BRACKET
    /// 	 | percentil  LR_BRACKET  expression  RR_BRACKET  WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  RR_BRACKET
    /// </summary>
    public abstract partial class AstAnalyticWindowedFunction : AstRule
    {
        
        protected static string _rule = @"analytic_windowed_function
	 : first_last_value  LR_BRACKET  expression  RR_BRACKET  over_clause
	 | lag_lead  LR_BRACKET  expression  (COMMA  expression2)?  RR_BRACKET  over_clause
	 | cume_percent  LR_BRACKET  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  order_by_clause  RR_BRACKET
	 | percentil  LR_BRACKET  expression  RR_BRACKET  WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  RR_BRACKET";
        
        /// <summary>
        /// analytic_windowed_function : first_last_value  LR_BRACKET  expression  RR_BRACKET  over_clause
        /// </summary>
        public partial class AstAnalyticWindowedFunction1 : AstAnalyticWindowedFunction
        {
            
            internal AstAnalyticWindowedFunction1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnalyticWindowedFunction1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnalyticWindowedFunction1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnalyticWindowedFunction1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnalyticWindowedFunction(this);
            }
        }
        /// <summary>
        /// analytic_windowed_function : lag_lead  LR_BRACKET  expression  (COMMA  expression2)?  RR_BRACKET  over_clause
        /// </summary>
        public partial class AstAnalyticWindowedFunction2 : AstAnalyticWindowedFunction
        {
            
            internal AstAnalyticWindowedFunction2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnalyticWindowedFunction2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnalyticWindowedFunction2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnalyticWindowedFunction2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnalyticWindowedFunction(this);
            }
        }
        /// <summary>
        /// analytic_windowed_function : cume_percent  LR_BRACKET  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  order_by_clause  RR_BRACKET
        /// </summary>
        public partial class AstAnalyticWindowedFunction3 : AstAnalyticWindowedFunction
        {
            
            internal AstAnalyticWindowedFunction3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnalyticWindowedFunction3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnalyticWindowedFunction3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnalyticWindowedFunction3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnalyticWindowedFunction(this);
            }
        }
        /// <summary>
        /// analytic_windowed_function : percentil  LR_BRACKET  expression  RR_BRACKET  WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  RR_BRACKET
        /// </summary>
        public partial class AstAnalyticWindowedFunction4 : AstAnalyticWindowedFunction
        {
            
            internal AstAnalyticWindowedFunction4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAnalyticWindowedFunction4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAnalyticWindowedFunction4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAnalyticWindowedFunction4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnalyticWindowedFunction(this);
            }
        }
        

        
        internal AstAnalyticWindowedFunction(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAnalyticWindowedFunction(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAnalyticWindowedFunction(Position p) : 
                base(p)
        {
        }
        
        internal AstAnalyticWindowedFunction(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAnalyticWindowedFunction Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAnalyticWindowedFunction.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstLagLead), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression2), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstOverClause), false, false))
                            {
                                return 2;
                            }
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstPercentil), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOrderByClause), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstExpressionList), false, false))
                            {
                                return 4;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstFirstLastValue), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOverClause), false, false))
                        {
                            return 1;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstCumePercent), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpressionList), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOrderByClause), false, false))
                        {
                            return 3;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// analytic_windowed_function : 
        ///    first_last_value ( expression ) over_clause 
        /// </summary>
        public static AstAnalyticWindowedFunction AnalyticWindowedFunction(AstFirstLastValue firstLastValue, AstExpression expression, AstOverClause overClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnalyticWindowedFunction.AstAnalyticWindowedFunction1 result = new AstAnalyticWindowedFunction.AstAnalyticWindowedFunction1(arguments);
            return result;
        }
        
        /// <summary>
        /// analytic_windowed_function : 
        ///    lag_lead ( expression , expression2 ) over_clause 
        /// </summary>
        public static AstAnalyticWindowedFunction AnalyticWindowedFunction(AstLagLead lagLead, AstExpression expression, AstExpression2 expression2, AstOverClause overClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnalyticWindowedFunction.AstAnalyticWindowedFunction2 result = new AstAnalyticWindowedFunction.AstAnalyticWindowedFunction2(arguments);
            return result;
        }
        
        /// <summary>
        /// analytic_windowed_function : 
        ///    cume_percent ( ) OVER ( PARTITION BY expression_list order_by_clause ) 
        /// </summary>
        public static AstAnalyticWindowedFunction AnalyticWindowedFunction(AstCumePercent cumePercent, AstExpressionList expressionList, AstOrderByClause orderByClause)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnalyticWindowedFunction.AstAnalyticWindowedFunction3 result = new AstAnalyticWindowedFunction.AstAnalyticWindowedFunction3(arguments);
            return result;
        }
        
        /// <summary>
        /// analytic_windowed_function : 
        ///    percentil ( expression ) WITHIN GROUP ( order_by_clause ) OVER ( PARTITION BY expression_list ) 
        /// </summary>
        public static AstAnalyticWindowedFunction AnalyticWindowedFunction(AstPercentil percentil, AstExpression expression, AstOrderByClause orderByClause, AstExpressionList expressionList)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstAnalyticWindowedFunction.AstAnalyticWindowedFunction4 result = new AstAnalyticWindowedFunction.AstAnalyticWindowedFunction4(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// window_frame_extent
    /// 	 : window_frame_preceding
    /// 	 | BETWEEN  left = window_frame_bound  AND  right = window_frame_bound
    /// </summary>
    public abstract partial class AstWindowFrameExtent : AstRule
    {
        
        protected static string _rule = "window_frame_extent\r\n\t : window_frame_preceding\r\n\t | BETWEEN  left = window_frame" +
            "_bound  AND  right = window_frame_bound";
        
        /// <summary>
        /// window_frame_extent : window_frame_preceding
        /// </summary>
        public partial class AstWindowFrameExtent1 : AstWindowFrameExtent
        {
            
            internal AstWindowFrameExtent1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstWindowFrameExtent1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstWindowFrameExtent1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstWindowFrameExtent1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFrameExtent(this);
            }
        }
        /// <summary>
        /// window_frame_extent : BETWEEN  left = window_frame_bound  AND  right = window_frame_bound
        /// </summary>
        public partial class AstWindowFrameExtent2 : AstWindowFrameExtent
        {
            
            internal AstWindowFrameExtent2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstWindowFrameExtent2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstWindowFrameExtent2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstWindowFrameExtent2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFrameExtent(this);
            }
        }
        

        
        internal AstWindowFrameExtent(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstWindowFrameExtent(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWindowFrameExtent(Position p) : 
                base(p)
        {
        }
        
        internal AstWindowFrameExtent(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstWindowFrameExtent Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstWindowFrameExtent.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstWindowFrameBound), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstWindowFrameBound), false, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstWindowFramePreceding), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// window_frame_extent : 
        ///    window_frame_preceding 
        /// </summary>
        public static AstWindowFrameExtent WindowFrameExtent(AstWindowFramePreceding windowFramePreceding)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstWindowFrameExtent.AstWindowFrameExtent1 result = new AstWindowFrameExtent.AstWindowFrameExtent1(arguments);
            return result;
        }
        
        /// <summary>
        /// window_frame_extent : 
        ///    BETWEEN left=window_frame_bound AND right=window_frame_bound 
        /// </summary>
        public static AstWindowFrameExtent WindowFrameExtent(AstWindowFrameBound left, AstWindowFrameBound right)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstWindowFrameExtent.AstWindowFrameExtent2 result = new AstWindowFrameExtent.AstWindowFrameExtent2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// window_frame_bound
    /// 	 : window_frame_preceding
    /// 	 | window_frame_following
    /// </summary>
    public abstract partial class AstWindowFrameBound : AstRule
    {
        
        protected static string _rule = "window_frame_bound\r\n\t : window_frame_preceding\r\n\t | window_frame_following";
        
        /// <summary>
        /// window_frame_bound : window_frame_preceding
        /// </summary>
        public partial class AstWindowFrameBound1 : AstWindowFrameBound
        {
            
            internal AstWindowFrameBound1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstWindowFrameBound1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstWindowFrameBound1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstWindowFrameBound1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFrameBound(this);
            }
        }
        /// <summary>
        /// window_frame_bound : window_frame_following
        /// </summary>
        public partial class AstWindowFrameBound2 : AstWindowFrameBound
        {
            
            internal AstWindowFrameBound2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstWindowFrameBound2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstWindowFrameBound2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstWindowFrameBound2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFrameBound(this);
            }
        }
        

        
        internal AstWindowFrameBound(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstWindowFrameBound(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWindowFrameBound(Position p) : 
                base(p)
        {
        }
        
        internal AstWindowFrameBound(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstWindowFrameBound Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstWindowFrameBound.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstWindowFramePreceding), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstWindowFrameFollowing), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// window_frame_bound : 
        ///    window_frame_preceding 
        /// </summary>
        public static AstWindowFrameBound WindowFrameBound(AstWindowFramePreceding windowFramePreceding)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstWindowFrameBound.AstWindowFrameBound1 result = new AstWindowFrameBound.AstWindowFrameBound1(arguments);
            return result;
        }
        
        /// <summary>
        /// window_frame_bound : 
        ///    window_frame_following 
        /// </summary>
        public static AstWindowFrameBound WindowFrameBound(AstWindowFrameFollowing windowFrameFollowing)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstWindowFrameBound.AstWindowFrameBound2 result = new AstWindowFrameBound.AstWindowFrameBound2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// window_frame_preceding
    /// 	 : UNBOUNDED  PRECEDING
    /// 	 | decimal  PRECEDING
    /// 	 | CURRENT  ROW
    /// </summary>
    public abstract partial class AstWindowFramePreceding : AstWindowFrameBound
    {
        
        protected static string _rule = "window_frame_preceding\r\n\t : UNBOUNDED  PRECEDING\r\n\t | decimal  PRECEDING\r\n\t | CUR" +
            "RENT  ROW";
        
        /// <summary>
        /// window_frame_preceding : UNBOUNDED  PRECEDING
        /// </summary>
        public partial class AstWindowFramePreceding1 : AstWindowFramePreceding
        {
            
            internal AstWindowFramePreceding1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstWindowFramePreceding1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstWindowFramePreceding1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstWindowFramePreceding1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFramePreceding(this);
            }
        }
        /// <summary>
        /// window_frame_preceding : decimal  PRECEDING
        /// </summary>
        public partial class AstWindowFramePreceding2 : AstWindowFramePreceding
        {
            
            internal AstWindowFramePreceding2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstWindowFramePreceding2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstWindowFramePreceding2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstWindowFramePreceding2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFramePreceding(this);
            }
        }
        /// <summary>
        /// window_frame_preceding : CURRENT  ROW
        /// </summary>
        public partial class AstWindowFramePreceding3 : AstWindowFramePreceding
        {
            
            internal AstWindowFramePreceding3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstWindowFramePreceding3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstWindowFramePreceding3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstWindowFramePreceding3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFramePreceding(this);
            }
        }
        

        
        internal AstWindowFramePreceding(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstWindowFramePreceding(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWindowFramePreceding(Position p) : 
                base(p)
        {
        }
        
        internal AstWindowFramePreceding(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstWindowFramePreceding Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstWindowFramePreceding.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
            }
            if ((list.Count == 0))
            {
                return 1;
                return 3;
            }
            return 0;
        }
        
        /// <summary>
        /// window_frame_preceding : 
        ///    decimal PRECEDING 
        /// </summary>
        public static AstWindowFramePreceding WindowFramePreceding(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstWindowFramePreceding.AstWindowFramePreceding2 result = new AstWindowFramePreceding.AstWindowFramePreceding2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// window_frame_following
    /// 	 : UNBOUNDED  FOLLOWING
    /// 	 | decimal  FOLLOWING
    /// </summary>
    public abstract partial class AstWindowFrameFollowing : AstWindowFrameBound
    {
        
        protected static string _rule = "window_frame_following\r\n\t : UNBOUNDED  FOLLOWING\r\n\t | decimal  FOLLOWING";
        
        /// <summary>
        /// window_frame_following : UNBOUNDED  FOLLOWING
        /// </summary>
        public partial class AstWindowFrameFollowing1 : AstWindowFrameFollowing
        {
            
            internal AstWindowFrameFollowing1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstWindowFrameFollowing1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstWindowFrameFollowing1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstWindowFrameFollowing1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFrameFollowing(this);
            }
        }
        /// <summary>
        /// window_frame_following : decimal  FOLLOWING
        /// </summary>
        public partial class AstWindowFrameFollowing2 : AstWindowFrameFollowing
        {
            
            internal AstWindowFrameFollowing2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstWindowFrameFollowing2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstWindowFrameFollowing2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstWindowFrameFollowing2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFrameFollowing(this);
            }
        }
        

        
        internal AstWindowFrameFollowing(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstWindowFrameFollowing(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWindowFrameFollowing(Position p) : 
                base(p)
        {
        }
        
        internal AstWindowFrameFollowing(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstWindowFrameFollowing Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstWindowFrameFollowing.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
            }
            if ((list.Count == 0))
            {
                return 1;
            }
            return 0;
        }
        
        /// <summary>
        /// window_frame_following : 
        ///    decimal FOLLOWING 
        /// </summary>
        public static AstWindowFrameFollowing WindowFrameFollowing(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstWindowFrameFollowing.AstWindowFrameFollowing2 result = new AstWindowFrameFollowing.AstWindowFrameFollowing2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// create_database_option
    /// 	 : FILESTREAM  database_filestream_options
    /// 	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
    /// 	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
    /// 	 | NESTED_TRIGGERS  EQUAL  on_off
    /// 	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
    /// 	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal
    /// 	 | DB_CHAINING  on_off
    /// 	 | TRUSTWORTHY  on_off
    /// </summary>
    public abstract partial class AstCreateDatabaseOption : AstRule
    {
        
        protected static string _rule = @"create_database_option
	 : FILESTREAM  database_filestream_options
	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
	 | NESTED_TRIGGERS  EQUAL  on_off
	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal
	 | DB_CHAINING  on_off
	 | TRUSTWORTHY  on_off";
        
        /// <summary>
        /// create_database_option : FILESTREAM  database_filestream_options
        /// </summary>
        public partial class AstCreateDatabaseOption1 : AstCreateDatabaseOption
        {
            
            internal AstCreateDatabaseOption1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateDatabaseOption1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateDatabaseOption1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateDatabaseOption1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : DEFAULT_LANGUAGE  EQUAL  id_or_string
        /// </summary>
        public partial class AstCreateDatabaseOption2 : AstCreateDatabaseOption
        {
            
            internal AstCreateDatabaseOption2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateDatabaseOption2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateDatabaseOption2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateDatabaseOption2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
        /// </summary>
        public partial class AstCreateDatabaseOption3 : AstCreateDatabaseOption
        {
            
            internal AstCreateDatabaseOption3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateDatabaseOption3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateDatabaseOption3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateDatabaseOption3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : NESTED_TRIGGERS  EQUAL  on_off
        /// </summary>
        public partial class AstCreateDatabaseOption4 : AstCreateDatabaseOption
        {
            
            internal AstCreateDatabaseOption4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateDatabaseOption4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateDatabaseOption4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateDatabaseOption4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : TRANSFORM_NOISE_WORDS  EQUAL  on_off
        /// </summary>
        public partial class AstCreateDatabaseOption5 : AstCreateDatabaseOption
        {
            
            internal AstCreateDatabaseOption5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateDatabaseOption5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateDatabaseOption5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateDatabaseOption5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal
        /// </summary>
        public partial class AstCreateDatabaseOption6 : AstCreateDatabaseOption
        {
            
            internal AstCreateDatabaseOption6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateDatabaseOption6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateDatabaseOption6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateDatabaseOption6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : DB_CHAINING  on_off
        /// </summary>
        public partial class AstCreateDatabaseOption7 : AstCreateDatabaseOption
        {
            
            internal AstCreateDatabaseOption7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateDatabaseOption7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateDatabaseOption7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateDatabaseOption7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : TRUSTWORTHY  on_off
        /// </summary>
        public partial class AstCreateDatabaseOption8 : AstCreateDatabaseOption
        {
            
            internal AstCreateDatabaseOption8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCreateDatabaseOption8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCreateDatabaseOption8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCreateDatabaseOption8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        

        
        internal AstCreateDatabaseOption(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCreateDatabaseOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateDatabaseOption(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateDatabaseOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateDatabaseOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateDatabaseOption.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDatabaseFilestreamOptions), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstIdOrString), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstIdOrString), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 8;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_database_option : 
        ///    FILESTREAM database_filestream_options 
        /// </summary>
        public static AstCreateDatabaseOption CreateDatabaseOption(AstDatabaseFilestreamOptions databaseFilestreamOptions)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateDatabaseOption.AstCreateDatabaseOption1 result = new AstCreateDatabaseOption.AstCreateDatabaseOption1(arguments);
            return result;
        }
        
        /// <summary>
        /// create_database_option : 
        ///    DEFAULT_LANGUAGE EQUAL id_or_string 
        /// </summary>
        public static AstCreateDatabaseOption CreateDatabaseOption(AstIdOrString idOrString)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateDatabaseOption.AstCreateDatabaseOption2 result = new AstCreateDatabaseOption.AstCreateDatabaseOption2(arguments);
            return result;
        }
        
        /// <summary>
        /// create_database_option : 
        ///    NESTED_TRIGGERS EQUAL on_off 
        /// </summary>
        public static AstCreateDatabaseOption CreateDatabaseOption(AstOnOff onOff)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateDatabaseOption.AstCreateDatabaseOption4 result = new AstCreateDatabaseOption.AstCreateDatabaseOption4(arguments);
            return result;
        }
        
        /// <summary>
        /// create_database_option : 
        ///    TWO_DIGIT_YEAR_CUTOFF EQUAL decimal 
        /// </summary>
        public static AstCreateDatabaseOption CreateDatabaseOption(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstCreateDatabaseOption.AstCreateDatabaseOption6 result = new AstCreateDatabaseOption.AstCreateDatabaseOption6(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// database_filestream_option
    /// 	 : LR_BRACKET  ((NON_TRANSACTED_ACCESS  EQUAL  off_read_only_full) | (DIRECTORY_NAME  EQUAL  stringtext))  RR_BRACKET
    /// </summary>
    public partial class AstDatabaseFilestreamOption : AstRule
    {
        
        protected static string _rule = "database_filestream_option\r\n\t : LR_BRACKET  ((NON_TRANSACTED_ACCESS  EQUAL  off_r" +
            "ead_only_full) | (DIRECTORY_NAME  EQUAL  stringtext))  RR_BRACKET";
        
        internal AstDatabaseFilestreamOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstDatabaseFilestreamOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDatabaseFilestreamOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDatabaseFilestreamOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseFilestreamOption(this);
        }
        
        /// <summary>
        /// database_filestream_option : 
        ///    ( NON_TRANSACTED_ACCESS EQUAL off_read_only_full ) 
        /// </summary>
        public static AstDatabaseFilestreamOption DatabaseFilestreamOption(AstOffReadOnlyFull offReadOnlyFull)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseFilestreamOption result = new AstDatabaseFilestreamOption(arguments);
            return result;
        }
        
        /// <summary>
        /// database_filestream_option : 
        ///    ( DIRECTORY_NAME EQUAL stringtext ) 
        /// </summary>
        public static AstDatabaseFilestreamOption DatabaseFilestreamOption(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseFilestreamOption result = new AstDatabaseFilestreamOption(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// database_file_spec
    /// 	 : file_group
    /// 	 | file_spec
    /// </summary>
    public abstract partial class AstDatabaseFileSpec : AstRule
    {
        
        protected static string _rule = "database_file_spec\r\n\t : file_group\r\n\t | file_spec";
        
        /// <summary>
        /// database_file_spec : file_group
        /// </summary>
        public partial class AstDatabaseFileSpec1 : AstDatabaseFileSpec
        {
            
            internal AstDatabaseFileSpec1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseFileSpec1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseFileSpec1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseFileSpec1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseFileSpec(this);
            }
        }
        /// <summary>
        /// database_file_spec : file_spec
        /// </summary>
        public partial class AstDatabaseFileSpec2 : AstDatabaseFileSpec
        {
            
            internal AstDatabaseFileSpec2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDatabaseFileSpec2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDatabaseFileSpec2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDatabaseFileSpec2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseFileSpec(this);
            }
        }
        

        
        internal AstDatabaseFileSpec(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstDatabaseFileSpec(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDatabaseFileSpec(Position p) : 
                base(p)
        {
        }
        
        internal AstDatabaseFileSpec(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDatabaseFileSpec Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDatabaseFileSpec.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstFileGroup), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstFileSpec), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// database_file_spec : 
        ///    file_group 
        /// </summary>
        public static AstDatabaseFileSpec DatabaseFileSpec(AstFileGroup fileGroup)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseFileSpec.AstDatabaseFileSpec1 result = new AstDatabaseFileSpec.AstDatabaseFileSpec1(arguments);
            return result;
        }
        
        /// <summary>
        /// database_file_spec : 
        ///    file_spec 
        /// </summary>
        public static AstDatabaseFileSpec DatabaseFileSpec(AstFileSpec fileSpec)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDatabaseFileSpec.AstDatabaseFileSpec2 result = new AstDatabaseFileSpec.AstDatabaseFileSpec2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// max_size
    /// 	 : file_size
    /// 	 | UNLIMITED
    /// </summary>
    public abstract partial class AstMaxSize : AstRule
    {
        
        protected static string _rule = "max_size\r\n\t : file_size\r\n\t | UNLIMITED";
        
        /// <summary>
        /// max_size : file_size
        /// </summary>
        public partial class AstMaxSize1 : AstMaxSize
        {
            
            internal AstMaxSize1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstMaxSize1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstMaxSize1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstMaxSize1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMaxSize(this);
            }
        }
        /// <summary>
        /// max_size : UNLIMITED
        /// </summary>
        public partial class AstMaxSize2 : AstMaxSize
        {
            
            internal AstMaxSize2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstMaxSize2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstMaxSize2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstMaxSize2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMaxSize(this);
            }
        }
        

        
        internal AstMaxSize(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstMaxSize(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstMaxSize(Position p) : 
                base(p)
        {
        }
        
        internal AstMaxSize(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstMaxSize Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstMaxSize.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstFileSize), false, false))
                {
                    return 1;
                }
            }
            if ((list.Count == 0))
            {
                return 2;
            }
            return 0;
        }
        
        /// <summary>
        /// max_size : 
        ///    file_size 
        /// </summary>
        public static AstMaxSize MaxSize(AstFileSize fileSize)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstMaxSize.AstMaxSize1 result = new AstMaxSize.AstMaxSize1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// null_or_default
    /// 	 : (null_notnull | DEFAULT  constant_expression  (COLLATE  id_)?  (WITH  VALUES)?)
    /// </summary>
    public partial class AstNullOrDefault : AstRule
    {
        
        protected static string _rule = "null_or_default\r\n\t : (null_notnull | DEFAULT  constant_expression  (COLLATE  id_)" +
            "?  (WITH  VALUES)?)";
        
        internal AstNullOrDefault(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstNullOrDefault(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstNullOrDefault(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstNullOrDefault(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNullOrDefault(this);
        }
        
        /// <summary>
        /// null_or_default : 
        ///    null_notnull 
        /// </summary>
        public static AstNullOrDefault NullOrDefault(AstNullNotnull nullNotnull)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstNullOrDefault result = new AstNullOrDefault(arguments);
            return result;
        }
        
        /// <summary>
        /// null_or_default : 
        ///    DEFAULT constant_expression COLLATE id_ WITH VALUES 
        /// </summary>
        public static AstNullOrDefault NullOrDefault(AstConstantExpression constantExpression, AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstNullOrDefault result = new AstNullOrDefault(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// scalar_function_name
    /// 	 : func_proc_name_server_database_schema
    /// 	 | scalar_function_name_enum
    /// </summary>
    public abstract partial class AstScalarFunctionName : AstRule
    {
        
        protected static string _rule = "scalar_function_name\r\n\t : func_proc_name_server_database_schema\r\n\t | scalar_funct" +
            "ion_name_enum";
        
        /// <summary>
        /// scalar_function_name : func_proc_name_server_database_schema
        /// </summary>
        public partial class AstScalarFunctionName1 : AstScalarFunctionName
        {
            
            internal AstScalarFunctionName1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstScalarFunctionName1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstScalarFunctionName1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstScalarFunctionName1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitScalarFunctionName(this);
            }
        }
        /// <summary>
        /// scalar_function_name : scalar_function_name_enum
        /// </summary>
        public partial class AstScalarFunctionName2 : AstScalarFunctionName
        {
            
            internal AstScalarFunctionName2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstScalarFunctionName2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstScalarFunctionName2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstScalarFunctionName2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitScalarFunctionName(this);
            }
        }
        

        
        internal AstScalarFunctionName(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstScalarFunctionName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstScalarFunctionName(Position p) : 
                base(p)
        {
        }
        
        internal AstScalarFunctionName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstScalarFunctionName Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstScalarFunctionName.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstFuncProcNameServerDatabaseSchema), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstScalarFunctionNameEnum), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// scalar_function_name : 
        ///    func_proc_name_server_database_schema 
        /// </summary>
        public static AstScalarFunctionName ScalarFunctionName(AstFuncProcNameServerDatabaseSchema funcProcNameServerDatabaseSchema)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstScalarFunctionName.AstScalarFunctionName1 result = new AstScalarFunctionName.AstScalarFunctionName1(arguments);
            return result;
        }
        
        /// <summary>
        /// scalar_function_name : 
        ///    scalar_function_name_enum 
        /// </summary>
        public static AstScalarFunctionName ScalarFunctionName(AstScalarFunctionNameEnum scalarFunctionNameEnum)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstScalarFunctionName.AstScalarFunctionName2 result = new AstScalarFunctionName.AstScalarFunctionName2(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// contract_name_expression
    /// 	 : (id_ | expression)
    /// </summary>
    public partial class AstContractNameExpression : AstRule
    {
        
        protected static string _rule = "contract_name_expression\r\n\t : (id_ | expression)";
        
        internal AstContractNameExpression(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstContractNameExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstContractNameExpression(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstContractNameExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContractNameExpression(this);
        }
        
        /// <summary>
        /// contract_name_expression : 
        ///    id_ 
        /// </summary>
        public static AstContractNameExpression ContractNameExpression(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstContractNameExpression result = new AstContractNameExpression(arguments);
            return result;
        }
        
        /// <summary>
        /// contract_name_expression : 
        ///    expression 
        /// </summary>
        public static AstContractNameExpression ContractNameExpression(AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstContractNameExpression result = new AstContractNameExpression(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// service_name
    /// 	 : (id_ | expression)
    /// </summary>
    public partial class AstServiceName : AstRule
    {
        
        protected static string _rule = "service_name\r\n\t : (id_ | expression)";
        
        internal AstServiceName(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstServiceName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstServiceName(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstServiceName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServiceName(this);
        }
        
        /// <summary>
        /// service_name : 
        ///    id_ 
        /// </summary>
        public static AstServiceName ServiceName(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServiceName result = new AstServiceName(arguments);
            return result;
        }
        
        /// <summary>
        /// service_name : 
        ///    expression 
        /// </summary>
        public static AstServiceName ServiceName(AstExpression expression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstServiceName result = new AstServiceName(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// end_conversation
    /// 	 : END  CONVERSATION  conversation_handle = local_id  SEMI?  (WITH  (ERROR  EQUAL  faliure_code = string_local_id  DESCRIPTION  EQUAL  failure_text = string_local_id)?  CLEANUP?)?
    /// </summary>
    public partial class AstEndConversation : AstConversationStatement
    {
        
        protected static string _rule = "end_conversation\r\n\t : END  CONVERSATION  conversation_handle = local_id  SEMI?  (" +
            "WITH  (ERROR  EQUAL  faliure_code = string_local_id  DESCRIPTION  EQUAL  failure" +
            "_text = string_local_id)?  CLEANUP?)?";
        
        internal AstEndConversation(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstEndConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstEndConversation(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstEndConversation(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEndConversation(this);
        }
        
        /// <summary>
        /// end_conversation : 
        ///    END CONVERSATION conversation_handle=local_id SEMI? WITH ERROR EQUAL faliure_code=string_local_id DESCRIPTION EQUAL failure_text=string_local_id CLEANUP? 
        /// </summary>
        public static AstEndConversation EndConversation(AstLocalId conversationHandle, AstStringLocalId faliureCode, AstStringLocalId failureText)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstEndConversation result = new AstEndConversation(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// get_conversation
    /// 	 : GET  CONVERSATION  GROUP  conversation_group = string_local_id  FROM  queue = database_schema_queue_ref  SEMI?
    /// </summary>
    public partial class AstGetConversation : AstConversationStatement
    {
        
        protected static string _rule = "get_conversation\r\n\t : GET  CONVERSATION  GROUP  conversation_group = string_local" +
            "_id  FROM  queue = database_schema_queue_ref  SEMI?";
        
        internal AstGetConversation(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstGetConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstGetConversation(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstGetConversation(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGetConversation(this);
        }
        
        /// <summary>
        /// get_conversation : 
        ///    GET CONVERSATION GROUP conversation_group=string_local_id FROM queue=database_schema_queue_ref SEMI? 
        /// </summary>
        public static AstGetConversation GetConversation(AstStringLocalId conversationGroup, AstDatabaseSchemaQueueRef queue)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstGetConversation result = new AstGetConversation(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// send_conversation
    /// 	 : SEND  ON  CONVERSATION  conversation_handle = string_local_id  MESSAGE  TYPE  messageTypeName = expression  (LR_BRACKET  messageBodyEexpression = string_local_id  RR_BRACKET)?  SEMI?
    /// </summary>
    public partial class AstSendConversation : AstConversationStatement
    {
        
        protected static string _rule = "send_conversation\r\n\t : SEND  ON  CONVERSATION  conversation_handle = string_local" +
            "_id  MESSAGE  TYPE  messageTypeName = expression  (LR_BRACKET  messageBodyEexpre" +
            "ssion = string_local_id  RR_BRACKET)?  SEMI?";
        
        internal AstSendConversation(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstSendConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSendConversation(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSendConversation(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSendConversation(this);
        }
        
        /// <summary>
        /// send_conversation : 
        ///    SEND ON CONVERSATION conversation_handle=string_local_id MESSAGE TYPE messageTypeName=expression ( messageBodyEexpression=string_local_id ) SEMI? 
        /// </summary>
        public static AstSendConversation SendConversation(AstStringLocalId conversationHandle, AstExpression messageTypeName, AstStringLocalId messageBodyEexpression)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSendConversation result = new AstSendConversation(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// data_type
    /// 	 : scaled = data_type_scaled  LR_BRACKET  MAX  RR_BRACKET
    /// 	 | ext_type_id  LR_BRACKET  decimal_scale_prec  RR_BRACKET
    /// 	 | ext_type_id  LR_BRACKET  scale = decimal  RR_BRACKET
    /// 	 | ext_type_id  IDENTITY  (LR_BRACKET  identity_seed  RR_BRACKET)?
    /// 	 | double_prec = DOUBLE  PRECISION?
    /// 	 | unscaled_type_id
    /// </summary>
    public abstract partial class AstDataType : AstRule
    {
        
        protected static string _rule = @"data_type
	 : scaled = data_type_scaled  LR_BRACKET  MAX  RR_BRACKET
	 | ext_type_id  LR_BRACKET  decimal_scale_prec  RR_BRACKET
	 | ext_type_id  LR_BRACKET  scale = decimal  RR_BRACKET
	 | ext_type_id  IDENTITY  (LR_BRACKET  identity_seed  RR_BRACKET)?
	 | double_prec = DOUBLE  PRECISION?
	 | unscaled_type_id";
        
        /// <summary>
        /// data_type : scaled = data_type_scaled  LR_BRACKET  MAX  RR_BRACKET
        /// </summary>
        public partial class AstDataType1 : AstDataType
        {
            
            internal AstDataType1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDataType1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDataType1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDataType1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDataType(this);
            }
        }
        /// <summary>
        /// data_type : ext_type_id  LR_BRACKET  decimal_scale_prec  RR_BRACKET
        /// </summary>
        public partial class AstDataType2 : AstDataType
        {
            
            internal AstDataType2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDataType2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDataType2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDataType2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDataType(this);
            }
        }
        /// <summary>
        /// data_type : ext_type_id  LR_BRACKET  scale = decimal  RR_BRACKET
        /// </summary>
        public partial class AstDataType3 : AstDataType
        {
            
            internal AstDataType3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDataType3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDataType3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDataType3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDataType(this);
            }
        }
        /// <summary>
        /// data_type : ext_type_id  IDENTITY  (LR_BRACKET  identity_seed  RR_BRACKET)?
        /// </summary>
        public partial class AstDataType4 : AstDataType
        {
            
            internal AstDataType4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDataType4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDataType4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDataType4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDataType(this);
            }
        }
        /// <summary>
        /// data_type : double_prec = DOUBLE  PRECISION?
        /// </summary>
        public partial class AstDataType5 : AstDataType
        {
            
            internal AstDataType5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDataType5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDataType5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDataType5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDataType(this);
            }
        }
        /// <summary>
        /// data_type : unscaled_type_id
        /// </summary>
        public partial class AstDataType6 : AstDataType
        {
            
            internal AstDataType6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDataType6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDataType6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDataType6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDataType(this);
            }
        }
        

        
        internal AstDataType(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstDataType(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDataType(Position p) : 
                base(p)
        {
        }
        
        internal AstDataType(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDataType Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDataType.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstExtTypeId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimalScalePrec), false, false))
                    {
                        return 2;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExtTypeId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimal), false, false))
                    {
                        return 3;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExtTypeId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstIdentitySeed), false, false))
                    {
                        return 4;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDataTypeScaled), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstUnscaledTypeId), false, false))
                {
                    return 6;
                }
            }
            if ((list.Count == 0))
            {
                return 5;
            }
            return 0;
        }
        
        /// <summary>
        /// data_type : 
        ///    scaled=data_type_scaled ( MAX ) 
        /// </summary>
        public static AstDataType DataType(AstDataTypeScaled scaled)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDataType.AstDataType1 result = new AstDataType.AstDataType1(arguments);
            return result;
        }
        
        /// <summary>
        /// data_type : 
        ///    ext_type_id ( decimal_scale_prec ) 
        /// </summary>
        public static AstDataType DataType(AstExtTypeId extTypeId, AstDecimalScalePrec decimalScalePrec)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDataType.AstDataType2 result = new AstDataType.AstDataType2(arguments);
            return result;
        }
        
        /// <summary>
        /// data_type : 
        ///    ext_type_id ( scale=decimal ) 
        /// </summary>
        public static AstDataType DataType(AstExtTypeId extTypeId, AstDecimal scale)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDataType.AstDataType3 result = new AstDataType.AstDataType3(arguments);
            return result;
        }
        
        /// <summary>
        /// data_type : 
        ///    ext_type_id IDENTITY ( identity_seed ) 
        /// </summary>
        public static AstDataType DataType(AstExtTypeId extTypeId, AstIdentitySeed identitySeed)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDataType.AstDataType4 result = new AstDataType.AstDataType4(arguments);
            return result;
        }
        
        /// <summary>
        /// data_type : 
        ///    unscaled_type_id 
        /// </summary>
        public static AstDataType DataType(AstUnscaledTypeId unscaledTypeId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDataType.AstDataType6 result = new AstDataType.AstDataType6(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// default_value
    /// 	 : NULL_
    /// 	 | DEFAULT
    /// 	 | constant
    /// </summary>
    public abstract partial class AstDefaultValue : AstRule
    {
        
        protected static string _rule = "default_value\r\n\t : NULL_\r\n\t | DEFAULT\r\n\t | constant";
        
        /// <summary>
        /// default_value : NULL_
        /// </summary>
        public partial class AstDefaultValue1 : AstDefaultValue
        {
            
            internal AstDefaultValue1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDefaultValue1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDefaultValue1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDefaultValue1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDefaultValue(this);
            }
        }
        /// <summary>
        /// default_value : DEFAULT
        /// </summary>
        public partial class AstDefaultValue2 : AstDefaultValue
        {
            
            internal AstDefaultValue2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDefaultValue2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDefaultValue2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDefaultValue2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDefaultValue(this);
            }
        }
        /// <summary>
        /// default_value : constant
        /// </summary>
        public partial class AstDefaultValue3 : AstDefaultValue
        {
            
            internal AstDefaultValue3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDefaultValue3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDefaultValue3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDefaultValue3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDefaultValue(this);
            }
        }
        

        
        internal AstDefaultValue(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstDefaultValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDefaultValue(Position p) : 
                base(p)
        {
        }
        
        internal AstDefaultValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDefaultValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDefaultValue.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstConstant), false, false))
                {
                    return 3;
                }
            }
            if ((list.Count == 0))
            {
                return 1;
                return 2;
            }
            return 0;
        }
        
        /// <summary>
        /// default_value : 
        ///    constant 
        /// </summary>
        public static AstDefaultValue DefaultValue(AstConstant constant)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDefaultValue.AstDefaultValue3 result = new AstDefaultValue.AstDefaultValue3(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// constant
    /// 	 : stringtext
    /// 	 | binary_
    /// 	 | sign?  decimal
    /// 	 | sign?  (real | float)
    /// 	 | sign?  dollar = DOLLAR  (decimal | float)
    /// 	 | parameter
    /// </summary>
    public abstract partial class AstConstant : AstRule
    {
        
        protected static string _rule = "constant\r\n\t : stringtext\r\n\t | binary_\r\n\t | sign?  decimal\r\n\t | sign?  (real | flo" +
            "at)\r\n\t | sign?  dollar = DOLLAR  (decimal | float)\r\n\t | parameter";
        
        /// <summary>
        /// constant : stringtext
        /// </summary>
        public partial class AstConstant1 : AstConstant
        {
            
            internal AstConstant1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConstant1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConstant1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConstant1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstant(this);
            }
        }
        /// <summary>
        /// constant : binary_
        /// </summary>
        public partial class AstConstant2 : AstConstant
        {
            
            internal AstConstant2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConstant2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConstant2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConstant2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstant(this);
            }
        }
        /// <summary>
        /// constant : sign?  decimal
        /// </summary>
        public partial class AstConstant3 : AstConstant
        {
            
            internal AstConstant3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConstant3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConstant3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConstant3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstant(this);
            }
        }
        /// <summary>
        /// constant : sign?  (real | float)
        /// </summary>
        public partial class AstConstant4 : AstConstant
        {
            
            internal AstConstant4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConstant4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConstant4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConstant4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstant(this);
            }
        }
        /// <summary>
        /// constant : sign?  dollar = DOLLAR  (decimal | float)
        /// </summary>
        public partial class AstConstant5 : AstConstant
        {
            
            internal AstConstant5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConstant5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConstant5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConstant5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstant(this);
            }
        }
        /// <summary>
        /// constant : parameter
        /// </summary>
        public partial class AstConstant6 : AstConstant
        {
            
            internal AstConstant6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstConstant6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstConstant6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstConstant6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstant(this);
            }
        }
        

        
        internal AstConstant(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstConstant(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstConstant(Position p) : 
                base(p)
        {
        }
        
        internal AstConstant(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstConstant Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstConstant.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstSign), true, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstReal), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstFloat), false, false))
                        {
                            return 4;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstSign), true, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimal), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstFloat), false, false))
                        {
                            return 5;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstSign), true, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimal), false, false))
                    {
                        return 3;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstBinary), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstParameter), false, false))
                {
                    return 6;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// constant : 
        ///    stringtext 
        /// </summary>
        public static AstConstant Constant(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstant.AstConstant1 result = new AstConstant.AstConstant1(arguments);
            return result;
        }
        
        /// <summary>
        /// constant : 
        ///    binary_ 
        /// </summary>
        public static AstConstant Constant(AstBinary binary)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstant.AstConstant2 result = new AstConstant.AstConstant2(arguments);
            return result;
        }
        
        /// <summary>
        /// constant : 
        ///    sign? decimal 
        /// </summary>
        public static AstConstant Constant(AstSign sign, AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstant.AstConstant3 result = new AstConstant.AstConstant3(arguments);
            return result;
        }
        
        /// <summary>
        /// constant : 
        ///    sign? real 
        /// </summary>
        public static AstConstant Constant(AstSign sign, AstReal real)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstant.AstConstant4 result = new AstConstant.AstConstant4(arguments);
            return result;
        }
        
        /// <summary>
        /// constant : 
        ///    sign? float 
        /// </summary>
        public static AstConstant Constant(AstSign sign, AstFloat @float)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstant.AstConstant4 result = new AstConstant.AstConstant4(arguments);
            return result;
        }
        
        /// <summary>
        /// constant : 
        ///    parameter 
        /// </summary>
        public static AstConstant Constant(AstParameter parameter)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstConstant.AstConstant6 result = new AstConstant.AstConstant6(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// string_id2
    /// 	 : stringtext
    /// 	 | id_
    /// 	 | local_id
    /// </summary>
    public abstract partial class AstStringId2 : AstRule
    {
        
        protected static string _rule = "string_id2\r\n\t : stringtext\r\n\t | id_\r\n\t | local_id";
        
        /// <summary>
        /// string_id2 : stringtext
        /// </summary>
        public partial class AstStringId21 : AstStringId2
        {
            
            internal AstStringId21(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstStringId21(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstStringId21(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstStringId21(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringId2(this);
            }
        }
        /// <summary>
        /// string_id2 : id_
        /// </summary>
        public partial class AstStringId22 : AstStringId2
        {
            
            internal AstStringId22(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstStringId22(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstStringId22(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstStringId22(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringId2(this);
            }
        }
        /// <summary>
        /// string_id2 : local_id
        /// </summary>
        public partial class AstStringId23 : AstStringId2
        {
            
            internal AstStringId23(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstStringId23(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstStringId23(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstStringId23(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringId2(this);
            }
        }
        

        
        internal AstStringId2(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstStringId2(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstStringId2(Position p) : 
                base(p)
        {
        }
        
        internal AstStringId2(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstStringId2 Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstStringId2.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// string_id2 : 
        ///    stringtext 
        /// </summary>
        public static AstStringId2 StringId2(AstStringtext stringtext)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstStringId2.AstStringId21 result = new AstStringId2.AstStringId21(arguments);
            return result;
        }
        
        /// <summary>
        /// string_id2 : 
        ///    id_ 
        /// </summary>
        public static AstStringId2 StringId2(AstId id)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstStringId2.AstStringId22 result = new AstStringId2.AstStringId22(arguments);
            return result;
        }
        
        /// <summary>
        /// string_id2 : 
        ///    local_id 
        /// </summary>
        public static AstStringId2 StringId2(AstLocalId localId)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstStringId2.AstStringId23 result = new AstStringId2.AstStringId23(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// all_server_database
    /// 	 : ALL  SERVER
    /// 	 | DATABASE
    /// </summary>
    public abstract partial class AstAllServerDatabase : AstRule
    {
        
        protected static string _rule = "all_server_database\r\n\t : ALL  SERVER\r\n\t | DATABASE";
        
        /// <summary>
        /// all_server_database : ALL  SERVER
        /// </summary>
        public partial class AstAllServerDatabase1 : AstAllServerDatabase
        {
            
            internal AstAllServerDatabase1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAllServerDatabase1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAllServerDatabase1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAllServerDatabase1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAllServerDatabase(this);
            }
        }
        /// <summary>
        /// all_server_database : DATABASE
        /// </summary>
        public partial class AstAllServerDatabase2 : AstAllServerDatabase
        {
            
            internal AstAllServerDatabase2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAllServerDatabase2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAllServerDatabase2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAllServerDatabase2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAllServerDatabase(this);
            }
        }
        

        
        internal AstAllServerDatabase(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAllServerDatabase(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAllServerDatabase(Position p) : 
                base(p)
        {
        }
        
        internal AstAllServerDatabase(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAllServerDatabase Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAllServerDatabase.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 0))
            {
                return 1;
                return 2;
            }
            return 0;
        }
    }
    
    /// <summary>
    /// encryption_state
    /// 	 : ENCRYPTION  EQUAL  (DISABLED | SUPPORTED | REQUIRED)
    /// </summary>
    public partial class AstEncryptionState : AstRule
    {
        
        protected static string _rule = "encryption_state\r\n\t : ENCRYPTION  EQUAL  (DISABLED | SUPPORTED | REQUIRED)";
        
        internal AstEncryptionState(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstEncryptionState(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstEncryptionState(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstEncryptionState(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEncryptionState(this);
        }
    }
    
    /// <summary>
    /// parameterization_option
    /// 	 : PARAMETERIZATION  (SIMPLE | FORCED)
    /// </summary>
    public partial class AstParameterizationOption : AstRule
    {
        
        protected static string _rule = "parameterization_option\r\n\t : PARAMETERIZATION  (SIMPLE | FORCED)";
        
        internal AstParameterizationOption(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstParameterizationOption(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstParameterizationOption(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstParameterizationOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitParameterizationOption(this);
        }
    }
    
    /// <summary>
    /// event_session_predicate_leaf_ope
    /// 	 : EQUAL
    /// 	 | (LESS  GREATER)
    /// 	 | (EXCLAMATION  EQUAL)
    /// 	 | GREATER
    /// 	 | (GREATER  EQUAL)
    /// 	 | LESS
    /// 	 | LESS  EQUAL
    /// </summary>
    public abstract partial class AstEventSessionPredicateLeafOpe : AstRule
    {
        
        protected static string _rule = "event_session_predicate_leaf_ope\r\n\t : EQUAL\r\n\t | (LESS  GREATER)\r\n\t | (EXCLAMATIO" +
            "N  EQUAL)\r\n\t | GREATER\r\n\t | (GREATER  EQUAL)\r\n\t | LESS\r\n\t | LESS  EQUAL";
        
        /// <summary>
        /// event_session_predicate_leaf_ope : EQUAL
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe1 : AstEventSessionPredicateLeafOpe
        {
            
            internal AstEventSessionPredicateLeafOpe1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf_ope : (LESS  GREATER)
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe2 : AstEventSessionPredicateLeafOpe
        {
            
            internal AstEventSessionPredicateLeafOpe2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf_ope : (EXCLAMATION  EQUAL)
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe3 : AstEventSessionPredicateLeafOpe
        {
            
            internal AstEventSessionPredicateLeafOpe3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf_ope : GREATER
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe4 : AstEventSessionPredicateLeafOpe
        {
            
            internal AstEventSessionPredicateLeafOpe4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf_ope : (GREATER  EQUAL)
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe5 : AstEventSessionPredicateLeafOpe
        {
            
            internal AstEventSessionPredicateLeafOpe5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf_ope : LESS
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe6 : AstEventSessionPredicateLeafOpe
        {
            
            internal AstEventSessionPredicateLeafOpe6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf_ope : LESS  EQUAL
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe7 : AstEventSessionPredicateLeafOpe
        {
            
            internal AstEventSessionPredicateLeafOpe7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstEventSessionPredicateLeafOpe7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        

        
        internal AstEventSessionPredicateLeafOpe(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstEventSessionPredicateLeafOpe(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEventSessionPredicateLeafOpe(Position p) : 
                base(p)
        {
        }
        
        internal AstEventSessionPredicateLeafOpe(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstEventSessionPredicateLeafOpe Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstEventSessionPredicateLeafOpe.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 0))
            {
                return 1;
                return 2;
                return 3;
                return 4;
                return 5;
                return 6;
                return 7;
            }
            return 0;
        }
    }
    
    /// <summary>
    /// cycle
    /// 	 : CYCLE
    /// 	 | NO  CYCLE
    /// </summary>
    public abstract partial class AstCycle : AstRule
    {
        
        protected static string _rule = "cycle\r\n\t : CYCLE\r\n\t | NO  CYCLE";
        
        /// <summary>
        /// cycle : CYCLE
        /// </summary>
        public partial class AstCycle1 : AstCycle
        {
            
            internal AstCycle1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCycle1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCycle1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCycle1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCycle(this);
            }
        }
        /// <summary>
        /// cycle : NO  CYCLE
        /// </summary>
        public partial class AstCycle2 : AstCycle
        {
            
            internal AstCycle2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstCycle2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstCycle2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstCycle2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCycle(this);
            }
        }
        

        
        internal AstCycle(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstCycle(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCycle(Position p) : 
                base(p)
        {
        }
        
        internal AstCycle(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCycle Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCycle.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 0))
            {
                return 1;
                return 2;
            }
            return 0;
        }
    }
    
    /// <summary>
    /// size_value
    /// 	 : decimal  MB
    /// 	 | DEFAULT
    /// </summary>
    public abstract partial class AstSizeValue : AstRule
    {
        
        protected static string _rule = "size_value\r\n\t : decimal  MB\r\n\t | DEFAULT";
        
        /// <summary>
        /// size_value : decimal  MB
        /// </summary>
        public partial class AstSizeValue1 : AstSizeValue
        {
            
            internal AstSizeValue1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSizeValue1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSizeValue1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSizeValue1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSizeValue(this);
            }
        }
        /// <summary>
        /// size_value : DEFAULT
        /// </summary>
        public partial class AstSizeValue2 : AstSizeValue
        {
            
            internal AstSizeValue2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstSizeValue2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstSizeValue2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstSizeValue2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSizeValue(this);
            }
        }
        

        
        internal AstSizeValue(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstSizeValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSizeValue(Position p) : 
                base(p)
        {
        }
        
        internal AstSizeValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSizeValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSizeValue.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
            }
            if ((list.Count == 0))
            {
                return 2;
            }
            return 0;
        }
        
        /// <summary>
        /// size_value : 
        ///    decimal MB 
        /// </summary>
        public static AstSizeValue SizeValue(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstSizeValue.AstSizeValue1 result = new AstSizeValue.AstSizeValue1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// decimal_default
    /// 	 : decimal
    /// 	 | DEFAULT
    /// </summary>
    public abstract partial class AstDecimalDefault : AstRule
    {
        
        protected static string _rule = "decimal_default\r\n\t : decimal\r\n\t | DEFAULT";
        
        /// <summary>
        /// decimal_default : decimal
        /// </summary>
        public partial class AstDecimalDefault1 : AstDecimalDefault
        {
            
            internal AstDecimalDefault1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDecimalDefault1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDecimalDefault1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDecimalDefault1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecimalDefault(this);
            }
        }
        /// <summary>
        /// decimal_default : DEFAULT
        /// </summary>
        public partial class AstDecimalDefault2 : AstDecimalDefault
        {
            
            internal AstDecimalDefault2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstDecimalDefault2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstDecimalDefault2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstDecimalDefault2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecimalDefault(this);
            }
        }
        

        
        internal AstDecimalDefault(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstDecimalDefault(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDecimalDefault(Position p) : 
                base(p)
        {
        }
        
        internal AstDecimalDefault(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDecimalDefault Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDecimalDefault.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
            }
            if ((list.Count == 0))
            {
                return 2;
            }
            return 0;
        }
        
        /// <summary>
        /// decimal_default : 
        ///    decimal 
        /// </summary>
        public static AstDecimalDefault DecimalDefault(AstDecimal @decimal)
        {
            List<AstRoot> arguments = new List<AstRoot>();
            AstDecimalDefault.AstDecimalDefault1 result = new AstDecimalDefault.AstDecimalDefault1(arguments);
            return result;
        }
    }
    
    /// <summary>
    /// on_delete
    /// 	 : ON  DELETE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)
    /// </summary>
    public partial class AstOnDelete : AstConstraintDeleteOrUpdate
    {
        
        protected static string _rule = "on_delete\r\n\t : ON  DELETE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)";
        
        internal AstOnDelete(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstOnDelete(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstOnDelete(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstOnDelete(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnDelete(this);
        }
    }
    
    /// <summary>
    /// on_update
    /// 	 : ON  UPDATE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)
    /// </summary>
    public partial class AstOnUpdate : AstConstraintDeleteOrUpdate
    {
        
        protected static string _rule = "on_update\r\n\t : ON  UPDATE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)";
        
        internal AstOnUpdate(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstOnUpdate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstOnUpdate(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstOnUpdate(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnUpdate(this);
        }
    }
    
    /// <summary>
    /// updated_asterisk
    /// 	 : (INSERTED | DELETED)  DOT  STAR
    /// </summary>
    public partial class AstUpdatedAsterisk : AstRule
    {
        
        protected static string _rule = "updated_asterisk\r\n\t : (INSERTED | DELETED)  DOT  STAR";
        
        internal AstUpdatedAsterisk(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstUpdatedAsterisk(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstUpdatedAsterisk(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstUpdatedAsterisk(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdatedAsterisk(this);
        }
    }
    
    /// <summary>
    /// null_notnull
    /// 	 : NOT?  NULL_
    /// </summary>
    public partial class AstNullNotnull : AstRule
    {
        
        protected static string _rule = "null_notnull\r\n\t : NOT?  NULL_";
        
        internal AstNullNotnull(ITerminalNode t, List<AstRoot> list) : 
                base(t)
        {
        }
        
        internal AstNullNotnull(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstNullNotnull(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstNullNotnull(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNullNotnull(this);
        }
    }
    
    /// <summary>
    /// comparison_operator
    /// 	 : EQUAL
    /// 	 | GREATER
    /// 	 | LESS
    /// 	 | LESS  EQUAL
    /// 	 | GREATER  EQUAL
    /// 	 | LESS  GREATER
    /// 	 | EXCLAMATION  EQUAL
    /// 	 | EXCLAMATION  GREATER
    /// 	 | EXCLAMATION  LESS
    /// </summary>
    public abstract partial class AstComparisonOperator : AstRule
    {
        
        protected static string _rule = "comparison_operator\r\n\t : EQUAL\r\n\t | GREATER\r\n\t | LESS\r\n\t | LESS  EQUAL\r\n\t | GREAT" +
            "ER  EQUAL\r\n\t | LESS  GREATER\r\n\t | EXCLAMATION  EQUAL\r\n\t | EXCLAMATION  GREATER\r\n" +
            "\t | EXCLAMATION  LESS";
        
        /// <summary>
        /// comparison_operator : EQUAL
        /// </summary>
        public partial class AstComparisonOperator1 : AstComparisonOperator
        {
            
            internal AstComparisonOperator1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstComparisonOperator1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstComparisonOperator1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstComparisonOperator1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : GREATER
        /// </summary>
        public partial class AstComparisonOperator2 : AstComparisonOperator
        {
            
            internal AstComparisonOperator2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstComparisonOperator2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstComparisonOperator2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstComparisonOperator2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : LESS
        /// </summary>
        public partial class AstComparisonOperator3 : AstComparisonOperator
        {
            
            internal AstComparisonOperator3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstComparisonOperator3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstComparisonOperator3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstComparisonOperator3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : LESS  EQUAL
        /// </summary>
        public partial class AstComparisonOperator4 : AstComparisonOperator
        {
            
            internal AstComparisonOperator4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstComparisonOperator4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstComparisonOperator4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstComparisonOperator4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : GREATER  EQUAL
        /// </summary>
        public partial class AstComparisonOperator5 : AstComparisonOperator
        {
            
            internal AstComparisonOperator5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstComparisonOperator5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstComparisonOperator5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstComparisonOperator5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : LESS  GREATER
        /// </summary>
        public partial class AstComparisonOperator6 : AstComparisonOperator
        {
            
            internal AstComparisonOperator6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstComparisonOperator6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstComparisonOperator6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstComparisonOperator6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : EXCLAMATION  EQUAL
        /// </summary>
        public partial class AstComparisonOperator7 : AstComparisonOperator
        {
            
            internal AstComparisonOperator7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstComparisonOperator7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstComparisonOperator7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstComparisonOperator7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : EXCLAMATION  GREATER
        /// </summary>
        public partial class AstComparisonOperator8 : AstComparisonOperator
        {
            
            internal AstComparisonOperator8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstComparisonOperator8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstComparisonOperator8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstComparisonOperator8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : EXCLAMATION  LESS
        /// </summary>
        public partial class AstComparisonOperator9 : AstComparisonOperator
        {
            
            internal AstComparisonOperator9(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstComparisonOperator9(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstComparisonOperator9(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstComparisonOperator9(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        

        
        internal AstComparisonOperator(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstComparisonOperator(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstComparisonOperator(Position p) : 
                base(p)
        {
        }
        
        internal AstComparisonOperator(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstComparisonOperator Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstComparisonOperator.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 0))
            {
                return 1;
                return 2;
                return 3;
                return 4;
                return 5;
                return 6;
                return 7;
                return 8;
                return 9;
            }
            return 0;
        }
    }
    
    /// <summary>
    /// assignment_operator
    /// 	 : PLUS_ASSIGN
    /// 	 | MINUS_ASSIGN
    /// 	 | MULT_ASSIGN
    /// 	 | DIV_ASSIGN
    /// 	 | MOD_ASSIGN
    /// 	 | AND_ASSIGN
    /// 	 | XOR_ASSIGN
    /// 	 | OR_ASSIGN
    /// </summary>
    public abstract partial class AstAssignmentOperator : AstRule
    {
        
        protected static string _rule = "assignment_operator\r\n\t : PLUS_ASSIGN\r\n\t | MINUS_ASSIGN\r\n\t | MULT_ASSIGN\r\n\t | DIV_" +
            "ASSIGN\r\n\t | MOD_ASSIGN\r\n\t | AND_ASSIGN\r\n\t | XOR_ASSIGN\r\n\t | OR_ASSIGN";
        
        /// <summary>
        /// assignment_operator : PLUS_ASSIGN
        /// </summary>
        public partial class AstAssignmentOperator1 : AstAssignmentOperator
        {
            
            internal AstAssignmentOperator1(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAssignmentOperator1(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAssignmentOperator1(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAssignmentOperator1(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : MINUS_ASSIGN
        /// </summary>
        public partial class AstAssignmentOperator2 : AstAssignmentOperator
        {
            
            internal AstAssignmentOperator2(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAssignmentOperator2(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAssignmentOperator2(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAssignmentOperator2(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : MULT_ASSIGN
        /// </summary>
        public partial class AstAssignmentOperator3 : AstAssignmentOperator
        {
            
            internal AstAssignmentOperator3(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAssignmentOperator3(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAssignmentOperator3(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAssignmentOperator3(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : DIV_ASSIGN
        /// </summary>
        public partial class AstAssignmentOperator4 : AstAssignmentOperator
        {
            
            internal AstAssignmentOperator4(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAssignmentOperator4(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAssignmentOperator4(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAssignmentOperator4(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : MOD_ASSIGN
        /// </summary>
        public partial class AstAssignmentOperator5 : AstAssignmentOperator
        {
            
            internal AstAssignmentOperator5(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAssignmentOperator5(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAssignmentOperator5(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAssignmentOperator5(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : AND_ASSIGN
        /// </summary>
        public partial class AstAssignmentOperator6 : AstAssignmentOperator
        {
            
            internal AstAssignmentOperator6(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAssignmentOperator6(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAssignmentOperator6(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAssignmentOperator6(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : XOR_ASSIGN
        /// </summary>
        public partial class AstAssignmentOperator7 : AstAssignmentOperator
        {
            
            internal AstAssignmentOperator7(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAssignmentOperator7(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAssignmentOperator7(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAssignmentOperator7(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : OR_ASSIGN
        /// </summary>
        public partial class AstAssignmentOperator8 : AstAssignmentOperator
        {
            
            internal AstAssignmentOperator8(ITerminalNode t, List<AstRoot> list) : 
                    base(t)
            {
            }
            
            internal AstAssignmentOperator8(ParserRuleContext ctx, List<AstRoot> list) : 
                    base(ctx)
            {
            }
            
            internal AstAssignmentOperator8(Position p, List<AstRoot> list) : 
                    base(p)
            {
            }
            
            internal AstAssignmentOperator8(List<AstRoot> list) : 
                    base(Position.Default)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        

        
        internal AstAssignmentOperator(ITerminalNode t) : 
                base(t)
        {
        }
        
        internal AstAssignmentOperator(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAssignmentOperator(Position p) : 
                base(p)
        {
        }
        
        internal AstAssignmentOperator(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAssignmentOperator Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAssignmentOperator.Resolve(list);
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 0))
            {
                return 1;
                return 2;
                return 3;
                return 4;
                return 5;
                return 6;
                return 7;
                return 8;
            }
            return 0;
        }
    }
}
