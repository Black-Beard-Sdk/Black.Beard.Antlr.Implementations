#nullable disable
// Generate by Models.Enum
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Asts.TSql
{
    using System;
    using Bb.Parsers;
    using Antlr4.Runtime;
    using System.Collections;
    using Antlr4.Runtime.Tree;
    
    
    /// <summary>
    /// delay_time_timeout
    /// 	 : DELAY
    /// 	 | TIME
    /// 	 | TIMEOUT
    /// </summary>
    public partial class AstDelayTimeTimeout : AstTerminal<AstDelayTimeTimeoutEnum>
    {
        
        public AstDelayTimeTimeout(ITerminalNode t, string value) : 
                base(t, AstDelayTimeTimeout.GetValue(value))
        {
        }
        
        public AstDelayTimeTimeout(ITerminalNode t, AstDelayTimeTimeoutEnum value) : 
                base(t, value)
        {
        }
        
        public AstDelayTimeTimeout(ParserRuleContext ctx, string value) : 
                base(ctx, AstDelayTimeTimeout.GetValue(value))
        {
        }
        
        public AstDelayTimeTimeout(Position p, string value) : 
                base(p, AstDelayTimeTimeout.GetValue(value))
        {
        }
        
        public AstDelayTimeTimeout(Position p, AstDelayTimeTimeoutEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDelayTimeTimeout(this);
        }
        
        protected static AstDelayTimeTimeoutEnum GetValue(string value)
        {
            if ((value == "DELAY"))
            {
                return AstDelayTimeTimeoutEnum.Delay;
            }
            if ((value == "TIME"))
            {
                return AstDelayTimeTimeoutEnum.Time;
            }
            if ((value == "TIMEOUT"))
            {
                return AstDelayTimeTimeoutEnum.Timeout;
            }
            return AstDelayTimeTimeoutEnum._undefined;
        }
    }
    
    /// <summary>
    /// binary_content
    /// 	 : STRING
    /// 	 | BINARY
    /// </summary>
    public partial class AstBinaryContent : AstTerminal<AstBinaryContentEnum>
    {
        
        public AstBinaryContent(ITerminalNode t, string value) : 
                base(t, AstBinaryContent.GetValue(value))
        {
        }
        
        public AstBinaryContent(ITerminalNode t, AstBinaryContentEnum value) : 
                base(t, value)
        {
        }
        
        public AstBinaryContent(ParserRuleContext ctx, string value) : 
                base(ctx, AstBinaryContent.GetValue(value))
        {
        }
        
        public AstBinaryContent(Position p, string value) : 
                base(p, AstBinaryContent.GetValue(value))
        {
        }
        
        public AstBinaryContent(Position p, AstBinaryContentEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBinaryContent(this);
        }
        
        protected static AstBinaryContentEnum GetValue(string value)
        {
            if ((value == "STRING"))
            {
                return AstBinaryContentEnum.String;
            }
            if ((value == "BINARY"))
            {
                return AstBinaryContentEnum.Binary;
            }
            return AstBinaryContentEnum._undefined;
        }
    }
    
    /// <summary>
    /// class_type_for_azure_dw
    /// 	 : SCHEMA
    /// 	 | OBJECT
    /// </summary>
    public partial class AstClassTypeForAzureDw : AstTerminal<AstClassTypeForAzureDwEnum>
    {
        
        public AstClassTypeForAzureDw(ITerminalNode t, string value) : 
                base(t, AstClassTypeForAzureDw.GetValue(value))
        {
        }
        
        public AstClassTypeForAzureDw(ITerminalNode t, AstClassTypeForAzureDwEnum value) : 
                base(t, value)
        {
        }
        
        public AstClassTypeForAzureDw(ParserRuleContext ctx, string value) : 
                base(ctx, AstClassTypeForAzureDw.GetValue(value))
        {
        }
        
        public AstClassTypeForAzureDw(Position p, string value) : 
                base(p, AstClassTypeForAzureDw.GetValue(value))
        {
        }
        
        public AstClassTypeForAzureDw(Position p, AstClassTypeForAzureDwEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassTypeForAzureDw(this);
        }
        
        protected static AstClassTypeForAzureDwEnum GetValue(string value)
        {
            if ((value == "SCHEMA"))
            {
                return AstClassTypeForAzureDwEnum.Schema;
            }
            if ((value == "OBJECT"))
            {
                return AstClassTypeForAzureDwEnum.Object;
            }
            return AstClassTypeForAzureDwEnum._undefined;
        }
    }
    
    /// <summary>
    /// class_type_for_parallel_dw
    /// 	 : DATABASE
    /// 	 | SCHEMA
    /// 	 | OBJECT
    /// </summary>
    public partial class AstClassTypeForParallelDw : AstTerminal<AstClassTypeForParallelDwEnum>
    {
        
        public AstClassTypeForParallelDw(ITerminalNode t, string value) : 
                base(t, AstClassTypeForParallelDw.GetValue(value))
        {
        }
        
        public AstClassTypeForParallelDw(ITerminalNode t, AstClassTypeForParallelDwEnum value) : 
                base(t, value)
        {
        }
        
        public AstClassTypeForParallelDw(ParserRuleContext ctx, string value) : 
                base(ctx, AstClassTypeForParallelDw.GetValue(value))
        {
        }
        
        public AstClassTypeForParallelDw(Position p, string value) : 
                base(p, AstClassTypeForParallelDw.GetValue(value))
        {
        }
        
        public AstClassTypeForParallelDw(Position p, AstClassTypeForParallelDwEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassTypeForParallelDw(this);
        }
        
        protected static AstClassTypeForParallelDwEnum GetValue(string value)
        {
            if ((value == "DATABASE"))
            {
                return AstClassTypeForParallelDwEnum.Database;
            }
            if ((value == "SCHEMA"))
            {
                return AstClassTypeForParallelDwEnum.Schema;
            }
            if ((value == "OBJECT"))
            {
                return AstClassTypeForParallelDwEnum.Object;
            }
            return AstClassTypeForParallelDwEnum._undefined;
        }
    }
    
    /// <summary>
    /// add_remove
    /// 	 : ADD
    /// 	 | REMOVE
    /// </summary>
    public partial class AstAddRemove : AstTerminal<AstAddRemoveEnum>
    {
        
        public AstAddRemove(ITerminalNode t, string value) : 
                base(t, AstAddRemove.GetValue(value))
        {
        }
        
        public AstAddRemove(ITerminalNode t, AstAddRemoveEnum value) : 
                base(t, value)
        {
        }
        
        public AstAddRemove(ParserRuleContext ctx, string value) : 
                base(ctx, AstAddRemove.GetValue(value))
        {
        }
        
        public AstAddRemove(Position p, string value) : 
                base(p, AstAddRemove.GetValue(value))
        {
        }
        
        public AstAddRemove(Position p, AstAddRemoveEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAddRemove(this);
        }
        
        protected static AstAddRemoveEnum GetValue(string value)
        {
            if ((value == "ADD"))
            {
                return AstAddRemoveEnum.Add;
            }
            if ((value == "REMOVE"))
            {
                return AstAddRemoveEnum.Remove;
            }
            return AstAddRemoveEnum._undefined;
        }
    }
    
    /// <summary>
    /// restart_remove
    /// 	 : RESTART
    /// 	 | REMOVE
    /// </summary>
    public partial class AstRestartRemove : AstTerminal<AstRestartRemoveEnum>
    {
        
        public AstRestartRemove(ITerminalNode t, string value) : 
                base(t, AstRestartRemove.GetValue(value))
        {
        }
        
        public AstRestartRemove(ITerminalNode t, AstRestartRemoveEnum value) : 
                base(t, value)
        {
        }
        
        public AstRestartRemove(ParserRuleContext ctx, string value) : 
                base(ctx, AstRestartRemove.GetValue(value))
        {
        }
        
        public AstRestartRemove(Position p, string value) : 
                base(p, AstRestartRemove.GetValue(value))
        {
        }
        
        public AstRestartRemove(Position p, AstRestartRemoveEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRestartRemove(this);
        }
        
        protected static AstRestartRemoveEnum GetValue(string value)
        {
            if ((value == "RESTART"))
            {
                return AstRestartRemoveEnum.Restart;
            }
            if ((value == "REMOVE"))
            {
                return AstRestartRemoveEnum.Remove;
            }
            return AstRestartRemoveEnum._undefined;
        }
    }
    
    /// <summary>
    /// synch_asynch
    /// 	 : SYNCHRONOUS_COMMIT
    /// 	 | ASYNCHRONOUS_COMMIT
    /// </summary>
    public partial class AstSynchAsynch : AstTerminal<AstSynchAsynchEnum>
    {
        
        public AstSynchAsynch(ITerminalNode t, string value) : 
                base(t, AstSynchAsynch.GetValue(value))
        {
        }
        
        public AstSynchAsynch(ITerminalNode t, AstSynchAsynchEnum value) : 
                base(t, value)
        {
        }
        
        public AstSynchAsynch(ParserRuleContext ctx, string value) : 
                base(ctx, AstSynchAsynch.GetValue(value))
        {
        }
        
        public AstSynchAsynch(Position p, string value) : 
                base(p, AstSynchAsynch.GetValue(value))
        {
        }
        
        public AstSynchAsynch(Position p, AstSynchAsynchEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSynchAsynch(this);
        }
        
        protected static AstSynchAsynchEnum GetValue(string value)
        {
            if ((value == "SYNCHRONOUS_COMMIT"))
            {
                return AstSynchAsynchEnum.SynchronousCommit;
            }
            if ((value == "ASYNCHRONOUS_COMMIT"))
            {
                return AstSynchAsynchEnum.AsynchronousCommit;
            }
            return AstSynchAsynchEnum._undefined;
        }
    }
    
    /// <summary>
    /// auto_manual
    /// 	 : AUTOMATIC
    /// 	 | MANUAL
    /// </summary>
    public partial class AstAutoManual : AstTerminal<AstAutoManualEnum>
    {
        
        public AstAutoManual(ITerminalNode t, string value) : 
                base(t, AstAutoManual.GetValue(value))
        {
        }
        
        public AstAutoManual(ITerminalNode t, AstAutoManualEnum value) : 
                base(t, value)
        {
        }
        
        public AstAutoManual(ParserRuleContext ctx, string value) : 
                base(ctx, AstAutoManual.GetValue(value))
        {
        }
        
        public AstAutoManual(Position p, string value) : 
                base(p, AstAutoManual.GetValue(value))
        {
        }
        
        public AstAutoManual(Position p, AstAutoManualEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAutoManual(this);
        }
        
        protected static AstAutoManualEnum GetValue(string value)
        {
            if ((value == "AUTOMATIC"))
            {
                return AstAutoManualEnum.Automatic;
            }
            if ((value == "MANUAL"))
            {
                return AstAutoManualEnum.Manual;
            }
            return AstAutoManualEnum._undefined;
        }
    }
    
    /// <summary>
    /// real_write_all
    /// 	 : READ_WRITE
    /// 	 | ALL
    /// </summary>
    public partial class AstRealWriteAll : AstTerminal<AstRealWriteAllEnum>
    {
        
        public AstRealWriteAll(ITerminalNode t, string value) : 
                base(t, AstRealWriteAll.GetValue(value))
        {
        }
        
        public AstRealWriteAll(ITerminalNode t, AstRealWriteAllEnum value) : 
                base(t, value)
        {
        }
        
        public AstRealWriteAll(ParserRuleContext ctx, string value) : 
                base(ctx, AstRealWriteAll.GetValue(value))
        {
        }
        
        public AstRealWriteAll(Position p, string value) : 
                base(p, AstRealWriteAll.GetValue(value))
        {
        }
        
        public AstRealWriteAll(Position p, AstRealWriteAllEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRealWriteAll(this);
        }
        
        protected static AstRealWriteAllEnum GetValue(string value)
        {
            if ((value == "READ_WRITE"))
            {
                return AstRealWriteAllEnum.ReadWrite;
            }
            if ((value == "ALL"))
            {
                return AstRealWriteAllEnum.All;
            }
            return AstRealWriteAllEnum._undefined;
        }
    }
    
    /// <summary>
    /// no_real_write_all
    /// 	 : NO
    /// 	 | READ_WRITE
    /// 	 | ALL
    /// </summary>
    public partial class AstNoRealWriteAll : AstTerminal<AstNoRealWriteAllEnum>
    {
        
        public AstNoRealWriteAll(ITerminalNode t, string value) : 
                base(t, AstNoRealWriteAll.GetValue(value))
        {
        }
        
        public AstNoRealWriteAll(ITerminalNode t, AstNoRealWriteAllEnum value) : 
                base(t, value)
        {
        }
        
        public AstNoRealWriteAll(ParserRuleContext ctx, string value) : 
                base(ctx, AstNoRealWriteAll.GetValue(value))
        {
        }
        
        public AstNoRealWriteAll(Position p, string value) : 
                base(p, AstNoRealWriteAll.GetValue(value))
        {
        }
        
        public AstNoRealWriteAll(Position p, AstNoRealWriteAllEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNoRealWriteAll(this);
        }
        
        protected static AstNoRealWriteAllEnum GetValue(string value)
        {
            if ((value == "NO"))
            {
                return AstNoRealWriteAllEnum.No;
            }
            if ((value == "READ_WRITE"))
            {
                return AstNoRealWriteAllEnum.ReadWrite;
            }
            if ((value == "ALL"))
            {
                return AstNoRealWriteAllEnum.All;
            }
            return AstNoRealWriteAllEnum._undefined;
        }
    }
    
    /// <summary>
    /// primary_secondary_none
    /// 	 : PRIMARY
    /// 	 | SECONDARY_ONLY
    /// 	 | SECONDARY
    /// 	 | NONE
    /// </summary>
    public partial class AstPrimarySecondaryNone : AstTerminal<AstPrimarySecondaryNoneEnum>
    {
        
        public AstPrimarySecondaryNone(ITerminalNode t, string value) : 
                base(t, AstPrimarySecondaryNone.GetValue(value))
        {
        }
        
        public AstPrimarySecondaryNone(ITerminalNode t, AstPrimarySecondaryNoneEnum value) : 
                base(t, value)
        {
        }
        
        public AstPrimarySecondaryNone(ParserRuleContext ctx, string value) : 
                base(ctx, AstPrimarySecondaryNone.GetValue(value))
        {
        }
        
        public AstPrimarySecondaryNone(Position p, string value) : 
                base(p, AstPrimarySecondaryNone.GetValue(value))
        {
        }
        
        public AstPrimarySecondaryNone(Position p, AstPrimarySecondaryNoneEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrimarySecondaryNone(this);
        }
        
        protected static AstPrimarySecondaryNoneEnum GetValue(string value)
        {
            if ((value == "PRIMARY"))
            {
                return AstPrimarySecondaryNoneEnum.Primary;
            }
            if ((value == "SECONDARY_ONLY"))
            {
                return AstPrimarySecondaryNoneEnum.SecondaryOnly;
            }
            if ((value == "SECONDARY"))
            {
                return AstPrimarySecondaryNoneEnum.Secondary;
            }
            if ((value == "NONE"))
            {
                return AstPrimarySecondaryNoneEnum.None;
            }
            return AstPrimarySecondaryNoneEnum._undefined;
        }
    }
    
    /// <summary>
    /// grant_deny
    /// 	 : GRANT
    /// 	 | DENY
    /// </summary>
    public partial class AstGrantDeny : AstTerminal<AstGrantDenyEnum>
    {
        
        public AstGrantDeny(ITerminalNode t, string value) : 
                base(t, AstGrantDeny.GetValue(value))
        {
        }
        
        public AstGrantDeny(ITerminalNode t, AstGrantDenyEnum value) : 
                base(t, value)
        {
        }
        
        public AstGrantDeny(ParserRuleContext ctx, string value) : 
                base(ctx, AstGrantDeny.GetValue(value))
        {
        }
        
        public AstGrantDeny(Position p, string value) : 
                base(p, AstGrantDeny.GetValue(value))
        {
        }
        
        public AstGrantDeny(Position p, AstGrantDenyEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGrantDeny(this);
        }
        
        protected static AstGrantDenyEnum GetValue(string value)
        {
            if ((value == "GRANT"))
            {
                return AstGrantDenyEnum.Grant;
            }
            if ((value == "DENY"))
            {
                return AstGrantDenyEnum.Deny;
            }
            return AstGrantDenyEnum._undefined;
        }
    }
    
    /// <summary>
    /// create_alter
    /// 	 : CREATE
    /// 	 | ALTER
    /// </summary>
    public partial class AstCreateAlter : AstTerminal<AstCreateAlterEnum>
    {
        
        public AstCreateAlter(ITerminalNode t, string value) : 
                base(t, AstCreateAlter.GetValue(value))
        {
        }
        
        public AstCreateAlter(ITerminalNode t, AstCreateAlterEnum value) : 
                base(t, value)
        {
        }
        
        public AstCreateAlter(ParserRuleContext ctx, string value) : 
                base(ctx, AstCreateAlter.GetValue(value))
        {
        }
        
        public AstCreateAlter(Position p, string value) : 
                base(p, AstCreateAlter.GetValue(value))
        {
        }
        
        public AstCreateAlter(Position p, AstCreateAlterEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateAlter(this);
        }
        
        protected static AstCreateAlterEnum GetValue(string value)
        {
            if ((value == "CREATE"))
            {
                return AstCreateAlterEnum.Create;
            }
            if ((value == "ALTER"))
            {
                return AstCreateAlterEnum.Alter;
            }
            return AstCreateAlterEnum._undefined;
        }
    }
    
    /// <summary>
    /// add_drop
    /// 	 : ADD
    /// 	 | DROP
    /// </summary>
    public partial class AstAddDrop : AstTerminal<AstAddDropEnum>
    {
        
        public AstAddDrop(ITerminalNode t, string value) : 
                base(t, AstAddDrop.GetValue(value))
        {
        }
        
        public AstAddDrop(ITerminalNode t, AstAddDropEnum value) : 
                base(t, value)
        {
        }
        
        public AstAddDrop(ParserRuleContext ctx, string value) : 
                base(ctx, AstAddDrop.GetValue(value))
        {
        }
        
        public AstAddDrop(Position p, string value) : 
                base(p, AstAddDrop.GetValue(value))
        {
        }
        
        public AstAddDrop(Position p, AstAddDropEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAddDrop(this);
        }
        
        protected static AstAddDropEnum GetValue(string value)
        {
            if ((value == "ADD"))
            {
                return AstAddDropEnum.Add;
            }
            if ((value == "DROP"))
            {
                return AstAddDropEnum.Drop;
            }
            return AstAddDropEnum._undefined;
        }
    }
    
    /// <summary>
    /// start_stop
    /// 	 : START
    /// 	 | STOP
    /// </summary>
    public partial class AstStartStop : AstTerminal<AstStartStopEnum>
    {
        
        public AstStartStop(ITerminalNode t, string value) : 
                base(t, AstStartStop.GetValue(value))
        {
        }
        
        public AstStartStop(ITerminalNode t, AstStartStopEnum value) : 
                base(t, value)
        {
        }
        
        public AstStartStop(ParserRuleContext ctx, string value) : 
                base(ctx, AstStartStop.GetValue(value))
        {
        }
        
        public AstStartStop(Position p, string value) : 
                base(p, AstStartStop.GetValue(value))
        {
        }
        
        public AstStartStop(Position p, AstStartStopEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStartStop(this);
        }
        
        protected static AstStartStopEnum GetValue(string value)
        {
            if ((value == "START"))
            {
                return AstStartStopEnum.Start;
            }
            if ((value == "STOP"))
            {
                return AstStartStopEnum.Stop;
            }
            return AstStartStopEnum._undefined;
        }
    }
    
    /// <summary>
    /// set_add
    /// 	 : SET
    /// 	 | ADD
    /// </summary>
    public partial class AstSetAdd : AstTerminal<AstSetAddEnum>
    {
        
        public AstSetAdd(ITerminalNode t, string value) : 
                base(t, AstSetAdd.GetValue(value))
        {
        }
        
        public AstSetAdd(ITerminalNode t, AstSetAddEnum value) : 
                base(t, value)
        {
        }
        
        public AstSetAdd(ParserRuleContext ctx, string value) : 
                base(ctx, AstSetAdd.GetValue(value))
        {
        }
        
        public AstSetAdd(Position p, string value) : 
                base(p, AstSetAdd.GetValue(value))
        {
        }
        
        public AstSetAdd(Position p, AstSetAddEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetAdd(this);
        }
        
        protected static AstSetAddEnum GetValue(string value)
        {
            if ((value == "SET"))
            {
                return AstSetAddEnum.Set;
            }
            if ((value == "ADD"))
            {
                return AstSetAddEnum.Add;
            }
            return AstSetAddEnum._undefined;
        }
    }
    
    /// <summary>
    /// platform
    /// 	 : WINDOWS
    /// 	 | LINUX
    /// </summary>
    public partial class AstPlatform : AstTerminal<AstPlatformEnum>
    {
        
        public AstPlatform(ITerminalNode t, string value) : 
                base(t, AstPlatform.GetValue(value))
        {
        }
        
        public AstPlatform(ITerminalNode t, AstPlatformEnum value) : 
                base(t, value)
        {
        }
        
        public AstPlatform(ParserRuleContext ctx, string value) : 
                base(ctx, AstPlatform.GetValue(value))
        {
        }
        
        public AstPlatform(Position p, string value) : 
                base(p, AstPlatform.GetValue(value))
        {
        }
        
        public AstPlatform(Position p, AstPlatformEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPlatform(this);
        }
        
        protected static AstPlatformEnum GetValue(string value)
        {
            if ((value == "WINDOWS"))
            {
                return AstPlatformEnum.Windows;
            }
            if ((value == "LINUX"))
            {
                return AstPlatformEnum.Linux;
            }
            return AstPlatformEnum._undefined;
        }
    }
    
    /// <summary>
    /// code_content
    /// 	 : STRING
    /// 	 | BINARY
    /// 	 | NONE
    /// </summary>
    public partial class AstCodeContent : AstTerminal<AstCodeContentEnum>
    {
        
        public AstCodeContent(ITerminalNode t, string value) : 
                base(t, AstCodeContent.GetValue(value))
        {
        }
        
        public AstCodeContent(ITerminalNode t, AstCodeContentEnum value) : 
                base(t, value)
        {
        }
        
        public AstCodeContent(ParserRuleContext ctx, string value) : 
                base(ctx, AstCodeContent.GetValue(value))
        {
        }
        
        public AstCodeContent(Position p, string value) : 
                base(p, AstCodeContent.GetValue(value))
        {
        }
        
        public AstCodeContent(Position p, AstCodeContentEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCodeContent(this);
        }
        
        protected static AstCodeContentEnum GetValue(string value)
        {
            if ((value == "STRING"))
            {
                return AstCodeContentEnum.String;
            }
            if ((value == "BINARY"))
            {
                return AstCodeContentEnum.Binary;
            }
            if ((value == "NONE"))
            {
                return AstCodeContentEnum.None;
            }
            return AstCodeContentEnum._undefined;
        }
    }
    
    /// <summary>
    /// code_language
    /// 	 : R
    /// 	 | PYTHON
    /// </summary>
    public partial class AstCodeLanguage : AstTerminal<AstCodeLanguageEnum>
    {
        
        public AstCodeLanguage(ITerminalNode t, string value) : 
                base(t, AstCodeLanguage.GetValue(value))
        {
        }
        
        public AstCodeLanguage(ITerminalNode t, AstCodeLanguageEnum value) : 
                base(t, value)
        {
        }
        
        public AstCodeLanguage(ParserRuleContext ctx, string value) : 
                base(ctx, AstCodeLanguage.GetValue(value))
        {
        }
        
        public AstCodeLanguage(Position p, string value) : 
                base(p, AstCodeLanguage.GetValue(value))
        {
        }
        
        public AstCodeLanguage(Position p, AstCodeLanguageEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCodeLanguage(this);
        }
        
        protected static AstCodeLanguageEnum GetValue(string value)
        {
            if ((value == "R"))
            {
                return AstCodeLanguageEnum.R;
            }
            if ((value == "PYTHON"))
            {
                return AstCodeLanguageEnum.Python;
            }
            return AstCodeLanguageEnum._undefined;
        }
    }
    
    /// <summary>
    /// pwd_strategy
    /// 	 : MUST_CHANGE
    /// 	 | UNLOCK
    /// </summary>
    public partial class AstPwdStrategy : AstTerminal<AstPwdStrategyEnum>
    {
        
        public AstPwdStrategy(ITerminalNode t, string value) : 
                base(t, AstPwdStrategy.GetValue(value))
        {
        }
        
        public AstPwdStrategy(ITerminalNode t, AstPwdStrategyEnum value) : 
                base(t, value)
        {
        }
        
        public AstPwdStrategy(ParserRuleContext ctx, string value) : 
                base(ctx, AstPwdStrategy.GetValue(value))
        {
        }
        
        public AstPwdStrategy(Position p, string value) : 
                base(p, AstPwdStrategy.GetValue(value))
        {
        }
        
        public AstPwdStrategy(Position p, AstPwdStrategyEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPwdStrategy(this);
        }
        
        protected static AstPwdStrategyEnum GetValue(string value)
        {
            if ((value == "MUST_CHANGE"))
            {
                return AstPwdStrategyEnum.MustChange;
            }
            if ((value == "UNLOCK"))
            {
                return AstPwdStrategyEnum.Unlock;
            }
            return AstPwdStrategyEnum._undefined;
        }
    }
    
    /// <summary>
    /// enable_disable
    /// 	 : ENABLE
    /// 	 | DISABLE
    /// </summary>
    public partial class AstEnableDisable : AstTerminal<AstEnableDisableEnum>
    {
        
        public AstEnableDisable(ITerminalNode t, string value) : 
                base(t, AstEnableDisable.GetValue(value))
        {
        }
        
        public AstEnableDisable(ITerminalNode t, AstEnableDisableEnum value) : 
                base(t, value)
        {
        }
        
        public AstEnableDisable(ParserRuleContext ctx, string value) : 
                base(ctx, AstEnableDisable.GetValue(value))
        {
        }
        
        public AstEnableDisable(Position p, string value) : 
                base(p, AstEnableDisable.GetValue(value))
        {
        }
        
        public AstEnableDisable(Position p, AstEnableDisableEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEnableDisable(this);
        }
        
        protected static AstEnableDisableEnum GetValue(string value)
        {
            if ((value == "ENABLE"))
            {
                return AstEnableDisableEnum.Enable;
            }
            if ((value == "DISABLE"))
            {
                return AstEnableDisableEnum.Disable;
            }
            return AstEnableDisableEnum._undefined;
        }
    }
    
    /// <summary>
    /// split_or_merge
    /// 	 : SPLIT
    /// 	 | MERGE
    /// </summary>
    public partial class AstSplitOrMerge : AstTerminal<AstSplitOrMergeEnum>
    {
        
        public AstSplitOrMerge(ITerminalNode t, string value) : 
                base(t, AstSplitOrMerge.GetValue(value))
        {
        }
        
        public AstSplitOrMerge(ITerminalNode t, AstSplitOrMergeEnum value) : 
                base(t, value)
        {
        }
        
        public AstSplitOrMerge(ParserRuleContext ctx, string value) : 
                base(ctx, AstSplitOrMerge.GetValue(value))
        {
        }
        
        public AstSplitOrMerge(Position p, string value) : 
                base(p, AstSplitOrMerge.GetValue(value))
        {
        }
        
        public AstSplitOrMerge(Position p, AstSplitOrMergeEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSplitOrMerge(this);
        }
        
        protected static AstSplitOrMergeEnum GetValue(string value)
        {
            if ((value == "SPLIT"))
            {
                return AstSplitOrMergeEnum.Split;
            }
            if ((value == "MERGE"))
            {
                return AstSplitOrMergeEnum.Merge;
            }
            return AstSplitOrMergeEnum._undefined;
        }
    }
    
    /// <summary>
    /// enum_dml
    /// 	 : SELECT
    /// 	 | INSERT
    /// 	 | DELETE
    /// 	 | UPDATE
    /// </summary>
    public partial class AstEnumDml : AstTerminal<AstEnumDmlEnum>
    {
        
        public AstEnumDml(ITerminalNode t, string value) : 
                base(t, AstEnumDml.GetValue(value))
        {
        }
        
        public AstEnumDml(ITerminalNode t, AstEnumDmlEnum value) : 
                base(t, value)
        {
        }
        
        public AstEnumDml(ParserRuleContext ctx, string value) : 
                base(ctx, AstEnumDml.GetValue(value))
        {
        }
        
        public AstEnumDml(Position p, string value) : 
                base(p, AstEnumDml.GetValue(value))
        {
        }
        
        public AstEnumDml(Position p, AstEnumDmlEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEnumDml(this);
        }
        
        protected static AstEnumDmlEnum GetValue(string value)
        {
            if ((value == "SELECT"))
            {
                return AstEnumDmlEnum.Select;
            }
            if ((value == "INSERT"))
            {
                return AstEnumDmlEnum.Insert;
            }
            if ((value == "DELETE"))
            {
                return AstEnumDmlEnum.Delete;
            }
            if ((value == "UPDATE"))
            {
                return AstEnumDmlEnum.Update;
            }
            return AstEnumDmlEnum._undefined;
        }
    }
    
    /// <summary>
    /// filter_block
    /// 	 : FILTER
    /// 	 | BLOCK
    /// </summary>
    public partial class AstFilterBlock : AstTerminal<AstFilterBlockEnum>
    {
        
        public AstFilterBlock(ITerminalNode t, string value) : 
                base(t, AstFilterBlock.GetValue(value))
        {
        }
        
        public AstFilterBlock(ITerminalNode t, AstFilterBlockEnum value) : 
                base(t, value)
        {
        }
        
        public AstFilterBlock(ParserRuleContext ctx, string value) : 
                base(ctx, AstFilterBlock.GetValue(value))
        {
        }
        
        public AstFilterBlock(Position p, string value) : 
                base(p, AstFilterBlock.GetValue(value))
        {
        }
        
        public AstFilterBlock(Position p, AstFilterBlockEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilterBlock(this);
        }
        
        protected static AstFilterBlockEnum GetValue(string value)
        {
            if ((value == "FILTER"))
            {
                return AstFilterBlockEnum.Filter;
            }
            if ((value == "BLOCK"))
            {
                return AstFilterBlockEnum.Block;
            }
            return AstFilterBlockEnum._undefined;
        }
    }
    
    /// <summary>
    /// size_unity
    /// 	 : MB
    /// 	 | GB
    /// 	 | TB
    /// </summary>
    public partial class AstSizeUnity : AstTerminal<AstSizeUnityEnum>
    {
        
        public AstSizeUnity(ITerminalNode t, string value) : 
                base(t, AstSizeUnity.GetValue(value))
        {
        }
        
        public AstSizeUnity(ITerminalNode t, AstSizeUnityEnum value) : 
                base(t, value)
        {
        }
        
        public AstSizeUnity(ParserRuleContext ctx, string value) : 
                base(ctx, AstSizeUnity.GetValue(value))
        {
        }
        
        public AstSizeUnity(Position p, string value) : 
                base(p, AstSizeUnity.GetValue(value))
        {
        }
        
        public AstSizeUnity(Position p, AstSizeUnityEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSizeUnity(this);
        }
        
        protected static AstSizeUnityEnum GetValue(string value)
        {
            if ((value == "MB"))
            {
                return AstSizeUnityEnum.Mb;
            }
            if ((value == "GB"))
            {
                return AstSizeUnityEnum.Gb;
            }
            if ((value == "TB"))
            {
                return AstSizeUnityEnum.Tb;
            }
            return AstSizeUnityEnum._undefined;
        }
    }
    
    /// <summary>
    /// continue_shutdown
    /// 	 : CONTINUE
    /// 	 | SHUTDOWN
    /// 	 | FAIL_OPERATION
    /// </summary>
    public partial class AstContinueShutdown : AstTerminal<AstContinueShutdownEnum>
    {
        
        public AstContinueShutdown(ITerminalNode t, string value) : 
                base(t, AstContinueShutdown.GetValue(value))
        {
        }
        
        public AstContinueShutdown(ITerminalNode t, AstContinueShutdownEnum value) : 
                base(t, value)
        {
        }
        
        public AstContinueShutdown(ParserRuleContext ctx, string value) : 
                base(ctx, AstContinueShutdown.GetValue(value))
        {
        }
        
        public AstContinueShutdown(Position p, string value) : 
                base(p, AstContinueShutdown.GetValue(value))
        {
        }
        
        public AstContinueShutdown(Position p, AstContinueShutdownEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContinueShutdown(this);
        }
        
        protected static AstContinueShutdownEnum GetValue(string value)
        {
            if ((value == "CONTINUE"))
            {
                return AstContinueShutdownEnum.Continue;
            }
            if ((value == "SHUTDOWN"))
            {
                return AstContinueShutdownEnum.Shutdown;
            }
            if ((value == "FAIL_OPERATION"))
            {
                return AstContinueShutdownEnum.FailOperation;
            }
            return AstContinueShutdownEnum._undefined;
        }
    }
    
    /// <summary>
    /// audit_operator
    /// 	 : EQUAL
    /// 	 | LESS  GREATER
    /// 	 | EXCLAMATION  EQUAL
    /// 	 | GREATER
    /// 	 | GREATER  EQUAL
    /// 	 | LESS
    /// 	 | LESS  EQUAL
    /// </summary>
    public partial class AstAuditOperator : AstTerminal<AstAuditOperatorEnum>
    {
        
        public AstAuditOperator(ITerminalNode t, string value) : 
                base(t, AstAuditOperator.GetValue(value))
        {
        }
        
        public AstAuditOperator(ITerminalNode t, AstAuditOperatorEnum value) : 
                base(t, value)
        {
        }
        
        public AstAuditOperator(ParserRuleContext ctx, string value) : 
                base(ctx, AstAuditOperator.GetValue(value))
        {
        }
        
        public AstAuditOperator(Position p, string value) : 
                base(p, AstAuditOperator.GetValue(value))
        {
        }
        
        public AstAuditOperator(Position p, AstAuditOperatorEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditOperator(this);
        }
        
        protected static AstAuditOperatorEnum GetValue(string value)
        {
            if ((value == "EQUAL"))
            {
                return AstAuditOperatorEnum.Equal;
            }
            if ((value == "LESS"))
            {
                return AstAuditOperatorEnum.Less;
            }
            if ((value == "GREATER"))
            {
                return AstAuditOperatorEnum.Greater;
            }
            if ((value == "EXCLAMATION"))
            {
                return AstAuditOperatorEnum.Exclamation;
            }
            if ((value == "EQUAL"))
            {
                return AstAuditOperatorEnum.Equal;
            }
            if ((value == "GREATER"))
            {
                return AstAuditOperatorEnum.Greater;
            }
            if ((value == "GREATER"))
            {
                return AstAuditOperatorEnum.Greater;
            }
            if ((value == "EQUAL"))
            {
                return AstAuditOperatorEnum.Equal;
            }
            if ((value == "LESS"))
            {
                return AstAuditOperatorEnum.Less;
            }
            if ((value == "LESS"))
            {
                return AstAuditOperatorEnum.Less;
            }
            if ((value == "EQUAL"))
            {
                return AstAuditOperatorEnum.Equal;
            }
            return AstAuditOperatorEnum._undefined;
        }
    }
    
    /// <summary>
    /// and_or
    /// 	 : AND
    /// 	 | OR
    /// </summary>
    public partial class AstAndOr : AstTerminal<AstAndOrEnum>
    {
        
        public AstAndOr(ITerminalNode t, string value) : 
                base(t, AstAndOr.GetValue(value))
        {
        }
        
        public AstAndOr(ITerminalNode t, AstAndOrEnum value) : 
                base(t, value)
        {
        }
        
        public AstAndOr(ParserRuleContext ctx, string value) : 
                base(ctx, AstAndOr.GetValue(value))
        {
        }
        
        public AstAndOr(Position p, string value) : 
                base(p, AstAndOr.GetValue(value))
        {
        }
        
        public AstAndOr(Position p, AstAndOrEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAndOr(this);
        }
        
        protected static AstAndOrEnum GetValue(string value)
        {
            if ((value == "AND"))
            {
                return AstAndOrEnum.And;
            }
            if ((value == "OR"))
            {
                return AstAndOrEnum.Or;
            }
            return AstAndOrEnum._undefined;
        }
    }
    
    /// <summary>
    /// create_user_with_login
    /// 	 : (for_from  LOGIN  login_id)?  (WITH  user_settings_short*)?
    /// </summary>
    public partial class AstCreateUserWithLogin : AstTerminal<AstCreateUserWithLoginEnum>
    {
        
        public AstCreateUserWithLogin(ITerminalNode t, string value) : 
                base(t, AstCreateUserWithLogin.GetValue(value))
        {
        }
        
        public AstCreateUserWithLogin(ITerminalNode t, AstCreateUserWithLoginEnum value) : 
                base(t, value)
        {
        }
        
        public AstCreateUserWithLogin(ParserRuleContext ctx, string value) : 
                base(ctx, AstCreateUserWithLogin.GetValue(value))
        {
        }
        
        public AstCreateUserWithLogin(Position p, string value) : 
                base(p, AstCreateUserWithLogin.GetValue(value))
        {
        }
        
        public AstCreateUserWithLogin(Position p, AstCreateUserWithLoginEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateUserWithLogin(this);
        }
        
        protected static AstCreateUserWithLoginEnum GetValue(string value)
        {
            if ((value == "LOGIN"))
            {
                return AstCreateUserWithLoginEnum.Login;
            }
            if ((value == "WITH"))
            {
                return AstCreateUserWithLoginEnum.With;
            }
            return AstCreateUserWithLoginEnum._undefined;
        }
    }
    
    /// <summary>
    /// for_from
    /// 	 : FOR
    /// 	 | FROM
    /// </summary>
    public partial class AstForFrom : AstTerminal<AstForFromEnum>
    {
        
        public AstForFrom(ITerminalNode t, string value) : 
                base(t, AstForFrom.GetValue(value))
        {
        }
        
        public AstForFrom(ITerminalNode t, AstForFromEnum value) : 
                base(t, value)
        {
        }
        
        public AstForFrom(ParserRuleContext ctx, string value) : 
                base(ctx, AstForFrom.GetValue(value))
        {
        }
        
        public AstForFrom(Position p, string value) : 
                base(p, AstForFrom.GetValue(value))
        {
        }
        
        public AstForFrom(Position p, AstForFromEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitForFrom(this);
        }
        
        protected static AstForFromEnum GetValue(string value)
        {
            if ((value == "FOR"))
            {
                return AstForFromEnum.For;
            }
            if ((value == "FROM"))
            {
                return AstForFromEnum.From;
            }
            return AstForFromEnum._undefined;
        }
    }
    
    /// <summary>
    /// importance_level
    /// 	 : LOW
    /// 	 | MEDIUM
    /// 	 | HIGH
    /// </summary>
    public partial class AstImportanceLevel : AstTerminal<AstImportanceLevelEnum>
    {
        
        public AstImportanceLevel(ITerminalNode t, string value) : 
                base(t, AstImportanceLevel.GetValue(value))
        {
        }
        
        public AstImportanceLevel(ITerminalNode t, AstImportanceLevelEnum value) : 
                base(t, value)
        {
        }
        
        public AstImportanceLevel(ParserRuleContext ctx, string value) : 
                base(ctx, AstImportanceLevel.GetValue(value))
        {
        }
        
        public AstImportanceLevel(Position p, string value) : 
                base(p, AstImportanceLevel.GetValue(value))
        {
        }
        
        public AstImportanceLevel(Position p, AstImportanceLevelEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitImportanceLevel(this);
        }
        
        protected static AstImportanceLevelEnum GetValue(string value)
        {
            if ((value == "LOW"))
            {
                return AstImportanceLevelEnum.Low;
            }
            if ((value == "MEDIUM"))
            {
                return AstImportanceLevelEnum.Medium;
            }
            if ((value == "HIGH"))
            {
                return AstImportanceLevelEnum.High;
            }
            return AstImportanceLevelEnum._undefined;
        }
    }
    
    /// <summary>
    /// none_partial
    /// 	 : NONE
    /// 	 | PARTIAL
    /// </summary>
    public partial class AstNonePartial : AstTerminal<AstNonePartialEnum>
    {
        
        public AstNonePartial(ITerminalNode t, string value) : 
                base(t, AstNonePartial.GetValue(value))
        {
        }
        
        public AstNonePartial(ITerminalNode t, AstNonePartialEnum value) : 
                base(t, value)
        {
        }
        
        public AstNonePartial(ParserRuleContext ctx, string value) : 
                base(ctx, AstNonePartial.GetValue(value))
        {
        }
        
        public AstNonePartial(Position p, string value) : 
                base(p, AstNonePartial.GetValue(value))
        {
        }
        
        public AstNonePartial(Position p, AstNonePartialEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNonePartial(this);
        }
        
        protected static AstNonePartialEnum GetValue(string value)
        {
            if ((value == "NONE"))
            {
                return AstNonePartialEnum.None;
            }
            if ((value == "PARTIAL"))
            {
                return AstNonePartialEnum.Partial;
            }
            return AstNonePartialEnum._undefined;
        }
    }
    
    /// <summary>
    /// datacompression_mode
    /// 	 : NONE
    /// 	 | ROW
    /// 	 | PAGE
    /// 	 | COLUMNSTORE
    /// 	 | COLUMNSTORE_ARCHIVE
    /// </summary>
    public partial class AstDatacompressionMode : AstTerminal<AstDatacompressionModeEnum>
    {
        
        public AstDatacompressionMode(ITerminalNode t, string value) : 
                base(t, AstDatacompressionMode.GetValue(value))
        {
        }
        
        public AstDatacompressionMode(ITerminalNode t, AstDatacompressionModeEnum value) : 
                base(t, value)
        {
        }
        
        public AstDatacompressionMode(ParserRuleContext ctx, string value) : 
                base(ctx, AstDatacompressionMode.GetValue(value))
        {
        }
        
        public AstDatacompressionMode(Position p, string value) : 
                base(p, AstDatacompressionMode.GetValue(value))
        {
        }
        
        public AstDatacompressionMode(Position p, AstDatacompressionModeEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatacompressionMode(this);
        }
        
        protected static AstDatacompressionModeEnum GetValue(string value)
        {
            if ((value == "NONE"))
            {
                return AstDatacompressionModeEnum.None;
            }
            if ((value == "ROW"))
            {
                return AstDatacompressionModeEnum.Row;
            }
            if ((value == "PAGE"))
            {
                return AstDatacompressionModeEnum.Page;
            }
            if ((value == "COLUMNSTORE"))
            {
                return AstDatacompressionModeEnum.Columnstore;
            }
            if ((value == "COLUMNSTORE_ARCHIVE"))
            {
                return AstDatacompressionModeEnum.ColumnstoreArchive;
            }
            return AstDatacompressionModeEnum._undefined;
        }
    }
    
    /// <summary>
    /// dml_trigger_operation
    /// 	 : INSERT
    /// 	 | UPDATE
    /// 	 | DELETE
    /// </summary>
    public partial class AstDmlTriggerOperation : AstTerminal<AstDmlTriggerOperationEnum>
    {
        
        public AstDmlTriggerOperation(ITerminalNode t, string value) : 
                base(t, AstDmlTriggerOperation.GetValue(value))
        {
        }
        
        public AstDmlTriggerOperation(ITerminalNode t, AstDmlTriggerOperationEnum value) : 
                base(t, value)
        {
        }
        
        public AstDmlTriggerOperation(ParserRuleContext ctx, string value) : 
                base(ctx, AstDmlTriggerOperation.GetValue(value))
        {
        }
        
        public AstDmlTriggerOperation(Position p, string value) : 
                base(p, AstDmlTriggerOperation.GetValue(value))
        {
        }
        
        public AstDmlTriggerOperation(Position p, AstDmlTriggerOperationEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDmlTriggerOperation(this);
        }
        
        protected static AstDmlTriggerOperationEnum GetValue(string value)
        {
            if ((value == "INSERT"))
            {
                return AstDmlTriggerOperationEnum.Insert;
            }
            if ((value == "UPDATE"))
            {
                return AstDmlTriggerOperationEnum.Update;
            }
            if ((value == "DELETE"))
            {
                return AstDmlTriggerOperationEnum.Delete;
            }
            return AstDmlTriggerOperationEnum._undefined;
        }
    }
    
    /// <summary>
    /// for_after
    /// 	 : FOR
    /// 	 | AFTER
    /// </summary>
    public partial class AstForAfter : AstTerminal<AstForAfterEnum>
    {
        
        public AstForAfter(ITerminalNode t, string value) : 
                base(t, AstForAfter.GetValue(value))
        {
        }
        
        public AstForAfter(ITerminalNode t, AstForAfterEnum value) : 
                base(t, value)
        {
        }
        
        public AstForAfter(ParserRuleContext ctx, string value) : 
                base(ctx, AstForAfter.GetValue(value))
        {
        }
        
        public AstForAfter(Position p, string value) : 
                base(p, AstForAfter.GetValue(value))
        {
        }
        
        public AstForAfter(Position p, AstForAfterEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitForAfter(this);
        }
        
        protected static AstForAfterEnum GetValue(string value)
        {
            if ((value == "FOR"))
            {
                return AstForAfterEnum.For;
            }
            if ((value == "AFTER"))
            {
                return AstForAfterEnum.After;
            }
            return AstForAfterEnum._undefined;
        }
    }
    
    /// <summary>
    /// index_strategy
    /// 	 : NONE
    /// 	 | ROW
    /// 	 | PAGE
    /// 	 | COLUMNSTORE
    /// 	 | COLUMNSTORE_ARCHIVE
    /// </summary>
    public partial class AstIndexStrategy : AstTerminal<AstIndexStrategyEnum>
    {
        
        public AstIndexStrategy(ITerminalNode t, string value) : 
                base(t, AstIndexStrategy.GetValue(value))
        {
        }
        
        public AstIndexStrategy(ITerminalNode t, AstIndexStrategyEnum value) : 
                base(t, value)
        {
        }
        
        public AstIndexStrategy(ParserRuleContext ctx, string value) : 
                base(ctx, AstIndexStrategy.GetValue(value))
        {
        }
        
        public AstIndexStrategy(Position p, string value) : 
                base(p, AstIndexStrategy.GetValue(value))
        {
        }
        
        public AstIndexStrategy(Position p, AstIndexStrategyEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIndexStrategy(this);
        }
        
        protected static AstIndexStrategyEnum GetValue(string value)
        {
            if ((value == "NONE"))
            {
                return AstIndexStrategyEnum.None;
            }
            if ((value == "ROW"))
            {
                return AstIndexStrategyEnum.Row;
            }
            if ((value == "PAGE"))
            {
                return AstIndexStrategyEnum.Page;
            }
            if ((value == "COLUMNSTORE"))
            {
                return AstIndexStrategyEnum.Columnstore;
            }
            if ((value == "COLUMNSTORE_ARCHIVE"))
            {
                return AstIndexStrategyEnum.ColumnstoreArchive;
            }
            return AstIndexStrategyEnum._undefined;
        }
    }
    
    /// <summary>
    /// view_attribute
    /// 	 : ENCRYPTION
    /// 	 | SCHEMABINDING
    /// 	 | VIEW_METADATA
    /// </summary>
    public partial class AstViewAttribute : AstTerminal<AstViewAttributeEnum>
    {
        
        public AstViewAttribute(ITerminalNode t, string value) : 
                base(t, AstViewAttribute.GetValue(value))
        {
        }
        
        public AstViewAttribute(ITerminalNode t, AstViewAttributeEnum value) : 
                base(t, value)
        {
        }
        
        public AstViewAttribute(ParserRuleContext ctx, string value) : 
                base(ctx, AstViewAttribute.GetValue(value))
        {
        }
        
        public AstViewAttribute(Position p, string value) : 
                base(p, AstViewAttribute.GetValue(value))
        {
        }
        
        public AstViewAttribute(Position p, AstViewAttributeEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitViewAttribute(this);
        }
        
        protected static AstViewAttributeEnum GetValue(string value)
        {
            if ((value == "ENCRYPTION"))
            {
                return AstViewAttributeEnum.Encryption;
            }
            if ((value == "SCHEMABINDING"))
            {
                return AstViewAttributeEnum.Schemabinding;
            }
            if ((value == "VIEW_METADATA"))
            {
                return AstViewAttributeEnum.ViewMetadata;
            }
            return AstViewAttributeEnum._undefined;
        }
    }
    
    /// <summary>
    /// filegroup_updatability_option
    /// 	 : READONLY
    /// 	 | READWRITE
    /// 	 | READ_ONLY
    /// 	 | READ_WRITE
    /// </summary>
    public partial class AstFilegroupUpdatabilityOption : AstTerminal<AstFilegroupUpdatabilityOptionEnum>
    {
        
        public AstFilegroupUpdatabilityOption(ITerminalNode t, string value) : 
                base(t, AstFilegroupUpdatabilityOption.GetValue(value))
        {
        }
        
        public AstFilegroupUpdatabilityOption(ITerminalNode t, AstFilegroupUpdatabilityOptionEnum value) : 
                base(t, value)
        {
        }
        
        public AstFilegroupUpdatabilityOption(ParserRuleContext ctx, string value) : 
                base(ctx, AstFilegroupUpdatabilityOption.GetValue(value))
        {
        }
        
        public AstFilegroupUpdatabilityOption(Position p, string value) : 
                base(p, AstFilegroupUpdatabilityOption.GetValue(value))
        {
        }
        
        public AstFilegroupUpdatabilityOption(Position p, AstFilegroupUpdatabilityOptionEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilegroupUpdatabilityOption(this);
        }
        
        protected static AstFilegroupUpdatabilityOptionEnum GetValue(string value)
        {
            if ((value == "READONLY"))
            {
                return AstFilegroupUpdatabilityOptionEnum.Readonly;
            }
            if ((value == "READWRITE"))
            {
                return AstFilegroupUpdatabilityOptionEnum.Readwrite;
            }
            if ((value == "READ_ONLY"))
            {
                return AstFilegroupUpdatabilityOptionEnum.ReadOnly;
            }
            if ((value == "READ_WRITE"))
            {
                return AstFilegroupUpdatabilityOptionEnum.ReadWrite;
            }
            return AstFilegroupUpdatabilityOptionEnum._undefined;
        }
    }
    
    /// <summary>
    /// period
    /// 	 : DAYS
    /// 	 | HOURS
    /// 	 | MINUTES
    /// </summary>
    public partial class AstPeriod : AstTerminal<AstPeriodEnum>
    {
        
        public AstPeriod(ITerminalNode t, string value) : 
                base(t, AstPeriod.GetValue(value))
        {
        }
        
        public AstPeriod(ITerminalNode t, AstPeriodEnum value) : 
                base(t, value)
        {
        }
        
        public AstPeriod(ParserRuleContext ctx, string value) : 
                base(ctx, AstPeriod.GetValue(value))
        {
        }
        
        public AstPeriod(Position p, string value) : 
                base(p, AstPeriod.GetValue(value))
        {
        }
        
        public AstPeriod(Position p, AstPeriodEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPeriod(this);
        }
        
        protected static AstPeriodEnum GetValue(string value)
        {
            if ((value == "DAYS"))
            {
                return AstPeriodEnum.Days;
            }
            if ((value == "HOURS"))
            {
                return AstPeriodEnum.Hours;
            }
            if ((value == "MINUTES"))
            {
                return AstPeriodEnum.Minutes;
            }
            return AstPeriodEnum._undefined;
        }
    }
    
    /// <summary>
    /// local_global
    /// 	 : LOCAL
    /// 	 | GLOBAL
    /// </summary>
    public partial class AstLocalGlobal : AstTerminal<AstLocalGlobalEnum>
    {
        
        public AstLocalGlobal(ITerminalNode t, string value) : 
                base(t, AstLocalGlobal.GetValue(value))
        {
        }
        
        public AstLocalGlobal(ITerminalNode t, AstLocalGlobalEnum value) : 
                base(t, value)
        {
        }
        
        public AstLocalGlobal(ParserRuleContext ctx, string value) : 
                base(ctx, AstLocalGlobal.GetValue(value))
        {
        }
        
        public AstLocalGlobal(Position p, string value) : 
                base(p, AstLocalGlobal.GetValue(value))
        {
        }
        
        public AstLocalGlobal(Position p, AstLocalGlobalEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLocalGlobal(this);
        }
        
        protected static AstLocalGlobalEnum GetValue(string value)
        {
            if ((value == "LOCAL"))
            {
                return AstLocalGlobalEnum.Local;
            }
            if ((value == "GLOBAL"))
            {
                return AstLocalGlobalEnum.Global;
            }
            return AstLocalGlobalEnum._undefined;
        }
    }
    
    /// <summary>
    /// state_enum
    /// 	 : STARTED
    /// 	 | STOPPED
    /// 	 | DISABLED
    /// </summary>
    public partial class AstStateEnum : AstTerminal<AstStateEnumEnum>
    {
        
        public AstStateEnum(ITerminalNode t, string value) : 
                base(t, AstStateEnum.GetValue(value))
        {
        }
        
        public AstStateEnum(ITerminalNode t, AstStateEnumEnum value) : 
                base(t, value)
        {
        }
        
        public AstStateEnum(ParserRuleContext ctx, string value) : 
                base(ctx, AstStateEnum.GetValue(value))
        {
        }
        
        public AstStateEnum(Position p, string value) : 
                base(p, AstStateEnum.GetValue(value))
        {
        }
        
        public AstStateEnum(Position p, AstStateEnumEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStateEnum(this);
        }
        
        protected static AstStateEnumEnum GetValue(string value)
        {
            if ((value == "STARTED"))
            {
                return AstStateEnumEnum.Started;
            }
            if ((value == "STOPPED"))
            {
                return AstStateEnumEnum.Stopped;
            }
            if ((value == "DISABLED"))
            {
                return AstStateEnumEnum.Disabled;
            }
            return AstStateEnumEnum._undefined;
        }
    }
    
    /// <summary>
    /// authentication_mode
    /// 	 : NTLM
    /// 	 | KERBEROS
    /// 	 | NEGOTIATE
    /// </summary>
    public partial class AstAuthenticationMode : AstTerminal<AstAuthenticationModeEnum>
    {
        
        public AstAuthenticationMode(ITerminalNode t, string value) : 
                base(t, AstAuthenticationMode.GetValue(value))
        {
        }
        
        public AstAuthenticationMode(ITerminalNode t, AstAuthenticationModeEnum value) : 
                base(t, value)
        {
        }
        
        public AstAuthenticationMode(ParserRuleContext ctx, string value) : 
                base(ctx, AstAuthenticationMode.GetValue(value))
        {
        }
        
        public AstAuthenticationMode(Position p, string value) : 
                base(p, AstAuthenticationMode.GetValue(value))
        {
        }
        
        public AstAuthenticationMode(Position p, AstAuthenticationModeEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuthenticationMode(this);
        }
        
        protected static AstAuthenticationModeEnum GetValue(string value)
        {
            if ((value == "NTLM"))
            {
                return AstAuthenticationModeEnum.Ntlm;
            }
            if ((value == "KERBEROS"))
            {
                return AstAuthenticationModeEnum.Kerberos;
            }
            if ((value == "NEGOTIATE"))
            {
                return AstAuthenticationModeEnum.Negotiate;
            }
            return AstAuthenticationModeEnum._undefined;
        }
    }
    
    /// <summary>
    /// db_state_option
    /// 	 : ONLINE
    /// 	 | OFFLINE
    /// 	 | EMERGENCY
    /// </summary>
    public partial class AstDbStateOption : AstTerminal<AstDbStateOptionEnum>
    {
        
        public AstDbStateOption(ITerminalNode t, string value) : 
                base(t, AstDbStateOption.GetValue(value))
        {
        }
        
        public AstDbStateOption(ITerminalNode t, AstDbStateOptionEnum value) : 
                base(t, value)
        {
        }
        
        public AstDbStateOption(ParserRuleContext ctx, string value) : 
                base(ctx, AstDbStateOption.GetValue(value))
        {
        }
        
        public AstDbStateOption(Position p, string value) : 
                base(p, AstDbStateOption.GetValue(value))
        {
        }
        
        public AstDbStateOption(Position p, AstDbStateOptionEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbStateOption(this);
        }
        
        protected static AstDbStateOptionEnum GetValue(string value)
        {
            if ((value == "ONLINE"))
            {
                return AstDbStateOptionEnum.Online;
            }
            if ((value == "OFFLINE"))
            {
                return AstDbStateOptionEnum.Offline;
            }
            if ((value == "EMERGENCY"))
            {
                return AstDbStateOptionEnum.Emergency;
            }
            return AstDbStateOptionEnum._undefined;
        }
    }
    
    /// <summary>
    /// db_update_option
    /// 	 : READ_ONLY
    /// 	 | READ_WRITE
    /// </summary>
    public partial class AstDbUpdateOption : AstTerminal<AstDbUpdateOptionEnum>
    {
        
        public AstDbUpdateOption(ITerminalNode t, string value) : 
                base(t, AstDbUpdateOption.GetValue(value))
        {
        }
        
        public AstDbUpdateOption(ITerminalNode t, AstDbUpdateOptionEnum value) : 
                base(t, value)
        {
        }
        
        public AstDbUpdateOption(ParserRuleContext ctx, string value) : 
                base(ctx, AstDbUpdateOption.GetValue(value))
        {
        }
        
        public AstDbUpdateOption(Position p, string value) : 
                base(p, AstDbUpdateOption.GetValue(value))
        {
        }
        
        public AstDbUpdateOption(Position p, AstDbUpdateOptionEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbUpdateOption(this);
        }
        
        protected static AstDbUpdateOptionEnum GetValue(string value)
        {
            if ((value == "READ_ONLY"))
            {
                return AstDbUpdateOptionEnum.ReadOnly;
            }
            if ((value == "READ_WRITE"))
            {
                return AstDbUpdateOptionEnum.ReadWrite;
            }
            return AstDbUpdateOptionEnum._undefined;
        }
    }
    
    /// <summary>
    /// db_user_access_option
    /// 	 : SINGLE_USER
    /// 	 | RESTRICTED_USER
    /// 	 | MULTI_USER
    /// </summary>
    public partial class AstDbUserAccessOption : AstTerminal<AstDbUserAccessOptionEnum>
    {
        
        public AstDbUserAccessOption(ITerminalNode t, string value) : 
                base(t, AstDbUserAccessOption.GetValue(value))
        {
        }
        
        public AstDbUserAccessOption(ITerminalNode t, AstDbUserAccessOptionEnum value) : 
                base(t, value)
        {
        }
        
        public AstDbUserAccessOption(ParserRuleContext ctx, string value) : 
                base(ctx, AstDbUserAccessOption.GetValue(value))
        {
        }
        
        public AstDbUserAccessOption(Position p, string value) : 
                base(p, AstDbUserAccessOption.GetValue(value))
        {
        }
        
        public AstDbUserAccessOption(Position p, AstDbUserAccessOptionEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbUserAccessOption(this);
        }
        
        protected static AstDbUserAccessOptionEnum GetValue(string value)
        {
            if ((value == "SINGLE_USER"))
            {
                return AstDbUserAccessOptionEnum.SingleUser;
            }
            if ((value == "RESTRICTED_USER"))
            {
                return AstDbUserAccessOptionEnum.RestrictedUser;
            }
            if ((value == "MULTI_USER"))
            {
                return AstDbUserAccessOptionEnum.MultiUser;
            }
            return AstDbUserAccessOptionEnum._undefined;
        }
    }
    
    /// <summary>
    /// compression
    /// 	 : (COMPRESSION | NO_COMPRESSION)
    /// </summary>
    public partial class AstCompression : AstTerminal<AstCompressionEnum>
    {
        
        public AstCompression(ITerminalNode t, string value) : 
                base(t, AstCompression.GetValue(value))
        {
        }
        
        public AstCompression(ITerminalNode t, AstCompressionEnum value) : 
                base(t, value)
        {
        }
        
        public AstCompression(ParserRuleContext ctx, string value) : 
                base(ctx, AstCompression.GetValue(value))
        {
        }
        
        public AstCompression(Position p, string value) : 
                base(p, AstCompression.GetValue(value))
        {
        }
        
        public AstCompression(Position p, AstCompressionEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCompression(this);
        }
        
        protected static AstCompressionEnum GetValue(string value)
        {
            if ((value == "COMPRESSION"))
            {
                return AstCompressionEnum.Compression;
            }
            if ((value == "NO_COMPRESSION"))
            {
                return AstCompressionEnum.NoCompression;
            }
            return AstCompressionEnum._undefined;
        }
    }
    
    /// <summary>
    /// init_no_init
    /// 	 : (NOINIT | INIT)
    /// </summary>
    public partial class AstInitNoInit : AstTerminal<AstInitNoInitEnum>
    {
        
        public AstInitNoInit(ITerminalNode t, string value) : 
                base(t, AstInitNoInit.GetValue(value))
        {
        }
        
        public AstInitNoInit(ITerminalNode t, AstInitNoInitEnum value) : 
                base(t, value)
        {
        }
        
        public AstInitNoInit(ParserRuleContext ctx, string value) : 
                base(ctx, AstInitNoInit.GetValue(value))
        {
        }
        
        public AstInitNoInit(Position p, string value) : 
                base(p, AstInitNoInit.GetValue(value))
        {
        }
        
        public AstInitNoInit(Position p, AstInitNoInitEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitInitNoInit(this);
        }
        
        protected static AstInitNoInitEnum GetValue(string value)
        {
            if ((value == "NOINIT"))
            {
                return AstInitNoInitEnum.Noinit;
            }
            if ((value == "INIT"))
            {
                return AstInitNoInitEnum.Init;
            }
            return AstInitNoInitEnum._undefined;
        }
    }
    
    /// <summary>
    /// no_skip
    /// 	 : (NOSKIP | SKIP_KEYWORD)
    /// </summary>
    public partial class AstNoSkip : AstTerminal<AstNoSkipEnum>
    {
        
        public AstNoSkip(ITerminalNode t, string value) : 
                base(t, AstNoSkip.GetValue(value))
        {
        }
        
        public AstNoSkip(ITerminalNode t, AstNoSkipEnum value) : 
                base(t, value)
        {
        }
        
        public AstNoSkip(ParserRuleContext ctx, string value) : 
                base(ctx, AstNoSkip.GetValue(value))
        {
        }
        
        public AstNoSkip(Position p, string value) : 
                base(p, AstNoSkip.GetValue(value))
        {
        }
        
        public AstNoSkip(Position p, AstNoSkipEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNoSkip(this);
        }
        
        protected static AstNoSkipEnum GetValue(string value)
        {
            if ((value == "NOSKIP"))
            {
                return AstNoSkipEnum.Noskip;
            }
            if ((value == "SKIP_KEYWORD"))
            {
                return AstNoSkipEnum.SkipKeyword;
            }
            return AstNoSkipEnum._undefined;
        }
    }
    
    /// <summary>
    /// format_noformat
    /// 	 : (NOFORMAT | FORMAT)
    /// </summary>
    public partial class AstFormatNoformat : AstTerminal<AstFormatNoformatEnum>
    {
        
        public AstFormatNoformat(ITerminalNode t, string value) : 
                base(t, AstFormatNoformat.GetValue(value))
        {
        }
        
        public AstFormatNoformat(ITerminalNode t, AstFormatNoformatEnum value) : 
                base(t, value)
        {
        }
        
        public AstFormatNoformat(ParserRuleContext ctx, string value) : 
                base(ctx, AstFormatNoformat.GetValue(value))
        {
        }
        
        public AstFormatNoformat(Position p, string value) : 
                base(p, AstFormatNoformat.GetValue(value))
        {
        }
        
        public AstFormatNoformat(Position p, AstFormatNoformatEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFormatNoformat(this);
        }
        
        protected static AstFormatNoformatEnum GetValue(string value)
        {
            if ((value == "NOFORMAT"))
            {
                return AstFormatNoformatEnum.Noformat;
            }
            if ((value == "FORMAT"))
            {
                return AstFormatNoformatEnum.Format;
            }
            return AstFormatNoformatEnum._undefined;
        }
    }
    
    /// <summary>
    /// disk_tape_url
    /// 	 : DISK
    /// 	 | TAPE
    /// 	 | URL
    /// </summary>
    public partial class AstDiskTapeUrl : AstTerminal<AstDiskTapeUrlEnum>
    {
        
        public AstDiskTapeUrl(ITerminalNode t, string value) : 
                base(t, AstDiskTapeUrl.GetValue(value))
        {
        }
        
        public AstDiskTapeUrl(ITerminalNode t, AstDiskTapeUrlEnum value) : 
                base(t, value)
        {
        }
        
        public AstDiskTapeUrl(ParserRuleContext ctx, string value) : 
                base(ctx, AstDiskTapeUrl.GetValue(value))
        {
        }
        
        public AstDiskTapeUrl(Position p, string value) : 
                base(p, AstDiskTapeUrl.GetValue(value))
        {
        }
        
        public AstDiskTapeUrl(Position p, AstDiskTapeUrlEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDiskTapeUrl(this);
        }
        
        protected static AstDiskTapeUrlEnum GetValue(string value)
        {
            if ((value == "DISK"))
            {
                return AstDiskTapeUrlEnum.Disk;
            }
            if ((value == "TAPE"))
            {
                return AstDiskTapeUrlEnum.Tape;
            }
            if ((value == "URL"))
            {
                return AstDiskTapeUrlEnum.Url;
            }
            return AstDiskTapeUrlEnum._undefined;
        }
    }
    
    /// <summary>
    /// file_file_group
    /// 	 : FILE
    /// 	 | FILEGROUP
    /// </summary>
    public partial class AstFileFileGroup : AstTerminal<AstFileFileGroupEnum>
    {
        
        public AstFileFileGroup(ITerminalNode t, string value) : 
                base(t, AstFileFileGroup.GetValue(value))
        {
        }
        
        public AstFileFileGroup(ITerminalNode t, AstFileFileGroupEnum value) : 
                base(t, value)
        {
        }
        
        public AstFileFileGroup(ParserRuleContext ctx, string value) : 
                base(ctx, AstFileFileGroup.GetValue(value))
        {
        }
        
        public AstFileFileGroup(Position p, string value) : 
                base(p, AstFileFileGroup.GetValue(value))
        {
        }
        
        public AstFileFileGroup(Position p, AstFileFileGroupEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileFileGroup(this);
        }
        
        protected static AstFileFileGroupEnum GetValue(string value)
        {
            if ((value == "FILE"))
            {
                return AstFileFileGroupEnum.File;
            }
            if ((value == "FILEGROUP"))
            {
                return AstFileFileGroupEnum.Filegroup;
            }
            return AstFileFileGroupEnum._undefined;
        }
    }
    
    /// <summary>
    /// load_moun_load
    /// 	 : LOAD
    /// 	 | NOUNLOAD
    /// </summary>
    public partial class AstLoadMounLoad : AstTerminal<AstLoadMounLoadEnum>
    {
        
        public AstLoadMounLoad(ITerminalNode t, string value) : 
                base(t, AstLoadMounLoad.GetValue(value))
        {
        }
        
        public AstLoadMounLoad(ITerminalNode t, AstLoadMounLoadEnum value) : 
                base(t, value)
        {
        }
        
        public AstLoadMounLoad(ParserRuleContext ctx, string value) : 
                base(ctx, AstLoadMounLoad.GetValue(value))
        {
        }
        
        public AstLoadMounLoad(Position p, string value) : 
                base(p, AstLoadMounLoad.GetValue(value))
        {
        }
        
        public AstLoadMounLoad(Position p, AstLoadMounLoadEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLoadMounLoad(this);
        }
        
        protected static AstLoadMounLoadEnum GetValue(string value)
        {
            if ((value == "LOAD"))
            {
                return AstLoadMounLoadEnum.Load;
            }
            if ((value == "NOUNLOAD"))
            {
                return AstLoadMounLoadEnum.Nounload;
            }
            return AstLoadMounLoadEnum._undefined;
        }
    }
    
    /// <summary>
    /// rewind
    /// 	 : REWIND
    /// 	 | NOREWIND
    /// </summary>
    public partial class AstRewind : AstTerminal<AstRewindEnum>
    {
        
        public AstRewind(ITerminalNode t, string value) : 
                base(t, AstRewind.GetValue(value))
        {
        }
        
        public AstRewind(ITerminalNode t, AstRewindEnum value) : 
                base(t, value)
        {
        }
        
        public AstRewind(ParserRuleContext ctx, string value) : 
                base(ctx, AstRewind.GetValue(value))
        {
        }
        
        public AstRewind(Position p, string value) : 
                base(p, AstRewind.GetValue(value))
        {
        }
        
        public AstRewind(Position p, AstRewindEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRewind(this);
        }
        
        protected static AstRewindEnum GetValue(string value)
        {
            if ((value == "REWIND"))
            {
                return AstRewindEnum.Rewind;
            }
            if ((value == "NOREWIND"))
            {
                return AstRewindEnum.Norewind;
            }
            return AstRewindEnum._undefined;
        }
    }
    
    /// <summary>
    /// algorithm_short
    /// 	 : AES_128
    /// 	 | AES_192
    /// 	 | AES_256
    /// 	 | TRIPLE_DES_3KEY
    /// </summary>
    public partial class AstAlgorithmShort : AstTerminal<AstAlgorithmShortEnum>
    {
        
        public AstAlgorithmShort(ITerminalNode t, string value) : 
                base(t, AstAlgorithmShort.GetValue(value))
        {
        }
        
        public AstAlgorithmShort(ITerminalNode t, AstAlgorithmShortEnum value) : 
                base(t, value)
        {
        }
        
        public AstAlgorithmShort(ParserRuleContext ctx, string value) : 
                base(ctx, AstAlgorithmShort.GetValue(value))
        {
        }
        
        public AstAlgorithmShort(Position p, string value) : 
                base(p, AstAlgorithmShort.GetValue(value))
        {
        }
        
        public AstAlgorithmShort(Position p, AstAlgorithmShortEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlgorithmShort(this);
        }
        
        protected static AstAlgorithmShortEnum GetValue(string value)
        {
            if ((value == "AES_128"))
            {
                return AstAlgorithmShortEnum.Aes128;
            }
            if ((value == "AES_192"))
            {
                return AstAlgorithmShortEnum.Aes192;
            }
            if ((value == "AES_256"))
            {
                return AstAlgorithmShortEnum.Aes256;
            }
            if ((value == "TRIPLE_DES_3KEY"))
            {
                return AstAlgorithmShortEnum.TripleDes3key;
            }
            return AstAlgorithmShortEnum._undefined;
        }
    }
    
    /// <summary>
    /// encryption_decryption
    /// 	 : DECRYPTION
    /// 	 | ENCRYPTION
    /// </summary>
    public partial class AstEncryptionDecryption : AstTerminal<AstEncryptionDecryptionEnum>
    {
        
        public AstEncryptionDecryption(ITerminalNode t, string value) : 
                base(t, AstEncryptionDecryption.GetValue(value))
        {
        }
        
        public AstEncryptionDecryption(ITerminalNode t, AstEncryptionDecryptionEnum value) : 
                base(t, value)
        {
        }
        
        public AstEncryptionDecryption(ParserRuleContext ctx, string value) : 
                base(ctx, AstEncryptionDecryption.GetValue(value))
        {
        }
        
        public AstEncryptionDecryption(Position p, string value) : 
                base(p, AstEncryptionDecryption.GetValue(value))
        {
        }
        
        public AstEncryptionDecryption(Position p, AstEncryptionDecryptionEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEncryptionDecryption(this);
        }
        
        protected static AstEncryptionDecryptionEnum GetValue(string value)
        {
            if ((value == "DECRYPTION"))
            {
                return AstEncryptionDecryptionEnum.Decryption;
            }
            if ((value == "ENCRYPTION"))
            {
                return AstEncryptionDecryptionEnum.Encryption;
            }
            return AstEncryptionDecryptionEnum._undefined;
        }
    }
    
    /// <summary>
    /// algorithm
    /// 	 : DES
    /// 	 | TRIPLE_DES
    /// 	 | TRIPLE_DES_3KEY
    /// 	 | RC2
    /// 	 | RC4
    /// 	 | RC4_128
    /// 	 | DESX
    /// 	 | AES_128
    /// 	 | AES_192
    /// 	 | AES_256
    /// </summary>
    public partial class AstAlgorithm : AstTerminal<AstAlgorithmEnum>
    {
        
        public AstAlgorithm(ITerminalNode t, string value) : 
                base(t, AstAlgorithm.GetValue(value))
        {
        }
        
        public AstAlgorithm(ITerminalNode t, AstAlgorithmEnum value) : 
                base(t, value)
        {
        }
        
        public AstAlgorithm(ParserRuleContext ctx, string value) : 
                base(ctx, AstAlgorithm.GetValue(value))
        {
        }
        
        public AstAlgorithm(Position p, string value) : 
                base(p, AstAlgorithm.GetValue(value))
        {
        }
        
        public AstAlgorithm(Position p, AstAlgorithmEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlgorithm(this);
        }
        
        protected static AstAlgorithmEnum GetValue(string value)
        {
            if ((value == "DES"))
            {
                return AstAlgorithmEnum.Des;
            }
            if ((value == "TRIPLE_DES"))
            {
                return AstAlgorithmEnum.TripleDes;
            }
            if ((value == "TRIPLE_DES_3KEY"))
            {
                return AstAlgorithmEnum.TripleDes3key;
            }
            if ((value == "RC2"))
            {
                return AstAlgorithmEnum.Rc2;
            }
            if ((value == "RC4"))
            {
                return AstAlgorithmEnum.Rc4;
            }
            if ((value == "RC4_128"))
            {
                return AstAlgorithmEnum.Rc4128;
            }
            if ((value == "DESX"))
            {
                return AstAlgorithmEnum.Desx;
            }
            if ((value == "AES_128"))
            {
                return AstAlgorithmEnum.Aes128;
            }
            if ((value == "AES_192"))
            {
                return AstAlgorithmEnum.Aes192;
            }
            if ((value == "AES_256"))
            {
                return AstAlgorithmEnum.Aes256;
            }
            return AstAlgorithmEnum._undefined;
        }
    }
    
    /// <summary>
    /// transaction
    /// 	 : TRAN
    /// 	 | TRANSACTION
    /// </summary>
    public partial class AstTransaction : AstTerminal<AstTransactionEnum>
    {
        
        public AstTransaction(ITerminalNode t, string value) : 
                base(t, AstTransaction.GetValue(value))
        {
        }
        
        public AstTransaction(ITerminalNode t, AstTransactionEnum value) : 
                base(t, value)
        {
        }
        
        public AstTransaction(ParserRuleContext ctx, string value) : 
                base(ctx, AstTransaction.GetValue(value))
        {
        }
        
        public AstTransaction(Position p, string value) : 
                base(p, AstTransaction.GetValue(value))
        {
        }
        
        public AstTransaction(Position p, AstTransactionEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTransaction(this);
        }
        
        protected static AstTransactionEnum GetValue(string value)
        {
            if ((value == "TRAN"))
            {
                return AstTransactionEnum.Tran;
            }
            if ((value == "TRANSACTION"))
            {
                return AstTransactionEnum.Transaction;
            }
            return AstTransactionEnum._undefined;
        }
    }
    
    /// <summary>
    /// sensitive
    /// 	 : SEMI_SENSITIVE
    /// 	 | INSENSITIVE
    /// </summary>
    public partial class AstSensitive : AstTerminal<AstSensitiveEnum>
    {
        
        public AstSensitive(ITerminalNode t, string value) : 
                base(t, AstSensitive.GetValue(value))
        {
        }
        
        public AstSensitive(ITerminalNode t, AstSensitiveEnum value) : 
                base(t, value)
        {
        }
        
        public AstSensitive(ParserRuleContext ctx, string value) : 
                base(ctx, AstSensitive.GetValue(value))
        {
        }
        
        public AstSensitive(Position p, string value) : 
                base(p, AstSensitive.GetValue(value))
        {
        }
        
        public AstSensitive(Position p, AstSensitiveEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSensitive(this);
        }
        
        protected static AstSensitiveEnum GetValue(string value)
        {
            if ((value == "SEMI_SENSITIVE"))
            {
                return AstSensitiveEnum.SemiSensitive;
            }
            if ((value == "INSENSITIVE"))
            {
                return AstSensitiveEnum.Insensitive;
            }
            return AstSensitiveEnum._undefined;
        }
    }
    
    /// <summary>
    /// absolute_relative
    /// 	 : ABSOLUTE
    /// 	 | RELATIVE
    /// </summary>
    public partial class AstAbsoluteRelative : AstTerminal<AstAbsoluteRelativeEnum>
    {
        
        public AstAbsoluteRelative(ITerminalNode t, string value) : 
                base(t, AstAbsoluteRelative.GetValue(value))
        {
        }
        
        public AstAbsoluteRelative(ITerminalNode t, AstAbsoluteRelativeEnum value) : 
                base(t, value)
        {
        }
        
        public AstAbsoluteRelative(ParserRuleContext ctx, string value) : 
                base(ctx, AstAbsoluteRelative.GetValue(value))
        {
        }
        
        public AstAbsoluteRelative(Position p, string value) : 
                base(p, AstAbsoluteRelative.GetValue(value))
        {
        }
        
        public AstAbsoluteRelative(Position p, AstAbsoluteRelativeEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAbsoluteRelative(this);
        }
        
        protected static AstAbsoluteRelativeEnum GetValue(string value)
        {
            if ((value == "ABSOLUTE"))
            {
                return AstAbsoluteRelativeEnum.Absolute;
            }
            if ((value == "RELATIVE"))
            {
                return AstAbsoluteRelativeEnum.Relative;
            }
            return AstAbsoluteRelativeEnum._undefined;
        }
    }
    
    /// <summary>
    /// fetch_cursor_strategy
    /// 	 : NEXT
    /// 	 | PRIOR
    /// 	 | FIRST
    /// 	 | LAST
    /// </summary>
    public partial class AstFetchCursorStrategy : AstTerminal<AstFetchCursorStrategyEnum>
    {
        
        public AstFetchCursorStrategy(ITerminalNode t, string value) : 
                base(t, AstFetchCursorStrategy.GetValue(value))
        {
        }
        
        public AstFetchCursorStrategy(ITerminalNode t, AstFetchCursorStrategyEnum value) : 
                base(t, value)
        {
        }
        
        public AstFetchCursorStrategy(ParserRuleContext ctx, string value) : 
                base(ctx, AstFetchCursorStrategy.GetValue(value))
        {
        }
        
        public AstFetchCursorStrategy(Position p, string value) : 
                base(p, AstFetchCursorStrategy.GetValue(value))
        {
        }
        
        public AstFetchCursorStrategy(Position p, AstFetchCursorStrategyEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFetchCursorStrategy(this);
        }
        
        protected static AstFetchCursorStrategyEnum GetValue(string value)
        {
            if ((value == "NEXT"))
            {
                return AstFetchCursorStrategyEnum.Next;
            }
            if ((value == "PRIOR"))
            {
                return AstFetchCursorStrategyEnum.Prior;
            }
            if ((value == "FIRST"))
            {
                return AstFetchCursorStrategyEnum.First;
            }
            if ((value == "LAST"))
            {
                return AstFetchCursorStrategyEnum.Last;
            }
            return AstFetchCursorStrategyEnum._undefined;
        }
    }
    
    /// <summary>
    /// special_list
    /// 	 : ANSI_NULLS
    /// 	 | QUOTED_IDENTIFIER
    /// 	 | ANSI_PADDING
    /// 	 | ANSI_WARNINGS
    /// 	 | ANSI_DEFAULTS
    /// 	 | ANSI_NULL_DFLT_OFF
    /// 	 | ANSI_NULL_DFLT_ON
    /// 	 | ARITHABORT
    /// 	 | ARITHIGNORE
    /// 	 | CONCAT_NULL_YIELDS_NULL
    /// 	 | CURSOR_CLOSE_ON_COMMIT
    /// 	 | FMTONLY
    /// 	 | FORCEPLAN
    /// 	 | IMPLICIT_TRANSACTIONS
    /// 	 | NOCOUNT
    /// 	 | NOEXEC
    /// 	 | NUMERIC_ROUNDABORT
    /// 	 | PARSEONLY
    /// 	 | REMOTE_PROC_TRANSACTIONS
    /// 	 | SHOWPLAN_ALL
    /// 	 | SHOWPLAN_TEXT
    /// 	 | SHOWPLAN_XML
    /// 	 | XACT_ABORT
    /// </summary>
    public partial class AstSpecialList : AstTerminal<AstSpecialListEnum>
    {
        
        public AstSpecialList(ITerminalNode t, string value) : 
                base(t, AstSpecialList.GetValue(value))
        {
        }
        
        public AstSpecialList(ITerminalNode t, AstSpecialListEnum value) : 
                base(t, value)
        {
        }
        
        public AstSpecialList(ParserRuleContext ctx, string value) : 
                base(ctx, AstSpecialList.GetValue(value))
        {
        }
        
        public AstSpecialList(Position p, string value) : 
                base(p, AstSpecialList.GetValue(value))
        {
        }
        
        public AstSpecialList(Position p, AstSpecialListEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSpecialList(this);
        }
        
        protected static AstSpecialListEnum GetValue(string value)
        {
            if ((value == "ANSI_NULLS"))
            {
                return AstSpecialListEnum.AnsiNulls;
            }
            if ((value == "QUOTED_IDENTIFIER"))
            {
                return AstSpecialListEnum.QuotedIdentifier;
            }
            if ((value == "ANSI_PADDING"))
            {
                return AstSpecialListEnum.AnsiPadding;
            }
            if ((value == "ANSI_WARNINGS"))
            {
                return AstSpecialListEnum.AnsiWarnings;
            }
            if ((value == "ANSI_DEFAULTS"))
            {
                return AstSpecialListEnum.AnsiDefaults;
            }
            if ((value == "ANSI_NULL_DFLT_OFF"))
            {
                return AstSpecialListEnum.AnsiNullDfltOff;
            }
            if ((value == "ANSI_NULL_DFLT_ON"))
            {
                return AstSpecialListEnum.AnsiNullDfltOn;
            }
            if ((value == "ARITHABORT"))
            {
                return AstSpecialListEnum.Arithabort;
            }
            if ((value == "ARITHIGNORE"))
            {
                return AstSpecialListEnum.Arithignore;
            }
            if ((value == "CONCAT_NULL_YIELDS_NULL"))
            {
                return AstSpecialListEnum.ConcatNullYieldsNull;
            }
            if ((value == "CURSOR_CLOSE_ON_COMMIT"))
            {
                return AstSpecialListEnum.CursorCloseOnCommit;
            }
            if ((value == "FMTONLY"))
            {
                return AstSpecialListEnum.Fmtonly;
            }
            if ((value == "FORCEPLAN"))
            {
                return AstSpecialListEnum.Forceplan;
            }
            if ((value == "IMPLICIT_TRANSACTIONS"))
            {
                return AstSpecialListEnum.ImplicitTransactions;
            }
            if ((value == "NOCOUNT"))
            {
                return AstSpecialListEnum.Nocount;
            }
            if ((value == "NOEXEC"))
            {
                return AstSpecialListEnum.Noexec;
            }
            if ((value == "NUMERIC_ROUNDABORT"))
            {
                return AstSpecialListEnum.NumericRoundabort;
            }
            if ((value == "PARSEONLY"))
            {
                return AstSpecialListEnum.Parseonly;
            }
            if ((value == "REMOTE_PROC_TRANSACTIONS"))
            {
                return AstSpecialListEnum.RemoteProcTransactions;
            }
            if ((value == "SHOWPLAN_ALL"))
            {
                return AstSpecialListEnum.ShowplanAll;
            }
            if ((value == "SHOWPLAN_TEXT"))
            {
                return AstSpecialListEnum.ShowplanText;
            }
            if ((value == "SHOWPLAN_XML"))
            {
                return AstSpecialListEnum.ShowplanXml;
            }
            if ((value == "XACT_ABORT"))
            {
                return AstSpecialListEnum.XactAbort;
            }
            return AstSpecialListEnum._undefined;
        }
    }
    
    /// <summary>
    /// sybase_legacy_hint
    /// 	 : HOLDLOCK
    /// 	 | NOHOLDLOCK
    /// 	 | READPAST
    /// 	 | SHARED
    /// </summary>
    public partial class AstSybaseLegacyHint : AstTerminal<AstSybaseLegacyHintEnum>
    {
        
        public AstSybaseLegacyHint(ITerminalNode t, string value) : 
                base(t, AstSybaseLegacyHint.GetValue(value))
        {
        }
        
        public AstSybaseLegacyHint(ITerminalNode t, AstSybaseLegacyHintEnum value) : 
                base(t, value)
        {
        }
        
        public AstSybaseLegacyHint(ParserRuleContext ctx, string value) : 
                base(ctx, AstSybaseLegacyHint.GetValue(value))
        {
        }
        
        public AstSybaseLegacyHint(Position p, string value) : 
                base(p, AstSybaseLegacyHint.GetValue(value))
        {
        }
        
        public AstSybaseLegacyHint(Position p, AstSybaseLegacyHintEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSybaseLegacyHint(this);
        }
        
        protected static AstSybaseLegacyHintEnum GetValue(string value)
        {
            if ((value == "HOLDLOCK"))
            {
                return AstSybaseLegacyHintEnum.Holdlock;
            }
            if ((value == "NOHOLDLOCK"))
            {
                return AstSybaseLegacyHintEnum.Noholdlock;
            }
            if ((value == "READPAST"))
            {
                return AstSybaseLegacyHintEnum.Readpast;
            }
            if ((value == "SHARED"))
            {
                return AstSybaseLegacyHintEnum.Shared;
            }
            return AstSybaseLegacyHintEnum._undefined;
        }
    }
    
    /// <summary>
    /// asc_desc
    /// 	 : ASC
    /// 	 | DESC
    /// </summary>
    public partial class AstAscDesc : AstTerminal<AstAscDescEnum>
    {
        
        public AstAscDesc(ITerminalNode t, string value) : 
                base(t, AstAscDesc.GetValue(value))
        {
        }
        
        public AstAscDesc(ITerminalNode t, AstAscDescEnum value) : 
                base(t, value)
        {
        }
        
        public AstAscDesc(ParserRuleContext ctx, string value) : 
                base(ctx, AstAscDesc.GetValue(value))
        {
        }
        
        public AstAscDesc(Position p, string value) : 
                base(p, AstAscDesc.GetValue(value))
        {
        }
        
        public AstAscDesc(Position p, AstAscDescEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAscDesc(this);
        }
        
        protected static AstAscDescEnum GetValue(string value)
        {
            if ((value == "ASC"))
            {
                return AstAscDescEnum.Asc;
            }
            if ((value == "DESC"))
            {
                return AstAscDescEnum.Desc;
            }
            return AstAscDescEnum._undefined;
        }
    }
    
    /// <summary>
    /// on_off
    /// 	 : ON
    /// 	 | OFF
    /// </summary>
    public partial class AstOnOff : AstTerminal<AstOnOffEnum>
    {
        
        public AstOnOff(ITerminalNode t, string value) : 
                base(t, AstOnOff.GetValue(value))
        {
        }
        
        public AstOnOff(ITerminalNode t, AstOnOffEnum value) : 
                base(t, value)
        {
        }
        
        public AstOnOff(ParserRuleContext ctx, string value) : 
                base(ctx, AstOnOff.GetValue(value))
        {
        }
        
        public AstOnOff(Position p, string value) : 
                base(p, AstOnOff.GetValue(value))
        {
        }
        
        public AstOnOff(Position p, AstOnOffEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnOff(this);
        }
        
        protected static AstOnOffEnum GetValue(string value)
        {
            if ((value == "ON"))
            {
                return AstOnOffEnum.On;
            }
            if ((value == "OFF"))
            {
                return AstOnOffEnum.Off;
            }
            return AstOnOffEnum._undefined;
        }
    }
    
    /// <summary>
    /// clustered
    /// 	 : CLUSTERED
    /// 	 | NONCLUSTERED
    /// </summary>
    public partial class AstClustered : AstTerminal<AstClusteredEnum>
    {
        
        public AstClustered(ITerminalNode t, string value) : 
                base(t, AstClustered.GetValue(value))
        {
        }
        
        public AstClustered(ITerminalNode t, AstClusteredEnum value) : 
                base(t, value)
        {
        }
        
        public AstClustered(ParserRuleContext ctx, string value) : 
                base(ctx, AstClustered.GetValue(value))
        {
        }
        
        public AstClustered(Position p, string value) : 
                base(p, AstClustered.GetValue(value))
        {
        }
        
        public AstClustered(Position p, AstClusteredEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClustered(this);
        }
        
        protected static AstClusteredEnum GetValue(string value)
        {
            if ((value == "CLUSTERED"))
            {
                return AstClusteredEnum.Clustered;
            }
            if ((value == "NONCLUSTERED"))
            {
                return AstClusteredEnum.Nonclustered;
            }
            return AstClusteredEnum._undefined;
        }
    }
    
    /// <summary>
    /// sign
    /// 	 : PLUS
    /// 	 | MINUS
    /// </summary>
    public partial class AstSign : AstTerminal<AstSignEnum>
    {
        
        public AstSign(ITerminalNode t, string value) : 
                base(t, AstSign.GetValue(value))
        {
        }
        
        public AstSign(ITerminalNode t, AstSignEnum value) : 
                base(t, value)
        {
        }
        
        public AstSign(ParserRuleContext ctx, string value) : 
                base(ctx, AstSign.GetValue(value))
        {
        }
        
        public AstSign(Position p, string value) : 
                base(p, AstSign.GetValue(value))
        {
        }
        
        public AstSign(Position p, AstSignEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSign(this);
        }
        
        protected static AstSignEnum GetValue(string value)
        {
            if ((value == "PLUS"))
            {
                return AstSignEnum.Plus;
            }
            if ((value == "MINUS"))
            {
                return AstSignEnum.Minus;
            }
            return AstSignEnum._undefined;
        }
    }
    
    /// <summary>
    /// keyword
    /// 	 : ABORT
    /// 	 | ABSOLUTE
    /// 	 | ACCENT_SENSITIVITY
    /// 	 | ACCESS
    /// 	 | ACTION
    /// 	 | ACTIVATION
    /// 	 | ACTIVE
    /// 	 | ADD
    /// 	 | ADDRESS
    /// 	 | AES_128
    /// 	 | AES_192
    /// 	 | AES_256
    /// 	 | AFFINITY
    /// 	 | AFTER
    /// 	 | AGGREGATE
    /// 	 | ALGORITHM
    /// 	 | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS
    /// 	 | ALLOW_PAGE_LOCKS
    /// 	 | ALLOW_ROW_LOCKS
    /// 	 | ALLOW_SNAPSHOT_ISOLATION
    /// 	 | ALLOWED
    /// 	 | ALWAYS
    /// 	 | ANSI_DEFAULTS
    /// 	 | ANSI_NULL_DEFAULT
    /// 	 | ANSI_NULL_DFLT_OFF
    /// 	 | ANSI_NULL_DFLT_ON
    /// 	 | ANSI_NULLS
    /// 	 | ANSI_PADDING
    /// 	 | ANSI_WARNINGS
    /// 	 | APP_NAME
    /// 	 | APPLICATION_LOG
    /// 	 | APPLOCK_MODE
    /// 	 | APPLOCK_TEST
    /// 	 | APPLY
    /// 	 | ARITHABORT
    /// 	 | ARITHIGNORE
    /// 	 | ASCII
    /// 	 | ASSEMBLY
    /// 	 | ASSEMBLYPROPERTY
    /// 	 | AT_KEYWORD
    /// 	 | AUDIT
    /// 	 | AUDIT_GUID
    /// 	 | AUTO
    /// 	 | AUTO_CLEANUP
    /// 	 | AUTO_CLOSE
    /// 	 | AUTO_CREATE_STATISTICS
    /// 	 | AUTO_DROP
    /// 	 | AUTO_SHRINK
    /// 	 | AUTO_UPDATE_STATISTICS
    /// 	 | AUTO_UPDATE_STATISTICS_ASYNC
    /// 	 | AUTOGROW_ALL_FILES
    /// 	 | AUTOGROW_SINGLE_FILE
    /// 	 | AVAILABILITY
    /// 	 | AVG
    /// 	 | BACKUP_PRIORITY
    /// 	 | BASE64
    /// 	 | BEGIN_DIALOG
    /// 	 | BIGINT
    /// 	 | BINARY_KEYWORD
    /// 	 | BINARY_CHECKSUM
    /// 	 | BINDING
    /// 	 | BLOB_STORAGE
    /// 	 | BROKER
    /// 	 | BROKER_INSTANCE
    /// 	 | BULK_LOGGED
    /// 	 | CALLER
    /// 	 | CAP_CPU_PERCENT
    /// 	 | CAST
    /// 	 | TRY_CAST
    /// 	 | CATALOG
    /// 	 | CATCH
    /// 	 | CHANGE
    /// 	 | CHANGE_RETENTION
    /// 	 | CHANGE_TRACKING
    /// 	 | CHAR
    /// 	 | CHARINDEX
    /// 	 | CHECKSUM
    /// 	 | CHECKSUM_AGG
    /// 	 | CLEANUP
    /// 	 | COL_LENGTH
    /// 	 | COL_NAME
    /// 	 | COLLECTION
    /// 	 | COLUMN_ENCRYPTION_KEY
    /// 	 | COLUMN_MASTER_KEY
    /// 	 | COLUMNPROPERTY
    /// 	 | COLUMNS
    /// 	 | COLUMNSTORE
    /// 	 | COLUMNSTORE_ARCHIVE
    /// 	 | COMMITTED
    /// 	 | COMPATIBILITY_LEVEL
    /// 	 | COMPRESS_ALL_ROW_GROUPS
    /// 	 | COMPRESSION_DELAY
    /// 	 | CONCAT
    /// 	 | CONCAT_WS
    /// 	 | CONCAT_NULL_YIELDS_NULL
    /// 	 | CONTENT
    /// 	 | CONTROL
    /// 	 | COOKIE
    /// 	 | COUNT
    /// 	 | COUNT_BIG
    /// 	 | COUNTER
    /// 	 | CPU
    /// 	 | CREATE_NEW
    /// 	 | CREATION_DISPOSITION
    /// 	 | CREDENTIAL
    /// 	 | CRYPTOGRAPHIC
    /// 	 | CUME_DIST
    /// 	 | CURSOR_CLOSE_ON_COMMIT
    /// 	 | CURSOR_DEFAULT
    /// 	 | DATA
    /// 	 | DATABASE_PRINCIPAL_ID
    /// 	 | DATABASEPROPERTYEX
    /// 	 | DATE_CORRELATION_OPTIMIZATION
    /// 	 | DATEADD
    /// 	 | DATEDIFF
    /// 	 | DATENAME
    /// 	 | DATEPART
    /// 	 | DAYS
    /// 	 | DB_CHAINING
    /// 	 | DB_FAILOVER
    /// 	 | DB_ID
    /// 	 | DB_NAME
    /// 	 | DECRYPTION
    /// 	 | DEFAULT_DOUBLE_QUOTE
    /// 	 | DEFAULT_FULLTEXT_LANGUAGE
    /// 	 | DEFAULT_LANGUAGE
    /// 	 | DEFINITION
    /// 	 | DELAY
    /// 	 | DELAYED_DURABILITY
    /// 	 | DELETED
    /// 	 | DENSE_RANK
    /// 	 | DEPENDENTS
    /// 	 | DES
    /// 	 | DESCRIPTION
    /// 	 | DESX
    /// 	 | DETERMINISTIC
    /// 	 | DHCP
    /// 	 | DIALOG
    /// 	 | DIFFERENCE
    /// 	 | DIRECTORY_NAME
    /// 	 | DISABLE
    /// 	 | DISABLE_BROKER
    /// 	 | DISABLED
    /// 	 | DOCUMENT
    /// 	 | DROP_EXISTING
    /// 	 | DYNAMIC
    /// 	 | ELEMENTS
    /// 	 | EMERGENCY
    /// 	 | EMPTY
    /// 	 | ENABLE
    /// 	 | ENABLE_BROKER
    /// 	 | ENCRYPTED
    /// 	 | ENCRYPTED_VALUE
    /// 	 | ENCRYPTION
    /// 	 | ENCRYPTION_TYPE
    /// 	 | ENDPOINT_URL
    /// 	 | ERROR_BROKER_CONVERSATIONS
    /// 	 | EXCLUSIVE
    /// 	 | EXECUTABLE
    /// 	 | EXIST
    /// 	 | EXPAND
    /// 	 | EXPIRY_DATE
    /// 	 | EXPLICIT
    /// 	 | FAIL_OPERATION
    /// 	 | FAILOVER_MODE
    /// 	 | FAILURE
    /// 	 | FAILURE_CONDITION_LEVEL
    /// 	 | FAST
    /// 	 | FAST_FORWARD
    /// 	 | FILE_ID
    /// 	 | FILE_IDEX
    /// 	 | FILE_NAME
    /// 	 | FILEGROUP
    /// 	 | FILEGROUP_ID
    /// 	 | FILEGROUP_NAME
    /// 	 | FILEGROUPPROPERTY
    /// 	 | FILEGROWTH
    /// 	 | FILENAME
    /// 	 | FILEPATH
    /// 	 | FILEPROPERTY
    /// 	 | FILEPROPERTYEX
    /// 	 | FILESTREAM
    /// 	 | FILTER
    /// 	 | FIRST
    /// 	 | FIRST_VALUE
    /// 	 | FMTONLY
    /// 	 | FOLLOWING
    /// 	 | FORCE
    /// 	 | FORCE_FAILOVER_ALLOW_DATA_LOSS
    /// 	 | FORCED
    /// 	 | FORCEPLAN
    /// 	 | FORCESCAN
    /// 	 | FORMAT
    /// 	 | FORWARD_ONLY
    /// 	 | FULLSCAN
    /// 	 | FULLTEXT
    /// 	 | FULLTEXTCATALOGPROPERTY
    /// 	 | FULLTEXTSERVICEPROPERTY
    /// 	 | GB
    /// 	 | GENERATED
    /// 	 | GETDATE
    /// 	 | GETUTCDATE
    /// 	 | GLOBAL
    /// 	 | GO
    /// 	 | GROUP_MAX_REQUESTS
    /// 	 | GROUPING
    /// 	 | GROUPING_ID
    /// 	 | HADR
    /// 	 | HASH
    /// 	 | HEALTH_CHECK_TIMEOUT
    /// 	 | HIDDEN_KEYWORD
    /// 	 | HIGH
    /// 	 | HONOR_BROKER_PRIORITY
    /// 	 | HOURS
    /// 	 | IDENTITY_VALUE
    /// 	 | IGNORE_CONSTRAINTS
    /// 	 | IGNORE_DUP_KEY
    /// 	 | IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX
    /// 	 | IGNORE_TRIGGERS
    /// 	 | IMMEDIATE
    /// 	 | IMPERSONATE
    /// 	 | IMPLICIT_TRANSACTIONS
    /// 	 | IMPORTANCE
    /// 	 | INCLUDE_NULL_VALUES
    /// 	 | INCREMENTAL
    /// 	 | INDEX_COL
    /// 	 | INDEXKEY_PROPERTY
    /// 	 | INDEXPROPERTY
    /// 	 | INITIATOR
    /// 	 | INPUT
    /// 	 | INSENSITIVE
    /// 	 | INSERTED
    /// 	 | INT
    /// 	 | IP
    /// 	 | ISOLATION
    /// 	 | JOB
    /// 	 | JSON
    /// 	 | KB
    /// 	 | KEEP
    /// 	 | KEEPDEFAULTS
    /// 	 | KEEPFIXED
    /// 	 | KEEPIDENTITY
    /// 	 | KEY_SOURCE
    /// 	 | KEYS
    /// 	 | KEYSET
    /// 	 | LAG
    /// 	 | LAST
    /// 	 | LAST_VALUE
    /// 	 | LEAD
    /// 	 | LEN
    /// 	 | LEVEL
    /// 	 | LIST
    /// 	 | LISTENER
    /// 	 | LISTENER_URL
    /// 	 | LOB_COMPACTION
    /// 	 | LOCAL
    /// 	 | LOCATION
    /// 	 | LOCK
    /// 	 | LOCK_ESCALATION
    /// 	 | LOGIN
    /// 	 | LOOP
    /// 	 | LOW
    /// 	 | LOWER
    /// 	 | LTRIM
    /// 	 | MANUAL
    /// 	 | MARK
    /// 	 | MASKED
    /// 	 | MATERIALIZED
    /// 	 | MAX
    /// 	 | MAX_CPU_PERCENT
    /// 	 | MAX_DOP
    /// 	 | MAX_FILES
    /// 	 | MAX_IOPS_PER_VOLUME
    /// 	 | MAX_MEMORY_PERCENT
    /// 	 | MAX_PROCESSES
    /// 	 | MAX_QUEUE_READERS
    /// 	 | MAX_ROLLOVER_FILES
    /// 	 | MAXDOP
    /// 	 | MAXRECURSION
    /// 	 | MAXSIZE
    /// 	 | MB
    /// 	 | MEDIUM
    /// 	 | MEMORY_OPTIMIZED_DATA
    /// 	 | MESSAGE
    /// 	 | MIN
    /// 	 | MIN_ACTIVE_ROWVERSION
    /// 	 | MIN_CPU_PERCENT
    /// 	 | MIN_IOPS_PER_VOLUME
    /// 	 | MIN_MEMORY_PERCENT
    /// 	 | MINUTES
    /// 	 | MIRROR_ADDRESS
    /// 	 | MIXED_PAGE_ALLOCATION
    /// 	 | MODE
    /// 	 | MODIFY
    /// 	 | MOVE
    /// 	 | MULTI_USER
    /// 	 | NAME
    /// 	 | NCHAR
    /// 	 | NESTED_TRIGGERS
    /// 	 | NEW_ACCOUNT
    /// 	 | NEW_BROKER
    /// 	 | NEW_PASSWORD
    /// 	 | NEWNAME
    /// 	 | NEXT
    /// 	 | NO
    /// 	 | NO_TRUNCATE
    /// 	 | NO_WAIT
    /// 	 | NOCOUNT
    /// 	 | NODES
    /// 	 | NOEXEC
    /// 	 | NOEXPAND
    /// 	 | NOLOCK
    /// 	 | NON_TRANSACTED_ACCESS
    /// 	 | NORECOMPUTE
    /// 	 | NORECOVERY
    /// 	 | NOTIFICATIONS
    /// 	 | NOWAIT
    /// 	 | NTILE
    /// 	 | NULL_DOUBLE_QUOTE
    /// 	 | NUMANODE
    /// 	 | NUMBER
    /// 	 | NUMERIC_ROUNDABORT
    /// 	 | OBJECT
    /// 	 | OBJECT_DEFINITION
    /// 	 | OBJECT_ID
    /// 	 | OBJECT_NAME
    /// 	 | OBJECT_SCHEMA_NAME
    /// 	 | OBJECTPROPERTY
    /// 	 | OBJECTPROPERTYEX
    /// 	 | OFFLINE
    /// 	 | OFFSET
    /// 	 | OLD_ACCOUNT
    /// 	 | ONLINE
    /// 	 | ONLY
    /// 	 | OPEN_EXISTING
    /// 	 | OPENJSON
    /// 	 | OPTIMISTIC
    /// 	 | OPTIMIZE
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY
    /// 	 | ORIGINAL_DB_NAME
    /// 	 | OUT
    /// 	 | OUTPUT
    /// 	 | OVERRIDE
    /// 	 | OWNER
    /// 	 | OWNERSHIP
    /// 	 | PAD_INDEX
    /// 	 | PAGE_VERIFY
    /// 	 | PAGECOUNT
    /// 	 | PAGLOCK
    /// 	 | PARAMETERIZATION
    /// 	 | PARSENAME
    /// 	 | PARSEONLY
    /// 	 | PARTITION
    /// 	 | PARTITIONS
    /// 	 | PARTNER
    /// 	 | PATH
    /// 	 | PATINDEX
    /// 	 | PAUSE
    /// 	 | PERCENT_RANK
    /// 	 | PERCENTILE_CONT
    /// 	 | PERCENTILE_DISC
    /// 	 | PERSIST_SAMPLE_PERCENT
    /// 	 | POISON_MESSAGE_HANDLING
    /// 	 | POOL
    /// 	 | PORT
    /// 	 | PRECEDING
    /// 	 | PRIMARY_ROLE
    /// 	 | PRIOR
    /// 	 | PRIORITY
    /// 	 | PRIORITY_LEVEL
    /// 	 | PRIVATE
    /// 	 | PRIVATE_KEY
    /// 	 | PRIVILEGES
    /// 	 | PROCEDURE_NAME
    /// 	 | PROPERTY
    /// 	 | PROVIDER
    /// 	 | PROVIDER_KEY_NAME
    /// 	 | QUERY
    /// 	 | QUEUE
    /// 	 | QUEUE_DELAY
    /// 	 | QUOTED_IDENTIFIER
    /// 	 | QUOTENAME
    /// 	 | RANDOMIZED
    /// 	 | RANGE
    /// 	 | RANK
    /// 	 | RC2
    /// 	 | RC4
    /// 	 | RC4_128
    /// 	 | READ_COMMITTED_SNAPSHOT
    /// 	 | READ_ONLY
    /// 	 | READ_ONLY_ROUTING_LIST
    /// 	 | READ_WRITE
    /// 	 | READCOMMITTED
    /// 	 | READCOMMITTEDLOCK
    /// 	 | READONLY
    /// 	 | READPAST
    /// 	 | READUNCOMMITTED
    /// 	 | READWRITE
    /// 	 | REBUILD
    /// 	 | RECEIVE
    /// 	 | RECOMPILE
    /// 	 | RECOVERY
    /// 	 | RECURSIVE_TRIGGERS
    /// 	 | RELATIVE
    /// 	 | REMOTE
    /// 	 | REMOTE_PROC_TRANSACTIONS
    /// 	 | REMOTE_SERVICE_NAME
    /// 	 | REMOVE
    /// 	 | REORGANIZE
    /// 	 | REPEATABLE
    /// 	 | REPEATABLEREAD
    /// 	 | REPLACE
    /// 	 | REPLICA
    /// 	 | REPLICATE
    /// 	 | REQUEST_MAX_CPU_TIME_SEC
    /// 	 | REQUEST_MAX_MEMORY_GRANT_PERCENT
    /// 	 | REQUEST_MEMORY_GRANT_TIMEOUT_SEC
    /// 	 | REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT
    /// 	 | RESAMPLE
    /// 	 | RESERVE_DISK_SPACE
    /// 	 | RESOURCE
    /// 	 | RESOURCE_MANAGER_LOCATION
    /// 	 | RESTRICTED_USER
    /// 	 | RESUMABLE
    /// 	 | RETENTION
    /// 	 | REVERSE
    /// 	 | ROBUST
    /// 	 | ROOT
    /// 	 | ROUTE
    /// 	 | ROW
    /// 	 | ROW_NUMBER
    /// 	 | ROWGUID
    /// 	 | ROWLOCK
    /// 	 | ROWS
    /// 	 | RTRIM
    /// 	 | SAMPLE
    /// 	 | SCHEMA_ID
    /// 	 | SCHEMA_NAME
    /// 	 | SCHEMABINDING
    /// 	 | SCOPE_IDENTITY
    /// 	 | SCOPED
    /// 	 | SCROLL
    /// 	 | SCROLL_LOCKS
    /// 	 | SEARCH
    /// 	 | SECONDARY
    /// 	 | SECONDARY_ONLY
    /// 	 | SECONDARY_ROLE
    /// 	 | SECONDS
    /// 	 | SECRET
    /// 	 | SECURABLES
    /// 	 | SECURITY
    /// 	 | SECURITY_LOG
    /// 	 | SEEDING_MODE
    /// 	 | SELF
    /// 	 | SEMI_SENSITIVE
    /// 	 | SEND
    /// 	 | SENT
    /// 	 | SEQUENCE
    /// 	 | SEQUENCE_NUMBER
    /// 	 | SERIALIZABLE
    /// 	 | SERVERPROPERTY
    /// 	 | SESSION_TIMEOUT
    /// 	 | SETERROR
    /// 	 | SHARE
    /// 	 | SHARED
    /// 	 | SHOWPLAN
    /// 	 | SHOWPLAN_ALL
    /// 	 | SHOWPLAN_TEXT
    /// 	 | SHOWPLAN_XML
    /// 	 | SIGNATURE
    /// 	 | SIMPLE
    /// 	 | SINGLE_USER
    /// 	 | SIZE
    /// 	 | SMALLINT
    /// 	 | SNAPSHOT
    /// 	 | SORT_IN_TEMPDB
    /// 	 | SOUNDEX
    /// 	 | SPACE_KEYWORD
    /// 	 | SPARSE
    /// 	 | SPATIAL_WINDOW_MAX_CELLS
    /// 	 | STANDBY
    /// 	 | START_DATE
    /// 	 | STATIC
    /// 	 | STATISTICS_INCREMENTAL
    /// 	 | STATISTICS_NORECOMPUTE
    /// 	 | STATS_DATE
    /// 	 | STATS_STREAM
    /// 	 | STATUS
    /// 	 | STATUSONLY
    /// 	 | STDEV
    /// 	 | STDEVP
    /// 	 | STOPLIST
    /// 	 | STR
    /// 	 | STRING_AGG
    /// 	 | STRING_ESCAPE
    /// 	 | STUFF
    /// 	 | SUBJECT
    /// 	 | SUBSCRIBE
    /// 	 | SUBSCRIPTION
    /// 	 | SUBSTRING
    /// 	 | SUM
    /// 	 | SUSPEND
    /// 	 | SYMMETRIC
    /// 	 | SYNCHRONOUS_COMMIT
    /// 	 | SYNONYM
    /// 	 | SYSTEM
    /// 	 | TABLOCK
    /// 	 | TABLOCKX
    /// 	 | TAKE
    /// 	 | TARGET_RECOVERY_TIME
    /// 	 | TB
    /// 	 | TEXTIMAGE_ON
    /// 	 | THROW
    /// 	 | TIES
    /// 	 | TIME
    /// 	 | TIMEOUT
    /// 	 | TIMER
    /// 	 | TINYINT
    /// 	 | TORN_PAGE_DETECTION
    /// 	 | TRACKING
    /// 	 | TRANSACTION_ID
    /// 	 | TRANSFORM_NOISE_WORDS
    /// 	 | TRANSLATE
    /// 	 | TRIM
    /// 	 | TRIPLE_DES
    /// 	 | TRIPLE_DES_3KEY
    /// 	 | TRUSTWORTHY
    /// 	 | TRY
    /// 	 | TSQL
    /// 	 | TWO_DIGIT_YEAR_CUTOFF
    /// 	 | TYPE
    /// 	 | TYPE_ID
    /// 	 | TYPE_NAME
    /// 	 | TYPE_WARNING
    /// 	 | TYPEPROPERTY
    /// 	 | UNBOUNDED
    /// 	 | UNCOMMITTED
    /// 	 | UNICODE
    /// 	 | UNKNOWN
    /// 	 | UNLIMITED
    /// 	 | UNMASK
    /// 	 | UOW
    /// 	 | UPDLOCK
    /// 	 | UPPER
    /// 	 | USING
    /// 	 | VALID_XML
    /// 	 | VALIDATION
    /// 	 | VALUE
    /// 	 | VAR
    /// 	 | VARBINARY_KEYWORD
    /// 	 | VARP
    /// 	 | VERSION
    /// 	 | VIEW_METADATA
    /// 	 | VIEWS
    /// 	 | WAIT
    /// 	 | WELL_FORMED_XML
    /// 	 | WITHOUT_ARRAY_WRAPPER
    /// 	 | WORK
    /// 	 | WORKLOAD
    /// 	 | XLOCK
    /// 	 | XML
    /// 	 | XML_COMPRESSION
    /// 	 | XMLDATA
    /// 	 | XMLNAMESPACES
    /// 	 | XMLSCHEMA
    /// 	 | XSINIL
    /// 	 | ZONE
    /// 	 | ABORT_AFTER_WAIT
    /// 	 | ABSENT
    /// 	 | ADMINISTER
    /// 	 | AES
    /// 	 | ALLOW_CONNECTIONS
    /// 	 | ALLOW_MULTIPLE_EVENT_LOSS
    /// 	 | ALLOW_SINGLE_EVENT_LOSS
    /// 	 | ANONYMOUS
    /// 	 | APPEND
    /// 	 | APPLICATION
    /// 	 | ASYMMETRIC
    /// 	 | ASYNCHRONOUS_COMMIT
    /// 	 | AUTHENTICATE
    /// 	 | AUTHENTICATION
    /// 	 | AUTOMATED_BACKUP_PREFERENCE
    /// 	 | AUTOMATIC
    /// 	 | AVAILABILITY_MODE
    /// 	 | BEFORE
    /// 	 | BLOCK
    /// 	 | BLOCKERS
    /// 	 | BLOCKSIZE
    /// 	 | BLOCKING_HIERARCHY
    /// 	 | BUFFER
    /// 	 | BUFFERCOUNT
    /// 	 | CACHE
    /// 	 | CALLED
    /// 	 | CERTIFICATE
    /// 	 | CHANGETABLE
    /// 	 | CHANGES
    /// 	 | CHECK_POLICY
    /// 	 | CHECK_EXPIRATION
    /// 	 | CLASSIFIER_FUNCTION
    /// 	 | CLUSTER
    /// 	 | COMPRESS
    /// 	 | COMPRESSION
    /// 	 | CONNECT
    /// 	 | CONNECTION
    /// 	 | CONFIGURATION
    /// 	 | CONNECTIONPROPERTY
    /// 	 | CONTAINMENT
    /// 	 | CONTEXT
    /// 	 | CONTEXT_INFO
    /// 	 | CONTINUE_AFTER_ERROR
    /// 	 | CONTRACT
    /// 	 | CONTRACT_NAME
    /// 	 | CONVERSATION
    /// 	 | COPY_ONLY
    /// 	 | CURRENT_REQUEST_ID
    /// 	 | CURRENT_TRANSACTION_ID
    /// 	 | CYCLE
    /// 	 | DATA_COMPRESSION
    /// 	 | DATA_SOURCE
    /// 	 | DATABASE_MIRRORING
    /// 	 | DATASPACE
    /// 	 | DDL
    /// 	 | DECOMPRESS
    /// 	 | DEFAULT_DATABASE
    /// 	 | DEFAULT_SCHEMA
    /// 	 | DIAGNOSTICS
    /// 	 | DIFFERENTIAL
    /// 	 | DISTRIBUTION
    /// 	 | DTC_SUPPORT
    /// 	 | ENABLED
    /// 	 | ENDPOINT
    /// 	 | ERROR
    /// 	 | ERROR_LINE
    /// 	 | ERROR_MESSAGE
    /// 	 | ERROR_NUMBER
    /// 	 | ERROR_PROCEDURE
    /// 	 | ERROR_SEVERITY
    /// 	 | ERROR_STATE
    /// 	 | EVENT
    /// 	 | EVENTDATA
    /// 	 | EVENT_RETENTION_MODE
    /// 	 | EXECUTABLE_FILE
    /// 	 | EXPIREDATE
    /// 	 | EXTENSION
    /// 	 | EXTERNAL_ACCESS
    /// 	 | FAILOVER
    /// 	 | FAILURECONDITIONLEVEL
    /// 	 | FAN_IN
    /// 	 | FILE_SNAPSHOT
    /// 	 | FORCESEEK
    /// 	 | FORCE_SERVICE_ALLOW_DATA_LOSS
    /// 	 | FORMATMESSAGE
    /// 	 | GET
    /// 	 | GET_FILESTREAM_TRANSACTION_CONTEXT
    /// 	 | GETANCESTOR
    /// 	 | GETANSINULL
    /// 	 | GETDESCENDANT
    /// 	 | GETLEVEL
    /// 	 | GETREPARENTEDVALUE
    /// 	 | GETROOT
    /// 	 | GOVERNOR
    /// 	 | HASHED
    /// 	 | HEALTHCHECKTIMEOUT
    /// 	 | HEAP
    /// 	 | HIERARCHYID
    /// 	 | HOST_ID
    /// 	 | HOST_NAME
    /// 	 | IIF
    /// 	 | IO
    /// 	 | INCLUDE
    /// 	 | INCREMENT
    /// 	 | INFINITE
    /// 	 | INIT
    /// 	 | INSTEAD
    /// 	 | ISDESCENDANTOF
    /// 	 | ISNULL
    /// 	 | ISNUMERIC
    /// 	 | KERBEROS
    /// 	 | KEY_PATH
    /// 	 | KEY_STORE_PROVIDER_NAME
    /// 	 | LANGUAGE
    /// 	 | LIBRARY
    /// 	 | LIFETIME
    /// 	 | LINKED
    /// 	 | LINUX
    /// 	 | LISTENER_IP
    /// 	 | LISTENER_PORT
    /// 	 | LOCAL_SERVICE_NAME
    /// 	 | LOG
    /// 	 | MASK
    /// 	 | MATCHED
    /// 	 | MASTER
    /// 	 | MAX_MEMORY
    /// 	 | MAXTRANSFER
    /// 	 | MAXVALUE
    /// 	 | MAX_DISPATCH_LATENCY
    /// 	 | MAX_DURATION
    /// 	 | MAX_EVENT_SIZE
    /// 	 | MAX_SIZE
    /// 	 | MAX_OUTSTANDING_IO_PER_VOLUME
    /// 	 | MEDIADESCRIPTION
    /// 	 | MEDIANAME
    /// 	 | MEMBER
    /// 	 | MEMORY_PARTITION_MODE
    /// 	 | MESSAGE_FORWARDING
    /// 	 | MESSAGE_FORWARD_SIZE
    /// 	 | MINVALUE
    /// 	 | MIRROR
    /// 	 | MUST_CHANGE
    /// 	 | NEWID
    /// 	 | NEWSEQUENTIALID
    /// 	 | NOFORMAT
    /// 	 | NOINIT
    /// 	 | NONE
    /// 	 | NOREWIND
    /// 	 | NOSKIP
    /// 	 | NOUNLOAD
    /// 	 | NO_CHECKSUM
    /// 	 | NO_COMPRESSION
    /// 	 | NO_EVENT_LOSS
    /// 	 | NOTIFICATION
    /// 	 | NTLM
    /// 	 | OLD_PASSWORD
    /// 	 | ON_FAILURE
    /// 	 | OPERATIONS
    /// 	 | PAGE
    /// 	 | PARAM_NODE
    /// 	 | PARTIAL
    /// 	 | PASSWORD
    /// 	 | PERMISSION_SET
    /// 	 | PER_CPU
    /// 	 | PER_DB
    /// 	 | PER_NODE
    /// 	 | PERSISTED
    /// 	 | PLATFORM
    /// 	 | POLICY
    /// 	 | PREDICATE
    /// 	 | PROCESS
    /// 	 | PROFILE
    /// 	 | PYTHON
    /// 	 | R
    /// 	 | READ_WRITE_FILEGROUPS
    /// 	 | REGENERATE
    /// 	 | RELATED_CONVERSATION
    /// 	 | RELATED_CONVERSATION_GROUP
    /// 	 | REQUIRED
    /// 	 | RESET
    /// 	 | RESOURCES
    /// 	 | RESTART
    /// 	 | RESUME
    /// 	 | RETAINDAYS
    /// 	 | RETURNS
    /// 	 | REWIND
    /// 	 | ROLE
    /// 	 | ROUND_ROBIN
    /// 	 | ROWCOUNT_BIG
    /// 	 | RSA_512
    /// 	 | RSA_1024
    /// 	 | RSA_2048
    /// 	 | RSA_3072
    /// 	 | RSA_4096
    /// 	 | SAFETY
    /// 	 | SAFE
    /// 	 | SCHEDULER
    /// 	 | SCHEME
    /// 	 | SCRIPT
    /// 	 | SERVER
    /// 	 | SERVICE
    /// 	 | SERVICE_BROKER
    /// 	 | SERVICE_NAME
    /// 	 | SESSION
    /// 	 | SESSION_CONTEXT
    /// 	 | SETTINGS
    /// 	 | SHRINKLOG
    /// 	 | SID
    /// 	 | SKIP_KEYWORD
    /// 	 | SOFTNUMA
    /// 	 | SOURCE
    /// 	 | SPECIFICATION
    /// 	 | SPLIT
    /// 	 | SQL
    /// 	 | SQLDUMPERFLAGS
    /// 	 | SQLDUMPERPATH
    /// 	 | SQLDUMPERTIMEOUT
    /// 	 | STATE
    /// 	 | STATS
    /// 	 | START
    /// 	 | STARTED
    /// 	 | STARTUP_STATE
    /// 	 | STOP
    /// 	 | STOPPED
    /// 	 | STOP_ON_ERROR
    /// 	 | SUPPORTED
    /// 	 | SWITCH
    /// 	 | TAPE
    /// 	 | TARGET
    /// 	 | TCP
    /// 	 | TOSTRING
    /// 	 | TRACE
    /// 	 | TRACK_CAUSALITY
    /// 	 | TRANSFER
    /// 	 | UNCHECKED
    /// 	 | UNLOCK
    /// 	 | UNSAFE
    /// 	 | URL
    /// 	 | USED
    /// 	 | VERBOSELOGGING
    /// 	 | VISIBILITY
    /// 	 | WAIT_AT_LOW_PRIORITY
    /// 	 | WINDOWS
    /// 	 | WITHOUT
    /// 	 | WITNESS
    /// 	 | XACT_ABORT
    /// 	 | XACT_STATE
    /// 	 | VARCHAR
    /// 	 | NVARCHAR
    /// 	 | PRECISION
    /// </summary>
    public partial class AstKeyword : AstTerminal<AstKeywordEnum>
    {
        
        public AstKeyword(ITerminalNode t, string value) : 
                base(t, AstKeyword.GetValue(value))
        {
        }
        
        public AstKeyword(ITerminalNode t, AstKeywordEnum value) : 
                base(t, value)
        {
        }
        
        public AstKeyword(ParserRuleContext ctx, string value) : 
                base(ctx, AstKeyword.GetValue(value))
        {
        }
        
        public AstKeyword(Position p, string value) : 
                base(p, AstKeyword.GetValue(value))
        {
        }
        
        public AstKeyword(Position p, AstKeywordEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKeyword(this);
        }
        
        protected static AstKeywordEnum GetValue(string value)
        {
            if ((value == "ABORT"))
            {
                return AstKeywordEnum.Abort;
            }
            if ((value == "ABSOLUTE"))
            {
                return AstKeywordEnum.Absolute;
            }
            if ((value == "ACCENT_SENSITIVITY"))
            {
                return AstKeywordEnum.AccentSensitivity;
            }
            if ((value == "ACCESS"))
            {
                return AstKeywordEnum.Access;
            }
            if ((value == "ACTION"))
            {
                return AstKeywordEnum.Action;
            }
            if ((value == "ACTIVATION"))
            {
                return AstKeywordEnum.Activation;
            }
            if ((value == "ACTIVE"))
            {
                return AstKeywordEnum.Active;
            }
            if ((value == "ADD"))
            {
                return AstKeywordEnum.Add;
            }
            if ((value == "ADDRESS"))
            {
                return AstKeywordEnum.Address;
            }
            if ((value == "AES_128"))
            {
                return AstKeywordEnum.Aes128;
            }
            if ((value == "AES_192"))
            {
                return AstKeywordEnum.Aes192;
            }
            if ((value == "AES_256"))
            {
                return AstKeywordEnum.Aes256;
            }
            if ((value == "AFFINITY"))
            {
                return AstKeywordEnum.Affinity;
            }
            if ((value == "AFTER"))
            {
                return AstKeywordEnum.After;
            }
            if ((value == "AGGREGATE"))
            {
                return AstKeywordEnum.Aggregate;
            }
            if ((value == "ALGORITHM"))
            {
                return AstKeywordEnum.Algorithm;
            }
            if ((value == "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS"))
            {
                return AstKeywordEnum.AllowEncryptedValueModifications;
            }
            if ((value == "ALLOW_PAGE_LOCKS"))
            {
                return AstKeywordEnum.AllowPageLocks;
            }
            if ((value == "ALLOW_ROW_LOCKS"))
            {
                return AstKeywordEnum.AllowRowLocks;
            }
            if ((value == "ALLOW_SNAPSHOT_ISOLATION"))
            {
                return AstKeywordEnum.AllowSnapshotIsolation;
            }
            if ((value == "ALLOWED"))
            {
                return AstKeywordEnum.Allowed;
            }
            if ((value == "ALWAYS"))
            {
                return AstKeywordEnum.Always;
            }
            if ((value == "ANSI_DEFAULTS"))
            {
                return AstKeywordEnum.AnsiDefaults;
            }
            if ((value == "ANSI_NULL_DEFAULT"))
            {
                return AstKeywordEnum.AnsiNullDefault;
            }
            if ((value == "ANSI_NULL_DFLT_OFF"))
            {
                return AstKeywordEnum.AnsiNullDfltOff;
            }
            if ((value == "ANSI_NULL_DFLT_ON"))
            {
                return AstKeywordEnum.AnsiNullDfltOn;
            }
            if ((value == "ANSI_NULLS"))
            {
                return AstKeywordEnum.AnsiNulls;
            }
            if ((value == "ANSI_PADDING"))
            {
                return AstKeywordEnum.AnsiPadding;
            }
            if ((value == "ANSI_WARNINGS"))
            {
                return AstKeywordEnum.AnsiWarnings;
            }
            if ((value == "APP_NAME"))
            {
                return AstKeywordEnum.AppName;
            }
            if ((value == "APPLICATION_LOG"))
            {
                return AstKeywordEnum.ApplicationLog;
            }
            if ((value == "APPLOCK_MODE"))
            {
                return AstKeywordEnum.ApplockMode;
            }
            if ((value == "APPLOCK_TEST"))
            {
                return AstKeywordEnum.ApplockTest;
            }
            if ((value == "APPLY"))
            {
                return AstKeywordEnum.Apply;
            }
            if ((value == "ARITHABORT"))
            {
                return AstKeywordEnum.Arithabort;
            }
            if ((value == "ARITHIGNORE"))
            {
                return AstKeywordEnum.Arithignore;
            }
            if ((value == "ASCII"))
            {
                return AstKeywordEnum.Ascii;
            }
            if ((value == "ASSEMBLY"))
            {
                return AstKeywordEnum.Assembly;
            }
            if ((value == "ASSEMBLYPROPERTY"))
            {
                return AstKeywordEnum.Assemblyproperty;
            }
            if ((value == "AT_KEYWORD"))
            {
                return AstKeywordEnum.AtKeyword;
            }
            if ((value == "AUDIT"))
            {
                return AstKeywordEnum.Audit;
            }
            if ((value == "AUDIT_GUID"))
            {
                return AstKeywordEnum.AuditGuid;
            }
            if ((value == "AUTO"))
            {
                return AstKeywordEnum.Auto;
            }
            if ((value == "AUTO_CLEANUP"))
            {
                return AstKeywordEnum.AutoCleanup;
            }
            if ((value == "AUTO_CLOSE"))
            {
                return AstKeywordEnum.AutoClose;
            }
            if ((value == "AUTO_CREATE_STATISTICS"))
            {
                return AstKeywordEnum.AutoCreateStatistics;
            }
            if ((value == "AUTO_DROP"))
            {
                return AstKeywordEnum.AutoDrop;
            }
            if ((value == "AUTO_SHRINK"))
            {
                return AstKeywordEnum.AutoShrink;
            }
            if ((value == "AUTO_UPDATE_STATISTICS"))
            {
                return AstKeywordEnum.AutoUpdateStatistics;
            }
            if ((value == "AUTO_UPDATE_STATISTICS_ASYNC"))
            {
                return AstKeywordEnum.AutoUpdateStatisticsAsync;
            }
            if ((value == "AUTOGROW_ALL_FILES"))
            {
                return AstKeywordEnum.AutogrowAllFiles;
            }
            if ((value == "AUTOGROW_SINGLE_FILE"))
            {
                return AstKeywordEnum.AutogrowSingleFile;
            }
            if ((value == "AVAILABILITY"))
            {
                return AstKeywordEnum.Availability;
            }
            if ((value == "AVG"))
            {
                return AstKeywordEnum.Avg;
            }
            if ((value == "BACKUP_PRIORITY"))
            {
                return AstKeywordEnum.BackupPriority;
            }
            if ((value == "BASE64"))
            {
                return AstKeywordEnum.Base64;
            }
            if ((value == "BEGIN_DIALOG"))
            {
                return AstKeywordEnum.BeginDialog;
            }
            if ((value == "BIGINT"))
            {
                return AstKeywordEnum.Bigint;
            }
            if ((value == "BINARY_KEYWORD"))
            {
                return AstKeywordEnum.BinaryKeyword;
            }
            if ((value == "BINARY_CHECKSUM"))
            {
                return AstKeywordEnum.BinaryChecksum;
            }
            if ((value == "BINDING"))
            {
                return AstKeywordEnum.Binding;
            }
            if ((value == "BLOB_STORAGE"))
            {
                return AstKeywordEnum.BlobStorage;
            }
            if ((value == "BROKER"))
            {
                return AstKeywordEnum.Broker;
            }
            if ((value == "BROKER_INSTANCE"))
            {
                return AstKeywordEnum.BrokerInstance;
            }
            if ((value == "BULK_LOGGED"))
            {
                return AstKeywordEnum.BulkLogged;
            }
            if ((value == "CALLER"))
            {
                return AstKeywordEnum.Caller;
            }
            if ((value == "CAP_CPU_PERCENT"))
            {
                return AstKeywordEnum.CapCpuPercent;
            }
            if ((value == "CAST"))
            {
                return AstKeywordEnum.Cast;
            }
            if ((value == "TRY_CAST"))
            {
                return AstKeywordEnum.TryCast;
            }
            if ((value == "CATALOG"))
            {
                return AstKeywordEnum.Catalog;
            }
            if ((value == "CATCH"))
            {
                return AstKeywordEnum.Catch;
            }
            if ((value == "CHANGE"))
            {
                return AstKeywordEnum.Change;
            }
            if ((value == "CHANGE_RETENTION"))
            {
                return AstKeywordEnum.ChangeRetention;
            }
            if ((value == "CHANGE_TRACKING"))
            {
                return AstKeywordEnum.ChangeTracking;
            }
            if ((value == "CHAR"))
            {
                return AstKeywordEnum.Char;
            }
            if ((value == "CHARINDEX"))
            {
                return AstKeywordEnum.Charindex;
            }
            if ((value == "CHECKSUM"))
            {
                return AstKeywordEnum.Checksum;
            }
            if ((value == "CHECKSUM_AGG"))
            {
                return AstKeywordEnum.ChecksumAgg;
            }
            if ((value == "CLEANUP"))
            {
                return AstKeywordEnum.Cleanup;
            }
            if ((value == "COL_LENGTH"))
            {
                return AstKeywordEnum.ColLength;
            }
            if ((value == "COL_NAME"))
            {
                return AstKeywordEnum.ColName;
            }
            if ((value == "COLLECTION"))
            {
                return AstKeywordEnum.Collection;
            }
            if ((value == "COLUMN_ENCRYPTION_KEY"))
            {
                return AstKeywordEnum.ColumnEncryptionKey;
            }
            if ((value == "COLUMN_MASTER_KEY"))
            {
                return AstKeywordEnum.ColumnMasterKey;
            }
            if ((value == "COLUMNPROPERTY"))
            {
                return AstKeywordEnum.Columnproperty;
            }
            if ((value == "COLUMNS"))
            {
                return AstKeywordEnum.Columns;
            }
            if ((value == "COLUMNSTORE"))
            {
                return AstKeywordEnum.Columnstore;
            }
            if ((value == "COLUMNSTORE_ARCHIVE"))
            {
                return AstKeywordEnum.ColumnstoreArchive;
            }
            if ((value == "COMMITTED"))
            {
                return AstKeywordEnum.Committed;
            }
            if ((value == "COMPATIBILITY_LEVEL"))
            {
                return AstKeywordEnum.CompatibilityLevel;
            }
            if ((value == "COMPRESS_ALL_ROW_GROUPS"))
            {
                return AstKeywordEnum.CompressAllRowGroups;
            }
            if ((value == "COMPRESSION_DELAY"))
            {
                return AstKeywordEnum.CompressionDelay;
            }
            if ((value == "CONCAT"))
            {
                return AstKeywordEnum.Concat;
            }
            if ((value == "CONCAT_WS"))
            {
                return AstKeywordEnum.ConcatWs;
            }
            if ((value == "CONCAT_NULL_YIELDS_NULL"))
            {
                return AstKeywordEnum.ConcatNullYieldsNull;
            }
            if ((value == "CONTENT"))
            {
                return AstKeywordEnum.Content;
            }
            if ((value == "CONTROL"))
            {
                return AstKeywordEnum.Control;
            }
            if ((value == "COOKIE"))
            {
                return AstKeywordEnum.Cookie;
            }
            if ((value == "COUNT"))
            {
                return AstKeywordEnum.Count;
            }
            if ((value == "COUNT_BIG"))
            {
                return AstKeywordEnum.CountBig;
            }
            if ((value == "COUNTER"))
            {
                return AstKeywordEnum.Counter;
            }
            if ((value == "CPU"))
            {
                return AstKeywordEnum.Cpu;
            }
            if ((value == "CREATE_NEW"))
            {
                return AstKeywordEnum.CreateNew;
            }
            if ((value == "CREATION_DISPOSITION"))
            {
                return AstKeywordEnum.CreationDisposition;
            }
            if ((value == "CREDENTIAL"))
            {
                return AstKeywordEnum.Credential;
            }
            if ((value == "CRYPTOGRAPHIC"))
            {
                return AstKeywordEnum.Cryptographic;
            }
            if ((value == "CUME_DIST"))
            {
                return AstKeywordEnum.CumeDist;
            }
            if ((value == "CURSOR_CLOSE_ON_COMMIT"))
            {
                return AstKeywordEnum.CursorCloseOnCommit;
            }
            if ((value == "CURSOR_DEFAULT"))
            {
                return AstKeywordEnum.CursorDefault;
            }
            if ((value == "DATA"))
            {
                return AstKeywordEnum.Data;
            }
            if ((value == "DATABASE_PRINCIPAL_ID"))
            {
                return AstKeywordEnum.DatabasePrincipalId;
            }
            if ((value == "DATABASEPROPERTYEX"))
            {
                return AstKeywordEnum.Databasepropertyex;
            }
            if ((value == "DATE_CORRELATION_OPTIMIZATION"))
            {
                return AstKeywordEnum.DateCorrelationOptimization;
            }
            if ((value == "DATEADD"))
            {
                return AstKeywordEnum.Dateadd;
            }
            if ((value == "DATEDIFF"))
            {
                return AstKeywordEnum.Datediff;
            }
            if ((value == "DATENAME"))
            {
                return AstKeywordEnum.Datename;
            }
            if ((value == "DATEPART"))
            {
                return AstKeywordEnum.Datepart;
            }
            if ((value == "DAYS"))
            {
                return AstKeywordEnum.Days;
            }
            if ((value == "DB_CHAINING"))
            {
                return AstKeywordEnum.DbChaining;
            }
            if ((value == "DB_FAILOVER"))
            {
                return AstKeywordEnum.DbFailover;
            }
            if ((value == "DB_ID"))
            {
                return AstKeywordEnum.DbId;
            }
            if ((value == "DB_NAME"))
            {
                return AstKeywordEnum.DbName;
            }
            if ((value == "DECRYPTION"))
            {
                return AstKeywordEnum.Decryption;
            }
            if ((value == "DEFAULT_DOUBLE_QUOTE"))
            {
                return AstKeywordEnum.DefaultDoubleQuote;
            }
            if ((value == "DEFAULT_FULLTEXT_LANGUAGE"))
            {
                return AstKeywordEnum.DefaultFulltextLanguage;
            }
            if ((value == "DEFAULT_LANGUAGE"))
            {
                return AstKeywordEnum.DefaultLanguage;
            }
            if ((value == "DEFINITION"))
            {
                return AstKeywordEnum.Definition;
            }
            if ((value == "DELAY"))
            {
                return AstKeywordEnum.Delay;
            }
            if ((value == "DELAYED_DURABILITY"))
            {
                return AstKeywordEnum.DelayedDurability;
            }
            if ((value == "DELETED"))
            {
                return AstKeywordEnum.Deleted;
            }
            if ((value == "DENSE_RANK"))
            {
                return AstKeywordEnum.DenseRank;
            }
            if ((value == "DEPENDENTS"))
            {
                return AstKeywordEnum.Dependents;
            }
            if ((value == "DES"))
            {
                return AstKeywordEnum.Des;
            }
            if ((value == "DESCRIPTION"))
            {
                return AstKeywordEnum.Description;
            }
            if ((value == "DESX"))
            {
                return AstKeywordEnum.Desx;
            }
            if ((value == "DETERMINISTIC"))
            {
                return AstKeywordEnum.Deterministic;
            }
            if ((value == "DHCP"))
            {
                return AstKeywordEnum.Dhcp;
            }
            if ((value == "DIALOG"))
            {
                return AstKeywordEnum.Dialog;
            }
            if ((value == "DIFFERENCE"))
            {
                return AstKeywordEnum.Difference;
            }
            if ((value == "DIRECTORY_NAME"))
            {
                return AstKeywordEnum.DirectoryName;
            }
            if ((value == "DISABLE"))
            {
                return AstKeywordEnum.Disable;
            }
            if ((value == "DISABLE_BROKER"))
            {
                return AstKeywordEnum.DisableBroker;
            }
            if ((value == "DISABLED"))
            {
                return AstKeywordEnum.Disabled;
            }
            if ((value == "DOCUMENT"))
            {
                return AstKeywordEnum.Document;
            }
            if ((value == "DROP_EXISTING"))
            {
                return AstKeywordEnum.DropExisting;
            }
            if ((value == "DYNAMIC"))
            {
                return AstKeywordEnum.Dynamic;
            }
            if ((value == "ELEMENTS"))
            {
                return AstKeywordEnum.Elements;
            }
            if ((value == "EMERGENCY"))
            {
                return AstKeywordEnum.Emergency;
            }
            if ((value == "EMPTY"))
            {
                return AstKeywordEnum.Empty;
            }
            if ((value == "ENABLE"))
            {
                return AstKeywordEnum.Enable;
            }
            if ((value == "ENABLE_BROKER"))
            {
                return AstKeywordEnum.EnableBroker;
            }
            if ((value == "ENCRYPTED"))
            {
                return AstKeywordEnum.Encrypted;
            }
            if ((value == "ENCRYPTED_VALUE"))
            {
                return AstKeywordEnum.EncryptedValue;
            }
            if ((value == "ENCRYPTION"))
            {
                return AstKeywordEnum.Encryption;
            }
            if ((value == "ENCRYPTION_TYPE"))
            {
                return AstKeywordEnum.EncryptionType;
            }
            if ((value == "ENDPOINT_URL"))
            {
                return AstKeywordEnum.EndpointUrl;
            }
            if ((value == "ERROR_BROKER_CONVERSATIONS"))
            {
                return AstKeywordEnum.ErrorBrokerConversations;
            }
            if ((value == "EXCLUSIVE"))
            {
                return AstKeywordEnum.Exclusive;
            }
            if ((value == "EXECUTABLE"))
            {
                return AstKeywordEnum.Executable;
            }
            if ((value == "EXIST"))
            {
                return AstKeywordEnum.Exist;
            }
            if ((value == "EXPAND"))
            {
                return AstKeywordEnum.Expand;
            }
            if ((value == "EXPIRY_DATE"))
            {
                return AstKeywordEnum.ExpiryDate;
            }
            if ((value == "EXPLICIT"))
            {
                return AstKeywordEnum.Explicit;
            }
            if ((value == "FAIL_OPERATION"))
            {
                return AstKeywordEnum.FailOperation;
            }
            if ((value == "FAILOVER_MODE"))
            {
                return AstKeywordEnum.FailoverMode;
            }
            if ((value == "FAILURE"))
            {
                return AstKeywordEnum.Failure;
            }
            if ((value == "FAILURE_CONDITION_LEVEL"))
            {
                return AstKeywordEnum.FailureConditionLevel;
            }
            if ((value == "FAST"))
            {
                return AstKeywordEnum.Fast;
            }
            if ((value == "FAST_FORWARD"))
            {
                return AstKeywordEnum.FastForward;
            }
            if ((value == "FILE_ID"))
            {
                return AstKeywordEnum.FileId;
            }
            if ((value == "FILE_IDEX"))
            {
                return AstKeywordEnum.FileIdex;
            }
            if ((value == "FILE_NAME"))
            {
                return AstKeywordEnum.FileName;
            }
            if ((value == "FILEGROUP"))
            {
                return AstKeywordEnum.Filegroup;
            }
            if ((value == "FILEGROUP_ID"))
            {
                return AstKeywordEnum.FilegroupId;
            }
            if ((value == "FILEGROUP_NAME"))
            {
                return AstKeywordEnum.FilegroupName;
            }
            if ((value == "FILEGROUPPROPERTY"))
            {
                return AstKeywordEnum.Filegroupproperty;
            }
            if ((value == "FILEGROWTH"))
            {
                return AstKeywordEnum.Filegrowth;
            }
            if ((value == "FILENAME"))
            {
                return AstKeywordEnum.Filename;
            }
            if ((value == "FILEPATH"))
            {
                return AstKeywordEnum.Filepath;
            }
            if ((value == "FILEPROPERTY"))
            {
                return AstKeywordEnum.Fileproperty;
            }
            if ((value == "FILEPROPERTYEX"))
            {
                return AstKeywordEnum.Filepropertyex;
            }
            if ((value == "FILESTREAM"))
            {
                return AstKeywordEnum.Filestream;
            }
            if ((value == "FILTER"))
            {
                return AstKeywordEnum.Filter;
            }
            if ((value == "FIRST"))
            {
                return AstKeywordEnum.First;
            }
            if ((value == "FIRST_VALUE"))
            {
                return AstKeywordEnum.FirstValue;
            }
            if ((value == "FMTONLY"))
            {
                return AstKeywordEnum.Fmtonly;
            }
            if ((value == "FOLLOWING"))
            {
                return AstKeywordEnum.Following;
            }
            if ((value == "FORCE"))
            {
                return AstKeywordEnum.Force;
            }
            if ((value == "FORCE_FAILOVER_ALLOW_DATA_LOSS"))
            {
                return AstKeywordEnum.ForceFailoverAllowDataLoss;
            }
            if ((value == "FORCED"))
            {
                return AstKeywordEnum.Forced;
            }
            if ((value == "FORCEPLAN"))
            {
                return AstKeywordEnum.Forceplan;
            }
            if ((value == "FORCESCAN"))
            {
                return AstKeywordEnum.Forcescan;
            }
            if ((value == "FORMAT"))
            {
                return AstKeywordEnum.Format;
            }
            if ((value == "FORWARD_ONLY"))
            {
                return AstKeywordEnum.ForwardOnly;
            }
            if ((value == "FULLSCAN"))
            {
                return AstKeywordEnum.Fullscan;
            }
            if ((value == "FULLTEXT"))
            {
                return AstKeywordEnum.Fulltext;
            }
            if ((value == "FULLTEXTCATALOGPROPERTY"))
            {
                return AstKeywordEnum.Fulltextcatalogproperty;
            }
            if ((value == "FULLTEXTSERVICEPROPERTY"))
            {
                return AstKeywordEnum.Fulltextserviceproperty;
            }
            if ((value == "GB"))
            {
                return AstKeywordEnum.Gb;
            }
            if ((value == "GENERATED"))
            {
                return AstKeywordEnum.Generated;
            }
            if ((value == "GETDATE"))
            {
                return AstKeywordEnum.Getdate;
            }
            if ((value == "GETUTCDATE"))
            {
                return AstKeywordEnum.Getutcdate;
            }
            if ((value == "GLOBAL"))
            {
                return AstKeywordEnum.Global;
            }
            if ((value == "GO"))
            {
                return AstKeywordEnum.Go;
            }
            if ((value == "GROUP_MAX_REQUESTS"))
            {
                return AstKeywordEnum.GroupMaxRequests;
            }
            if ((value == "GROUPING"))
            {
                return AstKeywordEnum.Grouping;
            }
            if ((value == "GROUPING_ID"))
            {
                return AstKeywordEnum.GroupingId;
            }
            if ((value == "HADR"))
            {
                return AstKeywordEnum.Hadr;
            }
            if ((value == "HASH"))
            {
                return AstKeywordEnum.Hash;
            }
            if ((value == "HEALTH_CHECK_TIMEOUT"))
            {
                return AstKeywordEnum.HealthCheckTimeout;
            }
            if ((value == "HIDDEN_KEYWORD"))
            {
                return AstKeywordEnum.HiddenKeyword;
            }
            if ((value == "HIGH"))
            {
                return AstKeywordEnum.High;
            }
            if ((value == "HONOR_BROKER_PRIORITY"))
            {
                return AstKeywordEnum.HonorBrokerPriority;
            }
            if ((value == "HOURS"))
            {
                return AstKeywordEnum.Hours;
            }
            if ((value == "IDENTITY_VALUE"))
            {
                return AstKeywordEnum.IdentityValue;
            }
            if ((value == "IGNORE_CONSTRAINTS"))
            {
                return AstKeywordEnum.IgnoreConstraints;
            }
            if ((value == "IGNORE_DUP_KEY"))
            {
                return AstKeywordEnum.IgnoreDupKey;
            }
            if ((value == "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX"))
            {
                return AstKeywordEnum.IgnoreNonclusteredColumnstoreIndex;
            }
            if ((value == "IGNORE_TRIGGERS"))
            {
                return AstKeywordEnum.IgnoreTriggers;
            }
            if ((value == "IMMEDIATE"))
            {
                return AstKeywordEnum.Immediate;
            }
            if ((value == "IMPERSONATE"))
            {
                return AstKeywordEnum.Impersonate;
            }
            if ((value == "IMPLICIT_TRANSACTIONS"))
            {
                return AstKeywordEnum.ImplicitTransactions;
            }
            if ((value == "IMPORTANCE"))
            {
                return AstKeywordEnum.Importance;
            }
            if ((value == "INCLUDE_NULL_VALUES"))
            {
                return AstKeywordEnum.IncludeNullValues;
            }
            if ((value == "INCREMENTAL"))
            {
                return AstKeywordEnum.Incremental;
            }
            if ((value == "INDEX_COL"))
            {
                return AstKeywordEnum.IndexCol;
            }
            if ((value == "INDEXKEY_PROPERTY"))
            {
                return AstKeywordEnum.IndexkeyProperty;
            }
            if ((value == "INDEXPROPERTY"))
            {
                return AstKeywordEnum.Indexproperty;
            }
            if ((value == "INITIATOR"))
            {
                return AstKeywordEnum.Initiator;
            }
            if ((value == "INPUT"))
            {
                return AstKeywordEnum.Input;
            }
            if ((value == "INSENSITIVE"))
            {
                return AstKeywordEnum.Insensitive;
            }
            if ((value == "INSERTED"))
            {
                return AstKeywordEnum.Inserted;
            }
            if ((value == "INT"))
            {
                return AstKeywordEnum.Int;
            }
            if ((value == "IP"))
            {
                return AstKeywordEnum.Ip;
            }
            if ((value == "ISOLATION"))
            {
                return AstKeywordEnum.Isolation;
            }
            if ((value == "JOB"))
            {
                return AstKeywordEnum.Job;
            }
            if ((value == "JSON"))
            {
                return AstKeywordEnum.Json;
            }
            if ((value == "KB"))
            {
                return AstKeywordEnum.Kb;
            }
            if ((value == "KEEP"))
            {
                return AstKeywordEnum.Keep;
            }
            if ((value == "KEEPDEFAULTS"))
            {
                return AstKeywordEnum.Keepdefaults;
            }
            if ((value == "KEEPFIXED"))
            {
                return AstKeywordEnum.Keepfixed;
            }
            if ((value == "KEEPIDENTITY"))
            {
                return AstKeywordEnum.Keepidentity;
            }
            if ((value == "KEY_SOURCE"))
            {
                return AstKeywordEnum.KeySource;
            }
            if ((value == "KEYS"))
            {
                return AstKeywordEnum.Keys;
            }
            if ((value == "KEYSET"))
            {
                return AstKeywordEnum.Keyset;
            }
            if ((value == "LAG"))
            {
                return AstKeywordEnum.Lag;
            }
            if ((value == "LAST"))
            {
                return AstKeywordEnum.Last;
            }
            if ((value == "LAST_VALUE"))
            {
                return AstKeywordEnum.LastValue;
            }
            if ((value == "LEAD"))
            {
                return AstKeywordEnum.Lead;
            }
            if ((value == "LEN"))
            {
                return AstKeywordEnum.Len;
            }
            if ((value == "LEVEL"))
            {
                return AstKeywordEnum.Level;
            }
            if ((value == "LIST"))
            {
                return AstKeywordEnum.List;
            }
            if ((value == "LISTENER"))
            {
                return AstKeywordEnum.Listener;
            }
            if ((value == "LISTENER_URL"))
            {
                return AstKeywordEnum.ListenerUrl;
            }
            if ((value == "LOB_COMPACTION"))
            {
                return AstKeywordEnum.LobCompaction;
            }
            if ((value == "LOCAL"))
            {
                return AstKeywordEnum.Local;
            }
            if ((value == "LOCATION"))
            {
                return AstKeywordEnum.Location;
            }
            if ((value == "LOCK"))
            {
                return AstKeywordEnum.Lock;
            }
            if ((value == "LOCK_ESCALATION"))
            {
                return AstKeywordEnum.LockEscalation;
            }
            if ((value == "LOGIN"))
            {
                return AstKeywordEnum.Login;
            }
            if ((value == "LOOP"))
            {
                return AstKeywordEnum.Loop;
            }
            if ((value == "LOW"))
            {
                return AstKeywordEnum.Low;
            }
            if ((value == "LOWER"))
            {
                return AstKeywordEnum.Lower;
            }
            if ((value == "LTRIM"))
            {
                return AstKeywordEnum.Ltrim;
            }
            if ((value == "MANUAL"))
            {
                return AstKeywordEnum.Manual;
            }
            if ((value == "MARK"))
            {
                return AstKeywordEnum.Mark;
            }
            if ((value == "MASKED"))
            {
                return AstKeywordEnum.Masked;
            }
            if ((value == "MATERIALIZED"))
            {
                return AstKeywordEnum.Materialized;
            }
            if ((value == "MAX"))
            {
                return AstKeywordEnum.Max;
            }
            if ((value == "MAX_CPU_PERCENT"))
            {
                return AstKeywordEnum.MaxCpuPercent;
            }
            if ((value == "MAX_DOP"))
            {
                return AstKeywordEnum.MaxDop;
            }
            if ((value == "MAX_FILES"))
            {
                return AstKeywordEnum.MaxFiles;
            }
            if ((value == "MAX_IOPS_PER_VOLUME"))
            {
                return AstKeywordEnum.MaxIopsPerVolume;
            }
            if ((value == "MAX_MEMORY_PERCENT"))
            {
                return AstKeywordEnum.MaxMemoryPercent;
            }
            if ((value == "MAX_PROCESSES"))
            {
                return AstKeywordEnum.MaxProcesses;
            }
            if ((value == "MAX_QUEUE_READERS"))
            {
                return AstKeywordEnum.MaxQueueReaders;
            }
            if ((value == "MAX_ROLLOVER_FILES"))
            {
                return AstKeywordEnum.MaxRolloverFiles;
            }
            if ((value == "MAXDOP"))
            {
                return AstKeywordEnum.Maxdop;
            }
            if ((value == "MAXRECURSION"))
            {
                return AstKeywordEnum.Maxrecursion;
            }
            if ((value == "MAXSIZE"))
            {
                return AstKeywordEnum.Maxsize;
            }
            if ((value == "MB"))
            {
                return AstKeywordEnum.Mb;
            }
            if ((value == "MEDIUM"))
            {
                return AstKeywordEnum.Medium;
            }
            if ((value == "MEMORY_OPTIMIZED_DATA"))
            {
                return AstKeywordEnum.MemoryOptimizedData;
            }
            if ((value == "MESSAGE"))
            {
                return AstKeywordEnum.Message;
            }
            if ((value == "MIN"))
            {
                return AstKeywordEnum.Min;
            }
            if ((value == "MIN_ACTIVE_ROWVERSION"))
            {
                return AstKeywordEnum.MinActiveRowversion;
            }
            if ((value == "MIN_CPU_PERCENT"))
            {
                return AstKeywordEnum.MinCpuPercent;
            }
            if ((value == "MIN_IOPS_PER_VOLUME"))
            {
                return AstKeywordEnum.MinIopsPerVolume;
            }
            if ((value == "MIN_MEMORY_PERCENT"))
            {
                return AstKeywordEnum.MinMemoryPercent;
            }
            if ((value == "MINUTES"))
            {
                return AstKeywordEnum.Minutes;
            }
            if ((value == "MIRROR_ADDRESS"))
            {
                return AstKeywordEnum.MirrorAddress;
            }
            if ((value == "MIXED_PAGE_ALLOCATION"))
            {
                return AstKeywordEnum.MixedPageAllocation;
            }
            if ((value == "MODE"))
            {
                return AstKeywordEnum.Mode;
            }
            if ((value == "MODIFY"))
            {
                return AstKeywordEnum.Modify;
            }
            if ((value == "MOVE"))
            {
                return AstKeywordEnum.Move;
            }
            if ((value == "MULTI_USER"))
            {
                return AstKeywordEnum.MultiUser;
            }
            if ((value == "NAME"))
            {
                return AstKeywordEnum.Name;
            }
            if ((value == "NCHAR"))
            {
                return AstKeywordEnum.Nchar;
            }
            if ((value == "NESTED_TRIGGERS"))
            {
                return AstKeywordEnum.NestedTriggers;
            }
            if ((value == "NEW_ACCOUNT"))
            {
                return AstKeywordEnum.NewAccount;
            }
            if ((value == "NEW_BROKER"))
            {
                return AstKeywordEnum.NewBroker;
            }
            if ((value == "NEW_PASSWORD"))
            {
                return AstKeywordEnum.NewPassword;
            }
            if ((value == "NEWNAME"))
            {
                return AstKeywordEnum.Newname;
            }
            if ((value == "NEXT"))
            {
                return AstKeywordEnum.Next;
            }
            if ((value == "NO"))
            {
                return AstKeywordEnum.No;
            }
            if ((value == "NO_TRUNCATE"))
            {
                return AstKeywordEnum.NoTruncate;
            }
            if ((value == "NO_WAIT"))
            {
                return AstKeywordEnum.NoWait;
            }
            if ((value == "NOCOUNT"))
            {
                return AstKeywordEnum.Nocount;
            }
            if ((value == "NODES"))
            {
                return AstKeywordEnum.Nodes;
            }
            if ((value == "NOEXEC"))
            {
                return AstKeywordEnum.Noexec;
            }
            if ((value == "NOEXPAND"))
            {
                return AstKeywordEnum.Noexpand;
            }
            if ((value == "NOLOCK"))
            {
                return AstKeywordEnum.Nolock;
            }
            if ((value == "NON_TRANSACTED_ACCESS"))
            {
                return AstKeywordEnum.NonTransactedAccess;
            }
            if ((value == "NORECOMPUTE"))
            {
                return AstKeywordEnum.Norecompute;
            }
            if ((value == "NORECOVERY"))
            {
                return AstKeywordEnum.Norecovery;
            }
            if ((value == "NOTIFICATIONS"))
            {
                return AstKeywordEnum.Notifications;
            }
            if ((value == "NOWAIT"))
            {
                return AstKeywordEnum.Nowait;
            }
            if ((value == "NTILE"))
            {
                return AstKeywordEnum.Ntile;
            }
            if ((value == "NULL_DOUBLE_QUOTE"))
            {
                return AstKeywordEnum.NullDoubleQuote;
            }
            if ((value == "NUMANODE"))
            {
                return AstKeywordEnum.Numanode;
            }
            if ((value == "NUMBER"))
            {
                return AstKeywordEnum.Number;
            }
            if ((value == "NUMERIC_ROUNDABORT"))
            {
                return AstKeywordEnum.NumericRoundabort;
            }
            if ((value == "OBJECT"))
            {
                return AstKeywordEnum.Object;
            }
            if ((value == "OBJECT_DEFINITION"))
            {
                return AstKeywordEnum.ObjectDefinition;
            }
            if ((value == "OBJECT_ID"))
            {
                return AstKeywordEnum.ObjectId;
            }
            if ((value == "OBJECT_NAME"))
            {
                return AstKeywordEnum.ObjectName;
            }
            if ((value == "OBJECT_SCHEMA_NAME"))
            {
                return AstKeywordEnum.ObjectSchemaName;
            }
            if ((value == "OBJECTPROPERTY"))
            {
                return AstKeywordEnum.Objectproperty;
            }
            if ((value == "OBJECTPROPERTYEX"))
            {
                return AstKeywordEnum.Objectpropertyex;
            }
            if ((value == "OFFLINE"))
            {
                return AstKeywordEnum.Offline;
            }
            if ((value == "OFFSET"))
            {
                return AstKeywordEnum.Offset;
            }
            if ((value == "OLD_ACCOUNT"))
            {
                return AstKeywordEnum.OldAccount;
            }
            if ((value == "ONLINE"))
            {
                return AstKeywordEnum.Online;
            }
            if ((value == "ONLY"))
            {
                return AstKeywordEnum.Only;
            }
            if ((value == "OPEN_EXISTING"))
            {
                return AstKeywordEnum.OpenExisting;
            }
            if ((value == "OPENJSON"))
            {
                return AstKeywordEnum.Openjson;
            }
            if ((value == "OPTIMISTIC"))
            {
                return AstKeywordEnum.Optimistic;
            }
            if ((value == "OPTIMIZE"))
            {
                return AstKeywordEnum.Optimize;
            }
            if ((value == "OPTIMIZE_FOR_SEQUENTIAL_KEY"))
            {
                return AstKeywordEnum.OptimizeForSequentialKey;
            }
            if ((value == "ORIGINAL_DB_NAME"))
            {
                return AstKeywordEnum.OriginalDbName;
            }
            if ((value == "OUT"))
            {
                return AstKeywordEnum.Out;
            }
            if ((value == "OUTPUT"))
            {
                return AstKeywordEnum.Output;
            }
            if ((value == "OVERRIDE"))
            {
                return AstKeywordEnum.Override;
            }
            if ((value == "OWNER"))
            {
                return AstKeywordEnum.Owner;
            }
            if ((value == "OWNERSHIP"))
            {
                return AstKeywordEnum.Ownership;
            }
            if ((value == "PAD_INDEX"))
            {
                return AstKeywordEnum.PadIndex;
            }
            if ((value == "PAGE_VERIFY"))
            {
                return AstKeywordEnum.PageVerify;
            }
            if ((value == "PAGECOUNT"))
            {
                return AstKeywordEnum.Pagecount;
            }
            if ((value == "PAGLOCK"))
            {
                return AstKeywordEnum.Paglock;
            }
            if ((value == "PARAMETERIZATION"))
            {
                return AstKeywordEnum.Parameterization;
            }
            if ((value == "PARSENAME"))
            {
                return AstKeywordEnum.Parsename;
            }
            if ((value == "PARSEONLY"))
            {
                return AstKeywordEnum.Parseonly;
            }
            if ((value == "PARTITION"))
            {
                return AstKeywordEnum.Partition;
            }
            if ((value == "PARTITIONS"))
            {
                return AstKeywordEnum.Partitions;
            }
            if ((value == "PARTNER"))
            {
                return AstKeywordEnum.Partner;
            }
            if ((value == "PATH"))
            {
                return AstKeywordEnum.Path;
            }
            if ((value == "PATINDEX"))
            {
                return AstKeywordEnum.Patindex;
            }
            if ((value == "PAUSE"))
            {
                return AstKeywordEnum.Pause;
            }
            if ((value == "PERCENT_RANK"))
            {
                return AstKeywordEnum.PercentRank;
            }
            if ((value == "PERCENTILE_CONT"))
            {
                return AstKeywordEnum.PercentileCont;
            }
            if ((value == "PERCENTILE_DISC"))
            {
                return AstKeywordEnum.PercentileDisc;
            }
            if ((value == "PERSIST_SAMPLE_PERCENT"))
            {
                return AstKeywordEnum.PersistSamplePercent;
            }
            if ((value == "POISON_MESSAGE_HANDLING"))
            {
                return AstKeywordEnum.PoisonMessageHandling;
            }
            if ((value == "POOL"))
            {
                return AstKeywordEnum.Pool;
            }
            if ((value == "PORT"))
            {
                return AstKeywordEnum.Port;
            }
            if ((value == "PRECEDING"))
            {
                return AstKeywordEnum.Preceding;
            }
            if ((value == "PRIMARY_ROLE"))
            {
                return AstKeywordEnum.PrimaryRole;
            }
            if ((value == "PRIOR"))
            {
                return AstKeywordEnum.Prior;
            }
            if ((value == "PRIORITY"))
            {
                return AstKeywordEnum.Priority;
            }
            if ((value == "PRIORITY_LEVEL"))
            {
                return AstKeywordEnum.PriorityLevel;
            }
            if ((value == "PRIVATE"))
            {
                return AstKeywordEnum.Private;
            }
            if ((value == "PRIVATE_KEY"))
            {
                return AstKeywordEnum.PrivateKey;
            }
            if ((value == "PRIVILEGES"))
            {
                return AstKeywordEnum.Privileges;
            }
            if ((value == "PROCEDURE_NAME"))
            {
                return AstKeywordEnum.ProcedureName;
            }
            if ((value == "PROPERTY"))
            {
                return AstKeywordEnum.Property;
            }
            if ((value == "PROVIDER"))
            {
                return AstKeywordEnum.Provider;
            }
            if ((value == "PROVIDER_KEY_NAME"))
            {
                return AstKeywordEnum.ProviderKeyName;
            }
            if ((value == "QUERY"))
            {
                return AstKeywordEnum.Query;
            }
            if ((value == "QUEUE"))
            {
                return AstKeywordEnum.Queue;
            }
            if ((value == "QUEUE_DELAY"))
            {
                return AstKeywordEnum.QueueDelay;
            }
            if ((value == "QUOTED_IDENTIFIER"))
            {
                return AstKeywordEnum.QuotedIdentifier;
            }
            if ((value == "QUOTENAME"))
            {
                return AstKeywordEnum.Quotename;
            }
            if ((value == "RANDOMIZED"))
            {
                return AstKeywordEnum.Randomized;
            }
            if ((value == "RANGE"))
            {
                return AstKeywordEnum.Range;
            }
            if ((value == "RANK"))
            {
                return AstKeywordEnum.Rank;
            }
            if ((value == "RC2"))
            {
                return AstKeywordEnum.Rc2;
            }
            if ((value == "RC4"))
            {
                return AstKeywordEnum.Rc4;
            }
            if ((value == "RC4_128"))
            {
                return AstKeywordEnum.Rc4128;
            }
            if ((value == "READ_COMMITTED_SNAPSHOT"))
            {
                return AstKeywordEnum.ReadCommittedSnapshot;
            }
            if ((value == "READ_ONLY"))
            {
                return AstKeywordEnum.ReadOnly;
            }
            if ((value == "READ_ONLY_ROUTING_LIST"))
            {
                return AstKeywordEnum.ReadOnlyRoutingList;
            }
            if ((value == "READ_WRITE"))
            {
                return AstKeywordEnum.ReadWrite;
            }
            if ((value == "READCOMMITTED"))
            {
                return AstKeywordEnum.Readcommitted;
            }
            if ((value == "READCOMMITTEDLOCK"))
            {
                return AstKeywordEnum.Readcommittedlock;
            }
            if ((value == "READONLY"))
            {
                return AstKeywordEnum.Readonly;
            }
            if ((value == "READPAST"))
            {
                return AstKeywordEnum.Readpast;
            }
            if ((value == "READUNCOMMITTED"))
            {
                return AstKeywordEnum.Readuncommitted;
            }
            if ((value == "READWRITE"))
            {
                return AstKeywordEnum.Readwrite;
            }
            if ((value == "REBUILD"))
            {
                return AstKeywordEnum.Rebuild;
            }
            if ((value == "RECEIVE"))
            {
                return AstKeywordEnum.Receive;
            }
            if ((value == "RECOMPILE"))
            {
                return AstKeywordEnum.Recompile;
            }
            if ((value == "RECOVERY"))
            {
                return AstKeywordEnum.Recovery;
            }
            if ((value == "RECURSIVE_TRIGGERS"))
            {
                return AstKeywordEnum.RecursiveTriggers;
            }
            if ((value == "RELATIVE"))
            {
                return AstKeywordEnum.Relative;
            }
            if ((value == "REMOTE"))
            {
                return AstKeywordEnum.Remote;
            }
            if ((value == "REMOTE_PROC_TRANSACTIONS"))
            {
                return AstKeywordEnum.RemoteProcTransactions;
            }
            if ((value == "REMOTE_SERVICE_NAME"))
            {
                return AstKeywordEnum.RemoteServiceName;
            }
            if ((value == "REMOVE"))
            {
                return AstKeywordEnum.Remove;
            }
            if ((value == "REORGANIZE"))
            {
                return AstKeywordEnum.Reorganize;
            }
            if ((value == "REPEATABLE"))
            {
                return AstKeywordEnum.Repeatable;
            }
            if ((value == "REPEATABLEREAD"))
            {
                return AstKeywordEnum.Repeatableread;
            }
            if ((value == "REPLACE"))
            {
                return AstKeywordEnum.Replace;
            }
            if ((value == "REPLICA"))
            {
                return AstKeywordEnum.Replica;
            }
            if ((value == "REPLICATE"))
            {
                return AstKeywordEnum.Replicate;
            }
            if ((value == "REQUEST_MAX_CPU_TIME_SEC"))
            {
                return AstKeywordEnum.RequestMaxCpuTimeSec;
            }
            if ((value == "REQUEST_MAX_MEMORY_GRANT_PERCENT"))
            {
                return AstKeywordEnum.RequestMaxMemoryGrantPercent;
            }
            if ((value == "REQUEST_MEMORY_GRANT_TIMEOUT_SEC"))
            {
                return AstKeywordEnum.RequestMemoryGrantTimeoutSec;
            }
            if ((value == "REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT"))
            {
                return AstKeywordEnum.RequiredSynchronizedSecondariesToCommit;
            }
            if ((value == "RESAMPLE"))
            {
                return AstKeywordEnum.Resample;
            }
            if ((value == "RESERVE_DISK_SPACE"))
            {
                return AstKeywordEnum.ReserveDiskSpace;
            }
            if ((value == "RESOURCE"))
            {
                return AstKeywordEnum.Resource;
            }
            if ((value == "RESOURCE_MANAGER_LOCATION"))
            {
                return AstKeywordEnum.ResourceManagerLocation;
            }
            if ((value == "RESTRICTED_USER"))
            {
                return AstKeywordEnum.RestrictedUser;
            }
            if ((value == "RESUMABLE"))
            {
                return AstKeywordEnum.Resumable;
            }
            if ((value == "RETENTION"))
            {
                return AstKeywordEnum.Retention;
            }
            if ((value == "REVERSE"))
            {
                return AstKeywordEnum.Reverse;
            }
            if ((value == "ROBUST"))
            {
                return AstKeywordEnum.Robust;
            }
            if ((value == "ROOT"))
            {
                return AstKeywordEnum.Root;
            }
            if ((value == "ROUTE"))
            {
                return AstKeywordEnum.Route;
            }
            if ((value == "ROW"))
            {
                return AstKeywordEnum.Row;
            }
            if ((value == "ROW_NUMBER"))
            {
                return AstKeywordEnum.RowNumber;
            }
            if ((value == "ROWGUID"))
            {
                return AstKeywordEnum.Rowguid;
            }
            if ((value == "ROWLOCK"))
            {
                return AstKeywordEnum.Rowlock;
            }
            if ((value == "ROWS"))
            {
                return AstKeywordEnum.Rows;
            }
            if ((value == "RTRIM"))
            {
                return AstKeywordEnum.Rtrim;
            }
            if ((value == "SAMPLE"))
            {
                return AstKeywordEnum.Sample;
            }
            if ((value == "SCHEMA_ID"))
            {
                return AstKeywordEnum.SchemaId;
            }
            if ((value == "SCHEMA_NAME"))
            {
                return AstKeywordEnum.SchemaName;
            }
            if ((value == "SCHEMABINDING"))
            {
                return AstKeywordEnum.Schemabinding;
            }
            if ((value == "SCOPE_IDENTITY"))
            {
                return AstKeywordEnum.ScopeIdentity;
            }
            if ((value == "SCOPED"))
            {
                return AstKeywordEnum.Scoped;
            }
            if ((value == "SCROLL"))
            {
                return AstKeywordEnum.Scroll;
            }
            if ((value == "SCROLL_LOCKS"))
            {
                return AstKeywordEnum.ScrollLocks;
            }
            if ((value == "SEARCH"))
            {
                return AstKeywordEnum.Search;
            }
            if ((value == "SECONDARY"))
            {
                return AstKeywordEnum.Secondary;
            }
            if ((value == "SECONDARY_ONLY"))
            {
                return AstKeywordEnum.SecondaryOnly;
            }
            if ((value == "SECONDARY_ROLE"))
            {
                return AstKeywordEnum.SecondaryRole;
            }
            if ((value == "SECONDS"))
            {
                return AstKeywordEnum.Seconds;
            }
            if ((value == "SECRET"))
            {
                return AstKeywordEnum.Secret;
            }
            if ((value == "SECURABLES"))
            {
                return AstKeywordEnum.Securables;
            }
            if ((value == "SECURITY"))
            {
                return AstKeywordEnum.Security;
            }
            if ((value == "SECURITY_LOG"))
            {
                return AstKeywordEnum.SecurityLog;
            }
            if ((value == "SEEDING_MODE"))
            {
                return AstKeywordEnum.SeedingMode;
            }
            if ((value == "SELF"))
            {
                return AstKeywordEnum.Self;
            }
            if ((value == "SEMI_SENSITIVE"))
            {
                return AstKeywordEnum.SemiSensitive;
            }
            if ((value == "SEND"))
            {
                return AstKeywordEnum.Send;
            }
            if ((value == "SENT"))
            {
                return AstKeywordEnum.Sent;
            }
            if ((value == "SEQUENCE"))
            {
                return AstKeywordEnum.Sequence;
            }
            if ((value == "SEQUENCE_NUMBER"))
            {
                return AstKeywordEnum.SequenceNumber;
            }
            if ((value == "SERIALIZABLE"))
            {
                return AstKeywordEnum.Serializable;
            }
            if ((value == "SERVERPROPERTY"))
            {
                return AstKeywordEnum.Serverproperty;
            }
            if ((value == "SESSION_TIMEOUT"))
            {
                return AstKeywordEnum.SessionTimeout;
            }
            if ((value == "SETERROR"))
            {
                return AstKeywordEnum.Seterror;
            }
            if ((value == "SHARE"))
            {
                return AstKeywordEnum.Share;
            }
            if ((value == "SHARED"))
            {
                return AstKeywordEnum.Shared;
            }
            if ((value == "SHOWPLAN"))
            {
                return AstKeywordEnum.Showplan;
            }
            if ((value == "SHOWPLAN_ALL"))
            {
                return AstKeywordEnum.ShowplanAll;
            }
            if ((value == "SHOWPLAN_TEXT"))
            {
                return AstKeywordEnum.ShowplanText;
            }
            if ((value == "SHOWPLAN_XML"))
            {
                return AstKeywordEnum.ShowplanXml;
            }
            if ((value == "SIGNATURE"))
            {
                return AstKeywordEnum.Signature;
            }
            if ((value == "SIMPLE"))
            {
                return AstKeywordEnum.Simple;
            }
            if ((value == "SINGLE_USER"))
            {
                return AstKeywordEnum.SingleUser;
            }
            if ((value == "SIZE"))
            {
                return AstKeywordEnum.Size;
            }
            if ((value == "SMALLINT"))
            {
                return AstKeywordEnum.Smallint;
            }
            if ((value == "SNAPSHOT"))
            {
                return AstKeywordEnum.Snapshot;
            }
            if ((value == "SORT_IN_TEMPDB"))
            {
                return AstKeywordEnum.SortInTempdb;
            }
            if ((value == "SOUNDEX"))
            {
                return AstKeywordEnum.Soundex;
            }
            if ((value == "SPACE_KEYWORD"))
            {
                return AstKeywordEnum.SpaceKeyword;
            }
            if ((value == "SPARSE"))
            {
                return AstKeywordEnum.Sparse;
            }
            if ((value == "SPATIAL_WINDOW_MAX_CELLS"))
            {
                return AstKeywordEnum.SpatialWindowMaxCells;
            }
            if ((value == "STANDBY"))
            {
                return AstKeywordEnum.Standby;
            }
            if ((value == "START_DATE"))
            {
                return AstKeywordEnum.StartDate;
            }
            if ((value == "STATIC"))
            {
                return AstKeywordEnum.Static;
            }
            if ((value == "STATISTICS_INCREMENTAL"))
            {
                return AstKeywordEnum.StatisticsIncremental;
            }
            if ((value == "STATISTICS_NORECOMPUTE"))
            {
                return AstKeywordEnum.StatisticsNorecompute;
            }
            if ((value == "STATS_DATE"))
            {
                return AstKeywordEnum.StatsDate;
            }
            if ((value == "STATS_STREAM"))
            {
                return AstKeywordEnum.StatsStream;
            }
            if ((value == "STATUS"))
            {
                return AstKeywordEnum.Status;
            }
            if ((value == "STATUSONLY"))
            {
                return AstKeywordEnum.Statusonly;
            }
            if ((value == "STDEV"))
            {
                return AstKeywordEnum.Stdev;
            }
            if ((value == "STDEVP"))
            {
                return AstKeywordEnum.Stdevp;
            }
            if ((value == "STOPLIST"))
            {
                return AstKeywordEnum.Stoplist;
            }
            if ((value == "STR"))
            {
                return AstKeywordEnum.Str;
            }
            if ((value == "STRING_AGG"))
            {
                return AstKeywordEnum.StringAgg;
            }
            if ((value == "STRING_ESCAPE"))
            {
                return AstKeywordEnum.StringEscape;
            }
            if ((value == "STUFF"))
            {
                return AstKeywordEnum.Stuff;
            }
            if ((value == "SUBJECT"))
            {
                return AstKeywordEnum.Subject;
            }
            if ((value == "SUBSCRIBE"))
            {
                return AstKeywordEnum.Subscribe;
            }
            if ((value == "SUBSCRIPTION"))
            {
                return AstKeywordEnum.Subscription;
            }
            if ((value == "SUBSTRING"))
            {
                return AstKeywordEnum.Substring;
            }
            if ((value == "SUM"))
            {
                return AstKeywordEnum.Sum;
            }
            if ((value == "SUSPEND"))
            {
                return AstKeywordEnum.Suspend;
            }
            if ((value == "SYMMETRIC"))
            {
                return AstKeywordEnum.Symmetric;
            }
            if ((value == "SYNCHRONOUS_COMMIT"))
            {
                return AstKeywordEnum.SynchronousCommit;
            }
            if ((value == "SYNONYM"))
            {
                return AstKeywordEnum.Synonym;
            }
            if ((value == "SYSTEM"))
            {
                return AstKeywordEnum.System;
            }
            if ((value == "TABLOCK"))
            {
                return AstKeywordEnum.Tablock;
            }
            if ((value == "TABLOCKX"))
            {
                return AstKeywordEnum.Tablockx;
            }
            if ((value == "TAKE"))
            {
                return AstKeywordEnum.Take;
            }
            if ((value == "TARGET_RECOVERY_TIME"))
            {
                return AstKeywordEnum.TargetRecoveryTime;
            }
            if ((value == "TB"))
            {
                return AstKeywordEnum.Tb;
            }
            if ((value == "TEXTIMAGE_ON"))
            {
                return AstKeywordEnum.TextimageOn;
            }
            if ((value == "THROW"))
            {
                return AstKeywordEnum.Throw;
            }
            if ((value == "TIES"))
            {
                return AstKeywordEnum.Ties;
            }
            if ((value == "TIME"))
            {
                return AstKeywordEnum.Time;
            }
            if ((value == "TIMEOUT"))
            {
                return AstKeywordEnum.Timeout;
            }
            if ((value == "TIMER"))
            {
                return AstKeywordEnum.Timer;
            }
            if ((value == "TINYINT"))
            {
                return AstKeywordEnum.Tinyint;
            }
            if ((value == "TORN_PAGE_DETECTION"))
            {
                return AstKeywordEnum.TornPageDetection;
            }
            if ((value == "TRACKING"))
            {
                return AstKeywordEnum.Tracking;
            }
            if ((value == "TRANSACTION_ID"))
            {
                return AstKeywordEnum.TransactionId;
            }
            if ((value == "TRANSFORM_NOISE_WORDS"))
            {
                return AstKeywordEnum.TransformNoiseWords;
            }
            if ((value == "TRANSLATE"))
            {
                return AstKeywordEnum.Translate;
            }
            if ((value == "TRIM"))
            {
                return AstKeywordEnum.Trim;
            }
            if ((value == "TRIPLE_DES"))
            {
                return AstKeywordEnum.TripleDes;
            }
            if ((value == "TRIPLE_DES_3KEY"))
            {
                return AstKeywordEnum.TripleDes3key;
            }
            if ((value == "TRUSTWORTHY"))
            {
                return AstKeywordEnum.Trustworthy;
            }
            if ((value == "TRY"))
            {
                return AstKeywordEnum.Try;
            }
            if ((value == "TSQL"))
            {
                return AstKeywordEnum.Tsql;
            }
            if ((value == "TWO_DIGIT_YEAR_CUTOFF"))
            {
                return AstKeywordEnum.TwoDigitYearCutoff;
            }
            if ((value == "TYPE"))
            {
                return AstKeywordEnum.Type;
            }
            if ((value == "TYPE_ID"))
            {
                return AstKeywordEnum.TypeId;
            }
            if ((value == "TYPE_NAME"))
            {
                return AstKeywordEnum.TypeName;
            }
            if ((value == "TYPE_WARNING"))
            {
                return AstKeywordEnum.TypeWarning;
            }
            if ((value == "TYPEPROPERTY"))
            {
                return AstKeywordEnum.Typeproperty;
            }
            if ((value == "UNBOUNDED"))
            {
                return AstKeywordEnum.Unbounded;
            }
            if ((value == "UNCOMMITTED"))
            {
                return AstKeywordEnum.Uncommitted;
            }
            if ((value == "UNICODE"))
            {
                return AstKeywordEnum.Unicode;
            }
            if ((value == "UNKNOWN"))
            {
                return AstKeywordEnum.Unknown;
            }
            if ((value == "UNLIMITED"))
            {
                return AstKeywordEnum.Unlimited;
            }
            if ((value == "UNMASK"))
            {
                return AstKeywordEnum.Unmask;
            }
            if ((value == "UOW"))
            {
                return AstKeywordEnum.Uow;
            }
            if ((value == "UPDLOCK"))
            {
                return AstKeywordEnum.Updlock;
            }
            if ((value == "UPPER"))
            {
                return AstKeywordEnum.Upper;
            }
            if ((value == "USING"))
            {
                return AstKeywordEnum.Using;
            }
            if ((value == "VALID_XML"))
            {
                return AstKeywordEnum.ValidXml;
            }
            if ((value == "VALIDATION"))
            {
                return AstKeywordEnum.Validation;
            }
            if ((value == "VALUE"))
            {
                return AstKeywordEnum.Value;
            }
            if ((value == "VAR"))
            {
                return AstKeywordEnum.Var;
            }
            if ((value == "VARBINARY_KEYWORD"))
            {
                return AstKeywordEnum.VarbinaryKeyword;
            }
            if ((value == "VARP"))
            {
                return AstKeywordEnum.Varp;
            }
            if ((value == "VERSION"))
            {
                return AstKeywordEnum.Version;
            }
            if ((value == "VIEW_METADATA"))
            {
                return AstKeywordEnum.ViewMetadata;
            }
            if ((value == "VIEWS"))
            {
                return AstKeywordEnum.Views;
            }
            if ((value == "WAIT"))
            {
                return AstKeywordEnum.Wait;
            }
            if ((value == "WELL_FORMED_XML"))
            {
                return AstKeywordEnum.WellFormedXml;
            }
            if ((value == "WITHOUT_ARRAY_WRAPPER"))
            {
                return AstKeywordEnum.WithoutArrayWrapper;
            }
            if ((value == "WORK"))
            {
                return AstKeywordEnum.Work;
            }
            if ((value == "WORKLOAD"))
            {
                return AstKeywordEnum.Workload;
            }
            if ((value == "XLOCK"))
            {
                return AstKeywordEnum.Xlock;
            }
            if ((value == "XML"))
            {
                return AstKeywordEnum.Xml;
            }
            if ((value == "XML_COMPRESSION"))
            {
                return AstKeywordEnum.XmlCompression;
            }
            if ((value == "XMLDATA"))
            {
                return AstKeywordEnum.Xmldata;
            }
            if ((value == "XMLNAMESPACES"))
            {
                return AstKeywordEnum.Xmlnamespaces;
            }
            if ((value == "XMLSCHEMA"))
            {
                return AstKeywordEnum.Xmlschema;
            }
            if ((value == "XSINIL"))
            {
                return AstKeywordEnum.Xsinil;
            }
            if ((value == "ZONE"))
            {
                return AstKeywordEnum.Zone;
            }
            if ((value == "ABORT_AFTER_WAIT"))
            {
                return AstKeywordEnum.AbortAfterWait;
            }
            if ((value == "ABSENT"))
            {
                return AstKeywordEnum.Absent;
            }
            if ((value == "ADMINISTER"))
            {
                return AstKeywordEnum.Administer;
            }
            if ((value == "AES"))
            {
                return AstKeywordEnum.Aes;
            }
            if ((value == "ALLOW_CONNECTIONS"))
            {
                return AstKeywordEnum.AllowConnections;
            }
            if ((value == "ALLOW_MULTIPLE_EVENT_LOSS"))
            {
                return AstKeywordEnum.AllowMultipleEventLoss;
            }
            if ((value == "ALLOW_SINGLE_EVENT_LOSS"))
            {
                return AstKeywordEnum.AllowSingleEventLoss;
            }
            if ((value == "ANONYMOUS"))
            {
                return AstKeywordEnum.Anonymous;
            }
            if ((value == "APPEND"))
            {
                return AstKeywordEnum.Append;
            }
            if ((value == "APPLICATION"))
            {
                return AstKeywordEnum.Application;
            }
            if ((value == "ASYMMETRIC"))
            {
                return AstKeywordEnum.Asymmetric;
            }
            if ((value == "ASYNCHRONOUS_COMMIT"))
            {
                return AstKeywordEnum.AsynchronousCommit;
            }
            if ((value == "AUTHENTICATE"))
            {
                return AstKeywordEnum.Authenticate;
            }
            if ((value == "AUTHENTICATION"))
            {
                return AstKeywordEnum.Authentication;
            }
            if ((value == "AUTOMATED_BACKUP_PREFERENCE"))
            {
                return AstKeywordEnum.AutomatedBackupPreference;
            }
            if ((value == "AUTOMATIC"))
            {
                return AstKeywordEnum.Automatic;
            }
            if ((value == "AVAILABILITY_MODE"))
            {
                return AstKeywordEnum.AvailabilityMode;
            }
            if ((value == "BEFORE"))
            {
                return AstKeywordEnum.Before;
            }
            if ((value == "BLOCK"))
            {
                return AstKeywordEnum.Block;
            }
            if ((value == "BLOCKERS"))
            {
                return AstKeywordEnum.Blockers;
            }
            if ((value == "BLOCKSIZE"))
            {
                return AstKeywordEnum.Blocksize;
            }
            if ((value == "BLOCKING_HIERARCHY"))
            {
                return AstKeywordEnum.BlockingHierarchy;
            }
            if ((value == "BUFFER"))
            {
                return AstKeywordEnum.Buffer;
            }
            if ((value == "BUFFERCOUNT"))
            {
                return AstKeywordEnum.Buffercount;
            }
            if ((value == "CACHE"))
            {
                return AstKeywordEnum.Cache;
            }
            if ((value == "CALLED"))
            {
                return AstKeywordEnum.Called;
            }
            if ((value == "CERTIFICATE"))
            {
                return AstKeywordEnum.Certificate;
            }
            if ((value == "CHANGETABLE"))
            {
                return AstKeywordEnum.Changetable;
            }
            if ((value == "CHANGES"))
            {
                return AstKeywordEnum.Changes;
            }
            if ((value == "CHECK_POLICY"))
            {
                return AstKeywordEnum.CheckPolicy;
            }
            if ((value == "CHECK_EXPIRATION"))
            {
                return AstKeywordEnum.CheckExpiration;
            }
            if ((value == "CLASSIFIER_FUNCTION"))
            {
                return AstKeywordEnum.ClassifierFunction;
            }
            if ((value == "CLUSTER"))
            {
                return AstKeywordEnum.Cluster;
            }
            if ((value == "COMPRESS"))
            {
                return AstKeywordEnum.Compress;
            }
            if ((value == "COMPRESSION"))
            {
                return AstKeywordEnum.Compression;
            }
            if ((value == "CONNECT"))
            {
                return AstKeywordEnum.Connect;
            }
            if ((value == "CONNECTION"))
            {
                return AstKeywordEnum.Connection;
            }
            if ((value == "CONFIGURATION"))
            {
                return AstKeywordEnum.Configuration;
            }
            if ((value == "CONNECTIONPROPERTY"))
            {
                return AstKeywordEnum.Connectionproperty;
            }
            if ((value == "CONTAINMENT"))
            {
                return AstKeywordEnum.Containment;
            }
            if ((value == "CONTEXT"))
            {
                return AstKeywordEnum.Context;
            }
            if ((value == "CONTEXT_INFO"))
            {
                return AstKeywordEnum.ContextInfo;
            }
            if ((value == "CONTINUE_AFTER_ERROR"))
            {
                return AstKeywordEnum.ContinueAfterError;
            }
            if ((value == "CONTRACT"))
            {
                return AstKeywordEnum.Contract;
            }
            if ((value == "CONTRACT_NAME"))
            {
                return AstKeywordEnum.ContractName;
            }
            if ((value == "CONVERSATION"))
            {
                return AstKeywordEnum.Conversation;
            }
            if ((value == "COPY_ONLY"))
            {
                return AstKeywordEnum.CopyOnly;
            }
            if ((value == "CURRENT_REQUEST_ID"))
            {
                return AstKeywordEnum.CurrentRequestId;
            }
            if ((value == "CURRENT_TRANSACTION_ID"))
            {
                return AstKeywordEnum.CurrentTransactionId;
            }
            if ((value == "CYCLE"))
            {
                return AstKeywordEnum.Cycle;
            }
            if ((value == "DATA_COMPRESSION"))
            {
                return AstKeywordEnum.DataCompression;
            }
            if ((value == "DATA_SOURCE"))
            {
                return AstKeywordEnum.DataSource;
            }
            if ((value == "DATABASE_MIRRORING"))
            {
                return AstKeywordEnum.DatabaseMirroring;
            }
            if ((value == "DATASPACE"))
            {
                return AstKeywordEnum.Dataspace;
            }
            if ((value == "DDL"))
            {
                return AstKeywordEnum.Ddl;
            }
            if ((value == "DECOMPRESS"))
            {
                return AstKeywordEnum.Decompress;
            }
            if ((value == "DEFAULT_DATABASE"))
            {
                return AstKeywordEnum.DefaultDatabase;
            }
            if ((value == "DEFAULT_SCHEMA"))
            {
                return AstKeywordEnum.DefaultSchema;
            }
            if ((value == "DIAGNOSTICS"))
            {
                return AstKeywordEnum.Diagnostics;
            }
            if ((value == "DIFFERENTIAL"))
            {
                return AstKeywordEnum.Differential;
            }
            if ((value == "DISTRIBUTION"))
            {
                return AstKeywordEnum.Distribution;
            }
            if ((value == "DTC_SUPPORT"))
            {
                return AstKeywordEnum.DtcSupport;
            }
            if ((value == "ENABLED"))
            {
                return AstKeywordEnum.Enabled;
            }
            if ((value == "ENDPOINT"))
            {
                return AstKeywordEnum.Endpoint;
            }
            if ((value == "ERROR"))
            {
                return AstKeywordEnum.Error;
            }
            if ((value == "ERROR_LINE"))
            {
                return AstKeywordEnum.ErrorLine;
            }
            if ((value == "ERROR_MESSAGE"))
            {
                return AstKeywordEnum.ErrorMessage;
            }
            if ((value == "ERROR_NUMBER"))
            {
                return AstKeywordEnum.ErrorNumber;
            }
            if ((value == "ERROR_PROCEDURE"))
            {
                return AstKeywordEnum.ErrorProcedure;
            }
            if ((value == "ERROR_SEVERITY"))
            {
                return AstKeywordEnum.ErrorSeverity;
            }
            if ((value == "ERROR_STATE"))
            {
                return AstKeywordEnum.ErrorState;
            }
            if ((value == "EVENT"))
            {
                return AstKeywordEnum.Event;
            }
            if ((value == "EVENTDATA"))
            {
                return AstKeywordEnum.Eventdata;
            }
            if ((value == "EVENT_RETENTION_MODE"))
            {
                return AstKeywordEnum.EventRetentionMode;
            }
            if ((value == "EXECUTABLE_FILE"))
            {
                return AstKeywordEnum.ExecutableFile;
            }
            if ((value == "EXPIREDATE"))
            {
                return AstKeywordEnum.Expiredate;
            }
            if ((value == "EXTENSION"))
            {
                return AstKeywordEnum.Extension;
            }
            if ((value == "EXTERNAL_ACCESS"))
            {
                return AstKeywordEnum.ExternalAccess;
            }
            if ((value == "FAILOVER"))
            {
                return AstKeywordEnum.Failover;
            }
            if ((value == "FAILURECONDITIONLEVEL"))
            {
                return AstKeywordEnum.Failureconditionlevel;
            }
            if ((value == "FAN_IN"))
            {
                return AstKeywordEnum.FanIn;
            }
            if ((value == "FILE_SNAPSHOT"))
            {
                return AstKeywordEnum.FileSnapshot;
            }
            if ((value == "FORCESEEK"))
            {
                return AstKeywordEnum.Forceseek;
            }
            if ((value == "FORCE_SERVICE_ALLOW_DATA_LOSS"))
            {
                return AstKeywordEnum.ForceServiceAllowDataLoss;
            }
            if ((value == "FORMATMESSAGE"))
            {
                return AstKeywordEnum.Formatmessage;
            }
            if ((value == "GET"))
            {
                return AstKeywordEnum.Get;
            }
            if ((value == "GET_FILESTREAM_TRANSACTION_CONTEXT"))
            {
                return AstKeywordEnum.GetFilestreamTransactionContext;
            }
            if ((value == "GETANCESTOR"))
            {
                return AstKeywordEnum.Getancestor;
            }
            if ((value == "GETANSINULL"))
            {
                return AstKeywordEnum.Getansinull;
            }
            if ((value == "GETDESCENDANT"))
            {
                return AstKeywordEnum.Getdescendant;
            }
            if ((value == "GETLEVEL"))
            {
                return AstKeywordEnum.Getlevel;
            }
            if ((value == "GETREPARENTEDVALUE"))
            {
                return AstKeywordEnum.Getreparentedvalue;
            }
            if ((value == "GETROOT"))
            {
                return AstKeywordEnum.Getroot;
            }
            if ((value == "GOVERNOR"))
            {
                return AstKeywordEnum.Governor;
            }
            if ((value == "HASHED"))
            {
                return AstKeywordEnum.Hashed;
            }
            if ((value == "HEALTHCHECKTIMEOUT"))
            {
                return AstKeywordEnum.Healthchecktimeout;
            }
            if ((value == "HEAP"))
            {
                return AstKeywordEnum.Heap;
            }
            if ((value == "HIERARCHYID"))
            {
                return AstKeywordEnum.Hierarchyid;
            }
            if ((value == "HOST_ID"))
            {
                return AstKeywordEnum.HostId;
            }
            if ((value == "HOST_NAME"))
            {
                return AstKeywordEnum.HostName;
            }
            if ((value == "IIF"))
            {
                return AstKeywordEnum.Iif;
            }
            if ((value == "IO"))
            {
                return AstKeywordEnum.Io;
            }
            if ((value == "INCLUDE"))
            {
                return AstKeywordEnum.Include;
            }
            if ((value == "INCREMENT"))
            {
                return AstKeywordEnum.Increment;
            }
            if ((value == "INFINITE"))
            {
                return AstKeywordEnum.Infinite;
            }
            if ((value == "INIT"))
            {
                return AstKeywordEnum.Init;
            }
            if ((value == "INSTEAD"))
            {
                return AstKeywordEnum.Instead;
            }
            if ((value == "ISDESCENDANTOF"))
            {
                return AstKeywordEnum.Isdescendantof;
            }
            if ((value == "ISNULL"))
            {
                return AstKeywordEnum.Isnull;
            }
            if ((value == "ISNUMERIC"))
            {
                return AstKeywordEnum.Isnumeric;
            }
            if ((value == "KERBEROS"))
            {
                return AstKeywordEnum.Kerberos;
            }
            if ((value == "KEY_PATH"))
            {
                return AstKeywordEnum.KeyPath;
            }
            if ((value == "KEY_STORE_PROVIDER_NAME"))
            {
                return AstKeywordEnum.KeyStoreProviderName;
            }
            if ((value == "LANGUAGE"))
            {
                return AstKeywordEnum.Language;
            }
            if ((value == "LIBRARY"))
            {
                return AstKeywordEnum.Library;
            }
            if ((value == "LIFETIME"))
            {
                return AstKeywordEnum.Lifetime;
            }
            if ((value == "LINKED"))
            {
                return AstKeywordEnum.Linked;
            }
            if ((value == "LINUX"))
            {
                return AstKeywordEnum.Linux;
            }
            if ((value == "LISTENER_IP"))
            {
                return AstKeywordEnum.ListenerIp;
            }
            if ((value == "LISTENER_PORT"))
            {
                return AstKeywordEnum.ListenerPort;
            }
            if ((value == "LOCAL_SERVICE_NAME"))
            {
                return AstKeywordEnum.LocalServiceName;
            }
            if ((value == "LOG"))
            {
                return AstKeywordEnum.Log;
            }
            if ((value == "MASK"))
            {
                return AstKeywordEnum.Mask;
            }
            if ((value == "MATCHED"))
            {
                return AstKeywordEnum.Matched;
            }
            if ((value == "MASTER"))
            {
                return AstKeywordEnum.Master;
            }
            if ((value == "MAX_MEMORY"))
            {
                return AstKeywordEnum.MaxMemory;
            }
            if ((value == "MAXTRANSFER"))
            {
                return AstKeywordEnum.Maxtransfer;
            }
            if ((value == "MAXVALUE"))
            {
                return AstKeywordEnum.Maxvalue;
            }
            if ((value == "MAX_DISPATCH_LATENCY"))
            {
                return AstKeywordEnum.MaxDispatchLatency;
            }
            if ((value == "MAX_DURATION"))
            {
                return AstKeywordEnum.MaxDuration;
            }
            if ((value == "MAX_EVENT_SIZE"))
            {
                return AstKeywordEnum.MaxEventSize;
            }
            if ((value == "MAX_SIZE"))
            {
                return AstKeywordEnum.MaxSize;
            }
            if ((value == "MAX_OUTSTANDING_IO_PER_VOLUME"))
            {
                return AstKeywordEnum.MaxOutstandingIoPerVolume;
            }
            if ((value == "MEDIADESCRIPTION"))
            {
                return AstKeywordEnum.Mediadescription;
            }
            if ((value == "MEDIANAME"))
            {
                return AstKeywordEnum.Medianame;
            }
            if ((value == "MEMBER"))
            {
                return AstKeywordEnum.Member;
            }
            if ((value == "MEMORY_PARTITION_MODE"))
            {
                return AstKeywordEnum.MemoryPartitionMode;
            }
            if ((value == "MESSAGE_FORWARDING"))
            {
                return AstKeywordEnum.MessageForwarding;
            }
            if ((value == "MESSAGE_FORWARD_SIZE"))
            {
                return AstKeywordEnum.MessageForwardSize;
            }
            if ((value == "MINVALUE"))
            {
                return AstKeywordEnum.Minvalue;
            }
            if ((value == "MIRROR"))
            {
                return AstKeywordEnum.Mirror;
            }
            if ((value == "MUST_CHANGE"))
            {
                return AstKeywordEnum.MustChange;
            }
            if ((value == "NEWID"))
            {
                return AstKeywordEnum.Newid;
            }
            if ((value == "NEWSEQUENTIALID"))
            {
                return AstKeywordEnum.Newsequentialid;
            }
            if ((value == "NOFORMAT"))
            {
                return AstKeywordEnum.Noformat;
            }
            if ((value == "NOINIT"))
            {
                return AstKeywordEnum.Noinit;
            }
            if ((value == "NONE"))
            {
                return AstKeywordEnum.None;
            }
            if ((value == "NOREWIND"))
            {
                return AstKeywordEnum.Norewind;
            }
            if ((value == "NOSKIP"))
            {
                return AstKeywordEnum.Noskip;
            }
            if ((value == "NOUNLOAD"))
            {
                return AstKeywordEnum.Nounload;
            }
            if ((value == "NO_CHECKSUM"))
            {
                return AstKeywordEnum.NoChecksum;
            }
            if ((value == "NO_COMPRESSION"))
            {
                return AstKeywordEnum.NoCompression;
            }
            if ((value == "NO_EVENT_LOSS"))
            {
                return AstKeywordEnum.NoEventLoss;
            }
            if ((value == "NOTIFICATION"))
            {
                return AstKeywordEnum.Notification;
            }
            if ((value == "NTLM"))
            {
                return AstKeywordEnum.Ntlm;
            }
            if ((value == "OLD_PASSWORD"))
            {
                return AstKeywordEnum.OldPassword;
            }
            if ((value == "ON_FAILURE"))
            {
                return AstKeywordEnum.OnFailure;
            }
            if ((value == "OPERATIONS"))
            {
                return AstKeywordEnum.Operations;
            }
            if ((value == "PAGE"))
            {
                return AstKeywordEnum.Page;
            }
            if ((value == "PARAM_NODE"))
            {
                return AstKeywordEnum.ParamNode;
            }
            if ((value == "PARTIAL"))
            {
                return AstKeywordEnum.Partial;
            }
            if ((value == "PASSWORD"))
            {
                return AstKeywordEnum.Password;
            }
            if ((value == "PERMISSION_SET"))
            {
                return AstKeywordEnum.PermissionSet;
            }
            if ((value == "PER_CPU"))
            {
                return AstKeywordEnum.PerCpu;
            }
            if ((value == "PER_DB"))
            {
                return AstKeywordEnum.PerDb;
            }
            if ((value == "PER_NODE"))
            {
                return AstKeywordEnum.PerNode;
            }
            if ((value == "PERSISTED"))
            {
                return AstKeywordEnum.Persisted;
            }
            if ((value == "PLATFORM"))
            {
                return AstKeywordEnum.Platform;
            }
            if ((value == "POLICY"))
            {
                return AstKeywordEnum.Policy;
            }
            if ((value == "PREDICATE"))
            {
                return AstKeywordEnum.Predicate;
            }
            if ((value == "PROCESS"))
            {
                return AstKeywordEnum.Process;
            }
            if ((value == "PROFILE"))
            {
                return AstKeywordEnum.Profile;
            }
            if ((value == "PYTHON"))
            {
                return AstKeywordEnum.Python;
            }
            if ((value == "R"))
            {
                return AstKeywordEnum.R;
            }
            if ((value == "READ_WRITE_FILEGROUPS"))
            {
                return AstKeywordEnum.ReadWriteFilegroups;
            }
            if ((value == "REGENERATE"))
            {
                return AstKeywordEnum.Regenerate;
            }
            if ((value == "RELATED_CONVERSATION"))
            {
                return AstKeywordEnum.RelatedConversation;
            }
            if ((value == "RELATED_CONVERSATION_GROUP"))
            {
                return AstKeywordEnum.RelatedConversationGroup;
            }
            if ((value == "REQUIRED"))
            {
                return AstKeywordEnum.Required;
            }
            if ((value == "RESET"))
            {
                return AstKeywordEnum.Reset;
            }
            if ((value == "RESOURCES"))
            {
                return AstKeywordEnum.Resources;
            }
            if ((value == "RESTART"))
            {
                return AstKeywordEnum.Restart;
            }
            if ((value == "RESUME"))
            {
                return AstKeywordEnum.Resume;
            }
            if ((value == "RETAINDAYS"))
            {
                return AstKeywordEnum.Retaindays;
            }
            if ((value == "RETURNS"))
            {
                return AstKeywordEnum.Returns;
            }
            if ((value == "REWIND"))
            {
                return AstKeywordEnum.Rewind;
            }
            if ((value == "ROLE"))
            {
                return AstKeywordEnum.Role;
            }
            if ((value == "ROUND_ROBIN"))
            {
                return AstKeywordEnum.RoundRobin;
            }
            if ((value == "ROWCOUNT_BIG"))
            {
                return AstKeywordEnum.RowcountBig;
            }
            if ((value == "RSA_512"))
            {
                return AstKeywordEnum.Rsa512;
            }
            if ((value == "RSA_1024"))
            {
                return AstKeywordEnum.Rsa1024;
            }
            if ((value == "RSA_2048"))
            {
                return AstKeywordEnum.Rsa2048;
            }
            if ((value == "RSA_3072"))
            {
                return AstKeywordEnum.Rsa3072;
            }
            if ((value == "RSA_4096"))
            {
                return AstKeywordEnum.Rsa4096;
            }
            if ((value == "SAFETY"))
            {
                return AstKeywordEnum.Safety;
            }
            if ((value == "SAFE"))
            {
                return AstKeywordEnum.Safe;
            }
            if ((value == "SCHEDULER"))
            {
                return AstKeywordEnum.Scheduler;
            }
            if ((value == "SCHEME"))
            {
                return AstKeywordEnum.Scheme;
            }
            if ((value == "SCRIPT"))
            {
                return AstKeywordEnum.Script;
            }
            if ((value == "SERVER"))
            {
                return AstKeywordEnum.Server;
            }
            if ((value == "SERVICE"))
            {
                return AstKeywordEnum.Service;
            }
            if ((value == "SERVICE_BROKER"))
            {
                return AstKeywordEnum.ServiceBroker;
            }
            if ((value == "SERVICE_NAME"))
            {
                return AstKeywordEnum.ServiceName;
            }
            if ((value == "SESSION"))
            {
                return AstKeywordEnum.Session;
            }
            if ((value == "SESSION_CONTEXT"))
            {
                return AstKeywordEnum.SessionContext;
            }
            if ((value == "SETTINGS"))
            {
                return AstKeywordEnum.Settings;
            }
            if ((value == "SHRINKLOG"))
            {
                return AstKeywordEnum.Shrinklog;
            }
            if ((value == "SID"))
            {
                return AstKeywordEnum.Sid;
            }
            if ((value == "SKIP_KEYWORD"))
            {
                return AstKeywordEnum.SkipKeyword;
            }
            if ((value == "SOFTNUMA"))
            {
                return AstKeywordEnum.Softnuma;
            }
            if ((value == "SOURCE"))
            {
                return AstKeywordEnum.Source;
            }
            if ((value == "SPECIFICATION"))
            {
                return AstKeywordEnum.Specification;
            }
            if ((value == "SPLIT"))
            {
                return AstKeywordEnum.Split;
            }
            if ((value == "SQL"))
            {
                return AstKeywordEnum.Sql;
            }
            if ((value == "SQLDUMPERFLAGS"))
            {
                return AstKeywordEnum.Sqldumperflags;
            }
            if ((value == "SQLDUMPERPATH"))
            {
                return AstKeywordEnum.Sqldumperpath;
            }
            if ((value == "SQLDUMPERTIMEOUT"))
            {
                return AstKeywordEnum.Sqldumpertimeout;
            }
            if ((value == "STATE"))
            {
                return AstKeywordEnum.State;
            }
            if ((value == "STATS"))
            {
                return AstKeywordEnum.Stats;
            }
            if ((value == "START"))
            {
                return AstKeywordEnum.Start;
            }
            if ((value == "STARTED"))
            {
                return AstKeywordEnum.Started;
            }
            if ((value == "STARTUP_STATE"))
            {
                return AstKeywordEnum.StartupState;
            }
            if ((value == "STOP"))
            {
                return AstKeywordEnum.Stop;
            }
            if ((value == "STOPPED"))
            {
                return AstKeywordEnum.Stopped;
            }
            if ((value == "STOP_ON_ERROR"))
            {
                return AstKeywordEnum.StopOnError;
            }
            if ((value == "SUPPORTED"))
            {
                return AstKeywordEnum.Supported;
            }
            if ((value == "SWITCH"))
            {
                return AstKeywordEnum.Switch;
            }
            if ((value == "TAPE"))
            {
                return AstKeywordEnum.Tape;
            }
            if ((value == "TARGET"))
            {
                return AstKeywordEnum.Target;
            }
            if ((value == "TCP"))
            {
                return AstKeywordEnum.Tcp;
            }
            if ((value == "TOSTRING"))
            {
                return AstKeywordEnum.Tostring;
            }
            if ((value == "TRACE"))
            {
                return AstKeywordEnum.Trace;
            }
            if ((value == "TRACK_CAUSALITY"))
            {
                return AstKeywordEnum.TrackCausality;
            }
            if ((value == "TRANSFER"))
            {
                return AstKeywordEnum.Transfer;
            }
            if ((value == "UNCHECKED"))
            {
                return AstKeywordEnum.Unchecked;
            }
            if ((value == "UNLOCK"))
            {
                return AstKeywordEnum.Unlock;
            }
            if ((value == "UNSAFE"))
            {
                return AstKeywordEnum.Unsafe;
            }
            if ((value == "URL"))
            {
                return AstKeywordEnum.Url;
            }
            if ((value == "USED"))
            {
                return AstKeywordEnum.Used;
            }
            if ((value == "VERBOSELOGGING"))
            {
                return AstKeywordEnum.Verboselogging;
            }
            if ((value == "VISIBILITY"))
            {
                return AstKeywordEnum.Visibility;
            }
            if ((value == "WAIT_AT_LOW_PRIORITY"))
            {
                return AstKeywordEnum.WaitAtLowPriority;
            }
            if ((value == "WINDOWS"))
            {
                return AstKeywordEnum.Windows;
            }
            if ((value == "WITHOUT"))
            {
                return AstKeywordEnum.Without;
            }
            if ((value == "WITNESS"))
            {
                return AstKeywordEnum.Witness;
            }
            if ((value == "XACT_ABORT"))
            {
                return AstKeywordEnum.XactAbort;
            }
            if ((value == "XACT_STATE"))
            {
                return AstKeywordEnum.XactState;
            }
            if ((value == "VARCHAR"))
            {
                return AstKeywordEnum.Varchar;
            }
            if ((value == "NVARCHAR"))
            {
                return AstKeywordEnum.Nvarchar;
            }
            if ((value == "PRECISION"))
            {
                return AstKeywordEnum.Precision;
            }
            return AstKeywordEnum._undefined;
        }
    }
    
    /// <summary>
    /// file_size_unity
    /// 	 : KB
    /// 	 | MB
    /// 	 | GB
    /// 	 | TB
    /// 	 | MODULE
    /// </summary>
    public partial class AstFileSizeUnity : AstTerminal<AstFileSizeUnityEnum>
    {
        
        public AstFileSizeUnity(ITerminalNode t, string value) : 
                base(t, AstFileSizeUnity.GetValue(value))
        {
        }
        
        public AstFileSizeUnity(ITerminalNode t, AstFileSizeUnityEnum value) : 
                base(t, value)
        {
        }
        
        public AstFileSizeUnity(ParserRuleContext ctx, string value) : 
                base(ctx, AstFileSizeUnity.GetValue(value))
        {
        }
        
        public AstFileSizeUnity(Position p, string value) : 
                base(p, AstFileSizeUnity.GetValue(value))
        {
        }
        
        public AstFileSizeUnity(Position p, AstFileSizeUnityEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileSizeUnity(this);
        }
        
        protected static AstFileSizeUnityEnum GetValue(string value)
        {
            if ((value == "KB"))
            {
                return AstFileSizeUnityEnum.Kb;
            }
            if ((value == "MB"))
            {
                return AstFileSizeUnityEnum.Mb;
            }
            if ((value == "GB"))
            {
                return AstFileSizeUnityEnum.Gb;
            }
            if ((value == "TB"))
            {
                return AstFileSizeUnityEnum.Tb;
            }
            if ((value == "MODULE"))
            {
                return AstFileSizeUnityEnum.Module;
            }
            return AstFileSizeUnityEnum._undefined;
        }
    }
    
    /// <summary>
    /// log_seterror_nowait
    /// 	 : LOG
    /// 	 | SETERROR
    /// 	 | NOWAIT
    /// </summary>
    public partial class AstLogSeterrorNowait : AstTerminal<AstLogSeterrorNowaitEnum>
    {
        
        public AstLogSeterrorNowait(ITerminalNode t, string value) : 
                base(t, AstLogSeterrorNowait.GetValue(value))
        {
        }
        
        public AstLogSeterrorNowait(ITerminalNode t, AstLogSeterrorNowaitEnum value) : 
                base(t, value)
        {
        }
        
        public AstLogSeterrorNowait(ParserRuleContext ctx, string value) : 
                base(ctx, AstLogSeterrorNowait.GetValue(value))
        {
        }
        
        public AstLogSeterrorNowait(Position p, string value) : 
                base(p, AstLogSeterrorNowait.GetValue(value))
        {
        }
        
        public AstLogSeterrorNowait(Position p, AstLogSeterrorNowaitEnum value) : 
                base(p, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLogSeterrorNowait(this);
        }
        
        protected static AstLogSeterrorNowaitEnum GetValue(string value)
        {
            if ((value == "LOG"))
            {
                return AstLogSeterrorNowaitEnum.Log;
            }
            if ((value == "SETERROR"))
            {
                return AstLogSeterrorNowaitEnum.Seterror;
            }
            if ((value == "NOWAIT"))
            {
                return AstLogSeterrorNowaitEnum.Nowait;
            }
            return AstLogSeterrorNowaitEnum._undefined;
        }
    }
}
