#nullable disable
// Generated by Models.IdentifiertWithProperties : vendredi 14 avril 2023
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Asts.TSql
{
    using System;
    using Bb.Parsers;
    using Antlr4.Runtime;
    using System.Collections;
    using Antlr4.Runtime.Tree;
    
    
    /// <summary>
    /// drop_statistics
    /// 	 : DROP  STATISTICS  full_table_ref_columns
    /// </summary>
    public partial class AstDropStatistics : AstRule
    {
        
        private AstFullTableRefColumns _fullTableRefColumns;
        
        public AstDropStatistics(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRefColumns>())
                {
                    this._fullTableRefColumns = ((AstFullTableRefColumns)(enumerator.Current));
                }
            }
        }
        
        public AstDropStatistics(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRefColumns>())
                {
                    this._fullTableRefColumns = ((AstFullTableRefColumns)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRefColumns FullTableRefColumns
        {
            get
            {
                return this._fullTableRefColumns;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropStatistics(this);
        }
    }
    
    /// <summary>
    /// full_table_ref_column
    /// 	 : (full_table_ref  DOT)?  name = id_
    /// </summary>
    public partial class AstFullTableRefColumn : AstRule
    {
        
        public AstFullTableRefColumn(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
            }
        }
        
        public AstFullTableRefColumn(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullTableRefColumn(this);
        }
    }
    
    /// <summary>
    /// partition_function
    /// 	 : (database_id  DOT)?  DOLLAR_PARTITION  DOT  function_id  LR_BRACKET  expression  RR_BRACKET
    /// </summary>
    public partial class AstPartitionFunction : AstRule
    {
        
        private AstFunctionId _functionId;
        
        private AstExpression _expression;
        
        public AstPartitionFunction(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionId>())
                {
                    this._functionId = ((AstFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstPartitionFunction(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionId>())
                {
                    this._functionId = ((AstFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFunctionId FunctionId
        {
            get
            {
                return this._functionId;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionFunction(this);
        }
    }
    
    /// <summary>
    /// server_database_schema_object_ref
    /// 	 : (server_id  DOT)?  (database_id  DOT)?  (schema_id  DOT)?  object_id
    /// </summary>
    public partial class AstServerDatabaseSchemaObjectRef : AstRule
    {
        
        private AstObjectId _objectId;
        
        public AstServerDatabaseSchemaObjectRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstObjectId>())
                {
                    this._objectId = ((AstObjectId)(enumerator.Current));
                }
            }
        }
        
        public AstServerDatabaseSchemaObjectRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstObjectId>())
                {
                    this._objectId = ((AstObjectId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstObjectId ObjectId
        {
            get
            {
                return this._objectId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerDatabaseSchemaObjectRef(this);
        }
    }
    
    /// <summary>
    /// database_stoplist_ref
    /// 	 : (database_id  DOT)?  stoplist_id
    /// </summary>
    public partial class AstDatabaseStoplistRef : AstRule
    {
        
        private AstStoplistId _stoplistId;
        
        public AstDatabaseStoplistRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseStoplistRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStoplistId StoplistId
        {
            get
            {
                return this._stoplistId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseStoplistRef(this);
        }
    }
    
    /// <summary>
    /// event_module_package_action_ref
    /// 	 : (event_module_guid_id  DOT)?  event_package_id  DOT  action_id
    /// </summary>
    public partial class AstEventModulePackageActionRef : AstRule
    {
        
        private AstEventPackageId _eventPackageId;
        
        private AstActionId _actionId;
        
        public AstEventModulePackageActionRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventPackageId>())
                {
                    this._eventPackageId = ((AstEventPackageId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstActionId>())
                {
                    this._actionId = ((AstActionId)(enumerator.Current));
                }
            }
        }
        
        public AstEventModulePackageActionRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventPackageId>())
                {
                    this._eventPackageId = ((AstEventPackageId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstActionId>())
                {
                    this._actionId = ((AstActionId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventPackageId EventPackageId
        {
            get
            {
                return this._eventPackageId;
            }
        }
        
        public virtual AstActionId ActionId
        {
            get
            {
                return this._actionId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventModulePackageActionRef(this);
        }
    }
    
    /// <summary>
    /// schema_sequence_ref
    /// 	 : (schema_id  DOT)?  sequence_id
    /// </summary>
    public partial class AstSchemaSequenceRef : AstRule
    {
        
        private AstSequenceId _sequenceId;
        
        public AstSchemaSequenceRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSequenceId>())
                {
                    this._sequenceId = ((AstSequenceId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaSequenceRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSequenceId>())
                {
                    this._sequenceId = ((AstSequenceId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSequenceId SequenceId
        {
            get
            {
                return this._sequenceId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaSequenceRef(this);
        }
    }
    
    /// <summary>
    /// schema_queue_ref
    /// 	 : (schema_id  DOT)  queue_id
    /// </summary>
    public partial class AstSchemaQueueRef : AstRule
    {
        
        private AstQueueId _queueId;
        
        public AstSchemaQueueRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueueId>())
                {
                    this._queueId = ((AstQueueId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaQueueRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueueId>())
                {
                    this._queueId = ((AstQueueId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstQueueId QueueId
        {
            get
            {
                return this._queueId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaQueueRef(this);
        }
    }
    
    /// <summary>
    /// module_package_event_ref
    /// 	 : (event_module_guid_id  DOT)?  event_package_id  DOT  target_id
    /// </summary>
    public partial class AstModulePackageEventRef : AstRule
    {
        
        private AstEventPackageId _eventPackageId;
        
        private AstTargetId _targetId;
        
        public AstModulePackageEventRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventPackageId>())
                {
                    this._eventPackageId = ((AstEventPackageId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTargetId>())
                {
                    this._targetId = ((AstTargetId)(enumerator.Current));
                }
            }
        }
        
        public AstModulePackageEventRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventPackageId>())
                {
                    this._eventPackageId = ((AstEventPackageId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTargetId>())
                {
                    this._targetId = ((AstTargetId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventPackageId EventPackageId
        {
            get
            {
                return this._eventPackageId;
            }
        }
        
        public virtual AstTargetId TargetId
        {
            get
            {
                return this._targetId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModulePackageEventRef(this);
        }
    }
    
    /// <summary>
    /// schema_rule_ref
    /// 	 : (schema_id  DOT)?  rule_id
    /// </summary>
    public partial class AstSchemaRuleRef : AstRule
    {
        
        private AstRuleId _ruleId;
        
        public AstSchemaRuleRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRuleId>())
                {
                    this._ruleId = ((AstRuleId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaRuleRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRuleId>())
                {
                    this._ruleId = ((AstRuleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRuleId RuleId
        {
            get
            {
                return this._ruleId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaRuleRef(this);
        }
    }
    
    /// <summary>
    /// schema_module_ref
    /// 	 : (schema_id  DOT)?  module_id
    /// </summary>
    public partial class AstSchemaModuleRef : AstRule
    {
        
        private AstModuleId _moduleId;
        
        public AstSchemaModuleRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModuleId>())
                {
                    this._moduleId = ((AstModuleId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaModuleRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModuleId>())
                {
                    this._moduleId = ((AstModuleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstModuleId ModuleId
        {
            get
            {
                return this._moduleId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaModuleRef(this);
        }
    }
    
    /// <summary>
    /// database_schema_sequence_ref
    /// 	 : (database_id  DOT)?  schema_sequence_ref
    /// </summary>
    public partial class AstDatabaseSchemaSequenceRef : AstRule
    {
        
        private AstSchemaSequenceRef _schemaSequenceRef;
        
        public AstDatabaseSchemaSequenceRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSequenceRef>())
                {
                    this._schemaSequenceRef = ((AstSchemaSequenceRef)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseSchemaSequenceRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSequenceRef>())
                {
                    this._schemaSequenceRef = ((AstSchemaSequenceRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSequenceRef SchemaSequenceRef
        {
            get
            {
                return this._schemaSequenceRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseSchemaSequenceRef(this);
        }
    }
    
    /// <summary>
    /// schema_object_statistics_ref
    /// 	 : schema_object_ref  DOT  statistics_id
    /// </summary>
    public partial class AstSchemaObjectStatisticsRef : AstRule
    {
        
        private AstSchemaObjectRef _schemaObjectRef;
        
        private AstStatisticsId _statisticsId;
        
        public AstSchemaObjectStatisticsRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaObjectRef>())
                {
                    this._schemaObjectRef = ((AstSchemaObjectRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStatisticsId>())
                {
                    this._statisticsId = ((AstStatisticsId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaObjectStatisticsRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaObjectRef>())
                {
                    this._schemaObjectRef = ((AstSchemaObjectRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStatisticsId>())
                {
                    this._statisticsId = ((AstStatisticsId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaObjectRef SchemaObjectRef
        {
            get
            {
                return this._schemaObjectRef;
            }
        }
        
        public virtual AstStatisticsId StatisticsId
        {
            get
            {
                return this._statisticsId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaObjectStatisticsRef(this);
        }
    }
    
    /// <summary>
    /// schema_synonym_ref
    /// 	 : (schema_id  DOT)?  synonym_id
    /// </summary>
    public partial class AstSchemaSynonymRef : AstRule
    {
        
        private AstSynonymId _synonymId;
        
        public AstSchemaSynonymRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSynonymId>())
                {
                    this._synonymId = ((AstSynonymId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaSynonymRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSynonymId>())
                {
                    this._synonymId = ((AstSynonymId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSynonymId SynonymId
        {
            get
            {
                return this._synonymId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaSynonymRef(this);
        }
    }
    
    /// <summary>
    /// default_ref
    /// 	 : (schema_id  DOT)?  id_
    /// </summary>
    public partial class AstDefaultRef : AstRule
    {
        
        private AstId _id;
        
        public AstDefaultRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstDefaultRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDefaultRef(this);
        }
    }
    
    /// <summary>
    /// schema_sql_identifier_id
    /// 	 : (schema_id  DOT)?  sql_identifier_id
    /// </summary>
    public partial class AstSchemaSqlIdentifierId : AstRule
    {
        
        private AstSqlIdentifierId _sqlIdentifierId;
        
        public AstSchemaSqlIdentifierId(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlIdentifierId>())
                {
                    this._sqlIdentifierId = ((AstSqlIdentifierId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaSqlIdentifierId(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlIdentifierId>())
                {
                    this._sqlIdentifierId = ((AstSqlIdentifierId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSqlIdentifierId SqlIdentifierId
        {
            get
            {
                return this._sqlIdentifierId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaSqlIdentifierId(this);
        }
    }
    
    /// <summary>
    /// schema_trigger_ref
    /// 	 : (schema_id  DOT)?  trigger_id
    /// </summary>
    public partial class AstSchemaTriggerRef : AstRule
    {
        
        private AstTriggerId _triggerId;
        
        public AstSchemaTriggerRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTriggerId>())
                {
                    this._triggerId = ((AstTriggerId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaTriggerRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTriggerId>())
                {
                    this._triggerId = ((AstTriggerId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTriggerId TriggerId
        {
            get
            {
                return this._triggerId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaTriggerRef(this);
        }
    }
    
    /// <summary>
    /// schema_object_ref
    /// 	 : (schema_id  DOT)?  object_id
    /// </summary>
    public partial class AstSchemaObjectRef : AstRule
    {
        
        private AstObjectId _objectId;
        
        public AstSchemaObjectRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstObjectId>())
                {
                    this._objectId = ((AstObjectId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaObjectRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstObjectId>())
                {
                    this._objectId = ((AstObjectId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstObjectId ObjectId
        {
            get
            {
                return this._objectId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaObjectRef(this);
        }
    }
    
    /// <summary>
    /// schema_security_policy_ref
    /// 	 : (schema_id  DOT)?  security_policy_id
    /// </summary>
    public partial class AstSchemaSecurityPolicyRef : AstRule
    {
        
        private AstSecurityPolicyId _securityPolicyId;
        
        public AstSchemaSecurityPolicyRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSecurityPolicyId>())
                {
                    this._securityPolicyId = ((AstSecurityPolicyId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaSecurityPolicyRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSecurityPolicyId>())
                {
                    this._securityPolicyId = ((AstSecurityPolicyId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSecurityPolicyId SecurityPolicyId
        {
            get
            {
                return this._securityPolicyId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaSecurityPolicyRef(this);
        }
    }
    
    /// <summary>
    /// schema_aggregate_ref
    /// 	 : (schema_id  DOT)?  aggregate_id
    /// </summary>
    public partial class AstSchemaAggregateRef : AstRule
    {
        
        private AstAggregateId _aggregateId;
        
        public AstSchemaAggregateRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAggregateId>())
                {
                    this._aggregateId = ((AstAggregateId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaAggregateRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAggregateId>())
                {
                    this._aggregateId = ((AstAggregateId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAggregateId AggregateId
        {
            get
            {
                return this._aggregateId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaAggregateRef(this);
        }
    }
    
    /// <summary>
    /// database_schema_queue_ref
    /// 	 : (database_schema_ref  DOT)?  queue_id
    /// </summary>
    public partial class AstDatabaseSchemaQueueRef : AstRule
    {
        
        private AstQueueId _queueId;
        
        public AstDatabaseSchemaQueueRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueueId>())
                {
                    this._queueId = ((AstQueueId)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseSchemaQueueRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueueId>())
                {
                    this._queueId = ((AstQueueId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstQueueId QueueId
        {
            get
            {
                return this._queueId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseSchemaQueueRef(this);
        }
    }
    
    /// <summary>
    /// database_schema_ref
    /// 	 : (database_id  DOT)?  schema_id
    /// </summary>
    public partial class AstDatabaseSchemaRef : AstRule
    {
        
        private AstSchemaId _schemaId;
        
        public AstDatabaseSchemaRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseSchemaRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaId SchemaId
        {
            get
            {
                return this._schemaId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseSchemaRef(this);
        }
    }
    
    /// <summary>
    /// drop_backward_compatible_index
    /// 	 : (schema_id  DOT)?  table_or_view_id  DOT  index_id
    /// </summary>
    public partial class AstDropBackwardCompatibleIndex : AstRule
    {
        
        private AstTableOrViewId _tableOrViewId;
        
        private AstIndexId _indexId;
        
        public AstDropBackwardCompatibleIndex(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableOrViewId>())
                {
                    this._tableOrViewId = ((AstTableOrViewId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
            }
        }
        
        public AstDropBackwardCompatibleIndex(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableOrViewId>())
                {
                    this._tableOrViewId = ((AstTableOrViewId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableOrViewId TableOrViewId
        {
            get
            {
                return this._tableOrViewId;
            }
        }
        
        public virtual AstIndexId IndexId
        {
            get
            {
                return this._indexId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropBackwardCompatibleIndex(this);
        }
    }
    
    /// <summary>
    /// complete_table_ref
    /// 	 : (server_id  DOT  DOT  schema_id  DOT | server_id  DOT  database_id  DOT  schema_id  DOT | database_id  DOT  schema_id?  DOT | schema_id  DOT)?  table_id
    /// </summary>
    public partial class AstCompleteTableRef : AstRule
    {
        
        private AstTableId _tableId;
        
        public AstCompleteTableRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
            }
        }
        
        public AstCompleteTableRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableId TableId
        {
            get
            {
                return this._tableId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCompleteTableRef(this);
        }
    }
    
    /// <summary>
    /// full_table_ref
    /// 	 : database_schema_table_ref
    /// 	 | database_schema_ref?  blocking_hierarchy = BLOCKING_HIERARCHY
    /// </summary>
    public partial class AstFullTableRef : AstRule
    {
        
        private AstDatabaseSchemaTableRef _databaseSchemaTableRef;
        
        private AstDatabaseSchemaRef _databaseSchemaRef;
        
        public AstFullTableRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseSchemaRef>())
                {
                    this._databaseSchemaRef = ((AstDatabaseSchemaRef)(enumerator.Current));
                }
            }
        }
        
        public AstFullTableRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseSchemaRef>())
                {
                    this._databaseSchemaRef = ((AstDatabaseSchemaRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseSchemaTableRef DatabaseSchemaTableRef
        {
            get
            {
                return this._databaseSchemaTableRef;
            }
        }
        
        public virtual AstDatabaseSchemaRef DatabaseSchemaRef
        {
            get
            {
                return this._databaseSchemaRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullTableRef(this);
        }
    }
    
    /// <summary>
    /// database_schema_table_ref
    /// 	 : database_id?  DOT  schema_id?  DOT  table_id
    /// </summary>
    public partial class AstDatabaseSchemaTableRef : AstRule
    {
        
        private AstDatabaseId _databaseId;
        
        private AstSchemaId _schemaId;
        
        private AstTableId _tableId;
        
        public AstDatabaseSchemaTableRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseSchemaTableRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstSchemaId SchemaId
        {
            get
            {
                return this._schemaId;
            }
        }
        
        public virtual AstTableId TableId
        {
            get
            {
                return this._tableId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseSchemaTableRef(this);
        }
    }
    
    /// <summary>
    /// entity_name_for_azure_dw_ref
    /// 	 : schema_id
    /// 	 | schema_id  DOT  object_id
    /// </summary>
    public partial class AstEntityNameForAzureDwRef : AstRule
    {
        
        private AstSchemaId _schemaId;
        
        private AstObjectId _objectId;
        
        public AstEntityNameForAzureDwRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstObjectId>())
                {
                    this._objectId = ((AstObjectId)(enumerator.Current));
                }
            }
        }
        
        public AstEntityNameForAzureDwRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstObjectId>())
                {
                    this._objectId = ((AstObjectId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaId SchemaId
        {
            get
            {
                return this._schemaId;
            }
        }
        
        public virtual AstObjectId ObjectId
        {
            get
            {
                return this._objectId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEntityNameForAzureDwRef(this);
        }
    }
    
    /// <summary>
    /// entity_name_for_parallel_dw_ref
    /// 	 : schema_id
    /// 	 | schema_id  DOT  object_id
    /// </summary>
    public partial class AstEntityNameForParallelDwRef : AstRule
    {
        
        private AstSchemaId _schemaId;
        
        private AstObjectId _objectId;
        
        public AstEntityNameForParallelDwRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstObjectId>())
                {
                    this._objectId = ((AstObjectId)(enumerator.Current));
                }
            }
        }
        
        public AstEntityNameForParallelDwRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstObjectId>())
                {
                    this._objectId = ((AstObjectId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaId SchemaId
        {
            get
            {
                return this._schemaId;
            }
        }
        
        public virtual AstObjectId ObjectId
        {
            get
            {
                return this._objectId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEntityNameForParallelDwRef(this);
        }
    }
    
    /// <summary>
    /// func_proc_name_database_schema_ref
    /// 	 : database_schema_function_ref
    /// 	 | schema_func_proc_ref
    /// </summary>
    public partial class AstFuncProcNameDatabaseSchemaRef : AstRule
    {
        
        private AstDatabaseSchemaFunctionRef _databaseSchemaFunctionRef;
        
        private AstSchemaFuncProcRef _schemaFuncProcRef;
        
        public AstFuncProcNameDatabaseSchemaRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaFunctionRef>())
                {
                    this._databaseSchemaFunctionRef = ((AstDatabaseSchemaFunctionRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaFuncProcRef>())
                {
                    this._schemaFuncProcRef = ((AstSchemaFuncProcRef)(enumerator.Current));
                }
            }
        }
        
        public AstFuncProcNameDatabaseSchemaRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaFunctionRef>())
                {
                    this._databaseSchemaFunctionRef = ((AstDatabaseSchemaFunctionRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaFuncProcRef>())
                {
                    this._schemaFuncProcRef = ((AstSchemaFuncProcRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseSchemaFunctionRef DatabaseSchemaFunctionRef
        {
            get
            {
                return this._databaseSchemaFunctionRef;
            }
        }
        
        public virtual AstSchemaFuncProcRef SchemaFuncProcRef
        {
            get
            {
                return this._schemaFuncProcRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncProcNameDatabaseSchemaRef(this);
        }
    }
    
    /// <summary>
    /// database_schema_function_ref
    /// 	 : database_id?  DOT  schema_id?  DOT  function_id
    /// </summary>
    public partial class AstDatabaseSchemaFunctionRef : AstRule
    {
        
        private AstDatabaseId _databaseId;
        
        private AstSchemaId _schemaId;
        
        private AstFunctionId _functionId;
        
        public AstDatabaseSchemaFunctionRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionId>())
                {
                    this._functionId = ((AstFunctionId)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseSchemaFunctionRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionId>())
                {
                    this._functionId = ((AstFunctionId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstSchemaId SchemaId
        {
            get
            {
                return this._schemaId;
            }
        }
        
        public virtual AstFunctionId FunctionId
        {
            get
            {
                return this._functionId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseSchemaFunctionRef(this);
        }
    }
    
    /// <summary>
    /// schema_func_proc_ref
    /// 	 : (schema_id  DOT)?  function_id
    /// </summary>
    public partial class AstSchemaFuncProcRef : AstRule
    {
        
        private AstFunctionId _functionId;
        
        public AstSchemaFuncProcRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionId>())
                {
                    this._functionId = ((AstFunctionId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaFuncProcRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionId>())
                {
                    this._functionId = ((AstFunctionId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFunctionId FunctionId
        {
            get
            {
                return this._functionId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaFuncProcRef(this);
        }
    }
    
    /// <summary>
    /// full_column_ref
    /// 	 : server_id?  DOT  schema_id?  DOT  table_id?  DOT  column_id
    /// 	 | schema_id?  DOT  table_id?  DOT  column_id
    /// 	 | table_id?  DOT  column_id
    /// 	 | column_id
    /// </summary>
    public partial class AstFullColumnRef : AstRule
    {
        
        private AstServerId _serverId;
        
        private AstSchemaId _schemaId;
        
        private AstTableId _tableId;
        
        private AstColumnId _columnId;
        
        public AstFullColumnRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
            }
        }
        
        public AstFullColumnRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaId>())
                {
                    this._schemaId = ((AstSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerId ServerId
        {
            get
            {
                return this._serverId;
            }
        }
        
        public virtual AstSchemaId SchemaId
        {
            get
            {
                return this._schemaId;
            }
        }
        
        public virtual AstTableId TableId
        {
            get
            {
                return this._tableId;
            }
        }
        
        public virtual AstColumnId ColumnId
        {
            get
            {
                return this._columnId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullColumnRef(this);
        }
    }
    
    /// <summary>
    /// entity_name
    /// 	 : (server_id  DOT  database_id  DOT  schema_id  DOT | database_id  DOT  schema_id?  DOT | schema_id  DOT)?  object_id
    /// </summary>
    public partial class AstEntityName : AstRule
    {
        
        private AstObjectId _objectId;
        
        public AstEntityName(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstObjectId>())
                {
                    this._objectId = ((AstObjectId)(enumerator.Current));
                }
            }
        }
        
        public AstEntityName(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstObjectId>())
                {
                    this._objectId = ((AstObjectId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstObjectId ObjectId
        {
            get
            {
                return this._objectId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEntityName(this);
        }
    }
    
    /// <summary>
    /// schema_view_ref
    /// 	 : (schema_id  DOT)?  view_id
    /// </summary>
    public partial class AstSchemaViewRef : AstRule
    {
        
        private AstViewId _viewId;
        
        public AstSchemaViewRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstViewId>())
                {
                    this._viewId = ((AstViewId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaViewRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstViewId>())
                {
                    this._viewId = ((AstViewId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstViewId ViewId
        {
            get
            {
                return this._viewId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaViewRef(this);
        }
    }
    
    /// <summary>
    /// schema_type_ref
    /// 	 : (schema_id  DOT)?  id_
    /// </summary>
    public partial class AstSchemaTypeRef : AstRule
    {
        
        private AstId _id;
        
        public AstSchemaTypeRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaTypeRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaTypeRef(this);
        }
    }
    
    /// <summary>
    /// database_source_list_ref
    /// 	 : (database_id  DOT)?  source_list_id
    /// </summary>
    public partial class AstDatabaseSourceListRef : AstRule
    {
        
        private AstSourceListId _sourceListId;
        
        public AstDatabaseSourceListRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSourceListId>())
                {
                    this._sourceListId = ((AstSourceListId)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseSourceListRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSourceListId>())
                {
                    this._sourceListId = ((AstSourceListId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSourceListId SourceListId
        {
            get
            {
                return this._sourceListId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseSourceListRef(this);
        }
    }
    
    /// <summary>
    /// full_predicate_source_ref
    /// 	 : (event_module_guid_id  DOT)?  event_package_id  DOT  predicate_source_id
    /// </summary>
    public partial class AstFullPredicateSourceRef : AstRule
    {
        
        private AstEventPackageId _eventPackageId;
        
        private AstPredicateSourceId _predicateSourceId;
        
        public AstFullPredicateSourceRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventPackageId>())
                {
                    this._eventPackageId = ((AstEventPackageId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPredicateSourceId>())
                {
                    this._predicateSourceId = ((AstPredicateSourceId)(enumerator.Current));
                }
            }
        }
        
        public AstFullPredicateSourceRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventPackageId>())
                {
                    this._eventPackageId = ((AstEventPackageId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPredicateSourceId>())
                {
                    this._predicateSourceId = ((AstPredicateSourceId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventPackageId EventPackageId
        {
            get
            {
                return this._eventPackageId;
            }
        }
        
        public virtual AstPredicateSourceId PredicateSourceId
        {
            get
            {
                return this._predicateSourceId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullPredicateSourceRef(this);
        }
    }
    
    /// <summary>
    /// assembly_class_method_ref
    /// 	 : assembly_id  DOT  class_id  DOT  method_id
    /// </summary>
    public partial class AstAssemblyClassMethodRef : AstRule
    {
        
        private AstAssemblyId _assemblyId;
        
        private AstClassId _classId;
        
        private AstMethodId _methodId;
        
        public AstAssemblyClassMethodRef(Position p, List<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClassId>())
                {
                    this._classId = ((AstClassId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMethodId>())
                {
                    this._methodId = ((AstMethodId)(enumerator.Current));
                }
            }
        }
        
        public AstAssemblyClassMethodRef(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClassId>())
                {
                    this._classId = ((AstClassId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMethodId>())
                {
                    this._methodId = ((AstMethodId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblyId AssemblyId
        {
            get
            {
                return this._assemblyId;
            }
        }
        
        public virtual AstClassId ClassId
        {
            get
            {
                return this._classId;
            }
        }
        
        public virtual AstMethodId MethodId
        {
            get
            {
                return this._methodId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAssemblyClassMethodRef(this);
        }
    }
}
