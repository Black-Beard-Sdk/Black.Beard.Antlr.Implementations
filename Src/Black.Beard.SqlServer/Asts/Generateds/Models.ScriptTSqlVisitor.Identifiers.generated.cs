#nullable disable
// Generate by Models.ScriptTSqlVisitor.Identifiers
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Parsers.TSql
{
    using System;
    using Bb.Parsers;
    using Bb.Asts.TSql;
    using Bb.Asts;
    using Bb.Parsers.TSql.Antlr;
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using System.Collections;
    
    
    public partial class ScriptTSqlVisitor
    {
        
        /// <summary>
        /// host
        /// 	 : id_  DOT  host
        /// 	 | (id_  DOT | id_)
        /// </summary>
        public override AstRoot VisitHost(TSqlParser.HostContext context)
        {
            IList<IParseTree> source = context.children;
            AstHost list = new AstHost(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// id_or_string
        /// 	 : id_
        /// 	 | stringtext
        /// </summary>
        public override AstRoot VisitId_or_string(TSqlParser.Id_or_stringContext context)
        {
            IList<IParseTree> source = context.children;
            AstIdOrString list = new AstIdOrString(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// principal_id
        /// 	 : 
        /// 	 | id_
        /// 	 | PUBLIC
        /// </summary>
        public override AstRoot VisitPrincipal_id(TSqlParser.Principal_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstPrincipalId list = new AstPrincipalId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// transaction_ref
        /// 	 : id_
        /// 	 | local_id
        /// </summary>
        public override AstRoot VisitTransaction_ref(TSqlParser.Transaction_refContext context)
        {
            IList<IParseTree> source = context.children;
            AstTransactionRef list = new AstTransactionRef(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// table_alias
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitTable_alias(TSqlParser.Table_aliasContext context)
        {
            IList<IParseTree> source = context.children;
            AstTableAlias list = new AstTableAlias(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// column_alias
        /// 	 : id_
        /// 	 | stringtext
        /// </summary>
        public override AstRoot VisitColumn_alias(TSqlParser.Column_aliasContext context)
        {
            IList<IParseTree> source = context.children;
            AstColumnAlias list = new AstColumnAlias(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// cursor_name
        /// 	 : id_
        /// 	 | local_id
        /// </summary>
        public override AstRoot VisitCursor_name(TSqlParser.Cursor_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstCursorName list = new AstCursorName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// id_
        /// 	 : ID
        /// 	 | empty_value
        /// 	 | DOUBLE_QUOTE_BLANK
        /// 	 | SQUARE_BRACKET_ID
        /// 	 | keyword
        /// </summary>
        public override AstRoot VisitId_(TSqlParser.Id_Context context)
        {
            IList<IParseTree> source = context.children;
            AstId list = new AstId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// simple_id
        /// 	 : ID
        /// </summary>
        public override AstRoot VisitSimple_id(TSqlParser.Simple_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstSimpleId list = new AstSimpleId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// filestream_filegroup_or_partition_schema_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitFilestream_filegroup_or_partition_schema_id(TSqlParser.Filestream_filegroup_or_partition_schema_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstFilestreamFilegroupOrPartitionSchemaId list = new AstFilestreamFilegroupOrPartitionSchemaId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// action_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitAction_id(TSqlParser.Action_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstActionId list = new AstActionId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// aggregate_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitAggregate_id(TSqlParser.Aggregate_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstAggregateId list = new AstAggregateId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// schema_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitSchema_id(TSqlParser.Schema_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstSchemaId list = new AstSchemaId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// assembly_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitAssembly_id(TSqlParser.Assembly_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstAssemblyId list = new AstAssemblyId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// asym_key_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitAsym_key_id(TSqlParser.Asym_key_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstAsymKeyId list = new AstAsymKeyId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// audit_action_group_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitAudit_action_group_id(TSqlParser.Audit_action_group_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstAuditActionGroupId list = new AstAuditActionGroupId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// audit_guid_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitAudit_guid_id(TSqlParser.Audit_guid_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstAuditGuidId list = new AstAuditGuidId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// audit_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitAudit_id(TSqlParser.Audit_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstAuditId list = new AstAuditId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// user_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitUser_id(TSqlParser.User_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstUserId list = new AstUserId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// backup_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitBackup_id(TSqlParser.Backup_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstBackupId list = new AstBackupId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// binding_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitBinding_id(TSqlParser.Binding_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstBindingId list = new AstBindingId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// catalog_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitCatalog_id(TSqlParser.Catalog_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstCatalogId list = new AstCatalogId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// certificate_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitCertificate_id(TSqlParser.Certificate_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstCertificateId list = new AstCertificateId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// class_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitClass_id(TSqlParser.Class_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstClassId list = new AstClassId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// collation_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitCollation_id(TSqlParser.Collation_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstCollationId list = new AstCollationId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// column_encryption_key_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitColumn_encryption_key_id(TSqlParser.Column_encryption_key_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstColumnEncryptionKeyId list = new AstColumnEncryptionKeyId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// column_or_argument_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitColumn_or_argument_id(TSqlParser.Column_or_argument_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstColumnOrArgumentId list = new AstColumnOrArgumentId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// constraint_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitConstraint_id(TSqlParser.Constraint_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstConstraintId list = new AstConstraintId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// credential_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitCredential_id(TSqlParser.Credential_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstCredentialId list = new AstCredentialId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// cryptographic_provider_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitCryptographic_provider_id(TSqlParser.Cryptographic_provider_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstCryptographicProviderId list = new AstCryptographicProviderId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// data_source_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitData_source_id(TSqlParser.Data_source_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstDataSourceId list = new AstDataSourceId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// service_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitService_id(TSqlParser.Service_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstServiceId list = new AstServiceId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// encryptor_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitEncryptor_id(TSqlParser.Encryptor_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstEncryptorId list = new AstEncryptorId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// endpoint_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitEndpoint_id(TSqlParser.Endpoint_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstEndpointId list = new AstEndpointId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// event_customizable_attribute_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitEvent_customizable_attribute_id(TSqlParser.Event_customizable_attribute_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstEventCustomizableAttributeId list = new AstEventCustomizableAttributeId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// event_field_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitEvent_field_id(TSqlParser.Event_field_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstEventFieldId list = new AstEventFieldId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// event_module_guid_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitEvent_module_guid_id(TSqlParser.Event_module_guid_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstEventModuleGuidId list = new AstEventModuleGuidId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// event_notification_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitEvent_notification_id(TSqlParser.Event_notification_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstEventNotificationId list = new AstEventNotificationId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// event_package_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitEvent_package_id(TSqlParser.Event_package_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstEventPackageId list = new AstEventPackageId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// event_session_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitEvent_session_id(TSqlParser.Event_session_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstEventSessionId list = new AstEventSessionId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// event_type_or_group_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitEvent_type_or_group_id(TSqlParser.Event_type_or_group_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstEventTypeOrGroupId list = new AstEventTypeOrGroupId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// ext_type_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitExt_type_id(TSqlParser.Ext_type_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstExtTypeId list = new AstExtTypeId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// external_data_source_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitExternal_data_source_id(TSqlParser.External_data_source_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstExternalDataSourceId list = new AstExternalDataSourceId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// external_file_format_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitExternal_file_format_id(TSqlParser.External_file_format_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstExternalFileFormatId list = new AstExternalFileFormatId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// external_pool_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitExternal_pool_id(TSqlParser.External_pool_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstExternalPoolId list = new AstExternalPoolId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// function_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitFunction_id(TSqlParser.Function_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstFunctionId list = new AstFunctionId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// group_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitGroup_id(TSqlParser.Group_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstGroupId list = new AstGroupId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// index_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitIndex_id(TSqlParser.Index_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstIndexId list = new AstIndexId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// language
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitLanguage(TSqlParser.LanguageContext context)
        {
            IList<IParseTree> source = context.children;
            AstLanguage list = new AstLanguage(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// library_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitLibrary_id(TSqlParser.Library_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstLibraryId list = new AstLibraryId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// server_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitServer_id(TSqlParser.Server_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstServerId list = new AstServerId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// logical_device_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitLogical_device_id(TSqlParser.Logical_device_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstLogicalDeviceId list = new AstLogicalDeviceId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// login_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitLogin_id(TSqlParser.Login_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstLoginId list = new AstLoginId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// master_key
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitMaster_key(TSqlParser.Master_keyContext context)
        {
            IList<IParseTree> source = context.children;
            AstMasterKey list = new AstMasterKey(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// method_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitMethod_id(TSqlParser.Method_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstMethodId list = new AstMethodId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// modified_contract_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitModified_contract_id(TSqlParser.Modified_contract_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstModifiedContractId list = new AstModifiedContractId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// module_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitModule_id(TSqlParser.Module_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstModuleId list = new AstModuleId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// network_computer
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitNetwork_computer(TSqlParser.Network_computerContext context)
        {
            IList<IParseTree> source = context.children;
            AstNetworkComputer list = new AstNetworkComputer(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// role_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitRole_id(TSqlParser.Role_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstRoleId list = new AstRoleId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// file_group_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitFile_group_id(TSqlParser.File_group_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstFileGroupId list = new AstFileGroupId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// non_static_attr_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitNon_static_attr_id(TSqlParser.Non_static_attr_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstNonStaticAttrId list = new AstNonStaticAttrId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// notification_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitNotification_id(TSqlParser.Notification_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstNotificationId list = new AstNotificationId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// object_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitObject_id(TSqlParser.Object_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstObjectId list = new AstObjectId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// owner_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitOwner_id(TSqlParser.Owner_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstOwnerId list = new AstOwnerId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// partition_column_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitPartition_column_id(TSqlParser.Partition_column_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstPartitionColumnId list = new AstPartitionColumnId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// pool_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitPool_id(TSqlParser.Pool_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstPoolId list = new AstPoolId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// predicate_source_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitPredicate_source_id(TSqlParser.Predicate_source_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstPredicateSourceId list = new AstPredicateSourceId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// property_list_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitProperty_list_id(TSqlParser.Property_list_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstPropertyListId list = new AstPropertyListId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// provider_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitProvider_id(TSqlParser.Provider_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstProviderId list = new AstProviderId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// database_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitDatabase_id(TSqlParser.Database_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstDatabaseId list = new AstDatabaseId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// route_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitRoute_id(TSqlParser.Route_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstRouteId list = new AstRouteId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// rule_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitRule_id(TSqlParser.Rule_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstRuleId list = new AstRuleId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// column_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitColumn_id(TSqlParser.Column_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstColumnId list = new AstColumnId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// schema_collection_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitSchema_collection_id(TSqlParser.Schema_collection_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstSchemaCollectionId list = new AstSchemaCollectionId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// security_policy_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitSecurity_policy_id(TSqlParser.Security_policy_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstSecurityPolicyId list = new AstSecurityPolicyId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// security_predicate_function_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitSecurity_predicate_function_id(TSqlParser.Security_predicate_function_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstSecurityPredicateFunctionId list = new AstSecurityPredicateFunctionId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// sequence_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitSequence_id(TSqlParser.Sequence_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstSequenceId list = new AstSequenceId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// server_role_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitServer_role_id(TSqlParser.Server_role_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstServerRoleId list = new AstServerRoleId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// source_list_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitSource_list_id(TSqlParser.Source_list_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstSourceListId list = new AstSourceListId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// sql_identifier_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitSql_identifier_id(TSqlParser.Sql_identifier_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstSqlIdentifierId list = new AstSqlIdentifierId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// static_attr_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitStatic_attr_id(TSqlParser.Static_attr_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstStaticAttrId list = new AstStaticAttrId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// statistics_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitStatistics_id(TSqlParser.Statistics_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstStatisticsId list = new AstStatisticsId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// stoplist_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitStoplist_id(TSqlParser.Stoplist_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstStoplistId list = new AstStoplistId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// symmetric_key_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitSymmetric_key_id(TSqlParser.Symmetric_key_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstSymmetricKeyId list = new AstSymmetricKeyId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// synonym_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitSynonym_id(TSqlParser.Synonym_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstSynonymId list = new AstSynonymId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// table_or_view_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitTable_or_view_id(TSqlParser.Table_or_view_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstTableOrViewId list = new AstTableOrViewId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// view_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitView_id(TSqlParser.View_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstViewId list = new AstViewId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// table_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitTable_id(TSqlParser.Table_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstTableId list = new AstTableId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// target_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitTarget_id(TSqlParser.Target_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstTargetId list = new AstTargetId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// target_parameter_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitTarget_parameter_id(TSqlParser.Target_parameter_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstTargetParameterId list = new AstTargetParameterId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// trigger_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitTrigger_id(TSqlParser.Trigger_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstTriggerId list = new AstTriggerId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// tvf_schema_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitTvf_schema_id(TSqlParser.Tvf_schema_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstTvfSchemaId list = new AstTvfSchemaId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// udt_column_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitUdt_column_id(TSqlParser.Udt_column_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstUdtColumnId list = new AstUdtColumnId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// unscaled_type_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitUnscaled_type_id(TSqlParser.Unscaled_type_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstUnscaledTypeId list = new AstUnscaledTypeId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// windows_principal_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitWindows_principal_id(TSqlParser.Windows_principal_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstWindowsPrincipalId list = new AstWindowsPrincipalId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// workload_group_group_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitWorkload_group_group_id(TSqlParser.Workload_group_group_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstWorkloadGroupGroupId list = new AstWorkloadGroupGroupId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// workload_group_pool_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitWorkload_group_pool_id(TSqlParser.Workload_group_pool_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstWorkloadGroupPoolId list = new AstWorkloadGroupPoolId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// partition_scheme_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitPartition_scheme_id(TSqlParser.Partition_scheme_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstPartitionSchemeId list = new AstPartitionSchemeId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// queue_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitQueue_id(TSqlParser.Queue_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstQueueId list = new AstQueueId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// partition_function_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitPartition_function_id(TSqlParser.Partition_function_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstPartitionFunctionId list = new AstPartitionFunctionId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// message_type_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitMessage_type_id(TSqlParser.Message_type_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstMessageTypeId list = new AstMessageTypeId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// code_location_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitCode_location_id(TSqlParser.Code_location_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstCodeLocationId list = new AstCodeLocationId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// transaction_id
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitTransaction_id(TSqlParser.Transaction_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstTransactionId list = new AstTransactionId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// decimal_id
        /// 	 : decimal
        /// 	 | id_
        /// </summary>
        public override AstRoot VisitDecimal_id(TSqlParser.Decimal_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstDecimalId list = new AstDecimalId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// string_id
        /// 	 : stringtext
        /// 	 | id_
        /// </summary>
        public override AstRoot VisitString_id(TSqlParser.String_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstStringId list = new AstStringId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// string_local_id
        /// 	 : stringtext
        /// 	 | local_id
        /// </summary>
        public override AstRoot VisitString_local_id(TSqlParser.String_local_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstStringLocalId list = new AstStringLocalId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// decimal_local_id
        /// 	 : decimal
        /// 	 | local_id
        /// </summary>
        public override AstRoot VisitDecimal_local_id(TSqlParser.Decimal_local_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstDecimalLocalId list = new AstDecimalLocalId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// decimal_string
        /// 	 : decimal
        /// 	 | stringtext
        /// </summary>
        public override AstRoot VisitDecimal_string(TSqlParser.Decimal_stringContext context)
        {
            IList<IParseTree> source = context.children;
            AstDecimalString list = new AstDecimalString(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// decimal_string_local_id
        /// 	 : decimal
        /// 	 | stringtext
        /// 	 | local_id
        /// </summary>
        public override AstRoot VisitDecimal_string_local_id(TSqlParser.Decimal_string_local_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstDecimalStringLocalId list = new AstDecimalStringLocalId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// string_local_id_double_quote_id
        /// 	 : stringtext
        /// 	 | local_id
        /// 	 | empty_value
        /// </summary>
        public override AstRoot VisitString_local_id_double_quote_id(TSqlParser.String_local_id_double_quote_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstStringLocalIdDoubleQuoteId list = new AstStringLocalIdDoubleQuoteId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// func_proc_name_server_database_schema
        /// 	 : server_id?  DOT  database_id?  DOT  schema_id?  DOT  function_id
        /// 	 | func_proc_name_database_schema_ref
        /// </summary>
        public override AstRoot VisitFunc_proc_name_server_database_schema(TSqlParser.Func_proc_name_server_database_schemaContext context)
        {
            IList<IParseTree> source = context.children;
            AstFuncProcNameServerDatabaseSchema list = new AstFuncProcNameServerDatabaseSchema(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// ddl_object
        /// 	 : complete_table_ref
        /// 	 | local_id
        /// </summary>
        public override AstRoot VisitDdl_object(TSqlParser.Ddl_objectContext context)
        {
            IList<IParseTree> source = context.children;
            AstDdlObject list = new AstDdlObject(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// full_column_name
        /// 	 : (DELETED | INSERTED)  DOT  column_id
        /// 	 | full_column_ref
        /// </summary>
        public override AstRoot VisitFull_column_name(TSqlParser.Full_column_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstFullColumnName list = new AstFullColumnName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
    }
}
