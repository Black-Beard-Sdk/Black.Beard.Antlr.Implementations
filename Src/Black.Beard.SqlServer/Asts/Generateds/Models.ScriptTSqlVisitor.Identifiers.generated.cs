//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Parsers.TSql
{
    using System;
    using Bb.Parsers;
    using Bb.Asts.TSql;
    using Bb.Asts;
    using Bb.Parsers.TSql.Antlr;
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using System.Collections;
    
    
    public partial class ScriptTSqlVisitor
    {
        
        /// <summary>
        /// message_type_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitMessage_type_name(TSqlParser.Message_type_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstMessageTypeName list = new AstMessageTypeName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// partition_function_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitPartition_function_name(TSqlParser.Partition_function_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstPartitionFunctionName list = new AstPartitionFunctionName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// partition_scheme_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitPartition_scheme_name(TSqlParser.Partition_scheme_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstPartitionSchemeName list = new AstPartitionSchemeName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// ids_
        /// 	 : id_  (COMMA  id_)*
        /// </summary>
        public override AstRoot VisitIds_(TSqlParser.Ids_Context context)
        {
            IList<IParseTree> source = context.children;
            AstIds list = new AstIds(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// host
        /// 	 : id_  DOT  host
        /// 	 | (id_  DOT | id_)
        /// </summary>
        public override AstRoot VisitHost(TSqlParser.HostContext context)
        {
            IList<IParseTree> source = context.children;
            AstHost list = new AstHost(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// id_or_string
        /// 	 : id_
        /// 	 | STRING
        /// </summary>
        public override AstRoot VisitId_or_string(TSqlParser.Id_or_stringContext context)
        {
            IList<IParseTree> source = context.children;
            AstIdOrString list = new AstIdOrString(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// principal_id
        /// 	 : 
        /// 	 | id_
        /// 	 | PUBLIC
        /// </summary>
        public override AstRoot VisitPrincipal_id(TSqlParser.Principal_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstPrincipalId list = new AstPrincipalId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// table_alias
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitTable_alias(TSqlParser.Table_aliasContext context)
        {
            IList<IParseTree> source = context.children;
            AstTableAlias list = new AstTableAlias(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// column_alias
        /// 	 : id_
        /// 	 | STRING
        /// </summary>
        public override AstRoot VisitColumn_alias(TSqlParser.Column_aliasContext context)
        {
            IList<IParseTree> source = context.children;
            AstColumnAlias list = new AstColumnAlias(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// complete_table_name
        /// 	 : (linked_server  DOT  DOT  schema_name  DOT | server_name  DOT  database_name  DOT  schema_name  DOT | database_name  DOT  schema_name?  DOT | schema_name  DOT)?  tableName
        /// </summary>
        public override AstRoot VisitComplete_table_name(TSqlParser.Complete_table_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstCompleteTableName list = new AstCompleteTableName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// full_table_name
        /// 	 : full_schema_name?  tableName
        /// 	 | full_schema_name?  blocking_hierarchy = BLOCKING_HIERARCHY
        /// </summary>
        public override AstRoot VisitFull_table_name(TSqlParser.Full_table_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstFullTableName list = new AstFullTableName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// full_schema_name
        /// 	 : (database_name  DOT)?  schema_name
        /// </summary>
        public override AstRoot VisitFull_schema_name(TSqlParser.Full_schema_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstFullSchemaName list = new AstFullSchemaName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// simple_name
        /// 	 : (schema_name  DOT)?  name = id_
        /// </summary>
        public override AstRoot VisitSimple_name(TSqlParser.Simple_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstSimpleName list = new AstSimpleName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// func_proc_name_schema
        /// 	 : (schema_name  DOT)?  function_name
        /// </summary>
        public override AstRoot VisitFunc_proc_name_schema(TSqlParser.Func_proc_name_schemaContext context)
        {
            IList<IParseTree> source = context.children;
            AstFuncProcNameSchema list = new AstFuncProcNameSchema(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// func_proc_name_database_schema
        /// 	 : database_name?  DOT  schema_name?  DOT  function_name
        /// 	 | func_proc_name_schema
        /// </summary>
        public override AstRoot VisitFunc_proc_name_database_schema(TSqlParser.Func_proc_name_database_schemaContext context)
        {
            IList<IParseTree> source = context.children;
            AstFuncProcNameDatabaseSchema list = new AstFuncProcNameDatabaseSchema(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// func_proc_name_server_database_schema
        /// 	 : server_name?  DOT  database_name?  DOT  schema_name?  DOT  function_name
        /// 	 | func_proc_name_database_schema
        /// </summary>
        public override AstRoot VisitFunc_proc_name_server_database_schema(TSqlParser.Func_proc_name_server_database_schemaContext context)
        {
            IList<IParseTree> source = context.children;
            AstFuncProcNameServerDatabaseSchema list = new AstFuncProcNameServerDatabaseSchema(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// ddl_object
        /// 	 : complete_table_name
        /// 	 | LOCAL_ID
        /// </summary>
        public override AstRoot VisitDdl_object(TSqlParser.Ddl_objectContext context)
        {
            IList<IParseTree> source = context.children;
            AstDdlObject list = new AstDdlObject(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// full_column_name
        /// 	 : (DELETED | INSERTED)  DOT  column_name
        /// 	 | server_name?  DOT  schema_name?  DOT  tableName?  DOT  column_name
        /// 	 | schema_name?  DOT  tableName?  DOT  column_name
        /// 	 | tableName?  DOT  column_name
        /// 	 | column_name
        /// </summary>
        public override AstRoot VisitFull_column_name(TSqlParser.Full_column_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstFullColumnName list = new AstFullColumnName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// insert_column_id
        /// 	 : (ignore += id_  DOT)*  id_
        /// </summary>
        public override AstRoot VisitInsert_column_id(TSqlParser.Insert_column_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstInsertColumnId list = new AstInsertColumnId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// cursor_name
        /// 	 : id_
        /// 	 | LOCAL_ID
        /// </summary>
        public override AstRoot VisitCursor_name(TSqlParser.Cursor_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstCursorName list = new AstCursorName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// id_
        /// 	 : ID
        /// 	 | DOUBLE_QUOTE_ID
        /// 	 | DOUBLE_QUOTE_BLANK
        /// 	 | SQUARE_BRACKET_ID
        /// 	 | keyword
        /// </summary>
        public override AstRoot VisitId_(TSqlParser.Id_Context context)
        {
            IList<IParseTree> source = context.children;
            AstId list = new AstId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// simple_id
        /// 	 : ID
        /// </summary>
        public override AstRoot VisitSimple_id(TSqlParser.Simple_idContext context)
        {
            IList<IParseTree> source = context.children;
            AstSimpleId list = new AstSimpleId(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// filestream_filegroup_or_partition_schema_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitFilestream_filegroup_or_partition_schema_name(TSqlParser.Filestream_filegroup_or_partition_schema_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstFilestreamFilegroupOrPartitionSchemaName list = new AstFilestreamFilegroupOrPartitionSchemaName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// action_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitAction_name(TSqlParser.Action_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstActionName list = new AstActionName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// aggregate_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitAggregate_name(TSqlParser.Aggregate_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstAggregateName list = new AstAggregateName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// app_role_schema
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitApp_role_schema(TSqlParser.App_role_schemaContext context)
        {
            IList<IParseTree> source = context.children;
            AstAppRoleSchema list = new AstAppRoleSchema(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// application_role
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitApplication_role(TSqlParser.Application_roleContext context)
        {
            IList<IParseTree> source = context.children;
            AstApplicationRole list = new AstApplicationRole(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// assembly_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitAssembly_name(TSqlParser.Assembly_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstAssemblyName list = new AstAssemblyName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// asym_key_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitAsym_key_name(TSqlParser.Asym_key_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstAsymKeyName list = new AstAsymKeyName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// audit_action_group_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitAudit_action_group_name(TSqlParser.Audit_action_group_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstAuditActionGroupName list = new AstAuditActionGroupName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// audit_guid
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitAudit_guid(TSqlParser.Audit_guidContext context)
        {
            IList<IParseTree> source = context.children;
            AstAuditGuid list = new AstAuditGuid(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// audit_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitAudit_name(TSqlParser.Audit_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstAuditName list = new AstAuditName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// audit_specification_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitAudit_specification_name(TSqlParser.Audit_specification_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstAuditSpecificationName list = new AstAuditSpecificationName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// azure_active_directory_principal
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitAzure_active_directory_principal(TSqlParser.Azure_active_directory_principalContext context)
        {
            IList<IParseTree> source = context.children;
            AstAzureActiveDirectoryPrincipal list = new AstAzureActiveDirectoryPrincipal(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// backup_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitBackup_name(TSqlParser.Backup_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstBackupName list = new AstBackupName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// binding_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitBinding_name(TSqlParser.Binding_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstBindingName list = new AstBindingName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// catalog_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitCatalog_name(TSqlParser.Catalog_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstCatalogName list = new AstCatalogName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// cert_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitCert_name(TSqlParser.Cert_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstCertName list = new AstCertName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// certificate_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitCertificate_name(TSqlParser.Certificate_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstCertificateName list = new AstCertificateName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// class_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitClass_name(TSqlParser.Class_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstClassName list = new AstClassName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// collation_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitCollation_name(TSqlParser.Collation_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstCollationName list = new AstCollationName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// column_encryption_key
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitColumn_encryption_key(TSqlParser.Column_encryption_keyContext context)
        {
            IList<IParseTree> source = context.children;
            AstColumnEncryptionKey list = new AstColumnEncryptionKey(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// column_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitColumn_name(TSqlParser.Column_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstColumnName list = new AstColumnName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// column_name_or_arguments
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitColumn_name_or_arguments(TSqlParser.Column_name_or_argumentsContext context)
        {
            IList<IParseTree> source = context.children;
            AstColumnNameOrArguments list = new AstColumnNameOrArguments(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// constraint_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitConstraint_name(TSqlParser.Constraint_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstConstraintName list = new AstConstraintName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// create_service_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitCreate_service_name(TSqlParser.Create_service_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstCreateServiceName list = new AstCreateServiceName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// credential_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitCredential_name(TSqlParser.Credential_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstCredentialName list = new AstCredentialName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// cryptographic_provider_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitCryptographic_provider_name(TSqlParser.Cryptographic_provider_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstCryptographicProviderName list = new AstCryptographicProviderName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// data_source_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitData_source_name(TSqlParser.Data_source_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstDataSourceName list = new AstDataSourceName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// database_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitDatabase_name(TSqlParser.Database_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstDatabaseName list = new AstDatabaseName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// dropped_service_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitDropped_service_name(TSqlParser.Dropped_service_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstDroppedServiceName list = new AstDroppedServiceName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// encryptor_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitEncryptor_name(TSqlParser.Encryptor_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstEncryptorName list = new AstEncryptorName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// endpoint_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitEndpoint_name(TSqlParser.Endpoint_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstEndpointName list = new AstEndpointName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// event_customizable_attributue
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitEvent_customizable_attributue(TSqlParser.Event_customizable_attributueContext context)
        {
            IList<IParseTree> source = context.children;
            AstEventCustomizableAttributue list = new AstEventCustomizableAttributue(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// event_field_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitEvent_field_name(TSqlParser.Event_field_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstEventFieldName list = new AstEventFieldName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// event_module_guid
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitEvent_module_guid(TSqlParser.Event_module_guidContext context)
        {
            IList<IParseTree> source = context.children;
            AstEventModuleGuid list = new AstEventModuleGuid(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// event_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitEvent_name(TSqlParser.Event_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstEventName list = new AstEventName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// event_notification_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitEvent_notification_name(TSqlParser.Event_notification_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstEventNotificationName list = new AstEventNotificationName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// event_package_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitEvent_package_name(TSqlParser.Event_package_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstEventPackageName list = new AstEventPackageName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// event_session_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitEvent_session_name(TSqlParser.Event_session_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstEventSessionName list = new AstEventSessionName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// event_type_or_group
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitEvent_type_or_group(TSqlParser.Event_type_or_groupContext context)
        {
            IList<IParseTree> source = context.children;
            AstEventTypeOrGroup list = new AstEventTypeOrGroup(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// ext_type
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitExt_type(TSqlParser.Ext_typeContext context)
        {
            IList<IParseTree> source = context.children;
            AstExtType list = new AstExtType(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// external_data_source_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitExternal_data_source_name(TSqlParser.External_data_source_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstExternalDataSourceName list = new AstExternalDataSourceName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// external_file_format_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitExternal_file_format_name(TSqlParser.External_file_format_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstExternalFileFormatName list = new AstExternalFileFormatName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// external_pool_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitExternal_pool_name(TSqlParser.External_pool_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstExternalPoolName list = new AstExternalPoolName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// file_group_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitFile_group_name(TSqlParser.File_group_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstFileGroupName list = new AstFileGroupName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// function_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitFunction_name(TSqlParser.Function_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstFunctionName list = new AstFunctionName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// group_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitGroup_name(TSqlParser.Group_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstGroupName list = new AstGroupName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// index_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitIndex_name(TSqlParser.Index_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstIndexName list = new AstIndexName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// language
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitLanguage(TSqlParser.LanguageContext context)
        {
            IList<IParseTree> source = context.children;
            AstLanguage list = new AstLanguage(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// library_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitLibrary_name(TSqlParser.Library_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstLibraryName list = new AstLibraryName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// linked_server
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitLinked_server(TSqlParser.Linked_serverContext context)
        {
            IList<IParseTree> source = context.children;
            AstLinkedServer list = new AstLinkedServer(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// logical_device_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitLogical_device_name(TSqlParser.Logical_device_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstLogicalDeviceName list = new AstLogicalDeviceName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// login_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitLogin_name(TSqlParser.Login_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstLoginName list = new AstLoginName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// master_key
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitMaster_key(TSqlParser.Master_keyContext context)
        {
            IList<IParseTree> source = context.children;
            AstMasterKey list = new AstMasterKey(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// method_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitMethod_name(TSqlParser.Method_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstMethodName list = new AstMethodName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// modified_contract_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitModified_contract_name(TSqlParser.Modified_contract_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstModifiedContractName list = new AstModifiedContractName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// modified_service_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitModified_service_name(TSqlParser.Modified_service_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstModifiedServiceName list = new AstModifiedServiceName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// module_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitModule_name(TSqlParser.Module_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstModuleName list = new AstModuleName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// network_computer
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitNetwork_computer(TSqlParser.Network_computerContext context)
        {
            IList<IParseTree> source = context.children;
            AstNetworkComputer list = new AstNetworkComputer(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// new_application_role_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitNew_application_role_name(TSqlParser.New_application_role_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstNewApplicationRoleName list = new AstNewApplicationRoleName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// new_file_group_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitNew_file_group_name(TSqlParser.New_file_group_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstNewFileGroupName list = new AstNewFileGroupName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// non_static_attr
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitNon_static_attr(TSqlParser.Non_static_attrContext context)
        {
            IList<IParseTree> source = context.children;
            AstNonStaticAttr list = new AstNonStaticAttr(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// notification_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitNotification_name(TSqlParser.Notification_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstNotificationName list = new AstNotificationName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// object_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitObject_name(TSqlParser.Object_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstObjectName list = new AstObjectName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// owner_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitOwner_name(TSqlParser.Owner_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstOwnerName list = new AstOwnerName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// partition_column_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitPartition_column_name(TSqlParser.Partition_column_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstPartitionColumnName list = new AstPartitionColumnName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// pool_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitPool_name(TSqlParser.Pool_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstPoolName list = new AstPoolName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// predicate_compare_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitPredicate_compare_name(TSqlParser.Predicate_compare_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstPredicateCompareName list = new AstPredicateCompareName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// predicate_source_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitPredicate_source_name(TSqlParser.Predicate_source_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstPredicateSourceName list = new AstPredicateSourceName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// property_list_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitProperty_list_name(TSqlParser.Property_list_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstPropertyListName list = new AstPropertyListName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// provider_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitProvider_name(TSqlParser.Provider_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstProviderName list = new AstProviderName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// queue_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitQueue_name(TSqlParser.Queue_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstQueueName list = new AstQueueName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// relational_schema
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitRelational_schema(TSqlParser.Relational_schemaContext context)
        {
            IList<IParseTree> source = context.children;
            AstRelationalSchema list = new AstRelationalSchema(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// role_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitRole_name(TSqlParser.Role_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstRoleName list = new AstRoleName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// route_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitRoute_name(TSqlParser.Route_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstRouteName list = new AstRouteName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// rule_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitRule_name(TSqlParser.Rule_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstRuleName list = new AstRuleName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// schema_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitSchema_name(TSqlParser.Schema_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstSchemaName list = new AstSchemaName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// schema_collection_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitSchema_collection_name(TSqlParser.Schema_collection_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstSchemaCollectionName list = new AstSchemaCollectionName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// security_policy_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitSecurity_policy_name(TSqlParser.Security_policy_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstSecurityPolicyName list = new AstSecurityPolicyName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// security_predicate_function_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitSecurity_predicate_function_name(TSqlParser.Security_predicate_function_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstSecurityPredicateFunctionName list = new AstSecurityPredicateFunctionName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// sequence_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitSequence_name(TSqlParser.Sequence_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstSequenceName list = new AstSequenceName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// server_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitServer_name(TSqlParser.Server_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstServerName list = new AstServerName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// server_role_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitServer_role_name(TSqlParser.Server_role_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstServerRoleName list = new AstServerRoleName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// source_list_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitSource_list_name(TSqlParser.Source_list_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstSourceListName list = new AstSourceListName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// sql_identifier
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitSql_identifier(TSqlParser.Sql_identifierContext context)
        {
            IList<IParseTree> source = context.children;
            AstSqlIdentifier list = new AstSqlIdentifier(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// static_attr
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitStatic_attr(TSqlParser.Static_attrContext context)
        {
            IList<IParseTree> source = context.children;
            AstStaticAttr list = new AstStaticAttr(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// statistics_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitStatistics_name(TSqlParser.Statistics_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstStatisticsName list = new AstStatisticsName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// stoplist_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitStoplist_name(TSqlParser.Stoplist_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstStoplistName list = new AstStoplistName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// symmetric_key_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitSymmetric_key_name(TSqlParser.Symmetric_key_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstSymmetricKeyName list = new AstSymmetricKeyName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// synonym_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitSynonym_name(TSqlParser.Synonym_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstSynonymName list = new AstSynonymName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// table_or_view_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitTable_or_view_name(TSqlParser.Table_or_view_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstTableOrViewName list = new AstTableOrViewName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// table_variable
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitTable_variable(TSqlParser.Table_variableContext context)
        {
            IList<IParseTree> source = context.children;
            AstTableVariable list = new AstTableVariable(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// tableName
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitTableName(TSqlParser.TableNameContext context)
        {
            IList<IParseTree> source = context.children;
            AstTableName list = new AstTableName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// target_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitTarget_name(TSqlParser.Target_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstTargetName list = new AstTargetName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// target_parameter_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitTarget_parameter_name(TSqlParser.Target_parameter_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstTargetParameterName list = new AstTargetParameterName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// trigger_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitTrigger_name(TSqlParser.Trigger_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstTriggerName list = new AstTriggerName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// tvf_schema_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitTvf_schema_name(TSqlParser.Tvf_schema_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstTvfSchemaName list = new AstTvfSchemaName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// type_schema
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitType_schema(TSqlParser.Type_schemaContext context)
        {
            IList<IParseTree> source = context.children;
            AstTypeSchema list = new AstTypeSchema(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// udt_column_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitUdt_column_name(TSqlParser.Udt_column_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstUdtColumnName list = new AstUdtColumnName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// unscaled_type
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitUnscaled_type(TSqlParser.Unscaled_typeContext context)
        {
            IList<IParseTree> source = context.children;
            AstUnscaledType list = new AstUnscaledType(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// user_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitUser_name(TSqlParser.User_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstUserName list = new AstUserName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// windows_principal
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitWindows_principal(TSqlParser.Windows_principalContext context)
        {
            IList<IParseTree> source = context.children;
            AstWindowsPrincipal list = new AstWindowsPrincipal(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// workload_group_group_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitWorkload_group_group_name(TSqlParser.Workload_group_group_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstWorkloadGroupGroupName list = new AstWorkloadGroupGroupName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// workload_group_pool_name
        /// 	 : id_
        /// </summary>
        public override AstRoot VisitWorkload_group_pool_name(TSqlParser.Workload_group_pool_nameContext context)
        {
            IList<IParseTree> source = context.children;
            AstWorkloadGroupPoolName list = new AstWorkloadGroupPoolName(context);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = ((AstRoot)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
    }
}
