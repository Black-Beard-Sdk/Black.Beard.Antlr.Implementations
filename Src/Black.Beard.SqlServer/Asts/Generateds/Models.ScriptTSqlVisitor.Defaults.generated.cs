//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Parsers.TSql
{
    using System;
    using Bb.Parsers;
    using Bb.Asts.TSql;
    using Bb.Asts;
    using Bb.Parsers.TSql.Antlr;
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using System.Collections;
    
    
    public partial class ScriptTSqlVisitor
    {
        
        /// <summary>
        /// tsql_file
        /// 	 : batch*  EOF
        /// 	 | execute_body_batch  go_statement*  EOF
        /// </summary>
        public override AstRoot VisitTsql_file(TSqlParser.Tsql_fileContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTsqlFile(context, list);
        }
        
        /// <summary>
        /// batch
        /// 	 : go_statement
        /// 	 | execute_body_batch?  (go_statement | sql_clauses)  go_statement*
        /// 	 | batch_level_statement  go_statement*
        /// </summary>
        public override AstRoot VisitBatch(TSqlParser.BatchContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBatch(context, list);
        }
        
        /// <summary>
        /// sql_clause
        /// 	 : dml_clause
        /// 	 | cfl_statement
        /// 	 | another_statement
        /// 	 | ddl_clause
        /// 	 | dbcc_special
        /// 	 | dbcc_clause
        /// 	 | backup_statement
        /// </summary>
        public override AstRoot VisitSql_clause(TSqlParser.Sql_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSqlClause(context, list);
        }
        
        /// <summary>
        /// break_statement
        /// 	 : BREAK  SEMI?
        /// </summary>
        public override AstRoot VisitBreak_statement(TSqlParser.Break_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBreakStatement(context, list);
        }
        
        /// <summary>
        /// continue_statement
        /// 	 : CONTINUE  SEMI?
        /// </summary>
        public override AstRoot VisitContinue_statement(TSqlParser.Continue_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstContinueStatement(context, list);
        }
        
        /// <summary>
        /// goto_statement
        /// 	 : GOTO  id_  SEMI?
        /// 	 | id_  COLON  SEMI?
        /// </summary>
        public override AstRoot VisitGoto_statement(TSqlParser.Goto_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGotoStatement(context, list);
        }
        
        /// <summary>
        /// throw_statement
        /// 	 : THROW  (throw_error_number  COMMA  throw_message  COMMA  throw_state)?  SEMI?
        /// </summary>
        public override AstRoot VisitThrow_statement(TSqlParser.Throw_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstThrowStatement(context, list);
        }
        
        /// <summary>
        /// try_catch_statement
        /// 	 : BEGIN  TRY  SEMI?  try_clauses = sql_clauses  END  TRY  SEMI?  BEGIN  CATCH  SEMI?  catch_clauses = sql_clauses  END  CATCH  SEMI?
        /// </summary>
        public override AstRoot VisitTry_catch_statement(TSqlParser.Try_catch_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTryCatchStatement(context, list);
        }
        
        /// <summary>
        /// print_statement
        /// 	 : PRINT  (expression | DOUBLE_QUOTE_ID)  (COMMA  LOCAL_ID)*  SEMI?
        /// </summary>
        public override AstRoot VisitPrint_statement(TSqlParser.Print_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPrintStatement(context, list);
        }
        
        /// <summary>
        /// raiseerror_statement
        /// 	 : RAISERROR  LR_BRACKET  msg = decimal_string_local_id  COMMA  severity = constant_LOCAL_ID  COMMA  state = constant_LOCAL_ID  (COMMA  (constant_LOCAL_ID | NULL_))*  RR_BRACKET  (WITH  log_seterror_nowait)?  SEMI?
        /// 	 | RAISERROR  DECIMAL  formatstring = string_local_id_double_quote_id  (COMMA  argument = decimal_string_local_id)*
        /// </summary>
        public override AstRoot VisitRaiseerror_statement(TSqlParser.Raiseerror_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRaiseerrorStatement(context, list);
        }
        
        /// <summary>
        /// alter_assembly_start
        /// 	 : ALTER  ASSEMBLY
        /// </summary>
        public override AstRoot VisitAlter_assembly_start(TSqlParser.Alter_assembly_startContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyStart(context, list);
        }
        
        /// <summary>
        /// alter_assembly_drop_multiple_files
        /// 	 : ALL
        /// 	 | multiple_local_files
        /// </summary>
        public override AstRoot VisitAlter_assembly_drop_multiple_files(TSqlParser.Alter_assembly_drop_multiple_filesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyDropMultipleFiles(context, list);
        }
        
        /// <summary>
        /// client_assembly_specifier
        /// 	 : network_file_share
        /// 	 | local_file
        /// 	 | STRING
        /// </summary>
        public override AstRoot VisitClient_assembly_specifier(TSqlParser.Client_assembly_specifierContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstClientAssemblySpecifier(context, list);
        }
        
        /// <summary>
        /// assembly_option
        /// 	 : PERMISSION_SET  EQUAL  (SAFE | EXTERNAL_ACCESS | UNSAFE)
        /// 	 | VISIBILITY  EQUAL  on_off
        /// 	 | UNCHECKED  DATA
        /// 	 | assembly_option  COMMA
        /// </summary>
        public override AstRoot VisitAssembly_option(TSqlParser.Assembly_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAssemblyOption(context, list);
        }
        
        /// <summary>
        /// file_path
        /// 	 : file_directory_path_separator  file_path
        /// 	 | id_
        /// </summary>
        public override AstRoot VisitFile_path(TSqlParser.File_pathContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFilePath(context, list);
        }
        
        /// <summary>
        /// multiple_local_files
        /// 	 : multiple_local_file_start  local_file  SINGLE_QUOTE  COMMA
        /// 	 | local_file
        /// </summary>
        public override AstRoot VisitMultiple_local_files(TSqlParser.Multiple_local_filesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMultipleLocalFiles(context, list);
        }
        
        /// <summary>
        /// drop_assembly
        /// 	 : DROP  ASSEMBLY  (IF  EXISTS)?  (COMMA?  assembly_name)+  (WITH  NO  DEPENDENTS)?
        /// </summary>
        public override AstRoot VisitDrop_assembly(TSqlParser.Drop_assemblyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropAssembly(context, list);
        }
        
        /// <summary>
        /// asymmetric_key_password_change_option
        /// 	 : DECRYPTION  BY  PASSWORD  EQUAL  STRING
        /// 	 | ENCRYPTION  BY  PASSWORD  EQUAL  STRING
        /// </summary>
        public override AstRoot VisitAsymmetric_key_password_change_option(TSqlParser.Asymmetric_key_password_change_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAsymmetricKeyPasswordChangeOption(context, list);
        }
        
        /// <summary>
        /// drop_asymmetric_key
        /// 	 : DROP  ASYMMETRIC  KEY  key_name = id_  (REMOVE  PROVIDER  KEY)?
        /// </summary>
        public override AstRoot VisitDrop_asymmetric_key(TSqlParser.Drop_asymmetric_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropAsymmetricKey(context, list);
        }
        
        /// <summary>
        /// authorization_grantee
        /// 	 : principal_name = id_
        /// 	 | SCHEMA  OWNER
        /// </summary>
        public override AstRoot VisitAuthorization_grantee(TSqlParser.Authorization_granteeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAuthorizationGrantee(context, list);
        }
        
        /// <summary>
        /// class_type
        /// 	 : OBJECT
        /// 	 | ASSEMBLY
        /// 	 | ASYMMETRIC  KEY
        /// 	 | AVAILABILITY  GROUP
        /// 	 | CERTIFICATE
        /// 	 | CONTRACT
        /// 	 | TYPE
        /// 	 | DATABASE
        /// 	 | ENDPOINT
        /// 	 | FULLTEXT  CATALOG
        /// 	 | FULLTEXT  STOPLIST
        /// 	 | MESSAGE  TYPE
        /// 	 | REMOTE  SERVICE  BINDING
        /// 	 | ROLE
        /// 	 | ROUTE
        /// 	 | SCHEMA
        /// 	 | SEARCH  PROPERTY  LIST
        /// 	 | SERVER  ROLE
        /// 	 | SERVICE
        /// 	 | SYMMETRIC  KEY
        /// 	 | XML  SCHEMA  COLLECTION
        /// </summary>
        public override AstRoot VisitClass_type(TSqlParser.Class_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstClassType(context, list);
        }
        
        /// <summary>
        /// class_type_for_sql_database
        /// 	 : OBJECT
        /// 	 | ASSEMBLY
        /// 	 | ASYMMETRIC  KEY
        /// 	 | CERTIFICATE
        /// 	 | TYPE
        /// 	 | DATABASE
        /// 	 | FULLTEXT  CATALOG
        /// 	 | FULLTEXT  STOPLIST
        /// 	 | ROLE
        /// 	 | SCHEMA
        /// 	 | SEARCH  PROPERTY  LIST
        /// 	 | SYMMETRIC  KEY
        /// 	 | XML  SCHEMA  COLLECTION
        /// </summary>
        public override AstRoot VisitClass_type_for_sql_database(TSqlParser.Class_type_for_sql_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstClassTypeForSqlDatabase(context, list);
        }
        
        /// <summary>
        /// class_type_for_grant
        /// 	 : APPLICATION  ROLE
        /// 	 | ASSEMBLY
        /// 	 | ASYMMETRIC  KEY
        /// 	 | AUDIT
        /// 	 | AVAILABILITY  GROUP
        /// 	 | BROKER  PRIORITY
        /// 	 | CERTIFICATE
        /// 	 | COLUMN  (ENCRYPTION | MASTER)  KEY
        /// 	 | CONTRACT
        /// 	 | CREDENTIAL
        /// 	 | CRYPTOGRAPHIC  PROVIDER
        /// 	 | DATABASE  (AUDIT  SPECIFICATION | ENCRYPTION  KEY | EVENT  SESSION | SCOPED  (CONFIGURATION | CREDENTIAL | RESOURCE  GOVERNOR))?
        /// 	 | ENDPOINT
        /// 	 | EVENT  SESSION
        /// 	 | NOTIFICATION  (DATABASE | OBJECT | SERVER)
        /// 	 | EXTERNAL  (DATA  SOURCE | FILE  FORMAT | LIBRARY | RESOURCE  POOL | TABLE | CATALOG | STOPLIST)
        /// 	 | LOGIN
        /// 	 | MASTER  KEY
        /// 	 | MESSAGE  TYPE
        /// 	 | OBJECT
        /// 	 | PARTITION  (FUNCTION | SCHEME)
        /// 	 | REMOTE  SERVICE  BINDING
        /// 	 | RESOURCE  GOVERNOR
        /// 	 | ROLE
        /// 	 | ROUTE
        /// 	 | SCHEMA
        /// 	 | SEARCH  PROPERTY  LIST
        /// 	 | SERVER  ((AUDIT  SPECIFICATION?) | ROLE)?
        /// 	 | SERVICE
        /// 	 | SQL  LOGIN
        /// 	 | SYMMETRIC  KEY
        /// 	 | TRIGGER  (DATABASE | SERVER)
        /// 	 | TYPE
        /// 	 | USER
        /// 	 | XML  SCHEMA  COLLECTION
        /// </summary>
        public override AstRoot VisitClass_type_for_grant(TSqlParser.Class_type_for_grantContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstClassTypeForGrant(context, list);
        }
        
        /// <summary>
        /// alter_availability_group_options
        /// 	 : SET  LR_BRACKET  (AUTOMATED_BACKUP_PREFERENCE  EQUAL  primary_secondary_none | FAILURE_CONDITION_LEVEL  EQUAL  DECIMAL | HEALTH_CHECK_TIMEOUT  EQUAL  milliseconds = DECIMAL | DB_FAILOVER  EQUAL  on_off | REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT  EQUAL  DECIMAL  RR_BRACKET)
        /// 	 | alter_availability_group_options_database
        /// 	 | alter_availability_group_options_replicat
        /// 	 | alter_availability_group_options_listener
        /// 	 | alter_availability_group_options_role
        /// 	 | alter_availability_group_options_group
        /// 	 | grant_deny  CREATE  ANY  DATABASE
        /// 	 | FAILOVER
        /// 	 | FORCE_FAILOVER_ALLOW_DATA_LOSS
        /// 	 | OFFLINE
        /// 	 | WITH  LR_BRACKET  DTC_SUPPORT  EQUAL  PER_DB  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_availability_group_options(TSqlParser.Alter_availability_group_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAvailabilityGroupOptions(context, list);
        }
        
        /// <summary>
        /// drop_broker_priority
        /// 	 : DROP  BROKER  PRIORITY  ConversationPriorityName = id_
        /// </summary>
        public override AstRoot VisitDrop_broker_priority(TSqlParser.Drop_broker_priorityContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropBrokerPriority(context, list);
        }
        
        /// <summary>
        /// drop_contract
        /// 	 : DROP  CONTRACT  dropped_contract_name = id_
        /// </summary>
        public override AstRoot VisitDrop_contract(TSqlParser.Drop_contractContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropContract(context, list);
        }
        
        /// <summary>
        /// drop_database
        /// 	 : DROP  DATABASE  (IF  EXISTS)?  (COMMA?  database_name)+
        /// </summary>
        public override AstRoot VisitDrop_database(TSqlParser.Drop_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDatabase(context, list);
        }
        
        /// <summary>
        /// drop_database_encryption_key
        /// 	 : DROP  DATABASE  ENCRYPTION  KEY
        /// </summary>
        public override AstRoot VisitDrop_database_encryption_key(TSqlParser.Drop_database_encryption_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDatabaseEncryptionKey(context, list);
        }
        
        /// <summary>
        /// drop_default
        /// 	 : DROP  DEFAULT  (IF  EXISTS)?  (COMMA?  (schema_name  DOT)?  schema_name)
        /// </summary>
        public override AstRoot VisitDrop_default(TSqlParser.Drop_defaultContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDefault(context, list);
        }
        
        /// <summary>
        /// drop_event_notifications
        /// 	 : DROP  EVENT  NOTIFICATION  (COMMA?  notification_name)+  ON  (SERVER | DATABASE | QUEUE  queue_name)
        /// </summary>
        public override AstRoot VisitDrop_event_notifications(TSqlParser.Drop_event_notificationsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropEventNotifications(context, list);
        }
        
        /// <summary>
        /// drop_master_key
        /// 	 : DROP  MASTER  KEY
        /// </summary>
        public override AstRoot VisitDrop_master_key(TSqlParser.Drop_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropMasterKey(context, list);
        }
        
        /// <summary>
        /// drop_rule
        /// 	 : DROP  RULE  (IF  EXISTS)?  (COMMA?  (schema_name  DOT)?  rule_name)?
        /// </summary>
        public override AstRoot VisitDrop_rule(TSqlParser.Drop_ruleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropRule(context, list);
        }
        
        /// <summary>
        /// drop_sequence
        /// 	 : DROP  SEQUENCE  (IF  EXISTS)?  (COMMA?  (database_name  DOT)?  full_sequence_name)?
        /// </summary>
        public override AstRoot VisitDrop_sequence(TSqlParser.Drop_sequenceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSequence(context, list);
        }
        
        /// <summary>
        /// disable_trigger
        /// 	 : DISABLE  TRIGGER  ((COMMA?  (schema_name  DOT)?  trigger_name)+ | ALL)  ON  ((schema_name  DOT)?  object_name | DATABASE | ALL  SERVER)
        /// </summary>
        public override AstRoot VisitDisable_trigger(TSqlParser.Disable_triggerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDisableTrigger(context, list);
        }
        
        /// <summary>
        /// enable_trigger
        /// 	 : ENABLE  TRIGGER  ((COMMA?  (schema_name  DOT)?  trigger_name)+ | ALL)  ON  ((schema_name  DOT)?  object_name | DATABASE | ALL  SERVER)
        /// </summary>
        public override AstRoot VisitEnable_trigger(TSqlParser.Enable_triggerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEnableTrigger(context, list);
        }
        
        /// <summary>
        /// create_column_master_key
        /// 	 : CREATE  COLUMN  MASTER  KEY  key_name = id_  WITH  LR_BRACKET  KEY_STORE_PROVIDER_NAME  EQUAL  key_store_provider_name = STRING  COMMA  KEY_PATH  EQUAL  key_path = STRING  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCreate_column_master_key(TSqlParser.Create_column_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateColumnMasterKey(context, list);
        }
        
        /// <summary>
        /// event_session_predicate_expression
        /// 	 : (COMMA?  and_or?  NOT?  (event_session_predicate_factor | LR_BRACKET  event_session_predicate_expression  RR_BRACKET))+
        /// </summary>
        public override AstRoot VisitEvent_session_predicate_expression(TSqlParser.Event_session_predicate_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEventSessionPredicateExpression(context, list);
        }
        
        /// <summary>
        /// event_session_predicate_factor
        /// 	 : event_session_predicate_leaf
        /// 	 | LR_BRACKET  event_session_predicate_expression  RR_BRACKET
        /// </summary>
        public override AstRoot VisitEvent_session_predicate_factor(TSqlParser.Event_session_predicate_factorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEventSessionPredicateFactor(context, list);
        }
        
        /// <summary>
        /// event_session_predicate_leaf
        /// 	 : (event_field_name | (event_field_name | ((event_module_guid  DOT)?  event_package_name  DOT  predicate_source_name))  (EQUAL | (LESS  GREATER) | (EXCLAMATION  EQUAL) | GREATER | (GREATER  EQUAL) | LESS | LESS  EQUAL)  decimal_string)
        /// 	 | (event_module_guid  DOT)?  event_package_name  DOT  predicate_compare_name  LR_BRACKET  (event_field_name | ((event_module_guid  DOT)?  event_package_name  DOT  predicate_source_name)  COMMA  decimal_string)  RR_BRACKET
        /// </summary>
        public override AstRoot VisitEvent_session_predicate_leaf(TSqlParser.Event_session_predicate_leafContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEventSessionPredicateLeaf(context, list);
        }
        
        /// <summary>
        /// alter_external_data_source
        /// 	 : ALTER  EXTERNAL  DATA  SOURCE  data_source_name  SET  (LOCATION  EQUAL  location = STRING  COMMA? | RESOURCE_MANAGER_LOCATION  EQUAL  resource_manager_location = STRING  COMMA? | CREDENTIAL  EQUAL  credential_name)+
        /// 	 | ALTER  EXTERNAL  DATA  SOURCE  data_source_name  WITH  LR_BRACKET  TYPE  EQUAL  BLOB_STORAGE  COMMA  LOCATION  EQUAL  location = STRING  (COMMA  CREDENTIAL  EQUAL  credential_name)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_external_data_source(TSqlParser.Alter_external_data_sourceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterExternalDataSource(context, list);
        }
        
        /// <summary>
        /// alter_master_key_sql_server
        /// 	 : ALTER  MASTER  KEY  ((FORCE)?  REGENERATE  WITH  ENCRYPTION  BY  PASSWORD  EQUAL  password = STRING | add_drop  ENCRYPTION  BY  (SERVICE  MASTER  KEY | PASSWORD  EQUAL  encryption_password = STRING))
        /// </summary>
        public override AstRoot VisitAlter_master_key_sql_server(TSqlParser.Alter_master_key_sql_serverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterMasterKeySqlServer(context, list);
        }
        
        /// <summary>
        /// create_master_key_sql_server
        /// 	 : CREATE  MASTER  KEY  ENCRYPTION  BY  PASSWORD  EQUAL  password = STRING
        /// </summary>
        public override AstRoot VisitCreate_master_key_sql_server(TSqlParser.Create_master_key_sql_serverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateMasterKeySqlServer(context, list);
        }
        
        /// <summary>
        /// alter_master_key_azure_sql
        /// 	 : ALTER  MASTER  KEY  ((FORCE)?  REGENERATE  WITH  ENCRYPTION  BY  PASSWORD  EQUAL  password = STRING | ADD  ENCRYPTION  BY  (SERVICE  MASTER  KEY | PASSWORD  EQUAL  encryption_password = STRING) | DROP  ENCRYPTION  BY  PASSWORD  EQUAL  encryption_password = STRING)
        /// </summary>
        public override AstRoot VisitAlter_master_key_azure_sql(TSqlParser.Alter_master_key_azure_sqlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterMasterKeyAzureSql(context, list);
        }
        
        /// <summary>
        /// create_master_key_azure_sql
        /// 	 : CREATE  MASTER  KEY  (ENCRYPTION  BY  PASSWORD  EQUAL  password = STRING)?
        /// </summary>
        public override AstRoot VisitCreate_master_key_azure_sql(TSqlParser.Create_master_key_azure_sqlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateMasterKeyAzureSql(context, list);
        }
        
        /// <summary>
        /// alter_resource_governor
        /// 	 : ALTER  RESOURCE  GOVERNOR  ((DISABLE | RECONFIGURE) | WITH  LR_BRACKET  CLASSIFIER_FUNCTION  EQUAL  (schema_name  DOT  function_name | NULL_)  RR_BRACKET | RESET  STATISTICS | WITH  LR_BRACKET  MAX_OUTSTANDING_IO_PER_VOLUME  EQUAL  max_outstanding_io_per_volume = DECIMAL  RR_BRACKET)
        /// </summary>
        public override AstRoot VisitAlter_resource_governor(TSqlParser.Alter_resource_governorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterResourceGovernor(context, list);
        }
        
        /// <summary>
        /// create_schema
        /// 	 : CREATE  SCHEMA  (schema_name | AUTHORIZATION  owner_name | schema_name  AUTHORIZATION  owner_name)  (create_table | create_view | grant_deny  enum_dml  ON  (SCHEMA  DOUBLE_COLON)?  object_name  TO  owner_name | REVOKE  enum_dml  ON  (SCHEMA  DOUBLE_COLON)?  object_name  FROM  owner_name)*
        /// </summary>
        public override AstRoot VisitCreate_schema(TSqlParser.Create_schemaContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateSchema(context, list);
        }
        
        /// <summary>
        /// alter_server_configuration
        /// 	 : ALTER  SERVER  CONFIGURATION  SET  ((PROCESS  AFFINITY  (CPU  EQUAL  (AUTO | (COMMA?  DECIMAL | COMMA?  DECIMAL  TO  DECIMAL)+) | NUMANODE  EQUAL  (COMMA?  DECIMAL | COMMA?  DECIMAL  TO  DECIMAL)+) | DIAGNOSTICS  LOG  (ON | OFF | PATH  EQUAL  (STRING | DEFAULT) | MAX_SIZE  EQUAL  (DECIMAL  MB | DEFAULT) | MAX_FILES  EQUAL  (DECIMAL | DEFAULT)) | FAILOVER  CLUSTER  PROPERTY  (VERBOSELOGGING  EQUAL  (STRING | DEFAULT) | SQLDUMPERFLAGS  EQUAL  (STRING | DEFAULT) | SQLDUMPERPATH  EQUAL  (STRING | DEFAULT) | SQLDUMPERTIMEOUT  (STRING | DEFAULT) | FAILURECONDITIONLEVEL  EQUAL  (STRING | DEFAULT) | HEALTHCHECKTIMEOUT  EQUAL  (DECIMAL | DEFAULT)) | HADR  CLUSTER  CONTEXT  EQUAL  (STRING | LOCAL) | BUFFER  POOL  EXTENSION  (ON  LR_BRACKET  FILENAME  EQUAL  STRING  COMMA  SIZE  EQUAL  DECIMAL  size_unity  RR_BRACKET | OFF) | SET  SOFTNUMA  on_off))
        /// </summary>
        public override AstRoot VisitAlter_server_configuration(TSqlParser.Alter_server_configurationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServerConfiguration(context, list);
        }
        
        /// <summary>
        /// alter_service_master_key
        /// 	 : ALTER  SERVICE  MASTER  KEY  (FORCE?  REGENERATE | (WITH  (OLD_ACCOUNT  EQUAL  acold_account_name = STRING  COMMA  OLD_PASSWORD  EQUAL  old_password = STRING | NEW_ACCOUNT  EQUAL  new_account_name = STRING  COMMA  NEW_PASSWORD  EQUAL  new_password = STRING)?))
        /// </summary>
        public override AstRoot VisitAlter_service_master_key(TSqlParser.Alter_service_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServiceMasterKey(context, list);
        }
        
        /// <summary>
        /// create_user
        /// 	 : CREATE  USER  user_name  create_user_with_login
        /// 	 | CREATE  USER  create_user_windows_principal
        /// 	 | CREATE  USER  user_name  create_user_without_login?
        /// </summary>
        public override AstRoot VisitCreate_user(TSqlParser.Create_userContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateUser(context, list);
        }
        
        /// <summary>
        /// create_user_azure_sql_dw
        /// 	 : CREATE  USER  user_name  (for_from  LOGIN  login_name | WITHOUT  LOGIN)?  (WITH  DEFAULT_SCHEMA  EQUAL  schema_name)?
        /// 	 | CREATE  USER  azure_active_directory_principal  FROM  EXTERNAL  PROVIDER  (WITH  DEFAULT_SCHEMA  EQUAL  schema_name)?
        /// </summary>
        public override AstRoot VisitCreate_user_azure_sql_dw(TSqlParser.Create_user_azure_sql_dwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateUserAzureSqlDw(context, list);
        }
        
        /// <summary>
        /// alter_workload_group
        /// 	 : ALTER  WORKLOAD  GROUP  (workload_group_group_name | DEFAULT_DOUBLE_QUOTE)  (WITH  LR_BRACKET  (IMPORTANCE  EQUAL  (LOW | MEDIUM | HIGH) | COMMA?  REQUEST_MAX_MEMORY_GRANT_PERCENT  EQUAL  request_max_memory_grant = DECIMAL | COMMA?  REQUEST_MAX_CPU_TIME_SEC  EQUAL  request_max_cpu_time_sec = DECIMAL | REQUEST_MEMORY_GRANT_TIMEOUT_SEC  EQUAL  request_memory_grant_timeout_sec = DECIMAL | MAX_DOP  EQUAL  max_dop = DECIMAL | GROUP_MAX_REQUESTS  EQUAL  group_max_requests = DECIMAL)+  RR_BRACKET)?  (USING  (workload_group_pool_name | DEFAULT_DOUBLE_QUOTE))?
        /// </summary>
        public override AstRoot VisitAlter_workload_group(TSqlParser.Alter_workload_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterWorkloadGroup(context, list);
        }
        
        /// <summary>
        /// queue_settings
        /// 	 : WITH  (STATUS  EQUAL  on_off  COMMA?)?  (RETENTION  EQUAL  on_off  COMMA?)?  (ACTIVATION  LR_BRACKET  (((STATUS  EQUAL  on_off  COMMA?)?  (PROCEDURE_NAME  EQUAL  func_proc_name_database_schema  COMMA?)?  (MAX_QUEUE_READERS  EQUAL  max_readers = DECIMAL  COMMA?)?  (EXECUTE  AS  (SELF | username = STRING | OWNER)  COMMA?)?) | DROP)  RR_BRACKET  COMMA?)?  (POISON_MESSAGE_HANDLING  LR_BRACKET  (STATUS  EQUAL  on_off)  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitQueue_settings(TSqlParser.Queue_settingsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQueueSettings(context, list);
        }
        
        /// <summary>
        /// alter_queue
        /// 	 : ALTER  QUEUE  (complete_table_name | queue_name)  (queue_settings | queue_action)
        /// </summary>
        public override AstRoot VisitAlter_queue(TSqlParser.Alter_queueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterQueue(context, list);
        }
        
        /// <summary>
        /// queue_action
        /// 	 : REBUILD  (WITH  LR_BRACKET  queue_rebuild_options  RR_BRACKET)?
        /// 	 | REORGANIZE  (WITH  LOB_COMPACTION  EQUAL  on_off)?
        /// 	 | MOVE  TO  (id_ | DEFAULT)
        /// </summary>
        public override AstRoot VisitQueue_action(TSqlParser.Queue_actionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQueueAction(context, list);
        }
        
        /// <summary>
        /// queue_rebuild_options
        /// 	 : MAXDOP  EQUAL  DECIMAL
        /// </summary>
        public override AstRoot VisitQueue_rebuild_options(TSqlParser.Queue_rebuild_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQueueRebuildOptions(context, list);
        }
        
        /// <summary>
        /// when_matches
        /// 	 : (WHEN  MATCHED  (AND  search_condition)?  THEN  merge_matched)+
        /// 	 | (WHEN  NOT  MATCHED  (BY  TARGET)?  (AND  search_condition)?  THEN  merge_not_matched)
        /// 	 | (WHEN  NOT  MATCHED  BY  SOURCE  (AND  search_condition)?  THEN  merge_matched)+
        /// </summary>
        public override AstRoot VisitWhen_matches(TSqlParser.When_matchesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWhenMatches(context, list);
        }
        
        /// <summary>
        /// merge_matched
        /// 	 : UPDATE  SET  update_elem_merges
        /// 	 | DELETE
        /// </summary>
        public override AstRoot VisitMerge_matched(TSqlParser.Merge_matchedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMergeMatched(context, list);
        }
        
        /// <summary>
        /// merge_not_matched
        /// 	 : INSERT  (LR_BRACKET  column_name_list  RR_BRACKET)?  (table_value_constructor | DEFAULT  VALUES)
        /// </summary>
        public override AstRoot VisitMerge_not_matched(TSqlParser.Merge_not_matchedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMergeNotMatched(context, list);
        }
        
        /// <summary>
        /// delete_statement_from
        /// 	 : ddl_object
        /// 	 | rowset_function_limited
        /// 	 | table_var = LOCAL_ID
        /// </summary>
        public override AstRoot VisitDelete_statement_from(TSqlParser.Delete_statement_fromContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeleteStatementFrom(context, list);
        }
        
        /// <summary>
        /// insert_statement_value
        /// 	 : table_value_constructor
        /// 	 | derived_table
        /// 	 | execute_statement
        /// 	 | DEFAULT  VALUES
        /// </summary>
        public override AstRoot VisitInsert_statement_value(TSqlParser.Insert_statement_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstInsertStatementValue(context, list);
        }
        
        /// <summary>
        /// time
        /// 	 : (LOCAL_ID | constant)
        /// </summary>
        public override AstRoot VisitTime(TSqlParser.TimeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTime(context, list);
        }
        
        /// <summary>
        /// relational_index_option
        /// 	 : rebuild_index_option
        /// 	 | DROP_EXISTING  EQUAL  on_off
        /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitRelational_index_option(TSqlParser.Relational_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRelationalIndexOption(context, list);
        }
        
        /// <summary>
        /// resumable_index_options
        /// 	 : WITH  LR_BRACKET  (resumable_index_option  (COMMA  resumable_index_option)*)  RR_BRACKET
        /// </summary>
        public override AstRoot VisitResumable_index_options(TSqlParser.Resumable_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstResumableIndexOptions(context, list);
        }
        
        /// <summary>
        /// resumable_index_option
        /// 	 : MAXDOP  EQUAL  max_degree_of_parallelism = DECIMAL
        /// 	 | MAX_DURATION  EQUAL  max_duration = DECIMAL  MINUTES?
        /// 	 | low_priority_lock_wait
        /// </summary>
        public override AstRoot VisitResumable_index_option(TSqlParser.Resumable_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstResumableIndexOption(context, list);
        }
        
        /// <summary>
        /// reorganize_options
        /// 	 : WITH  LR_BRACKET  (reorganize_option  (COMMA  reorganize_option)*)  RR_BRACKET
        /// </summary>
        public override AstRoot VisitReorganize_options(TSqlParser.Reorganize_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstReorganizeOptions(context, list);
        }
        
        /// <summary>
        /// reorganize_option
        /// 	 : LOB_COMPACTION  EQUAL  on_off
        /// 	 | COMPRESS_ALL_ROW_GROUPS  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitReorganize_option(TSqlParser.Reorganize_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstReorganizeOption(context, list);
        }
        
        /// <summary>
        /// set_index_option
        /// 	 : ALLOW_ROW_LOCKS  EQUAL  on_off
        /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
        /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
        /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
        /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
        /// 	 | COMPRESSION_DELAY  EQUAL  delay = DECIMAL  MINUTES?
        /// </summary>
        public override AstRoot VisitSet_index_option(TSqlParser.Set_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSetIndexOption(context, list);
        }
        
        /// <summary>
        /// rebuild_partition
        /// 	 : REBUILD  (PARTITION  EQUAL  ALL)?  rebuild_index_options?
        /// 	 | REBUILD  PARTITION  EQUAL  DECIMAL  single_partition_rebuild_index_options?
        /// </summary>
        public override AstRoot VisitRebuild_partition(TSqlParser.Rebuild_partitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRebuildPartition(context, list);
        }
        
        /// <summary>
        /// rebuild_index_option
        /// 	 : PAD_INDEX  EQUAL  on_off
        /// 	 | FILLFACTOR  EQUAL  DECIMAL
        /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
        /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
        /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
        /// 	 | STATISTICS_INCREMENTAL  EQUAL  on_off
        /// 	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
        /// 	 | RESUMABLE  EQUAL  on_off
        /// 	 | MAX_DURATION  EQUAL  times = DECIMAL  MINUTES?
        /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
        /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
        /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = DECIMAL
        /// 	 | DATA_COMPRESSION  EQUAL  (NONE | ROW | PAGE | COLUMNSTORE | COLUMNSTORE_ARCHIVE)  on_partitions?
        /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
        /// </summary>
        public override AstRoot VisitRebuild_index_option(TSqlParser.Rebuild_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRebuildIndexOption(context, list);
        }
        
        /// <summary>
        /// single_partition_rebuild_index_option
        /// 	 : SORT_IN_TEMPDB  EQUAL  on_off
        /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = DECIMAL
        /// 	 | RESUMABLE  EQUAL  on_off
        /// 	 | DATA_COMPRESSION  EQUAL  (NONE | ROW | PAGE | COLUMNSTORE | COLUMNSTORE_ARCHIVE)  on_partitions?
        /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
        /// 	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
        /// </summary>
        public override AstRoot VisitSingle_partition_rebuild_index_option(TSqlParser.Single_partition_rebuild_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSinglePartitionRebuildIndexOption(context, list);
        }
        
        /// <summary>
        /// on_partitions
        /// 	 : ON  PARTITIONS  LR_BRACKET  partition_number = DECIMAL  (TO  to_partition_number = DECIMAL)?  (COMMA  partition_number = DECIMAL  (TO  to_partition_number = DECIMAL)?)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitOn_partitions(TSqlParser.On_partitionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOnPartitions(context, list);
        }
        
        /// <summary>
        /// columnstore_index_option
        /// 	 : DROP_EXISTING  EQUAL  on_off
        /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = DECIMAL
        /// 	 | ONLINE  EQUAL  on_off
        /// 	 | COMPRESSION_DELAY  EQUAL  delay = DECIMAL  MINUTES?
        /// 	 | DATA_COMPRESSION  EQUAL  (COLUMNSTORE | COLUMNSTORE_ARCHIVE)  on_partitions?
        /// </summary>
        public override AstRoot VisitColumnstore_index_option(TSqlParser.Columnstore_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnstoreIndexOption(context, list);
        }
        
        /// <summary>
        /// xml_index_option
        /// 	 : PAD_INDEX  EQUAL  on_off
        /// 	 | FILLFACTOR  EQUAL  DECIMAL
        /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
        /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
        /// 	 | DROP_EXISTING  EQUAL  on_off
        /// 	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
        /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
        /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
        /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = DECIMAL
        /// 	 | XML_COMPRESSION  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitXml_index_option(TSqlParser.Xml_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstXmlIndexOption(context, list);
        }
        
        /// <summary>
        /// dml_trigger_option
        /// 	 : ENCRYPTION
        /// 	 | execute_clause
        /// </summary>
        public override AstRoot VisitDml_trigger_option(TSqlParser.Dml_trigger_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDmlTriggerOption(context, list);
        }
        
        /// <summary>
        /// create_or_alter_function
        /// 	 : ((CREATE  (OR  ALTER)?) | ALTER)  FUNCTION  funcName = func_proc_name_schema  ((LR_BRACKET  procedure_params  RR_BRACKET) | LR_BRACKET  RR_BRACKET)  (func_body_returns_select | func_body_returns_table | func_body_returns_scalar)  SEMI?
        /// </summary>
        public override AstRoot VisitCreate_or_alter_function(TSqlParser.Create_or_alter_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterFunction(context, list);
        }
        
        /// <summary>
        /// procedure_option
        /// 	 : ENCRYPTION
        /// 	 | RECOMPILE
        /// 	 | execute_clause
        /// </summary>
        public override AstRoot VisitProcedure_option(TSqlParser.Procedure_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstProcedureOption(context, list);
        }
        
        /// <summary>
        /// function_option
        /// 	 : ENCRYPTION
        /// 	 | SCHEMABINDING
        /// 	 | RETURNS  NULL_  ON  NULL_  INPUT
        /// 	 | CALLED  ON  NULL_  INPUT
        /// 	 | execute_clause
        /// </summary>
        public override AstRoot VisitFunction_option(TSqlParser.Function_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFunctionOption(context, list);
        }
        
        /// <summary>
        /// update_statistics_option
        /// 	 : (FULLSCAN  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
        /// 	 | (SAMPLE  number = DECIMAL  (PERCENT | ROWS)  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
        /// 	 | RESAMPLE  on_partitions?
        /// 	 | STATS_STREAM  EQUAL  stats_stream_ = expression
        /// 	 | ROWCOUNT  EQUAL  DECIMAL
        /// 	 | PAGECOUNT  EQUAL  DECIMAL
        /// 	 | ALL
        /// 	 | COLUMNS
        /// 	 | INDEX
        /// 	 | NORECOMPUTE
        /// 	 | INCREMENTAL  EQUAL  on_off
        /// 	 | MAXDOP  EQUAL  max_dregree_of_parallelism = DECIMAL
        /// 	 | AUTO_DROP  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitUpdate_statistics_option(TSqlParser.Update_statistics_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdateStatisticsOption(context, list);
        }
        
        /// <summary>
        /// table_indices
        /// 	 : INDEX  id_  UNIQUE?  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET
        /// 	 | INDEX  id_  CLUSTERED  COLUMNSTORE
        /// 	 | INDEX  id_  NONCLUSTERED?  COLUMNSTORE  LR_BRACKET  column_name_list  RR_BRACKET  create_table_index_options?  (ON  id_)?
        /// </summary>
        public override AstRoot VisitTable_indices(TSqlParser.Table_indicesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableIndices(context, list);
        }
        
        /// <summary>
        /// table_options
        /// 	 : WITH  (LR_BRACKET  table_option  (COMMA  table_option)*  RR_BRACKET | table_option  (COMMA  table_option)*)
        /// </summary>
        public override AstRoot VisitTable_options(TSqlParser.Table_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableOptions(context, list);
        }
        
        /// <summary>
        /// table_option
        /// 	 : (simple_id | keyword)  EQUAL  (simple_id | keyword | on_off | DECIMAL)
        /// 	 | CLUSTERED  COLUMNSTORE  INDEX
        /// 	 | HEAP
        /// 	 | FILLFACTOR  EQUAL  DECIMAL
        /// 	 | distribution
        /// 	 | DATA_COMPRESSION  EQUAL  (NONE | ROW | PAGE)  on_partitions?
        /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
        /// </summary>
        public override AstRoot VisitTable_option(TSqlParser.Table_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableOption(context, list);
        }
        
        /// <summary>
        /// distribution
        /// 	 : DISTRIBUTION  EQUAL  HASH  LR_BRACKET  id_  RR_BRACKET
        /// 	 | CLUSTERED  INDEX  LR_BRACKET  column_name_list_with_order  RR_BRACKET
        /// </summary>
        public override AstRoot VisitDistribution(TSqlParser.DistributionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDistribution(context, list);
        }
        
        /// <summary>
        /// create_table_index_option
        /// 	 : PAD_INDEX  EQUAL  on_off
        /// 	 | FILLFACTOR  EQUAL  DECIMAL
        /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
        /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
        /// 	 | STATISTICS_INCREMENTAL  EQUAL  on_off
        /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
        /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
        /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
        /// 	 | DATA_COMPRESSION  EQUAL  index_strategy  on_partitions?
        /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
        /// </summary>
        public override AstRoot VisitCreate_table_index_option(TSqlParser.Create_table_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateTableIndexOption(context, list);
        }
        
        /// <summary>
        /// view_attributes
        /// 	 : (WITH  view_attribute  (COMMA  view_attribute)*)
        /// </summary>
        public override AstRoot VisitView_attributes(TSqlParser.View_attributesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstViewAttributes(context, list);
        }
        
        /// <summary>
        /// switch_partition
        /// 	 : (PARTITION?  source_partition_number_expression = expression)?  TO  target_table = full_table_name  (PARTITION  target_partition_number_expression = expression)?  (WITH  low_priority_lock_wait)?
        /// </summary>
        public override AstRoot VisitSwitch_partition(TSqlParser.Switch_partitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSwitchPartition(context, list);
        }
        
        /// <summary>
        /// low_priority_lock_wait
        /// 	 : WAIT_AT_LOW_PRIORITY  LR_BRACKET  MAX_DURATION  EQUAL  max_duration = time  MINUTES?  COMMA  ABORT_AFTER_WAIT  EQUAL  abort_after_wait = (NONE | SELF | BLOCKERS)  RR_BRACKET
        /// </summary>
        public override AstRoot VisitLow_priority_lock_wait(TSqlParser.Low_priority_lock_waitContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstLowPriorityLockWait(context, list);
        }
        
        /// <summary>
        /// alter_database
        /// 	 : ALTER  DATABASE  (database_name | CURRENT)  (MODIFY  NAME  EQUAL  database_name | COLLATE  collation_name | SET  database_optionspec  (WITH  termination)? | add_or_modify_files | add_or_modify_filegroups)  SEMI?
        /// </summary>
        public override AstRoot VisitAlter_database(TSqlParser.Alter_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterDatabase(context, list);
        }
        
        /// <summary>
        /// add_or_modify_files
        /// 	 : ADD  FILE  filespecs  (TO  FILEGROUP  file_group_name)?
        /// 	 | ADD  LOG  FILE  filespecs
        /// 	 | REMOVE  FILE  file_group_name
        /// 	 | MODIFY  FILE  filespec
        /// </summary>
        public override AstRoot VisitAdd_or_modify_files(TSqlParser.Add_or_modify_filesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAddOrModifyFiles(context, list);
        }
        
        /// <summary>
        /// add_or_modify_filegroups
        /// 	 : ADD  FILEGROUP  file_group_name  (CONTAINS  FILESTREAM | CONTAINS  MEMORY_OPTIMIZED_DATA)?
        /// 	 | REMOVE  FILEGROUP  file_group_name
        /// 	 | MODIFY  FILEGROUP  file_group_name  (filegroup_updatability_option | DEFAULT | NAME  EQUAL  new_file_group_name | AUTOGROW_SINGLE_FILE | AUTOGROW_ALL_FILES)
        /// </summary>
        public override AstRoot VisitAdd_or_modify_filegroups(TSqlParser.Add_or_modify_filegroupsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAddOrModifyFilegroups(context, list);
        }
        
        /// <summary>
        /// database_optionspec
        /// 	 : auto_option
        /// 	 | change_tracking_option
        /// 	 | containment_option
        /// 	 | cursor_option
        /// 	 | database_mirroring_option
        /// 	 | date_correlation_optimization_option
        /// 	 | db_encryption_option
        /// 	 | db_state_option
        /// 	 | db_update_option
        /// 	 | db_user_access_option
        /// 	 | delayed_durability_option
        /// 	 | external_access_option
        /// 	 | FILESTREAM  database_filestream_option
        /// 	 | hadr_options
        /// 	 | mixed_page_allocation_option
        /// 	 | parameterization_option
        /// 	 | recovery_option
        /// 	 | service_broker_option
        /// 	 | snapshot_option
        /// 	 | sql_option
        /// 	 | target_recovery_time_option
        /// 	 | termination
        /// </summary>
        public override AstRoot VisitDatabase_optionspec(TSqlParser.Database_optionspecContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDatabaseOptionspec(context, list);
        }
        
        /// <summary>
        /// auto_option
        /// 	 : AUTO_CLOSE  on_off
        /// 	 | AUTO_CREATE_STATISTICS  OFF
        /// 	 | ON  (INCREMENTAL  EQUAL  ON | OFF)
        /// 	 | AUTO_SHRINK  on_off
        /// 	 | AUTO_UPDATE_STATISTICS  on_off
        /// 	 | AUTO_UPDATE_STATISTICS_ASYNC  on_off
        /// </summary>
        public override AstRoot VisitAuto_option(TSqlParser.Auto_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAutoOption(context, list);
        }
        
        /// <summary>
        /// change_tracking_option
        /// 	 : CHANGE_TRACKING  EQUAL  (OFF | ON  (change_tracking_option_list  change_tracking_option_lists)*)
        /// </summary>
        public override AstRoot VisitChange_tracking_option(TSqlParser.Change_tracking_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstChangeTrackingOption(context, list);
        }
        
        /// <summary>
        /// change_tracking_option_list
        /// 	 : AUTO_CLEANUP  EQUAL  on_off
        /// 	 | CHANGE_RETENTION  EQUAL  period
        /// </summary>
        public override AstRoot VisitChange_tracking_option_list(TSqlParser.Change_tracking_option_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstChangeTrackingOptionList(context, list);
        }
        
        /// <summary>
        /// cursor_option
        /// 	 : CURSOR_CLOSE_ON_COMMIT  on_off
        /// 	 | CURSOR_DEFAULT  local_global
        /// </summary>
        public override AstRoot VisitCursor_option(TSqlParser.Cursor_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCursorOption(context, list);
        }
        
        /// <summary>
        /// mirroring_set_option
        /// 	 : mirroring_partner  partner_option
        /// 	 | mirroring_witness  witness_option
        /// </summary>
        public override AstRoot VisitMirroring_set_option(TSqlParser.Mirroring_set_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMirroringSetOption(context, list);
        }
        
        /// <summary>
        /// partner_option
        /// 	 : witness_partner_equal  partner_server
        /// 	 | FAILOVER
        /// 	 | FORCE_SERVICE_ALLOW_DATA_LOSS
        /// 	 | OFF
        /// 	 | RESUME
        /// 	 | SAFETY  (FULL | OFF)
        /// 	 | SUSPEND
        /// 	 | TIMEOUT  DECIMAL
        /// </summary>
        public override AstRoot VisitPartner_option(TSqlParser.Partner_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPartnerOption(context, list);
        }
        
        /// <summary>
        /// witness_option
        /// 	 : witness_partner_equal  witness_server
        /// 	 | OFF
        /// </summary>
        public override AstRoot VisitWitness_option(TSqlParser.Witness_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWitnessOption(context, list);
        }
        
        /// <summary>
        /// partner_server_tcp_prefix
        /// 	 : TCP  COLON  DOUBLE_FORWARD_SLASH
        /// </summary>
        public override AstRoot VisitPartner_server_tcp_prefix(TSqlParser.Partner_server_tcp_prefixContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPartnerServerTcpPrefix(context, list);
        }
        
        /// <summary>
        /// port_number
        /// 	 : port = DECIMAL
        /// </summary>
        public override AstRoot VisitPort_number(TSqlParser.Port_numberContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPortNumber(context, list);
        }
        
        /// <summary>
        /// delayed_durability_option
        /// 	 : DELAYED_DURABILITY  EQUAL  (DISABLED | ALLOWED | FORCED)
        /// </summary>
        public override AstRoot VisitDelayed_durability_option(TSqlParser.Delayed_durability_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDelayedDurabilityOption(context, list);
        }
        
        /// <summary>
        /// external_access_option
        /// 	 : DB_CHAINING  on_off
        /// 	 | TRUSTWORTHY  on_off
        /// 	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
        /// 	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
        /// 	 | NESTED_TRIGGERS  EQUAL  on_off
        /// 	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
        /// 	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  DECIMAL
        /// </summary>
        public override AstRoot VisitExternal_access_option(TSqlParser.External_access_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExternalAccessOption(context, list);
        }
        
        /// <summary>
        /// hadr_options
        /// 	 : HADR  ((AVAILABILITY  GROUP  EQUAL  group_name | OFF) | (SUSPEND | RESUME))
        /// </summary>
        public override AstRoot VisitHadr_options(TSqlParser.Hadr_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstHadrOptions(context, list);
        }
        
        /// <summary>
        /// parameterization_option
        /// 	 : PARAMETERIZATION  (SIMPLE | FORCED)
        /// </summary>
        public override AstRoot VisitParameterization_option(TSqlParser.Parameterization_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstParameterizationOption(context, list);
        }
        
        /// <summary>
        /// recovery_option
        /// 	 : RECOVERY  (FULL | BULK_LOGGED | SIMPLE)
        /// 	 | TORN_PAGE_DETECTION  on_off
        /// 	 | ACCELERATED_DATABASE_RECOVERY  EQUAL  on_off
        /// 	 | PAGE_VERIFY  (CHECKSUM | TORN_PAGE_DETECTION | NONE)
        /// </summary>
        public override AstRoot VisitRecovery_option(TSqlParser.Recovery_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRecoveryOption(context, list);
        }
        
        /// <summary>
        /// service_broker_option
        /// 	 : ENABLE_BROKER
        /// 	 | DISABLE_BROKER
        /// 	 | NEW_BROKER
        /// 	 | ERROR_BROKER_CONVERSATIONS
        /// 	 | HONOR_BROKER_PRIORITY  on_off
        /// </summary>
        public override AstRoot VisitService_broker_option(TSqlParser.Service_broker_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstServiceBrokerOption(context, list);
        }
        
        /// <summary>
        /// snapshot_option
        /// 	 : ALLOW_SNAPSHOT_ISOLATION  on_off
        /// 	 | READ_COMMITTED_SNAPSHOT  on_off
        /// 	 | MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = on_off
        /// </summary>
        public override AstRoot VisitSnapshot_option(TSqlParser.Snapshot_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSnapshotOption(context, list);
        }
        
        /// <summary>
        /// sql_option
        /// 	 : ANSI_NULL_DEFAULT  on_off
        /// 	 | ANSI_NULLS  on_off
        /// 	 | ANSI_PADDING  on_off
        /// 	 | ANSI_WARNINGS  on_off
        /// 	 | ARITHABORT  on_off
        /// 	 | COMPATIBILITY_LEVEL  EQUAL  DECIMAL
        /// 	 | CONCAT_NULL_YIELDS_NULL  on_off
        /// 	 | NUMERIC_ROUNDABORT  on_off
        /// 	 | QUOTED_IDENTIFIER  on_off
        /// 	 | RECURSIVE_TRIGGERS  on_off
        /// </summary>
        public override AstRoot VisitSql_option(TSqlParser.Sql_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSqlOption(context, list);
        }
        
        /// <summary>
        /// target_recovery_time_option
        /// 	 : TARGET_RECOVERY_TIME  EQUAL  DECIMAL  (SECONDS | MINUTES)
        /// </summary>
        public override AstRoot VisitTarget_recovery_time_option(TSqlParser.Target_recovery_time_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTargetRecoveryTimeOption(context, list);
        }
        
        /// <summary>
        /// termination
        /// 	 : ROLLBACK  AFTER  seconds = DECIMAL
        /// 	 | ROLLBACK  IMMEDIATE
        /// 	 | NO_WAIT
        /// </summary>
        public override AstRoot VisitTermination(TSqlParser.TerminationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTermination(context, list);
        }
        
        /// <summary>
        /// drop_index
        /// 	 : DROP  INDEX  (IF  EXISTS)?  (drop_relational_or_xml_or_spatial_indexs | drop_backward_compatible_indexs)  SEMI?
        /// </summary>
        public override AstRoot VisitDrop_index(TSqlParser.Drop_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropIndex(context, list);
        }
        
        /// <summary>
        /// drop_statistics
        /// 	 : DROP  STATISTICS  (COMMA?  (full_table_name  DOT)?  name = id_)+  SEMI
        /// </summary>
        public override AstRoot VisitDrop_statistics(TSqlParser.Drop_statisticsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropStatistics(context, list);
        }
        
        /// <summary>
        /// create_type
        /// 	 : CREATE  TYPE  name = simple_name  (FROM  data_type  default_value)?  (AS  TABLE  LR_BRACKET  column_def_table_constraints  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitCreate_type(TSqlParser.Create_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateType(context, list);
        }
        
        /// <summary>
        /// drop_type
        /// 	 : DROP  TYPE  (IF  EXISTS)?  name = simple_name
        /// </summary>
        public override AstRoot VisitDrop_type(TSqlParser.Drop_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropType(context, list);
        }
        
        /// <summary>
        /// opendatasource
        /// 	 : OPENDATASOURCE  LR_BRACKET  provider = STRING  COMMA  init = STRING  RR_BRACKET  DOT  (database_name)?  DOT  (schema_name)?  DOT  (tableName)
        /// </summary>
        public override AstRoot VisitOpendatasource(TSqlParser.OpendatasourceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOpendatasource(context, list);
        }
        
        /// <summary>
        /// declare_statement
        /// 	 : DECLARE  LOCAL_ID  AS?  (table_type_definition | full_table_name)  SEMI?
        /// 	 | DECLARE  loc += declare_locals  SEMI?
        /// 	 | DECLARE  LOCAL_ID  AS?  xml_type_definition  SEMI?
        /// 	 | WITH  XMLNAMESPACES  LR_BRACKET  xml_dec += xml_declarations  RR_BRACKET  SEMI?
        /// </summary>
        public override AstRoot VisitDeclare_statement(TSqlParser.Declare_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeclareStatement(context, list);
        }
        
        /// <summary>
        /// xml_declaration
        /// 	 : xml_namespace_uri = STRING  AS  id_
        /// 	 | DEFAULT  STRING
        /// </summary>
        public override AstRoot VisitXml_declaration(TSqlParser.Xml_declarationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstXmlDeclaration(context, list);
        }
        
        /// <summary>
        /// cursor_statement
        /// 	 : CLOSE  GLOBAL?  cursor_name  SEMI?
        /// 	 | DEALLOCATE  GLOBAL?  CURSOR?  cursor_name  SEMI?
        /// 	 | declare_cursor
        /// 	 | fetch_cursor
        /// 	 | OPEN  GLOBAL?  cursor_name  SEMI?
        /// </summary>
        public override AstRoot VisitCursor_statement(TSqlParser.Cursor_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCursorStatement(context, list);
        }
        
        /// <summary>
        /// backup_master_key
        /// 	 : BACKUP  MASTER  KEY  TO  FILE  EQUAL  master_key_backup_file = STRING  ENCRYPTION  BY  PASSWORD  EQUAL  encryption_password = STRING
        /// </summary>
        public override AstRoot VisitBackup_master_key(TSqlParser.Backup_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBackupMasterKey(context, list);
        }
        
        /// <summary>
        /// backup_service_master_key
        /// 	 : BACKUP  SERVICE  MASTER  KEY  TO  FILE  EQUAL  service_master_key_backup_file = STRING  ENCRYPTION  BY  PASSWORD  EQUAL  encryption_password = STRING
        /// </summary>
        public override AstRoot VisitBackup_service_master_key(TSqlParser.Backup_service_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBackupServiceMasterKey(context, list);
        }
        
        /// <summary>
        /// kill_statement
        /// 	 : KILL  (kill_process | kill_query_notification | kill_stats_job)
        /// </summary>
        public override AstRoot VisitKill_statement(TSqlParser.Kill_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstKillStatement(context, list);
        }
        
        /// <summary>
        /// kill_process
        /// 	 : (session_id = decimal_string | UOW)  (WITH  STATUSONLY)?
        /// </summary>
        public override AstRoot VisitKill_process(TSqlParser.Kill_processContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstKillProcess(context, list);
        }
        
        /// <summary>
        /// kill_query_notification
        /// 	 : QUERY  NOTIFICATION  SUBSCRIPTION  (ALL | subscription_id = DECIMAL)
        /// </summary>
        public override AstRoot VisitKill_query_notification(TSqlParser.Kill_query_notificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstKillQueryNotification(context, list);
        }
        
        /// <summary>
        /// kill_stats_job
        /// 	 : STATS  JOB  job_id = DECIMAL
        /// </summary>
        public override AstRoot VisitKill_stats_job(TSqlParser.Kill_stats_jobContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstKillStatsJob(context, list);
        }
        
        /// <summary>
        /// execute_body
        /// 	 : (return_status = LOCAL_ID  EQUAL)?  (func_proc_name_server_database_schema | execute_var_string)  execute_statement_arg?
        /// 	 | LR_BRACKET  execute_var_strings  RR_BRACKET  (AS?  (LOGIN | USER)  EQUAL  STRING)?  (AT_KEYWORD  linked_server)?
        /// </summary>
        public override AstRoot VisitExecute_body(TSqlParser.Execute_bodyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteBody(context, list);
        }
        
        /// <summary>
        /// execute_statement_arg
        /// 	 : execute_statement_arg_unnamed  (COMMA  execute_statement_arg)*
        /// 	 | execute_statement_arg_nameds
        /// </summary>
        public override AstRoot VisitExecute_statement_arg(TSqlParser.Execute_statement_argContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteStatementArg(context, list);
        }
        
        /// <summary>
        /// execute_statement_arg_named
        /// 	 : name = LOCAL_ID  EQUAL  value = execute_parameter
        /// </summary>
        public override AstRoot VisitExecute_statement_arg_named(TSqlParser.Execute_statement_arg_namedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteStatementArgNamed(context, list);
        }
        
        /// <summary>
        /// execute_statement_arg_unnamed
        /// 	 : value = execute_parameter
        /// </summary>
        public override AstRoot VisitExecute_statement_arg_unnamed(TSqlParser.Execute_statement_arg_unnamedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteStatementArgUnnamed(context, list);
        }
        
        /// <summary>
        /// execute_parameter
        /// 	 : (constant | LOCAL_ID  (OUTPUT | OUT)? | id_ | DEFAULT | NULL_)
        /// </summary>
        public override AstRoot VisitExecute_parameter(TSqlParser.Execute_parameterContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteParameter(context, list);
        }
        
        /// <summary>
        /// execute_var_string
        /// 	 : LOCAL_ID  (OUTPUT | OUT)?  (PLUS  LOCAL_ID  (PLUS  execute_var_string)?)?
        /// 	 | STRING  (PLUS  LOCAL_ID  (PLUS  execute_var_string)?)?
        /// </summary>
        public override AstRoot VisitExecute_var_string(TSqlParser.Execute_var_stringContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteVarString(context, list);
        }
        
        /// <summary>
        /// security_statement
        /// 	 : execute_clause  SEMI?
        /// 	 | GRANT  (ALL  PRIVILEGES? | grant_permission  (LR_BRACKET  column_name_list  RR_BRACKET)?)  (ON  (class_type_for_grant  DOUBLE_COLON)?  on_id = full_table_name)?  TO  to_principal_rincipal_ids  (WITH  GRANT  OPTION)?  (AS  as_principal = principal_id)?  SEMI?
        /// 	 | REVERT  (LR_BRACKET  WITH  COOKIE  EQUAL  LOCAL_ID  RR_BRACKET)?  SEMI?
        /// 	 | open_key
        /// 	 | close_key
        /// 	 | create_key
        /// 	 | create_certificate
        /// </summary>
        public override AstRoot VisitSecurity_statement(TSqlParser.Security_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSecurityStatement(context, list);
        }
        
        /// <summary>
        /// to_principal_rincipal_ids
        /// 	 : to_principal += principal_id  (COMMA  to_principal += principal_id)*
        /// </summary>
        public override AstRoot VisitTo_principal_rincipal_ids(TSqlParser.To_principal_rincipal_idsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstToPrincipalRincipalIds(context, list);
        }
        
        /// <summary>
        /// existing_keys
        /// 	 : ASSEMBLY  assembly_name
        /// 	 | EXECUTABLE?  FILE  EQUAL  path_to_file = STRING  (WITH  PRIVATE  KEY  LR_BRACKET  private_key_options  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitExisting_keys(TSqlParser.Existing_keysContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExistingKeys(context, list);
        }
        
        /// <summary>
        /// private_key_options
        /// 	 : (FILE | BINARY)  EQUAL  path = STRING  (COMMA  (DECRYPTION | ENCRYPTION)  BY  PASSWORD  EQUAL  password = STRING)?
        /// </summary>
        public override AstRoot VisitPrivate_key_options(TSqlParser.Private_key_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPrivateKeyOptions(context, list);
        }
        
        /// <summary>
        /// generate_new_keys
        /// 	 : (ENCRYPTION  BY  PASSWORD  EQUAL  password = STRING)?  WITH  SUBJECT  EQUAL  certificate_subject_name = STRING  (COMMA  date_options)*
        /// </summary>
        public override AstRoot VisitGenerate_new_keys(TSqlParser.Generate_new_keysContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGenerateNewKeys(context, list);
        }
        
        /// <summary>
        /// date_options
        /// 	 : (START_DATE | EXPIRY_DATE)  EQUAL  STRING
        /// </summary>
        public override AstRoot VisitDate_options(TSqlParser.Date_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDateOptions(context, list);
        }
        
        /// <summary>
        /// open_key
        /// 	 : OPEN  SYMMETRIC  KEY  symmetric_key_name  DECRYPTION  BY  decryption_mechanism
        /// 	 | OPEN  MASTER  KEY  DECRYPTION  BY  PASSWORD  EQUAL  password = STRING
        /// </summary>
        public override AstRoot VisitOpen_key(TSqlParser.Open_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOpenKey(context, list);
        }
        
        /// <summary>
        /// close_key
        /// 	 : CLOSE  SYMMETRIC  KEY  symmetric_key_name
        /// 	 | CLOSE  ALL  SYMMETRIC  KEYS
        /// 	 | CLOSE  MASTER  KEY
        /// </summary>
        public override AstRoot VisitClose_key(TSqlParser.Close_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCloseKey(context, list);
        }
        
        /// <summary>
        /// create_key
        /// 	 : CREATE  MASTER  KEY  ENCRYPTION  BY  PASSWORD  EQUAL  password = STRING
        /// 	 | CREATE  SYMMETRIC  KEY  symmetric_key_name  (AUTHORIZATION  user_name)?  (FROM  PROVIDER  provider_name)?  WITH  ((key_options | ENCRYPTION  BY  encryption_mechanism)  COMMA?)+
        /// </summary>
        public override AstRoot VisitCreate_key(TSqlParser.Create_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateKey(context, list);
        }
        
        /// <summary>
        /// key_options
        /// 	 : KEY_SOURCE  EQUAL  pass_phrase = STRING
        /// 	 | ALGORITHM  EQUAL  algorithm
        /// 	 | IDENTITY_VALUE  EQUAL  identity_phrase = STRING
        /// 	 | PROVIDER_KEY_NAME  EQUAL  key_name_in_provider = STRING
        /// 	 | CREATION_DISPOSITION  EQUAL  (CREATE_NEW | OPEN_EXISTING)
        /// </summary>
        public override AstRoot VisitKey_options(TSqlParser.Key_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstKeyOptions(context, list);
        }
        
        /// <summary>
        /// encryption_mechanism
        /// 	 : CERTIFICATE  certificate_name
        /// 	 | ASYMMETRIC  KEY  asym_key_name
        /// 	 | SYMMETRIC  KEY  symmetric_key_name
        /// 	 | PASSWORD  EQUAL  STRING
        /// </summary>
        public override AstRoot VisitEncryption_mechanism(TSqlParser.Encryption_mechanismContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEncryptionMechanism(context, list);
        }
        
        /// <summary>
        /// decryption_mechanism
        /// 	 : CERTIFICATE  certificate_name  (WITH  PASSWORD  EQUAL  STRING)?
        /// 	 | ASYMMETRIC  KEY  asym_key_name  (WITH  PASSWORD  EQUAL  STRING)?
        /// 	 | SYMMETRIC  KEY  symmetric_key_name
        /// 	 | PASSWORD  EQUAL  STRING
        /// </summary>
        public override AstRoot VisitDecryption_mechanism(TSqlParser.Decryption_mechanismContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDecryptionMechanism(context, list);
        }
        
        /// <summary>
        /// grant_permission
        /// 	 : ADMINISTER  (BULK  OPERATIONS | DATABASE  BULK  OPERATIONS)
        /// 	 | grant_permission_alter
        /// 	 | AUTHENTICATE  SERVER?
        /// 	 | BACKUP  (DATABASE | LOG)
        /// 	 | CHECKPOINT
        /// 	 | CONNECT  (ANY  DATABASE | REPLICATION | SQL)?
        /// 	 | CONTROL  SERVER?
        /// 	 | grant_permission_create
        /// 	 | DELETE
        /// 	 | EXECUTE  (ANY  EXTERNAL  SCRIPT)?
        /// 	 | EXTERNAL  ACCESS  ASSEMBLY
        /// 	 | IMPERSONATE  (ANY  LOGIN)?
        /// 	 | INSERT
        /// 	 | KILL  DATABASE  CONNECTION
        /// 	 | RECEIVE
        /// 	 | REFERENCES
        /// 	 | SELECT  (ALL  USER  SECURABLES)?
        /// 	 | SEND
        /// 	 | SHOWPLAN
        /// 	 | SHUTDOWN
        /// 	 | SUBSCRIBE  QUERY  NOTIFICATIONS
        /// 	 | TAKE  OWNERSHIP
        /// 	 | UNMASK
        /// 	 | UNSAFE  ASSEMBLY
        /// 	 | UPDATE
        /// 	 | VIEW  (ANY  (DATABASE | DEFINITION | COLUMN  (ENCRYPTION | MASTER)  KEY  DEFINITION) | CHANGE  TRACKING | DATABASE  STATE | DEFINITION | SERVER  STATE)
        /// </summary>
        public override AstRoot VisitGrant_permission(TSqlParser.Grant_permissionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGrantPermission(context, list);
        }
        
        /// <summary>
        /// set_statement
        /// 	 : SET  LOCAL_ID  (DOT  member_name = id_)?  EQUAL  expression  SEMI?
        /// 	 | SET  LOCAL_ID  assignment_operator  expression  SEMI?
        /// 	 | SET  LOCAL_ID  EQUAL  CURSOR  declare_set_cursor_common  (FOR  (READ  ONLY | UPDATE  (OF  column_name_list)?))?  SEMI?
        /// 	 | set_special
        /// </summary>
        public override AstRoot VisitSet_statement(TSqlParser.Set_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSetStatement(context, list);
        }
        
        /// <summary>
        /// transaction_statement
        /// 	 : BEGIN  DISTRIBUTED  (TRAN | TRANSACTION)  (id_ | LOCAL_ID)?  SEMI?
        /// 	 | BEGIN  (TRAN | TRANSACTION)  ((id_ | LOCAL_ID)  (WITH  MARK  STRING)?)?  SEMI?
        /// 	 | COMMIT  (TRAN | TRANSACTION)  ((id_ | LOCAL_ID)  (WITH  LR_BRACKET  DELAYED_DURABILITY  EQUAL  (OFF | ON)  RR_BRACKET)?)?  SEMI?
        /// 	 | COMMIT  WORK?  SEMI?
        /// 	 | COMMIT  id_
        /// 	 | ROLLBACK  id_
        /// 	 | ROLLBACK  (TRAN | TRANSACTION)  (id_ | LOCAL_ID)?  SEMI?
        /// 	 | ROLLBACK  WORK?  SEMI?
        /// 	 | SAVE  (TRAN | TRANSACTION)  (id_ | LOCAL_ID)?  SEMI?
        /// </summary>
        public override AstRoot VisitTransaction_statement(TSqlParser.Transaction_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTransactionStatement(context, list);
        }
        
        /// <summary>
        /// go_statement
        /// 	 : GO  (count = DECIMAL)?
        /// </summary>
        public override AstRoot VisitGo_statement(TSqlParser.Go_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGoStatement(context, list);
        }
        
        /// <summary>
        /// setuser_statement
        /// 	 : SETUSER  user = STRING
        /// </summary>
        public override AstRoot VisitSetuser_statement(TSqlParser.Setuser_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSetuserStatement(context, list);
        }
        
        /// <summary>
        /// reconfigure_statement
        /// 	 : RECONFIGURE  (WITH  OVERRIDE)?
        /// </summary>
        public override AstRoot VisitReconfigure_statement(TSqlParser.Reconfigure_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstReconfigureStatement(context, list);
        }
        
        /// <summary>
        /// shutdown_statement
        /// 	 : SHUTDOWN  (WITH  NOWAIT)?
        /// </summary>
        public override AstRoot VisitShutdown_statement(TSqlParser.Shutdown_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstShutdownStatement(context, list);
        }
        
        /// <summary>
        /// checkpoint_statement
        /// 	 : CHECKPOINT  (checkPointDuration = DECIMAL)?
        /// </summary>
        public override AstRoot VisitCheckpoint_statement(TSqlParser.Checkpoint_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCheckpointStatement(context, list);
        }
        
        /// <summary>
        /// dbcc_special
        /// 	 : DBCC  SHRINKLOG  (LR_BRACKET  SIZE  EQUAL  (constant_expression | id_ | DEFAULT)  RR_BRACKET)?  SEMI?
        /// </summary>
        public override AstRoot VisitDbcc_special(TSqlParser.Dbcc_specialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDbccSpecial(context, list);
        }
        
        /// <summary>
        /// dbcc_clause
        /// 	 : DBCC  name = dbcc_command  (LR_BRACKET  expression_list  RR_BRACKET)?  (WITH  dbcc_options)?  SEMI?
        /// </summary>
        public override AstRoot VisitDbcc_clause(TSqlParser.Dbcc_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDbccClause(context, list);
        }
        
        /// <summary>
        /// dbcc_command
        /// 	 : simple_id
        /// 	 | keyword
        /// </summary>
        public override AstRoot VisitDbcc_command(TSqlParser.Dbcc_commandContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDbccCommand(context, list);
        }
        
        /// <summary>
        /// execute_clause
        /// 	 : EXECUTE  AS  clause = (CALLER | SELF | OWNER | STRING)
        /// </summary>
        public override AstRoot VisitExecute_clause(TSqlParser.Execute_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteClause(context, list);
        }
        
        /// <summary>
        /// table_type_indices
        /// 	 : (((PRIMARY  KEY | INDEX  id_)  (CLUSTERED | NONCLUSTERED)?) | UNIQUE)  LR_BRACKET  column_name_list_with_order  RR_BRACKET
        /// 	 | CHECK  LR_BRACKET  search_condition  RR_BRACKET
        /// </summary>
        public override AstRoot VisitTable_type_indices(TSqlParser.Table_type_indicesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableTypeIndices(context, list);
        }
        
        /// <summary>
        /// xml_schema_collection
        /// 	 : ID  DOT  ID
        /// </summary>
        public override AstRoot VisitXml_schema_collection(TSqlParser.Xml_schema_collectionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstXmlSchemaCollection(context, list);
        }
        
        /// <summary>
        /// column_def_table_constraint
        /// 	 : column_definition
        /// 	 | materialized_column_definition
        /// 	 | table_constraint
        /// </summary>
        public override AstRoot VisitColumn_def_table_constraint(TSqlParser.Column_def_table_constraintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnDefTableConstraint(context, list);
        }
        
        /// <summary>
        /// column_definition_element
        /// 	 : FILESTREAM
        /// 	 | COLLATE  collation_name
        /// 	 | SPARSE
        /// 	 | MASKED  WITH  LR_BRACKET  FUNCTION  EQUAL  mask_function = STRING  RR_BRACKET
        /// 	 | (CONSTRAINT  constraint_name)?  DEFAULT  constant_expr = expression
        /// 	 | IDENTITY  (LR_BRACKET  seed = DECIMAL  COMMA  increment = DECIMAL  RR_BRACKET)?
        /// 	 | NOT  FOR  REPLICATION
        /// 	 | GENERATED  ALWAYS  AS  (ROW | TRANSACTION_ID | SEQUENCE_NUMBER)  (START | END)  HIDDEN_KEYWORD?
        /// 	 | ROWGUIDCOL
        /// 	 | ENCRYPTED  WITH  LR_BRACKET  COLUMN_ENCRYPTION_KEY  EQUAL  key_name = STRING  COMMA  ENCRYPTION_TYPE  EQUAL  (DETERMINISTIC | RANDOMIZED)  COMMA  ALGORITHM  EQUAL  algo = STRING  RR_BRACKET
        /// 	 | column_constraint
        /// </summary>
        public override AstRoot VisitColumn_definition_element(TSqlParser.Column_definition_elementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnDefinitionElement(context, list);
        }
        
        /// <summary>
        /// column_constraint
        /// 	 : (CONSTRAINT  constraint_name)?  (null_notnull | ((PRIMARY  KEY | UNIQUE)  clustered?  primary_key_options) | ((FOREIGN  KEY)?  foreign_key_options) | check_constraint)
        /// </summary>
        public override AstRoot VisitColumn_constraint(TSqlParser.Column_constraintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnConstraint(context, list);
        }
        
        /// <summary>
        /// on_partition_or_filegroup
        /// 	 : ON  ((partition_scheme_name  LR_BRACKET  partition_column_name  RR_BRACKET) | file_group_name | DEFAULT_DOUBLE_QUOTE)
        /// </summary>
        public override AstRoot VisitOn_partition_or_filegroup(TSqlParser.On_partition_or_filegroupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOnPartitionOrFilegroup(context, list);
        }
        
        /// <summary>
        /// table_constraint
        /// 	 : (CONSTRAINT  constraint_name)?  (((PRIMARY  KEY | UNIQUE)  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET  primary_key_options) | (FOREIGN  KEY  LR_BRACKET  fk = column_name_list  RR_BRACKET  foreign_key_options) | (CONNECTION  LR_BRACKET  connection_node  (COMMA  connection_node)*  RR_BRACKET) | (DEFAULT  LR_BRACKET?  ((STRING | PLUS | function_call | DECIMAL)+ | NEXT  VALUE  FOR  full_table_name)  RR_BRACKET?  FOR  id_) | check_constraint)
        /// </summary>
        public override AstRoot VisitTable_constraint(TSqlParser.Table_constraintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableConstraint(context, list);
        }
        
        /// <summary>
        /// connection_node
        /// 	 : from_node_table = id_  TO  to_node_table = id_
        /// </summary>
        public override AstRoot VisitConnection_node(TSqlParser.Connection_nodeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstConnectionNode(context, list);
        }
        
        /// <summary>
        /// on_delete
        /// 	 : ON  DELETE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)
        /// </summary>
        public override AstRoot VisitOn_delete(TSqlParser.On_deleteContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOnDelete(context, list);
        }
        
        /// <summary>
        /// on_update
        /// 	 : ON  UPDATE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)
        /// </summary>
        public override AstRoot VisitOn_update(TSqlParser.On_updateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOnUpdate(context, list);
        }
        
        /// <summary>
        /// alter_table_index_option
        /// 	 : PAD_INDEX  EQUAL  on_off
        /// 	 | FILLFACTOR  EQUAL  DECIMAL
        /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
        /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
        /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
        /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
        /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
        /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
        /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = DECIMAL
        /// 	 | DATA_COMPRESSION  EQUAL  (NONE | ROW | PAGE | COLUMNSTORE | COLUMNSTORE_ARCHIVE)  on_partitions?
        /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
        /// 	 | distribution
        /// 	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
        /// 	 | RESUMABLE  EQUAL  on_off
        /// 	 | MAX_DURATION  EQUAL  times = DECIMAL  MINUTES?
        /// </summary>
        public override AstRoot VisitAlter_table_index_option(TSqlParser.Alter_table_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterTableIndexOption(context, list);
        }
        
        /// <summary>
        /// declare_set_cursor_common_partial
        /// 	 : local_global
        /// 	 | (FORWARD_ONLY | SCROLL)
        /// 	 | (STATIC | KEYSET | DYNAMIC | FAST_FORWARD)
        /// 	 | (READ_ONLY | SCROLL_LOCKS | OPTIMISTIC)
        /// 	 | TYPE_WARNING
        /// </summary>
        public override AstRoot VisitDeclare_set_cursor_common_partial(TSqlParser.Declare_set_cursor_common_partialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeclareSetCursorCommonPartial(context, list);
        }
        
        /// <summary>
        /// local_ids
        /// 	 : LOCAL_ID  (COMMA  LOCAL_ID)*
        /// </summary>
        public override AstRoot VisitLocal_ids(TSqlParser.Local_idsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstLocalIds(context, list);
        }
        
        /// <summary>
        /// set_special
        /// 	 : SET  id_  (id_ | constant_LOCAL_ID | on_off)  SEMI?
        /// 	 | SET  STATISTICS  (IO | TIME | XML | PROFILE)  on_off  SEMI?
        /// 	 | SET  ROWCOUNT  (LOCAL_ID | DECIMAL)  SEMI?
        /// 	 | SET  TEXTSIZE  DECIMAL  SEMI?
        /// 	 | SET  TRANSACTION  ISOLATION  LEVEL  (READ  UNCOMMITTED | READ  COMMITTED | REPEATABLE  READ | SNAPSHOT | SERIALIZABLE | DECIMAL)  SEMI?
        /// 	 | SET  IDENTITY_INSERT  full_table_name  on_off  SEMI?
        /// 	 | SET  special_list  (COMMA  special_list)*  on_off
        /// 	 | SET  modify_method
        /// </summary>
        public override AstRoot VisitSet_special(TSqlParser.Set_specialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSetSpecial(context, list);
        }
        
        /// <summary>
        /// constant_LOCAL_ID
        /// 	 : constant
        /// 	 | LOCAL_ID
        /// </summary>
        public override AstRoot VisitConstant_LOCAL_ID(TSqlParser.Constant_LOCAL_IDContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstConstantLOCALID(context, list);
        }
        
        /// <summary>
        /// expression
        /// 	 : primitive_expression
        /// 	 | function_call
        /// 	 | expression  DOT  (value_call | query_call | exist_call | modify_call)
        /// 	 | expression  DOT  hierarchyid_call
        /// 	 | expression  COLLATE  id_
        /// 	 | case_expression
        /// 	 | full_column_name
        /// 	 | bracket_expression
        /// 	 | unary_operator_expression
        /// 	 | expression  op = (STAR | DIVIDE | MODULE)  expression
        /// 	 | expression  op = (PLUS | MINUS | BIT_AND | BIT_XOR | BIT_OR | DOUBLE_BAR)  expression
        /// 	 | expression  time_zone
        /// 	 | over_clause
        /// 	 | DOLLAR_ACTION
        /// </summary>
        public override AstRoot VisitExpression(TSqlParser.ExpressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExpression(context, list);
        }
        
        /// <summary>
        /// primitive_expression
        /// 	 : DEFAULT
        /// 	 | NULL_
        /// 	 | LOCAL_ID
        /// 	 | constant
        /// </summary>
        public override AstRoot VisitPrimitive_expression(TSqlParser.Primitive_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPrimitiveExpression(context, list);
        }
        
        /// <summary>
        /// case_expression
        /// 	 : CASE  caseExpr = expression  switch_section+  (ELSE  elseExpr = expression)?  END
        /// 	 | CASE  switch_search_condition_section+  (ELSE  elseExpr = expression)?  END
        /// </summary>
        public override AstRoot VisitCase_expression(TSqlParser.Case_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCaseExpression(context, list);
        }
        
        /// <summary>
        /// unary_operator_expression
        /// 	 : BIT_NOT  expression
        /// 	 | op = (PLUS | MINUS)  expression
        /// </summary>
        public override AstRoot VisitUnary_operator_expression(TSqlParser.Unary_operator_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUnaryOperatorExpression(context, list);
        }
        
        /// <summary>
        /// bracket_expression
        /// 	 : LR_BRACKET  expression  RR_BRACKET
        /// 	 | LR_BRACKET  subquery  RR_BRACKET
        /// </summary>
        public override AstRoot VisitBracket_expression(TSqlParser.Bracket_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBracketExpression(context, list);
        }
        
        /// <summary>
        /// constant_expression
        /// 	 : NULL_
        /// 	 | constant
        /// 	 | function_call
        /// 	 | LOCAL_ID
        /// 	 | LR_BRACKET  constant_expression  RR_BRACKET
        /// </summary>
        public override AstRoot VisitConstant_expression(TSqlParser.Constant_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstConstantExpression(context, list);
        }
        
        /// <summary>
        /// with_expression
        /// 	 : WITH  ctes += common_table_expression  (COMMA  ctes += common_table_expression)*
        /// </summary>
        public override AstRoot VisitWith_expression(TSqlParser.With_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWithExpression(context, list);
        }
        
        /// <summary>
        /// common_table_expression
        /// 	 : expression_name = id_  (LR_BRACKET  columns = column_name_list  RR_BRACKET)?  AS  LR_BRACKET  cte_query = select_statement  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCommon_table_expression(TSqlParser.Common_table_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCommonTableExpression(context, list);
        }
        
        /// <summary>
        /// update_elem
        /// 	 : LOCAL_ID  EQUAL  full_column_name  (EQUAL | assignment_operator)  expression
        /// 	 | (full_column_name | LOCAL_ID)  (EQUAL | assignment_operator)  expression
        /// 	 | udt_column_name  DOT  method_name  LR_BRACKET  expression_list  RR_BRACKET
        /// </summary>
        public override AstRoot VisitUpdate_elem(TSqlParser.Update_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdateElem(context, list);
        }
        
        /// <summary>
        /// update_elem_merge
        /// 	 : (full_column_name | LOCAL_ID)  (EQUAL | assignment_operator)  expression
        /// 	 | udt_column_name  DOT  method_name  LR_BRACKET  expression_list  RR_BRACKET
        /// </summary>
        public override AstRoot VisitUpdate_elem_merge(TSqlParser.Update_elem_mergeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdateElemMerge(context, list);
        }
        
        /// <summary>
        /// search_condition
        /// 	 : NOT*  (predicate | LR_BRACKET  search_condition  RR_BRACKET)
        /// 	 | search_condition  AND  search_condition
        /// 	 | search_condition  OR  search_condition
        /// </summary>
        public override AstRoot VisitSearch_condition(TSqlParser.Search_conditionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSearchCondition(context, list);
        }
        
        /// <summary>
        /// predicate
        /// 	 : EXISTS  LR_BRACKET  subquery  RR_BRACKET
        /// 	 | freetext_predicate
        /// 	 | expression  comparison_operator  expression
        /// 	 | expression  MULT_ASSIGN  expression
        /// 	 | expression  comparison_operator  (ALL | SOME | ANY)  LR_BRACKET  subquery  RR_BRACKET
        /// 	 | expression  NOT*  BETWEEN  expression  AND  expression
        /// 	 | expression  NOT*  IN  LR_BRACKET  (subquery | expression_list)  RR_BRACKET
        /// 	 | expression  NOT*  LIKE  expression  (ESCAPE  expression)?
        /// 	 | expression  IS  null_notnull
        /// </summary>
        public override AstRoot VisitPredicate(TSqlParser.PredicateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPredicate(context, list);
        }
        
        /// <summary>
        /// query_expression
        /// 	 : (query_specification | LR_BRACKET  query_expression  RR_BRACKET  (UNION  ALL?  query_expression)?)
        /// 	 | query_specification  select_order_by_clause?  unions += sql_union
        /// </summary>
        public override AstRoot VisitQuery_expression(TSqlParser.Query_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQueryExpression(context, list);
        }
        
        /// <summary>
        /// sql_union
        /// 	 : (UNION  ALL? | EXCEPT | INTERSECT)  (spec = query_specification | (LR_BRACKET  op = query_expression  RR_BRACKET))
        /// </summary>
        public override AstRoot VisitSql_union(TSqlParser.Sql_unionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSqlUnion(context, list);
        }
        
        /// <summary>
        /// query_specification
        /// 	 : SELECT  allOrDistinct = (ALL | DISTINCT)  top = top_clause  columns = select_list  (INTO  into = full_table_name)?  (FROM  from = table_sources)?  (WHERE  where = search_condition)?  (GROUP  BY  ((groupByAll = ALL  groupBys_list) | GROUPING  SETS  LR_BRACKET  groupSet_list  RR_BRACKET))?  (HAVING  having = search_condition)?
        /// </summary>
        public override AstRoot VisitQuery_specification(TSqlParser.Query_specificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQuerySpecification(context, list);
        }
        
        /// <summary>
        /// groupSet_list
        /// 	 : groupSets += grouping_sets_item  (COMMA  groupSets += grouping_sets_item)*
        /// </summary>
        public override AstRoot VisitGroupSet_list(TSqlParser.GroupSet_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGroupSetList(context, list);
        }
        
        /// <summary>
        /// groupBys_list
        /// 	 : groupBys += group_by_item  (COMMA  groupBys += group_by_item)*
        /// </summary>
        public override AstRoot VisitGroupBys_list(TSqlParser.GroupBys_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGroupBysList(context, list);
        }
        
        /// <summary>
        /// top_clause
        /// 	 : TOP  (top_percent | top_count)  (WITH  TIES)?
        /// </summary>
        public override AstRoot VisitTop_clause(TSqlParser.Top_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTopClause(context, list);
        }
        
        /// <summary>
        /// top_percent
        /// 	 : percent_constant = (REAL | FLOAT | DECIMAL)  PERCENT
        /// 	 | LR_BRACKET  topper_expression = expression  RR_BRACKET  PERCENT
        /// </summary>
        public override AstRoot VisitTop_percent(TSqlParser.Top_percentContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTopPercent(context, list);
        }
        
        /// <summary>
        /// top_count
        /// 	 : count_constant = DECIMAL
        /// 	 | LR_BRACKET  topcount_expression = expression  RR_BRACKET
        /// </summary>
        public override AstRoot VisitTop_count(TSqlParser.Top_countContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTopCount(context, list);
        }
        
        /// <summary>
        /// order_by_clause
        /// 	 : ORDER  BY  order_bys += order_by_expression  (COMMA  order_bys += order_by_expression)*
        /// </summary>
        public override AstRoot VisitOrder_by_clause(TSqlParser.Order_by_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOrderByClause(context, list);
        }
        
        /// <summary>
        /// for_clause
        /// 	 : FOR  BROWSE
        /// 	 | FOR  XML  (RAW  (LR_BRACKET  STRING  RR_BRACKET)? | AUTO)  xml_common_directives*  (COMMA  (XMLDATA | XMLSCHEMA  (LR_BRACKET  STRING  RR_BRACKET)?))?  (COMMA  ELEMENTS  (XSINIL | ABSENT)?)?
        /// 	 | FOR  XML  EXPLICIT  xml_common_directives*  (COMMA  XMLDATA)?
        /// 	 | FOR  XML  PATH  (LR_BRACKET  STRING  RR_BRACKET)?  xml_common_directives*  (COMMA  ELEMENTS  (XSINIL | ABSENT)?)?
        /// 	 | FOR  JSON  (AUTO | PATH)  (COMMA  (ROOT  (LR_BRACKET  STRING  RR_BRACKET) | INCLUDE_NULL_VALUES | WITHOUT_ARRAY_WRAPPER))*
        /// </summary>
        public override AstRoot VisitFor_clause(TSqlParser.For_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstForClause(context, list);
        }
        
        /// <summary>
        /// xml_common_directives
        /// 	 : COMMA  (BINARY_KEYWORD  BASE64 | TYPE | ROOT  (LR_BRACKET  STRING  RR_BRACKET)?)
        /// </summary>
        public override AstRoot VisitXml_common_directives(TSqlParser.Xml_common_directivesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstXmlCommonDirectives(context, list);
        }
        
        /// <summary>
        /// order_by_expression
        /// 	 : order_by = expression  (ascending = ASC | descending = DESC)?
        /// </summary>
        public override AstRoot VisitOrder_by_expression(TSqlParser.Order_by_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOrderByExpression(context, list);
        }
        
        /// <summary>
        /// grouping_sets_item
        /// 	 : grouping_sets_list
        /// 	 | LR_BRACKET  grouping_sets_list?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitGrouping_sets_item(TSqlParser.Grouping_sets_itemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGroupingSetsItem(context, list);
        }
        
        /// <summary>
        /// grouping_sets_list
        /// 	 : groupSetItems += group_by_item  (COMMA  groupSetItems += group_by_item)*
        /// </summary>
        public override AstRoot VisitGrouping_sets_list(TSqlParser.Grouping_sets_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGroupingSetsList(context, list);
        }
        
        /// <summary>
        /// option
        /// 	 : FAST  number_rows = DECIMAL
        /// 	 | (HASH | ORDER)  GROUP
        /// 	 | (MERGE | HASH | CONCAT)  UNION
        /// 	 | (LOOP | MERGE | HASH)  JOIN
        /// 	 | EXPAND  VIEWS
        /// 	 | FORCE  ORDER
        /// 	 | IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX
        /// 	 | KEEP  PLAN
        /// 	 | KEEPFIXED  PLAN
        /// 	 | MAXDOP  number_of_processors = DECIMAL
        /// 	 | MAXRECURSION  number_recursion = DECIMAL
        /// 	 | OPTIMIZE  FOR  LR_BRACKET  optimize_for_args  RR_BRACKET
        /// 	 | OPTIMIZE  FOR  UNKNOWN
        /// 	 | PARAMETERIZATION  (SIMPLE | FORCED)
        /// 	 | RECOMPILE
        /// 	 | ROBUST  PLAN
        /// 	 | USE  PLAN  STRING
        /// </summary>
        public override AstRoot VisitOption(TSqlParser.OptionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOption(context, list);
        }
        
        /// <summary>
        /// optimize_for_arg
        /// 	 : LOCAL_ID  (UNKNOWN | EQUAL  (constant | NULL_))
        /// </summary>
        public override AstRoot VisitOptimize_for_arg(TSqlParser.Optimize_for_argContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOptimizeForArg(context, list);
        }
        
        /// <summary>
        /// select_list
        /// 	 : selectElement += select_list_elem  (COMMA  selectElement += select_list_elem)*
        /// </summary>
        public override AstRoot VisitSelect_list(TSqlParser.Select_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSelectList(context, list);
        }
        
        /// <summary>
        /// udt_method_arguments
        /// 	 : LR_BRACKET  argument += execute_var_string  (COMMA  argument += execute_var_string)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitUdt_method_arguments(TSqlParser.Udt_method_argumentsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUdtMethodArguments(context, list);
        }
        
        /// <summary>
        /// updated_asterisk
        /// 	 : (INSERTED | DELETED)  DOT  STAR
        /// </summary>
        public override AstRoot VisitUpdated_asterisk(TSqlParser.Updated_asteriskContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdatedAsterisk(context, list);
        }
        
        /// <summary>
        /// column_elem_target
        /// 	 : full_column_name
        /// 	 | DOLLAR  IDENTITY
        /// 	 | DOLLAR  ROWGUID
        /// 	 | NULL_
        /// </summary>
        public override AstRoot VisitColumn_elem_target(TSqlParser.Column_elem_targetContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnElemTarget(context, list);
        }
        
        /// <summary>
        /// udt_elem
        /// 	 : udt_column_name  DOT  non_static_attr  udt_method_arguments  as_column_alias?
        /// 	 | udt_column_name  DOUBLE_COLON  static_attr  udt_method_arguments?  as_column_alias?
        /// </summary>
        public override AstRoot VisitUdt_elem(TSqlParser.Udt_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUdtElem(context, list);
        }
        
        /// <summary>
        /// expression_elem
        /// 	 : leftAlias = column_alias  eq = EQUAL  leftAssignment = expression
        /// 	 | expressionAs = expression  as_column_alias?
        /// </summary>
        public override AstRoot VisitExpression_elem(TSqlParser.Expression_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExpressionElem(context, list);
        }
        
        /// <summary>
        /// table_sources
        /// 	 : source += table_source  (COMMA  source += table_source)*
        /// </summary>
        public override AstRoot VisitTable_sources(TSqlParser.Table_sourcesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableSources(context, list);
        }
        
        /// <summary>
        /// table_source
        /// 	 : table_source_item_joined
        /// 	 | LR_BRACKET  table_source  RR_BRACKET
        /// </summary>
        public override AstRoot VisitTable_source(TSqlParser.Table_sourceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableSource(context, list);
        }
        
        /// <summary>
        /// table_source_item_joined
        /// 	 : table_source_item  joins += join_part
        /// 	 | LR_BRACKET  table_source_item_joined  RR_BRACKET  joins += join_part
        /// </summary>
        public override AstRoot VisitTable_source_item_joined(TSqlParser.Table_source_item_joinedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableSourceItemJoined(context, list);
        }
        
        /// <summary>
        /// table_source_item
        /// 	 : complete_table_name  deprecated_table_hint  as_table_alias
        /// 	 | complete_table_name  as_table_alias?  (with_table_hints | deprecated_table_hint | sybase_legacy_hints)?
        /// 	 | rowset_function  as_table_alias?
        /// 	 | LR_BRACKET  derived_table  RR_BRACKET  (as_table_alias  column_alias_list?)?
        /// 	 | change_table  as_table_alias?
        /// 	 | nodes_method  (as_table_alias  column_alias_list?)?
        /// 	 | function_call  (as_table_alias  column_alias_list?)?
        /// 	 | loc_id = LOCAL_ID  as_table_alias?
        /// 	 | loc_id_call = LOCAL_ID  DOT  loc_fcall = function_call  (as_table_alias  column_alias_list?)?
        /// 	 | open_xml
        /// 	 | open_json
        /// 	 | DOUBLE_COLON  oldstyle_fcall = function_call  as_table_alias?
        /// </summary>
        public override AstRoot VisitTable_source_item(TSqlParser.Table_source_itemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableSourceItem(context, list);
        }
        
        /// <summary>
        /// json_declaration
        /// 	 : json_col += json_column_declaration  (COMMA  json_col += json_column_declaration)*
        /// </summary>
        public override AstRoot VisitJson_declaration(TSqlParser.Json_declarationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstJsonDeclaration(context, list);
        }
        
        /// <summary>
        /// schema_declaration
        /// 	 : xml_col += column_declaration  (COMMA  xml_col += column_declaration)*
        /// </summary>
        public override AstRoot VisitSchema_declaration(TSqlParser.Schema_declarationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSchemaDeclaration(context, list);
        }
        
        /// <summary>
        /// change_table_changes
        /// 	 : CHANGETABLE  LR_BRACKET  CHANGES  changetable = full_table_name  COMMA  (NULL_ | decimal_local_id)  RR_BRACKET
        /// </summary>
        public override AstRoot VisitChange_table_changes(TSqlParser.Change_table_changesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstChangeTableChanges(context, list);
        }
        
        /// <summary>
        /// change_table_version
        /// 	 : CHANGETABLE  LR_BRACKET  VERSION  versiontable = full_table_name  COMMA  pk_columns = full_column_name_list  COMMA  pk_values = select_list  RR_BRACKET
        /// </summary>
        public override AstRoot VisitChange_table_version(TSqlParser.Change_table_versionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstChangeTableVersion(context, list);
        }
        
        /// <summary>
        /// join_on
        /// 	 : (inner = INNER | join_type = (LEFT | RIGHT | FULL)  outer = OUTER)  (join_hint = (LOOP | HASH | MERGE | REMOTE))?  JOIN  source = table_source  ON  cond = search_condition
        /// </summary>
        public override AstRoot VisitJoin_on(TSqlParser.Join_onContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstJoinOn(context, list);
        }
        
        /// <summary>
        /// apply_
        /// 	 : apply_style = (CROSS | OUTER)  APPLY  source = table_source
        /// </summary>
        public override AstRoot VisitApply_(TSqlParser.Apply_Context context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstApply(context, list);
        }
        
        /// <summary>
        /// full_column_name_list
        /// 	 : column += full_column_name  (COMMA  column += full_column_name)*
        /// </summary>
        public override AstRoot VisitFull_column_name_list(TSqlParser.Full_column_name_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFullColumnNameList(context, list);
        }
        
        /// <summary>
        /// rowset_function
        /// 	 : (OPENROWSET  LR_BRACKET  providerName = STRING  COMMA  connectionString = STRING  COMMA  sql = STRING  RR_BRACKET)
        /// 	 | (OPENROWSET  LR_BRACKET  BULK  data_file = STRING  COMMA  (bulk_options | id_)  RR_BRACKET)
        /// </summary>
        public override AstRoot VisitRowset_function(TSqlParser.Rowset_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRowsetFunction(context, list);
        }
        
        /// <summary>
        /// derived_table
        /// 	 : subquery
        /// 	 | LR_BRACKET  subquery  (UNION  ALL  subquery)*  RR_BRACKET
        /// 	 | table_value_constructor
        /// 	 | LR_BRACKET  table_value_constructor  RR_BRACKET
        /// </summary>
        public override AstRoot VisitDerived_table(TSqlParser.Derived_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDerivedTable(context, list);
        }
        
        /// <summary>
        /// function_call
        /// 	 : RANKING_WINDOWED_FUNCranking_windowed_function
        /// 	 | AGGREGATE_WINDOWED_FUNCaggregate_windowed_function
        /// 	 | ANALYTIC_WINDOWED_FUNCanalytic_windowed_function
        /// 	 | BUILT_IN_FUNCbuilt_in_functions
        /// 	 | SCALAR_FUNCTIONscalar_function_name  LR_BRACKET  expression_list?  RR_BRACKET
        /// 	 | FREE_TEXTfreetext_function
        /// 	 | PARTITION_FUNCpartition_function
        /// 	 | HIERARCHYID_METHODhierarchyid_static_method
        /// </summary>
        public override AstRoot VisitFunction_call(TSqlParser.Function_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFunctionCall(context, list);
        }
        
        /// <summary>
        /// freetext_function
        /// 	 : (CONTAINSTABLE | FREETEXTTABLE)  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  (COMMA  expression)?  RR_BRACKET
        /// 	 | (SEMANTICSIMILARITYTABLE | SEMANTICKEYPHRASETABLE)  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression  RR_BRACKET
        /// 	 | SEMANTICSIMILARITYDETAILSTABLE  LR_BRACKET  full_table_name  COMMA  full_column_name  COMMA  expression  COMMA  full_column_name  COMMA  expression  RR_BRACKET
        /// </summary>
        public override AstRoot VisitFreetext_function(TSqlParser.Freetext_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFreetextFunction(context, list);
        }
        
        /// <summary>
        /// freetext_predicate
        /// 	 : CONTAINS  LR_BRACKET  (full_column_name | full_column_names | STAR | PROPERTY  LR_BRACKET  full_column_name  COMMA  expression  RR_BRACKET)  COMMA  expression  RR_BRACKET
        /// 	 | FREETEXT  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  RR_BRACKET
        /// </summary>
        public override AstRoot VisitFreetext_predicate(TSqlParser.Freetext_predicateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFreetextPredicate(context, list);
        }
        
        /// <summary>
        /// built_in_functions
        /// 	 : APP_NAMEAPP_NAME  LR_BRACKET  RR_BRACKET
        /// 	 | APPLOCK_MODEAPPLOCK_MODE  LR_BRACKET  database_principal = expression  COMMA  resource_name = expression  COMMA  lock_owner = expression  RR_BRACKET
        /// 	 | APPLOCK_TESTAPPLOCK_TEST  LR_BRACKET  database_principal = expression  COMMA  resource_name = expression  COMMA  lock_mode = expression  COMMA  lock_owner = expression  RR_BRACKET
        /// 	 | ASSEMBLYPROPERTYASSEMBLYPROPERTY  LR_BRACKET  assemblyName = expression  COMMA  propertyName = expression  RR_BRACKET
        /// 	 | COL_LENGTHCOL_LENGTH  LR_BRACKET  table = expression  COMMA  column = expression  RR_BRACKET
        /// 	 | COL_NAMECOL_NAME  LR_BRACKET  table_id = expression  COMMA  column_id = expression  RR_BRACKET
        /// 	 | COLUMNPROPERTYCOLUMNPROPERTY  LR_BRACKET  id = expression  COMMA  column = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | DATABASEPROPERTYEXDATABASEPROPERTYEX  LR_BRACKET  database = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | DB_IDDB_ID  LR_BRACKET  databaseName = expression  RR_BRACKET
        /// 	 | DB_NAMEDB_NAME  LR_BRACKET  database_id = expression  RR_BRACKET
        /// 	 | FILE_IDFILE_ID  LR_BRACKET  file_name = expression  RR_BRACKET
        /// 	 | FILE_IDEXFILE_IDEX  LR_BRACKET  file_name = expression  RR_BRACKET
        /// 	 | FILE_NAMEFILE_NAME  LR_BRACKET  file_id = expression  RR_BRACKET
        /// 	 | FILEGROUP_IDFILEGROUP_ID  LR_BRACKET  filegroup_name = expression  RR_BRACKET
        /// 	 | FILEGROUP_NAMEFILEGROUP_NAME  LR_BRACKET  filegroup_id = expression  RR_BRACKET
        /// 	 | FILEGROUPPROPERTYFILEGROUPPROPERTY  LR_BRACKET  filegroup_name = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | FILEPROPERTYFILEPROPERTY  LR_BRACKET  file_name = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | FILEPROPERTYEXFILEPROPERTYEX  LR_BRACKET  name = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | FULLTEXTCATALOGPROPERTYFULLTEXTCATALOGPROPERTY  LR_BRACKET  catalogName = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | FULLTEXTSERVICEPROPERTYFULLTEXTSERVICEPROPERTY  LR_BRACKET  property = expression  RR_BRACKET
        /// 	 | INDEX_COLINDEX_COL  LR_BRACKET  tableOrViewName = expression  COMMA  index_id = expression  COMMA  key_id = expression  RR_BRACKET
        /// 	 | INDEXKEY_PROPERTYINDEXKEY_PROPERTY  LR_BRACKET  object_id = expression  COMMA  index_id = expression  COMMA  key_id = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | INDEXPROPERTYINDEXPROPERTY  LR_BRACKET  object_id = expression  COMMA  index_or_statistics_name = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | NEXT_VALUE_FORNEXT  VALUE  FOR  sequenceName = full_table_name  (OVER  LR_BRACKET  order_by_clause  RR_BRACKET)?
        /// 	 | OBJECT_DEFINITIONOBJECT_DEFINITION  LR_BRACKET  object_id = expression  RR_BRACKET
        /// 	 | OBJECT_IDOBJECT_ID  LR_BRACKET  objectName = expression  (COMMA  object_type = expression)?  RR_BRACKET
        /// 	 | OBJECT_NAMEOBJECT_NAME  LR_BRACKET  object_id = expression  (COMMA  database_id = expression)?  RR_BRACKET
        /// 	 | OBJECT_SCHEMA_NAMEOBJECT_SCHEMA_NAME  LR_BRACKET  object_id = expression  (COMMA  database_id = expression)?  RR_BRACKET
        /// 	 | OBJECTPROPERTYOBJECTPROPERTY  LR_BRACKET  id = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | OBJECTPROPERTYEXOBJECTPROPERTYEX  LR_BRACKET  id = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | ORIGINAL_DB_NAMEORIGINAL_DB_NAME  LR_BRACKET  RR_BRACKET
        /// 	 | PARSENAMEPARSENAME  LR_BRACKET  objectName = expression  COMMA  object_piece = expression  RR_BRACKET
        /// 	 | SCHEMA_IDSCHEMA_ID  LR_BRACKET  schemaName = expression  RR_BRACKET
        /// 	 | SCHEMA_NAMESCHEMA_NAME  LR_BRACKET  schemaId = expression  RR_BRACKET
        /// 	 | SCOPE_IDENTITYSCOPE_IDENTITY  LR_BRACKET  RR_BRACKET
        /// 	 | SERVERPROPERTYSERVERPROPERTY  LR_BRACKET  property = expression  RR_BRACKET
        /// 	 | STATS_DATESTATS_DATE  LR_BRACKET  object_id = expression  COMMA  stats_id = expression  RR_BRACKET
        /// 	 | TYPE_IDTYPE_ID  LR_BRACKET  type_name = expression  RR_BRACKET
        /// 	 | TYPE_NAMETYPE_NAME  LR_BRACKET  type_id = expression  RR_BRACKET
        /// 	 | TYPEPROPERTYTYPEPROPERTY  LR_BRACKET  type = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | ASCIIASCII  LR_BRACKET  character_expression = expression  RR_BRACKET
        /// 	 | CHARCHAR  LR_BRACKET  integer_expression = expression  RR_BRACKET
        /// 	 | CHARINDEXCHARINDEX  LR_BRACKET  expressionToFind = expression  COMMA  expressionToSearch = expression  (COMMA  start_location = expression)?  RR_BRACKET
        /// 	 | CONCATCONCAT  LR_BRACKET  string_value_1 = expression  COMMA  string_value_2 = expression  (COMMA  string_value_n += expression)*  RR_BRACKET
        /// 	 | CONCAT_WSCONCAT_WS  LR_BRACKET  separator = expression  COMMA  argument_1 = expression  COMMA  argument_2 = expression  (COMMA  argument_n += expression)*  RR_BRACKET
        /// 	 | DIFFERENCEDIFFERENCE  LR_BRACKET  character_expression_1 = expression  COMMA  character_expression_2 = expression  RR_BRACKET
        /// 	 | FORMATFORMAT  LR_BRACKET  value = expression  COMMA  format = expression  (COMMA  culture = expression)?  RR_BRACKET
        /// 	 | LEFTLEFT  LR_BRACKET  character_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
        /// 	 | LENLEN  LR_BRACKET  string_expression = expression  RR_BRACKET
        /// 	 | LOWERLOWER  LR_BRACKET  character_expression = expression  RR_BRACKET
        /// 	 | LTRIMLTRIM  LR_BRACKET  character_expression = expression  RR_BRACKET
        /// 	 | NCHARNCHAR  LR_BRACKET  integer_expression = expression  RR_BRACKET
        /// 	 | PATINDEXPATINDEX  LR_BRACKET  pattern = expression  COMMA  string_expression = expression  RR_BRACKET
        /// 	 | QUOTENAMEQUOTENAME  LR_BRACKET  character_string = expression  (COMMA  quote_character = expression)?  RR_BRACKET
        /// 	 | REPLACEREPLACE  LR_BRACKET  input = expression  COMMA  replacing = expression  COMMA  with = expression  RR_BRACKET
        /// 	 | REPLICATEREPLICATE  LR_BRACKET  string_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
        /// 	 | REVERSEREVERSE  LR_BRACKET  string_expression = expression  RR_BRACKET
        /// 	 | RIGHTRIGHT  LR_BRACKET  character_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
        /// 	 | RTRIMRTRIM  LR_BRACKET  character_expression = expression  RR_BRACKET
        /// 	 | SOUNDEXSOUNDEX  LR_BRACKET  character_expression = expression  RR_BRACKET
        /// 	 | SPACESPACE_KEYWORD  LR_BRACKET  integer_expression = expression  RR_BRACKET
        /// 	 | STRSTR  LR_BRACKET  float_expression = expression  (COMMA  length_expression = expression  (COMMA  decimal = expression)?)?  RR_BRACKET
        /// 	 | STRINGAGGSTRING_AGG  LR_BRACKET  expr = expression  COMMA  separator = expression  RR_BRACKET  (WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET)?
        /// 	 | STRING_ESCAPESTRING_ESCAPE  LR_BRACKET  text_ = expression  COMMA  type_ = expression  RR_BRACKET
        /// 	 | STUFFSTUFF  LR_BRACKET  str = expression  COMMA  from = DECIMAL  COMMA  to = DECIMAL  COMMA  str_with = expression  RR_BRACKET
        /// 	 | SUBSTRINGSUBSTRING  LR_BRACKET  string_expression = expression  COMMA  start_ = expression  COMMA  length = expression  RR_BRACKET
        /// 	 | TRANSLATETRANSLATE  LR_BRACKET  inputString = expression  COMMA  characters = expression  COMMA  translations = expression  RR_BRACKET
        /// 	 | TRIMTRIM  LR_BRACKET  (characters = expression  FROM)?  string_ = expression  RR_BRACKET
        /// 	 | UNICODEUNICODE  LR_BRACKET  ncharacter_expression = expression  RR_BRACKET
        /// 	 | UPPERUPPER  LR_BRACKET  character_expression = expression  RR_BRACKET
        /// 	 | BINARY_CHECKSUMBINARY_CHECKSUM  LR_BRACKET  (star = STAR | expressions)  RR_BRACKET
        /// 	 | CHECKSUMCHECKSUM  LR_BRACKET  (star = STAR | expressions)  RR_BRACKET
        /// 	 | COMPRESSCOMPRESS  LR_BRACKET  expr = expression  RR_BRACKET
        /// 	 | CONNECTIONPROPERTYCONNECTIONPROPERTY  LR_BRACKET  property = STRING  RR_BRACKET
        /// 	 | CONTEXT_INFOCONTEXT_INFO  LR_BRACKET  RR_BRACKET
        /// 	 | CURRENT_REQUEST_IDCURRENT_REQUEST_ID  LR_BRACKET  RR_BRACKET
        /// 	 | CURRENT_TRANSACTION_IDCURRENT_TRANSACTION_ID  LR_BRACKET  RR_BRACKET
        /// 	 | DECOMPRESSDECOMPRESS  LR_BRACKET  expr = expression  RR_BRACKET
        /// 	 | ERROR_LINEERROR_LINE  LR_BRACKET  RR_BRACKET
        /// 	 | ERROR_MESSAGEERROR_MESSAGE  LR_BRACKET  RR_BRACKET
        /// 	 | ERROR_NUMBERERROR_NUMBER  LR_BRACKET  RR_BRACKET
        /// 	 | ERROR_PROCEDUREERROR_PROCEDURE  LR_BRACKET  RR_BRACKET
        /// 	 | ERROR_SEVERITYERROR_SEVERITY  LR_BRACKET  RR_BRACKET
        /// 	 | ERROR_STATEERROR_STATE  LR_BRACKET  RR_BRACKET
        /// 	 | FORMATMESSAGEFORMATMESSAGE  LR_BRACKET  (msg_number = DECIMAL | msg_string = STRING | msg_variable = LOCAL_ID)  COMMA  expressions  RR_BRACKET
        /// 	 | GET_FILESTREAM_TRANSACTION_CONTEXTGET_FILESTREAM_TRANSACTION_CONTEXT  LR_BRACKET  RR_BRACKET
        /// 	 | GETANSINULLGETANSINULL  LR_BRACKET  (database = STRING)?  RR_BRACKET
        /// 	 | HOST_IDHOST_ID  LR_BRACKET  RR_BRACKET
        /// 	 | HOST_NAMEHOST_NAME  LR_BRACKET  RR_BRACKET
        /// 	 | ISNULLISNULL  LR_BRACKET  left = expression  COMMA  right = expression  RR_BRACKET
        /// 	 | ISNUMERICISNUMERIC  LR_BRACKET  expression  RR_BRACKET
        /// 	 | MIN_ACTIVE_ROWVERSIONMIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET
        /// 	 | NEWIDNEWID  LR_BRACKET  RR_BRACKET
        /// 	 | NEWSEQUENTIALIDNEWSEQUENTIALID  LR_BRACKET  RR_BRACKET
        /// 	 | ROWCOUNT_BIGROWCOUNT_BIG  LR_BRACKET  RR_BRACKET
        /// 	 | SESSION_CONTEXTSESSION_CONTEXT  LR_BRACKET  key = STRING  RR_BRACKET
        /// 	 | XACT_STATEXACT_STATE  LR_BRACKET  RR_BRACKET
        /// 	 | CASTCAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET
        /// 	 | TRY_CASTTRY_CAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET
        /// 	 | CONVERTCONVERT  LR_BRACKET  convert_data_type = data_type  COMMA  expression2  RR_BRACKET
        /// 	 | COALESCECOALESCE  LR_BRACKET  expression_list  RR_BRACKET
        /// 	 | CURRENT_DATECURRENT_DATE  LR_BRACKET  RR_BRACKET
        /// 	 | CURRENT_TIMESTAMPCURRENT_TIMESTAMP
        /// 	 | CURRENT_USERCURRENT_USER
        /// 	 | DATEADDDATEADD  LR_BRACKET  datepart = ID  COMMA  number = expression  COMMA  date = expression  RR_BRACKET
        /// 	 | DATEDIFFDATEDIFF  LR_BRACKET  datepart = ID  COMMA  date_first = expression  COMMA  date_second = expression  RR_BRACKET
        /// 	 | DATENAMEDATENAME  LR_BRACKET  datepart = ID  COMMA  date = expression  RR_BRACKET
        /// 	 | DATEPARTDATEPART  LR_BRACKET  datepart = ID  COMMA  date = expression  RR_BRACKET
        /// 	 | GETDATEGETDATE  LR_BRACKET  RR_BRACKET
        /// 	 | GETUTCDATEGETUTCDATE  LR_BRACKET  RR_BRACKET
        /// 	 | IDENTITYIDENTITY  LR_BRACKET  data_type  (COMMA  seed = DECIMAL)?  (COMMA  increment = DECIMAL)?  RR_BRACKET
        /// 	 | MIN_ACTIVE_ROWVERSIONMIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET
        /// 	 | NULLIFNULLIF  LR_BRACKET  left = expression  COMMA  right = expression  RR_BRACKET
        /// 	 | SESSION_USERSESSION_USER
        /// 	 | SYSTEM_USERSYSTEM_USER
        /// 	 | USERUSER
        /// 	 | PARSEPARSE  LR_BRACKET  str = expression  AS  data_type  (USING  culture = expression)?  RR_BRACKET
        /// 	 | XML_DATA_TYPE_FUNCxml_data_type_methods
        /// 	 | IIFIIF  LR_BRACKET  cond = search_condition  COMMA  left = expression  COMMA  right = expression  RR_BRACKET
        /// </summary>
        public override AstRoot VisitBuilt_in_functions(TSqlParser.Built_in_functionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBuiltInFunctions(context, list);
        }
        
        /// <summary>
        /// value_method
        /// 	 : (loc_id = LOCAL_ID | value_id = full_column_name | eventdata = EVENTDATA  LR_BRACKET  RR_BRACKET | query = query_method | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = value_call
        /// </summary>
        public override AstRoot VisitValue_method(TSqlParser.Value_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstValueMethod(context, list);
        }
        
        /// <summary>
        /// value_call
        /// 	 : VALUE  LR_BRACKET  xquery = STRING  COMMA  sqltype = STRING  RR_BRACKET
        /// </summary>
        public override AstRoot VisitValue_call(TSqlParser.Value_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstValueCall(context, list);
        }
        
        /// <summary>
        /// query_method
        /// 	 : (loc_id = LOCAL_ID | value_id = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = query_call
        /// </summary>
        public override AstRoot VisitQuery_method(TSqlParser.Query_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQueryMethod(context, list);
        }
        
        /// <summary>
        /// query_call
        /// 	 : QUERY  LR_BRACKET  xquery = STRING  RR_BRACKET
        /// </summary>
        public override AstRoot VisitQuery_call(TSqlParser.Query_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQueryCall(context, list);
        }
        
        /// <summary>
        /// exist_method
        /// 	 : (loc_id = LOCAL_ID | value_id = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = exist_call
        /// </summary>
        public override AstRoot VisitExist_method(TSqlParser.Exist_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExistMethod(context, list);
        }
        
        /// <summary>
        /// exist_call
        /// 	 : EXIST  LR_BRACKET  xquery = STRING  RR_BRACKET
        /// </summary>
        public override AstRoot VisitExist_call(TSqlParser.Exist_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExistCall(context, list);
        }
        
        /// <summary>
        /// modify_method
        /// 	 : (loc_id = LOCAL_ID | value_id = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = modify_call
        /// </summary>
        public override AstRoot VisitModify_method(TSqlParser.Modify_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstModifyMethod(context, list);
        }
        
        /// <summary>
        /// modify_call
        /// 	 : MODIFY  LR_BRACKET  xml_dml = STRING  RR_BRACKET
        /// </summary>
        public override AstRoot VisitModify_call(TSqlParser.Modify_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstModifyCall(context, list);
        }
        
        /// <summary>
        /// hierarchyid_call
        /// 	 : GETANCESTOR  LR_BRACKET  n = expression  RR_BRACKET
        /// 	 | GETDESCENDANT  LR_BRACKET  child1 = expression  COMMA  child2 = expression  RR_BRACKET
        /// 	 | GETLEVEL  LR_BRACKET  RR_BRACKET
        /// 	 | ISDESCENDANTOF  LR_BRACKET  parent_ = expression  RR_BRACKET
        /// 	 | GETREPARENTEDVALUE  LR_BRACKET  oldroot = expression  COMMA  newroot = expression  RR_BRACKET
        /// 	 | TOSTRING  LR_BRACKET  RR_BRACKET
        /// </summary>
        public override AstRoot VisitHierarchyid_call(TSqlParser.Hierarchyid_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstHierarchyidCall(context, list);
        }
        
        /// <summary>
        /// hierarchyid_static_method
        /// 	 : HIERARCHYID  DOUBLE_COLON  (GETROOT  LR_BRACKET  RR_BRACKET | PARSE  LR_BRACKET  input = expression  RR_BRACKET)
        /// </summary>
        public override AstRoot VisitHierarchyid_static_method(TSqlParser.Hierarchyid_static_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstHierarchyidStaticMethod(context, list);
        }
        
        /// <summary>
        /// nodes_method
        /// 	 : (loc_id = LOCAL_ID | value_id = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  NODES  LR_BRACKET  xquery = STRING  RR_BRACKET
        /// </summary>
        public override AstRoot VisitNodes_method(TSqlParser.Nodes_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstNodesMethod(context, list);
        }
        
        /// <summary>
        /// with_table_hints
        /// 	 : WITH  LR_BRACKET  hint += table_hint  (COMMA?  hint += table_hint)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitWith_table_hints(TSqlParser.With_table_hintsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWithTableHints(context, list);
        }
        
        /// <summary>
        /// table_hint
        /// 	 : NOEXPAND
        /// 	 | INDEX  (LR_BRACKET  index_values  RR_BRACKET | EQUAL  LR_BRACKET  index_value  RR_BRACKET | EQUAL  index_value)
        /// 	 | FORCESEEK  (LR_BRACKET  index_value  LR_BRACKET  column_name_list  RR_BRACKET  RR_BRACKET)?
        /// 	 | FORCESCAN
        /// 	 | HOLDLOCK
        /// 	 | NOLOCK
        /// 	 | NOWAIT
        /// 	 | PAGLOCK
        /// 	 | READCOMMITTED
        /// 	 | READCOMMITTEDLOCK
        /// 	 | READPAST
        /// 	 | READUNCOMMITTED
        /// 	 | REPEATABLEREAD
        /// 	 | ROWLOCK
        /// 	 | SERIALIZABLE
        /// 	 | SNAPSHOT
        /// 	 | SPATIAL_WINDOW_MAX_CELLS  EQUAL  DECIMAL
        /// 	 | TABLOCK
        /// 	 | TABLOCKX
        /// 	 | UPDLOCK
        /// 	 | XLOCK
        /// 	 | KEEPIDENTITY
        /// 	 | KEEPDEFAULTS
        /// 	 | IGNORE_CONSTRAINTS
        /// 	 | IGNORE_TRIGGERS
        /// </summary>
        public override AstRoot VisitTable_hint(TSqlParser.Table_hintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableHint(context, list);
        }
        
        /// <summary>
        /// index_value
        /// 	 : id_
        /// 	 | DECIMAL
        /// </summary>
        public override AstRoot VisitIndex_value(TSqlParser.Index_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstIndexValue(context, list);
        }
        
        /// <summary>
        /// column_alias_list
        /// 	 : LR_BRACKET  alias += column_alias  (COMMA  alias += column_alias)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitColumn_alias_list(TSqlParser.Column_alias_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnAliasList(context, list);
        }
        
        /// <summary>
        /// table_value_constructor
        /// 	 : VALUES  LR_BRACKET  exps += expression_list  RR_BRACKET  (COMMA  LR_BRACKET  exps += expression_list  RR_BRACKET)*
        /// </summary>
        public override AstRoot VisitTable_value_constructor(TSqlParser.Table_value_constructorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableValueConstructor(context, list);
        }
        
        /// <summary>
        /// expression_list
        /// 	 : exp += expression  (COMMA  exp += expression)*
        /// </summary>
        public override AstRoot VisitExpression_list(TSqlParser.Expression_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExpressionList(context, list);
        }
        
        /// <summary>
        /// ranking_windowed_function
        /// 	 : (RANK | DENSE_RANK | ROW_NUMBER)  LR_BRACKET  RR_BRACKET  over_clause
        /// 	 | NTILE  LR_BRACKET  expression  RR_BRACKET  over_clause
        /// </summary>
        public override AstRoot VisitRanking_windowed_function(TSqlParser.Ranking_windowed_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRankingWindowedFunction(context, list);
        }
        
        /// <summary>
        /// aggregate_windowed_function
        /// 	 : agg_func = (AVG | MAX | MIN | SUM | STDEV | STDEVP | VAR | VARP)  LR_BRACKET  all_distinct_expression  RR_BRACKET  over_clause?
        /// 	 | cnt = (COUNT | COUNT_BIG)  LR_BRACKET  (STAR | all_distinct_expression)  RR_BRACKET  over_clause?
        /// 	 | CHECKSUM_AGG  LR_BRACKET  all_distinct_expression  RR_BRACKET
        /// 	 | GROUPING  LR_BRACKET  expression  RR_BRACKET
        /// 	 | GROUPING_ID  LR_BRACKET  expression_list  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAggregate_windowed_function(TSqlParser.Aggregate_windowed_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAggregateWindowedFunction(context, list);
        }
        
        /// <summary>
        /// analytic_windowed_function
        /// 	 : (FIRST_VALUE | LAST_VALUE)  LR_BRACKET  expression  RR_BRACKET  over_clause
        /// 	 | (LAG | LEAD)  LR_BRACKET  expression  (COMMA  expression2)?  RR_BRACKET  over_clause
        /// 	 | (CUME_DIST | PERCENT_RANK)  LR_BRACKET  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  order_by_clause  RR_BRACKET
        /// 	 | (PERCENTILE_CONT | PERCENTILE_DISC)  LR_BRACKET  expression  RR_BRACKET  WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAnalytic_windowed_function(TSqlParser.Analytic_windowed_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAnalyticWindowedFunction(context, list);
        }
        
        /// <summary>
        /// window_frame_extent
        /// 	 : window_frame_preceding
        /// 	 | BETWEEN  window_frame_bound  AND  window_frame_bound
        /// </summary>
        public override AstRoot VisitWindow_frame_extent(TSqlParser.Window_frame_extentContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWindowFrameExtent(context, list);
        }
        
        /// <summary>
        /// window_frame_preceding
        /// 	 : UNBOUNDED  PRECEDING
        /// 	 | DECIMAL  PRECEDING
        /// 	 | CURRENT  ROW
        /// </summary>
        public override AstRoot VisitWindow_frame_preceding(TSqlParser.Window_frame_precedingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWindowFramePreceding(context, list);
        }
        
        /// <summary>
        /// window_frame_following
        /// 	 : UNBOUNDED  FOLLOWING
        /// 	 | DECIMAL  FOLLOWING
        /// </summary>
        public override AstRoot VisitWindow_frame_following(TSqlParser.Window_frame_followingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWindowFrameFollowing(context, list);
        }
        
        /// <summary>
        /// create_database_option
        /// 	 : FILESTREAM  database_filestream_options
        /// 	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
        /// 	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
        /// 	 | NESTED_TRIGGERS  EQUAL  on_off
        /// 	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
        /// 	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  DECIMAL
        /// 	 | DB_CHAINING  on_off
        /// 	 | TRUSTWORTHY  on_off
        /// </summary>
        public override AstRoot VisitCreate_database_option(TSqlParser.Create_database_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateDatabaseOption(context, list);
        }
        
        /// <summary>
        /// database_filestream_option
        /// 	 : LR_BRACKET  ((NON_TRANSACTED_ACCESS  EQUAL  (OFF | READ_ONLY | FULL)) | (DIRECTORY_NAME  EQUAL  STRING))  RR_BRACKET
        /// </summary>
        public override AstRoot VisitDatabase_filestream_option(TSqlParser.Database_filestream_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDatabaseFilestreamOption(context, list);
        }
        
        /// <summary>
        /// entity_name_for_azure_dw
        /// 	 : schema_name
        /// 	 | schema_name  DOT  object_name
        /// </summary>
        public override AstRoot VisitEntity_name_for_azure_dw(TSqlParser.Entity_name_for_azure_dwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEntityNameForAzureDw(context, list);
        }
        
        /// <summary>
        /// entity_name_for_parallel_dw
        /// 	 : schema_database = id_
        /// 	 | schema_name  DOT  object_name
        /// </summary>
        public override AstRoot VisitEntity_name_for_parallel_dw(TSqlParser.Entity_name_for_parallel_dwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEntityNameForParallelDw(context, list);
        }
        
        /// <summary>
        /// insert_column_name_list
        /// 	 : col += insert_column_id  (COMMA  col += insert_column_id)*
        /// </summary>
        public override AstRoot VisitInsert_column_name_list(TSqlParser.Insert_column_name_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstInsertColumnNameList(context, list);
        }
        
        /// <summary>
        /// column_name_list
        /// 	 : col += id_  (COMMA  col += id_)*
        /// </summary>
        public override AstRoot VisitColumn_name_list(TSqlParser.Column_name_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnNameList(context, list);
        }
        
        /// <summary>
        /// null_notnull
        /// 	 : NOT?  NULL_
        /// </summary>
        public override AstRoot VisitNull_notnull(TSqlParser.Null_notnullContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstNullNotnull(context, list);
        }
        
        /// <summary>
        /// null_or_default
        /// 	 : (null_notnull | DEFAULT  constant_expression  (COLLATE  id_)?  (WITH  VALUES)?)
        /// </summary>
        public override AstRoot VisitNull_or_default(TSqlParser.Null_or_defaultContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstNullOrDefault(context, list);
        }
        
        /// <summary>
        /// scalar_function_name
        /// 	 : func_proc_name_server_database_schema
        /// 	 | RIGHT
        /// 	 | LEFT
        /// 	 | BINARY_CHECKSUM
        /// 	 | CHECKSUM
        /// </summary>
        public override AstRoot VisitScalar_function_name(TSqlParser.Scalar_function_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstScalarFunctionName(context, list);
        }
        
        /// <summary>
        /// service_name
        /// 	 : (id_ | expression)
        /// </summary>
        public override AstRoot VisitService_name(TSqlParser.Service_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstServiceName(context, list);
        }
        
        /// <summary>
        /// end_conversation
        /// 	 : END  CONVERSATION  conversation_handle = LOCAL_ID  SEMI?  (WITH  (ERROR  EQUAL  faliure_code = (LOCAL_ID | STRING)  DESCRIPTION  EQUAL  failure_text = (LOCAL_ID | STRING))?  CLEANUP?)?
        /// </summary>
        public override AstRoot VisitEnd_conversation(TSqlParser.End_conversationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEndConversation(context, list);
        }
        
        /// <summary>
        /// get_conversation
        /// 	 : GET  CONVERSATION  GROUP  conversation_group_id = string_local_id  FROM  queue = queue_id  SEMI?
        /// </summary>
        public override AstRoot VisitGet_conversation(TSqlParser.Get_conversationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGetConversation(context, list);
        }
        
        /// <summary>
        /// queue_id
        /// 	 : (database_name  DOT  schema_name  DOT  queue_name)
        /// 	 | id_
        /// </summary>
        public override AstRoot VisitQueue_id(TSqlParser.Queue_idContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQueueId(context, list);
        }
        
        /// <summary>
        /// send_conversation
        /// 	 : SEND  ON  CONVERSATION  conversation_handle = string_local_id  MESSAGE  TYPE  messageTypeName = expression  (LR_BRACKET  messageBodyEexpression = string_local_id  RR_BRACKET)?  SEMI?
        /// </summary>
        public override AstRoot VisitSend_conversation(TSqlParser.Send_conversationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSendConversation(context, list);
        }
        
        /// <summary>
        /// data_type
        /// 	 : scaled = (VARCHAR | NVARCHAR | BINARY_KEYWORD | VARBINARY_KEYWORD | SQUARE_BRACKET_ID)  LR_BRACKET  MAX  RR_BRACKET
        /// 	 | ext_type  LR_BRACKET  scale = DECIMAL  COMMA  prec = DECIMAL  RR_BRACKET
        /// 	 | ext_type  LR_BRACKET  scale = DECIMAL  RR_BRACKET
        /// 	 | ext_type  IDENTITY  (LR_BRACKET  seed = DECIMAL  COMMA  inc = DECIMAL  RR_BRACKET)?
        /// 	 | double_prec = DOUBLE  PRECISION?
        /// 	 | unscaled_type
        /// </summary>
        public override AstRoot VisitData_type(TSqlParser.Data_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDataType(context, list);
        }
        
        /// <summary>
        /// default_value
        /// 	 : NULL_
        /// 	 | DEFAULT
        /// 	 | constant
        /// </summary>
        public override AstRoot VisitDefault_value(TSqlParser.Default_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDefaultValue(context, list);
        }
        
        /// <summary>
        /// comparison_operator
        /// 	 : EQUAL
        /// 	 | GREATER
        /// 	 | LESS
        /// 	 | LESS  EQUAL
        /// 	 | GREATER  EQUAL
        /// 	 | LESS  GREATER
        /// 	 | EXCLAMATION  EQUAL
        /// 	 | EXCLAMATION  GREATER
        /// 	 | EXCLAMATION  LESS
        /// </summary>
        public override AstRoot VisitComparison_operator(TSqlParser.Comparison_operatorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstComparisonOperator(context, list);
        }
        
        /// <summary>
        /// assignment_operator
        /// 	 : PLUS_ASSIGN
        /// 	 | MINUS_ASSIGN
        /// 	 | MULT_ASSIGN
        /// 	 | DIV_ASSIGN
        /// 	 | MOD_ASSIGN
        /// 	 | AND_ASSIGN
        /// 	 | XOR_ASSIGN
        /// 	 | OR_ASSIGN
        /// </summary>
        public override AstRoot VisitAssignment_operator(TSqlParser.Assignment_operatorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAssignmentOperator(context, list);
        }
    }
}
