#nullable disable
// Generated by Models.ScriptTSqlVisitor.Defaults : mardi 11 avril 2023
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Parsers.TSql
{
    using System;
    using Bb.Parsers;
    using Bb.Asts.TSql;
    using Bb.Asts;
    using Bb.Parsers.TSql.Antlr;
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using System.Collections;
    
    
    public partial class ScriptTSqlVisitor
    {
        
        /// <summary>
        /// t_root
        /// 	 : batchs  EOF
        /// 	 | execute_body_batch  go_statements  EOF
        /// </summary>
        public override AstRoot VisitT_root(TSqlParser.T_rootContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstTRoot.Create(context, list);
        }
        
        /// <summary>
        /// batch
        /// 	 : go_statement
        /// 	 | execute_body_batch
        /// 	 | sql_clauses
        /// 	 | batch_level_statement
        /// </summary>
        public override AstRoot VisitBatch(TSqlParser.BatchContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstBatch.Create(context, list);
        }
        
        /// <summary>
        /// batch_level_statement
        /// 	 : create_or_alter_function
        /// 	 | create_or_alter_procedure
        /// 	 | create_or_alter_trigger
        /// 	 | create_view
        /// </summary>
        public override AstRoot VisitBatch_level_statement(TSqlParser.Batch_level_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstBatchLevelStatement.Create(context, list);
        }
        
        /// <summary>
        /// sql_clause
        /// 	 : dml_clause
        /// 	 | cfl_statement
        /// 	 | another_statement
        /// 	 | ddl_clause
        /// 	 | dbcc_special
        /// 	 | dbcc_clause
        /// 	 | backup_statement
        /// </summary>
        public override AstRoot VisitSql_clause(TSqlParser.Sql_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstSqlClause.Create(context, list);
        }
        
        /// <summary>
        /// dml_clause
        /// 	 : merge_statement
        /// 	 | delete_statement
        /// 	 | insert_statement
        /// 	 | select_statement_standalone
        /// 	 | update_statement
        /// </summary>
        public override AstRoot VisitDml_clause(TSqlParser.Dml_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstDmlClause.Create(context, list);
        }
        
        /// <summary>
        /// ddl_clause
        /// 	 : alter_application_role
        /// 	 | alter_assembly
        /// 	 | alter_asymmetric_key
        /// 	 | alter_authorization
        /// 	 | alter_authorization_for_azure_dw
        /// 	 | alter_authorization_for_parallel_dw
        /// 	 | alter_authorization_for_sql_database
        /// 	 | alter_availability_group
        /// 	 | alter_certificate
        /// 	 | alter_column_encryption_key
        /// 	 | alter_credential
        /// 	 | alter_cryptographic_provider
        /// 	 | alter_database
        /// 	 | alter_db_role
        /// 	 | alter_endpoint
        /// 	 | create_or_alter_event_session
        /// 	 | alter_external_data_source
        /// 	 | alter_external_library
        /// 	 | alter_external_resource_pool
        /// 	 | alter_fulltext_catalog
        /// 	 | alter_fulltext_stoplist
        /// 	 | alter_index
        /// 	 | alter_login_azure_sql
        /// 	 | alter_login_azure_sql_dw_and_pdw
        /// 	 | alter_login_sql_server
        /// 	 | alter_master_key_azure_sql
        /// 	 | alter_master_key_sql_server
        /// 	 | alter_message_type
        /// 	 | alter_partition_function
        /// 	 | alter_partition_scheme
        /// 	 | alter_remote_service_binding
        /// 	 | alter_resource_governor
        /// 	 | alter_schema_azure_sql_dw_and_pdw
        /// 	 | alter_schema_sql
        /// 	 | alter_sequence
        /// 	 | alter_server_audit
        /// 	 | alter_server_audit_specification
        /// 	 | alter_server_configuration
        /// 	 | alter_server_role
        /// 	 | alter_server_role_pdw
        /// 	 | alter_service
        /// 	 | alter_service_master_key
        /// 	 | alter_symmetric_key
        /// 	 | alter_table
        /// 	 | alter_user
        /// 	 | alter_user_azure_sql
        /// 	 | alter_workload_group
        /// 	 | create_application_role
        /// 	 | create_assembly
        /// 	 | create_asymmetric_key
        /// 	 | create_column_encryption_key
        /// 	 | create_column_master_key
        /// 	 | create_credential
        /// 	 | create_cryptographic_provider
        /// 	 | create_database
        /// 	 | create_db_role
        /// 	 | create_event_notification
        /// 	 | create_external_library
        /// 	 | create_external_resource_pool
        /// 	 | create_fulltext_catalog
        /// 	 | create_fulltext_stoplist
        /// 	 | create_index
        /// 	 | create_columnstore_index
        /// 	 | create_nonclustered_columnstore_index
        /// 	 | create_login_azure_sql
        /// 	 | create_login_pdw
        /// 	 | create_login_sql_server
        /// 	 | create_master_key_azure_sql
        /// 	 | create_master_key_sql_server
        /// 	 | create_or_alter_broker_priority
        /// 	 | create_remote_service_binding
        /// 	 | create_resource_pool
        /// 	 | create_route
        /// 	 | create_rule
        /// 	 | create_schema
        /// 	 | create_schema_azure_sql_dw_and_pdw
        /// 	 | create_search_property_list
        /// 	 | create_security_policy
        /// 	 | create_sequence
        /// 	 | create_server_audit
        /// 	 | create_server_audit_specification
        /// 	 | create_server_role
        /// 	 | create_service
        /// 	 | create_statistics
        /// 	 | create_synonym
        /// 	 | create_table
        /// 	 | create_type
        /// 	 | create_user
        /// 	 | create_user_azure_sql_dw
        /// 	 | create_workload_group
        /// 	 | create_xml_index
        /// 	 | create_xml_schema_collection
        /// 	 | create_partition_function
        /// 	 | create_partition_scheme
        /// 	 | drop_aggregate
        /// 	 | drop_application_role
        /// 	 | drop_assembly
        /// 	 | drop_asymmetric_key
        /// 	 | drop_availability_group
        /// 	 | drop_broker_priority
        /// 	 | drop_certificate
        /// 	 | drop_column_encryption_key
        /// 	 | drop_column_master_key
        /// 	 | drop_contract
        /// 	 | drop_credential
        /// 	 | drop_cryptograhic_provider
        /// 	 | drop_database
        /// 	 | drop_database_audit_specification
        /// 	 | drop_database_encryption_key
        /// 	 | drop_database_scoped_credential
        /// 	 | drop_db_role
        /// 	 | drop_default
        /// 	 | drop_endpoint
        /// 	 | drop_event_notifications
        /// 	 | drop_event_session
        /// 	 | drop_external_data_source
        /// 	 | drop_external_file_format
        /// 	 | drop_external_library
        /// 	 | drop_external_resource_pool
        /// 	 | drop_external_table
        /// 	 | drop_fulltext_catalog
        /// 	 | drop_fulltext_index
        /// 	 | drop_fulltext_stoplist
        /// 	 | drop_function
        /// 	 | drop_index
        /// 	 | drop_login
        /// 	 | drop_master_key
        /// 	 | drop_message_type
        /// 	 | drop_partition_function
        /// 	 | drop_partition_scheme
        /// 	 | drop_procedure
        /// 	 | drop_queue
        /// 	 | drop_remote_service_binding
        /// 	 | drop_resource_pool
        /// 	 | drop_route
        /// 	 | drop_rule
        /// 	 | drop_schema
        /// 	 | drop_search_property_list
        /// 	 | drop_security_policy
        /// 	 | drop_sequence
        /// 	 | drop_server_audit
        /// 	 | drop_server_audit_specification
        /// 	 | drop_server_role
        /// 	 | drop_service
        /// 	 | drop_signature
        /// 	 | drop_statistics
        /// 	 | drop_statistics_id_azure_dw_and_pdw
        /// 	 | drop_symmetric_key
        /// 	 | drop_synonym
        /// 	 | drop_table
        /// 	 | drop_trigger
        /// 	 | drop_type
        /// 	 | drop_user
        /// 	 | drop_view
        /// 	 | drop_workload_group
        /// 	 | drop_xml_schema_collection
        /// 	 | disable_trigger
        /// 	 | enable_trigger
        /// 	 | lock_table
        /// 	 | truncate_table
        /// 	 | update_statistics
        /// </summary>
        public override AstRoot VisitDdl_clause(TSqlParser.Ddl_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstDdlClause.Create(context, list);
        }
        
        /// <summary>
        /// backup_statement
        /// 	 : backup_database
        /// 	 | backup_log
        /// 	 | backup_certificate
        /// 	 | backup_master_key
        /// 	 | backup_service_master_key
        /// </summary>
        public override AstRoot VisitBackup_statement(TSqlParser.Backup_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstBackupStatement.Create(context, list);
        }
        
        /// <summary>
        /// cfl_statement
        /// 	 : block_statement
        /// 	 | break_statement
        /// 	 | continue_statement
        /// 	 | goto_statement
        /// 	 | if_statement
        /// 	 | return_statement
        /// 	 | throw_statement
        /// 	 | try_catch_statement
        /// 	 | waitfor_statement
        /// 	 | while_statement
        /// 	 | print_statement
        /// 	 | raiseerror_statement
        /// </summary>
        public override AstRoot VisitCfl_statement(TSqlParser.Cfl_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCflStatement.Create(context, list);
        }
        
        /// <summary>
        /// break_statement
        /// 	 : BREAK  SEMI?
        /// </summary>
        public override AstRoot VisitBreak_statement(TSqlParser.Break_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBreakStatement(context, list);
        }
        
        /// <summary>
        /// continue_statement
        /// 	 : CONTINUE  SEMI?
        /// </summary>
        public override AstRoot VisitContinue_statement(TSqlParser.Continue_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstContinueStatement(context, list);
        }
        
        /// <summary>
        /// goto_statement
        /// 	 : GOTO  code_location_id  SEMI?
        /// 	 | code_location_id  COLON  SEMI?
        /// </summary>
        public override AstRoot VisitGoto_statement(TSqlParser.Goto_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstGotoStatement.Create(context, list);
        }
        
        /// <summary>
        /// throw_statement
        /// 	 : THROW  (throw_error_number  COMMA  throw_message  COMMA  throw_state)?  SEMI?
        /// </summary>
        public override AstRoot VisitThrow_statement(TSqlParser.Throw_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstThrowStatement(context, list);
        }
        
        /// <summary>
        /// try_catch_statement
        /// 	 : BEGIN  TRY  SEMI?  try_clauses = sql_clauses  END  TRY  SEMI?  BEGIN  CATCH  SEMI?  catch_clauses = sql_clauses  END  CATCH  SEMI?
        /// </summary>
        public override AstRoot VisitTry_catch_statement(TSqlParser.Try_catch_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTryCatchStatement(context, list);
        }
        
        /// <summary>
        /// raiseerror_statement
        /// 	 : RAISERROR  LR_BRACKET  msg = decimal_string_local_id  COMMA  severity = constant_local_id  COMMA  state = constant_local_id  constant_local_ids?  RR_BRACKET  (WITH  log_seterror_nowait)?  SEMI?
        /// 	 | RAISERROR  decimal  formatstring = string_local_id_double_quote_id  decimal_string_locals?
        /// </summary>
        public override AstRoot VisitRaiseerror_statement(TSqlParser.Raiseerror_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstRaiseerrorStatement.Create(context, list);
        }
        
        /// <summary>
        /// another_statement
        /// 	 : declare_statement
        /// 	 | execute_statement
        /// 	 | cursor_statement
        /// 	 | conversation_statement
        /// 	 | create_contract
        /// 	 | create_queue
        /// 	 | alter_queue
        /// 	 | kill_statement
        /// 	 | message_statement
        /// 	 | security_statement
        /// 	 | set_statement
        /// 	 | transaction_statement
        /// 	 | use_statement
        /// 	 | setuser_statement
        /// 	 | reconfigure_statement
        /// 	 | shutdown_statement
        /// 	 | checkpoint_statement
        /// </summary>
        public override AstRoot VisitAnother_statement(TSqlParser.Another_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAnotherStatement.Create(context, list);
        }
        
        /// <summary>
        /// alter_assembly_start
        /// 	 : ALTER  ASSEMBLY
        /// </summary>
        public override AstRoot VisitAlter_assembly_start(TSqlParser.Alter_assembly_startContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyStart(context, list);
        }
        
        /// <summary>
        /// alter_assembly_drop_multiple_files
        /// 	 : ALL
        /// 	 | multiple_local_files
        /// </summary>
        public override AstRoot VisitAlter_assembly_drop_multiple_files(TSqlParser.Alter_assembly_drop_multiple_filesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAlterAssemblyDropMultipleFiles.Create(context, list);
        }
        
        /// <summary>
        /// client_assembly_specifier
        /// 	 : network_file_share
        /// 	 | local_file
        /// 	 | stringtext
        /// </summary>
        public override AstRoot VisitClient_assembly_specifier(TSqlParser.Client_assembly_specifierContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstClientAssemblySpecifier.Create(context, list);
        }
        
        /// <summary>
        /// assembly_option
        /// 	 : PERMISSION_SET  EQUAL  assembly_permission
        /// 	 | VISIBILITY  EQUAL  on_off
        /// 	 | UNCHECKED  DATA
        /// 	 | assembly_option  COMMA
        /// </summary>
        public override AstRoot VisitAssembly_option(TSqlParser.Assembly_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAssemblyOption.Create(context, list);
        }
        
        /// <summary>
        /// file_path
        /// 	 : file_directory_path_separator  file_path
        /// 	 | id_
        /// </summary>
        public override AstRoot VisitFile_path(TSqlParser.File_pathContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstFilePath.Create(context, list);
        }
        
        /// <summary>
        /// multiple_local_files
        /// 	 : multiple_local_file_start  local_file  SINGLE_QUOTE  COMMA
        /// 	 | local_file
        /// </summary>
        public override AstRoot VisitMultiple_local_files(TSqlParser.Multiple_local_filesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstMultipleLocalFiles.Create(context, list);
        }
        
        /// <summary>
        /// binary_content
        /// 	 : stringtext
        /// 	 | binary_
        /// </summary>
        public override AstRoot VisitBinary_content(TSqlParser.Binary_contentContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstBinaryContent.Create(context, list);
        }
        
        /// <summary>
        /// by_password_crypt
        /// 	 : decryption_by_pwd
        /// 	 | encryption_by_pwd
        /// </summary>
        public override AstRoot VisitBy_password_crypt(TSqlParser.By_password_cryptContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstByPasswordCrypt.Create(context, list);
        }
        
        /// <summary>
        /// encryption_by_pwd
        /// 	 : ENCRYPTION  BY  PASSWORD  EQUAL  encryption_pwd = stringtext
        /// </summary>
        public override AstRoot VisitEncryption_by_pwd(TSqlParser.Encryption_by_pwdContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEncryptionByPwd(context, list);
        }
        
        /// <summary>
        /// decryption_by_pwd
        /// 	 : DECRYPTION  BY  PASSWORD  EQUAL  encryption_pwd = stringtext
        /// </summary>
        public override AstRoot VisitDecryption_by_pwd(TSqlParser.Decryption_by_pwdContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDecryptionByPwd(context, list);
        }
        
        /// <summary>
        /// drop_asymmetric_key
        /// 	 : DROP  ASYMMETRIC  KEY  key_name = id_  (REMOVE  PROVIDER  KEY)?
        /// </summary>
        public override AstRoot VisitDrop_asymmetric_key(TSqlParser.Drop_asymmetric_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropAsymmetricKey(context, list);
        }
        
        /// <summary>
        /// authorization_grantee
        /// 	 : principal_name = id_
        /// 	 | SCHEMA  OWNER
        /// </summary>
        public override AstRoot VisitAuthorization_grantee(TSqlParser.Authorization_granteeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAuthorizationGrantee.Create(context, list);
        }
        
        /// <summary>
        /// class_type_for_grant
        /// 	 : COLUMN  encryption_master  KEY
        /// 	 | NOTIFICATION  database_object_server
        /// 	 | object_type_for_grant
        /// </summary>
        public override AstRoot VisitClass_type_for_grant(TSqlParser.Class_type_for_grantContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstClassTypeForGrant.Create(context, list);
        }
        
        /// <summary>
        /// alter_availability_group_options_listener
        /// 	 : alter_availability_group_options_listener_add
        /// 	 | alter_availability_group_options_listener_modify
        /// 	 | alter_availability_group_options_listener_restart
        /// </summary>
        public override AstRoot VisitAlter_availability_group_options_listener(TSqlParser.Alter_availability_group_options_listenerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAlterAvailabilityGroupOptionsListener.Create(context, list);
        }
        
        /// <summary>
        /// alter_availability_group_options_listener_modify
        /// 	 : MODIFY  LISTENER  (ADD  IP  LR_BRACKET  (range_ip_v4 | ipv6)  RR_BRACKET | PORT  EQUAL  decimal)
        /// </summary>
        public override AstRoot VisitAlter_availability_group_options_listener_modify(TSqlParser.Alter_availability_group_options_listener_modifyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAvailabilityGroupOptionsListenerModify(context, list);
        }
        
        /// <summary>
        /// alter_availability_group_options_listener_add
        /// 	 : ADD  LISTENER  listener_name = stringtext  LR_BRACKET  (alter_availability_group_options_listener_dhcp | WITH  IP  LR_BRACKET  alter_availability_group_options_listener_ip)  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_availability_group_options_listener_add(TSqlParser.Alter_availability_group_options_listener_addContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAvailabilityGroupOptionsListenerAdd(context, list);
        }
        
        /// <summary>
        /// alter_availability_group_options_listener_ip
        /// 	 : (COMMA?  LR_BRACKET  (range_ip_comma_v4 | IPV6_ADDR)  RR_BRACKET)+  (COMMA  port = PORT  EQUAL  decimal)?
        /// </summary>
        public override AstRoot VisitAlter_availability_group_options_listener_ip(TSqlParser.Alter_availability_group_options_listener_ipContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAvailabilityGroupOptionsListenerIp(context, list);
        }
        
        /// <summary>
        /// alter_availability_replicat_primary
        /// 	 : ENDPOINT_URL  EQUAL  endpoint_url = stringtext
        /// 	 | availability_mode
        /// 	 | FAILOVER_MODE  EQUAL  failover = auto_manual
        /// 	 | seeding_mode
        /// 	 | backup_priority
        /// </summary>
        public override AstRoot VisitAlter_availability_replicat_primary(TSqlParser.Alter_availability_replicat_primaryContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAlterAvailabilityReplicatPrimary.Create(context, list);
        }
        
        /// <summary>
        /// alter_availability_primary_role
        /// 	 : allow_connections
        /// 	 | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  routing_list  RR_BRACKET
        /// 	 | SESSION_TIMEOUT  EQUAL  session_timeout = decimal
        /// </summary>
        public override AstRoot VisitAlter_availability_primary_role(TSqlParser.Alter_availability_primary_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAlterAvailabilityPrimaryRole.Create(context, list);
        }
        
        /// <summary>
        /// alter_availability_group_options_replicat
        /// 	 : alter_availability_replicat_add
        /// 	 | REMOVE  REPLICA  ON  server_instance_txt
        /// 	 | alter_availability_replicat_modify
        /// </summary>
        public override AstRoot VisitAlter_availability_group_options_replicat(TSqlParser.Alter_availability_group_options_replicatContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAlterAvailabilityGroupOptionsReplicat.Create(context, list);
        }
        
        /// <summary>
        /// alter_availability_group_options_group
        /// 	 : JOIN
        /// 	 | JOIN  AVAILABILITY  GROUP  ON  (COMMA?  ag_name = stringtext  WITH  LR_BRACKET  (listener_url  COMMA  availability_mode  COMMA  failover_mode_manuel  COMMA  seeding_mode)  RR_BRACKET)+
        /// 	 | MODIFY  AVAILABILITY  GROUP  ON  (COMMA?  ag_name_modified = stringtext  WITH  LR_BRACKET  (listener_url  (COMMA?  availability_mode)?  (COMMA?  failover_mode_manuel)?  (COMMA?  seeding_mode)?)  RR_BRACKET)+
        /// </summary>
        public override AstRoot VisitAlter_availability_group_options_group(TSqlParser.Alter_availability_group_options_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAlterAvailabilityGroupOptionsGroup.Create(context, list);
        }
        
        /// <summary>
        /// failover_mode_manuel
        /// 	 : FAILOVER_MODE  EQUAL  MANUAL
        /// </summary>
        public override AstRoot VisitFailover_mode_manuel(TSqlParser.Failover_mode_manuelContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFailoverModeManuel(context, list);
        }
        
        /// <summary>
        /// alter_availability_group_options_role
        /// 	 : SECONDARY_ROLE  LR_BRACKET  (allow_connections | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  stringtext  RR_BRACKET)
        /// 	 | PRIMARY_ROLE  LR_BRACKET  (allow_connections | READ_ONLY_ROUTING_LIST  EQUAL  (LR_BRACKET  (string_list | NONE)  RR_BRACKET) | SESSION_TIMEOUT  EQUAL  session_timeout = decimal)
        /// </summary>
        public override AstRoot VisitAlter_availability_group_options_role(TSqlParser.Alter_availability_group_options_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAlterAvailabilityGroupOptionsRole.Create(context, list);
        }
        
        /// <summary>
        /// alter_availability_group_options
        /// 	 : SET  LR_BRACKET  (AUTOMATED_BACKUP_PREFERENCE  EQUAL  primary_secondary_none | FAILURE_CONDITION_LEVEL  EQUAL  decimal | HEALTH_CHECK_TIMEOUT  EQUAL  milliseconds = decimal | DB_FAILOVER  EQUAL  on_off | REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT  EQUAL  decimal  RR_BRACKET)
        /// 	 | alter_availability_group_options_database
        /// 	 | alter_availability_group_options_replicat
        /// 	 | alter_availability_group_options_listener
        /// 	 | alter_availability_group_options_role
        /// 	 | alter_availability_group_options_group
        /// 	 | grant_deny  CREATE  ANY  DATABASE
        /// 	 | FAILOVER
        /// 	 | FORCE_FAILOVER_ALLOW_DATA_LOSS
        /// 	 | OFFLINE
        /// 	 | WITH  LR_BRACKET  DTC_SUPPORT  EQUAL  PER_DB  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_availability_group_options(TSqlParser.Alter_availability_group_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAlterAvailabilityGroupOptions.Create(context, list);
        }
        
        /// <summary>
        /// broker_contract_name
        /// 	 : (CONTRACT_NAME  EQUAL  (id_ | ANY)  COMMA?)
        /// </summary>
        public override AstRoot VisitBroker_contract_name(TSqlParser.Broker_contract_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBrokerContractName(context, list);
        }
        
        /// <summary>
        /// broker_local_service_name
        /// 	 : (LOCAL_SERVICE_NAME  EQUAL  (DOUBLE_FORWARD_SLASH?  id_ | ANY)  COMMA?)
        /// </summary>
        public override AstRoot VisitBroker_local_service_name(TSqlParser.Broker_local_service_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBrokerLocalServiceName(context, list);
        }
        
        /// <summary>
        /// broker_remote_service_name
        /// 	 : (REMOTE_SERVICE_NAME  EQUAL  (stringtext | ANY)  COMMA?)
        /// </summary>
        public override AstRoot VisitBroker_remote_service_name(TSqlParser.Broker_remote_service_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBrokerRemoteServiceName(context, list);
        }
        
        /// <summary>
        /// broker_priority_level
        /// 	 : (PRIORITY_LEVEL  EQUAL  (decimal | DEFAULT))
        /// </summary>
        public override AstRoot VisitBroker_priority_level(TSqlParser.Broker_priority_levelContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBrokerPriorityLevel(context, list);
        }
        
        /// <summary>
        /// drop_broker_priority
        /// 	 : DROP  BROKER  PRIORITY  ConversationPriorityName = id_
        /// </summary>
        public override AstRoot VisitDrop_broker_priority(TSqlParser.Drop_broker_priorityContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropBrokerPriority(context, list);
        }
        
        /// <summary>
        /// private_key
        /// 	 : FILE  EQUAL  stringtext  COMMA?
        /// 	 | by_password_crypt  COMMA?
        /// </summary>
        public override AstRoot VisitPrivate_key(TSqlParser.Private_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstPrivateKey.Create(context, list);
        }
        
        /// <summary>
        /// drop_contract
        /// 	 : DROP  CONTRACT  dropped_contract_name = id_
        /// </summary>
        public override AstRoot VisitDrop_contract(TSqlParser.Drop_contractContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropContract(context, list);
        }
        
        /// <summary>
        /// drop_database
        /// 	 : DROP  DATABASE  (IF  EXISTS)?  (COMMA?  database_id)+
        /// </summary>
        public override AstRoot VisitDrop_database(TSqlParser.Drop_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDatabase(context, list);
        }
        
        /// <summary>
        /// drop_database_encryption_key
        /// 	 : DROP  DATABASE  ENCRYPTION  KEY
        /// </summary>
        public override AstRoot VisitDrop_database_encryption_key(TSqlParser.Drop_database_encryption_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDatabaseEncryptionKey(context, list);
        }
        
        /// <summary>
        /// drop_default
        /// 	 : DROP  DEFAULT  (IF  EXISTS)?  (COMMA?  default_ref)
        /// </summary>
        public override AstRoot VisitDrop_default(TSqlParser.Drop_defaultContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDefault(context, list);
        }
        
        /// <summary>
        /// event_notification_on
        /// 	 : server_database
        /// 	 | QUEUE  queue_id
        /// </summary>
        public override AstRoot VisitEvent_notification_on(TSqlParser.Event_notification_onContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstEventNotificationOn.Create(context, list);
        }
        
        /// <summary>
        /// drop_master_key
        /// 	 : DROP  MASTER  KEY
        /// </summary>
        public override AstRoot VisitDrop_master_key(TSqlParser.Drop_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropMasterKey(context, list);
        }
        
        /// <summary>
        /// drop_rule
        /// 	 : DROP  RULE  (IF  EXISTS)?  (COMMA?  schema_rule_ref)?
        /// </summary>
        public override AstRoot VisitDrop_rule(TSqlParser.Drop_ruleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropRule(context, list);
        }
        
        /// <summary>
        /// drop_sequence
        /// 	 : DROP  SEQUENCE  (IF  EXISTS)?  (COMMA?  database_schema_sequence_ref)?
        /// </summary>
        public override AstRoot VisitDrop_sequence(TSqlParser.Drop_sequenceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSequence(context, list);
        }
        
        /// <summary>
        /// trigger_name
        /// 	 : schema_trigger_refs
        /// 	 | ALL
        /// </summary>
        public override AstRoot VisitTrigger_name(TSqlParser.Trigger_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstTriggerName.Create(context, list);
        }
        
        /// <summary>
        /// trigger_target
        /// 	 : schema_object_ref
        /// 	 | all_server_database
        /// </summary>
        public override AstRoot VisitTrigger_target(TSqlParser.Trigger_targetContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstTriggerTarget.Create(context, list);
        }
        
        /// <summary>
        /// create_column_master_key
        /// 	 : CREATE  COLUMN  MASTER  KEY  key_name = id_  WITH  LR_BRACKET  KEY_STORE_PROVIDER_NAME  EQUAL  key_store_provider_name = stringtext  COMMA  KEY_PATH  EQUAL  key_path = stringtext  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCreate_column_master_key(TSqlParser.Create_column_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateColumnMasterKey(context, list);
        }
        
        /// <summary>
        /// create_or_alter_event_session_with
        /// 	 : WITH  LR_BRACKET  (COMMA?  session_arg_max_memory)?  (COMMA?  session_arg_event_retention_mode)?  (COMMA?  session_arg_max_dispatch)?  (COMMA?  session_arg_max_event_size)?  (COMMA?  session_arg_memory_partition)?  (COMMA?  session_arg_track_causality)?  (COMMA?  session_arg_startup_state)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCreate_or_alter_event_session_with(TSqlParser.Create_or_alter_event_session_withContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterEventSessionWith(context, list);
        }
        
        /// <summary>
        /// session_arg_max_dispatch
        /// 	 : MAX_DISPATCH_LATENCY  EQUAL  (decimal  SECONDS | INFINITE)
        /// </summary>
        public override AstRoot VisitSession_arg_max_dispatch(TSqlParser.Session_arg_max_dispatchContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSessionArgMaxDispatch(context, list);
        }
        
        /// <summary>
        /// target_parameter_value
        /// 	 : (LR_BRACKET?  decimal  RR_BRACKET? | stringtext)
        /// </summary>
        public override AstRoot VisitTarget_parameter_value(TSqlParser.Target_parameter_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTargetParameterValue(context, list);
        }
        
        /// <summary>
        /// event_session_predicate_expression
        /// 	 : (COMMA?  and_or?  NOT?  (event_session_predicate_factor | LR_BRACKET  event_session_predicate_expression  RR_BRACKET))+
        /// </summary>
        public override AstRoot VisitEvent_session_predicate_expression(TSqlParser.Event_session_predicate_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEventSessionPredicateExpression(context, list);
        }
        
        /// <summary>
        /// event_session_predicate_factor
        /// 	 : event_session_predicate_leaf
        /// 	 | LR_BRACKET  event_session_predicate_expression  RR_BRACKET
        /// </summary>
        public override AstRoot VisitEvent_session_predicate_factor(TSqlParser.Event_session_predicate_factorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstEventSessionPredicateFactor.Create(context, list);
        }
        
        /// <summary>
        /// event_session_predicate_leaf
        /// 	 : (event_field_id | (event_field_id | full_predicate_source_ref)  event_session_predicate_leaf_ope  decimal_string)
        /// 	 | source1 = full_predicate_source_ref  LR_BRACKET  (event_field_id | source2 = full_predicate_source_ref  COMMA  decimal_string)  RR_BRACKET
        /// </summary>
        public override AstRoot VisitEvent_session_predicate_leaf(TSqlParser.Event_session_predicate_leafContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstEventSessionPredicateLeaf.Create(context, list);
        }
        
        /// <summary>
        /// alter_external_data_source
        /// 	 : ALTER  EXTERNAL  DATA  SOURCE  data_source_id  SET  (LOCATION  EQUAL  location = stringtext  COMMA? | RESOURCE_MANAGER_LOCATION  EQUAL  resource_manager_location = stringtext  COMMA? | CREDENTIAL  EQUAL  credential_id)+
        /// 	 | ALTER  EXTERNAL  DATA  SOURCE  data_source_id  WITH  LR_BRACKET  TYPE  EQUAL  BLOB_STORAGE  COMMA  LOCATION  EQUAL  location = stringtext  (COMMA  CREDENTIAL  EQUAL  credential_id)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_external_data_source(TSqlParser.Alter_external_data_sourceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAlterExternalDataSource.Create(context, list);
        }
        
        /// <summary>
        /// code_content
        /// 	 : stringtext
        /// 	 | binary_
        /// 	 | NONE
        /// </summary>
        public override AstRoot VisitCode_content(TSqlParser.Code_contentContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCodeContent.Create(context, list);
        }
        
        /// <summary>
        /// create_external_resource_pool
        /// 	 : CREATE  EXTERNAL  RESOURCE  POOL  pool_id  WITH  external_resource_with
        /// </summary>
        public override AstRoot VisitCreate_external_resource_pool(TSqlParser.Create_external_resource_poolContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateExternalResourcePool(context, list);
        }
        
        /// <summary>
        /// fulltext_languageList
        /// 	 : stringtext
        /// 	 | decimal
        /// 	 | binary_
        /// </summary>
        public override AstRoot VisitFulltext_languageList(TSqlParser.Fulltext_languageListContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstFulltextLanguageList.Create(context, list);
        }
        
        /// <summary>
        /// alter_login_sql_server_infos
        /// 	 : enable_disable?
        /// 	 | WITH  alter_login_sql_server_settings
        /// 	 | add_drop  CREDENTIAL  credential_id
        /// </summary>
        public override AstRoot VisitAlter_login_sql_server_infos(TSqlParser.Alter_login_sql_server_infosContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAlterLoginSqlServerInfos.Create(context, list);
        }
        
        /// <summary>
        /// pwd_value
        /// 	 : stringtext
        /// 	 | binary_  HASHED
        /// </summary>
        public override AstRoot VisitPwd_value(TSqlParser.Pwd_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstPwdValue.Create(context, list);
        }
        
        /// <summary>
        /// create_login_sql_server_settings
        /// 	 : ((PASSWORD  EQUAL  (password = stringtext | password_hash = binary_  HASHED))  pwd_strategies?)?  (COMMA?  SID  EQUAL  sid = binary_)?  (COMMA?  DEFAULT_DATABASE  EQUAL  database_id)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  language)?  (COMMA?  CHECK_EXPIRATION  EQUAL  check_expiration = on_off)?  (COMMA?  CHECK_POLICY  EQUAL  check_policy = on_off)?  (COMMA?  CREDENTIAL  EQUAL  credential_id)?
        /// </summary>
        public override AstRoot VisitCreate_login_sql_server_settings(TSqlParser.Create_login_sql_server_settingsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateLoginSqlServerSettings(context, list);
        }
        
        /// <summary>
        /// create_login_sql_server_from
        /// 	 : WINDOWS  (WITH  (COMMA?  DEFAULT_DATABASE  EQUAL  database_id)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  default_language = stringtext)?)
        /// 	 | CERTIFICATE  certificate_id
        /// 	 | ASYMMETRIC  KEY  asym_key_id
        /// </summary>
        public override AstRoot VisitCreate_login_sql_server_from(TSqlParser.Create_login_sql_server_fromContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCreateLoginSqlServerFrom.Create(context, list);
        }
        
        /// <summary>
        /// alter_login_azure_sql_infos
        /// 	 : enable_disable?
        /// 	 | WITH  alter_login_azure_sql_with
        /// </summary>
        public override AstRoot VisitAlter_login_azure_sql_infos(TSqlParser.Alter_login_azure_sql_infosContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAlterLoginAzureSqlInfos.Create(context, list);
        }
        
        /// <summary>
        /// alter_login_azure_sql_with
        /// 	 : PASSWORD  EQUAL  password = stringtext  (OLD_PASSWORD  EQUAL  old_password = stringtext)?
        /// 	 | NAME  EQUAL  login_id
        /// </summary>
        public override AstRoot VisitAlter_login_azure_sql_with(TSqlParser.Alter_login_azure_sql_withContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAlterLoginAzureSqlWith.Create(context, list);
        }
        
        /// <summary>
        /// alter_master_key_sql_server
        /// 	 : ALTER  MASTER  KEY  (regenerate_mater_key | add_drop  add_master_key)
        /// </summary>
        public override AstRoot VisitAlter_master_key_sql_server(TSqlParser.Alter_master_key_sql_serverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterMasterKeySqlServer(context, list);
        }
        
        /// <summary>
        /// alter_master_key_azure_sql
        /// 	 : ALTER  MASTER  KEY  (regenerate_mater_key | ADD  add_master_key | DROP  encryption_by_pwd)
        /// </summary>
        public override AstRoot VisitAlter_master_key_azure_sql(TSqlParser.Alter_master_key_azure_sqlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterMasterKeyAzureSql(context, list);
        }
        
        /// <summary>
        /// add_master_key
        /// 	 : ENCRYPTION  BY  (SERVICE  MASTER  KEY | PASSWORD  EQUAL  encryption_password = stringtext)
        /// </summary>
        public override AstRoot VisitAdd_master_key(TSqlParser.Add_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAddMasterKey(context, list);
        }
        
        /// <summary>
        /// message_validation_value
        /// 	 : message_validation_value_enum
        /// 	 | VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_id
        /// </summary>
        public override AstRoot VisitMessage_validation_value(TSqlParser.Message_validation_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstMessageValidationValue.Create(context, list);
        }
        
        /// <summary>
        /// alter_resource_governor
        /// 	 : ALTER  RESOURCE  GOVERNOR  (disable_reconfigure | WITH  LR_BRACKET  CLASSIFIER_FUNCTION  EQUAL  (schema_func_proc_ref | NULL_)  RR_BRACKET | RESET  STATISTICS | WITH  LR_BRACKET  MAX_OUTSTANDING_IO_PER_VOLUME  EQUAL  max_outstanding_io_per_volume = decimal  RR_BRACKET)
        /// </summary>
        public override AstRoot VisitAlter_resource_governor(TSqlParser.Alter_resource_governorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterResourceGovernor(context, list);
        }
        
        /// <summary>
        /// alter_db_role
        /// 	 : ALTER  ROLE  old_role_name = role_id  (add_drop  MEMBER  database_id | WITH  NAME  EQUAL  new_role_name = role_id)
        /// </summary>
        public override AstRoot VisitAlter_db_role(TSqlParser.Alter_db_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterDbRole(context, list);
        }
        
        /// <summary>
        /// create_schema_name
        /// 	 : schema_id  schema_authorization?
        /// 	 | schema_id?  schema_authorization
        /// </summary>
        public override AstRoot VisitCreate_schema_name(TSqlParser.Create_schema_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCreateSchemaName.Create(context, list);
        }
        
        /// <summary>
        /// create_schema_target
        /// 	 : create_table
        /// 	 | create_view
        /// 	 | grant_deny  enum_dml  ON  (SCHEMA  DOUBLE_COLON)?  object_id  TO  owner_id
        /// 	 | REVOKE  enum_dml  ON  (SCHEMA  DOUBLE_COLON)?  object_id  FROM  owner_id
        /// </summary>
        public override AstRoot VisitCreate_schema_target(TSqlParser.Create_schema_targetContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCreateSchemaTarget.Create(context, list);
        }
        
        /// <summary>
        /// schema_table_ref_impact
        /// 	 : AFTER  insert_update
        /// 	 | BEFORE  update_delate
        /// </summary>
        public override AstRoot VisitSchema_table_ref_impact(TSqlParser.Schema_table_ref_impactContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstSchemaTableRefImpact.Create(context, list);
        }
        
        /// <summary>
        /// alter_sequence_restart
        /// 	 : RESTART  (WITH  decimal)?
        /// </summary>
        public override AstRoot VisitAlter_sequence_restart(TSqlParser.Alter_sequence_restartContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterSequenceRestart(context, list);
        }
        
        /// <summary>
        /// alter_sequence_increment
        /// 	 : INCREMENT  BY  sequnce_increment = decimal
        /// </summary>
        public override AstRoot VisitAlter_sequence_increment(TSqlParser.Alter_sequence_incrementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterSequenceIncrement(context, list);
        }
        
        /// <summary>
        /// sequence_cache
        /// 	 : (CACHE  decimal | NO  CACHE)
        /// </summary>
        public override AstRoot VisitSequence_cache(TSqlParser.Sequence_cacheContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSequenceCache(context, list);
        }
        
        /// <summary>
        /// alter_sequence_max_value
        /// 	 : (MAXVALUE  decimal | NO  MAXVALUE)?
        /// </summary>
        public override AstRoot VisitAlter_sequence_max_value(TSqlParser.Alter_sequence_max_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterSequenceMaxValue(context, list);
        }
        
        /// <summary>
        /// alter_sequence_min_value
        /// 	 : MINVALUE  decimal
        /// 	 | NO  MINVALUE
        /// </summary>
        public override AstRoot VisitAlter_sequence_min_value(TSqlParser.Alter_sequence_min_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAlterSequenceMinValue.Create(context, list);
        }
        
        /// <summary>
        /// create_sequence_min_value
        /// 	 : MINVALUE  real?
        /// 	 | NO  MINVALUE
        /// </summary>
        public override AstRoot VisitCreate_sequence_min_value(TSqlParser.Create_sequence_min_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCreateSequenceMinValue.Create(context, list);
        }
        
        /// <summary>
        /// create_sequence_max_value
        /// 	 : MAXVALUE  real?
        /// 	 | NO  MAXVALUE
        /// </summary>
        public override AstRoot VisitCreate_sequence_max_value(TSqlParser.Create_sequence_max_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCreateSequenceMaxValue.Create(context, list);
        }
        
        /// <summary>
        /// alter_server_audit_infos
        /// 	 : (TO  server_audit_file)?  with_server_audit_file?  where_server_audit_condition?
        /// 	 | REMOVE  WHERE
        /// 	 | MODIFY  NAME  EQUAL  audit_id
        /// </summary>
        public override AstRoot VisitAlter_server_audit_infos(TSqlParser.Alter_server_audit_infosContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAlterServerAuditInfos.Create(context, list);
        }
        
        /// <summary>
        /// server_audit_file_info
        /// 	 : QUEUE_DELAY  EQUAL  queue_delay = decimal
        /// 	 | ON_FAILURE  EQUAL  continue_shutdown
        /// 	 | STATE  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitServer_audit_file_info(TSqlParser.Server_audit_file_infoContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstServerAuditFileInfo.Create(context, list);
        }
        
        /// <summary>
        /// server_audit_file
        /// 	 : FILE  LR_BRACKET  server_audit_file_specs?  RR_BRACKET
        /// 	 | APPLICATION_LOG
        /// 	 | SECURITY_LOG
        /// </summary>
        public override AstRoot VisitServer_audit_file(TSqlParser.Server_audit_fileContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstServerAuditFile.Create(context, list);
        }
        
        /// <summary>
        /// server_audit_file_spec
        /// 	 : FILEPATH  EQUAL  filepath = stringtext
        /// 	 | MAXSIZE  EQUAL  decimal_size_unlimited
        /// 	 | MAX_ROLLOVER_FILES  EQUAL  max_rollover_files = decimal_unlimited
        /// 	 | MAX_FILES  EQUAL  max_files = decimal
        /// 	 | RESERVE_DISK_SPACE  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitServer_audit_file_spec(TSqlParser.Server_audit_file_specContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstServerAuditFileSpec.Create(context, list);
        }
        
        /// <summary>
        /// decimal_unlimited
        /// 	 : decimal
        /// 	 | UNLIMITED
        /// </summary>
        public override AstRoot VisitDecimal_unlimited(TSqlParser.Decimal_unlimitedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstDecimalUnlimited.Create(context, list);
        }
        
        /// <summary>
        /// decimal_size_unlimited
        /// 	 : (decimal  size_unity | UNLIMITED)
        /// </summary>
        public override AstRoot VisitDecimal_size_unlimited(TSqlParser.Decimal_size_unlimitedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDecimalSizeUnlimited(context, list);
        }
        
        /// <summary>
        /// alter_server_audit_condition
        /// 	 : COMMA?  (NOT?)  event_field_id  audit_operator  decimal_string
        /// 	 | COMMA?  and_or  NOT?  audit_operator  decimal_string
        /// </summary>
        public override AstRoot VisitAlter_server_audit_condition(TSqlParser.Alter_server_audit_conditionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAlterServerAuditCondition.Create(context, list);
        }
        
        /// <summary>
        /// create_server_audit_to_infos
        /// 	 : (TO  server_audit_file)?  (WITH  LR_BRACKET  create_server_audit_withs?  RR_BRACKET)?  where_server_audit_condition?
        /// 	 | REMOVE  WHERE
        /// 	 | MODIFY  NAME  EQUAL  audit_id
        /// </summary>
        public override AstRoot VisitCreate_server_audit_to_infos(TSqlParser.Create_server_audit_to_infosContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCreateServerAuditToInfos.Create(context, list);
        }
        
        /// <summary>
        /// create_server_audit_with
        /// 	 : QUEUE_DELAY  EQUAL  queue_delay = decimal
        /// 	 | ON_FAILURE  EQUAL  continue_shutdown
        /// 	 | STATE  EQUAL  state = on_off
        /// 	 | audit1 = audit_guid_id  EQUAL  audit2 = audit_guid_id
        /// </summary>
        public override AstRoot VisitCreate_server_audit_with(TSqlParser.Create_server_audit_withContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCreateServerAuditWith.Create(context, list);
        }
        
        /// <summary>
        /// alter_server_configuration
        /// 	 : ALTER  SERVER  CONFIGURATION  SET  (server_config_process_affinity | server_config_diagnostic_log | server_config_failover | HADR  CLUSTER  CONTEXT  EQUAL  (stringtext | LOCAL) | server_config_buffer_pool_ext | SET  SOFTNUMA  on_off)
        /// </summary>
        public override AstRoot VisitAlter_server_configuration(TSqlParser.Alter_server_configurationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServerConfiguration(context, list);
        }
        
        /// <summary>
        /// server_config_process_affinity
        /// 	 : PROCESS  AFFINITY  (CPU  EQUAL  (AUTO | decimal_range  decimal_ranges) | NUMANODE  EQUAL  decimal_range  decimal_ranges)
        /// </summary>
        public override AstRoot VisitServer_config_process_affinity(TSqlParser.Server_config_process_affinityContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstServerConfigProcessAffinity(context, list);
        }
        
        /// <summary>
        /// server_config_diagnostic_log
        /// 	 : DIAGNOSTICS  LOG  (on_off | PATH  EQUAL  string_or_default | MAX_SIZE  EQUAL  size_value | MAX_FILES  EQUAL  decimal_default)
        /// </summary>
        public override AstRoot VisitServer_config_diagnostic_log(TSqlParser.Server_config_diagnostic_logContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstServerConfigDiagnosticLog(context, list);
        }
        
        /// <summary>
        /// server_config_failover
        /// 	 : FAILOVER  CLUSTER  PROPERTY  (VERBOSELOGGING  EQUAL  verboselogging = string_or_default | SQLDUMPERFLAGS  EQUAL  sqldumperflags = string_or_default | SQLDUMPERPATH  EQUAL  sqldumperpath = string_or_default | SQLDUMPERTIMEOUT  sqldumpertimeout = string_or_default | FAILURECONDITIONLEVEL  EQUAL  failure = string_or_default | HEALTHCHECKTIMEOUT  EQUAL  health = decimal_default)
        /// </summary>
        public override AstRoot VisitServer_config_failover(TSqlParser.Server_config_failoverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstServerConfigFailover(context, list);
        }
        
        /// <summary>
        /// server_config_buffer_pool_ext
        /// 	 : BUFFER  POOL  EXTENSION  (ON  LR_BRACKET  FILENAME  EQUAL  filename = stringtext  COMMA  SIZE  EQUAL  size = decimal  size_unity  RR_BRACKET | OFF)
        /// </summary>
        public override AstRoot VisitServer_config_buffer_pool_ext(TSqlParser.Server_config_buffer_pool_extContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstServerConfigBufferPoolExt(context, list);
        }
        
        /// <summary>
        /// string_or_default
        /// 	 : stringtext
        /// 	 | DEFAULT
        /// </summary>
        public override AstRoot VisitString_or_default(TSqlParser.String_or_defaultContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstStringOrDefault.Create(context, list);
        }
        
        /// <summary>
        /// contract
        /// 	 : modified_contract_id
        /// 	 | DEFAULT
        /// </summary>
        public override AstRoot VisitContract(TSqlParser.ContractContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstContract.Create(context, list);
        }
        
        /// <summary>
        /// alter_service_master_key
        /// 	 : ALTER  SERVICE  MASTER  KEY  (FORCE?  REGENERATE | (WITH  (OLD_ACCOUNT  EQUAL  acold_account_name = stringtext  COMMA  OLD_PASSWORD  EQUAL  old_password = stringtext | NEW_ACCOUNT  EQUAL  new_account_name = stringtext  COMMA  NEW_PASSWORD  EQUAL  new_password = stringtext)?))
        /// </summary>
        public override AstRoot VisitAlter_service_master_key(TSqlParser.Alter_service_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServiceMasterKey(context, list);
        }
        
        /// <summary>
        /// alter_user_item
        /// 	 : NAME  EQUAL  user_id
        /// 	 | DEFAULT_SCHEMA  EQUAL  (schema_id | NULL_)
        /// 	 | LOGIN  EQUAL  login_id
        /// 	 | PASSWORD  EQUAL  newpwd = stringtext  (OLD_PASSWORD  EQUAL  oldpwd = stringtext)+
        /// 	 | DEFAULT_LANGUAGE  EQUAL  (NONE | lcid = decimal | language)
        /// 	 | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitAlter_user_item(TSqlParser.Alter_user_itemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAlterUserItem.Create(context, list);
        }
        
        /// <summary>
        /// create_user
        /// 	 : CREATE  USER  user_id  create_user_with_login
        /// 	 | CREATE  USER  create_user_windows_principal_id
        /// 	 | CREATE  USER  user_id  create_user_without_login?
        /// </summary>
        public override AstRoot VisitCreate_user(TSqlParser.Create_userContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCreateUser.Create(context, list);
        }
        
        /// <summary>
        /// create_user_with_login
        /// 	 : (for_from  LOGIN  login_id)?  (WITH  user_settings_short*)?
        /// </summary>
        public override AstRoot VisitCreate_user_with_login(TSqlParser.Create_user_with_loginContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateUserWithLogin(context, list);
        }
        
        /// <summary>
        /// create_user_without_login
        /// 	 : WITHOUT  LOGIN  user_settings_short*
        /// 	 | for_from  CERTIFICATE  certificate_id
        /// 	 | for_from  ASYMMETRIC  KEY  asym_key_id
        /// </summary>
        public override AstRoot VisitCreate_user_without_login(TSqlParser.Create_user_without_loginContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCreateUserWithoutLogin.Create(context, list);
        }
        
        /// <summary>
        /// create_user_windows_principal_id
        /// 	 : windows_principal_id  (WITH  user_settings*)?
        /// 	 | user_id  WITH  PASSWORD  EQUAL  password = stringtext  user_settings*
        /// 	 | user_id  FROM  EXTERNAL  PROVIDER
        /// </summary>
        public override AstRoot VisitCreate_user_windows_principal_id(TSqlParser.Create_user_windows_principal_idContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCreateUserWindowsPrincipalId.Create(context, list);
        }
        
        /// <summary>
        /// user_settings_short
        /// 	 : COMMA?  DEFAULT_SCHEMA  EQUAL  schema_id
        /// 	 | COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitUser_settings_short(TSqlParser.User_settings_shortContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstUserSettingsShort.Create(context, list);
        }
        
        /// <summary>
        /// user_settings
        /// 	 : COMMA?  DEFAULT_SCHEMA  EQUAL  schema_id
        /// 	 | COMMA?  DEFAULT_LANGUAGE  EQUAL  (NONE | decimal | language)
        /// 	 | COMMA?  SID  EQUAL  binary_
        /// 	 | COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitUser_settings(TSqlParser.User_settingsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstUserSettings.Create(context, list);
        }
        
        /// <summary>
        /// create_user_azure_sql_dw
        /// 	 : CREATE  USER  user_id  (for_from  LOGIN  login_id | WITHOUT  LOGIN)?  (WITH  DEFAULT_SCHEMA  EQUAL  schema_id)?
        /// 	 | CREATE  USER  user_id  FROM  EXTERNAL  PROVIDER  (WITH  DEFAULT_SCHEMA  EQUAL  schema_id)?
        /// </summary>
        public override AstRoot VisitCreate_user_azure_sql_dw(TSqlParser.Create_user_azure_sql_dwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCreateUserAzureSqlDw.Create(context, list);
        }
        
        /// <summary>
        /// alter_user_azure_sql_info
        /// 	 : (NAME  EQUAL  user_id | DEFAULT_SCHEMA  EQUAL  schema_id | LOGIN  EQUAL  login_id | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off)+
        /// </summary>
        public override AstRoot VisitAlter_user_azure_sql_info(TSqlParser.Alter_user_azure_sql_infoContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterUserAzureSqlInfo(context, list);
        }
        
        /// <summary>
        /// alter_workload_group_using
        /// 	 : USING  (workload_group_pool_id | DEFAULT_DOUBLE_QUOTE)
        /// </summary>
        public override AstRoot VisitAlter_workload_group_using(TSqlParser.Alter_workload_group_usingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterWorkloadGroupUsing(context, list);
        }
        
        /// <summary>
        /// queue_settings
        /// 	 : WITH  (STATUS  EQUAL  status = on_off  COMMA?)?  (RETENTION  EQUAL  retention = on_off  COMMA?)?  (ACTIVATION  LR_BRACKET  (((STATUS  EQUAL  activation_status = on_off  COMMA?)?  (PROCEDURE_NAME  EQUAL  func_proc_name_database_schema_ref  COMMA?)?  (MAX_QUEUE_READERS  EQUAL  max_readers = decimal  COMMA?)?  (EXECUTE  AS  (SELF | username = stringtext | OWNER)  COMMA?)?) | DROP)  RR_BRACKET  COMMA?)?  (POISON_MESSAGE_HANDLING  LR_BRACKET  (STATUS  EQUAL  on_off)  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitQueue_settings(TSqlParser.Queue_settingsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQueueSettings(context, list);
        }
        
        /// <summary>
        /// alter_queue
        /// 	 : ALTER  QUEUE  (complete_table_ref | queue_id)  (queue_settings | queue_action)
        /// </summary>
        public override AstRoot VisitAlter_queue(TSqlParser.Alter_queueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterQueue(context, list);
        }
        
        /// <summary>
        /// queue_action
        /// 	 : REBUILD  (WITH  LR_BRACKET  queue_rebuild_options  RR_BRACKET)?
        /// 	 | REORGANIZE  (WITH  LOB_COMPACTION  EQUAL  on_off)?
        /// 	 | MOVE  TO  (id_ | DEFAULT)
        /// </summary>
        public override AstRoot VisitQueue_action(TSqlParser.Queue_actionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstQueueAction.Create(context, list);
        }
        
        /// <summary>
        /// conversation_statement
        /// 	 : begin_conversation_timer
        /// 	 | begin_conversation_dialog
        /// 	 | end_conversation
        /// 	 | get_conversation
        /// 	 | send_conversation
        /// 	 | waitfor_conversation
        /// </summary>
        public override AstRoot VisitConversation_statement(TSqlParser.Conversation_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstConversationStatement.Create(context, list);
        }
        
        /// <summary>
        /// when_matche
        /// 	 : (WHEN  MATCHED  (AND  search_condition)?  THEN  merge_matched)+
        /// 	 | (WHEN  NOT  MATCHED  (BY  TARGET)?  (AND  search_condition)?  THEN  merge_not_matched)
        /// 	 | (WHEN  NOT  MATCHED  BY  SOURCE  (AND  search_condition)?  THEN  merge_matched)+
        /// </summary>
        public override AstRoot VisitWhen_matche(TSqlParser.When_matcheContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstWhenMatche.Create(context, list);
        }
        
        /// <summary>
        /// merge_matched
        /// 	 : UPDATE  SET  update_elem_merges
        /// 	 | DELETE
        /// </summary>
        public override AstRoot VisitMerge_matched(TSqlParser.Merge_matchedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstMergeMatched.Create(context, list);
        }
        
        /// <summary>
        /// merge_not_matched
        /// 	 : INSERT  (LR_BRACKET  column_name_list  RR_BRACKET)?  (table_value_constructor | DEFAULT  VALUES)
        /// </summary>
        public override AstRoot VisitMerge_not_matched(TSqlParser.Merge_not_matchedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMergeNotMatched(context, list);
        }
        
        /// <summary>
        /// delete_statement_from
        /// 	 : ddl_object
        /// 	 | rowset_function_limited
        /// 	 | table_var = local_id
        /// </summary>
        public override AstRoot VisitDelete_statement_from(TSqlParser.Delete_statement_fromContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstDeleteStatementFrom.Create(context, list);
        }
        
        /// <summary>
        /// insert_statement_value
        /// 	 : table_value_constructor
        /// 	 | derived_table
        /// 	 | execute_statement
        /// 	 | DEFAULT  VALUES
        /// </summary>
        public override AstRoot VisitInsert_statement_value(TSqlParser.Insert_statement_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstInsertStatementValue.Create(context, list);
        }
        
        /// <summary>
        /// receive_mode
        /// 	 : receive_mode_enum
        /// 	 | top_clause
        /// </summary>
        public override AstRoot VisitReceive_mode(TSqlParser.Receive_modeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstReceiveMode.Create(context, list);
        }
        
        /// <summary>
        /// time
        /// 	 : (local_id | constant)
        /// </summary>
        public override AstRoot VisitTime(TSqlParser.TimeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTime(context, list);
        }
        
        /// <summary>
        /// relational_index_option
        /// 	 : rebuild_index_option
        /// 	 | DROP_EXISTING  EQUAL  on_off
        /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitRelational_index_option(TSqlParser.Relational_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstRelationalIndexOption.Create(context, list);
        }
        
        /// <summary>
        /// index_status
        /// 	 : index_status_enum
        /// 	 | RESUME  resumable_index_options?
        /// 	 | reorganize_partition
        /// 	 | set_index_options
        /// 	 | rebuild_partition
        /// </summary>
        public override AstRoot VisitIndex_status(TSqlParser.Index_statusContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstIndexStatus.Create(context, list);
        }
        
        /// <summary>
        /// index_name
        /// 	 : (id_ | ALL)
        /// </summary>
        public override AstRoot VisitIndex_name(TSqlParser.Index_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstIndexName(context, list);
        }
        
        /// <summary>
        /// resumable_index_option
        /// 	 : MAXDOP  EQUAL  max_degree_of_parallelism = decimal
        /// 	 | MAX_DURATION  EQUAL  max_duration = decimal  MINUTES?
        /// 	 | low_priority_lock_wait
        /// </summary>
        public override AstRoot VisitResumable_index_option(TSqlParser.Resumable_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstResumableIndexOption.Create(context, list);
        }
        
        /// <summary>
        /// reorganize_option
        /// 	 : LOB_COMPACTION  EQUAL  on_off
        /// 	 | COMPRESS_ALL_ROW_GROUPS  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitReorganize_option(TSqlParser.Reorganize_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstReorganizeOption.Create(context, list);
        }
        
        /// <summary>
        /// set_index_option
        /// 	 : ALLOW_ROW_LOCKS  EQUAL  on_off
        /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
        /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
        /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
        /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
        /// 	 | COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES?
        /// </summary>
        public override AstRoot VisitSet_index_option(TSqlParser.Set_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstSetIndexOption.Create(context, list);
        }
        
        /// <summary>
        /// rebuild_partition
        /// 	 : REBUILD  (PARTITION  EQUAL  ALL)?  rebuild_index_options?
        /// 	 | REBUILD  PARTITION  EQUAL  decimal  single_partition_rebuild_index_options?
        /// </summary>
        public override AstRoot VisitRebuild_partition(TSqlParser.Rebuild_partitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstRebuildPartition.Create(context, list);
        }
        
        /// <summary>
        /// rebuild_index_option
        /// 	 : PAD_INDEX  EQUAL  on_off
        /// 	 | FILLFACTOR  EQUAL  decimal
        /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
        /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
        /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
        /// 	 | STATISTICS_INCREMENTAL  EQUAL  on_off
        /// 	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
        /// 	 | RESUMABLE  EQUAL  on_off
        /// 	 | MAX_DURATION  EQUAL  times = decimal  MINUTES?
        /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
        /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
        /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
        /// 	 | DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions?
        /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
        /// </summary>
        public override AstRoot VisitRebuild_index_option(TSqlParser.Rebuild_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstRebuildIndexOption.Create(context, list);
        }
        
        /// <summary>
        /// single_partition_rebuild_index_option
        /// 	 : SORT_IN_TEMPDB  EQUAL  on_off
        /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
        /// 	 | RESUMABLE  EQUAL  on_off
        /// 	 | DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions?
        /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
        /// 	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
        /// </summary>
        public override AstRoot VisitSingle_partition_rebuild_index_option(TSqlParser.Single_partition_rebuild_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstSinglePartitionRebuildIndexOption.Create(context, list);
        }
        
        /// <summary>
        /// partition_nums
        /// 	 : partition_number = decimal  (TO  to_partition_number = decimal)?
        /// </summary>
        public override AstRoot VisitPartition_nums(TSqlParser.Partition_numsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPartitionNums(context, list);
        }
        
        /// <summary>
        /// columnstore_index_option
        /// 	 : DROP_EXISTING  EQUAL  drop_existing = on_off
        /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
        /// 	 | ONLINE  EQUAL  online = on_off
        /// 	 | COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES?
        /// 	 | DATA_COMPRESSION  EQUAL  datacompression_column_mode  on_partitions?
        /// </summary>
        public override AstRoot VisitColumnstore_index_option(TSqlParser.Columnstore_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstColumnstoreIndexOption.Create(context, list);
        }
        
        /// <summary>
        /// xml_index_option
        /// 	 : PAD_INDEX  EQUAL  pad_index = on_off
        /// 	 | FILLFACTOR  EQUAL  fillfactor = decimal
        /// 	 | SORT_IN_TEMPDB  EQUAL  sort_in_tempdb = on_off
        /// 	 | IGNORE_DUP_KEY  EQUAL  ignore_dup_key = on_off
        /// 	 | DROP_EXISTING  EQUAL  drop_existing = on_off
        /// 	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
        /// 	 | ALLOW_ROW_LOCKS  EQUAL  allow_row_loks = on_off
        /// 	 | ALLOW_PAGE_LOCKS  EQUAL  allow_page_locks = on_off
        /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
        /// 	 | XML_COMPRESSION  EQUAL  xml_compression = on_off
        /// </summary>
        public override AstRoot VisitXml_index_option(TSqlParser.Xml_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstXmlIndexOption.Create(context, list);
        }
        
        /// <summary>
        /// create_or_alter_trigger
        /// 	 : create_or_alter_dml_trigger
        /// 	 | create_or_alter_ddl_trigger
        /// </summary>
        public override AstRoot VisitCreate_or_alter_trigger(TSqlParser.Create_or_alter_triggerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCreateOrAlterTrigger.Create(context, list);
        }
        
        /// <summary>
        /// for_after_instead
        /// 	 : FOR
        /// 	 | AFTER
        /// 	 | INSTEAD  OF
        /// </summary>
        public override AstRoot VisitFor_after_instead(TSqlParser.For_after_insteadContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstForAfterInstead.Create(context, list);
        }
        
        /// <summary>
        /// dml_trigger_option
        /// 	 : ENCRYPTION
        /// 	 | execute_clause
        /// </summary>
        public override AstRoot VisitDml_trigger_option(TSqlParser.Dml_trigger_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstDmlTriggerOption.Create(context, list);
        }
        
        /// <summary>
        /// create_or_alter_function
        /// 	 : ((CREATE  (OR  ALTER)?) | ALTER)  FUNCTION  funcName = schema_func_proc_ref  ((LR_BRACKET  procedure_params  RR_BRACKET) | LR_BRACKET  RR_BRACKET)  (func_body_returns_select | func_body_returns_table | func_body_returns_scalar)  SEMI?
        /// </summary>
        public override AstRoot VisitCreate_or_alter_function(TSqlParser.Create_or_alter_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterFunction(context, list);
        }
        
        /// <summary>
        /// procedure_option
        /// 	 : procedure_option_enum
        /// 	 | execute_clause
        /// </summary>
        public override AstRoot VisitProcedure_option(TSqlParser.Procedure_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstProcedureOption.Create(context, list);
        }
        
        /// <summary>
        /// function_option
        /// 	 : function_option_enum
        /// 	 | execute_clause
        /// </summary>
        public override AstRoot VisitFunction_option(TSqlParser.Function_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstFunctionOption.Create(context, list);
        }
        
        /// <summary>
        /// statistics_with
        /// 	 : FULLSCAN
        /// 	 | SAMPLE  decimal  percent_row
        /// 	 | STATS_STREAM
        /// </summary>
        public override AstRoot VisitStatistics_with(TSqlParser.Statistics_withContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstStatisticsWith.Create(context, list);
        }
        
        /// <summary>
        /// update_statistics_option
        /// 	 : (FULLSCAN  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
        /// 	 | (SAMPLE  number = decimal  percent_row  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
        /// 	 | RESAMPLE  on_partitions?
        /// 	 | STATS_STREAM  EQUAL  stats_stream_ = expression
        /// 	 | ROWCOUNT  EQUAL  decimal
        /// 	 | PAGECOUNT  EQUAL  decimal
        /// 	 | ALL
        /// 	 | COLUMNS
        /// 	 | INDEX
        /// 	 | NORECOMPUTE
        /// 	 | INCREMENTAL  EQUAL  on_off
        /// 	 | MAXDOP  EQUAL  max_dregree_of_parallelism = decimal
        /// 	 | AUTO_DROP  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitUpdate_statistics_option(TSqlParser.Update_statistics_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstUpdateStatisticsOption.Create(context, list);
        }
        
        /// <summary>
        /// table_indices
        /// 	 : INDEX  id_  UNIQUE?  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET
        /// 	 | INDEX  id_  CLUSTERED  COLUMNSTORE
        /// 	 | INDEX  id_  NONCLUSTERED?  COLUMNSTORE  LR_BRACKET  column_name_list  RR_BRACKET  create_table_index_options?  (ON  group_id)?
        /// </summary>
        public override AstRoot VisitTable_indices(TSqlParser.Table_indicesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstTableIndices.Create(context, list);
        }
        
        /// <summary>
        /// tbl_option
        /// 	 : WITH  LR_BRACKET  tableoptions  RR_BRACKET
        /// 	 | tableoptions
        /// </summary>
        public override AstRoot VisitTbl_option(TSqlParser.Tbl_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstTblOption.Create(context, list);
        }
        
        /// <summary>
        /// tableoption
        /// 	 : table_opt_varname  EQUAL  table_opt_var_value
        /// 	 | tableoption_cluster_mode
        /// 	 | FILLFACTOR  EQUAL  decimal
        /// 	 | distribution
        /// 	 | DATA_COMPRESSION  EQUAL  compression_mode  on_partitions?
        /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
        /// </summary>
        public override AstRoot VisitTableoption(TSqlParser.TableoptionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstTableoption.Create(context, list);
        }
        
        /// <summary>
        /// table_opt_varname
        /// 	 : (simple_id | keyword)
        /// </summary>
        public override AstRoot VisitTable_opt_varname(TSqlParser.Table_opt_varnameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableOptVarname(context, list);
        }
        
        /// <summary>
        /// table_opt_var_value
        /// 	 : (simple_id | keyword | on_off | decimal)
        /// </summary>
        public override AstRoot VisitTable_opt_var_value(TSqlParser.Table_opt_var_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableOptVarValue(context, list);
        }
        
        /// <summary>
        /// distribution
        /// 	 : DISTRIBUTION  EQUAL  HASH  LR_BRACKET  id_  RR_BRACKET
        /// 	 | CLUSTERED  INDEX  LR_BRACKET  column_name_list_with_order  RR_BRACKET
        /// </summary>
        public override AstRoot VisitDistribution(TSqlParser.DistributionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstDistribution.Create(context, list);
        }
        
        /// <summary>
        /// alter_table_constraint
        /// 	 : (CONSTRAINT  constraint_id)?  alter_table_constraint_foreign
        /// 	 | CHECK  LR_BRACKET  search_condition  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_table_constraint(TSqlParser.Alter_table_constraintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAlterTableConstraint.Create(context, list);
        }
        
        /// <summary>
        /// constraint_delete_or_update
        /// 	 : on_delete
        /// 	 | on_update
        /// </summary>
        public override AstRoot VisitConstraint_delete_or_update(TSqlParser.Constraint_delete_or_updateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstConstraintDeleteOrUpdate.Create(context, list);
        }
        
        /// <summary>
        /// switch_partition
        /// 	 : (PARTITION?  source_partition_number_expression = expression)?  TO  target_table = full_table_ref  (PARTITION  target_partition_number_expression = expression)?  (WITH  low_priority_lock_wait)?
        /// </summary>
        public override AstRoot VisitSwitch_partition(TSqlParser.Switch_partitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSwitchPartition(context, list);
        }
        
        /// <summary>
        /// low_priority_lock_wait
        /// 	 : WAIT_AT_LOW_PRIORITY  LR_BRACKET  MAX_DURATION  EQUAL  max_duration = time  MINUTES?  COMMA  ABORT_AFTER_WAIT  EQUAL  abort_after_wait = abord_after_mode  RR_BRACKET
        /// </summary>
        public override AstRoot VisitLow_priority_lock_wait(TSqlParser.Low_priority_lock_waitContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstLowPriorityLockWait(context, list);
        }
        
        /// <summary>
        /// alter_database_new_infos
        /// 	 : MODIFY  NAME  EQUAL  database_id
        /// 	 | COLLATE  collation_id
        /// 	 | SET  database_optionspec  (WITH  termination)?
        /// 	 | add_or_modify_files
        /// 	 | add_or_modify_filegroups
        /// </summary>
        public override AstRoot VisitAlter_database_new_infos(TSqlParser.Alter_database_new_infosContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAlterDatabaseNewInfos.Create(context, list);
        }
        
        /// <summary>
        /// add_or_modify_files
        /// 	 : ADD  FILE  filespecs  (TO  FILEGROUP  file_group_id)?
        /// 	 | ADD  LOG  FILE  filespecs
        /// 	 | REMOVE  FILE  file_group_id
        /// 	 | MODIFY  FILE  filespec
        /// </summary>
        public override AstRoot VisitAdd_or_modify_files(TSqlParser.Add_or_modify_filesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAddOrModifyFiles.Create(context, list);
        }
        
        /// <summary>
        /// add_or_modify_filegroups
        /// 	 : ADD  FILEGROUP  file_group_id  filegroup_predicate?
        /// 	 | REMOVE  FILEGROUP  file_group_id
        /// 	 | MODIFY  FILEGROUP  file_group_id  (filegroup_updatability_option | DEFAULT | NAME  EQUAL  new_name = file_group_id | AUTOGROW_SINGLE_FILE | AUTOGROW_ALL_FILES)
        /// </summary>
        public override AstRoot VisitAdd_or_modify_filegroups(TSqlParser.Add_or_modify_filegroupsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAddOrModifyFilegroups.Create(context, list);
        }
        
        /// <summary>
        /// database_optionspec
        /// 	 : auto_option
        /// 	 | change_tracking
        /// 	 | containment_option
        /// 	 | cursor_option
        /// 	 | database_mirroring_option
        /// 	 | date_correlation_optimization_option
        /// 	 | db_encryption_option
        /// 	 | db_state_option
        /// 	 | db_update_option
        /// 	 | db_user_access_option
        /// 	 | delayed_durability_option
        /// 	 | external_access_option
        /// 	 | FILESTREAM  database_filestream_option
        /// 	 | hadr_options
        /// 	 | mixed_page_allocation_option
        /// 	 | parameterization_option
        /// 	 | recovery_option
        /// 	 | service_broker_option
        /// 	 | snapshot_option
        /// 	 | sql_option
        /// 	 | target_recovery_time_option
        /// 	 | termination
        /// </summary>
        public override AstRoot VisitDatabase_optionspec(TSqlParser.Database_optionspecContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstDatabaseOptionspec.Create(context, list);
        }
        
        /// <summary>
        /// auto_option
        /// 	 : AUTO_CLOSE  on_off
        /// 	 | AUTO_CREATE_STATISTICS  statistic_value
        /// 	 | AUTO_SHRINK  on_off
        /// 	 | AUTO_UPDATE_STATISTICS  on_off
        /// 	 | AUTO_UPDATE_STATISTICS_ASYNC  on_off
        /// </summary>
        public override AstRoot VisitAuto_option(TSqlParser.Auto_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAutoOption.Create(context, list);
        }
        
        /// <summary>
        /// change_tracking
        /// 	 : CHANGE_TRACKING  EQUAL  (OFF | ON  change_tracking_option_list)
        /// </summary>
        public override AstRoot VisitChange_tracking(TSqlParser.Change_trackingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstChangeTracking(context, list);
        }
        
        /// <summary>
        /// change_tracking_option_list
        /// 	 : AUTO_CLEANUP  EQUAL  on_off
        /// 	 | CHANGE_RETENTION  EQUAL  period
        /// </summary>
        public override AstRoot VisitChange_tracking_option_list(TSqlParser.Change_tracking_option_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstChangeTrackingOptionList.Create(context, list);
        }
        
        /// <summary>
        /// cursor_option
        /// 	 : CURSOR_CLOSE_ON_COMMIT  on_off
        /// 	 | CURSOR_DEFAULT  local_global
        /// </summary>
        public override AstRoot VisitCursor_option(TSqlParser.Cursor_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCursorOption.Create(context, list);
        }
        
        /// <summary>
        /// listener_ip
        /// 	 : LISTENER_IP  EQUAL  (ALL | ipv4 | ipv6 | stringtext)
        /// </summary>
        public override AstRoot VisitListener_ip(TSqlParser.Listener_ipContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstListenerIp(context, list);
        }
        
        /// <summary>
        /// authentication_configuration
        /// 	 : AUTHENTICATION  EQUAL  (WINDOWS  authentication_mode?  (CERTIFICATE  certificate_id)? | CERTIFICATE  certificate_id  WINDOWS?  authentication_mode?)
        /// </summary>
        public override AstRoot VisitAuthentication_configuration(TSqlParser.Authentication_configurationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAuthenticationConfiguration(context, list);
        }
        
        /// <summary>
        /// mirroring_set_option
        /// 	 : mirroring_partner  partner_option
        /// 	 | mirroring_witness  witness_option
        /// </summary>
        public override AstRoot VisitMirroring_set_option(TSqlParser.Mirroring_set_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstMirroringSetOption.Create(context, list);
        }
        
        /// <summary>
        /// partner_option
        /// 	 : witness_partner_equal  partner_server
        /// 	 | TIMEOUT  decimal
        /// 	 | partner_option_enum
        /// </summary>
        public override AstRoot VisitPartner_option(TSqlParser.Partner_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstPartnerOption.Create(context, list);
        }
        
        /// <summary>
        /// witness_option
        /// 	 : witness_partner_equal  witness_server
        /// 	 | OFF
        /// </summary>
        public override AstRoot VisitWitness_option(TSqlParser.Witness_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstWitnessOption.Create(context, list);
        }
        
        /// <summary>
        /// partner_server_tcp_prefix
        /// 	 : TCP  COLON  DOUBLE_FORWARD_SLASH
        /// </summary>
        public override AstRoot VisitPartner_server_tcp_prefix(TSqlParser.Partner_server_tcp_prefixContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPartnerServerTcpPrefix(context, list);
        }
        
        /// <summary>
        /// external_access_option
        /// 	 : DB_CHAINING  on_off
        /// 	 | TRUSTWORTHY  on_off
        /// 	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
        /// 	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
        /// 	 | NESTED_TRIGGERS  EQUAL  on_off
        /// 	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
        /// 	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal
        /// </summary>
        public override AstRoot VisitExternal_access_option(TSqlParser.External_access_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstExternalAccessOption.Create(context, list);
        }
        
        /// <summary>
        /// hadr_options
        /// 	 : HADR  ((AVAILABILITY  GROUP  EQUAL  group_id | OFF) | suspend_resume)
        /// </summary>
        public override AstRoot VisitHadr_options(TSqlParser.Hadr_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstHadrOptions(context, list);
        }
        
        /// <summary>
        /// recovery_option
        /// 	 : recovery_option_enum
        /// 	 | TORN_PAGE_DETECTION  on_off
        /// 	 | ACCELERATED_DATABASE_RECOVERY  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitRecovery_option(TSqlParser.Recovery_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstRecoveryOption.Create(context, list);
        }
        
        /// <summary>
        /// service_broker_option
        /// 	 : ENABLE_BROKER
        /// 	 | DISABLE_BROKER
        /// 	 | NEW_BROKER
        /// 	 | ERROR_BROKER_CONVERSATIONS
        /// 	 | HONOR_BROKER_PRIORITY  on_off
        /// </summary>
        public override AstRoot VisitService_broker_option(TSqlParser.Service_broker_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstServiceBrokerOption.Create(context, list);
        }
        
        /// <summary>
        /// snapshot_option
        /// 	 : ALLOW_SNAPSHOT_ISOLATION  on_off
        /// 	 | READ_COMMITTED_SNAPSHOT  on_off
        /// 	 | MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = on_off
        /// </summary>
        public override AstRoot VisitSnapshot_option(TSqlParser.Snapshot_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstSnapshotOption.Create(context, list);
        }
        
        /// <summary>
        /// sql_option
        /// 	 : ANSI_NULL_DEFAULT  on_off
        /// 	 | ANSI_NULLS  on_off
        /// 	 | ANSI_PADDING  on_off
        /// 	 | ANSI_WARNINGS  on_off
        /// 	 | ARITHABORT  on_off
        /// 	 | COMPATIBILITY_LEVEL  EQUAL  decimal
        /// 	 | CONCAT_NULL_YIELDS_NULL  on_off
        /// 	 | NUMERIC_ROUNDABORT  on_off
        /// 	 | QUOTED_IDENTIFIER  on_off
        /// 	 | RECURSIVE_TRIGGERS  on_off
        /// </summary>
        public override AstRoot VisitSql_option(TSqlParser.Sql_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstSqlOption.Create(context, list);
        }
        
        /// <summary>
        /// termination
        /// 	 : ROLLBACK  AFTER  seconds = decimal
        /// 	 | ROLLBACK  IMMEDIATE
        /// 	 | NO_WAIT
        /// </summary>
        public override AstRoot VisitTermination(TSqlParser.TerminationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstTermination.Create(context, list);
        }
        
        /// <summary>
        /// drop_trigger
        /// 	 : drop_dml_trigger
        /// 	 | drop_ddl_trigger
        /// </summary>
        public override AstRoot VisitDrop_trigger(TSqlParser.Drop_triggerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstDropTrigger.Create(context, list);
        }
        
        /// <summary>
        /// if_exists
        /// 	 : IF  EXISTS
        /// </summary>
        public override AstRoot VisitIf_exists(TSqlParser.If_existsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstIfExists(context, list);
        }
        
        /// <summary>
        /// create_type
        /// 	 : CREATE  TYPE  name = schema_type_ref  (FROM  data_type  default_value)?  (AS  TABLE  LR_BRACKET  column_def_table_constraints  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitCreate_type(TSqlParser.Create_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateType(context, list);
        }
        
        /// <summary>
        /// drop_type
        /// 	 : DROP  TYPE  (IF  EXISTS)?  name = schema_type_ref
        /// </summary>
        public override AstRoot VisitDrop_type(TSqlParser.Drop_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropType(context, list);
        }
        
        /// <summary>
        /// rowset_function_limited
        /// 	 : openquery
        /// 	 | opendatasource
        /// </summary>
        public override AstRoot VisitRowset_function_limited(TSqlParser.Rowset_function_limitedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstRowsetFunctionLimited.Create(context, list);
        }
        
        /// <summary>
        /// declare_statement
        /// 	 : DECLARE  local_id  AS?  (table_type_definition | full_table_ref)  SEMI?
        /// 	 | DECLARE  loc += declare_locals  SEMI?
        /// 	 | DECLARE  local_id  AS?  xml_type_definition  SEMI?
        /// 	 | WITH  XMLNAMESPACES  LR_BRACKET  xml_dec += xml_declarations  RR_BRACKET  SEMI?
        /// </summary>
        public override AstRoot VisitDeclare_statement(TSqlParser.Declare_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstDeclareStatement.Create(context, list);
        }
        
        /// <summary>
        /// xml_declaration
        /// 	 : xml_namespace_uri = stringtext  AS  id_
        /// 	 | DEFAULT  stringtext
        /// </summary>
        public override AstRoot VisitXml_declaration(TSqlParser.Xml_declarationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstXmlDeclaration.Create(context, list);
        }
        
        /// <summary>
        /// cursor_statement
        /// 	 : CLOSE  GLOBAL?  cursor_name  SEMI?
        /// 	 | DEALLOCATE  GLOBAL?  CURSOR?  cursor_name  SEMI?
        /// 	 | declare_cursor
        /// 	 | fetch_cursor
        /// 	 | OPEN  GLOBAL?  cursor_name  SEMI?
        /// </summary>
        public override AstRoot VisitCursor_statement(TSqlParser.Cursor_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCursorStatement.Create(context, list);
        }
        
        /// <summary>
        /// backup_to
        /// 	 : TO  (logical_device_ids  TO  disk_tape_url_values)
        /// </summary>
        public override AstRoot VisitBackup_to(TSqlParser.Backup_toContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBackupTo(context, list);
        }
        
        /// <summary>
        /// backup_to_mirror
        /// 	 : MIRROR  TO  (logical_device_ids | disk_tape_url_values)
        /// </summary>
        public override AstRoot VisitBackup_to_mirror(TSqlParser.Backup_to_mirrorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBackupToMirror(context, list);
        }
        
        /// <summary>
        /// backup_certificate_private_key
        /// 	 : FILE  EQUAL  private_key_file = stringtext
        /// 	 | by_password_crypt
        /// </summary>
        public override AstRoot VisitBackup_certificate_private_key(TSqlParser.Backup_certificate_private_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstBackupCertificatePrivateKey.Create(context, list);
        }
        
        /// <summary>
        /// backup_setting
        /// 	 : DIFFERENTIAL
        /// 	 | COPY_ONLY
        /// 	 | CREDENTIAL
        /// 	 | FILE_SNAPSHOT
        /// 	 | NO_CHECKSUM
        /// 	 | CHECKSUM
        /// 	 | STOP_ON_ERROR
        /// 	 | CONTINUE_AFTER_ERROR
        /// 	 | RESTART
        /// 	 | DESCRIPTION  EQUAL  string_id
        /// 	 | NAME  EQUAL  backup_id
        /// 	 | EXPIREDATE  EQUAL  string_id
        /// 	 | RETAINDAYS  EQUAL  decimal_id
        /// 	 | MEDIADESCRIPTION  EQUAL  string_id
        /// 	 | MEDIANAME  EQUAL  stringtext
        /// 	 | BLOCKSIZE  EQUAL  decimal_id
        /// 	 | BUFFERCOUNT  EQUAL  decimal_id
        /// 	 | MAXTRANSFER  EQUAL  decimal_id
        /// 	 | STATS  (EQUAL  decimal)?
        /// 	 | ENCRYPTION  LR_BRACKET  ALGORITHM  EQUAL  algorithm_short  COMMA  SERVER  CERTIFICATE  EQUAL  (encryptor_id | SERVER  ASYMMETRIC  KEY  EQUAL  encryptor_id)  RR_BRACKET
        /// 	 | compression
        /// 	 | rewind
        /// 	 | load_moun_load
        /// 	 | init_no_init
        /// 	 | no_skip
        /// 	 | format_noformat
        /// </summary>
        public override AstRoot VisitBackup_setting(TSqlParser.Backup_settingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstBackupSetting.Create(context, list);
        }
        
        /// <summary>
        /// kill_statement
        /// 	 : KILL  (kill_process | kill_query_notification | kill_stats_job)
        /// </summary>
        public override AstRoot VisitKill_statement(TSqlParser.Kill_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstKillStatement(context, list);
        }
        
        /// <summary>
        /// kill_process
        /// 	 : (session = decimal_string | UOW)  (WITH  STATUSONLY)?
        /// </summary>
        public override AstRoot VisitKill_process(TSqlParser.Kill_processContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstKillProcess(context, list);
        }
        
        /// <summary>
        /// kill_query_notification
        /// 	 : QUERY  NOTIFICATION  SUBSCRIPTION  (ALL | subscription = decimal)
        /// </summary>
        public override AstRoot VisitKill_query_notification(TSqlParser.Kill_query_notificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstKillQueryNotification(context, list);
        }
        
        /// <summary>
        /// kill_stats_job
        /// 	 : STATS  JOB  job = decimal
        /// </summary>
        public override AstRoot VisitKill_stats_job(TSqlParser.Kill_stats_jobContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstKillStatsJob(context, list);
        }
        
        /// <summary>
        /// execute_body
        /// 	 : (return_status = local_id  EQUAL)?  (func_proc_name_server_database_schema | execute_var_string)  execute_statement_arg?
        /// 	 | LR_BRACKET  execute_var_strings  RR_BRACKET  (AS?  login_user  EQUAL  stringtext)?  (AT_KEYWORD  server_id)?
        /// </summary>
        public override AstRoot VisitExecute_body(TSqlParser.Execute_bodyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstExecuteBody.Create(context, list);
        }
        
        /// <summary>
        /// execute_statement_arg
        /// 	 : execute_statement_arg_unnamed  execute_statement_args?
        /// 	 | execute_statement_arg_nameds
        /// </summary>
        public override AstRoot VisitExecute_statement_arg(TSqlParser.Execute_statement_argContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstExecuteStatementArg.Create(context, list);
        }
        
        /// <summary>
        /// execute_statement_arg_named
        /// 	 : name = local_id  EQUAL  value = execute_parameter
        /// </summary>
        public override AstRoot VisitExecute_statement_arg_named(TSqlParser.Execute_statement_arg_namedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteStatementArgNamed(context, list);
        }
        
        /// <summary>
        /// execute_statement_arg_unnamed
        /// 	 : value = execute_parameter
        /// </summary>
        public override AstRoot VisitExecute_statement_arg_unnamed(TSqlParser.Execute_statement_arg_unnamedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteStatementArgUnnamed(context, list);
        }
        
        /// <summary>
        /// execute_parameter
        /// 	 : (constant | local_id  output_out? | id_ | DEFAULT | NULL_)
        /// </summary>
        public override AstRoot VisitExecute_parameter(TSqlParser.Execute_parameterContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteParameter(context, list);
        }
        
        /// <summary>
        /// execute_var_string
        /// 	 : source = local_id  output_out?  (PLUS  more = local_id  (PLUS  execute_var_string)?)?
        /// 	 | stringtext  (PLUS  local_id  (PLUS  execute_var_string)?)?
        /// </summary>
        public override AstRoot VisitExecute_var_string(TSqlParser.Execute_var_stringContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstExecuteVarString.Create(context, list);
        }
        
        /// <summary>
        /// security_statement
        /// 	 : execute_clause  SEMI?
        /// 	 | GRANT  (ALL  PRIVILEGES? | grant_permission  (LR_BRACKET  column_name_list  RR_BRACKET)?)  (ON  (class_type_for_grant  DOUBLE_COLON)?  table = full_table_ref)?  TO  to_principal_rincipal_ids  (WITH  GRANT  OPTION)?  (AS  as_principal = principal_id)?  SEMI?
        /// 	 | REVERT  (LR_BRACKET  WITH  COOKIE  EQUAL  local_id  RR_BRACKET)?  SEMI?
        /// 	 | open_key
        /// 	 | close_key
        /// 	 | create_key
        /// 	 | create_certificate
        /// </summary>
        public override AstRoot VisitSecurity_statement(TSqlParser.Security_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstSecurityStatement.Create(context, list);
        }
        
        /// <summary>
        /// existing_keys
        /// 	 : ASSEMBLY  assembly_id
        /// 	 | EXECUTABLE?  FILE  EQUAL  path_to_file = stringtext  (WITH  PRIVATE  KEY  LR_BRACKET  private_key_options  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitExisting_keys(TSqlParser.Existing_keysContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstExistingKeys.Create(context, list);
        }
        
        /// <summary>
        /// private_key_options
        /// 	 : (FILE | binary_)  EQUAL  path = stringtext  (COMMA  encryption_decryption  BY  PASSWORD  EQUAL  password = stringtext)?
        /// </summary>
        public override AstRoot VisitPrivate_key_options(TSqlParser.Private_key_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPrivateKeyOptions(context, list);
        }
        
        /// <summary>
        /// open_key
        /// 	 : OPEN  SYMMETRIC  KEY  symmetric_key_id  DECRYPTION  BY  decryption_mechanism
        /// 	 | OPEN  MASTER  KEY  decryption_by_pwd
        /// </summary>
        public override AstRoot VisitOpen_key(TSqlParser.Open_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstOpenKey.Create(context, list);
        }
        
        /// <summary>
        /// close_key
        /// 	 : CLOSE  SYMMETRIC  KEY  symmetric_key_id
        /// 	 | CLOSE  ALL  SYMMETRIC  KEYS
        /// 	 | CLOSE  MASTER  KEY
        /// </summary>
        public override AstRoot VisitClose_key(TSqlParser.Close_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCloseKey.Create(context, list);
        }
        
        /// <summary>
        /// create_key
        /// 	 : CREATE  MASTER  KEY  encryption_by_pwd
        /// 	 | CREATE  SYMMETRIC  KEY  symmetric_key_id  (AUTHORIZATION  user_id)?  (FROM  PROVIDER  provider_id)?  WITH  ((key_options | ENCRYPTION  BY  encryption_mechanism)  COMMA?)+
        /// </summary>
        public override AstRoot VisitCreate_key(TSqlParser.Create_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCreateKey.Create(context, list);
        }
        
        /// <summary>
        /// key_options
        /// 	 : KEY_SOURCE  EQUAL  pass_phrase = stringtext
        /// 	 | ALGORITHM  EQUAL  algorithm
        /// 	 | IDENTITY_VALUE  EQUAL  identity_phrase = stringtext
        /// 	 | PROVIDER_KEY_NAME  EQUAL  key_name_in_provider = stringtext
        /// 	 | CREATION_DISPOSITION  EQUAL  (CREATE_NEW | OPEN_EXISTING)
        /// </summary>
        public override AstRoot VisitKey_options(TSqlParser.Key_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstKeyOptions.Create(context, list);
        }
        
        /// <summary>
        /// encryption_mechanism
        /// 	 : CERTIFICATE  certificate_id
        /// 	 | ASYMMETRIC  KEY  asym_key_id
        /// 	 | SYMMETRIC  KEY  symmetric_key_id
        /// 	 | PASSWORD  EQUAL  stringtext
        /// </summary>
        public override AstRoot VisitEncryption_mechanism(TSqlParser.Encryption_mechanismContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstEncryptionMechanism.Create(context, list);
        }
        
        /// <summary>
        /// decryption_mechanism
        /// 	 : CERTIFICATE  certificate_id  (WITH  PASSWORD  EQUAL  stringtext)?
        /// 	 | ASYMMETRIC  KEY  asym_key_id  (WITH  PASSWORD  EQUAL  stringtext)?
        /// 	 | SYMMETRIC  KEY  symmetric_key_id
        /// 	 | PASSWORD  EQUAL  stringtext
        /// </summary>
        public override AstRoot VisitDecryption_mechanism(TSqlParser.Decryption_mechanismContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstDecryptionMechanism.Create(context, list);
        }
        
        /// <summary>
        /// grant_permission
        /// 	 : grant_permission_enum
        /// 	 | grant_permission_alter
        /// 	 | grant_permission_create
        /// </summary>
        public override AstRoot VisitGrant_permission(TSqlParser.Grant_permissionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstGrantPermission.Create(context, list);
        }
        
        /// <summary>
        /// set_statement
        /// 	 : SET  local_id  (DOT  member_name = id_)?  EQUAL  expression  SEMI?
        /// 	 | SET  local_id  assignment_operator  expression  SEMI?
        /// 	 | SET  local_id  EQUAL  CURSOR  declare_set_cursor_common  (FOR  (READ  ONLY | UPDATE  (OF  column_name_list)?))?  SEMI?
        /// 	 | set_special
        /// </summary>
        public override AstRoot VisitSet_statement(TSqlParser.Set_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstSetStatement.Create(context, list);
        }
        
        /// <summary>
        /// transaction_statement
        /// 	 : BEGIN  DISTRIBUTED  transaction  transaction_ref?
        /// 	 | BEGIN  transaction  (transaction_ref  (WITH  MARK  mark = stringtext)?)?
        /// 	 | COMMIT  transaction  (transaction_ref  (WITH  LR_BRACKET  DELAYED_DURABILITY  EQUAL  on_off  RR_BRACKET)?)?
        /// 	 | COMMIT  WORK?
        /// 	 | COMMIT  transaction_id
        /// 	 | ROLLBACK  transaction_id
        /// 	 | ROLLBACK  transaction  transaction_ref?
        /// 	 | ROLLBACK  WORK?
        /// 	 | SAVE  transaction  transaction_ref?
        /// </summary>
        public override AstRoot VisitTransaction_statement(TSqlParser.Transaction_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstTransactionStatement.Create(context, list);
        }
        
        /// <summary>
        /// go_statement
        /// 	 : GO  (count = decimal)?
        /// </summary>
        public override AstRoot VisitGo_statement(TSqlParser.Go_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGoStatement(context, list);
        }
        
        /// <summary>
        /// setuser_statement
        /// 	 : SETUSER  user = stringtext
        /// </summary>
        public override AstRoot VisitSetuser_statement(TSqlParser.Setuser_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSetuserStatement(context, list);
        }
        
        /// <summary>
        /// reconfigure_statement
        /// 	 : RECONFIGURE  (WITH  OVERRIDE)?
        /// </summary>
        public override AstRoot VisitReconfigure_statement(TSqlParser.Reconfigure_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstReconfigureStatement(context, list);
        }
        
        /// <summary>
        /// shutdown_statement
        /// 	 : SHUTDOWN  (WITH  NOWAIT)?
        /// </summary>
        public override AstRoot VisitShutdown_statement(TSqlParser.Shutdown_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstShutdownStatement(context, list);
        }
        
        /// <summary>
        /// checkpoint_statement
        /// 	 : CHECKPOINT  (checkPointDuration = decimal)?
        /// </summary>
        public override AstRoot VisitCheckpoint_statement(TSqlParser.Checkpoint_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCheckpointStatement(context, list);
        }
        
        /// <summary>
        /// dbcc_special
        /// 	 : DBCC  SHRINKLOG  (LR_BRACKET  SIZE  EQUAL  (constant_expression | id_ | DEFAULT)  RR_BRACKET)?  SEMI?
        /// </summary>
        public override AstRoot VisitDbcc_special(TSqlParser.Dbcc_specialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDbccSpecial(context, list);
        }
        
        /// <summary>
        /// dbcc_clause
        /// 	 : DBCC  name = dbcc_command  (LR_BRACKET  expression_list  RR_BRACKET)?  (WITH  dbcc_options)?  SEMI?
        /// </summary>
        public override AstRoot VisitDbcc_clause(TSqlParser.Dbcc_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDbccClause(context, list);
        }
        
        /// <summary>
        /// dbcc_command
        /// 	 : simple_id
        /// 	 | keyword
        /// </summary>
        public override AstRoot VisitDbcc_command(TSqlParser.Dbcc_commandContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstDbccCommand.Create(context, list);
        }
        
        /// <summary>
        /// execute_clause_mode
        /// 	 : execute_clause_mode_enum
        /// 	 | stringtext
        /// </summary>
        public override AstRoot VisitExecute_clause_mode(TSqlParser.Execute_clause_modeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstExecuteClauseMode.Create(context, list);
        }
        
        /// <summary>
        /// table_type_indice
        /// 	 : (((PRIMARY  KEY | INDEX  id_)  clustered?) | UNIQUE)  LR_BRACKET  column_name_list_with_order  RR_BRACKET
        /// 	 | CHECK  LR_BRACKET  search_condition  RR_BRACKET
        /// </summary>
        public override AstRoot VisitTable_type_indice(TSqlParser.Table_type_indiceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstTableTypeIndice.Create(context, list);
        }
        
        /// <summary>
        /// xml_schema_collection
        /// 	 : left = ID  DOT  right = ID
        /// </summary>
        public override AstRoot VisitXml_schema_collection(TSqlParser.Xml_schema_collectionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstXmlSchemaCollection(context, list);
        }
        
        /// <summary>
        /// column_def_table_constraint
        /// 	 : column_definition
        /// 	 | materialized_column_definition
        /// 	 | table_constraint
        /// </summary>
        public override AstRoot VisitColumn_def_table_constraint(TSqlParser.Column_def_table_constraintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstColumnDefTableConstraint.Create(context, list);
        }
        
        /// <summary>
        /// column_definition_element
        /// 	 : FILESTREAM
        /// 	 | COLLATE  collation_id
        /// 	 | SPARSE
        /// 	 | MASKED  WITH  LR_BRACKET  FUNCTION  EQUAL  mask_function = stringtext  RR_BRACKET
        /// 	 | (CONSTRAINT  constraint_id)?  DEFAULT  constant_expr = expression
        /// 	 | IDENTITY  (LR_BRACKET  seed = decimal  COMMA  increment = decimal  RR_BRACKET)?
        /// 	 | NOT  FOR  REPLICATION
        /// 	 | GENERATED  ALWAYS  AS  generation_mode  start_end  HIDDEN_KEYWORD?
        /// 	 | ROWGUIDCOL
        /// 	 | ENCRYPTED  WITH  LR_BRACKET  column_encryption_key_id  EQUAL  key_name = stringtext  COMMA  ENCRYPTION_TYPE  EQUAL  encryption_mode  COMMA  ALGORITHM  EQUAL  algo = stringtext  RR_BRACKET
        /// 	 | column_constraint
        /// </summary>
        public override AstRoot VisitColumn_definition_element(TSqlParser.Column_definition_elementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstColumnDefinitionElement.Create(context, list);
        }
        
        /// <summary>
        /// column_constraint
        /// 	 : (CONSTRAINT  constraint_id)?  (null_notnull | (primary_key_unique  clustered?  primary_key_options) | ((FOREIGN  KEY)?  foreign_key_options) | check_constraint)
        /// </summary>
        public override AstRoot VisitColumn_constraint(TSqlParser.Column_constraintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnConstraint(context, list);
        }
        
        /// <summary>
        /// on_partition_or_filegroup
        /// 	 : ON  ((partition_scheme_id  LR_BRACKET  partition_column_id  RR_BRACKET) | file_group_id | DEFAULT_DOUBLE_QUOTE)
        /// </summary>
        public override AstRoot VisitOn_partition_or_filegroup(TSqlParser.On_partition_or_filegroupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOnPartitionOrFilegroup(context, list);
        }
        
        /// <summary>
        /// table_constraint
        /// 	 : (CONSTRAINT  constraint_id)?  ((primary_key_unique  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET  primary_key_options) | (FOREIGN  KEY  LR_BRACKET  fk = column_name_list  RR_BRACKET  foreign_key_options) | (CONNECTION  LR_BRACKET  connection_nodes  RR_BRACKET) | (DEFAULT  LR_BRACKET?  ((stringtext | PLUS | function_call | decimal)+ | NEXT  VALUE  FOR  full_table_ref)  RR_BRACKET?  FOR  id_) | check_constraint)
        /// </summary>
        public override AstRoot VisitTable_constraint(TSqlParser.Table_constraintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableConstraint(context, list);
        }
        
        /// <summary>
        /// connection_node
        /// 	 : from_node_table = id_  TO  to_node_table = id_
        /// </summary>
        public override AstRoot VisitConnection_node(TSqlParser.Connection_nodeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstConnectionNode(context, list);
        }
        
        /// <summary>
        /// alter_table_index_option
        /// 	 : PAD_INDEX  EQUAL  on_off
        /// 	 | FILLFACTOR  EQUAL  decimal
        /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
        /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
        /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
        /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
        /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
        /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
        /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
        /// 	 | DATA_COMPRESSION  EQUAL  index_strategy  on_partitions?
        /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
        /// 	 | distribution
        /// 	 | ONLINE  EQUAL  (ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF)
        /// 	 | RESUMABLE  EQUAL  on_off
        /// 	 | MAX_DURATION  EQUAL  times = decimal  MINUTES?
        /// </summary>
        public override AstRoot VisitAlter_table_index_option(TSqlParser.Alter_table_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAlterTableIndexOption.Create(context, list);
        }
        
        /// <summary>
        /// declare_set_cursor_common_partial
        /// 	 : local_global
        /// 	 | declare_set_cursor_common_partial_enum
        /// </summary>
        public override AstRoot VisitDeclare_set_cursor_common_partial(TSqlParser.Declare_set_cursor_common_partialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstDeclareSetCursorCommonPartial.Create(context, list);
        }
        
        /// <summary>
        /// set_special
        /// 	 : SET  left = id_  set_special_set_value  SEMI?
        /// 	 | SET  STATISTICS  statistic_kind  statistics = on_off  SEMI?
        /// 	 | SET  ROWCOUNT  (local_id | decimal)  SEMI?
        /// 	 | SET  TEXTSIZE  decimal  SEMI?
        /// 	 | SET  TRANSACTION  ISOLATION  LEVEL  (transaction_isolation | decimal)  SEMI?
        /// 	 | SET  IDENTITY_INSERT  full_table_ref  identity_insert = on_off  SEMI?
        /// 	 | SET  special_lists  list = on_off
        /// 	 | SET  modify_method
        /// </summary>
        public override AstRoot VisitSet_special(TSqlParser.Set_specialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstSetSpecial.Create(context, list);
        }
        
        /// <summary>
        /// set_special_set_value
        /// 	 : (id_ | constant_local_id | on_off)
        /// </summary>
        public override AstRoot VisitSet_special_set_value(TSqlParser.Set_special_set_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSetSpecialSetValue(context, list);
        }
        
        /// <summary>
        /// constant_local_id
        /// 	 : constant
        /// 	 | local_id
        /// </summary>
        public override AstRoot VisitConstant_local_id(TSqlParser.Constant_local_idContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstConstantLocalId.Create(context, list);
        }
        
        /// <summary>
        /// expression
        /// 	 : primitive_expression
        /// 	 | function_call
        /// 	 | expression  DOT  (value_call | query_call | exist_call | modify_call)
        /// 	 | expression  DOT  hierarchyid_call
        /// 	 | expression  COLLATE  id_
        /// 	 | case_expression
        /// 	 | full_column_name
        /// 	 | bracket_expression
        /// 	 | unary_operator_expression
        /// 	 | left = expression  op = expression_operator  right = expression
        /// 	 | expression  time_zone
        /// 	 | over_clause
        /// 	 | DOLLAR_ACTION
        /// </summary>
        public override AstRoot VisitExpression(TSqlParser.ExpressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstExpression.Create(context, list);
        }
        
        /// <summary>
        /// primitive_expression
        /// 	 : DEFAULT
        /// 	 | NULL_
        /// 	 | local_id
        /// 	 | constant
        /// </summary>
        public override AstRoot VisitPrimitive_expression(TSqlParser.Primitive_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstPrimitiveExpression.Create(context, list);
        }
        
        /// <summary>
        /// case_expression
        /// 	 : CASE  caseExpr = expression  switch_section+  (ELSE  elseExpr = expression)?  END
        /// 	 | CASE  switch_search_condition_section+  (ELSE  elseExpr = expression)?  END
        /// </summary>
        public override AstRoot VisitCase_expression(TSqlParser.Case_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCaseExpression.Create(context, list);
        }
        
        /// <summary>
        /// unary_operator_expression
        /// 	 : BIT_NOT  expression
        /// 	 | plus_minus  expression
        /// </summary>
        public override AstRoot VisitUnary_operator_expression(TSqlParser.Unary_operator_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstUnaryOperatorExpression.Create(context, list);
        }
        
        /// <summary>
        /// bracket_expression
        /// 	 : LR_BRACKET  expression  RR_BRACKET
        /// 	 | LR_BRACKET  subquery  RR_BRACKET
        /// </summary>
        public override AstRoot VisitBracket_expression(TSqlParser.Bracket_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstBracketExpression.Create(context, list);
        }
        
        /// <summary>
        /// constant_expression
        /// 	 : NULL_
        /// 	 | constant
        /// 	 | function_call
        /// 	 | local_id
        /// 	 | LR_BRACKET  constant_expression  RR_BRACKET
        /// </summary>
        public override AstRoot VisitConstant_expression(TSqlParser.Constant_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstConstantExpression.Create(context, list);
        }
        
        /// <summary>
        /// common_table_expression
        /// 	 : expression_name = id_  (LR_BRACKET  columns = column_name_list  RR_BRACKET)?  AS  LR_BRACKET  cte_query = select_statement  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCommon_table_expression(TSqlParser.Common_table_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCommonTableExpression(context, list);
        }
        
        /// <summary>
        /// update_elem
        /// 	 : local_id  EQUAL  full_column_name  (EQUAL | assignment_operator)  expression
        /// 	 | (full_column_name | local_id)  (EQUAL | assignment_operator)  expression
        /// 	 | udt_column_id  DOT  method_id  LR_BRACKET  expression_list  RR_BRACKET
        /// </summary>
        public override AstRoot VisitUpdate_elem(TSqlParser.Update_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstUpdateElem.Create(context, list);
        }
        
        /// <summary>
        /// update_elem_merge
        /// 	 : (full_column_name | local_id)  (EQUAL | assignment_operator)  expression
        /// 	 | udt_column_id  DOT  method_id  LR_BRACKET  expression_list  RR_BRACKET
        /// </summary>
        public override AstRoot VisitUpdate_elem_merge(TSqlParser.Update_elem_mergeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstUpdateElemMerge.Create(context, list);
        }
        
        /// <summary>
        /// search_condition
        /// 	 : NOT*  (predicate | LR_BRACKET  search_condition  RR_BRACKET)
        /// 	 | left = search_condition  AND  right = search_condition
        /// 	 | left = search_condition  OR  right = search_condition
        /// </summary>
        public override AstRoot VisitSearch_condition(TSqlParser.Search_conditionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstSearchCondition.Create(context, list);
        }
        
        /// <summary>
        /// predicate
        /// 	 : EXISTS  LR_BRACKET  subquery  RR_BRACKET
        /// 	 | freetext_predicate
        /// 	 | predicate_binary
        /// 	 | predicate_multi_assign
        /// 	 | expression  comparison_operator  all_some_any  LR_BRACKET  subquery  RR_BRACKET
        /// 	 | predicate_tier
        /// 	 | predicate_not_in
        /// 	 | predicate_not_like
        /// 	 | expression  IS  null_notnull
        /// </summary>
        public override AstRoot VisitPredicate(TSqlParser.PredicateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstPredicate.Create(context, list);
        }
        
        /// <summary>
        /// query_expression
        /// 	 : (query_specification | LR_BRACKET  left = query_expression  RR_BRACKET  (UNION  ALL?  right = query_expression)?)
        /// 	 | query_specification  select_order_by_clause?  unions += sql_union
        /// </summary>
        public override AstRoot VisitQuery_expression(TSqlParser.Query_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstQueryExpression.Create(context, list);
        }
        
        /// <summary>
        /// top_clause
        /// 	 : TOP  (top_percent | top_count)  (WITH  TIES)?
        /// </summary>
        public override AstRoot VisitTop_clause(TSqlParser.Top_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTopClause(context, list);
        }
        
        /// <summary>
        /// top_percent
        /// 	 : percent_constant  PERCENT
        /// 	 | LR_BRACKET  topper_expression = expression  RR_BRACKET  PERCENT
        /// </summary>
        public override AstRoot VisitTop_percent(TSqlParser.Top_percentContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstTopPercent.Create(context, list);
        }
        
        /// <summary>
        /// percent_constant
        /// 	 : real
        /// 	 | float
        /// 	 | decimal
        /// </summary>
        public override AstRoot VisitPercent_constant(TSqlParser.Percent_constantContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstPercentConstant.Create(context, list);
        }
        
        /// <summary>
        /// top_count
        /// 	 : count_constant = decimal
        /// 	 | LR_BRACKET  topcount_expression = expression  RR_BRACKET
        /// </summary>
        public override AstRoot VisitTop_count(TSqlParser.Top_countContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstTopCount.Create(context, list);
        }
        
        /// <summary>
        /// for_clause
        /// 	 : FOR  BROWSE
        /// 	 | for_clause_xml_raw
        /// 	 | FOR  XML  EXPLICIT  xml_common_directives?  (COMMA  XMLDATA)?
        /// 	 | FOR  XML  PATH  (LR_BRACKET  stringtext  RR_BRACKET)?  xml_common_directives?  (COMMA  ELEMENTS  absent_xsinil?)?
        /// 	 | for_clause_json
        /// </summary>
        public override AstRoot VisitFor_clause(TSqlParser.For_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstForClause.Create(context, list);
        }
        
        /// <summary>
        /// xml_common_directive
        /// 	 : BINARY_KEYWORD  BASE64
        /// 	 | TYPE
        /// 	 | ROOT  (LR_BRACKET  stringtext  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitXml_common_directive(TSqlParser.Xml_common_directiveContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstXmlCommonDirective.Create(context, list);
        }
        
        /// <summary>
        /// clause_json_info
        /// 	 : ROOT  (LR_BRACKET  stringtext  RR_BRACKET)
        /// 	 | INCLUDE_NULL_VALUES
        /// 	 | WITHOUT_ARRAY_WRAPPER
        /// </summary>
        public override AstRoot VisitClause_json_info(TSqlParser.Clause_json_infoContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstClauseJsonInfo.Create(context, list);
        }
        
        /// <summary>
        /// order_by_expression
        /// 	 : order_by = expression  (ascending = ASC | descending = DESC)?
        /// </summary>
        public override AstRoot VisitOrder_by_expression(TSqlParser.Order_by_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOrderByExpression(context, list);
        }
        
        /// <summary>
        /// grouping_sets_item
        /// 	 : grouping_sets_list
        /// 	 | LR_BRACKET  grouping_sets_list?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitGrouping_sets_item(TSqlParser.Grouping_sets_itemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstGroupingSetsItem.Create(context, list);
        }
        
        /// <summary>
        /// update_option
        /// 	 : FAST  number_rows = decimal
        /// 	 | MAXDOP  number_of_processors = decimal
        /// 	 | MAXRECURSION  number_recursion = decimal
        /// 	 | USE  PLAN  stringtext
        /// 	 | OPTIMIZE  FOR  LR_BRACKET  optimize_for_args  RR_BRACKET
        /// 	 | update_option_enum
        /// </summary>
        public override AstRoot VisitUpdate_option(TSqlParser.Update_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstUpdateOption.Create(context, list);
        }
        
        /// <summary>
        /// asterisk
        /// 	 : star_asterisk
        /// 	 | table_asterisk
        /// 	 | updated_asterisk
        /// </summary>
        public override AstRoot VisitAsterisk(TSqlParser.AsteriskContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAsterisk.Create(context, list);
        }
        
        /// <summary>
        /// column_elem_target
        /// 	 : full_column_name
        /// 	 | DOLLAR  IDENTITY
        /// 	 | DOLLAR  ROWGUID
        /// 	 | NULL_
        /// </summary>
        public override AstRoot VisitColumn_elem_target(TSqlParser.Column_elem_targetContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstColumnElemTarget.Create(context, list);
        }
        
        /// <summary>
        /// udt_elem
        /// 	 : udt_column_id  DOT  non_static_attr_id  udt_method_arguments  as_column_alias?
        /// 	 | udt_column_id  DOUBLE_COLON  static_attr_id  udt_method_arguments?  as_column_alias?
        /// </summary>
        public override AstRoot VisitUdt_elem(TSqlParser.Udt_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstUdtElem.Create(context, list);
        }
        
        /// <summary>
        /// expression_elem
        /// 	 : leftAlias = column_alias  eq = EQUAL  leftAssignment = expression
        /// 	 | expressionAs = expression  as_column_alias?
        /// </summary>
        public override AstRoot VisitExpression_elem(TSqlParser.Expression_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstExpressionElem.Create(context, list);
        }
        
        /// <summary>
        /// select_list_elem
        /// 	 : asterisk
        /// 	 | column_elem
        /// 	 | udt_elem
        /// 	 | expression_assign_elem
        /// 	 | expression_elem
        /// </summary>
        public override AstRoot VisitSelect_list_elem(TSqlParser.Select_list_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstSelectListElem.Create(context, list);
        }
        
        /// <summary>
        /// table_source
        /// 	 : table_source_item_joined
        /// 	 | LR_BRACKET  table_source  RR_BRACKET
        /// </summary>
        public override AstRoot VisitTable_source(TSqlParser.Table_sourceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstTableSource.Create(context, list);
        }
        
        /// <summary>
        /// table_source_item_joined
        /// 	 : table_source_item  joins += join_part
        /// 	 | LR_BRACKET  table_source_item_joined  RR_BRACKET  joins += join_part
        /// </summary>
        public override AstRoot VisitTable_source_item_joined(TSqlParser.Table_source_item_joinedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstTableSourceItemJoined.Create(context, list);
        }
        
        /// <summary>
        /// table_source_item
        /// 	 : complete_table_ref  deprecated_table_hint  as_table_alias
        /// 	 | complete_table_ref  as_table_alias?  (with_table_hints | deprecated_table_hint | sybase_legacy_hints)?
        /// 	 | rowset_function  as_table_alias?
        /// 	 | LR_BRACKET  derived_table  RR_BRACKET  (as_table_alias  column_alias_list?)?
        /// 	 | change_table  as_table_alias?
        /// 	 | nodes_method  (as_table_alias  column_alias_list?)?
        /// 	 | function_call  (as_table_alias  column_alias_list?)?
        /// 	 | loc_id = local_id  as_table_alias?
        /// 	 | loc_id_call = local_id  DOT  loc_fcall = function_call  (as_table_alias  column_alias_list?)?
        /// 	 | open_xml
        /// 	 | open_json
        /// 	 | DOUBLE_COLON  oldstyle_fcall = function_call  as_table_alias?
        /// </summary>
        public override AstRoot VisitTable_source_item(TSqlParser.Table_source_itemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstTableSourceItem.Create(context, list);
        }
        
        /// <summary>
        /// change_table
        /// 	 : change_table_changes
        /// 	 | change_table_version
        /// </summary>
        public override AstRoot VisitChange_table(TSqlParser.Change_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstChangeTable.Create(context, list);
        }
        
        /// <summary>
        /// change_table_changes
        /// 	 : CHANGETABLE  LR_BRACKET  CHANGES  changetable = full_table_ref  COMMA  (NULL_ | decimal_local_id)  RR_BRACKET
        /// </summary>
        public override AstRoot VisitChange_table_changes(TSqlParser.Change_table_changesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstChangeTableChanges(context, list);
        }
        
        /// <summary>
        /// change_table_version
        /// 	 : CHANGETABLE  LR_BRACKET  VERSION  versiontable = full_table_ref  COMMA  pk_columns = full_column_name_list  COMMA  pk_values = select_list  RR_BRACKET
        /// </summary>
        public override AstRoot VisitChange_table_version(TSqlParser.Change_table_versionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstChangeTableVersion(context, list);
        }
        
        /// <summary>
        /// join_part
        /// 	 : join_on
        /// 	 | cross_join
        /// 	 | apply_enum
        /// 	 | pivot
        /// 	 | unpivot
        /// </summary>
        public override AstRoot VisitJoin_part(TSqlParser.Join_partContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstJoinPart.Create(context, list);
        }
        
        /// <summary>
        /// rowset_function
        /// 	 : (OPENROWSET  LR_BRACKET  providerName = stringtext  COMMA  connectionString = stringtext  COMMA  sql = stringtext  RR_BRACKET)
        /// 	 | (OPENROWSET  LR_BRACKET  BULK  data_file = stringtext  COMMA  (bulk_options | id_)  RR_BRACKET)
        /// </summary>
        public override AstRoot VisitRowset_function(TSqlParser.Rowset_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstRowsetFunction.Create(context, list);
        }
        
        /// <summary>
        /// derived_table
        /// 	 : subquery
        /// 	 | LR_BRACKET  subqueries  RR_BRACKET
        /// 	 | table_value_constructor
        /// 	 | LR_BRACKET  table_value_constructor  RR_BRACKET
        /// </summary>
        public override AstRoot VisitDerived_table(TSqlParser.Derived_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstDerivedTable.Create(context, list);
        }
        
        /// <summary>
        /// function_call
        /// 	 : ranking_windowed_function
        /// 	 | aggregate_windowed_function
        /// 	 | analytic_windowed_function
        /// 	 | built_in_functions
        /// 	 | scalar_function_name  LR_BRACKET  expression_list?  RR_BRACKET
        /// 	 | freetext_function
        /// 	 | partition_function
        /// 	 | hierarchyid_static_method
        /// </summary>
        public override AstRoot VisitFunction_call(TSqlParser.Function_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstFunctionCall.Create(context, list);
        }
        
        /// <summary>
        /// freetext_function
        /// 	 : containstable_freetexttable  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  (COMMA  expression)?  RR_BRACKET
        /// 	 | semantic_table  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression  RR_BRACKET
        /// 	 | SEMANTICSIMILARITYDETAILSTABLE  LR_BRACKET  full_table_ref  COMMA  name1 = full_column_name  COMMA  expr1 = expression  COMMA  name2 = full_column_name  COMMA  expr2 = expression  RR_BRACKET
        /// </summary>
        public override AstRoot VisitFreetext_function(TSqlParser.Freetext_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstFreetextFunction.Create(context, list);
        }
        
        /// <summary>
        /// freetext_predicate
        /// 	 : CONTAINS  LR_BRACKET  (full_column_name | full_column_names | STAR | PROPERTY  LR_BRACKET  full_column_name  COMMA  property = expression  RR_BRACKET)  COMMA  rule = expression  RR_BRACKET
        /// 	 | FREETEXT  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  RR_BRACKET
        /// </summary>
        public override AstRoot VisitFreetext_predicate(TSqlParser.Freetext_predicateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstFreetextPredicate.Create(context, list);
        }
        
        /// <summary>
        /// built_in_functions
        /// 	 : APP_NAME  LR_BRACKET  RR_BRACKET
        /// 	 | APPLOCK_MODE  LR_BRACKET  database_principal = expression  COMMA  resource_name = expression  COMMA  lock_owner = expression  RR_BRACKET
        /// 	 | APPLOCK_TEST  LR_BRACKET  database_principal = expression  COMMA  resource_name = expression  COMMA  lockmode = expression  COMMA  lock_owner = expression  RR_BRACKET
        /// 	 | ASSEMBLYPROPERTY  LR_BRACKET  assemblyName = expression  COMMA  propertyName = expression  RR_BRACKET
        /// 	 | COL_LENGTH  LR_BRACKET  table = expression  COMMA  column = expression  RR_BRACKET
        /// 	 | COL_NAME  LR_BRACKET  table = expression  COMMA  column = expression  RR_BRACKET
        /// 	 | COLUMNPROPERTY  LR_BRACKET  id = expression  COMMA  column = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | DATABASEPROPERTYEX  LR_BRACKET  database = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | DB_ID  LR_BRACKET  databaseName = expression  RR_BRACKET
        /// 	 | DB_NAME  LR_BRACKET  database = expression  RR_BRACKET
        /// 	 | FILE_ID  LR_BRACKET  file_name = expression  RR_BRACKET
        /// 	 | FILE_IDEX  LR_BRACKET  file_name = expression  RR_BRACKET
        /// 	 | FILE_NAME  LR_BRACKET  file = expression  RR_BRACKET
        /// 	 | FILEGROUP_ID  LR_BRACKET  filegroup_name = expression  RR_BRACKET
        /// 	 | FILEGROUP_NAME  LR_BRACKET  filegroup_id = expression  RR_BRACKET
        /// 	 | FILEGROUPPROPERTY  LR_BRACKET  filegroup = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | FILEPROPERTY  LR_BRACKET  file = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | FILEPROPERTYEX  LR_BRACKET  name = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | FULLTEXTCATALOGPROPERTY  LR_BRACKET  catalog = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | FULLTEXTSERVICEPROPERTY  LR_BRACKET  property = expression  RR_BRACKET
        /// 	 | INDEX_COL  LR_BRACKET  tableOrView = expression  COMMA  index = expression  COMMA  key = expression  RR_BRACKET
        /// 	 | INDEXKEY_PROPERTY  LR_BRACKET  object = expression  COMMA  index = expression  COMMA  key = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | INDEXPROPERTY  LR_BRACKET  object = expression  COMMA  index_or_statistics = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | NEXT  VALUE  FOR  sequenceName = full_table_ref  (OVER  LR_BRACKET  order_by_clause  RR_BRACKET)?
        /// 	 | OBJECT_DEFINITION  LR_BRACKET  object = expression  RR_BRACKET
        /// 	 | OBJECT_ID  LR_BRACKET  objectName = expression  (COMMA  object_type = expression)?  RR_BRACKET
        /// 	 | OBJECT_NAME  LR_BRACKET  object = expression  (COMMA  database = expression)?  RR_BRACKET
        /// 	 | OBJECT_SCHEMA_NAME  LR_BRACKET  target_object = expression  (COMMA  database = expression)?  RR_BRACKET
        /// 	 | OBJECTPROPERTY  LR_BRACKET  id = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | OBJECTPROPERTYEX  LR_BRACKET  id = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | ORIGINAL_DB_NAME  LR_BRACKET  RR_BRACKET
        /// 	 | PARSENAME  LR_BRACKET  objectName = expression  COMMA  object_piece = expression  RR_BRACKET
        /// 	 | SCHEMA_ID  LR_BRACKET  schemaName = expression  RR_BRACKET
        /// 	 | SCHEMA_NAME  LR_BRACKET  schemaId = expression  RR_BRACKET
        /// 	 | SCOPE_IDENTITY  LR_BRACKET  RR_BRACKET
        /// 	 | SERVERPROPERTY  LR_BRACKET  property = expression  RR_BRACKET
        /// 	 | STATS_DATE  LR_BRACKET  target_object = expression  COMMA  stats = expression  RR_BRACKET
        /// 	 | TYPE_ID  LR_BRACKET  type_name = expression  RR_BRACKET
        /// 	 | TYPE_NAME  LR_BRACKET  type = expression  RR_BRACKET
        /// 	 | TYPEPROPERTY  LR_BRACKET  type = expression  COMMA  property = expression  RR_BRACKET
        /// 	 | ASCII  LR_BRACKET  character_expression = expression  RR_BRACKET
        /// 	 | CHAR  LR_BRACKET  integer_expression = expression  RR_BRACKET
        /// 	 | CHARINDEX  LR_BRACKET  expressionToFind = expression  COMMA  expressionToSearch = expression  (COMMA  start_location = expression)?  RR_BRACKET
        /// 	 | CONCAT  LR_BRACKET  expressions  RR_BRACKET
        /// 	 | CONCAT_WS  LR_BRACKET  expressions  RR_BRACKET
        /// 	 | DIFFERENCE  LR_BRACKET  character_expression_1 = expression  COMMA  character_expression_2 = expression  RR_BRACKET
        /// 	 | FORMAT  LR_BRACKET  expressions  RR_BRACKET
        /// 	 | LEFT  LR_BRACKET  character_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
        /// 	 | LEN  LR_BRACKET  string_expression = expression  RR_BRACKET
        /// 	 | LOWER  LR_BRACKET  character_expression = expression  RR_BRACKET
        /// 	 | LTRIM  LR_BRACKET  character_expression = expression  RR_BRACKET
        /// 	 | NCHAR  LR_BRACKET  integer_expression = expression  RR_BRACKET
        /// 	 | PATINDEX  LR_BRACKET  pattern = expression  COMMA  string_expression = expression  RR_BRACKET
        /// 	 | QUOTENAME  LR_BRACKET  character_string = expression  (COMMA  quote_character = expression)?  RR_BRACKET
        /// 	 | REPLACE  LR_BRACKET  input = expression  COMMA  replacing = expression  COMMA  with = expression  RR_BRACKET
        /// 	 | REPLICATE  LR_BRACKET  string_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
        /// 	 | REVERSE  LR_BRACKET  string_expression = expression  RR_BRACKET
        /// 	 | RIGHT  LR_BRACKET  character_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
        /// 	 | RTRIM  LR_BRACKET  character_expression = expression  RR_BRACKET
        /// 	 | SOUNDEX  LR_BRACKET  character_expression = expression  RR_BRACKET
        /// 	 | SPACE_KEYWORD  LR_BRACKET  integer_expression = expression  RR_BRACKET
        /// 	 | STR  LR_BRACKET  float_expression = expression  (COMMA  length_expression = expression  (COMMA  decimal_expr = expression)?)?  RR_BRACKET
        /// 	 | STRING_AGG  LR_BRACKET  expr = expression  COMMA  separator = expression  RR_BRACKET  (WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET)?
        /// 	 | STRING_ESCAPE  LR_BRACKET  text_ = expression  COMMA  type_ = expression  RR_BRACKET
        /// 	 | STUFF  LR_BRACKET  str = expression  COMMA  from = decimal  COMMA  to = decimal  COMMA  str_with = expression  RR_BRACKET
        /// 	 | SUBSTRING  LR_BRACKET  string_expression = expression  COMMA  start_ = expression  COMMA  length = expression  RR_BRACKET
        /// 	 | TRANSLATE  LR_BRACKET  inputString = expression  COMMA  characters = expression  COMMA  translations = expression  RR_BRACKET
        /// 	 | TRIM  LR_BRACKET  (characters = expression  FROM)?  string_ = expression  RR_BRACKET
        /// 	 | UNICODE  LR_BRACKET  ncharacter_expression = expression  RR_BRACKET
        /// 	 | UPPER  LR_BRACKET  character_expression = expression  RR_BRACKET
        /// 	 | BINARY_CHECKSUM  LR_BRACKET  (star = STAR | expressions)  RR_BRACKET
        /// 	 | CHECKSUM  LR_BRACKET  (star = STAR | expressions)  RR_BRACKET
        /// 	 | COMPRESS  LR_BRACKET  expr = expression  RR_BRACKET
        /// 	 | CONNECTIONPROPERTY  LR_BRACKET  cnx_property = stringtext  RR_BRACKET
        /// 	 | CONTEXT_INFO  LR_BRACKET  RR_BRACKET
        /// 	 | CURRENT_REQUEST_ID  LR_BRACKET  RR_BRACKET
        /// 	 | CURRENT_TRANSACTION_ID  LR_BRACKET  RR_BRACKET
        /// 	 | DECOMPRESS  LR_BRACKET  expr = expression  RR_BRACKET
        /// 	 | ERROR_LINE  LR_BRACKET  RR_BRACKET
        /// 	 | ERROR_MESSAGE  LR_BRACKET  RR_BRACKET
        /// 	 | ERROR_NUMBER  LR_BRACKET  RR_BRACKET
        /// 	 | ERROR_PROCEDURE  LR_BRACKET  RR_BRACKET
        /// 	 | ERROR_SEVERITY  LR_BRACKET  RR_BRACKET
        /// 	 | ERROR_STATE  LR_BRACKET  RR_BRACKET
        /// 	 | FORMATMESSAGE  LR_BRACKET  (msg_number = decimal | msg_string = stringtext | msg_variable = local_id)  COMMA  expressions  RR_BRACKET
        /// 	 | GET_FILESTREAM_TRANSACTION_CONTEXT  LR_BRACKET  RR_BRACKET
        /// 	 | GETANSINULL  LR_BRACKET  (database_name = stringtext)?  RR_BRACKET
        /// 	 | HOST_ID  LR_BRACKET  RR_BRACKET
        /// 	 | HOST_NAME  LR_BRACKET  RR_BRACKET
        /// 	 | ISNULL  LR_BRACKET  left = expression  COMMA  right = expression  RR_BRACKET
        /// 	 | ISNUMERIC  LR_BRACKET  expression  RR_BRACKET
        /// 	 | MIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET
        /// 	 | NEWID  LR_BRACKET  RR_BRACKET
        /// 	 | NEWSEQUENTIALID  LR_BRACKET  RR_BRACKET
        /// 	 | ROWCOUNT_BIG  LR_BRACKET  RR_BRACKET
        /// 	 | SESSION_CONTEXT  LR_BRACKET  session_key = stringtext  RR_BRACKET
        /// 	 | XACT_STATE  LR_BRACKET  RR_BRACKET
        /// 	 | CAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET
        /// 	 | TRY_CAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET
        /// 	 | CONVERT  LR_BRACKET  convert_data_type = data_type  COMMA  expression2  RR_BRACKET
        /// 	 | COALESCE  LR_BRACKET  expression_list  RR_BRACKET
        /// 	 | CURRENT_DATE  LR_BRACKET  RR_BRACKET
        /// 	 | CURRENT_TIMESTAMP
        /// 	 | CURRENT_USER
        /// 	 | DATEADD  LR_BRACKET  datepart = ID  COMMA  number = expression  COMMA  date = expression  RR_BRACKET
        /// 	 | DATEDIFF  LR_BRACKET  datepart = ID  COMMA  date_first = expression  COMMA  date_second = expression  RR_BRACKET
        /// 	 | DATENAME  LR_BRACKET  datepart = ID  COMMA  date = expression  RR_BRACKET
        /// 	 | DATEPART  LR_BRACKET  datepart = ID  COMMA  date = expression  RR_BRACKET
        /// 	 | GETDATE  LR_BRACKET  RR_BRACKET
        /// 	 | GETUTCDATE  LR_BRACKET  RR_BRACKET
        /// 	 | IDENTITY  LR_BRACKET  data_type  (COMMA  seed = decimal)?  (COMMA  increment = decimal)?  RR_BRACKET
        /// 	 | MIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET
        /// 	 | NULLIF  LR_BRACKET  left = expression  COMMA  right = expression  RR_BRACKET
        /// 	 | SESSION_USER
        /// 	 | SYSTEM_USER
        /// 	 | USER
        /// 	 | PARSE  LR_BRACKET  str = expression  AS  data_type  (USING  culture = expression)?  RR_BRACKET
        /// 	 | xml_data_type_methods
        /// 	 | IIF  LR_BRACKET  cond = search_condition  COMMA  left = expression  COMMA  right = expression  RR_BRACKET
        /// </summary>
        public override AstRoot VisitBuilt_in_functions(TSqlParser.Built_in_functionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstBuiltInFunctions.Create(context, list);
        }
        
        /// <summary>
        /// xml_data_type_methods
        /// 	 : value_method
        /// 	 | query_method
        /// 	 | exist_method
        /// 	 | modify_method
        /// </summary>
        public override AstRoot VisitXml_data_type_methods(TSqlParser.Xml_data_type_methodsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstXmlDataTypeMethods.Create(context, list);
        }
        
        /// <summary>
        /// value_method
        /// 	 : (loc = local_id | value = full_column_name | eventdata = EVENTDATA  LR_BRACKET  RR_BRACKET | query = query_method | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = value_call
        /// </summary>
        public override AstRoot VisitValue_method(TSqlParser.Value_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstValueMethod(context, list);
        }
        
        /// <summary>
        /// value_call
        /// 	 : VALUE  LR_BRACKET  xquery = stringtext  COMMA  sqltype = stringtext  RR_BRACKET
        /// </summary>
        public override AstRoot VisitValue_call(TSqlParser.Value_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstValueCall(context, list);
        }
        
        /// <summary>
        /// query_method
        /// 	 : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = query_call
        /// </summary>
        public override AstRoot VisitQuery_method(TSqlParser.Query_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQueryMethod(context, list);
        }
        
        /// <summary>
        /// query_call
        /// 	 : QUERY  LR_BRACKET  xquery = stringtext  RR_BRACKET
        /// </summary>
        public override AstRoot VisitQuery_call(TSqlParser.Query_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQueryCall(context, list);
        }
        
        /// <summary>
        /// exist_method
        /// 	 : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = exist_call
        /// </summary>
        public override AstRoot VisitExist_method(TSqlParser.Exist_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExistMethod(context, list);
        }
        
        /// <summary>
        /// exist_call
        /// 	 : EXIST  LR_BRACKET  xquery = stringtext  RR_BRACKET
        /// </summary>
        public override AstRoot VisitExist_call(TSqlParser.Exist_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExistCall(context, list);
        }
        
        /// <summary>
        /// modify_method
        /// 	 : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = modify_call
        /// </summary>
        public override AstRoot VisitModify_method(TSqlParser.Modify_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstModifyMethod(context, list);
        }
        
        /// <summary>
        /// modify_call
        /// 	 : MODIFY  LR_BRACKET  xml_dml = stringtext  RR_BRACKET
        /// </summary>
        public override AstRoot VisitModify_call(TSqlParser.Modify_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstModifyCall(context, list);
        }
        
        /// <summary>
        /// hierarchyid_call
        /// 	 : GETANCESTOR  LR_BRACKET  n = expression  RR_BRACKET
        /// 	 | GETDESCENDANT  LR_BRACKET  child1 = expression  COMMA  child2 = expression  RR_BRACKET
        /// 	 | GETLEVEL  LR_BRACKET  RR_BRACKET
        /// 	 | ISDESCENDANTOF  LR_BRACKET  parent_ = expression  RR_BRACKET
        /// 	 | GETREPARENTEDVALUE  LR_BRACKET  oldroot = expression  COMMA  newroot = expression  RR_BRACKET
        /// 	 | TOSTRING  LR_BRACKET  RR_BRACKET
        /// </summary>
        public override AstRoot VisitHierarchyid_call(TSqlParser.Hierarchyid_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstHierarchyidCall.Create(context, list);
        }
        
        /// <summary>
        /// hierarchyid_static_method
        /// 	 : HIERARCHYID  DOUBLE_COLON  (GETROOT  LR_BRACKET  RR_BRACKET | PARSE  LR_BRACKET  input = expression  RR_BRACKET)
        /// </summary>
        public override AstRoot VisitHierarchyid_static_method(TSqlParser.Hierarchyid_static_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstHierarchyidStaticMethod(context, list);
        }
        
        /// <summary>
        /// nodes_method
        /// 	 : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  NODES  LR_BRACKET  xquery = stringtext  RR_BRACKET
        /// </summary>
        public override AstRoot VisitNodes_method(TSqlParser.Nodes_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstNodesMethod(context, list);
        }
        
        /// <summary>
        /// table_hint
        /// 	 : NOEXPAND
        /// 	 | INDEX  (LR_BRACKET  index_values  RR_BRACKET | EQUAL  LR_BRACKET  index_value  RR_BRACKET | EQUAL  index_value)
        /// 	 | FORCESEEK  (LR_BRACKET  index_value  LR_BRACKET  column_name_list  RR_BRACKET  RR_BRACKET)?
        /// 	 | FORCESCAN
        /// 	 | HOLDLOCK
        /// 	 | NOLOCK
        /// 	 | NOWAIT
        /// 	 | PAGLOCK
        /// 	 | READCOMMITTED
        /// 	 | READCOMMITTEDLOCK
        /// 	 | READPAST
        /// 	 | READUNCOMMITTED
        /// 	 | REPEATABLEREAD
        /// 	 | ROWLOCK
        /// 	 | SERIALIZABLE
        /// 	 | SNAPSHOT
        /// 	 | SPATIAL_WINDOW_MAX_CELLS  EQUAL  decimal
        /// 	 | TABLOCK
        /// 	 | TABLOCKX
        /// 	 | UPDLOCK
        /// 	 | XLOCK
        /// 	 | KEEPIDENTITY
        /// 	 | KEEPDEFAULTS
        /// 	 | IGNORE_CONSTRAINTS
        /// 	 | IGNORE_TRIGGERS
        /// </summary>
        public override AstRoot VisitTable_hint(TSqlParser.Table_hintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstTableHint.Create(context, list);
        }
        
        /// <summary>
        /// index_value
        /// 	 : id_
        /// 	 | decimal
        /// </summary>
        public override AstRoot VisitIndex_value(TSqlParser.Index_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstIndexValue.Create(context, list);
        }
        
        /// <summary>
        /// ranking_windowed_function
        /// 	 : ranking_windowed  LR_BRACKET  RR_BRACKET  over_clause
        /// 	 | NTILE  LR_BRACKET  expression  RR_BRACKET  over_clause
        /// </summary>
        public override AstRoot VisitRanking_windowed_function(TSqlParser.Ranking_windowed_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstRankingWindowedFunction.Create(context, list);
        }
        
        /// <summary>
        /// aggregate_windowed_function
        /// 	 : agg_function  LR_BRACKET  all_distinct_expression  RR_BRACKET  over_clause?
        /// 	 | count_count_big  LR_BRACKET  (STAR | all_distinct_expression)  RR_BRACKET  over_clause?
        /// 	 | CHECKSUM_AGG  LR_BRACKET  all_distinct_expression  RR_BRACKET
        /// 	 | GROUPING  LR_BRACKET  expression  RR_BRACKET
        /// 	 | GROUPING_ID  LR_BRACKET  expression_list  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAggregate_windowed_function(TSqlParser.Aggregate_windowed_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAggregateWindowedFunction.Create(context, list);
        }
        
        /// <summary>
        /// analytic_windowed_function
        /// 	 : first_last_value  LR_BRACKET  expression  RR_BRACKET  over_clause
        /// 	 | lag_lead  LR_BRACKET  expression  (COMMA  expression2)?  RR_BRACKET  over_clause
        /// 	 | cume_percent  LR_BRACKET  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  order_by_clause  RR_BRACKET
        /// 	 | percentil  LR_BRACKET  expression  RR_BRACKET  WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAnalytic_windowed_function(TSqlParser.Analytic_windowed_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAnalyticWindowedFunction.Create(context, list);
        }
        
        /// <summary>
        /// window_frame_extent
        /// 	 : window_frame_preceding
        /// 	 | BETWEEN  left = window_frame_bound  AND  right = window_frame_bound
        /// </summary>
        public override AstRoot VisitWindow_frame_extent(TSqlParser.Window_frame_extentContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstWindowFrameExtent.Create(context, list);
        }
        
        /// <summary>
        /// window_frame_bound
        /// 	 : window_frame_preceding
        /// 	 | window_frame_following
        /// </summary>
        public override AstRoot VisitWindow_frame_bound(TSqlParser.Window_frame_boundContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstWindowFrameBound.Create(context, list);
        }
        
        /// <summary>
        /// window_frame_preceding
        /// 	 : UNBOUNDED  PRECEDING
        /// 	 | decimal  PRECEDING
        /// 	 | CURRENT  ROW
        /// </summary>
        public override AstRoot VisitWindow_frame_preceding(TSqlParser.Window_frame_precedingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstWindowFramePreceding.Create(context, list);
        }
        
        /// <summary>
        /// window_frame_following
        /// 	 : UNBOUNDED  FOLLOWING
        /// 	 | decimal  FOLLOWING
        /// </summary>
        public override AstRoot VisitWindow_frame_following(TSqlParser.Window_frame_followingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstWindowFrameFollowing.Create(context, list);
        }
        
        /// <summary>
        /// create_database_option
        /// 	 : FILESTREAM  database_filestream_options
        /// 	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
        /// 	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
        /// 	 | NESTED_TRIGGERS  EQUAL  on_off
        /// 	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
        /// 	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal
        /// 	 | DB_CHAINING  on_off
        /// 	 | TRUSTWORTHY  on_off
        /// </summary>
        public override AstRoot VisitCreate_database_option(TSqlParser.Create_database_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCreateDatabaseOption.Create(context, list);
        }
        
        /// <summary>
        /// database_filestream_option
        /// 	 : LR_BRACKET  ((NON_TRANSACTED_ACCESS  EQUAL  off_read_only_full) | (DIRECTORY_NAME  EQUAL  stringtext))  RR_BRACKET
        /// </summary>
        public override AstRoot VisitDatabase_filestream_option(TSqlParser.Database_filestream_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDatabaseFilestreamOption(context, list);
        }
        
        /// <summary>
        /// database_file_spec
        /// 	 : file_group
        /// 	 | file_spec
        /// </summary>
        public override AstRoot VisitDatabase_file_spec(TSqlParser.Database_file_specContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstDatabaseFileSpec.Create(context, list);
        }
        
        /// <summary>
        /// max_size
        /// 	 : file_size
        /// 	 | UNLIMITED
        /// </summary>
        public override AstRoot VisitMax_size(TSqlParser.Max_sizeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstMaxSize.Create(context, list);
        }
        
        /// <summary>
        /// null_or_default
        /// 	 : (null_notnull | DEFAULT  constant_expression  (COLLATE  id_)?  (WITH  VALUES)?)
        /// </summary>
        public override AstRoot VisitNull_or_default(TSqlParser.Null_or_defaultContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstNullOrDefault(context, list);
        }
        
        /// <summary>
        /// scalar_function_name
        /// 	 : func_proc_name_server_database_schema
        /// 	 | scalar_function_name_enum
        /// </summary>
        public override AstRoot VisitScalar_function_name(TSqlParser.Scalar_function_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstScalarFunctionName.Create(context, list);
        }
        
        /// <summary>
        /// contract_name_expression
        /// 	 : (id_ | expression)
        /// </summary>
        public override AstRoot VisitContract_name_expression(TSqlParser.Contract_name_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstContractNameExpression(context, list);
        }
        
        /// <summary>
        /// service_name
        /// 	 : (id_ | expression)
        /// </summary>
        public override AstRoot VisitService_name(TSqlParser.Service_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstServiceName(context, list);
        }
        
        /// <summary>
        /// end_conversation
        /// 	 : END  CONVERSATION  conversation_handle = local_id  SEMI?  (WITH  (ERROR  EQUAL  faliure_code = string_local_id  DESCRIPTION  EQUAL  failure_text = string_local_id)?  CLEANUP?)?
        /// </summary>
        public override AstRoot VisitEnd_conversation(TSqlParser.End_conversationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEndConversation(context, list);
        }
        
        /// <summary>
        /// get_conversation
        /// 	 : GET  CONVERSATION  GROUP  conversation_group = string_local_id  FROM  queue = database_schema_queue_ref  SEMI?
        /// </summary>
        public override AstRoot VisitGet_conversation(TSqlParser.Get_conversationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGetConversation(context, list);
        }
        
        /// <summary>
        /// send_conversation
        /// 	 : SEND  ON  CONVERSATION  conversation_handle = string_local_id  MESSAGE  TYPE  messageTypeName = expression  (LR_BRACKET  messageBodyEexpression = string_local_id  RR_BRACKET)?  SEMI?
        /// </summary>
        public override AstRoot VisitSend_conversation(TSqlParser.Send_conversationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSendConversation(context, list);
        }
        
        /// <summary>
        /// data_type
        /// 	 : scaled = data_type_scaled  LR_BRACKET  MAX  RR_BRACKET
        /// 	 | ext_type_id  LR_BRACKET  decimal_scale_prec  RR_BRACKET
        /// 	 | ext_type_id  LR_BRACKET  scale = decimal  RR_BRACKET
        /// 	 | ext_type_id  IDENTITY  (LR_BRACKET  identity_seed  RR_BRACKET)?
        /// 	 | double_prec = DOUBLE  PRECISION?
        /// 	 | unscaled_type_id
        /// </summary>
        public override AstRoot VisitData_type(TSqlParser.Data_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstDataType.Create(context, list);
        }
        
        /// <summary>
        /// default_value
        /// 	 : NULL_
        /// 	 | DEFAULT
        /// 	 | constant
        /// </summary>
        public override AstRoot VisitDefault_value(TSqlParser.Default_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstDefaultValue.Create(context, list);
        }
        
        /// <summary>
        /// constant
        /// 	 : stringtext
        /// 	 | binary_
        /// 	 | sign?  decimal
        /// 	 | sign?  (real | float)
        /// 	 | sign?  dollar = DOLLAR  (decimal | float)
        /// 	 | parameter
        /// </summary>
        public override AstRoot VisitConstant(TSqlParser.ConstantContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstConstant.Create(context, list);
        }
        
        /// <summary>
        /// string_id2
        /// 	 : stringtext
        /// 	 | id_
        /// 	 | local_id
        /// </summary>
        public override AstRoot VisitString_id2(TSqlParser.String_id2Context context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstStringId2.Create(context, list);
        }
        
        /// <summary>
        /// all_server_database
        /// 	 : ALL  SERVER
        /// 	 | DATABASE
        /// </summary>
        public override AstRoot VisitAll_server_database(TSqlParser.All_server_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAllServerDatabase.Create(context, list);
        }
        
        /// <summary>
        /// encryption_state
        /// 	 : ENCRYPTION  EQUAL  (DISABLED | SUPPORTED | REQUIRED)
        /// </summary>
        public override AstRoot VisitEncryption_state(TSqlParser.Encryption_stateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEncryptionState(context, list);
        }
        
        /// <summary>
        /// parameterization_option
        /// 	 : PARAMETERIZATION  (SIMPLE | FORCED)
        /// </summary>
        public override AstRoot VisitParameterization_option(TSqlParser.Parameterization_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstParameterizationOption(context, list);
        }
        
        /// <summary>
        /// event_session_predicate_leaf_ope
        /// 	 : EQUAL
        /// 	 | (LESS  GREATER)
        /// 	 | (EXCLAMATION  EQUAL)
        /// 	 | GREATER
        /// 	 | (GREATER  EQUAL)
        /// 	 | LESS
        /// 	 | LESS  EQUAL
        /// </summary>
        public override AstRoot VisitEvent_session_predicate_leaf_ope(TSqlParser.Event_session_predicate_leaf_opeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstEventSessionPredicateLeafOpe.Create(context, list);
        }
        
        /// <summary>
        /// cycle
        /// 	 : CYCLE
        /// 	 | NO  CYCLE
        /// </summary>
        public override AstRoot VisitCycle(TSqlParser.CycleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstCycle.Create(context, list);
        }
        
        /// <summary>
        /// size_value
        /// 	 : decimal  MB
        /// 	 | DEFAULT
        /// </summary>
        public override AstRoot VisitSize_value(TSqlParser.Size_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstSizeValue.Create(context, list);
        }
        
        /// <summary>
        /// decimal_default
        /// 	 : decimal
        /// 	 | DEFAULT
        /// </summary>
        public override AstRoot VisitDecimal_default(TSqlParser.Decimal_defaultContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstDecimalDefault.Create(context, list);
        }
        
        /// <summary>
        /// on_delete
        /// 	 : ON  DELETE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)
        /// </summary>
        public override AstRoot VisitOn_delete(TSqlParser.On_deleteContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOnDelete(context, list);
        }
        
        /// <summary>
        /// on_update
        /// 	 : ON  UPDATE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)
        /// </summary>
        public override AstRoot VisitOn_update(TSqlParser.On_updateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOnUpdate(context, list);
        }
        
        /// <summary>
        /// updated_asterisk
        /// 	 : (INSERTED | DELETED)  DOT  STAR
        /// </summary>
        public override AstRoot VisitUpdated_asterisk(TSqlParser.Updated_asteriskContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdatedAsterisk(context, list);
        }
        
        /// <summary>
        /// null_notnull
        /// 	 : NOT?  NULL_
        /// </summary>
        public override AstRoot VisitNull_notnull(TSqlParser.Null_notnullContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstNullNotnull(context, list);
        }
        
        /// <summary>
        /// comparison_operator
        /// 	 : EQUAL
        /// 	 | GREATER
        /// 	 | LESS
        /// 	 | LESS  EQUAL
        /// 	 | GREATER  EQUAL
        /// 	 | LESS  GREATER
        /// 	 | EXCLAMATION  EQUAL
        /// 	 | EXCLAMATION  GREATER
        /// 	 | EXCLAMATION  LESS
        /// </summary>
        public override AstRoot VisitComparison_operator(TSqlParser.Comparison_operatorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstComparisonOperator.Create(context, list);
        }
        
        /// <summary>
        /// assignment_operator
        /// 	 : PLUS_ASSIGN
        /// 	 | MINUS_ASSIGN
        /// 	 | MULT_ASSIGN
        /// 	 | DIV_ASSIGN
        /// 	 | MOD_ASSIGN
        /// 	 | AND_ASSIGN
        /// 	 | XOR_ASSIGN
        /// 	 | OR_ASSIGN
        /// </summary>
        public override AstRoot VisitAssignment_operator(TSqlParser.Assignment_operatorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return AstAssignmentOperator.Create(context, list);
        }
    }
}
