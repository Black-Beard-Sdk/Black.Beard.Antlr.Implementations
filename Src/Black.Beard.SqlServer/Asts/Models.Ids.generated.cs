//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Asts
{
    using System;
    using Antlr4.Runtime;
    using System.Collections;
    using Antlr4.Runtime.Tree;
    using Bb.Parsers;
    
    
    /// <summary>
    /// empty_statement
    /// 	 : SEMI
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstEmptyStatement : AstTerminal<string>
    {
        
        public AstEmptyStatement(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstEmptyStatement(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstEmptyStatement(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEmptyStatement(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_from_clause_start
    /// 	 : FROM
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAlterAssemblyFromClauseStart : AstTerminal<string>
    {
        
        public AstAlterAssemblyFromClauseStart(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstAlterAssemblyFromClauseStart(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAlterAssemblyFromClauseStart(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyFromClauseStart(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_drop
    /// 	 : DROP
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAlterAssemblyDrop : AstTerminal<string>
    {
        
        public AstAlterAssemblyDrop(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstAlterAssemblyDrop(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAlterAssemblyDrop(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyDrop(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_file_name
    /// 	 : STRING
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAlterAssemblyFileName : AstTerminal<string>
    {
        
        public AstAlterAssemblyFileName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstAlterAssemblyFileName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAlterAssemblyFileName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyFileName(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_as
    /// 	 : AS
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAlterAssemblyAs : AstTerminal<string>
    {
        
        public AstAlterAssemblyAs(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstAlterAssemblyAs(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAlterAssemblyAs(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyAs(this);
        }
    }
    
    /// <summary>
    /// alter_assembly_with
    /// 	 : WITH
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAlterAssemblyWith : AstTerminal<string>
    {
        
        public AstAlterAssemblyWith(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstAlterAssemblyWith(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAlterAssemblyWith(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyWith(this);
        }
    }
    
    /// <summary>
    /// network_file_start
    /// 	 : DOUBLE_BACK_SLASH
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstNetworkFileStart : AstTerminal<string>
    {
        
        public AstNetworkFileStart(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstNetworkFileStart(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstNetworkFileStart(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNetworkFileStart(this);
        }
    }
    
    /// <summary>
    /// file_directory_path_separator
    /// 	 : BACKSLASH
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstFileDirectoryPathSeparator : AstTerminal<string>
    {
        
        public AstFileDirectoryPathSeparator(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstFileDirectoryPathSeparator(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstFileDirectoryPathSeparator(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileDirectoryPathSeparator(this);
        }
    }
    
    /// <summary>
    /// local_drive
    /// 	 : DISK_DRIVE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstLocalDrive : AstTerminal<string>
    {
        
        public AstLocalDrive(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstLocalDrive(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstLocalDrive(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLocalDrive(this);
        }
    }
    
    /// <summary>
    /// multiple_local_file_start
    /// 	 : SINGLE_QUOTE
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstMultipleLocalFileStart : AstTerminal<string>
    {
        
        public AstMultipleLocalFileStart(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstMultipleLocalFileStart(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstMultipleLocalFileStart(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMultipleLocalFileStart(this);
        }
    }
    
    /// <summary>
    /// entity_to
    /// 	 : TO
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstEntityTo : AstTerminal<string>
    {
        
        public AstEntityTo(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstEntityTo(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstEntityTo(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEntityTo(this);
        }
    }
    
    /// <summary>
    /// colon_colon
    /// 	 : DOUBLE_COLON
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstColonColon : AstTerminal<string>
    {
        
        public AstColonColon(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstColonColon(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstColonColon(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColonColon(this);
        }
    }
    
    /// <summary>
    /// server_instance
    /// 	 : STRING
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstServerInstance : AstTerminal<string>
    {
        
        public AstServerInstance(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstServerInstance(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstServerInstance(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerInstance(this);
        }
    }
    
    /// <summary>
    /// ip_v4_failover
    /// 	 : STRING
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstIpV4Failover : AstTerminal<string>
    {
        
        public AstIpV4Failover(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstIpV4Failover(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstIpV4Failover(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIpV4Failover(this);
        }
    }
    
    /// <summary>
    /// ip_v6_failover
    /// 	 : STRING
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstIpV6Failover : AstTerminal<string>
    {
        
        public AstIpV6Failover(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstIpV6Failover(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstIpV6Failover(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIpV6Failover(this);
        }
    }
    
    /// <summary>
    /// message_type_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstMessageTypeName : AstTerminal<string>
    {
        
        public AstMessageTypeName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstMessageTypeName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstMessageTypeName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMessageTypeName(this);
        }
    }
    
    /// <summary>
    /// partition_function_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstPartitionFunctionName : AstTerminal<string>
    {
        
        public AstPartitionFunctionName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstPartitionFunctionName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstPartitionFunctionName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionFunctionName(this);
        }
    }
    
    /// <summary>
    /// partition_scheme_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstPartitionSchemeName : AstTerminal<string>
    {
        
        public AstPartitionSchemeName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstPartitionSchemeName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstPartitionSchemeName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionSchemeName(this);
        }
    }
    
    /// <summary>
    /// mirroring_partner
    /// 	 : PARTNER
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstMirroringPartner : AstTerminal<string>
    {
        
        public AstMirroringPartner(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstMirroringPartner(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstMirroringPartner(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMirroringPartner(this);
        }
    }
    
    /// <summary>
    /// mirroring_witness
    /// 	 : WITNESS
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstMirroringWitness : AstTerminal<string>
    {
        
        public AstMirroringWitness(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstMirroringWitness(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstMirroringWitness(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMirroringWitness(this);
        }
    }
    
    /// <summary>
    /// witness_partner_equal
    /// 	 : EQUAL
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstWitnessPartnerEqual : AstTerminal<string>
    {
        
        public AstWitnessPartnerEqual(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstWitnessPartnerEqual(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstWitnessPartnerEqual(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWitnessPartnerEqual(this);
        }
    }
    
    /// <summary>
    /// mirroring_host_port_seperator
    /// 	 : COLON
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstMirroringHostPortSeperator : AstTerminal<string>
    {
        
        public AstMirroringHostPortSeperator(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstMirroringHostPortSeperator(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstMirroringHostPortSeperator(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMirroringHostPortSeperator(this);
        }
    }
    
    /// <summary>
    /// parameter
    /// 	 : PLACEHOLDER
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstParameter : AstTerminal<string>
    {
        
        public AstParameter(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstParameter(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstParameter(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitParameter(this);
        }
    }
    
    /// <summary>
    /// star_asterisk
    /// 	 : STAR
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstStarAsterisk : AstTerminal<string>
    {
        
        public AstStarAsterisk(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstStarAsterisk(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstStarAsterisk(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStarAsterisk(this);
        }
    }
    
    /// <summary>
    /// table_alias
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstTableAlias : AstTerminal<string>
    {
        
        public AstTableAlias(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstTableAlias(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstTableAlias(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableAlias(this);
        }
    }
    
    /// <summary>
    /// simple_id
    /// 	 : ID
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstSimpleId : AstTerminal<string>
    {
        
        public AstSimpleId(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstSimpleId(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstSimpleId(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSimpleId(this);
        }
    }
    
    /// <summary>
    /// filestream_filegroup_or_partition_schema_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstFilestreamFilegroupOrPartitionSchemaName : AstTerminal<string>
    {
        
        public AstFilestreamFilegroupOrPartitionSchemaName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstFilestreamFilegroupOrPartitionSchemaName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstFilestreamFilegroupOrPartitionSchemaName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilestreamFilegroupOrPartitionSchemaName(this);
        }
    }
    
    /// <summary>
    /// action_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstActionName : AstTerminal<string>
    {
        
        public AstActionName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstActionName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstActionName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitActionName(this);
        }
    }
    
    /// <summary>
    /// aggregate_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAggregateName : AstTerminal<string>
    {
        
        public AstAggregateName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstAggregateName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAggregateName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAggregateName(this);
        }
    }
    
    /// <summary>
    /// app_role_schema
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAppRoleSchema : AstTerminal<string>
    {
        
        public AstAppRoleSchema(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstAppRoleSchema(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAppRoleSchema(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAppRoleSchema(this);
        }
    }
    
    /// <summary>
    /// application_role
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstApplicationRole : AstTerminal<string>
    {
        
        public AstApplicationRole(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstApplicationRole(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstApplicationRole(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitApplicationRole(this);
        }
    }
    
    /// <summary>
    /// assembly_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAssemblyName : AstTerminal<string>
    {
        
        public AstAssemblyName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstAssemblyName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAssemblyName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAssemblyName(this);
        }
    }
    
    /// <summary>
    /// asym_key_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAsymKeyName : AstTerminal<string>
    {
        
        public AstAsymKeyName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstAsymKeyName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAsymKeyName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsymKeyName(this);
        }
    }
    
    /// <summary>
    /// audit_action_group_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAuditActionGroupName : AstTerminal<string>
    {
        
        public AstAuditActionGroupName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstAuditActionGroupName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAuditActionGroupName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditActionGroupName(this);
        }
    }
    
    /// <summary>
    /// audit_guid
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAuditGuid : AstTerminal<string>
    {
        
        public AstAuditGuid(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstAuditGuid(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAuditGuid(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditGuid(this);
        }
    }
    
    /// <summary>
    /// audit_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAuditName : AstTerminal<string>
    {
        
        public AstAuditName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstAuditName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAuditName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditName(this);
        }
    }
    
    /// <summary>
    /// audit_specification_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAuditSpecificationName : AstTerminal<string>
    {
        
        public AstAuditSpecificationName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstAuditSpecificationName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAuditSpecificationName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditSpecificationName(this);
        }
    }
    
    /// <summary>
    /// azure_active_directory_principal
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstAzureActiveDirectoryPrincipal : AstTerminal<string>
    {
        
        public AstAzureActiveDirectoryPrincipal(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstAzureActiveDirectoryPrincipal(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstAzureActiveDirectoryPrincipal(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAzureActiveDirectoryPrincipal(this);
        }
    }
    
    /// <summary>
    /// backup_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstBackupName : AstTerminal<string>
    {
        
        public AstBackupName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstBackupName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstBackupName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupName(this);
        }
    }
    
    /// <summary>
    /// binding_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstBindingName : AstTerminal<string>
    {
        
        public AstBindingName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstBindingName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstBindingName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBindingName(this);
        }
    }
    
    /// <summary>
    /// catalog_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstCatalogName : AstTerminal<string>
    {
        
        public AstCatalogName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstCatalogName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstCatalogName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCatalogName(this);
        }
    }
    
    /// <summary>
    /// cert_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstCertName : AstTerminal<string>
    {
        
        public AstCertName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstCertName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstCertName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCertName(this);
        }
    }
    
    /// <summary>
    /// certificate_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstCertificateName : AstTerminal<string>
    {
        
        public AstCertificateName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstCertificateName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstCertificateName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCertificateName(this);
        }
    }
    
    /// <summary>
    /// class_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstClassName : AstTerminal<string>
    {
        
        public AstClassName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstClassName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstClassName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassName(this);
        }
    }
    
    /// <summary>
    /// collation_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstCollationName : AstTerminal<string>
    {
        
        public AstCollationName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstCollationName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstCollationName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCollationName(this);
        }
    }
    
    /// <summary>
    /// column_encryption_key
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstColumnEncryptionKey : AstTerminal<string>
    {
        
        public AstColumnEncryptionKey(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstColumnEncryptionKey(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstColumnEncryptionKey(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnEncryptionKey(this);
        }
    }
    
    /// <summary>
    /// column_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstColumnName : AstTerminal<string>
    {
        
        public AstColumnName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstColumnName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstColumnName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnName(this);
        }
    }
    
    /// <summary>
    /// column_name_or_arguments
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstColumnNameOrArguments : AstTerminal<string>
    {
        
        public AstColumnNameOrArguments(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstColumnNameOrArguments(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstColumnNameOrArguments(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnNameOrArguments(this);
        }
    }
    
    /// <summary>
    /// constraint_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstConstraintName : AstTerminal<string>
    {
        
        public AstConstraintName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstConstraintName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstConstraintName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConstraintName(this);
        }
    }
    
    /// <summary>
    /// create_service_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstCreateServiceName : AstTerminal<string>
    {
        
        public AstCreateServiceName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstCreateServiceName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstCreateServiceName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServiceName(this);
        }
    }
    
    /// <summary>
    /// credential_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstCredentialName : AstTerminal<string>
    {
        
        public AstCredentialName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstCredentialName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstCredentialName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCredentialName(this);
        }
    }
    
    /// <summary>
    /// cryptographic_provider_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstCryptographicProviderName : AstTerminal<string>
    {
        
        public AstCryptographicProviderName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstCryptographicProviderName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstCryptographicProviderName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCryptographicProviderName(this);
        }
    }
    
    /// <summary>
    /// data_source_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstDataSourceName : AstTerminal<string>
    {
        
        public AstDataSourceName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstDataSourceName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstDataSourceName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDataSourceName(this);
        }
    }
    
    /// <summary>
    /// database_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstDatabaseName : AstTerminal<string>
    {
        
        public AstDatabaseName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstDatabaseName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstDatabaseName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseName(this);
        }
    }
    
    /// <summary>
    /// dropped_service_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstDroppedServiceName : AstTerminal<string>
    {
        
        public AstDroppedServiceName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstDroppedServiceName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstDroppedServiceName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDroppedServiceName(this);
        }
    }
    
    /// <summary>
    /// encryptor_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstEncryptorName : AstTerminal<string>
    {
        
        public AstEncryptorName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstEncryptorName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstEncryptorName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEncryptorName(this);
        }
    }
    
    /// <summary>
    /// encryption_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstEncryptionName : AstTerminal<string>
    {
        
        public AstEncryptionName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstEncryptionName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstEncryptionName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEncryptionName(this);
        }
    }
    
    /// <summary>
    /// endpoint_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstEndpointName : AstTerminal<string>
    {
        
        public AstEndpointName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstEndpointName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstEndpointName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEndpointName(this);
        }
    }
    
    /// <summary>
    /// event_customizable_attributue
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstEventCustomizableAttributue : AstTerminal<string>
    {
        
        public AstEventCustomizableAttributue(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstEventCustomizableAttributue(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstEventCustomizableAttributue(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventCustomizableAttributue(this);
        }
    }
    
    /// <summary>
    /// event_field_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstEventFieldName : AstTerminal<string>
    {
        
        public AstEventFieldName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstEventFieldName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstEventFieldName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventFieldName(this);
        }
    }
    
    /// <summary>
    /// event_module_guid
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstEventModuleGuid : AstTerminal<string>
    {
        
        public AstEventModuleGuid(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstEventModuleGuid(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstEventModuleGuid(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventModuleGuid(this);
        }
    }
    
    /// <summary>
    /// event_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstEventName : AstTerminal<string>
    {
        
        public AstEventName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstEventName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstEventName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventName(this);
        }
    }
    
    /// <summary>
    /// event_notification_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstEventNotificationName : AstTerminal<string>
    {
        
        public AstEventNotificationName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstEventNotificationName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstEventNotificationName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventNotificationName(this);
        }
    }
    
    /// <summary>
    /// event_package_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstEventPackageName : AstTerminal<string>
    {
        
        public AstEventPackageName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstEventPackageName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstEventPackageName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventPackageName(this);
        }
    }
    
    /// <summary>
    /// event_session_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstEventSessionName : AstTerminal<string>
    {
        
        public AstEventSessionName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstEventSessionName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstEventSessionName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionName(this);
        }
    }
    
    /// <summary>
    /// event_type_or_group
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstEventTypeOrGroup : AstTerminal<string>
    {
        
        public AstEventTypeOrGroup(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstEventTypeOrGroup(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstEventTypeOrGroup(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventTypeOrGroup(this);
        }
    }
    
    /// <summary>
    /// ext_type
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstExtType : AstTerminal<string>
    {
        
        public AstExtType(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstExtType(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstExtType(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExtType(this);
        }
    }
    
    /// <summary>
    /// external_data_source_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstExternalDataSourceName : AstTerminal<string>
    {
        
        public AstExternalDataSourceName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstExternalDataSourceName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstExternalDataSourceName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalDataSourceName(this);
        }
    }
    
    /// <summary>
    /// external_file_format_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstExternalFileFormatName : AstTerminal<string>
    {
        
        public AstExternalFileFormatName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstExternalFileFormatName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstExternalFileFormatName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalFileFormatName(this);
        }
    }
    
    /// <summary>
    /// external_pool_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstExternalPoolName : AstTerminal<string>
    {
        
        public AstExternalPoolName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstExternalPoolName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstExternalPoolName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalPoolName(this);
        }
    }
    
    /// <summary>
    /// file_group_id
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstFileGroupId : AstTerminal<string>
    {
        
        public AstFileGroupId(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstFileGroupId(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstFileGroupId(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileGroupId(this);
        }
    }
    
    /// <summary>
    /// file_group_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstFileGroupName : AstTerminal<string>
    {
        
        public AstFileGroupName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstFileGroupName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstFileGroupName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileGroupName(this);
        }
    }
    
    /// <summary>
    /// function_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstFunctionName : AstTerminal<string>
    {
        
        public AstFunctionName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstFunctionName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstFunctionName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFunctionName(this);
        }
    }
    
    /// <summary>
    /// group_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstGroupName : AstTerminal<string>
    {
        
        public AstGroupName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstGroupName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstGroupName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupName(this);
        }
    }
    
    /// <summary>
    /// index_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstIndexName : AstTerminal<string>
    {
        
        public AstIndexName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstIndexName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstIndexName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIndexName(this);
        }
    }
    
    /// <summary>
    /// language
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstLanguage : AstTerminal<string>
    {
        
        public AstLanguage(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstLanguage(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstLanguage(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLanguage(this);
        }
    }
    
    /// <summary>
    /// library_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstLibraryName : AstTerminal<string>
    {
        
        public AstLibraryName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstLibraryName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstLibraryName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLibraryName(this);
        }
    }
    
    /// <summary>
    /// linked_server
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstLinkedServer : AstTerminal<string>
    {
        
        public AstLinkedServer(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstLinkedServer(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstLinkedServer(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLinkedServer(this);
        }
    }
    
    /// <summary>
    /// logical_device_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstLogicalDeviceName : AstTerminal<string>
    {
        
        public AstLogicalDeviceName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstLogicalDeviceName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstLogicalDeviceName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLogicalDeviceName(this);
        }
    }
    
    /// <summary>
    /// login_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstLoginName : AstTerminal<string>
    {
        
        public AstLoginName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstLoginName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstLoginName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLoginName(this);
        }
    }
    
    /// <summary>
    /// master_key
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstMasterKey : AstTerminal<string>
    {
        
        public AstMasterKey(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstMasterKey(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstMasterKey(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMasterKey(this);
        }
    }
    
    /// <summary>
    /// method_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstMethodName : AstTerminal<string>
    {
        
        public AstMethodName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstMethodName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstMethodName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMethodName(this);
        }
    }
    
    /// <summary>
    /// modified_contract_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstModifiedContractName : AstTerminal<string>
    {
        
        public AstModifiedContractName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstModifiedContractName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstModifiedContractName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModifiedContractName(this);
        }
    }
    
    /// <summary>
    /// modified_service_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstModifiedServiceName : AstTerminal<string>
    {
        
        public AstModifiedServiceName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstModifiedServiceName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstModifiedServiceName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModifiedServiceName(this);
        }
    }
    
    /// <summary>
    /// module_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstModuleName : AstTerminal<string>
    {
        
        public AstModuleName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstModuleName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstModuleName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModuleName(this);
        }
    }
    
    /// <summary>
    /// network_computer
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstNetworkComputer : AstTerminal<string>
    {
        
        public AstNetworkComputer(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstNetworkComputer(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstNetworkComputer(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNetworkComputer(this);
        }
    }
    
    /// <summary>
    /// new_application_role_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstNewApplicationRoleName : AstTerminal<string>
    {
        
        public AstNewApplicationRoleName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstNewApplicationRoleName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstNewApplicationRoleName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNewApplicationRoleName(this);
        }
    }
    
    /// <summary>
    /// new_file_group_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstNewFileGroupName : AstTerminal<string>
    {
        
        public AstNewFileGroupName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstNewFileGroupName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstNewFileGroupName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNewFileGroupName(this);
        }
    }
    
    /// <summary>
    /// non_static_attr
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstNonStaticAttr : AstTerminal<string>
    {
        
        public AstNonStaticAttr(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstNonStaticAttr(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstNonStaticAttr(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNonStaticAttr(this);
        }
    }
    
    /// <summary>
    /// notification_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstNotificationName : AstTerminal<string>
    {
        
        public AstNotificationName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstNotificationName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstNotificationName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNotificationName(this);
        }
    }
    
    /// <summary>
    /// object_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstObjectName : AstTerminal<string>
    {
        
        public AstObjectName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstObjectName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstObjectName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitObjectName(this);
        }
    }
    
    /// <summary>
    /// owner_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstOwnerName : AstTerminal<string>
    {
        
        public AstOwnerName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstOwnerName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstOwnerName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOwnerName(this);
        }
    }
    
    /// <summary>
    /// partition_column_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstPartitionColumnName : AstTerminal<string>
    {
        
        public AstPartitionColumnName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstPartitionColumnName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstPartitionColumnName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionColumnName(this);
        }
    }
    
    /// <summary>
    /// pool_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstPoolName : AstTerminal<string>
    {
        
        public AstPoolName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstPoolName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstPoolName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPoolName(this);
        }
    }
    
    /// <summary>
    /// predicate_compare_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstPredicateCompareName : AstTerminal<string>
    {
        
        public AstPredicateCompareName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstPredicateCompareName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstPredicateCompareName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateCompareName(this);
        }
    }
    
    /// <summary>
    /// predicate_source_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstPredicateSourceName : AstTerminal<string>
    {
        
        public AstPredicateSourceName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstPredicateSourceName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstPredicateSourceName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateSourceName(this);
        }
    }
    
    /// <summary>
    /// property_list_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstPropertyListName : AstTerminal<string>
    {
        
        public AstPropertyListName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstPropertyListName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstPropertyListName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPropertyListName(this);
        }
    }
    
    /// <summary>
    /// provider_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstProviderName : AstTerminal<string>
    {
        
        public AstProviderName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstProviderName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstProviderName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProviderName(this);
        }
    }
    
    /// <summary>
    /// queue_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstQueueName : AstTerminal<string>
    {
        
        public AstQueueName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstQueueName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstQueueName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueName(this);
        }
    }
    
    /// <summary>
    /// relational_schema
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstRelationalSchema : AstTerminal<string>
    {
        
        public AstRelationalSchema(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstRelationalSchema(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstRelationalSchema(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRelationalSchema(this);
        }
    }
    
    /// <summary>
    /// role_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstRoleName : AstTerminal<string>
    {
        
        public AstRoleName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstRoleName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstRoleName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRoleName(this);
        }
    }
    
    /// <summary>
    /// route_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstRouteName : AstTerminal<string>
    {
        
        public AstRouteName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstRouteName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstRouteName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRouteName(this);
        }
    }
    
    /// <summary>
    /// rule_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstRuleName : AstTerminal<string>
    {
        
        public AstRuleName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstRuleName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstRuleName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRuleName(this);
        }
    }
    
    /// <summary>
    /// schema_collection_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstSchemaCollectionName : AstTerminal<string>
    {
        
        public AstSchemaCollectionName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstSchemaCollectionName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstSchemaCollectionName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaCollectionName(this);
        }
    }
    
    /// <summary>
    /// schema_id
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstSchemaId : AstTerminal<string>
    {
        
        public AstSchemaId(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstSchemaId(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstSchemaId(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaId(this);
        }
    }
    
    /// <summary>
    /// schema_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstSchemaName : AstTerminal<string>
    {
        
        public AstSchemaName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstSchemaName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstSchemaName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaName(this);
        }
    }
    
    /// <summary>
    /// security_policy_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstSecurityPolicyName : AstTerminal<string>
    {
        
        public AstSecurityPolicyName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstSecurityPolicyName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstSecurityPolicyName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSecurityPolicyName(this);
        }
    }
    
    /// <summary>
    /// security_predicate_function_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstSecurityPredicateFunctionName : AstTerminal<string>
    {
        
        public AstSecurityPredicateFunctionName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstSecurityPredicateFunctionName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstSecurityPredicateFunctionName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSecurityPredicateFunctionName(this);
        }
    }
    
    /// <summary>
    /// sequence_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstSequenceName : AstTerminal<string>
    {
        
        public AstSequenceName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstSequenceName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstSequenceName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSequenceName(this);
        }
    }
    
    /// <summary>
    /// server_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstServerName : AstTerminal<string>
    {
        
        public AstServerName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstServerName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstServerName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerName(this);
        }
    }
    
    /// <summary>
    /// server_role_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstServerRoleName : AstTerminal<string>
    {
        
        public AstServerRoleName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstServerRoleName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstServerRoleName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerRoleName(this);
        }
    }
    
    /// <summary>
    /// source_list_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstSourceListName : AstTerminal<string>
    {
        
        public AstSourceListName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstSourceListName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstSourceListName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSourceListName(this);
        }
    }
    
    /// <summary>
    /// sql_identifier
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstSqlIdentifier : AstTerminal<string>
    {
        
        public AstSqlIdentifier(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstSqlIdentifier(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstSqlIdentifier(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlIdentifier(this);
        }
    }
    
    /// <summary>
    /// static_attr
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstStaticAttr : AstTerminal<string>
    {
        
        public AstStaticAttr(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstStaticAttr(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstStaticAttr(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStaticAttr(this);
        }
    }
    
    /// <summary>
    /// statistics_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstStatisticsName : AstTerminal<string>
    {
        
        public AstStatisticsName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstStatisticsName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstStatisticsName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStatisticsName(this);
        }
    }
    
    /// <summary>
    /// stoplist_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstStoplistName : AstTerminal<string>
    {
        
        public AstStoplistName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstStoplistName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstStoplistName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStoplistName(this);
        }
    }
    
    /// <summary>
    /// symmetric_key_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstSymmetricKeyName : AstTerminal<string>
    {
        
        public AstSymmetricKeyName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstSymmetricKeyName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstSymmetricKeyName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSymmetricKeyName(this);
        }
    }
    
    /// <summary>
    /// synonym_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstSynonymName : AstTerminal<string>
    {
        
        public AstSynonymName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstSynonymName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstSynonymName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSynonymName(this);
        }
    }
    
    /// <summary>
    /// table_or_view_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstTableOrViewName : AstTerminal<string>
    {
        
        public AstTableOrViewName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstTableOrViewName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstTableOrViewName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableOrViewName(this);
        }
    }
    
    /// <summary>
    /// table_variable
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstTableVariable : AstTerminal<string>
    {
        
        public AstTableVariable(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstTableVariable(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstTableVariable(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableVariable(this);
        }
    }
    
    /// <summary>
    /// tableName
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstTableName : AstTerminal<string>
    {
        
        public AstTableName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstTableName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstTableName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableName(this);
        }
    }
    
    /// <summary>
    /// target_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstTargetName : AstTerminal<string>
    {
        
        public AstTargetName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstTargetName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstTargetName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetName(this);
        }
    }
    
    /// <summary>
    /// target_parameter_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstTargetParameterName : AstTerminal<string>
    {
        
        public AstTargetParameterName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstTargetParameterName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstTargetParameterName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetParameterName(this);
        }
    }
    
    /// <summary>
    /// trigger_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstTriggerName : AstTerminal<string>
    {
        
        public AstTriggerName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstTriggerName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstTriggerName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTriggerName(this);
        }
    }
    
    /// <summary>
    /// tvf_schema_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstTvfSchemaName : AstTerminal<string>
    {
        
        public AstTvfSchemaName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstTvfSchemaName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstTvfSchemaName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTvfSchemaName(this);
        }
    }
    
    /// <summary>
    /// type_schema
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstTypeSchema : AstTerminal<string>
    {
        
        public AstTypeSchema(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstTypeSchema(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstTypeSchema(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTypeSchema(this);
        }
    }
    
    /// <summary>
    /// udt_column_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstUdtColumnName : AstTerminal<string>
    {
        
        public AstUdtColumnName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstUdtColumnName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstUdtColumnName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUdtColumnName(this);
        }
    }
    
    /// <summary>
    /// unscaled_type
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstUnscaledType : AstTerminal<string>
    {
        
        public AstUnscaledType(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstUnscaledType(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstUnscaledType(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnscaledType(this);
        }
    }
    
    /// <summary>
    /// user_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstUserName : AstTerminal<string>
    {
        
        public AstUserName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstUserName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstUserName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUserName(this);
        }
    }
    
    /// <summary>
    /// windows_principal
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstWindowsPrincipal : AstTerminal<string>
    {
        
        public AstWindowsPrincipal(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstWindowsPrincipal(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstWindowsPrincipal(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWindowsPrincipal(this);
        }
    }
    
    /// <summary>
    /// workload_group_group_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstWorkloadGroupGroupName : AstTerminal<string>
    {
        
        public AstWorkloadGroupGroupName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstWorkloadGroupGroupName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstWorkloadGroupGroupName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWorkloadGroupGroupName(this);
        }
    }
    
    /// <summary>
    /// workload_group_pool_name
    /// 	 : id_
    /// </summary>
    /// <remarks>
    /// Strategy : ClassTerminalAlias
    /// </remarks>
    public partial class AstWorkloadGroupPoolName : AstTerminal<string>
    {
        
        public AstWorkloadGroupPoolName(ITerminalNode t, string value) : 
                base(t, value)
        {
        }
        
        public AstWorkloadGroupPoolName(ParserRuleContext ctx) : 
                base(ctx, ctx.GetText())
        {
        }
        
        public AstWorkloadGroupPoolName(Position t, string value) : 
                base(t, value)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWorkloadGroupPoolName(this);
        }
    }
}
