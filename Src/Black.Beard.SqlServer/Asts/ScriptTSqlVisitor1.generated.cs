//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Parsers
{
    using System;
    using Bb.Parsers.Tsql;
    using Bb.Asts;
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using System.Collections;
    
    
    public partial class ScriptTSqlVisitor
    {
        
        public override AstRoot VisitTsql_file(TSqlParser.Tsql_fileContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTsqlFile(context, list);
        }
        
        public override AstRoot VisitBatch(TSqlParser.BatchContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstBatch(context, list);
        }
        
        public override AstRoot VisitSql_clause(TSqlParser.Sql_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstSqlClause(context, list);
        }
        
        public override AstRoot VisitBreak_statement(TSqlParser.Break_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstBreakStatement(context, list);
        }
        
        public override AstRoot VisitContinue_statement(TSqlParser.Continue_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstContinueStatement(context, list);
        }
        
        public override AstRoot VisitGoto_statement(TSqlParser.Goto_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstGotoStatement(context, list);
        }
        
        public override AstRoot VisitThrow_statement(TSqlParser.Throw_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstThrowStatement(context, list);
        }
        
        public override AstRoot VisitThrow_error_number(TSqlParser.Throw_error_numberContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstThrowErrorNumber(context, list);
        }
        
        public override AstRoot VisitThrow_message(TSqlParser.Throw_messageContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstThrowMessage(context, list);
        }
        
        public override AstRoot VisitThrow_state(TSqlParser.Throw_stateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstThrowState(context, list);
        }
        
        public override AstRoot VisitTry_catch_statement(TSqlParser.Try_catch_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTryCatchStatement(context, list);
        }
        
        public override AstRoot VisitPrint_statement(TSqlParser.Print_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstPrintStatement(context, list);
        }
        
        public override AstRoot VisitRaiseerror_statement(TSqlParser.Raiseerror_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstRaiseerrorStatement(context, list);
        }
        
        public override AstRoot VisitEmpty_statement(TSqlParser.Empty_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstEmptyStatement(context, list);
        }
        
        public override AstRoot VisitAlter_assembly_start(TSqlParser.Alter_assembly_startContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterAssemblyStart(context, list);
        }
        
        public override AstRoot VisitAlter_assembly_from_clause_start(TSqlParser.Alter_assembly_from_clause_startContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterAssemblyFromClauseStart(context, list);
        }
        
        public override AstRoot VisitAlter_assembly_drop_multiple_files(TSqlParser.Alter_assembly_drop_multiple_filesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterAssemblyDropMultipleFiles(context, list);
        }
        
        public override AstRoot VisitAlter_assembly_drop(TSqlParser.Alter_assembly_dropContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterAssemblyDrop(context, list);
        }
        
        public override AstRoot VisitAlter_asssembly_add_clause_start(TSqlParser.Alter_asssembly_add_clause_startContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterAsssemblyAddClauseStart(context, list);
        }
        
        public override AstRoot VisitAlter_assembly_file_name(TSqlParser.Alter_assembly_file_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterAssemblyFileName(context, list);
        }
        
        public override AstRoot VisitAlter_assembly_as(TSqlParser.Alter_assembly_asContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterAssemblyAs(context, list);
        }
        
        public override AstRoot VisitAlter_assembly_with(TSqlParser.Alter_assembly_withContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterAssemblyWith(context, list);
        }
        
        public override AstRoot VisitClient_assembly_specifier(TSqlParser.Client_assembly_specifierContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstClientAssemblySpecifier(context, list);
        }
        
        public override AstRoot VisitAssembly_option(TSqlParser.Assembly_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAssemblyOption(context, list);
        }
        
        public override AstRoot VisitNetwork_file_start(TSqlParser.Network_file_startContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstNetworkFileStart(context, list);
        }
        
        public override AstRoot VisitFile_path(TSqlParser.File_pathContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstFilePath(context, list);
        }
        
        public override AstRoot VisitFile_directory_path_separator(TSqlParser.File_directory_path_separatorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstFileDirectoryPathSeparator(context, list);
        }
        
        public override AstRoot VisitLocal_drive(TSqlParser.Local_driveContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstLocalDrive(context, list);
        }
        
        public override AstRoot VisitMultiple_local_files(TSqlParser.Multiple_local_filesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstMultipleLocalFiles(context, list);
        }
        
        public override AstRoot VisitMultiple_local_file_start(TSqlParser.Multiple_local_file_startContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstMultipleLocalFileStart(context, list);
        }
        
        public override AstRoot VisitBinary_content_nexts(TSqlParser.Binary_content_nextsContext context)
        {
            TSqlParser.Binary_content_nextContext[] source = context.binary_content_next();
            AstBinaryContentNexts list = new AstBinaryContentNexts(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Binary_content_nextContext item = ((TSqlParser.Binary_content_nextContext)(enumerator.Current));
                AstBinaryContentNext acceptResult = ((AstBinaryContentNext)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        public override AstRoot VisitBinary_content(TSqlParser.Binary_contentContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstBinaryContent(context, list);
        }
        
        public override AstRoot VisitDrop_assembly(TSqlParser.Drop_assemblyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDropAssembly(context, list);
        }
        
        public override AstRoot VisitAlter_asymmetric_key_start(TSqlParser.Alter_asymmetric_key_startContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterAsymmetricKeyStart(context, list);
        }
        
        public override AstRoot VisitAsymmetric_key_option_start(TSqlParser.Asymmetric_key_option_startContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAsymmetricKeyOptionStart(context, list);
        }
        
        public override AstRoot VisitAsymmetric_key_password_change_option(TSqlParser.Asymmetric_key_password_change_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAsymmetricKeyPasswordChangeOption(context, list);
        }
        
        public override AstRoot VisitDrop_asymmetric_key(TSqlParser.Drop_asymmetric_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDropAsymmetricKey(context, list);
        }
        
        public override AstRoot VisitAuthorization_grantee(TSqlParser.Authorization_granteeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAuthorizationGrantee(context, list);
        }
        
        public override AstRoot VisitEntity_to(TSqlParser.Entity_toContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstEntityTo(context, list);
        }
        
        public override AstRoot VisitColon_colon(TSqlParser.Colon_colonContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstColonColon(context, list);
        }
        
        public override AstRoot VisitAlter_authorization_start(TSqlParser.Alter_authorization_startContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterAuthorizationStart(context, list);
        }
        
        public override AstRoot VisitClass_type(TSqlParser.Class_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstClassType(context, list);
        }
        
        public override AstRoot VisitClass_type_for_sql_database(TSqlParser.Class_type_for_sql_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstClassTypeForSqlDatabase(context, list);
        }
        
        public override AstRoot VisitClass_type_for_azure_dw(TSqlParser.Class_type_for_azure_dwContext context)
        {
            return new AstClassTypeForAzureDw(context, context.GetText());
        }
        
        public override AstRoot VisitClass_type_for_parallel_dw(TSqlParser.Class_type_for_parallel_dwContext context)
        {
            return new AstClassTypeForParallelDw(context, context.GetText());
        }
        
        public override AstRoot VisitClass_type_for_grant(TSqlParser.Class_type_for_grantContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstClassTypeForGrant(context, list);
        }
        
        public override AstRoot VisitAlter_availability_group_options(TSqlParser.Alter_availability_group_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterAvailabilityGroupOptions(context, list);
        }
        
        public override AstRoot VisitServer_instance(TSqlParser.Server_instanceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstServerInstance(context, list);
        }
        
        public override AstRoot VisitIp_v4_failover(TSqlParser.Ip_v4_failoverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstIpV4Failover(context, list);
        }
        
        public override AstRoot VisitIp_v6_failover(TSqlParser.Ip_v6_failoverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstIpV6Failover(context, list);
        }
        
        public override AstRoot VisitCreate_or_alter_broker_priority(TSqlParser.Create_or_alter_broker_priorityContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstCreateOrAlterBrokerPriority(context, list);
        }
        
        public override AstRoot VisitDrop_broker_priority(TSqlParser.Drop_broker_priorityContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDropBrokerPriority(context, list);
        }
        
        public override AstRoot VisitDrop_contract(TSqlParser.Drop_contractContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDropContract(context, list);
        }
        
        public override AstRoot VisitDrop_database(TSqlParser.Drop_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDropDatabase(context, list);
        }
        
        public override AstRoot VisitDrop_database_encryption_key(TSqlParser.Drop_database_encryption_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDropDatabaseEncryptionKey(context, list);
        }
        
        public override AstRoot VisitDrop_default(TSqlParser.Drop_defaultContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDropDefault(context, list);
        }
        
        public override AstRoot VisitDrop_event_notifications(TSqlParser.Drop_event_notificationsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDropEventNotifications(context, list);
        }
        
        public override AstRoot VisitDrop_master_key(TSqlParser.Drop_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDropMasterKey(context, list);
        }
        
        public override AstRoot VisitDrop_rule(TSqlParser.Drop_ruleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDropRule(context, list);
        }
        
        public override AstRoot VisitDrop_sequence(TSqlParser.Drop_sequenceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDropSequence(context, list);
        }
        
        public override AstRoot VisitDisable_trigger(TSqlParser.Disable_triggerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDisableTrigger(context, list);
        }
        
        public override AstRoot VisitEnable_trigger(TSqlParser.Enable_triggerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstEnableTrigger(context, list);
        }
        
        public override AstRoot VisitCreate_column_master_key(TSqlParser.Create_column_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstCreateColumnMasterKey(context, list);
        }
        
        public override AstRoot VisitStart_stop(TSqlParser.Start_stopContext context)
        {
            return new AstStartStop(context, context.GetText());
        }
        
        public override AstRoot VisitEvent_session_predicate_expression(TSqlParser.Event_session_predicate_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstEventSessionPredicateExpression(context, list);
        }
        
        public override AstRoot VisitEvent_session_predicate_factor(TSqlParser.Event_session_predicate_factorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstEventSessionPredicateFactor(context, list);
        }
        
        public override AstRoot VisitEvent_session_predicate_leaf(TSqlParser.Event_session_predicate_leafContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstEventSessionPredicateLeaf(context, list);
        }
        
        public override AstRoot VisitAlter_external_data_source(TSqlParser.Alter_external_data_sourceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterExternalDataSource(context, list);
        }
        
        public override AstRoot VisitAlter_external_resource_pool(TSqlParser.Alter_external_resource_poolContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterExternalResourcePool(context, list);
        }
        
        public override AstRoot VisitEnable_disable(TSqlParser.Enable_disableContext context)
        {
            return new AstEnableDisable(context, context.GetText());
        }
        
        public override AstRoot VisitAlter_master_key_sql_server(TSqlParser.Alter_master_key_sql_serverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterMasterKeySqlServer(context, list);
        }
        
        public override AstRoot VisitCreate_master_key_sql_server(TSqlParser.Create_master_key_sql_serverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstCreateMasterKeySqlServer(context, list);
        }
        
        public override AstRoot VisitAlter_master_key_azure_sql(TSqlParser.Alter_master_key_azure_sqlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterMasterKeyAzureSql(context, list);
        }
        
        public override AstRoot VisitCreate_master_key_azure_sql(TSqlParser.Create_master_key_azure_sqlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstCreateMasterKeyAzureSql(context, list);
        }
        
        public override AstRoot VisitSplit_or_merge(TSqlParser.Split_or_mergeContext context)
        {
            return new AstSplitOrMerge(context, context.GetText());
        }
        
        public override AstRoot VisitAlter_resource_governor(TSqlParser.Alter_resource_governorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterResourceGovernor(context, list);
        }
        
        public override AstRoot VisitAdd_drop(TSqlParser.Add_dropContext context)
        {
            return new AstAddDrop(context, context.GetText());
        }
        
        public override AstRoot VisitCreate_schema(TSqlParser.Create_schemaContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstCreateSchema(context, list);
        }
        
        public override AstRoot VisitEnum_dml(TSqlParser.Enum_dmlContext context)
        {
            return new AstEnumDml(context, context.GetText());
        }
        
        public override AstRoot VisitGrant_deny(TSqlParser.Grant_denyContext context)
        {
            return new AstGrantDeny(context, context.GetText());
        }
        
        public override AstRoot VisitAlter_server_configuration(TSqlParser.Alter_server_configurationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterServerConfiguration(context, list);
        }
        
        public override AstRoot VisitAlter_service_master_key(TSqlParser.Alter_service_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterServiceMasterKey(context, list);
        }
        
        public override AstRoot VisitCreate_user(TSqlParser.Create_userContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstCreateUser(context, list);
        }
        
        public override AstRoot VisitCreate_user_azure_sql_dw(TSqlParser.Create_user_azure_sql_dwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstCreateUserAzureSqlDw(context, list);
        }
        
        public override AstRoot VisitAlter_workload_group(TSqlParser.Alter_workload_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterWorkloadGroup(context, list);
        }
        
        public override AstRoot VisitQueue_settings(TSqlParser.Queue_settingsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstQueueSettings(context, list);
        }
        
        public override AstRoot VisitAlter_queue(TSqlParser.Alter_queueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterQueue(context, list);
        }
        
        public override AstRoot VisitQueue_action(TSqlParser.Queue_actionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstQueueAction(context, list);
        }
        
        public override AstRoot VisitQueue_rebuild_options(TSqlParser.Queue_rebuild_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstQueueRebuildOptions(context, list);
        }
        
        public override AstRoot VisitWhen_matches(TSqlParser.When_matchesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstWhenMatches(context, list);
        }
        
        public override AstRoot VisitMerge_matched(TSqlParser.Merge_matchedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstMergeMatched(context, list);
        }
        
        public override AstRoot VisitMerge_not_matched(TSqlParser.Merge_not_matchedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstMergeNotMatched(context, list);
        }
        
        public override AstRoot VisitDelete_statement_from(TSqlParser.Delete_statement_fromContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDeleteStatementFrom(context, list);
        }
        
        public override AstRoot VisitInsert_statement_value(TSqlParser.Insert_statement_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstInsertStatementValue(context, list);
        }
        
        public override AstRoot VisitTime(TSqlParser.TimeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTime(context, list);
        }
        
        public override AstRoot VisitCreate_database(TSqlParser.Create_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstCreateDatabase(context, list);
        }
        
        public override AstRoot VisitRelational_index_option(TSqlParser.Relational_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstRelationalIndexOption(context, list);
        }
        
        public override AstRoot VisitResumable_index_options(TSqlParser.Resumable_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstResumableIndexOptions(context, list);
        }
        
        public override AstRoot VisitResumable_index_option(TSqlParser.Resumable_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstResumableIndexOption(context, list);
        }
        
        public override AstRoot VisitReorganize_options(TSqlParser.Reorganize_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstReorganizeOptions(context, list);
        }
        
        public override AstRoot VisitReorganize_option(TSqlParser.Reorganize_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstReorganizeOption(context, list);
        }
        
        public override AstRoot VisitSet_index_option(TSqlParser.Set_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstSetIndexOption(context, list);
        }
        
        public override AstRoot VisitRebuild_partition(TSqlParser.Rebuild_partitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstRebuildPartition(context, list);
        }
        
        public override AstRoot VisitRebuild_index_option(TSqlParser.Rebuild_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstRebuildIndexOption(context, list);
        }
        
        public override AstRoot VisitSingle_partition_rebuild_index_option(TSqlParser.Single_partition_rebuild_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstSinglePartitionRebuildIndexOption(context, list);
        }
        
        public override AstRoot VisitOn_partitions(TSqlParser.On_partitionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstOnPartitions(context, list);
        }
        
        public override AstRoot VisitColumnstore_index_option(TSqlParser.Columnstore_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstColumnstoreIndexOption(context, list);
        }
        
        public override AstRoot VisitXml_index_option(TSqlParser.Xml_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstXmlIndexOption(context, list);
        }
        
        public override AstRoot VisitDml_trigger_option(TSqlParser.Dml_trigger_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDmlTriggerOption(context, list);
        }
        
        public override AstRoot VisitDml_trigger_operation(TSqlParser.Dml_trigger_operationContext context)
        {
            return new AstDmlTriggerOperation(context, context.GetText());
        }
        
        public override AstRoot VisitCreate_or_alter_function(TSqlParser.Create_or_alter_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstCreateOrAlterFunction(context, list);
        }
        
        public override AstRoot VisitProcedure_option(TSqlParser.Procedure_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstProcedureOption(context, list);
        }
        
        public override AstRoot VisitFunction_option(TSqlParser.Function_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstFunctionOption(context, list);
        }
        
        public override AstRoot VisitUpdate_statistics_option(TSqlParser.Update_statistics_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstUpdateStatisticsOption(context, list);
        }
        
        public override AstRoot VisitTable_indices(TSqlParser.Table_indicesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTableIndices(context, list);
        }
        
        public override AstRoot VisitTable_options(TSqlParser.Table_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTableOptions(context, list);
        }
        
        public override AstRoot VisitTable_option(TSqlParser.Table_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTableOption(context, list);
        }
        
        public override AstRoot VisitDistribution(TSqlParser.DistributionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDistribution(context, list);
        }
        
        public override AstRoot VisitCreate_table_index_option(TSqlParser.Create_table_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstCreateTableIndexOption(context, list);
        }
        
        public override AstRoot VisitView_attributes(TSqlParser.View_attributesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstViewAttributes(context, list);
        }
        
        public override AstRoot VisitView_attribute(TSqlParser.View_attributeContext context)
        {
            return new AstViewAttribute(context, context.GetText());
        }
        
        public override AstRoot VisitSwitch_partition(TSqlParser.Switch_partitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstSwitchPartition(context, list);
        }
        
        public override AstRoot VisitLow_priority_lock_wait(TSqlParser.Low_priority_lock_waitContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstLowPriorityLockWait(context, list);
        }
        
        public override AstRoot VisitAlter_database(TSqlParser.Alter_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterDatabase(context, list);
        }
        
        public override AstRoot VisitAdd_or_modify_files(TSqlParser.Add_or_modify_filesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAddOrModifyFiles(context, list);
        }
        
        public override AstRoot VisitAdd_or_modify_filegroups(TSqlParser.Add_or_modify_filegroupsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAddOrModifyFilegroups(context, list);
        }
        
        public override AstRoot VisitFilegroup_updatability_option(TSqlParser.Filegroup_updatability_optionContext context)
        {
            return new AstFilegroupUpdatabilityOption(context, context.GetText());
        }
        
        public override AstRoot VisitDatabase_optionspec(TSqlParser.Database_optionspecContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDatabaseOptionspec(context, list);
        }
        
        public override AstRoot VisitAuto_option(TSqlParser.Auto_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAutoOption(context, list);
        }
        
        public override AstRoot VisitChange_tracking_option(TSqlParser.Change_tracking_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstChangeTrackingOption(context, list);
        }
        
        public override AstRoot VisitChange_tracking_option_list(TSqlParser.Change_tracking_option_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstChangeTrackingOptionList(context, list);
        }
        
        public override AstRoot VisitContainment_option(TSqlParser.Containment_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstContainmentOption(context, list);
        }
        
        public override AstRoot VisitCursor_option(TSqlParser.Cursor_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstCursorOption(context, list);
        }
        
        public override AstRoot VisitLocal_global(TSqlParser.Local_globalContext context)
        {
            return new AstLocalGlobal(context, context.GetText());
        }
        
        public override AstRoot VisitMirroring_set_option(TSqlParser.Mirroring_set_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstMirroringSetOption(context, list);
        }
        
        public override AstRoot VisitMirroring_partner(TSqlParser.Mirroring_partnerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstMirroringPartner(context, list);
        }
        
        public override AstRoot VisitMirroring_witness(TSqlParser.Mirroring_witnessContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstMirroringWitness(context, list);
        }
        
        public override AstRoot VisitWitness_partner_equal(TSqlParser.Witness_partner_equalContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstWitnessPartnerEqual(context, list);
        }
        
        public override AstRoot VisitPartner_option(TSqlParser.Partner_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstPartnerOption(context, list);
        }
        
        public override AstRoot VisitWitness_option(TSqlParser.Witness_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstWitnessOption(context, list);
        }
        
        public override AstRoot VisitMirroring_host_port_seperator(TSqlParser.Mirroring_host_port_seperatorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstMirroringHostPortSeperator(context, list);
        }
        
        public override AstRoot VisitPartner_server_tcp_prefix(TSqlParser.Partner_server_tcp_prefixContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstPartnerServerTcpPrefix(context, list);
        }
        
        public override AstRoot VisitPort_number(TSqlParser.Port_numberContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstPortNumber(context, list);
        }
        
        public override AstRoot VisitHost(TSqlParser.HostContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstHost(context, list);
        }
        
        public override AstRoot VisitDb_state_option(TSqlParser.Db_state_optionContext context)
        {
            return new AstDbStateOption(context, context.GetText());
        }
        
        public override AstRoot VisitDb_update_option(TSqlParser.Db_update_optionContext context)
        {
            return new AstDbUpdateOption(context, context.GetText());
        }
        
        public override AstRoot VisitDb_user_access_option(TSqlParser.Db_user_access_optionContext context)
        {
            return new AstDbUserAccessOption(context, context.GetText());
        }
        
        public override AstRoot VisitDelayed_durability_option(TSqlParser.Delayed_durability_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDelayedDurabilityOption(context, list);
        }
        
        public override AstRoot VisitExternal_access_option(TSqlParser.External_access_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstExternalAccessOption(context, list);
        }
        
        public override AstRoot VisitId_or_string(TSqlParser.Id_or_stringContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstIdOrString(context, list);
        }
        
        public override AstRoot VisitHadr_options(TSqlParser.Hadr_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstHadrOptions(context, list);
        }
        
        public override AstRoot VisitParameterization_option(TSqlParser.Parameterization_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstParameterizationOption(context, list);
        }
        
        public override AstRoot VisitRecovery_option(TSqlParser.Recovery_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstRecoveryOption(context, list);
        }
        
        public override AstRoot VisitService_broker_option(TSqlParser.Service_broker_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstServiceBrokerOption(context, list);
        }
        
        public override AstRoot VisitSnapshot_option(TSqlParser.Snapshot_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstSnapshotOption(context, list);
        }
        
        public override AstRoot VisitSql_option(TSqlParser.Sql_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstSqlOption(context, list);
        }
        
        public override AstRoot VisitTarget_recovery_time_option(TSqlParser.Target_recovery_time_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTargetRecoveryTimeOption(context, list);
        }
        
        public override AstRoot VisitTermination(TSqlParser.TerminationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTermination(context, list);
        }
        
        public override AstRoot VisitDrop_index(TSqlParser.Drop_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDropIndex(context, list);
        }
        
        public override AstRoot VisitDrop_statistics(TSqlParser.Drop_statisticsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDropStatistics(context, list);
        }
        
        public override AstRoot VisitCreate_type(TSqlParser.Create_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstCreateType(context, list);
        }
        
        public override AstRoot VisitDrop_type(TSqlParser.Drop_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDropType(context, list);
        }
        
        public override AstRoot VisitOpendatasource(TSqlParser.OpendatasourceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstOpendatasource(context, list);
        }
        
        public override AstRoot VisitDeclare_statement(TSqlParser.Declare_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDeclareStatement(context, list);
        }
        
        public override AstRoot VisitXml_declaration(TSqlParser.Xml_declarationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstXmlDeclaration(context, list);
        }
        
        public override AstRoot VisitCursor_statement(TSqlParser.Cursor_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstCursorStatement(context, list);
        }
        
        public override AstRoot VisitBackup_database(TSqlParser.Backup_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstBackupDatabase(context, list);
        }
        
        public override AstRoot VisitBackup_log(TSqlParser.Backup_logContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstBackupLog(context, list);
        }
        
        public override AstRoot VisitBackup_master_key(TSqlParser.Backup_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstBackupMasterKey(context, list);
        }
        
        public override AstRoot VisitBackup_service_master_key(TSqlParser.Backup_service_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstBackupServiceMasterKey(context, list);
        }
        
        public override AstRoot VisitKill_statement(TSqlParser.Kill_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstKillStatement(context, list);
        }
        
        public override AstRoot VisitKill_process(TSqlParser.Kill_processContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstKillProcess(context, list);
        }
        
        public override AstRoot VisitKill_query_notification(TSqlParser.Kill_query_notificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstKillQueryNotification(context, list);
        }
        
        public override AstRoot VisitKill_stats_job(TSqlParser.Kill_stats_jobContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstKillStatsJob(context, list);
        }
        
        public override AstRoot VisitExecute_body(TSqlParser.Execute_bodyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstExecuteBody(context, list);
        }
        
        public override AstRoot VisitExecute_statement_arg(TSqlParser.Execute_statement_argContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstExecuteStatementArg(context, list);
        }
        
        public override AstRoot VisitExecute_statement_arg_named(TSqlParser.Execute_statement_arg_namedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstExecuteStatementArgNamed(context, list);
        }
        
        public override AstRoot VisitExecute_statement_arg_unnamed(TSqlParser.Execute_statement_arg_unnamedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstExecuteStatementArgUnnamed(context, list);
        }
        
        public override AstRoot VisitExecute_parameter(TSqlParser.Execute_parameterContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstExecuteParameter(context, list);
        }
        
        public override AstRoot VisitExecute_var_string(TSqlParser.Execute_var_stringContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstExecuteVarString(context, list);
        }
        
        public override AstRoot VisitSecurity_statement(TSqlParser.Security_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstSecurityStatement(context, list);
        }
        
        public override AstRoot VisitTo_principal_rincipal_ids(TSqlParser.To_principal_rincipal_idsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstToPrincipalRincipalIds(context, list);
        }
        
        public override AstRoot VisitPrincipal_id(TSqlParser.Principal_idContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstPrincipalId(context, list);
        }
        
        public override AstRoot VisitExisting_keys(TSqlParser.Existing_keysContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstExistingKeys(context, list);
        }
        
        public override AstRoot VisitPrivate_key_options(TSqlParser.Private_key_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstPrivateKeyOptions(context, list);
        }
        
        public override AstRoot VisitGenerate_new_keys(TSqlParser.Generate_new_keysContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstGenerateNewKeys(context, list);
        }
        
        public override AstRoot VisitDate_options(TSqlParser.Date_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDateOptions(context, list);
        }
        
        public override AstRoot VisitOpen_key(TSqlParser.Open_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstOpenKey(context, list);
        }
        
        public override AstRoot VisitClose_key(TSqlParser.Close_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstCloseKey(context, list);
        }
        
        public override AstRoot VisitCreate_key(TSqlParser.Create_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstCreateKey(context, list);
        }
        
        public override AstRoot VisitKey_options(TSqlParser.Key_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstKeyOptions(context, list);
        }
        
        public override AstRoot VisitAlgorithm(TSqlParser.AlgorithmContext context)
        {
            return new AstAlgorithm(context, context.GetText());
        }
        
        public override AstRoot VisitEncryption_mechanism(TSqlParser.Encryption_mechanismContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstEncryptionMechanism(context, list);
        }
        
        public override AstRoot VisitDecryption_mechanism(TSqlParser.Decryption_mechanismContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDecryptionMechanism(context, list);
        }
        
        public override AstRoot VisitGrant_permission(TSqlParser.Grant_permissionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstGrantPermission(context, list);
        }
        
        public override AstRoot VisitSet_statement(TSqlParser.Set_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstSetStatement(context, list);
        }
        
        public override AstRoot VisitTransaction_statement(TSqlParser.Transaction_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTransactionStatement(context, list);
        }
        
        public override AstRoot VisitGo_statement(TSqlParser.Go_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstGoStatement(context, list);
        }
        
        public override AstRoot VisitSetuser_statement(TSqlParser.Setuser_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstSetuserStatement(context, list);
        }
        
        public override AstRoot VisitReconfigure_statement(TSqlParser.Reconfigure_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstReconfigureStatement(context, list);
        }
        
        public override AstRoot VisitShutdown_statement(TSqlParser.Shutdown_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstShutdownStatement(context, list);
        }
        
        public override AstRoot VisitCheckpoint_statement(TSqlParser.Checkpoint_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstCheckpointStatement(context, list);
        }
        
        public override AstRoot VisitDbcc_special(TSqlParser.Dbcc_specialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDbccSpecial(context, list);
        }
        
        public override AstRoot VisitDbcc_clause(TSqlParser.Dbcc_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDbccClause(context, list);
        }
        
        public override AstRoot VisitDbcc_command(TSqlParser.Dbcc_commandContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDbccCommand(context, list);
        }
        
        public override AstRoot VisitExecute_clause(TSqlParser.Execute_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstExecuteClause(context, list);
        }
        
        public override AstRoot VisitTable_type_indices(TSqlParser.Table_type_indicesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTableTypeIndices(context, list);
        }
        
        public override AstRoot VisitXml_schema_collection(TSqlParser.Xml_schema_collectionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstXmlSchemaCollection(context, list);
        }
        
        public override AstRoot VisitColumn_def_table_constraint(TSqlParser.Column_def_table_constraintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstColumnDefTableConstraint(context, list);
        }
        
        public override AstRoot VisitColumn_definition_element(TSqlParser.Column_definition_elementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstColumnDefinitionElement(context, list);
        }
        
        public override AstRoot VisitColumn_constraint(TSqlParser.Column_constraintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstColumnConstraint(context, list);
        }
        
        public override AstRoot VisitOn_partition_or_filegroup(TSqlParser.On_partition_or_filegroupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstOnPartitionOrFilegroup(context, list);
        }
        
        public override AstRoot VisitTable_constraint(TSqlParser.Table_constraintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTableConstraint(context, list);
        }
        
        public override AstRoot VisitConnection_node(TSqlParser.Connection_nodeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstConnectionNode(context, list);
        }
        
        public override AstRoot VisitOn_delete(TSqlParser.On_deleteContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstOnDelete(context, list);
        }
        
        public override AstRoot VisitOn_update(TSqlParser.On_updateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstOnUpdate(context, list);
        }
        
        public override AstRoot VisitAlter_table_index_option(TSqlParser.Alter_table_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAlterTableIndexOption(context, list);
        }
        
        public override AstRoot VisitSensitive(TSqlParser.SensitiveContext context)
        {
            return new AstSensitive(context, context.GetText());
        }
        
        public override AstRoot VisitDeclare_set_cursor_common_partial(TSqlParser.Declare_set_cursor_common_partialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDeclareSetCursorCommonPartial(context, list);
        }
        
        public override AstRoot VisitAbsolute_relative(TSqlParser.Absolute_relativeContext context)
        {
            return new AstAbsoluteRelative(context, context.GetText());
        }
        
        public override AstRoot VisitFetch_cursor_strategy(TSqlParser.Fetch_cursor_strategyContext context)
        {
            return new AstFetchCursorStrategy(context, context.GetText());
        }
        
        public override AstRoot VisitLocal_ids(TSqlParser.Local_idsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstLocalIds(context, list);
        }
        
        public override AstRoot VisitSet_special(TSqlParser.Set_specialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstSetSpecial(context, list);
        }
        
        public override AstRoot VisitSpecial_list(TSqlParser.Special_listContext context)
        {
            return new AstSpecialList(context, context.GetText());
        }
        
        public override AstRoot VisitConstant_LOCAL_ID(TSqlParser.Constant_LOCAL_IDContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstConstantLOCALID(context, list);
        }
        
        public override AstRoot VisitExpression(TSqlParser.ExpressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstExpression(context, list);
        }
        
        public override AstRoot VisitParameter(TSqlParser.ParameterContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstParameter(context, list);
        }
        
        public override AstRoot VisitPrimitive_expression(TSqlParser.Primitive_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstPrimitiveExpression(context, list);
        }
        
        public override AstRoot VisitCase_expression(TSqlParser.Case_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstCaseExpression(context, list);
        }
        
        public override AstRoot VisitUnary_operator_expression(TSqlParser.Unary_operator_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstUnaryOperatorExpression(context, list);
        }
        
        public override AstRoot VisitBracket_expression(TSqlParser.Bracket_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstBracketExpression(context, list);
        }
        
        public override AstRoot VisitConstant_expression(TSqlParser.Constant_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstConstantExpression(context, list);
        }
        
        public override AstRoot VisitWith_expression(TSqlParser.With_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstWithExpression(context, list);
        }
        
        public override AstRoot VisitCommon_table_expression(TSqlParser.Common_table_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstCommonTableExpression(context, list);
        }
        
        public override AstRoot VisitUpdate_elem(TSqlParser.Update_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstUpdateElem(context, list);
        }
        
        public override AstRoot VisitUpdate_elem_merge(TSqlParser.Update_elem_mergeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstUpdateElemMerge(context, list);
        }
        
        public override AstRoot VisitSearch_condition(TSqlParser.Search_conditionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstSearchCondition(context, list);
        }
        
        public override AstRoot VisitPredicate(TSqlParser.PredicateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstPredicate(context, list);
        }
        
        public override AstRoot VisitQuery_expression(TSqlParser.Query_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstQueryExpression(context, list);
        }
        
        public override AstRoot VisitSql_union(TSqlParser.Sql_unionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstSqlUnion(context, list);
        }
        
        public override AstRoot VisitQuery_specification(TSqlParser.Query_specificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstQuerySpecification(context, list);
        }
        
        public override AstRoot VisitGroupSet_list(TSqlParser.GroupSet_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstGroupSetList(context, list);
        }
        
        public override AstRoot VisitGroupBys_list(TSqlParser.GroupBys_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstGroupBysList(context, list);
        }
        
        public override AstRoot VisitTop_clause(TSqlParser.Top_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTopClause(context, list);
        }
        
        public override AstRoot VisitTop_percent(TSqlParser.Top_percentContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTopPercent(context, list);
        }
        
        public override AstRoot VisitTop_count(TSqlParser.Top_countContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTopCount(context, list);
        }
        
        public override AstRoot VisitOrder_by_clause(TSqlParser.Order_by_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstOrderByClause(context, list);
        }
        
        public override AstRoot VisitFor_clause(TSqlParser.For_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstForClause(context, list);
        }
        
        public override AstRoot VisitXml_common_directives(TSqlParser.Xml_common_directivesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstXmlCommonDirectives(context, list);
        }
        
        public override AstRoot VisitOrder_by_expression(TSqlParser.Order_by_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstOrderByExpression(context, list);
        }
        
        public override AstRoot VisitGrouping_sets_item(TSqlParser.Grouping_sets_itemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstGroupingSetsItem(context, list);
        }
        
        public override AstRoot VisitGrouping_sets_list(TSqlParser.Grouping_sets_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstGroupingSetsList(context, list);
        }
        
        public override AstRoot VisitOption(TSqlParser.OptionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstOption(context, list);
        }
        
        public override AstRoot VisitOptimize_for_arg(TSqlParser.Optimize_for_argContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstOptimizeForArg(context, list);
        }
        
        public override AstRoot VisitSelect_list(TSqlParser.Select_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstSelectList(context, list);
        }
        
        public override AstRoot VisitUdt_method_arguments(TSqlParser.Udt_method_argumentsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstUdtMethodArguments(context, list);
        }
        
        public override AstRoot VisitAsterisk(TSqlParser.AsteriskContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAsterisk(context, list);
        }
        
        public override AstRoot VisitColumn_elem_target(TSqlParser.Column_elem_targetContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstColumnElemTarget(context, list);
        }
        
        public override AstRoot VisitUdt_elem(TSqlParser.Udt_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstUdtElem(context, list);
        }
        
        public override AstRoot VisitExpression_elem(TSqlParser.Expression_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstExpressionElem(context, list);
        }
        
        public override AstRoot VisitTable_sources(TSqlParser.Table_sourcesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTableSources(context, list);
        }
        
        public override AstRoot VisitTable_source(TSqlParser.Table_sourceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTableSource(context, list);
        }
        
        public override AstRoot VisitTable_source_item_joined(TSqlParser.Table_source_item_joinedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTableSourceItemJoined(context, list);
        }
        
        public override AstRoot VisitTable_source_item(TSqlParser.Table_source_itemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTableSourceItem(context, list);
        }
        
        public override AstRoot VisitJson_declaration(TSqlParser.Json_declarationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstJsonDeclaration(context, list);
        }
        
        public override AstRoot VisitSchema_declaration(TSqlParser.Schema_declarationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstSchemaDeclaration(context, list);
        }
        
        public override AstRoot VisitChange_table_changes(TSqlParser.Change_table_changesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstChangeTableChanges(context, list);
        }
        
        public override AstRoot VisitChange_table_version(TSqlParser.Change_table_versionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstChangeTableVersion(context, list);
        }
        
        public override AstRoot VisitJoin_on(TSqlParser.Join_onContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstJoinOn(context, list);
        }
        
        public override AstRoot VisitApply_(TSqlParser.Apply_Context context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstApply(context, list);
        }
        
        public override AstRoot VisitFull_column_name_list(TSqlParser.Full_column_name_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstFullColumnNameList(context, list);
        }
        
        public override AstRoot VisitRowset_function(TSqlParser.Rowset_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstRowsetFunction(context, list);
        }
        
        public override AstRoot VisitDerived_table(TSqlParser.Derived_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDerivedTable(context, list);
        }
        
        public override AstRoot VisitFreetext_function(TSqlParser.Freetext_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstFreetextFunction(context, list);
        }
        
        public override AstRoot VisitFreetext_predicate(TSqlParser.Freetext_predicateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstFreetextPredicate(context, list);
        }
        
        public override AstRoot VisitValue_method(TSqlParser.Value_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstValueMethod(context, list);
        }
        
        public override AstRoot VisitValue_call(TSqlParser.Value_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstValueCall(context, list);
        }
        
        public override AstRoot VisitQuery_method(TSqlParser.Query_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstQueryMethod(context, list);
        }
        
        public override AstRoot VisitQuery_call(TSqlParser.Query_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstQueryCall(context, list);
        }
        
        public override AstRoot VisitExist_method(TSqlParser.Exist_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstExistMethod(context, list);
        }
        
        public override AstRoot VisitExist_call(TSqlParser.Exist_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstExistCall(context, list);
        }
        
        public override AstRoot VisitModify_method(TSqlParser.Modify_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstModifyMethod(context, list);
        }
        
        public override AstRoot VisitModify_call(TSqlParser.Modify_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstModifyCall(context, list);
        }
        
        public override AstRoot VisitHierarchyid_call(TSqlParser.Hierarchyid_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstHierarchyidCall(context, list);
        }
        
        public override AstRoot VisitHierarchyid_static_method(TSqlParser.Hierarchyid_static_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstHierarchyidStaticMethod(context, list);
        }
        
        public override AstRoot VisitNodes_method(TSqlParser.Nodes_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstNodesMethod(context, list);
        }
        
        public override AstRoot VisitWith_table_hints(TSqlParser.With_table_hintsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstWithTableHints(context, list);
        }
        
        public override AstRoot VisitSybase_legacy_hint(TSqlParser.Sybase_legacy_hintContext context)
        {
            return new AstSybaseLegacyHint(context, context.GetText());
        }
        
        public override AstRoot VisitTable_hint(TSqlParser.Table_hintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTableHint(context, list);
        }
        
        public override AstRoot VisitIndex_value(TSqlParser.Index_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstIndexValue(context, list);
        }
        
        public override AstRoot VisitColumn_alias_list(TSqlParser.Column_alias_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstColumnAliasList(context, list);
        }
        
        public override AstRoot VisitColumn_alias(TSqlParser.Column_aliasContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstColumnAlias(context, list);
        }
        
        public override AstRoot VisitTable_value_constructor(TSqlParser.Table_value_constructorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTableValueConstructor(context, list);
        }
        
        public override AstRoot VisitExpression_list(TSqlParser.Expression_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstExpressionList(context, list);
        }
        
        public override AstRoot VisitRanking_windowed_function(TSqlParser.Ranking_windowed_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstRankingWindowedFunction(context, list);
        }
        
        public override AstRoot VisitAggregate_windowed_function(TSqlParser.Aggregate_windowed_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAggregateWindowedFunction(context, list);
        }
        
        public override AstRoot VisitAnalytic_windowed_function(TSqlParser.Analytic_windowed_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAnalyticWindowedFunction(context, list);
        }
        
        public override AstRoot VisitWindow_frame_extent(TSqlParser.Window_frame_extentContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstWindowFrameExtent(context, list);
        }
        
        public override AstRoot VisitWindow_frame_preceding(TSqlParser.Window_frame_precedingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstWindowFramePreceding(context, list);
        }
        
        public override AstRoot VisitWindow_frame_following(TSqlParser.Window_frame_followingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstWindowFrameFollowing(context, list);
        }
        
        public override AstRoot VisitCreate_database_option(TSqlParser.Create_database_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstCreateDatabaseOption(context, list);
        }
        
        public override AstRoot VisitDatabase_filestream_option(TSqlParser.Database_filestream_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDatabaseFilestreamOption(context, list);
        }
        
        public override AstRoot VisitEntity_name_for_azure_dw(TSqlParser.Entity_name_for_azure_dwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstEntityNameForAzureDw(context, list);
        }
        
        public override AstRoot VisitEntity_name_for_parallel_dw(TSqlParser.Entity_name_for_parallel_dwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstEntityNameForParallelDw(context, list);
        }
        
        public override AstRoot VisitTable_name(TSqlParser.Table_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstTableName(context, list);
        }
        
        public override AstRoot VisitSimple_name(TSqlParser.Simple_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstSimpleName(context, list);
        }
        
        public override AstRoot VisitFunc_proc_name_database_schema(TSqlParser.Func_proc_name_database_schemaContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstFuncProcNameDatabaseSchema(context, list);
        }
        
        public override AstRoot VisitFunc_proc_name_server_database_schema(TSqlParser.Func_proc_name_server_database_schemaContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstFuncProcNameServerDatabaseSchema(context, list);
        }
        
        public override AstRoot VisitDdl_object(TSqlParser.Ddl_objectContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDdlObject(context, list);
        }
        
        public override AstRoot VisitFull_column_name(TSqlParser.Full_column_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstFullColumnName(context, list);
        }
        
        public override AstRoot VisitInsert_column_name_list(TSqlParser.Insert_column_name_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstInsertColumnNameList(context, list);
        }
        
        public override AstRoot VisitColumn_name_list(TSqlParser.Column_name_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstColumnNameList(context, list);
        }
        
        public override AstRoot VisitCursor_name(TSqlParser.Cursor_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstCursorName(context, list);
        }
        
        public override AstRoot VisitOn_off(TSqlParser.On_offContext context)
        {
            return new AstOnOff(context, context.GetText());
        }
        
        public override AstRoot VisitClustered(TSqlParser.ClusteredContext context)
        {
            return new AstClustered(context, context.GetText());
        }
        
        public override AstRoot VisitNull_notnull(TSqlParser.Null_notnullContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstNullNotnull(context, list);
        }
        
        public override AstRoot VisitNull_or_default(TSqlParser.Null_or_defaultContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstNullOrDefault(context, list);
        }
        
        public override AstRoot VisitScalar_function_name(TSqlParser.Scalar_function_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstScalarFunctionName(context, list);
        }
        
        public override AstRoot VisitContract_name(TSqlParser.Contract_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstContractName(context, list);
        }
        
        public override AstRoot VisitService_name(TSqlParser.Service_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstServiceName(context, list);
        }
        
        public override AstRoot VisitEnd_conversation(TSqlParser.End_conversationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstEndConversation(context, list);
        }
        
        public override AstRoot VisitGet_conversation(TSqlParser.Get_conversationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstGetConversation(context, list);
        }
        
        public override AstRoot VisitQueue_id(TSqlParser.Queue_idContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstQueueId(context, list);
        }
        
        public override AstRoot VisitSend_conversation(TSqlParser.Send_conversationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstSendConversation(context, list);
        }
        
        public override AstRoot VisitData_type(TSqlParser.Data_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDataType(context, list);
        }
        
        public override AstRoot VisitDefault_value(TSqlParser.Default_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstDefaultValue(context, list);
        }
        
        public override AstRoot VisitConstant(TSqlParser.ConstantContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstConstant(context, list);
        }
        
        public override AstRoot VisitSign(TSqlParser.SignContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstSign(context, list);
        }
        
        public override AstRoot VisitKeyword(TSqlParser.KeywordContext context)
        {
            return new AstKeyword(context, context.GetText());
        }
        
        public override AstRoot VisitId_(TSqlParser.Id_Context context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstId(context, list);
        }
        
        public override AstRoot VisitSimple_id(TSqlParser.Simple_idContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstSimpleId(context, list);
        }
        
        public override AstRoot VisitComparison_operator(TSqlParser.Comparison_operatorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstComparisonOperator(context, list);
        }
        
        public override AstRoot VisitAssignment_operator(TSqlParser.Assignment_operatorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstAssignmentOperator(context, list);
        }
        
        public override AstRoot VisitFile_size_unity(TSqlParser.File_size_unityContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                list.Add(item.Accept(this));
            }
            return new AstFileSizeUnity(context, list);
        }
    }
}
